/******************************************************************************/
/***          Generated by IBExpert 2021.1.7.1 24.04.2025 15:41:27          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;

CREATE DATABASE 'fdb.unrealsoft.bg/3050:aton_unreal_test'
USER 'SYSDBA' PASSWORD 'UnRe@1S0'
PAGE_SIZE 4096
DEFAULT CHARACTER SET WIN1251 COLLATION WIN1251;



/******************************************************************************/
/***                      User defined functions (UDF)                      ***/
/******************************************************************************/

DECLARE EXTERNAL FUNCTION "ABS"
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_abs' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION CRYPT_DOUBLE
    DOUBLE PRECISION BY DESCRIPTOR,
    VARCHAR(25)
    RETURNS CSTRING(25) FREE_IT
    ENTRY_POINT 'crypt_double' MODULE_NAME 'fb_udf_tools';


DECLARE EXTERNAL FUNCTION CRYPT_STR
    VARCHAR(100),
    VARCHAR(100)
    RETURNS CSTRING(230) FREE_IT
    ENTRY_POINT 'crypt_str' MODULE_NAME 'fb_udf_tools';


DECLARE EXTERNAL FUNCTION DECRYPT_DOUBLE
    VARCHAR(25),
    VARCHAR(25)
    RETURNS DOUBLE PRECISION FREE_IT
    ENTRY_POINT 'decrypt_double' MODULE_NAME 'fb_udf_tools';


DECLARE EXTERNAL FUNCTION DECRYPT_STR
    VARCHAR(226),
    VARCHAR(100)
    RETURNS CSTRING(120) FREE_IT
    ENTRY_POINT 'decrypt_str' MODULE_NAME 'fb_udf_tools';


DECLARE EXTERNAL FUNCTION GET_MAC
    INTEGER
    RETURNS CSTRING(12) FREE_IT
    ENTRY_POINT 'selectm' MODULE_NAME 'fb_udf_tools';


DECLARE EXTERNAL FUNCTION IP
    INTEGER
    RETURNS CSTRING(15) FREE_IT
    ENTRY_POINT 'convert_ip' MODULE_NAME 'fb_udf_tools';


DECLARE EXTERNAL FUNCTION "MOD"
    INTEGER,
    INTEGER
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_mod' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION ROUND5
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'round5' MODULE_NAME 'fb_udf_tools';


DECLARE EXTERNAL FUNCTION ROUNDD
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'roundd' MODULE_NAME 'fb_udf_tools';


DECLARE EXTERNAL FUNCTION STRLEN
    CSTRING(32767)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'IB_UDF_strlen' MODULE_NAME 'ib_udf';




/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN CURRENCY AS
DOUBLE PRECISION;

CREATE DOMAIN DOM_BLOB AS
BLOB SUB_TYPE 0 SEGMENT SIZE 80;

CREATE DOMAIN DOM_BLOB_TEXT AS
BLOB SUB_TYPE 1 SEGMENT SIZE 80;

CREATE DOMAIN DOM_BOOLEAN AS
CHAR(1)
DEFAULT '0';

CREATE DOMAIN DOM_CENA AS
DOUBLE PRECISION;

CREATE DOMAIN DOM_CHAR_10 AS
VARCHAR(10)
COLLATE PXW_CYRL;

CREATE DOMAIN DOM_CHAR_100 AS
VARCHAR(100);

CREATE DOMAIN DOM_CHAR_1000 AS
VARCHAR(1000);

CREATE DOMAIN DOM_CHAR_120 AS
VARCHAR(120);

CREATE DOMAIN DOM_CHAR_15 AS
VARCHAR(15)
COLLATE PXW_CYRL;

CREATE DOMAIN DOM_CHAR_20 AS
VARCHAR(20)
COLLATE PXW_CYRL;

CREATE DOMAIN DOM_CHAR_2000 AS
VARCHAR(2000);

CREATE DOMAIN DOM_CHAR_30 AS
VARCHAR(30)
COLLATE PXW_CYRL;

CREATE DOMAIN DOM_CHAR_300 AS
VARCHAR(300);

CREATE DOMAIN DOM_CHAR_50 AS
VARCHAR(50)
COLLATE PXW_CYRL;

CREATE DOMAIN DOM_CHAR_8 AS
VARCHAR(8)
COLLATE PXW_CYRL;

CREATE DOMAIN DOM_DATE AS
DATE;

CREATE DOMAIN DOM_DATE_TIME AS
TIMESTAMP;

CREATE DOMAIN DOM_FLAG AS
SMALLINT;

CREATE DOMAIN DOM_FP_GEN AS
CHAR(22)
NOT NULL
COLLATE PXW_CYRL;

CREATE DOMAIN DOM_FP_NUMBER AS
CHAR(8);

CREATE DOMAIN DOM_INT AS
INTEGER;

CREATE DOMAIN DOM_INT64 AS
BIGINT;

CREATE DOMAIN DOM_KEY AS
INTEGER;

CREATE DOMAIN DOM_KEY_SMALL AS
SMALLINT;

CREATE DOMAIN DOM_KOL AS
DOUBLE PRECISION;

CREATE DOMAIN DOM_PERCENT AS
DOUBLE PRECISION;

CREATE DOMAIN DOM_SMAL_INT AS
SMALLINT;

CREATE DOMAIN DOM_STR_3 AS
VARCHAR(3);

CREATE DOMAIN DOM_SUMA AS
DOUBLE PRECISION;

CREATE DOMAIN DOM_TIME AS
TIME;

CREATE DOMAIN DOM_UNP AS
CHAR(21)
NOT NULL
COLLATE PXW_CYRL;

CREATE DOMAIN ED_CENA AS
DOUBLE PRECISION;

CREATE DOMAIN KURS AS
NUMERIC(8,5);

CREATE DOMAIN QTY AS
DOUBLE PRECISION;

CREATE DOMAIN UTF_10 AS
VARCHAR(10) CHARACTER SET UTF8;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_ACTIONS_ID;
SET GENERATOR GEN_ACTIONS_ID TO 0;

CREATE GENERATOR GEN_ADDRESSES_ID;
SET GENERATOR GEN_ADDRESSES_ID TO 0;

CREATE GENERATOR GEN_AMBALAJ_HISTORY_EDIT_ID;
SET GENERATOR GEN_AMBALAJ_HISTORY_EDIT_ID TO 0;

CREATE GENERATOR GEN_AMBALAJ_HISTORY_ID;
SET GENERATOR GEN_AMBALAJ_HISTORY_ID TO 0;

CREATE GENERATOR GEN_AMBALAJ_HIS_ID;
SET GENERATOR GEN_AMBALAJ_HIS_ID TO 0;

CREATE GENERATOR GEN_AMBALAJ_ID;
SET GENERATOR GEN_AMBALAJ_ID TO 0;

CREATE GENERATOR GEN_AMBALAJ_VARNAT_ID;
SET GENERATOR GEN_AMBALAJ_VARNAT_ID TO 0;

CREATE GENERATOR GEN_ANALYSES_ID;
SET GENERATOR GEN_ANALYSES_ID TO 59043;

CREATE GENERATOR GEN_BARCODE_ID;
SET GENERATOR GEN_BARCODE_ID TO 27;

CREATE GENERATOR GEN_BH_OTSTAPKI_ID;
SET GENERATOR GEN_BH_OTSTAPKI_ID TO 0;

CREATE GENERATOR GEN_BH_PROD_POR_ID;
SET GENERATOR GEN_BH_PROD_POR_ID TO 0;

CREATE GENERATOR GEN_BONUSI_ZA_RAZCHET_ID;
SET GENERATOR GEN_BONUSI_ZA_RAZCHET_ID TO 1892;

CREATE GENERATOR GEN_BONUS_CENA_TOCHKI_ID;
SET GENERATOR GEN_BONUS_CENA_TOCHKI_ID TO 0;

CREATE GENERATOR GEN_BONUS_CONFIG_ID;
SET GENERATOR GEN_BONUS_CONFIG_ID TO 16;

CREATE GENERATOR GEN_BONUS_CONFIG_KLI_ID;
SET GENERATOR GEN_BONUS_CONFIG_KLI_ID TO 14;

CREATE GENERATOR GEN_BONUS_CONFIG_SKLAD_ID;
SET GENERATOR GEN_BONUS_CONFIG_SKLAD_ID TO 0;

CREATE GENERATOR GEN_BONUS_KLI_USED_ID;
SET GENERATOR GEN_BONUS_KLI_USED_ID TO 0;

CREATE GENERATOR GEN_BONUS_RAZCHET_NODE_ID;
SET GENERATOR GEN_BONUS_RAZCHET_NODE_ID TO 0;

CREATE GENERATOR GEN_BROENE_EL_DETAILS_ID;
SET GENERATOR GEN_BROENE_EL_DETAILS_ID TO 0;

CREATE GENERATOR GEN_BROENE_EL_ID;
SET GENERATOR GEN_BROENE_EL_ID TO 77;

CREATE GENERATOR GEN_BROENE_EL_RAZ_NODE_ID;
SET GENERATOR GEN_BROENE_EL_RAZ_NODE_ID TO 0;

CREATE GENERATOR GEN_BROENE_ID;
SET GENERATOR GEN_BROENE_ID TO 27;

CREATE GENERATOR GEN_CENOVA_LISTA_EDIT_ID;
SET GENERATOR GEN_CENOVA_LISTA_EDIT_ID TO 35;

CREATE GENERATOR GEN_CENOVA_LISTA_EL_EDIT_ID;
SET GENERATOR GEN_CENOVA_LISTA_EL_EDIT_ID TO 510;

CREATE GENERATOR GEN_CENOVA_LISTA_EL_ID;
SET GENERATOR GEN_CENOVA_LISTA_EL_ID TO 2055;

CREATE GENERATOR GEN_CENOVA_LISTA_HISTORY_ID;
SET GENERATOR GEN_CENOVA_LISTA_HISTORY_ID TO 601;

CREATE GENERATOR GEN_CENOVA_LISTA_ID;
SET GENERATOR GEN_CENOVA_LISTA_ID TO 34;

CREATE GENERATOR GEN_CENOVA_LISTA_KLI_EDIT_ID;
SET GENERATOR GEN_CENOVA_LISTA_KLI_EDIT_ID TO 4811;

CREATE GENERATOR GEN_CENOVA_LISTA_KLI_ID;
SET GENERATOR GEN_CENOVA_LISTA_KLI_ID TO 15683;

CREATE GENERATOR GEN_CENOVA_LISTA_PROTOKOL_ID;
SET GENERATOR GEN_CENOVA_LISTA_PROTOKOL_ID TO 0;

CREATE GENERATOR GEN_CENOVA_LISTA_SKLAD_EDIT_ID;
SET GENERATOR GEN_CENOVA_LISTA_SKLAD_EDIT_ID TO 0;

CREATE GENERATOR GEN_CENOVA_LISTA_SKLAD_ID;
SET GENERATOR GEN_CENOVA_LISTA_SKLAD_ID TO 0;

CREATE GENERATOR GEN_CFG_FAK_ACCOUNTING_ID;
SET GENERATOR GEN_CFG_FAK_ACCOUNTING_ID TO 0;

CREATE GENERATOR GEN_CFG_INFO_ID;
SET GENERATOR GEN_CFG_INFO_ID TO 0;

CREATE GENERATOR GEN_CFG_KASA_TEMPLATE_EL_ID;
SET GENERATOR GEN_CFG_KASA_TEMPLATE_EL_ID TO 0;

CREATE GENERATOR GEN_CFG_KASA_TEMPLATE_ID;
SET GENERATOR GEN_CFG_KASA_TEMPLATE_ID TO 53985;

CREATE GENERATOR GEN_CFG_LOG_ID;
SET GENERATOR GEN_CFG_LOG_ID TO 167478;

CREATE GENERATOR GEN_CFG_OSN_DDS_ID;
SET GENERATOR GEN_CFG_OSN_DDS_ID TO 7;

CREATE GENERATOR GEN_CFG_PAYMENTS_ID;
SET GENERATOR GEN_CFG_PAYMENTS_ID TO 2;

CREATE GENERATOR GEN_CFG_PAYMENTS_KLI_ID;
SET GENERATOR GEN_CFG_PAYMENTS_KLI_ID TO 0;

CREATE GENERATOR GEN_CFG_RAZPAD_CALC_ID;
SET GENERATOR GEN_CFG_RAZPAD_CALC_ID TO 0;

CREATE GENERATOR GEN_CFG_VEZNI_ID;
SET GENERATOR GEN_CFG_VEZNI_ID TO 4;

CREATE GENERATOR GEN_CLAIM_EL_ID;
SET GENERATOR GEN_CLAIM_EL_ID TO 0;

CREATE GENERATOR GEN_CLAIM_NUM;
SET GENERATOR GEN_CLAIM_NUM TO 0;

CREATE GENERATOR GEN_CLOTH_SIZE_ID;
SET GENERATOR GEN_CLOTH_SIZE_ID TO 1;

CREATE GENERATOR GEN_CN_DELIVERY_ELEMENTS_ID;
SET GENERATOR GEN_CN_DELIVERY_ELEMENTS_ID TO 0;

CREATE GENERATOR GEN_COMMENTS_ID;
SET GENERATOR GEN_COMMENTS_ID TO 406924;

CREATE GENERATOR GEN_COMMENT_EINVOICE_NODE_ID;
SET GENERATOR GEN_COMMENT_EINVOICE_NODE_ID TO 50908;

CREATE GENERATOR GEN_COMMENT_FIRMI_NODE_ID;
SET GENERATOR GEN_COMMENT_FIRMI_NODE_ID TO 13;

CREATE GENERATOR GEN_COMMENT_ID;
SET GENERATOR GEN_COMMENT_ID TO 16441;

CREATE GENERATOR GEN_COMMENT_KLI_NODE_ID;
SET GENERATOR GEN_COMMENT_KLI_NODE_ID TO 465;

CREATE GENERATOR GEN_COMMENT_OPR_NODE_ID;
SET GENERATOR GEN_COMMENT_OPR_NODE_ID TO 350383;

CREATE GENERATOR GEN_COMMENT_OPR_TMPLT_NODE_ID;
SET GENERATOR GEN_COMMENT_OPR_TMPLT_NODE_ID TO 0;

CREATE GENERATOR GEN_COMMENT_SIMPLE_NODE_ID;
SET GENERATOR GEN_COMMENT_SIMPLE_NODE_ID TO 0;

CREATE GENERATOR GEN_COMMENT_TASKS_NODE_ID;
SET GENERATOR GEN_COMMENT_TASKS_NODE_ID TO 5638;

CREATE GENERATOR GEN_COUNTIES_ID;
SET GENERATOR GEN_COUNTIES_ID TO 0;

CREATE GENERATOR GEN_COUNTRIES_ID;
SET GENERATOR GEN_COUNTRIES_ID TO 224;

CREATE GENERATOR GEN_COURSES_ID;
SET GENERATOR GEN_COURSES_ID TO 1;

CREATE GENERATOR GEN_COURSES_OPR_NODE_ID;
SET GENERATOR GEN_COURSES_OPR_NODE_ID TO 13;

CREATE GENERATOR GEN_CRM_ATON_PRODUKT_ID;
SET GENERATOR GEN_CRM_ATON_PRODUKT_ID TO 96;

CREATE GENERATOR GEN_CRM_INFO_LICENZIA_ID;
SET GENERATOR GEN_CRM_INFO_LICENZIA_ID TO 6875;

CREATE GENERATOR GEN_CRM_KLI_ID;
SET GENERATOR GEN_CRM_KLI_ID TO 10227;

CREATE GENERATOR GEN_DEF_RAZ_SIMPLE_ID;
SET GENERATOR GEN_DEF_RAZ_SIMPLE_ID TO 0;

CREATE GENERATOR GEN_DELIVERY_CURRENCY_ID;
SET GENERATOR GEN_DELIVERY_CURRENCY_ID TO 0;

CREATE GENERATOR GEN_DOCUMENTS_ID;
SET GENERATOR GEN_DOCUMENTS_ID TO 27430;

CREATE GENERATOR GEN_DOCUMENTS_TIP_CODE_ID;
SET GENERATOR GEN_DOCUMENTS_TIP_CODE_ID TO 61;

CREATE GENERATOR GEN_DOCUMENTS_TIP_ID;
SET GENERATOR GEN_DOCUMENTS_TIP_ID TO 13;

CREATE GENERATOR GEN_DOC_ID;
SET GENERATOR GEN_DOC_ID TO 0;

CREATE GENERATOR GEN_DOC_NUM;
SET GENERATOR GEN_DOC_NUM TO 0;

CREATE GENERATOR GEN_DOST_CENI_ID;
SET GENERATOR GEN_DOST_CENI_ID TO 23098;

CREATE GENERATOR GEN_DOST_IMPORT_KLI_MAP_ID;
SET GENERATOR GEN_DOST_IMPORT_KLI_MAP_ID TO 2;

CREATE GENERATOR GEN_DOST_IMPORT_RAZF_MAP_ID;
SET GENERATOR GEN_DOST_IMPORT_RAZF_MAP_ID TO 0;

CREATE GENERATOR GEN_DOST_IMPORT_SIMPLE_MAP_ID;
SET GENERATOR GEN_DOST_IMPORT_SIMPLE_MAP_ID TO 3;

CREATE GENERATOR GEN_DOST_NODE_ID;
SET GENERATOR GEN_DOST_NODE_ID TO 54;

CREATE GENERATOR GEN_DVSK_DOK_TYPE_ID;
SET GENERATOR GEN_DVSK_DOK_TYPE_ID TO 5;

CREATE GENERATOR GEN_DVSK_EL_ID;
SET GENERATOR GEN_DVSK_EL_ID TO 41;

CREATE GENERATOR GEN_DVSK_OPR_ID;
SET GENERATOR GEN_DVSK_OPR_ID TO 0;

CREATE GENERATOR GEN_EGROUPS_ID;
SET GENERATOR GEN_EGROUPS_ID TO 0;

CREATE GENERATOR GEN_ESIMPLE_ID;
SET GENERATOR GEN_ESIMPLE_ID TO 0;

CREATE GENERATOR GEN_ETIKETI_ID;
SET GENERATOR GEN_ETIKETI_ID TO 4;

CREATE GENERATOR GEN_EXCHANGE_SN_ID;
SET GENERATOR GEN_EXCHANGE_SN_ID TO 3613;

CREATE GENERATOR GEN_EXPLANATORY_ID;
SET GENERATOR GEN_EXPLANATORY_ID TO 0;

CREATE GENERATOR GEN_EXPORTED_OPERATIONS_ID;
SET GENERATOR GEN_EXPORTED_OPERATIONS_ID TO 0;

CREATE GENERATOR GEN_EXPORTS_ID;
SET GENERATOR GEN_EXPORTS_ID TO 21;

CREATE GENERATOR GEN_EXPORT_OPR_ID;
SET GENERATOR GEN_EXPORT_OPR_ID TO 0;

CREATE GENERATOR GEN_EXPORT_SYNC_ID;
SET GENERATOR GEN_EXPORT_SYNC_ID TO 0;

CREATE GENERATOR GEN_EXPORT_VENDORS_ID;
SET GENERATOR GEN_EXPORT_VENDORS_ID TO 0;

CREATE GENERATOR GEN_EXTENDED_VARANTY_NODE_ID;
SET GENERATOR GEN_EXTENDED_VARANTY_NODE_ID TO 0;

CREATE GENERATOR GEN_FAKTURA_OSNOVANIE_ID;
SET GENERATOR GEN_FAKTURA_OSNOVANIE_ID TO 130;

CREATE GENERATOR GEN_FAK_EL_ID;
SET GENERATOR GEN_FAK_EL_ID TO 307671;

CREATE GENERATOR GEN_FAK_EL_IN_EL_NODE_ID;
SET GENERATOR GEN_FAK_EL_IN_EL_NODE_ID TO 1328;

CREATE GENERATOR GEN_FAK_ID;
SET GENERATOR GEN_FAK_ID TO 209262;

CREATE GENERATOR GEN_FAK_IN_EL_NODE_ID;
SET GENERATOR GEN_FAK_IN_EL_NODE_ID TO 43006;

CREATE GENERATOR GEN_FAK_IN_ID;
SET GENERATOR GEN_FAK_IN_ID TO 54740;

CREATE GENERATOR GEN_FAK_IN_SUMI_ID;
SET GENERATOR GEN_FAK_IN_SUMI_ID TO 2274;

CREATE GENERATOR GEN_FAK_KI_NUMBER_ID;
SET GENERATOR GEN_FAK_KI_NUMBER_ID TO 792;

CREATE GENERATOR GEN_FAK_OUT_EL_NODE_ID;
SET GENERATOR GEN_FAK_OUT_EL_NODE_ID TO 608605;

CREATE GENERATOR GEN_FAK_PROD_ID;
SET GENERATOR GEN_FAK_PROD_ID TO 422867;

CREATE GENERATOR GEN_FAK_PROD_REAL_PROD_NODE_ID;
SET GENERATOR GEN_FAK_PROD_REAL_PROD_NODE_ID TO 0;

CREATE GENERATOR GEN_FIRMI_FAK_DATA_ID;
SET GENERATOR GEN_FIRMI_FAK_DATA_ID TO 189002;

CREATE GENERATOR GEN_FIRMI_ID;
SET GENERATOR GEN_FIRMI_ID TO 5332;

CREATE GENERATOR GEN_FISKAL_BONS_ID;
SET GENERATOR GEN_FISKAL_BONS_ID TO 0;

CREATE GENERATOR GEN_FP_ID;
SET GENERATOR GEN_FP_ID TO 0;

CREATE GENERATOR GEN_FR_REPORTS_ID;
SET GENERATOR GEN_FR_REPORTS_ID TO 429;

CREATE GENERATOR GEN_FU_EXPORT_DOGOVOR_ID;
SET GENERATOR GEN_FU_EXPORT_DOGOVOR_ID TO 30915;

CREATE GENERATOR GEN_FU_ID;
SET GENERATOR GEN_FU_ID TO 0;

CREATE GENERATOR GEN_FU_OBOROTI_ID;
SET GENERATOR GEN_FU_OBOROTI_ID TO 0;

CREATE GENERATOR GEN_FU_SER_NUM_ID;
SET GENERATOR GEN_FU_SER_NUM_ID TO 0;

CREATE GENERATOR GEN_GARANCII_ID;
SET GENERATOR GEN_GARANCII_ID TO 7;

CREATE GENERATOR GEN_GRFINGER_ID;
SET GENERATOR GEN_GRFINGER_ID TO 0;

CREATE GENERATOR GEN_HGROUPS_ID;
SET GENERATOR GEN_HGROUPS_ID TO 0;

CREATE GENERATOR GEN_INI_ID;
SET GENERATOR GEN_INI_ID TO 472;

CREATE GENERATOR GEN_INSTALLATIONS_ID;
SET GENERATOR GEN_INSTALLATIONS_ID TO 0;

CREATE GENERATOR GEN_INSTALLATION_PICTURES_ID;
SET GENERATOR GEN_INSTALLATION_PICTURES_ID TO 0;

CREATE GENERATOR GEN_INSTALLATION_USERS_ID;
SET GENERATOR GEN_INSTALLATION_USERS_ID TO 0;

CREATE GENERATOR GEN_INSTALLERS_GROUP_ID;
SET GENERATOR GEN_INSTALLERS_GROUP_ID TO 0;

CREATE GENERATOR GEN_INSTALLERS_ID;
SET GENERATOR GEN_INSTALLERS_ID TO 0;

CREATE GENERATOR GEN_INTRASTAT_DATA_ID;
SET GENERATOR GEN_INTRASTAT_DATA_ID TO 0;

CREATE GENERATOR GEN_INTRASTAT_DEAL_TYPE_ID;
SET GENERATOR GEN_INTRASTAT_DEAL_TYPE_ID TO 4;

CREATE GENERATOR GEN_INTRASTAT_DELIVERY_CONDITIO;
SET GENERATOR GEN_INTRASTAT_DELIVERY_CONDITIO TO 11;

CREATE GENERATOR GEN_INTRASTAT_REGION_ID;
SET GENERATOR GEN_INTRASTAT_REGION_ID TO 30;

CREATE GENERATOR GEN_INTRASTAT_TRANSPORT_TYPE_ID;
SET GENERATOR GEN_INTRASTAT_TRANSPORT_TYPE_ID TO 8;

CREATE GENERATOR GEN_INV_ID;
SET GENERATOR GEN_INV_ID TO 66;

CREATE GENERATOR GEN_INV_IZL_ID;
SET GENERATOR GEN_INV_IZL_ID TO 19;

CREATE GENERATOR GEN_INV_NACH_INI_ID;
SET GENERATOR GEN_INV_NACH_INI_ID TO 52;

CREATE GENERATOR GEN_INV_OPIS_ID;
SET GENERATOR GEN_INV_OPIS_ID TO 165;

CREATE GENERATOR GEN_IN_EL2_ID;
SET GENERATOR GEN_IN_EL2_ID TO 39;

CREATE GENERATOR GEN_IN_EL_ANUL_ID;
SET GENERATOR GEN_IN_EL_ANUL_ID TO 969;

CREATE GENERATOR GEN_IN_EL_EDIT_ID;
SET GENERATOR GEN_IN_EL_EDIT_ID TO 5200;

CREATE GENERATOR GEN_IN_EL_ID;
SET GENERATOR GEN_IN_EL_ID TO 55416;

CREATE GENERATOR GEN_IN_EL_RAZ_NODE_ID;
SET GENERATOR GEN_IN_EL_RAZ_NODE_ID TO 0;

CREATE GENERATOR GEN_IN_ID;
SET GENERATOR GEN_IN_ID TO 31497;

CREATE GENERATOR GEN_IN_TO_FAK_EL_ID;
SET GENERATOR GEN_IN_TO_FAK_EL_ID TO 0;

CREATE GENERATOR GEN_IZL_ID;
SET GENERATOR GEN_IZL_ID TO 2171;

CREATE GENERATOR GEN_IZP_ID;
SET GENERATOR GEN_IZP_ID TO 1004;

CREATE GENERATOR GEN_IZP_TIP_ID;
SET GENERATOR GEN_IZP_TIP_ID TO 4;

CREATE GENERATOR GEN_KASA_ID;
SET GENERATOR GEN_KASA_ID TO 78;

CREATE GENERATOR GEN_KA_DEMONTAJ_DDS_ID;
SET GENERATOR GEN_KA_DEMONTAJ_DDS_ID TO 2353;

CREATE GENERATOR GEN_KA_INFO_ID;
SET GENERATOR GEN_KA_INFO_ID TO 0;

CREATE GENERATOR GEN_KA_LOG_NODE_ID;
SET GENERATOR GEN_KA_LOG_NODE_ID TO 3486;

CREATE GENERATOR GEN_KA_PROIZVODITEL_ID;
SET GENERATOR GEN_KA_PROIZVODITEL_ID TO 6;

CREATE GENERATOR GEN_KA_SER_NUM_ID;
SET GENERATOR GEN_KA_SER_NUM_ID TO 228963;

CREATE GENERATOR GEN_KI_DOST_NODE_ID;
SET GENERATOR GEN_KI_DOST_NODE_ID TO 197;

CREATE GENERATOR GEN_KI_DOST_SUMA_EL_ID;
SET GENERATOR GEN_KI_DOST_SUMA_EL_ID TO 375;

CREATE GENERATOR GEN_KI_DOST_SUMA_FAK_ID;
SET GENERATOR GEN_KI_DOST_SUMA_FAK_ID TO 14;

CREATE GENERATOR GEN_KI_DOST_SUMA_ID;
SET GENERATOR GEN_KI_DOST_SUMA_ID TO 17;

CREATE GENERATOR GEN_KI_NODE_ID;
SET GENERATOR GEN_KI_NODE_ID TO 811;

CREATE GENERATOR GEN_KI_PROD_SUMA_EL_ID;
SET GENERATOR GEN_KI_PROD_SUMA_EL_ID TO 81;

CREATE GENERATOR GEN_KLI_ABONAMENT_ID;
SET GENERATOR GEN_KLI_ABONAMENT_ID TO 675;

CREATE GENERATOR GEN_KLI_AGENTS_ID;
SET GENERATOR GEN_KLI_AGENTS_ID TO 1;

CREATE GENERATOR GEN_KLI_DIST_NODE_ID;
SET GENERATOR GEN_KLI_DIST_NODE_ID TO 5881;

CREATE GENERATOR GEN_KLI_DOST_NODE_ID;
SET GENERATOR GEN_KLI_DOST_NODE_ID TO 6862;

CREATE GENERATOR GEN_KLI_EXTENDED_VARANTY_ID;
SET GENERATOR GEN_KLI_EXTENDED_VARANTY_ID TO 0;

CREATE GENERATOR GEN_KLI_FIRMA_NODE_ID;
SET GENERATOR GEN_KLI_FIRMA_NODE_ID TO 1816;

CREATE GENERATOR GEN_KLI_GROUP_ID;
SET GENERATOR GEN_KLI_GROUP_ID TO 18;

CREATE GENERATOR GEN_KLI_ID;
SET GENERATOR GEN_KLI_ID TO 8666;

CREATE GENERATOR GEN_KLI_KASA_MAIL_NODE_ID;
SET GENERATOR GEN_KLI_KASA_MAIL_NODE_ID TO 0;

CREATE GENERATOR GEN_KLI_POCKET_NODE_ID;
SET GENERATOR GEN_KLI_POCKET_NODE_ID TO 0;

CREATE GENERATOR GEN_KLI_PRAGOVE_ID;
SET GENERATOR GEN_KLI_PRAGOVE_ID TO 0;

CREATE GENERATOR GEN_KLI_SKLAD_NODE_ID;
SET GENERATOR GEN_KLI_SKLAD_NODE_ID TO 150;

CREATE GENERATOR GEN_KLI_TOCHKI_NODE_ID;
SET GENERATOR GEN_KLI_TOCHKI_NODE_ID TO 0;

CREATE GENERATOR GEN_KLI_USER_NODE_ID;
SET GENERATOR GEN_KLI_USER_NODE_ID TO 0;

CREATE GENERATOR GEN_KONSIGNACIA_ID;
SET GENERATOR GEN_KONSIGNACIA_ID TO 134;

CREATE GENERATOR GEN_LAYOUTS_ID;
SET GENERATOR GEN_LAYOUTS_ID TO 39;

CREATE GENERATOR GEN_LICENCE_EL_ID;
SET GENERATOR GEN_LICENCE_EL_ID TO 147581;

CREATE GENERATOR GEN_LICENZ_PROD_NODE_ID;
SET GENERATOR GEN_LICENZ_PROD_NODE_ID TO 313696;

CREATE GENERATOR GEN_LOCK_OPR_EL_ID;
SET GENERATOR GEN_LOCK_OPR_EL_ID TO 130825;

CREATE GENERATOR GEN_LOCK_OPR_ID;
SET GENERATOR GEN_LOCK_OPR_ID TO 2993;

CREATE GENERATOR GEN_LOG_CENI_DDS_ID;
SET GENERATOR GEN_LOG_CENI_DDS_ID TO 5;

CREATE GENERATOR GEN_MESA_ID;
SET GENERATOR GEN_MESA_ID TO 0;

CREATE GENERATOR GEN_MESA_TIP_ID;
SET GENERATOR GEN_MESA_TIP_ID TO 1;

CREATE GENERATOR GEN_MESSAGES_ID;
SET GENERATOR GEN_MESSAGES_ID TO 5681;

CREATE GENERATOR GEN_METRO_ARTICLES_ID;
SET GENERATOR GEN_METRO_ARTICLES_ID TO 0;

CREATE GENERATOR GEN_METRO_EXPORT_OPR_ID;
SET GENERATOR GEN_METRO_EXPORT_OPR_ID TO 0;

CREATE GENERATOR GEN_METRO_EXPORT_SIMPLES_ID;
SET GENERATOR GEN_METRO_EXPORT_SIMPLES_ID TO 0;

CREATE GENERATOR GEN_METRO_INVOICE_DOCUMENTS_ID;
SET GENERATOR GEN_METRO_INVOICE_DOCUMENTS_ID TO 0;

CREATE GENERATOR GEN_ME_ID;
SET GENERATOR GEN_ME_ID TO 11;

CREATE GENERATOR GEN_MOVE_ID;
SET GENERATOR GEN_MOVE_ID TO 8166;

CREATE GENERATOR GEN_NAL2_ID;
SET GENERATOR GEN_NAL2_ID TO 30;

CREATE GENERATOR GEN_NAL_ID;
SET GENERATOR GEN_NAL_ID TO 170398;

CREATE GENERATOR GEN_OBEKT_ID;
SET GENERATOR GEN_OBEKT_ID TO 18;

CREATE GENERATOR GEN_OFERTA_EL_ID;
SET GENERATOR GEN_OFERTA_EL_ID TO 684;

CREATE GENERATOR GEN_OFERTA_ID;
SET GENERATOR GEN_OFERTA_ID TO 27;

CREATE GENERATOR GEN_OFFERS_ID;
SET GENERATOR GEN_OFFERS_ID TO 0;

CREATE GENERATOR GEN_OFFER_EL_ID;
SET GENERATOR GEN_OFFER_EL_ID TO 0;

CREATE GENERATOR GEN_OFFER_POR_NODE_ID;
SET GENERATOR GEN_OFFER_POR_NODE_ID TO 0;

CREATE GENERATOR GEN_OFFER_TERMS_ID;
SET GENERATOR GEN_OFFER_TERMS_ID TO 0;

CREATE GENERATOR GEN_OFFER_USER_NODE_ID;
SET GENERATOR GEN_OFFER_USER_NODE_ID TO 0;

CREATE GENERATOR GEN_OFF_ON_LINE_LOG_ID;
SET GENERATOR GEN_OFF_ON_LINE_LOG_ID TO 0;

CREATE GENERATOR GEN_OLD_IN_EL_ID;
SET GENERATOR GEN_OLD_IN_EL_ID TO 7297;

CREATE GENERATOR GEN_OLD_OFFERS_ID;
SET GENERATOR GEN_OLD_OFFERS_ID TO 0;

CREATE GENERATOR GEN_OLD_OFFER_EL_ID;
SET GENERATOR GEN_OLD_OFFER_EL_ID TO 0;

CREATE GENERATOR GEN_OLD_OFFER_USER_NODE_ID;
SET GENERATOR GEN_OLD_OFFER_USER_NODE_ID TO 0;

CREATE GENERATOR GEN_OLD_OUT_EL_ID;
SET GENERATOR GEN_OLD_OUT_EL_ID TO 38856;

CREATE GENERATOR GEN_OLD_OUT_EL_PE_ID;
SET GENERATOR GEN_OLD_OUT_EL_PE_ID TO 0;

CREATE GENERATOR GEN_OLD_PARI_EL_ID;
SET GENERATOR GEN_OLD_PARI_EL_ID TO 18988;

CREATE GENERATOR GEN_OLD_POR_EL_PARAMS_ID;
SET GENERATOR GEN_OLD_POR_EL_PARAMS_ID TO 0;

CREATE GENERATOR GEN_OLD_POR_EL_PRICE_COEF_ID;
SET GENERATOR GEN_OLD_POR_EL_PRICE_COEF_ID TO 0;

CREATE GENERATOR GEN_OLD_REQUEST_EL_ID;
SET GENERATOR GEN_OLD_REQUEST_EL_ID TO 0;

CREATE GENERATOR GEN_OLD_TASKS_ID;
SET GENERATOR GEN_OLD_TASKS_ID TO 17711;

CREATE GENERATOR GEN_ONLINE_ROLES_ID;
SET GENERATOR GEN_ONLINE_ROLES_ID TO 15;

CREATE GENERATOR GEN_ONLINE_USERS_ID;
SET GENERATOR GEN_ONLINE_USERS_ID TO 2;

CREATE GENERATOR GEN_ON_OFF_LINE_LOG;
SET GENERATOR GEN_ON_OFF_LINE_LOG TO 1792;

CREATE GENERATOR GEN_OPENED_FORMS_SYS_ID;
SET GENERATOR GEN_OPENED_FORMS_SYS_ID TO 8;

CREATE GENERATOR GEN_OPRGARANCIA_ID;
SET GENERATOR GEN_OPRGARANCIA_ID TO 289;

CREATE GENERATOR GEN_OPR_AMBALAJ_NODE_ID;
SET GENERATOR GEN_OPR_AMBALAJ_NODE_ID TO 0;

CREATE GENERATOR GEN_OPR_ANUL_ID;
SET GENERATOR GEN_OPR_ANUL_ID TO 22977;

CREATE GENERATOR GEN_OPR_EDIT_ID;
SET GENERATOR GEN_OPR_EDIT_ID TO 48695;

CREATE GENERATOR GEN_OPR_GARANCIA_NODE_ID;
SET GENERATOR GEN_OPR_GARANCIA_NODE_ID TO 183;

CREATE GENERATOR GEN_OPR_ID;
SET GENERATOR GEN_OPR_ID TO 1552348;

CREATE GENERATOR GEN_OPR_PADEJ_ID;
SET GENERATOR GEN_OPR_PADEJ_ID TO 672755;

CREATE GENERATOR GEN_OPR_PAYMENT_NODE_ID;
SET GENERATOR GEN_OPR_PAYMENT_NODE_ID TO 641835;

CREATE GENERATOR GEN_OPR_PRODUCTION_REQUEST_ID;
SET GENERATOR GEN_OPR_PRODUCTION_REQUEST_ID TO 0;

CREATE GENERATOR GEN_OPR_RAZPAD_NODE_ID;
SET GENERATOR GEN_OPR_RAZPAD_NODE_ID TO 34850;

CREATE GENERATOR GEN_OPR_RECEPIES_EL_ID;
SET GENERATOR GEN_OPR_RECEPIES_EL_ID TO 0;

CREATE GENERATOR GEN_OPR_RECEPIES_ID;
SET GENERATOR GEN_OPR_RECEPIES_ID TO 0;

CREATE GENERATOR GEN_OPR_REFUSED_ID;
SET GENERATOR GEN_OPR_REFUSED_ID TO 1258;

CREATE GENERATOR GEN_OPR_REMOTE_ID;
SET GENERATOR GEN_OPR_REMOTE_ID TO 0;

CREATE GENERATOR GEN_OPR_SUMI_ID;
SET GENERATOR GEN_OPR_SUMI_ID TO 513106;

CREATE GENERATOR GEN_OPR_TEMPLATE_EL_ID;
SET GENERATOR GEN_OPR_TEMPLATE_EL_ID TO 67486;

CREATE GENERATOR GEN_OPR_TEMPLATE_GEN_ID;
SET GENERATOR GEN_OPR_TEMPLATE_GEN_ID TO 25746;

CREATE GENERATOR GEN_OPR_TEMPLATE_ID;
SET GENERATOR GEN_OPR_TEMPLATE_ID TO 12002;

CREATE GENERATOR GEN_OPR_TEMPLATE_TASK_NODE_ID;
SET GENERATOR GEN_OPR_TEMPLATE_TASK_NODE_ID TO 244881;

CREATE GENERATOR GEN_OPR_TIP_ID;
SET GENERATOR GEN_OPR_TIP_ID TO 0;

CREATE GENERATOR GEN_OPR_WAITING_NODE_ID;
SET GENERATOR GEN_OPR_WAITING_NODE_ID TO 1;

CREATE GENERATOR GEN_ORDER_ACTIONS_ID;
SET GENERATOR GEN_ORDER_ACTIONS_ID TO 1;

CREATE GENERATOR GEN_ORDER_TAG;
SET GENERATOR GEN_ORDER_TAG TO 0;

CREATE GENERATOR GEN_OTCS_OPR_NODE_ID;
SET GENERATOR GEN_OTCS_OPR_NODE_ID TO 0;

CREATE GENERATOR GEN_OTC_EL_EDIT_ID;
SET GENERATOR GEN_OTC_EL_EDIT_ID TO 521239;

CREATE GENERATOR GEN_OTC_EL_EDIT_P_NOMER;
SET GENERATOR GEN_OTC_EL_EDIT_P_NOMER TO 17230;

CREATE GENERATOR GEN_OTC_EL_ID;
SET GENERATOR GEN_OTC_EL_ID TO 155782;

CREATE GENERATOR GEN_OTC_ID;
SET GENERATOR GEN_OTC_ID TO 6163;

CREATE GENERATOR GEN_OTC_PER_ID;
SET GENERATOR GEN_OTC_PER_ID TO 65074;

CREATE GENERATOR GEN_OUT_EL2_ID;
SET GENERATOR GEN_OUT_EL2_ID TO 39;

CREATE GENERATOR GEN_OUT_EL_ANUL_ID;
SET GENERATOR GEN_OUT_EL_ANUL_ID TO 13211;

CREATE GENERATOR GEN_OUT_EL_EDIT_ID;
SET GENERATOR GEN_OUT_EL_EDIT_ID TO 24676;

CREATE GENERATOR GEN_OUT_EL_FAK_OUT_EL_ID;
SET GENERATOR GEN_OUT_EL_FAK_OUT_EL_ID TO 0;

CREATE GENERATOR GEN_OUT_EL_ID;
SET GENERATOR GEN_OUT_EL_ID TO 833442;

CREATE GENERATOR GEN_OUT_EL_RAZ_NODE_ID;
SET GENERATOR GEN_OUT_EL_RAZ_NODE_ID TO 0;

CREATE GENERATOR GEN_OUT_ID;
SET GENERATOR GEN_OUT_ID TO 470849;

CREATE GENERATOR GEN_OWNER_BANKI_ID;
SET GENERATOR GEN_OWNER_BANKI_ID TO 1;

CREATE GENERATOR GEN_OWNER_ID;
SET GENERATOR GEN_OWNER_ID TO 1;

CREATE GENERATOR GEN_PARI_DIST_ID;
SET GENERATOR GEN_PARI_DIST_ID TO 126729;

CREATE GENERATOR GEN_PARI_EL_ANUL_ID;
SET GENERATOR GEN_PARI_EL_ANUL_ID TO 307;

CREATE GENERATOR GEN_PARI_EL_EDIT_ID;
SET GENERATOR GEN_PARI_EL_EDIT_ID TO 1644;

CREATE GENERATOR GEN_PARI_FAKINUSLUGA_NODE_ID;
SET GENERATOR GEN_PARI_FAKINUSLUGA_NODE_ID TO 40391;

CREATE GENERATOR GEN_PARI_FAK_NODE_ID;
SET GENERATOR GEN_PARI_FAK_NODE_ID TO 205921;

CREATE GENERATOR GEN_PARI_ID;
SET GENERATOR GEN_PARI_ID TO 447740;

CREATE GENERATOR GEN_PARI_IO_ID;
SET GENERATOR GEN_PARI_IO_ID TO 143;

CREATE GENERATOR GEN_PARI_NODE_ID;
SET GENERATOR GEN_PARI_NODE_ID TO 23916;

CREATE GENERATOR GEN_PARI_SKLOPR_NODE_ID;
SET GENERATOR GEN_PARI_SKLOPR_NODE_ID TO 278811;

CREATE GENERATOR GEN_PARI_TMP_ID;
SET GENERATOR GEN_PARI_TMP_ID TO 20544;

CREATE GENERATOR GEN_PARTIDA_EL_ID;
SET GENERATOR GEN_PARTIDA_EL_ID TO 63557;

CREATE GENERATOR GEN_PARTIDA_EL_NODE_ID;
SET GENERATOR GEN_PARTIDA_EL_NODE_ID TO 16247368;

CREATE GENERATOR GEN_PARTIDA_EL_PRINT_ID;
SET GENERATOR GEN_PARTIDA_EL_PRINT_ID TO 0;

CREATE GENERATOR GEN_PARTIDA_IN_EL_NODE_ID;
SET GENERATOR GEN_PARTIDA_IN_EL_NODE_ID TO 93046;

CREATE GENERATOR GEN_PARTIDA_IZL_NODE_ID;
SET GENERATOR GEN_PARTIDA_IZL_NODE_ID TO 288;

CREATE GENERATOR GEN_PARTIDA_NAL_ID;
SET GENERATOR GEN_PARTIDA_NAL_ID TO 93724;

CREATE GENERATOR GEN_PARTIDA_OUT_EL_NODE_ID;
SET GENERATOR GEN_PARTIDA_OUT_EL_NODE_ID TO 16151965;

CREATE GENERATOR GEN_PARTIDA_PROP_NODE_ID;
SET GENERATOR GEN_PARTIDA_PROP_NODE_ID TO 0;

CREATE GENERATOR GEN_PARTIDA_RETURN_NODE_ID;
SET GENERATOR GEN_PARTIDA_RETURN_NODE_ID TO 1151;

CREATE GENERATOR GEN_PATHS_ID;
SET GENERATOR GEN_PATHS_ID TO 0;

CREATE GENERATOR GEN_PAYMENTS_EL_ID;
SET GENERATOR GEN_PAYMENTS_EL_ID TO 0;

CREATE GENERATOR GEN_PAYMENT_AVANSOVO_ID;
SET GENERATOR GEN_PAYMENT_AVANSOVO_ID TO 2;

CREATE GENERATOR GEN_PAYMENT_ID;
SET GENERATOR GEN_PAYMENT_ID TO 258059;

CREATE GENERATOR GEN_PAYMENT_INDEX;
SET GENERATOR GEN_PAYMENT_INDEX TO 2978;

CREATE GENERATOR GEN_PAYMENT_NODE_ID;
SET GENERATOR GEN_PAYMENT_NODE_ID TO 1281438;

CREATE GENERATOR GEN_PAYMENT_NOW_ID;
SET GENERATOR GEN_PAYMENT_NOW_ID TO 20;

CREATE GENERATOR GEN_PAY_NOCASH_NODE_ID;
SET GENERATOR GEN_PAY_NOCASH_NODE_ID TO 0;

CREATE GENERATOR GEN_PLACE_ID;
SET GENERATOR GEN_PLACE_ID TO 492;

CREATE GENERATOR GEN_PL_DELIVERY_STORAGE_EDIT_ID;
SET GENERATOR GEN_PL_DELIVERY_STORAGE_EDIT_ID TO 0;

CREATE GENERATOR GEN_POCKET_OTC_ID;
SET GENERATOR GEN_POCKET_OTC_ID TO 0;

CREATE GENERATOR GEN_POCKET_SHOP_ID;
SET GENERATOR GEN_POCKET_SHOP_ID TO 0;

CREATE GENERATOR GEN_POR_DOST_KOL_RZV_ID;
SET GENERATOR GEN_POR_DOST_KOL_RZV_ID TO 0;

CREATE GENERATOR GEN_POR_EDIT_ID;
SET GENERATOR GEN_POR_EDIT_ID TO 0;

CREATE GENERATOR GEN_POR_EL_COMMENT_ID;
SET GENERATOR GEN_POR_EL_COMMENT_ID TO 0;

CREATE GENERATOR GEN_POR_EL_EDIT_ID;
SET GENERATOR GEN_POR_EL_EDIT_ID TO 0;

CREATE GENERATOR GEN_POR_EL_EXPLANATORY_ID;
SET GENERATOR GEN_POR_EL_EXPLANATORY_ID TO 0;

CREATE GENERATOR GEN_POR_EL_ID;
SET GENERATOR GEN_POR_EL_ID TO 8;

CREATE GENERATOR GEN_POR_EL_PICTURES_NODE_ID;
SET GENERATOR GEN_POR_EL_PICTURES_NODE_ID TO 0;

CREATE GENERATOR GEN_POR_EL_PRICE_COEFICIENT_ID;
SET GENERATOR GEN_POR_EL_PRICE_COEFICIENT_ID TO 0;

CREATE GENERATOR GEN_POR_EL_PRODUCTION_ID;
SET GENERATOR GEN_POR_EL_PRODUCTION_ID TO 0;

CREATE GENERATOR GEN_POR_EL_RAZ_NODE_ID;
SET GENERATOR GEN_POR_EL_RAZ_NODE_ID TO 0;

CREATE GENERATOR GEN_POR_EL_REQUEST_NODE_ID;
SET GENERATOR GEN_POR_EL_REQUEST_NODE_ID TO 0;

CREATE GENERATOR GEN_POR_FAK_PROD_NODE_ID;
SET GENERATOR GEN_POR_FAK_PROD_NODE_ID TO 0;

CREATE GENERATOR GEN_POR_FORMULA_PARAMS_ID;
SET GENERATOR GEN_POR_FORMULA_PARAMS_ID TO 0;

CREATE GENERATOR GEN_POR_ID;
SET GENERATOR GEN_POR_ID TO 8;

CREATE GENERATOR GEN_POR_OFFER_TERMS_NODE_ID;
SET GENERATOR GEN_POR_OFFER_TERMS_NODE_ID TO 0;

CREATE GENERATOR GEN_POR_OUT_NODE_ID;
SET GENERATOR GEN_POR_OUT_NODE_ID TO 0;

CREATE GENERATOR GEN_POR_PRODUCTION_REQUEST_NODE;
SET GENERATOR GEN_POR_PRODUCTION_REQUEST_NODE TO 0;

CREATE GENERATOR GEN_POR_PROP_NODE_ID;
SET GENERATOR GEN_POR_PROP_NODE_ID TO 0;

CREATE GENERATOR GEN_POR_RAZ_EDIT_ID;
SET GENERATOR GEN_POR_RAZ_EDIT_ID TO 0;

CREATE GENERATOR GEN_POR_ZD_NODE_ID;
SET GENERATOR GEN_POR_ZD_NODE_ID TO 0;

CREATE GENERATOR GEN_POS_OUT_EL_TO_SRV_OUT_EL_ID;
SET GENERATOR GEN_POS_OUT_EL_TO_SRV_OUT_EL_ID TO 0;

CREATE GENERATOR GEN_POS_TO_SRV_ID;
SET GENERATOR GEN_POS_TO_SRV_ID TO 0;

CREATE GENERATOR GEN_POTV_EL_ID;
SET GENERATOR GEN_POTV_EL_ID TO 374550;

CREATE GENERATOR GEN_POTV_ID;
SET GENERATOR GEN_POTV_ID TO 1607;

CREATE GENERATOR GEN_POTV_MOVE_EL_ID;
SET GENERATOR GEN_POTV_MOVE_EL_ID TO 1165;

CREATE GENERATOR GEN_PRICE_LIST_DELIVERY_STORAGE;
SET GENERATOR GEN_PRICE_LIST_DELIVERY_STORAGE TO 0;

CREATE GENERATOR GEN_PRODUCTION_EXPLANATORY_ID;
SET GENERATOR GEN_PRODUCTION_EXPLANATORY_ID TO 0;

CREATE GENERATOR GEN_PRODUCTION_GRUPI_ID;
SET GENERATOR GEN_PRODUCTION_GRUPI_ID TO 0;

CREATE GENERATOR GEN_PRODUCTION_ID;
SET GENERATOR GEN_PRODUCTION_ID TO 680;

CREATE GENERATOR GEN_PRODUCTION_IN_EL_PARAMS_ID;
SET GENERATOR GEN_PRODUCTION_IN_EL_PARAMS_ID TO 0;

CREATE GENERATOR GEN_PRODUCTION_KAPARO_NODE_ID;
SET GENERATOR GEN_PRODUCTION_KAPARO_NODE_ID TO 0;

CREATE GENERATOR GEN_PRODUCTION_MONTAJISTI_ID;
SET GENERATOR GEN_PRODUCTION_MONTAJISTI_ID TO 0;

CREATE GENERATOR GEN_PRODUCTION_REQUEST_EL_ID;
SET GENERATOR GEN_PRODUCTION_REQUEST_EL_ID TO 0;

CREATE GENERATOR GEN_PRODUCTION_ZARABOTKA_ID;
SET GENERATOR GEN_PRODUCTION_ZARABOTKA_ID TO 0;

CREATE GENERATOR GEN_PRODUCTION_ZARABOTKA_IZPL;
SET GENERATOR GEN_PRODUCTION_ZARABOTKA_IZPL TO 0;

CREATE GENERATOR GEN_PRODUCT_WAREHOUSE_ID;
SET GENERATOR GEN_PRODUCT_WAREHOUSE_ID TO 0;

CREATE GENERATOR GEN_PROD_AVANS_ID;
SET GENERATOR GEN_PROD_AVANS_ID TO 0;

CREATE GENERATOR GEN_PROD_CENI_EL_ID;
SET GENERATOR GEN_PROD_CENI_EL_ID TO 809862;

CREATE GENERATOR GEN_PROD_NODE_ID;
SET GENERATOR GEN_PROD_NODE_ID TO 2;

CREATE GENERATOR GEN_PROD_PRODUCTION_ID;
SET GENERATOR GEN_PROD_PRODUCTION_ID TO 0;

CREATE GENERATOR GEN_PROD_REQUEST_PRODUCTION;
SET GENERATOR GEN_PROD_REQUEST_PRODUCTION TO 0;

CREATE GENERATOR GEN_PROD_STOCK_EL_ID;
SET GENERATOR GEN_PROD_STOCK_EL_ID TO 0;

CREATE GENERATOR GEN_PROD_STOCK_ID;
SET GENERATOR GEN_PROD_STOCK_ID TO 0;

CREATE GENERATOR GEN_PROD_VAUCHER_ID;
SET GENERATOR GEN_PROD_VAUCHER_ID TO 0;

CREATE GENERATOR GEN_PROFORMA_TO_FAK_ID;
SET GENERATOR GEN_PROFORMA_TO_FAK_ID TO 860;

CREATE GENERATOR GEN_PROP_NODE_ID;
SET GENERATOR GEN_PROP_NODE_ID TO 0;

CREATE GENERATOR GEN_PR_REQUEST_EXPLANATORY_ID;
SET GENERATOR GEN_PR_REQUEST_EXPLANATORY_ID TO 0;

CREATE GENERATOR GEN_PR_REQ_EL_PRICE_COEF_ID;
SET GENERATOR GEN_PR_REQ_EL_PRICE_COEF_ID TO 0;

CREATE GENERATOR GEN_RAZFASOVKA_ID;
SET GENERATOR GEN_RAZFASOVKA_ID TO 0;

CREATE GENERATOR GEN_RAZPAD_ID;
SET GENERATOR GEN_RAZPAD_ID TO 1;

CREATE GENERATOR GEN_RAZ_ELEMENT_ID;
SET GENERATOR GEN_RAZ_ELEMENT_ID TO 0;

CREATE GENERATOR GEN_RAZ_TIP_ID;
SET GENERATOR GEN_RAZ_TIP_ID TO 0;

CREATE GENERATOR GEN_RDB$PARTIDA_NAL_ID;
SET GENERATOR GEN_RDB$PARTIDA_NAL_ID TO 10503;

CREATE GENERATOR GEN_REAL_IZP_FAKT_IZP_NODE_ID;
SET GENERATOR GEN_REAL_IZP_FAKT_IZP_NODE_ID TO 0;

CREATE GENERATOR GEN_REQUEST_FORMULA_PARAMS_ID;
SET GENERATOR GEN_REQUEST_FORMULA_PARAMS_ID TO 0;

CREATE GENERATOR GEN_REQUEST_PRODUCTION_NODE_ID;
SET GENERATOR GEN_REQUEST_PRODUCTION_NODE_ID TO 0;

CREATE GENERATOR GEN_RETPRODRETFAKPRODKINODEID;
SET GENERATOR GEN_RETPRODRETFAKPRODKINODEID TO 0;

CREATE GENERATOR GEN_RETURN_DOST_KOL_ID;
SET GENERATOR GEN_RETURN_DOST_KOL_ID TO 0;

CREATE GENERATOR GEN_RET_DOST_KI_DOST_NODE_ID;
SET GENERATOR GEN_RET_DOST_KI_DOST_NODE_ID TO 1;

CREATE GENERATOR GEN_RET_DOST_MOVE_NODE_ID;
SET GENERATOR GEN_RET_DOST_MOVE_NODE_ID TO 1;

CREATE GENERATOR GEN_RET_STOKA_DOST_ID;
SET GENERATOR GEN_RET_STOKA_DOST_ID TO 22;

CREATE GENERATOR GEN_RET_STOKA_DOST_KI_ID;
SET GENERATOR GEN_RET_STOKA_DOST_KI_ID TO 174;

CREATE GENERATOR GEN_RET_STOKA_PROD_ID;
SET GENERATOR GEN_RET_STOKA_PROD_ID TO 908;

CREATE GENERATOR GEN_RET_STOKA_PROD_KI_ID;
SET GENERATOR GEN_RET_STOKA_PROD_KI_ID TO 759;

CREATE GENERATOR GEN_ROUND_TIP_ID;
SET GENERATOR GEN_ROUND_TIP_ID TO 3;

CREATE GENERATOR GEN_SASTAV_ID;
SET GENERATOR GEN_SASTAV_ID TO 2;

CREATE GENERATOR GEN_SELEKCIQ_ID;
SET GENERATOR GEN_SELEKCIQ_ID TO 164;

CREATE GENERATOR GEN_SELEKCIQ_KALC_ID;
SET GENERATOR GEN_SELEKCIQ_KALC_ID TO 0;

CREATE GENERATOR GEN_SELEKCIQ_KASA_EL_ID;
SET GENERATOR GEN_SELEKCIQ_KASA_EL_ID TO 0;

CREATE GENERATOR GEN_SELEKCIQ_KLI_EL_ID;
SET GENERATOR GEN_SELEKCIQ_KLI_EL_ID TO 6704;

CREATE GENERATOR GEN_SELEKCIQ_SIM_EL_ID;
SET GENERATOR GEN_SELEKCIQ_SIM_EL_ID TO 6883;

CREATE GENERATOR GEN_SEL_OPRS_ID;
SET GENERATOR GEN_SEL_OPRS_ID TO 1876;

CREATE GENERATOR GEN_SEL_OPR_ID;
SET GENERATOR GEN_SEL_OPR_ID TO 87243;

CREATE GENERATOR GEN_SEL_SIMPLE_ID;
SET GENERATOR GEN_SEL_SIMPLE_ID TO 12599;

CREATE GENERATOR GEN_SEL_SIM_QR_ID;
SET GENERATOR GEN_SEL_SIM_QR_ID TO 1621635;

CREATE GENERATOR GEN_SERIAL_NUM_ID;
SET GENERATOR GEN_SERIAL_NUM_ID TO 35372;

CREATE GENERATOR GEN_SIMPLE_ACZIS_ID;
SET GENERATOR GEN_SIMPLE_ACZIS_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_ADRESIRANE_GRUPA_ID;
SET GENERATOR GEN_SIMPLE_ADRESIRANE_GRUPA_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_ADRESIRANE_ID;
SET GENERATOR GEN_SIMPLE_ADRESIRANE_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_ADRESIRANE_NODE_ID;
SET GENERATOR GEN_SIMPLE_ADRESIRANE_NODE_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_CALC_ID;
SET GENERATOR GEN_SIMPLE_CALC_ID TO 12823;

CREATE GENERATOR GEN_SIMPLE_CALC_OLD_ID;
SET GENERATOR GEN_SIMPLE_CALC_OLD_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_CENI_ID;
SET GENERATOR GEN_SIMPLE_CENI_ID TO 3;

CREATE GENERATOR GEN_SIMPLE_EXPLANATORY_ID;
SET GENERATOR GEN_SIMPLE_EXPLANATORY_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_GROUP_ID;
SET GENERATOR GEN_SIMPLE_GROUP_ID TO 44;

CREATE GENERATOR GEN_SIMPLE_ID;
SET GENERATOR GEN_SIMPLE_ID TO 6067;

CREATE GENERATOR GEN_SIMPLE_KA_BIM_ID;
SET GENERATOR GEN_SIMPLE_KA_BIM_ID TO 118;

CREATE GENERATOR GEN_SIMPLE_KOD_ID;
SET GENERATOR GEN_SIMPLE_KOD_ID TO 1;

CREATE GENERATOR GEN_SIMPLE_MONTAGE_ID;
SET GENERATOR GEN_SIMPLE_MONTAGE_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_OBSERV_ID;
SET GENERATOR GEN_SIMPLE_OBSERV_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_PICT_ID;
SET GENERATOR GEN_SIMPLE_PICT_ID TO 14;

CREATE GENERATOR GEN_SIMPLE_PROP_ID;
SET GENERATOR GEN_SIMPLE_PROP_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_PROP_MINOR_ID;
SET GENERATOR GEN_SIMPLE_PROP_MINOR_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_PROP_NODE_ID;
SET GENERATOR GEN_SIMPLE_PROP_NODE_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_RAZ_ID;
SET GENERATOR GEN_SIMPLE_RAZ_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_SKLAD_KOD_ID;
SET GENERATOR GEN_SIMPLE_SKLAD_KOD_ID TO 2;

CREATE GENERATOR GEN_SIMPLE_TABLE_PRICES_ID;
SET GENERATOR GEN_SIMPLE_TABLE_PRICES_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_TRACKER_ID;
SET GENERATOR GEN_SIMPLE_TRACKER_ID TO 3;

CREATE GENERATOR GEN_SIMPLE_ZAETOST_ID;
SET GENERATOR GEN_SIMPLE_ZAETOST_ID TO 0;

CREATE GENERATOR GEN_SKLAD_ID;
SET GENERATOR GEN_SKLAD_ID TO 42;

CREATE GENERATOR GEN_SKLAD_MOL_ID;
SET GENERATOR GEN_SKLAD_MOL_ID TO 3;

CREATE GENERATOR GEN_SKLAD_SELEKCIQ_NODE_ID;
SET GENERATOR GEN_SKLAD_SELEKCIQ_NODE_ID TO 2;

CREATE GENERATOR GEN_SLEDI_KLI_ID;
SET GENERATOR GEN_SLEDI_KLI_ID TO 1127;

CREATE GENERATOR GEN_SLEDI_LICENZ_ID;
SET GENERATOR GEN_SLEDI_LICENZ_ID TO 49465;

CREATE GENERATOR GEN_SLEDI_ROUMING_LOG_ID;
SET GENERATOR GEN_SLEDI_ROUMING_LOG_ID TO 265629;

CREATE GENERATOR GEN_SLEDI_ROUMING_LOG_PAIED_ID;
SET GENERATOR GEN_SLEDI_ROUMING_LOG_PAIED_ID TO 11730;

CREATE GENERATOR GEN_SLEDI_SIMPLE_ID;
SET GENERATOR GEN_SLEDI_SIMPLE_ID TO 4;

CREATE GENERATOR GEN_SLEDI_TEMPLATE_EL_GEN_ID;
SET GENERATOR GEN_SLEDI_TEMPLATE_EL_GEN_ID TO 184365;

CREATE GENERATOR GEN_SLEDI_TEMPLATE_EL_ID;
SET GENERATOR GEN_SLEDI_TEMPLATE_EL_ID TO 5394;

CREATE GENERATOR GEN_STORE_OBJ_ID;
SET GENERATOR GEN_STORE_OBJ_ID TO 0;

CREATE GENERATOR GEN_STORE_OTC_ID;
SET GENERATOR GEN_STORE_OTC_ID TO 0;

CREATE GENERATOR GEN_STORNO_ID;
SET GENERATOR GEN_STORNO_ID TO 8363;

CREATE GENERATOR GEN_STORNO_REASON_ID;
SET GENERATOR GEN_STORNO_REASON_ID TO 0;

CREATE GENERATOR GEN_SUMI_ID;
SET GENERATOR GEN_SUMI_ID TO 900298;

CREATE GENERATOR GEN_SYNC_ADVANCE_PAYMENT_ID;
SET GENERATOR GEN_SYNC_ADVANCE_PAYMENT_ID TO 0;

CREATE GENERATOR GEN_SYSTEM2_ID;
SET GENERATOR GEN_SYSTEM2_ID TO 1;

CREATE GENERATOR GEN_TABLE_PRICES_DISCOUNTS_ID;
SET GENERATOR GEN_TABLE_PRICES_DISCOUNTS_ID TO 0;

CREATE GENERATOR GEN_TABLE_PRICE_COEFICIENT_ID;
SET GENERATOR GEN_TABLE_PRICE_COEFICIENT_ID TO 0;

CREATE GENERATOR GEN_TABLE_PRICE_SIMPLE_NODE_ID;
SET GENERATOR GEN_TABLE_PRICE_SIMPLE_NODE_ID TO 0;

CREATE GENERATOR GEN_TASKS_EL_ID;
SET GENERATOR GEN_TASKS_EL_ID TO 368935;

CREATE GENERATOR GEN_TASKS_ID;
SET GENERATOR GEN_TASKS_ID TO 250528;

CREATE GENERATOR GEN_TASKS_TIP_ID;
SET GENERATOR GEN_TASKS_TIP_ID TO 0;

CREATE GENERATOR GEN_TBL_KA_ID;
SET GENERATOR GEN_TBL_KA_ID TO 7989;

CREATE GENERATOR GEN_TBL_KA_OPR_LOG_ID;
SET GENERATOR GEN_TBL_KA_OPR_LOG_ID TO 19598;

CREATE GENERATOR GEN_TBL_KA_OPR_NODE_ID;
SET GENERATOR GEN_TBL_KA_OPR_NODE_ID TO 207041;

CREATE GENERATOR GEN_TBL_KA_REGNOM_NODE_ID;
SET GENERATOR GEN_TBL_KA_REGNOM_NODE_ID TO 12971;

CREATE GENERATOR GEN_TBL_KA_STOP_SIM_NODE_ID;
SET GENERATOR GEN_TBL_KA_STOP_SIM_NODE_ID TO 3418;

CREATE GENERATOR GEN_TBL_LOG_ID;
SET GENERATOR GEN_TBL_LOG_ID TO 177361;

CREATE GENERATOR GEN_TD_SAOTV_ID;
SET GENERATOR GEN_TD_SAOTV_ID TO 0;

CREATE GENERATOR GEN_TEMP$SLEDI_DATA_1_ID;
SET GENERATOR GEN_TEMP$SLEDI_DATA_1_ID TO 4818;

CREATE GENERATOR GEN_TEMP$SLEDI_DATA_ID;
SET GENERATOR GEN_TEMP$SLEDI_DATA_ID TO 0;

CREATE GENERATOR GEN_TEMP_IMPORT_ID;
SET GENERATOR GEN_TEMP_IMPORT_ID TO 0;

CREATE GENERATOR GEN_TEMP_IMPORT_VER;
SET GENERATOR GEN_TEMP_IMPORT_VER TO 0;

CREATE GENERATOR GEN_TEMP_PROD_FOR_ANNUL_NUMBER;
SET GENERATOR GEN_TEMP_PROD_FOR_ANNUL_NUMBER TO 330;

CREATE GENERATOR GEN_TIP_REFUSED_ID;
SET GENERATOR GEN_TIP_REFUSED_ID TO 0;

CREATE GENERATOR GEN_TIP_RESOLUTION_ID;
SET GENERATOR GEN_TIP_RESOLUTION_ID TO 0;

CREATE GENERATOR GEN_TMP_ELTRADE_IMPORT_ID;
SET GENERATOR GEN_TMP_ELTRADE_IMPORT_ID TO 0;

CREATE GENERATOR GEN_TMP_MARK_EL_ID;
SET GENERATOR GEN_TMP_MARK_EL_ID TO 1;

CREATE GENERATOR GEN_TMP_OPR_ID;
SET GENERATOR GEN_TMP_OPR_ID TO 1;

CREATE GENERATOR GEN_TMP_OPR_SN_ID;
SET GENERATOR GEN_TMP_OPR_SN_ID TO 0;

CREATE GENERATOR GEN_TMP_PROD_TO_FAK_NUMBER;
SET GENERATOR GEN_TMP_PROD_TO_FAK_NUMBER TO 171549;

CREATE GENERATOR GEN_TMP_SIMPLE_SEL_PROD1_ID;
SET GENERATOR GEN_TMP_SIMPLE_SEL_PROD1_ID TO 0;

CREATE GENERATOR GEN_TS_OTC_FILES_ID;
SET GENERATOR GEN_TS_OTC_FILES_ID TO 0;

CREATE GENERATOR GEN_UNFINISHED_SALES_ID;
SET GENERATOR GEN_UNFINISHED_SALES_ID TO 0;

CREATE GENERATOR GEN_UNP_ID;
SET GENERATOR GEN_UNP_ID TO 0;

CREATE GENERATOR GEN_UNR_AGENT_ANALYSES_ID;
SET GENERATOR GEN_UNR_AGENT_ANALYSES_ID TO 32864;

CREATE GENERATOR GEN_UNR_AGENT_ID;
SET GENERATOR GEN_UNR_AGENT_ID TO 19;

CREATE GENERATOR GEN_UNR_ANALYSES_ID;
SET GENERATOR GEN_UNR_ANALYSES_ID TO 243037;

CREATE GENERATOR GEN_UNR_GROUP_ID;
SET GENERATOR GEN_UNR_GROUP_ID TO 5;

CREATE GENERATOR GEN_UNR_GROUP_SIMPLE_ID;
SET GENERATOR GEN_UNR_GROUP_SIMPLE_ID TO 130;

CREATE GENERATOR GEN_UNR_KLI_AGENT_2_ID;
SET GENERATOR GEN_UNR_KLI_AGENT_2_ID TO 31;

CREATE GENERATOR GEN_UNR_KLI_AGENT_ID;
SET GENERATOR GEN_UNR_KLI_AGENT_ID TO 2153;

CREATE GENERATOR GEN_UNR_KOEF_NODE_ID;
SET GENERATOR GEN_UNR_KOEF_NODE_ID TO 41;

CREATE GENERATOR GEN_USER_ID;
SET GENERATOR GEN_USER_ID TO 127;

CREATE GENERATOR GEN_USER_KASA_NODE_ID;
SET GENERATOR GEN_USER_KASA_NODE_ID TO 148;

CREATE GENERATOR GEN_USER_OBEKT_NODE_ID;
SET GENERATOR GEN_USER_OBEKT_NODE_ID TO 115;

CREATE GENERATOR GEN_USER_ROLES_EL_ID;
SET GENERATOR GEN_USER_ROLES_EL_ID TO 15;

CREATE GENERATOR GEN_USER_SCHEMAS_ID;
SET GENERATOR GEN_USER_SCHEMAS_ID TO 2;

CREATE GENERATOR GEN_USER_SEL_NODE_ID;
SET GENERATOR GEN_USER_SEL_NODE_ID TO 0;

CREATE GENERATOR GEN_USER_SKLAD_NAL_NODE_ID;
SET GENERATOR GEN_USER_SKLAD_NAL_NODE_ID TO 4;

CREATE GENERATOR GEN_USER_SKLAD_NODE_ID;
SET GENERATOR GEN_USER_SKLAD_NODE_ID TO 280;

CREATE GENERATOR GEN_VALUTA_ID;
SET GENERATOR GEN_VALUTA_ID TO 7;

CREATE GENERATOR GEN_VISIT_EL_ID;
SET GENERATOR GEN_VISIT_EL_ID TO 8;

CREATE GENERATOR GEN_VISIT_ID;
SET GENERATOR GEN_VISIT_ID TO 1;

CREATE GENERATOR GEN_VISIT_TYPE_ID;
SET GENERATOR GEN_VISIT_TYPE_ID TO 0;

CREATE GENERATOR GEN_WAREHOUSE_BASE_MAP_ID;
SET GENERATOR GEN_WAREHOUSE_BASE_MAP_ID TO 0;

CREATE GENERATOR GEN_WHOKNA_CONNECTION_ID;
SET GENERATOR GEN_WHOKNA_CONNECTION_ID TO 0;

CREATE GENERATOR GEN_WUERTH_COMMIS_ID;
SET GENERATOR GEN_WUERTH_COMMIS_ID TO 79;

CREATE GENERATOR GEN_WUERTH_SIMPLE_ID;
SET GENERATOR GEN_WUERTH_SIMPLE_ID TO 0;

CREATE GENERATOR GEN_ZAIAVKA_DOSTAVKA_ID;
SET GENERATOR GEN_ZAIAVKA_DOSTAVKA_ID TO 3;

CREATE GENERATOR GEN_ZAIAVKA_DOSTAVKA_NODE_ID;
SET GENERATOR GEN_ZAIAVKA_DOSTAVKA_NODE_ID TO 0;

CREATE GENERATOR GEN_ZD_DOST_MOVE_NODE_ID;
SET GENERATOR GEN_ZD_DOST_MOVE_NODE_ID TO 0;

CREATE GENERATOR GEN_ZD_POR_NODE_ID;
SET GENERATOR GEN_ZD_POR_NODE_ID TO 0;

CREATE GENERATOR IBE$VERSION_HISTORY_ID_GEN;
SET GENERATOR IBE$VERSION_HISTORY_ID_GEN TO 222;



/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

CREATE EXCEPTION EXC_DELETE 'Deleting records is not allowed';

CREATE EXCEPTION EXC_DOUBLE_FAK_NUM 'Database Error: 1 - Duplicate number.';

CREATE EXCEPTION EXC_DUPLICATE_OBOB_ZD 'Дублирани операции в обобщаване на заявка за доставка';

CREATE EXCEPTION EXC_FIX_ALL_ERROR 'Непозволено генериране на излишък от операция.';

CREATE EXCEPTION EXC_OTR_KOL 'Database Error: 2 - Генериране на отрицателно количество';

CREATE EXCEPTION EXC_UPDATE 'Updating records is not allowed';



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE ADD_ADDRESS (
    P_PLACE_ID INTEGER /* TYPE OF COLUMN ADDRESSES.PLACE_ID */,
    P_ADDRESS VARCHAR(100) /* TYPE OF COLUMN ADDRESSES.ADDRESS */)
RETURNS (
    R_ID INTEGER /* TYPE OF COLUMN ADDRESSES.ID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_BARCODE (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_BARCODE VARCHAR(13),
    P_KOL TYPE OF DOM_KEY,
    P_NAME TYPE OF DOM_CHAR_50)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_BONUS_RAZCHET_NODE (
    P_IN_ID TYPE OF DOM_KEY,
    P_OUT_ID TYPE OF DOM_KEY,
    P_SUMA TYPE OF DOM_SUMA)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_BROENE (
    P_OPR_ID TYPE OF DOM_KEY,
    P_DISTRID TYPE OF DOM_KEY,
    P_AGENTDID TYPE OF DOM_KEY,
    P_TIP TYPE OF DOM_SMAL_INT = 0,
    P_STATUS TYPE OF DOM_SMAL_INT = 0)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_BROENE_EL (
    P_BROENE_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL,
    P_KOL2 TYPE OF DOM_KOL)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_COMMENT (
    NOTE BLOB SUB_TYPE 1 SEGMENT SIZE 2048,
    TABLE_NODE_NAME VARCHAR(30),
    TABLE_NODE_OBJECT_NAME VARCHAR(30),
    TABLE_NODE_OBJECT_ID INTEGER,
    USER_ID INTEGER,
    HEADER VARCHAR(50))
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_COURSE (
    P_DATE TYPE OF DOM_DATE,
    P_NOTE TYPE OF DOM_CHAR_20)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_CRYPT_PARI (
    P_OPR_ID INTEGER,
    P_PARI_IO_ID INTEGER,
    P_KASA_ID INTEGER,
    P_OBEKT_ID INTEGER,
    P_SUMA DOUBLE PRECISION,
    P_VALUTA_ID INTEGER,
    P_KURS DOUBLE PRECISION,
    P_PROWERKA SMALLINT,
    P_ALLOW_FAK SMALLINT,
    P_TIP SMALLINT,
    P_PASS VARCHAR(25),
    P_PARI_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_EDIT_DEL_DEF_RAZ_EL (
    P_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_RAZFASOVKA_ID INTEGER,
    P_ACTION INTEGER)
RETURNS (
    ID INTEGER,
    SIMPLE_ID INTEGER,
    RAZFASOVKA_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_EDIT_NAL_KOL_RZV (
    R_OPR_ID_POR INTEGER,
    R_OPR_ID_EDIT_POR INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_EDIT_PRODUCTION_REQUEST (
    P_OPR_REQUEST_ID TYPE OF DOM_KEY,
    P_OPR_TIP TYPE OF DOM_KEY,
    P_DATE TYPE OF DOM_DATE,
    P_IP TYPE OF DOM_KEY,
    P_USER_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY,
    P_KLI_ID TYPE OF DOM_KEY,
    P_SUMA TYPE OF CURRENCY,
    P_POR_NUM TYPE OF DOM_CHAR_30,
    P_VSKLAD_ID TYPE OF DOM_KEY,
    P_SUMA_KAPARO TYPE OF CURRENCY,
    P_DATE_MONTAJ TYPE OF DOM_DATE,
    P_COMMENT_TEXT DOM_CHAR_300,
    P_FLAG_COMPLETE TYPE OF DOM_BOOLEAN)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_FAK (
    P_OPR_ID INTEGER,
    P_NUMBER VARCHAR(10),
    P_TIP SMALLINT,
    P_SUMA DOUBLE PRECISION,
    P_NEOBLAGAEMA DOUBLE PRECISION,
    P_DDS DOUBLE PRECISION,
    P_TOTAL DOUBLE PRECISION,
    P_VBROI VARCHAR(1),
    P_MOL VARCHAR(30),
    P_POLUCHENA_OT VARCHAR(30),
    P_POLUCHENA_DATE DATE,
    P_POLUCHENA_EGN VARCHAR(10),
    P_PALNOM INTEGER,
    P_PALNOM_DATE DATE,
    P_PASP_NUMBER INTEGER,
    P_PASP_PU VARCHAR(15),
    P_PASP_DATE DATE,
    P_OWNER_ID SMALLINT,
    P_OBEKT_ID SMALLINT,
    P_DATE_SDELKA DATE,
    P_SUMA_TO DOUBLE PRECISION,
    P_VALUTA_ID INTEGER,
    P_KURS_VALUTA DOUBLE PRECISION,
    P_POR_NUM TYPE OF DOM_CHAR_30,
    P_PAY_TYPE TYPE OF DOM_SMAL_INT,
    P_AKCIZ DOUBLE PRECISION,
    P_FAK_ACCOUNTING INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_FAK_EL (
    P_OPR_ID TYPE OF DOM_KEY,
    P_TEXT TYPE OF DOM_CHAR_1000,
    P_ME_ID TYPE OF DOM_KEY_SMALL,
    P_KOL TYPE OF DOM_KOL,
    P_CENA TYPE OF DOM_CENA,
    P_DDS TYPE OF DOM_SUMA,
    P_SUMA_DDS TYPE OF DOM_SUMA,
    P_SUMA_TOTAL TYPE OF DOM_SUMA,
    P_TOST TYPE OF DOM_SUMA,
    P_CENA_FIX TYPE OF DOM_CENA,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_RAZ_ID TYPE OF DOM_KEY,
    P_RAZ_KOL TYPE OF DOM_KOL,
    P_TEXT_LAT TYPE OF DOM_CHAR_100,
    P_AVANS_OPR_ID TYPE OF DOM_KEY,
    P_VAT_REASON_ID TYPE OF DOM_KEY)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_FIRMA_FROM_MOBILE (
    P_NAME TYPE OF DOM_CHAR_100,
    P_DDSNUMBER TYPE OF DOM_CHAR_15,
    P_PLACE_ID TYPE OF DOM_KEY,
    P_MOL TYPE OF DOM_CHAR_30,
    P_ADDRESS TYPE OF DOM_CHAR_100,
    P_BULSTAT TYPE OF DOM_CHAR_15,
    P_PHONE_NUMBER TYPE OF DOM_CHAR_30)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_FIRMI_FAK_DATA
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_GROUP (
    P_TIP TYPE OF DOM_INT,
    P_NAME TYPE OF DOM_CHAR_50)
RETURNS (
    R_ID TYPE OF DOM_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_GROUP_ESHOP (
    P_GROUP_NAME VARCHAR(50),
    P_PARENT_ID INTEGER,
    P_SEL_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_IN (
    P_OPRID INTEGER,
    P_PAYTIP INTEGER,
    P_PSHOP SMALLINT,
    P_GAR_NOM VARCHAR(30),
    P_RF SMALLINT = 0)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_IN_EL (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_SUMA_FR DOUBLE PRECISION,
    P_SUMA_SR DOUBLE PRECISION,
    P_IS_F SMALLINT,
    P_VAT_PERCENT DOUBLE PRECISION,
    P_VAT_REASON_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_IN_EL2 (
    P_IN_EL_ID INTEGER,
    P_KOL DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_INFO_MESA (
    P_IN_EL_ID INTEGER,
    P_MARKA VARCHAR(30),
    P_STRANA_R SMALLINT,
    P_STRANA_G SMALLINT,
    P_STRANA_K SMALLINT,
    P_MESO_TIP SMALLINT,
    P_AGE VARCHAR(20),
    P_CATEGORY TYPE OF DOM_CHAR_10,
    P_ZALOENOST TYPE OF DOM_CHAR_10,
    P_TEGLO TYPE OF DOM_KOL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_KI_DOST_SUMA (
    P_OPR_ID TYPE OF DOM_KEY,
    P_PAY_TIP TYPE OF DOM_FLAG,
    P_VAT_PERCENT TYPE OF DOM_PERCENT)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_KI_DOST_SUMA_EL (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_CENA DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_KOL DOUBLE PRECISION,
    P_IN_EL_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_KLI_FROM_FIRMA (
    P_FIRM_ID TYPE OF DOM_KEY,
    P_PERCENT NUMERIC(8,4))
RETURNS (
    R_KLI_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_KLI_FROM_MOBILE (
    P_NAME TYPE OF DOM_CHAR_100,
    P_NAME_ENGL TYPE OF DOM_CHAR_100,
    P_CODE TYPE OF DOM_CHAR_15,
    P_ADDRESS TYPE OF DOM_CHAR_100,
    P_FIRMA_ID TYPE OF DOM_KEY,
    P_PLACE_ID TYPE OF DOM_KEY,
    P_DUE_DAYS TYPE OF DOM_SMAL_INT,
    P_PHONE_NUMBER TYPE OF DOM_CHAR_100,
    P_SEL_ID TYPE OF DOM_KEY,
    P_VOP TYPE OF DOM_SMAL_INT)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_KLI_POCKET_NODE (
    P_KLI_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_KLI_SELEKCIQ (
    P_BULSTAT VARCHAR(13),
    P_DAN_NUM TYPE OF DOM_CHAR_15,
    P_KLI_ADRES TYPE OF DOM_CHAR_100,
    P_SELEKCIQ_ID TYPE OF DOM_KEY,
    P_KLI_PLACE_ID TYPE OF DOM_KEY,
    P_KLI_ID TYPE OF DOM_INT,
    P_KLI_NAME TYPE OF DOM_CHAR_100,
    P_MOL TYPE OF DOM_CHAR_100,
    P_CODE TYPE OF DOM_CHAR_30)
RETURNS (
    R_KLI_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_KLI_SKLAD_NODE (
    P_KLI_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_LOG (
    P_TABLE_NAME VARCHAR(50),
    P_TABLE_ID INTEGER,
    P_TABLE_FIELD VARCHAR(50),
    P_TIP_OPR CHAR(1),
    P_OLD_VALUE DOM_CHAR_300,
    P_NEW_VALUE DOM_CHAR_300)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_LOG_CENI_DDS_MANUAL (
    P_TIP_DDS SMALLINT,
    P_USER_ID SMALLINT,
    P_OPR_ID INTEGER,
    P_TIP_CENI SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_METRO_EXPORTS (
    P_EXPORT_SYNC_ID TYPE OF DOM_SMAL_INT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_NAL_KOL_RZV (
    R_SKLAD_ID INTEGER,
    R_OPR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_NEPOTV_OPR (
    P_OPR_ID INTEGER,
    P_OPR_TIP_NAME VARCHAR(3000))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_OPR (
    P_OPR_TIP TYPE OF DOM_KEY_SMALL,
    P_DATE TYPE OF DOM_DATE,
    P_IP TYPE OF DOM_INT,
    P_USER_ID TYPE OF DOM_KEY_SMALL,
    P_SKLAD_ID TYPE OF DOM_KEY_SMALL,
    P_KLI_ID TYPE OF DOM_KEY,
    P_SUMA TYPE OF DOM_SUMA,
    P_PC_ID TYPE OF DOM_KEY = NULL)
RETURNS (
    R_OPR_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_OPR_ANUL (
    P_OPR_ID INTEGER,
    P_ANUL_ID INTEGER)
RETURNS (
    R_OPR_ANUL_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_OPR_EDIT (
    P_OPR_ID INTEGER,
    P_EDITED_OPR_ID INTEGER,
    P_SKLAD_ID SMALLINT,
    P_USER_ID SMALLINT,
    P_KLI_ID INTEGER,
    P_SUMA DOUBLE PRECISION,
    P_OPR_DATE DATE)
RETURNS (
    R_OPR_EDIT_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_OPR_PAYMENT_NODE (
    P_PAYMENT_ID INTEGER,
    P_OPR_ID INTEGER,
    P_SUMA DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_OPR_PC (
    P_OPR_TIP SMALLINT,
    P_DATETIME VARCHAR(30),
    P_DATE DATE,
    P_IP INTEGER,
    P_USER_ID SMALLINT,
    P_SKLAD_ID SMALLINT,
    P_KLI_ID INTEGER,
    P_PC_ID INTEGER,
    P_SUMA DOUBLE PRECISION)
RETURNS (
    R_OPR_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_OPR_SUMI (
    P_OPR_ID INTEGER,
    P_SUMA_FR DOUBLE PRECISION,
    P_SUMA_SR DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_OUT (
    P_OPR_ID INTEGER,
    P_PAY_TIP SMALLINT,
    P_SUMA_BASE DOUBLE PRECISION,
    P_FP SMALLINT,
    P_SUMA_KLI_PAY DOUBLE PRECISION,
    P_OBEKT_ID SMALLINT,
    P_REQUIRE_FAKT SMALLINT,
    P_KLI_AGENT_ID INTEGER,
    P_POR_NUM TYPE OF DOM_CHAR_30,
    P_CODE TYPE OF DOM_CHAR_15 = NULL)
RETURNS (
    R_OUT_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_OUT_EL (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_SUMA_SR DOUBLE PRECISION,
    P_SUMA_FR DOUBLE PRECISION,
    P_IS_F SMALLINT,
    P_POR_EL_ID INTEGER)
RETURNS (
    R_OUT_EL_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_OUT_EL_FAK_OUT_EL (
    P_OUT_EL_ID INTEGER,
    P_FAK_OUT_EL_ID INTEGER,
    P_KOL DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_OUT_EL_SR_A (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_IS_F SMALLINT,
    P_POR_EL_ID INTEGER,
    P_SKLAD_ID INTEGER)
RETURNS (
    R_OUT_EL_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_OUT_EL2 (
    P_OUT_EL_ID INTEGER,
    P_KOL DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_PARI (
    P_OPR_ID INTEGER,
    P_PARI_IO_ID INTEGER,
    P_KASA_ID INTEGER,
    P_OBEKT_ID INTEGER,
    P_SUMA NUMERIC(10,2),
    P_VALUTA_ID INTEGER,
    P_KURS DOUBLE PRECISION,
    P_PROWERKA SMALLINT,
    P_ALLOW_FAK SMALLINT,
    P_TIP SMALLINT)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_PARTIDA_PROP_EL (
    P_PARTIDA_EL_ID INTEGER,
    P_MAJOR_PROP_ID INTEGER,
    P_MINOR_PROP_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_PAYMENT (
    P_OPR_ID TYPE OF DOM_KEY,
    P_IS_BANK TYPE OF DOM_FLAG,
    P_FLAG_BONUS TYPE OF DOM_SMAL_INT,
    P_FLAG_AVANS TYPE OF DOM_SMAL_INT,
    P_UNP_ID TYPE OF DOM_INT64,
    P_FAK_ID TYPE OF DOM_KEY,
    P_IDX TYPE OF DOM_INT,
    P_NUMBER TYPE OF DOM_CHAR_50,
    P_BRANCH_ID TYPE OF DOM_KEY)
RETURNS (
    R_PAYMENT_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_PAYMENT_2 (
    P_OPR_ID TYPE OF DOM_KEY,
    P_IS_BANK TYPE OF DOM_FLAG,
    P_FLAG_BONUS TYPE OF DOM_SMAL_INT,
    P_FLAG_AVANS TYPE OF DOM_SMAL_INT,
    P_UNP_ID TYPE OF DOM_INT64,
    P_FAK_ID TYPE OF DOM_KEY,
    P_IDX TYPE OF DOM_INT,
    P_NUMBER TYPE OF DOM_CHAR_50,
    P_BRANCH_ID TYPE OF DOM_KEY,
    P_VAT_PERCENT DOM_PERCENT)
RETURNS (
    R_PAYMENT_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_PAYMENT_EL (
    P_BANKA TYPE OF DOM_CHAR_50,
    P_NOMER TYPE OF DOM_CHAR_50,
    P_KLI_ID TYPE OF DOM_INT,
    P_PAYMENT_ID TYPE OF DOM_INT,
    P_PAYMENT_TIP_ID TYPE OF DOM_INT,
    P_SUMA TYPE OF DOM_SUMA,
    P_VAUCHER_ID TYPE OF DOM_INT)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_PAYMENT_EXT (
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_PAYMENT_ID TYPE OF DOM_KEY,
    R_SUMI_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_PLACE (
    P_NAME TYPE OF DOM_CHAR_30)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_POR_EDIT (
    OPR_ID INTEGER,
    ED_OPR_ID INTEGER,
    SKLAD_ID INTEGER,
    USER_ID INTEGER,
    KLI_ID INTEGER,
    SUMA DOUBLE PRECISION,
    OPR_DATE DATE)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_POR_EL (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_RAZFASOVKA_ID INTEGER,
    P_RAZFASOVKA_KOL DOUBLE PRECISION,
    P_COMMENT VARCHAR(100),
    P_FLAG_MOVE INTEGER,
    P_KOL_RZV DOUBLE PRECISION)
RETURNS (
    R_POR_EL_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_POR_EL_2 (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_KOL_2 DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_RAZFASOVKA_ID INTEGER,
    P_RAZFASOVKA_KOL DOUBLE PRECISION,
    P_COMMENT VARCHAR(100),
    P_FLAG_MOVE INTEGER,
    P_KOL_RZV DOUBLE PRECISION,
    P_KOL_POR TYPE OF DOM_KOL = 0,
    P_PRICE TYPE OF DOM_CENA = 0)
RETURNS (
    R_POR_EL_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_POR_EL_API (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_KOL_2 DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_RAZFASOVKA_ID INTEGER,
    P_RAZFASOVKA_KOL DOUBLE PRECISION,
    P_COMMENT VARCHAR(100),
    P_FLAG_MOVE INTEGER,
    P_KOL_RZV DOUBLE PRECISION,
    P_KOL_POR TYPE OF DOM_KOL = 0,
    P_PRICE TYPE OF DOM_CENA = 0,
    P_IS_BONUS TYPE OF DOM_SMAL_INT = 0)
RETURNS (
    R_POR_EL_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_POR_EL_EDIT (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID_EDIT INTEGER,
    P_KOL DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_RAZFASOVKA_ID INTEGER,
    P_RAZFASOVKA_KOL DOUBLE PRECISION,
    P_KOL_RZV DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_POR_EL_EDIT_2 (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID_EDIT INTEGER,
    P_KOL DOUBLE PRECISION,
    P_KOL_2 DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_RAZFASOVKA_ID INTEGER,
    P_RAZFASOVKA_KOL DOUBLE PRECISION,
    P_KOL_RZV DOUBLE PRECISION,
    P_PRICE TYPE OF DOM_CENA = 0)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_POTV_OPR (
    P_OPR_ID INTEGER,
    P_POTV_ID INTEGER,
    P_POTV_OPR_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_PRIORITET (
    P_STEPEN SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_PROFORMA_TO_FAK (
    P_FAK_ID INTEGER,
    P_PROFORMA_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_PROP_NODE (
    P_MAJOR_ID INTEGER,
    P_MINOR_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_REQUEST_EL (
    OPR_REQUEST_ID TYPE OF DOM_INT,
    NOMER TYPE OF DOM_SMAL_INT,
    SIMPLE_ID TYPE OF DOM_INT,
    MASTER_SIMPLE_ID TYPE OF DOM_INT,
    SIMPLE_CALC_ID TYPE OF DOM_INT,
    KOL TYPE OF DOM_KOL,
    TOT_SUM TYPE OF DOM_SUMA,
    CENA_CL TYPE OF DOM_CENA)
RETURNS (
    ID TYPE OF DOM_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_RET_DOST_NODE (
    P_RET_OPR_ID INTEGER,
    P_OUT_SKLAD_ID SMALLINT)
RETURNS (
    R_OUT_OPR_ID INTEGER,
    R_IN_OPR_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_SIMPLE_PROP_NODE (
    P_MAJOR_ID INTEGER,
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_SIMPLE_TABLE_PRICE (
    P_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_HEIGHT TYPE OF DOM_KOL,
    P_WIDTH TYPE OF DOM_KOL,
    P_PRICE TYPE OF DOM_CENA)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_TABLE_PRICE_COEFICIENT (
    P_ID TYPE OF DOM_KEY,
    P_MASTER_SIMPLE_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_COEFICIENT TYPE OF DOM_PERCENT)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_TEMP_IMPORT (
    P_VER SMALLINT,
    P_SIMPLE_ID INTEGER,
    P_NAME VARCHAR(100),
    P_NAME2 VARCHAR(100),
    P_CODE VARCHAR(15),
    P_KOL DOUBLE PRECISION,
    P_KOL2 DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_CENA DOUBLE PRECISION,
    P_RSN SMALLINT,
    P_OPIS VARCHAR(30))
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_TMP_MARK_EL (
    P_TMP_OPR_ID INTEGER,
    P_NUM INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_CENA DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_RAZ_KOL DOUBLE PRECISION,
    P_RAZ_ID INTEGER,
    P_RSN CHAR(1),
    P_SKLAD_ID SMALLINT,
    P_VAT_PERCENT TYPE OF DOM_PERCENT,
    P_VAT_GROUP TYPE OF DOM_SMAL_INT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_TMP_OPR (
    P_ID INTEGER,
    P_KLI_NOM INTEGER,
    P_KLI_ID INTEGER,
    P_SKLAD_ID INTEGER,
    P_SUMA DOUBLE PRECISION,
    P_COMMENT VARCHAR(1000),
    P_UNP_ID TYPE OF DOM_INT64)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ADD_TMP_OPR_SN (
    P_TMP_OPR_ID INTEGER,
    P_ELEMENT_ID INTEGER,
    P_NUM INTEGER,
    P_SN VARCHAR(30),
    P_SIMPLE_ID INTEGER,
    P_IN_EL_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_TO_CFG_LOG (
    P_TABLE_CODE TYPE OF DOM_KEY_SMALL,
    P_USER_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_UNFINISHED_SALE_ROW (
    P_OPR_ID TYPE OF DOM_KEY,
    P_NUM TYPE OF DOM_INT,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL,
    P_SUMA TYPE OF DOM_SUMA)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_UPDATE_BONUS_SKLAD (
    P_BONUS_ID TYPE OF DOM_KEY,
    P_SEL_SKLAD TYPE OF DOM_CHAR_100)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_UPDATE_FAK_FIRMI_DATA (
    FAK_ID INTEGER,
    NAME_FAK TYPE OF DOM_CHAR_100,
    ADDRES DOM_CHAR_100,
    MOL VARCHAR(30),
    IDNOM VARCHAR(13),
    REG_DDS CHAR(1),
    IDNOMDDS VARCHAR(15),
    PLACE_NAME VARCHAR(30),
    KLI_NAME VARCHAR(100),
    DEF_BANKA INTEGER,
    EO_ID_TPD VARCHAR(20),
    GLN DOM_CHAR_20)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_UPDATE_FAK_PADEJ (
    OPR_ID INTEGER,
    DATA_PADEJ DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_UPDATE_KLI_FIRMA_NODE (
    P_KLI_ID INTEGER,
    P_FIRMA_ID INTEGER,
    P_INVOICE SMALLINT,
    P_INVOICE_ENGL SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_UPDATE_KLI_PRAGOVE (
    SUMA DOUBLE PRECISION,
    NOM_PROD INTEGER,
    KLI_ID INTEGER,
    UPDATE_SUMA INTEGER,
    UPDATE_BR_PROD INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADD_VISIT_EL (
    P_VISIT_OPR_ID TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY,
    P_VISIT_TYPE_ID TYPE OF DOM_KEY,
    P_SYNCH_TIME TYPE OF DOM_DATE_TIME)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ANNUL_IN_EL_PRODUCTION (
    P_SIMPLE_ID INTEGER,
    P_OUT_OPR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ANNUL_KI (
    P_OPR_KI_ID INTEGER,
    P_IP INTEGER,
    P_USER_ID INTEGER,
    P_FLAG_FKT SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ANNUL_OPR_RETURN_KI_DOST_SUMA (
    P_OPR_RET_KI_DOST_SUMA_ID INTEGER,
    P_IS_FKT INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ANNUL_OUT_EL_PRODUCTION (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ANNUL_OUT_SN_MOVE (
    P_OPR_OUT_ID INTEGER,
    P_SIMPLE_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ANNUL_WAITING_OPR (
    P_TASK_ID INTEGER,
    P_ANNUL_OPR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ANUL_AMBALAJ (
    P_OPR_ID INTEGER,
    P_IP INTEGER,
    P_EDITING_USER INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ANUL_PARI (
    P_PARI_ID INTEGER,
    P_EDITING_USER_ID INTEGER,
    P_IP INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ANUL_PER_OTC (
    P_OPR_ID INTEGER,
    P_USER_ID INTEGER,
    P_IP INTEGER,
    P_EDITING_USER INTEGER,
    P_OBOB_KASI INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ANUL_PER_OTC_FROM_OPR (
    P_USER_ID INTEGER,
    P_IP INTEGER,
    P_OBOB_KASI INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ANUL_PROD_DEL_OUTEL (
    P_OUT_EL_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ANUL_PROD_SN (
    P_OUT_EL_ID INTEGER,
    P_FLAG_FKT SMALLINT,
    P_OLD_OUT_EL_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE BAUHAUS_IMPORT (
    P_SIMPLE_CODE DOM_CHAR_50,
    P_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    P_SIMPLE_NAME_SHORT TYPE OF DOM_CHAR_100,
    P_SIMPLE_NAME2 TYPE OF DOM_CHAR_100,
    P_BARCODE TYPE OF DOM_CHAR_15,
    P_BARCODE_KOL TYPE OF DOM_KOL,
    P_PRICE TYPE OF DOM_CENA,
    P_GRUPA_NAME TYPE OF DOM_CHAR_50,
    P_ME_NAME_LONG TYPE OF DOM_CHAR_15,
    P_ME_SHORT VARCHAR(2),
    P_FLAG_FIX_PRICE TYPE OF DOM_SMAL_INT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE BOND_FAK_EL_OUT_EL (
    P_FAK_EL_ID INTEGER,
    P_OUT_EL_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CENOVA_LISTA_ACTIV (
    P_CL_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CENOVA_LISTA_COPY (
    R_ID TYPE OF DOM_KEY,
    R_OPR_ID TYPE OF DOM_KEY,
    R_NAME TYPE OF DOM_CHAR_30)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CENOVA_LISTA_DEF (
    P_ID_CL INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CENOVA_LISTA_DEF_FIKS (
    P_CL_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CENOVA_LISTA_SET_FAKTURNA (
    P_CL_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CENOVA_LISTA_UPDATE (
    P_OPR TYPE OF DOM_KEY,
    P_ID TYPE OF DOM_KEY,
    P_CENA TYPE OF DOM_CENA,
    P_USER_ID TYPE OF DOM_KEY,
    OPR_ID_E TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CENOVA_LISTA_UPDATE_DOSTAVNA (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_CENA TYPE OF DOM_CENA,
    P_USER_ID TYPE OF DOM_KEY,
    OPR_ID_E TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CHANGE_AMBALAJ_KLI (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OLD_KLI_ID TYPE OF DOM_KEY,
    P_NEW_KLI_ID TYPE OF DOM_KEY,
    P_OLD_DATE TYPE OF DOM_DATE,
    P_NEW_DATE TYPE OF DOM_DATE)
RETURNS (
    R_RESULT TYPE OF DOM_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CHANGE_KASA_REKVIZITI (
    P_ID INTEGER,
    P_REKVIZIT INTEGER,
    P_VALUE_INT SMALLINT,
    P_VALUE_DOUBLE DOUBLE PRECISION,
    P_CRYPT INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CHANGE_LICENZ (
    P_OPR_ID INTEGER)
RETURNS (
    R_STATUS SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CHANGE_OPR_PAY_TYPE (
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_PAY_TYPE TYPE OF DOM_FLAG)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CHANGE_RECEPIE_LAST_CENA (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_DEPTH TYPE OF DOM_SMAL_INT,
    P_SKLAD_ID TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY = 0)
RETURNS (
    R_STATUS TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CHECK_ANUL_KONS (
    P_KONS_OPR_ID INTEGER)
RETURNS (
    R_STATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CHECK_FOR_KRIT_KOL (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY)
RETURNS (
    R_FLAG TYPE OF DOM_FLAG)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CHECK_OTR_KOL (
    P_KOL DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CL_GET_INFO_UPDATE (
    P_OPR TYPE OF DOM_KEY,
    P_SIM TYPE OF DOM_KEY,
    P_CENA TYPE OF DOM_CENA)
RETURNS (
    ID TYPE OF DOM_KEY,
    OT_OPR_ID TYPE OF DOM_KEY,
    OPR_ID TYPE OF DOM_KEY,
    NAME_CL TYPE OF DOM_CHAR_30,
    CENA TYPE OF DOM_CENA,
    PROCENT TYPE OF DOM_PERCENT,
    ROUND_TIP_ID TYPE OF DOM_KEY,
    NAME_ROUNT TYPE OF DOM_CHAR_20,
    UP_DOWN TYPE OF DOM_SMAL_INT,
    COEFFICIENT TYPE OF DOM_PERCENT,
    PRODUCE TYPE OF DOM_CENA,
    NEW_CENA TYPE OF DOM_CENA,
    NEW_PROCENT TYPE OF DOM_PERCENT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CL_GET_INFO_UPDATE1 (
    P_OPR TYPE OF DOM_KEY,
    P_SIM TYPE OF DOM_KEY,
    P_CENA TYPE OF DOM_CENA)
RETURNS (
    ID TYPE OF DOM_KEY,
    OT_OPR_ID TYPE OF DOM_KEY,
    OPR_ID TYPE OF DOM_KEY,
    NAME_CL TYPE OF DOM_CHAR_30,
    CENA TYPE OF DOM_CENA,
    PROCENT TYPE OF DOM_PERCENT,
    ROUND_TIP_ID TYPE OF DOM_KEY,
    NAME_ROUNT TYPE OF DOM_CHAR_20,
    UP_DOWN TYPE OF DOM_SMAL_INT,
    COEFFICIENT DOUBLE PRECISION,
    PRODUCE DOUBLE PRECISION,
    NEW_CENA TYPE OF DOM_CENA,
    NEW_PROCENT TYPE OF DOM_PERCENT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CL_HISTORY_SAVE (
    SIM_ID INTEGER,
    OPR_ID_CL INTEGER,
    CENA_NEW DOUBLE PRECISION,
    USER_ID INTEGER,
    OPR_ID_E INTEGER,
    P_FROM_OPR_ID TYPE OF DOM_INT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CL_IZB_CENOVILISTI (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID_S VARCHAR(1000),
    P_OPR_ID INTEGER,
    P_PROD INTEGER,
    P_FAKT INTEGER)
RETURNS (
    R_OPR_ID INTEGER,
    R_CENA DOUBLE PRECISION,
    R_PROCENT DOUBLE PRECISION,
    R_NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CL_RAZLIKA_DOST (
    P_OPR_ID INTEGER,
    P_SKLAD_ID_S VARCHAR(1000))
RETURNS (
    SIMPLE_ID INTEGER,
    LAST_CENA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CL_RAZLIKA_SR (
    SKLAD_ID_S VARCHAR(1000),
    P_OPR_ID INTEGER)
RETURNS (
    SIMPLE_ID INTEGER,
    CENA_SR DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CL_UPDATE_DOSTAVNA (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_CENA TYPE OF DOM_CENA,
    P_USER_ID TYPE OF DOM_KEY,
    OPR_ID_E TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY = 0)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CL_UPDATE_DROM_DOST_EDIT (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_CENA TYPE OF DOM_CENA,
    P_USER_ID TYPE OF DOM_KEY,
    OPR_ID_E TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY = 0)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CL_UPDATE_FAKT (
    P_SIM_ID TYPE OF DOM_KEY,
    P_USER_ID TYPE OF DOM_KEY,
    P_OPR_ID_E_CL TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CL_UPDATE_SR (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_UPDATE TYPE OF DOM_SMAL_INT,
    P_USER_ID TYPE OF DOM_KEY,
    OPR_ID_E TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY = 0)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CLONE_SIMPLE (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_COUNT TYPE OF DOM_INT,
    P_USER_ID TYPE OF DOM_INT)
RETURNS (
    R_NEW_SIMPLE_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE COPY_TABLE_PRICES (
    P_FROM_SIMPLE_ID TYPE OF DOM_KEY,
    P_TO_SIMPLE_ID TYPE OF DOM_KEY,
    P_ROUND_TIP_ID TYPE OF DOM_KEY,
    P_COEFFICIENT TYPE OF DOM_CENA)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CRM_ADD_HEADAR (
    P_TASKS_TIP_ID INTEGER,
    P_KLI_ID INTEGER,
    P_STATUS_TASKS INTEGER,
    P_OPR_ID INTEGER,
    P_NOTE BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    P_DOSHLO INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE DEC_OTC_SUMI (
    P_SUMA DOUBLE PRECISION,
    P_SKLAD_ID INTEGER,
    P_USER_ID INTEGER,
    P_OTC_OPR_ID INTEGER,
    P_OPR_TYPE SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DEC_PARI_OTC_EDIT (
    P_OPR_ID INTEGER,
    P_USER_EDIT INTEGER,
    P_IP INTEGER,
    P_SUMA DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DEC_SUMA_KI_DOST (
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_SUMA TYPE OF DOM_SUMA)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DECREASE_LICENZ (
    P_OPR_ID INTEGER)
RETURNS (
    R_STATUS SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE DEL_COMMENT (
    TABLE_NODE_NAME VARCHAR(30),
    ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DEL_FROM_KASA_TMP (
    P_USER_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DEL_IN_EL_FROM_INV (
    P_IN_EL_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DEL_OUT_EL_FROM_INV (
    P_OUT_EL_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_DVSK_EL
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_KLI_SKLAD_NODE
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_PRIORITET (
    P_PRIORITET INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_PROP_NODE (
    P_NODE_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_SIMPLE_PROP_NODE (
    P_NODE_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DO_CALCULATION (
    P_SIMPLE_ID INTEGER,
    P_FLAG_IZL SMALLINT,
    P_FLAG_FKT SMALLINT)
RETURNS (
    R_RESULT SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE DO_EDIT_DOST_PARTIDI_SUB_QUERY (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_DATE DATE)
RETURNS (
    R_KOL DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_EL_ID INTEGER,
    R_OPR_ID INTEGER,
    R_OPR_TIP INTEGER,
    R_SKLAD_ID INTEGER,
    R_OPR_DATE DATE,
    R_IN_OUT SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE DOST_EDIT_GET_SN (
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_SN VARCHAR(30),
    R_ELEMENT_ID INTEGER,
    R_IS_USED SMALLINT,
    R_IN_EL_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE DOST_IMPORT_KLI_MAP_INS (
    IN_KLI_NAME VARCHAR(100),
    KLI_ID INTEGER)
RETURNS (
    L_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE DOST_IMPORT_RAZF_MAP_INS (
    IN_RAZF_ID INTEGER,
    RAZF_ID INTEGER,
    KLI_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DOST_IMPORT_SIMPLE_MAP_INS (
    IN_SIMPLE_ID INTEGER,
    SIMPLE_ID INTEGER,
    KLI_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DOST_POR_KOL_RZV (
    P_OPR_DOST INTEGER)
RETURNS (
    R_POR_ID INTEGER,
    R_ZA_DATA DATE,
    R_SIMPLE_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_SIM_NAME VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE DVSK_EL_ADD (
    P_IN_EL INTEGER,
    P_KLI_ID_PROIZV INTEGER,
    P_TYPE_DOK INTEGER,
    P_NOM_DOK VARCHAR(20),
    P_DATE_PROIZV DATE,
    P_BG_NOMER VARCHAR(15),
    P_PROIZHOD INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_ADDRESS (
    P_ID INTEGER /* TYPE OF COLUMN ADDRESSES.ID */,
    P_PLACE_ID INTEGER /* TYPE OF COLUMN ADDRESSES.PLACE_ID */,
    P_ADDRESS VARCHAR(100) /* TYPE OF COLUMN ADDRESSES.ADDRESS */)
RETURNS (
    R_STATUS TYPE OF DOM_FLAG)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE EDIT_ALL_SIMCALC_DOSTSUMA (
    P_SIMPLE_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_COMMENT (
    TABLE_NODE_NAME VARCHAR(30),
    ID INTEGER,
    NOTE BLOB SUB_TYPE 1 SEGMENT SIZE 2048)
RETURNS (
    COMMENT_ID SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE EDIT_DOST_NEW_CENA (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_DATE DATE)
RETURNS (
    R_RESULT SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE EDIT_DOST_NEW_NAL (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_FLAG_IZL SMALLINT,
    P_DATE DATE)
RETURNS (
    R_RESULT SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE EDIT_DOST_OLD_CENA (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_DATE DATE)
RETURNS (
    R_RESULT SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE EDIT_DOST_OLD_NAL (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_OLD_DATE DATE,
    P_NEW_DATE DATE,
    P_NEW_SKLAD INTEGER)
RETURNS (
    R_RESULT SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE EDIT_DOST_SN_CHANGE_SKLAD (
    P_IN_EL_ID INTEGER,
    P_OLD_SKLAD_ID SMALLINT,
    P_NEW_SKLAD_ID SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_FIRMA_FAK_DATA
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_IN_DEC_KOL (
    P_EL_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_IN_EL_ID INTEGER,
    P_OPR_ID INTEGER,
    P_FLAG_SN CHAR(1))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_IN_EL_KOL2 (
    P_IN_EL_ID INTEGER,
    P_NEW_KOL DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_KLI (
    P_KLI_ID INTEGER,
    P_KLI_NAME VARCHAR(100),
    P_KLI_CODE VARCHAR(15),
    P_KLI_TEL VARCHAR(30),
    P_KLI_ADRES VARCHAR(50),
    P_KLI_COMMENT VARCHAR(30),
    P_FIRMA_NAME VARCHAR(100),
    P_FIRMA_MOL VARCHAR(30),
    P_FIRMA_ADRES VARCHAR(50),
    P_FIRMA_BULSTAT VARCHAR(13),
    P_FIRMA_IDNOMDDS VARCHAR(15),
    P_T INTEGER,
    P_FIRMA_PLACE_ID INTEGER = null,
    P_KLI_PLACE_ID INTEGER = null)
RETURNS (
    R_KLI_ID INTEGER,
    R_FIRMA_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE EDIT_OTC_AFTER_OPR_ANUL (
    P_OPR_ID INTEGER,
    P_USER_ID INTEGER,
    P_IP INTEGER,
    P_OPR_TIP SMALLINT,
    P_OBOB_PARI_TMP INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OTC_AFTER_OPR_EDIT (
    P_OPR_ID INTEGER,
    P_OPR_TIP SMALLINT,
    P_OLD_SKLAD INTEGER,
    P_NEW_SKLAD INTEGER,
    P_OLD_USER INTEGER,
    P_NEW_USER INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION,
    P_IP INTEGER,
    P_EDITING_USER INTEGER,
    P_FLAG_TOTAL INTEGER,
    P_NEW_KASA INTEGER,
    P_OLD_KASA INTEGER,
    P_FLAG_SKLOPR SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OTC_AFTER_OPR_FAK_IN_ANUL (
    P_OPR_ID INTEGER,
    P_USER_ID INTEGER,
    P_IP INTEGER,
    P_OBOB_PARI_TMP INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OTC_AFTER_PAY_ANUL (
    P_OPR_ID INTEGER,
    P_USER_ID INTEGER,
    P_IP INTEGER,
    P_OTC_TIP SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OTC_AFTER_PAY_EDIT (
    P_OPR_ID INTEGER,
    P_USER_EDIT INTEGER,
    P_IP INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION,
    P_OTC_TIP_SUMA SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OTC_SUMA_DOST (
    P_OTC_ID INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OTC_SUMA_PROD (
    P_OTC_ID INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OTC_SUMA_SKLAD_DOST (
    P_OTC_ID INTEGER,
    P_OLD_SKLAD INTEGER,
    P_NEW_SKLAD INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OTC_SUMA_SKLAD_PROD (
    P_OTC_ID INTEGER,
    P_OLD_SKLAD INTEGER,
    P_NEW_SKLAD INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OTC_SUMA_TOTAL (
    P_OPR_ID INTEGER,
    P_TIP SMALLINT,
    P_SUMA DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OTC_SUMA_USER_DOST (
    P_OTC_ID INTEGER,
    P_OLD_USER INTEGER,
    P_NEW_USER INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION,
    P_IP INTEGER,
    P_EDITING_USER INTEGER,
    P_OPR_ID INTEGER,
    P_OLD_KASA INTEGER,
    P_NEW_KASA INTEGER,
    P_FLAG_SKLOPR SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OTC_SUMA_USER_PROD (
    P_OTC_ID INTEGER,
    P_OLD_USER INTEGER,
    P_NEW_USER INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION,
    P_IP INTEGER,
    P_EDITING_USER INTEGER,
    P_OPR_ID INTEGER,
    P_OLD_KASA INTEGER,
    P_NEW_KASA INTEGER,
    P_FLAG_SKLOPR SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OUT_CENA (
    P_SUMA DOUBLE PRECISION,
    P_OUT_EL_ID INTEGER,
    P_OPR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OUT_DEC_KOL (
    P_OUT_EL INTEGER,
    P_KOL DOUBLE PRECISION,
    P_OPR_ID INTEGER,
    P_USLUGA CHAR(1),
    P_SKLAD_ID INTEGER,
    P_FLAG INTEGER,
    P_AUTO_IZL SMALLINT)
RETURNS (
    R_SUMA_UPDATE DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE EDIT_OUT_DEC_SN (
    P_OUT_EL_ID INTEGER,
    P_ELEMENT_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OUT_DEC_SN_IZP (
    P_OUT_EL_ID INTEGER,
    P_ELEMENT_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OUT_DEC_SN_MOVE (
    P_ELEMENT_ID INTEGER,
    P_OUT_EL_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OUT_DEC_SN_PROD (
    P_OUT_EL_ID INTEGER,
    P_ELEMENT_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OUT_DEL_EL (
    P_KOL DOUBLE PRECISION,
    P_OUT_EL_ID INTEGER,
    P_OPR_ID INTEGER,
    P_USLUGA CHAR(1),
    P_SKLAD_ID INTEGER,
    P_FLAG INTEGER,
    P_AUTO_IZL SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OUT_EL_KOL2 (
    P_OUT_EL_ID INTEGER,
    P_NEW_KOL DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OUT_INC_SN_IZP (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OUT_INC_SN_MOVE (
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_OUT_IN_EL_ID TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_OUT_INC_SN_PROD (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_PARI (
    P_EDIT_OPR_ID INTEGER,
    P_PARI_ID INTEGER,
    P_SUMA DOUBLE PRECISION,
    P_ACTION_TYPE SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_PARI_SKLOPR_NODE (
    P_OPR_ID INTEGER,
    P_OTC_ID INTEGER,
    P_OPR_TIP SMALLINT,
    P_OLD_USER INTEGER,
    P_NEW_USER INTEGER,
    P_NEW_KASA_ID INTEGER,
    P_NEW_SUMA DOUBLE PRECISION,
    P_IP INTEGER,
    P_EDITING_USER INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_RZV_NAL (
    OPR_ID INTEGER,
    OPR_ID_EDIT INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_RZV_POR (
    P_NAL_ID INTEGER,
    P_KOL_NAL DOUBLE PRECISION,
    P_KOL_RZV DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_SERIAL_NUM (
    P_EL_ID INTEGER,
    P_SN VARCHAR(30))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_SIMCALC_DOSTSUMA (
    P_SIMPLE_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EDIT_TS_OTC (
    P_ID TYPE OF DOM_KEY,
    P_OTC_FILE TYPE OF DOM_BLOB_TEXT)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE FAST_PARTIDA_HISTORY_OLD (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT = NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE FAST_RETURN_AUTO_MOVE (
    P_RET_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE FIND_KOL_FOR_IZL (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID INTEGER,
    P_OPR_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_DATE DATE)
RETURNS (
    R_RESULT SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE FIND_SIMPLES_FOR_RECALC (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_FLAG_FKT TYPE OF DOM_FLAG,
    P_DEPTH TYPE OF DOM_SMAL_INT)
RETURNS (
    R_DEPTH TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE FIX_ALL (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_FLAG_IZL TYPE OF DOM_SMAL_INT,
    P_FLAG_FKT TYPE OF DOM_SMAL_INT,
    P_OPR_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT,
    P_DATE TYPE OF DOM_DATE)
RETURNS (
    R_RESULT TYPE OF DOM_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE FIX_DOUBLE
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE FIX_GORIVO
RETURNS (
    ID INTEGER,
    KLI_ID INTEGER,
    SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE FIX_MOVE_ORN
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE FREE_RZV_PARTIDA_KOL (
    P_OPR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE FTPDOCUMENT_EXISTS (
    P_CODE INTEGER,
    P_RECORD_ID INTEGER)
RETURNS (
    R_EXISTS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GENERATE_DIST_PAY_FOR_SALE (
    P_DIST_ID TYPE OF DOM_KEY,
    P_SALE_ID TYPE OF DOM_KEY,
    P_USER_ID TYPE OF DOM_KEY,
    P_SUM TYPE OF DOM_SUMA,
    P_DATE TYPE OF DOM_DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE GENERATE_UNP (
    P_USER_ID TYPE OF DOM_SMAL_INT,
    P_FP_NUMBER TYPE OF DOM_FP_NUMBER)
RETURNS (
    R_UNP TYPE OF DOM_UNP,
    R_STATUS TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GENERATOR_NACHISLIAVANE (
    P_BROI_GENERIRANIA INTEGER,
    P_GEN_ZADULJITELNO INTEGER)
RETURNS (
    R_ID INTEGER,
    R_COUNT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GENERATOR_NACHISLIAVANE_1 (
    P_BROI_GENERIRANIA INTEGER,
    P_GEN_ZADULJITELNO INTEGER)
RETURNS (
    R_ID INTEGER,
    R_COUNT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GENERATOR_NACHISLIAVANE_DOPL (
    P_TEMPLATE_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE GENERATOR_NACHISLIAVANE_SLEDI (
    P_BROI_GENERIRANIA INTEGER,
    P_GEN_ZADULJITELNO INTEGER)
RETURNS (
    R_ID INTEGER,
    R_COUNT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GENERATOR_NACHISLIAVANE_ZA_DATA (
    P_BROI_GENERIRANIA INTEGER,
    P_ZA_DATA DATE)
RETURNS (
    R_ID INTEGER,
    R_COUNT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ACTIV_BONUS (
    P_KLI_ID INTEGER,
    P_TIP_BONUS SMALLINT,
    P_SKLAD_ID INTEGER)
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ACTIVE_FP_NUMBER (
    R_OBEKT_ID TYPE OF DOM_KEY)
RETURNS (
    R_FP_NUMBER TYPE OF DOM_FP_NUMBER,
    R_UNP INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ACTIVE_PRICE_LISTS (
    P_SKLAD_ID TYPE OF DOM_KEY)
RETURNS (
    R_PRICE_LIST_OPR_ID TYPE OF DOM_INT,
    R_SKLAD_ID TYPE OF DOM_INT,
    R_IS_PROMOTIONAL TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_AGENT_KLIENTI (
    P_AGENT INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ALL_CALC (
    P_FILTER_SIMPLE VARCHAR(180))
RETURNS (
    R_NAME_DETAIL VARCHAR(100),
    R_NAME_CHILD VARCHAR(100),
    R_KOL TYPE OF DOM_KOL,
    R_ME CHAR(2),
    R_FORMULA TYPE OF DOM_CHAR_120,
    R_SELEKCIQ_NAME VARCHAR(50),
    R_CENA_SP DOUBLE PRECISION,
    R_SUMA TYPE OF DOM_SUMA,
    R_SIMPLE_CHILD_ID INTEGER,
    R_LAST_CENA TYPE OF DOM_CENA,
    R_SUMA_LAST_CENA TYPE OF DOM_SUMA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ALL_SIMPLE_AND_SKLAD_OBOB (
    P_FROM_DATE DATE,
    P_TO_DATE DATE,
    P_NULI SMALLINT)
RETURNS (
    R_KOL_NACH DOUBLE PRECISION,
    R_KOL_SALDO DOUBLE PRECISION,
    R_SUMA_NACH_FR DOUBLE PRECISION,
    R_SUMA_SALDO_FR DOUBLE PRECISION,
    R_SUMA_SR_OB DOUBLE PRECISION,
    R_SUMA_NACH_OUT_SR DOUBLE PRECISION,
    R_SUMA_SALDO_SR DOUBLE PRECISION,
    R_SUMA_NACH_SR DOUBLE PRECISION,
    R_SUMA_FR_OB DOUBLE PRECISION,
    R_KOL_OB DOUBLE PRECISION,
    R_KOL_IN_OB DOUBLE PRECISION,
    R_KOL_OUT_OB DOUBLE PRECISION,
    R_SUMA_IN_SR_OB DOUBLE PRECISION,
    R_SUMA_OUT_SR_OB DOUBLE PRECISION,
    R_SUMA_OUT_FR_OB DOUBLE PRECISION,
    R_SUMA_IN_FR_OB DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ALL_SIMPLE_HISTORY (
    P_SKLAD_ID TYPE OF DOM_KEY_SMALL,
    P_FROM_DATE TYPE OF DOM_CHAR_10,
    P_TO_DATE TYPE OF DOM_CHAR_10,
    P_FILTER_SIMPLES VARCHAR(1024),
    P_FILTER_ORDER TYPE OF DOM_CHAR_10)
RETURNS (
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_OPR_ID TYPE OF DOM_KEY,
    R_OPR_TIP TYPE OF DOM_KEY_SMALL,
    R_OPR_NAME VARCHAR(45),
    R_OPR_DATE TYPE OF DOM_DATE,
    R_KOL_IN TYPE OF DOM_KOL,
    R_KOL_OUT TYPE OF DOM_KOL,
    R_KOL_SALDO TYPE OF DOM_KOL,
    R_SUMA_IN_FR TYPE OF DOM_SUMA,
    R_SUMA_OUT_FR TYPE OF DOM_SUMA,
    R_SUMA_SALDO_FR TYPE OF DOM_SUMA,
    R_SUMA_IN_SR TYPE OF DOM_SUMA,
    R_SUMA_OUT_SR TYPE OF DOM_SUMA,
    R_SUMA_SALDO_SR DOUBLE PRECISION,
    R_SKLAD_NAME VARCHAR(20),
    R_BARCODE VARCHAR(13),
    R_SIMPLE_CODE VARCHAR(50),
    R_ED_CENA_IN_FR TYPE OF DOM_CENA,
    R_ED_CENA_IN_SR TYPE OF DOM_CENA,
    R_ED_CENA_OUT_FR TYPE OF DOM_CENA,
    R_ED_CENA_OUT_SR TYPE OF DOM_CENA,
    R_ED_CENA_SALDO_FR TYPE OF DOM_CENA,
    R_ED_CENA_SALDO_SR TYPE OF DOM_CENA,
    R_KLI_ID TYPE OF DOM_KEY,
    R_PN_SUMA_FR TYPE OF DOM_KOL,
    R_PN_SUMA_SR TYPE OF DOM_KOL,
    R_PN_KOL TYPE OF DOM_KOL,
    R_PN_SALDO_SUMA_FR TYPE OF DOM_KOL,
    R_PN_SALDO_SUMA_SR TYPE OF DOM_SUMA,
    R_PN_SALDO_KOL TYPE OF DOM_KOL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ALL_SIMPLE_HISTORY_OBOB (
    P_SKLAD_ID TYPE OF DOM_KEY,
    P_FROM_DATE TYPE OF DOM_CHAR_10,
    P_TO_DATE TYPE OF DOM_CHAR_10,
    P_FILTER_SIMPLES VARCHAR(1024),
    P_NULI TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SIMPLE_CODE TYPE OF DOM_CHAR_50,
    R_BARCODE VARCHAR(13),
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_KOLNACH TYPE OF DOM_KOL,
    R_KOL_SALDO TYPE OF DOM_KOL,
    R_SUMANACH_FR TYPE OF DOM_SUMA,
    R_SUMA_SALDO_FR TYPE OF DOM_SUMA,
    R_SUMA_SR_OB TYPE OF DOM_SUMA,
    R_SUMA_SALDO_SR TYPE OF DOM_SUMA,
    R_SUMANACH_SR TYPE OF DOM_SUMA,
    R_SUMA_FR_OB TYPE OF DOM_SUMA,
    R_KOL_OB TYPE OF DOM_KOL,
    R_KOL_IN_OB TYPE OF DOM_KOL,
    R_KOL_OUT_OB TYPE OF DOM_KOL,
    R_SUMA_IN_SR_OB TYPE OF DOM_SUMA,
    R_SUMA_OUT_SR_OB TYPE OF DOM_SUMA,
    R_SUMA_OUT_FR_OB TYPE OF DOM_SUMA,
    R_SUMAIN_FR_OB TYPE OF DOM_SUMA,
    R_ED_CENA_IN_SR TYPE OF DOM_CENA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ALL_SN_EXPIRATION_DATE (
    P_OUT_EL_ID INTEGER)
RETURNS (
    R_SN TYPE OF DOM_CHAR_30,
    R_OUT_EL_ID TYPE OF DOM_KEY,
    R_EXPIRATION_DATE_STR TYPE OF DOM_CHAR_10)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_AMBALAJ (
    P_SIMPLE_ID INTEGER,
    P_KOL INTEGER,
    P_KLI INTEGER,
    P_CL_ID INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL INTEGER,
    R_KOL_TOTAL DOUBLE PRECISION,
    R_CENA_CL DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_AMBALAJ_KLI_POR (
    P_OPR_ID INTEGER,
    P_CL_ID INTEGER)
RETURNS (
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL DOUBLE PRECISION,
    R_CENA DOUBLE PRECISION,
    R_KOL_OUT DOUBLE PRECISION,
    R_KOL_IN DOUBLE PRECISION,
    R_KOL_OLD DOUBLE PRECISION,
    R_KOL_TOTAL DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_AMBALAJ_KLIENT (
    P_KLI_ID INTEGER,
    P_CL_ID INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_CODE VARCHAR(50),
    R_KOL DOUBLE PRECISION,
    R_CENA_CL DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_AMBALAJ_OB (
    P_SIMPLE_ID INTEGER,
    P_KOL INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_KOL INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_AMBALAJ_OPR (
    P_OPR_ID INTEGER,
    P_ALL SMALLINT,
    P_CL_ID INTEGER)
RETURNS (
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL DOUBLE PRECISION,
    R_KOL_OLD DOUBLE PRECISION,
    R_CENA DOUBLE PRECISION,
    R_SUMA_PARTIDA TYPE OF DOM_SUMA,
    R_SIMPLE_CODE TYPE OF DOM_CHAR_15)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_AMBALAJ_VR (
    P_OPR_ID INTEGER)
RETURNS (
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL DOUBLE PRECISION,
    R_KOL_OLD DOUBLE PRECISION,
    R_KOL_TOTAL DOUBLE PRECISION,
    R_SUMA_PARTIDA TYPE OF DOM_SUMA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ANUL_PORS
RETURNS (
    R_SKLAD_ID INTEGER,
    R_SKLAD_NAME VARCHAR(20),
    R_POR_ID INTEGER,
    R_OPR_ID INTEGER,
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_ZA_DATA DATE,
    R_TIP SMALLINT,
    R_STATUS SMALLINT,
    R_NOM_POR VARCHAR(30),
    R_AGENT_NAME VARCHAR(100),
    R_USER_NAME VARCHAR(30),
    R_AGENT_ID INTEGER,
    R_FOR_DATE_TIME TYPE OF DOM_DATE_TIME,
    R_KLI_ADRES TYPE OF DOM_CHAR_100,
    R_UNP_ID TYPE OF DOM_INT64,
    R_UNP TYPE OF DOM_UNP)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ASSECO_CUSTOMERS (
    P_SEL_ID TYPE OF DOM_KEY,
    P_KLI_ID TYPE OF DOM_KEY,
    P_BASE_BRANCH_ID TYPE OF DOM_KEY,
    P_DAYS TYPE OF DOM_KEY)
RETURNS (
    R_BRANCH_ID TYPE OF DOM_SMAL_INT,
    R_CUSTOMER_ID TYPE OF DOM_KEY,
    R_PAYER_ID TYPE OF DOM_KEY,
    R_CUSTOMER_NAME TYPE OF DOM_CHAR_100,
    R_CUSTOMER_NAME_2 TYPE OF DOM_CHAR_100,
    R_CUSTOMER_TYPE TYPE OF DOM_CHAR_50,
    R_COUNTRY_ID TYPE OF DOM_CHAR_10,
    R_CITY_NAME TYPE OF DOM_CHAR_30,
    R_POSTAL_CODE TYPE OF DOM_CHAR_8,
    R_STREET_NAME TYPE OF DOM_CHAR_100,
    R_APT_NUMBER TYPE OF DOM_CHAR_8,
    R_TIN TYPE OF DOM_CHAR_50,
    R_CUSTOMER_STATUS TYPE OF DOM_SMAL_INT,
    R_LATITUDE TYPE OF DOM_KOL,
    R_LONGITUDE TYPE OF DOM_KOL,
    R_REGION1 TYPE OF DOM_CHAR_100,
    R_REGION2 TYPE OF DOM_CHAR_100,
    R_REGION3 TYPE OF DOM_CHAR_100,
    R_REGION4 TYPE OF DOM_CHAR_100)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ASSECO_ORDERS_CONFIRMATION (
    P_SEL_ID TYPE OF DOM_INT,
    P_KLI_ID TYPE OF DOM_INT,
    P_BASE_BRANCH_ID TYPE OF DOM_INT,
    P_TYPE_ORDER TYPE OF DOM_SMAL_INT)
RETURNS (
    R_OPERATION_ID TYPE OF DOM_KEY,
    R_SOURCE TYPE OF DOM_CHAR_50,
    R_BRANCH_ID TYPE OF DOM_SMAL_INT,
    R_ORDER_NUMBER TYPE OF DOM_CHAR_30,
    R_STATUS_ID TYPE OF DOM_SMAL_INT,
    R_STATUS_DESCRIPTION TYPE OF DOM_CHAR_100)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ASSECO_PRODUCTS (
    P_BASE_BRANCH_ID TYPE OF DOM_SMAL_INT,
    P_DEF_CURRENCY TYPE OF DOM_SMAL_INT,
    P_KLI_ID TYPE OF DOM_KEY,
    P_VAT TYPE OF DOM_SMAL_INT,
    P_SEL_ID INTEGER)
RETURNS (
    R_BRANCH_ID TYPE OF DOM_SMAL_INT,
    R_PRODUCT_ID TYPE OF DOM_INT,
    R_PRODUCER_PRODUCT_ID TYPE OF DOM_CHAR_50,
    R_EAN TYPE OF DOM_CHAR_15,
    R_PRODUCT_NAME1 TYPE OF DOM_CHAR_100,
    R_PRODUCT_NAME2 TYPE OF DOM_CHAR_100,
    R_CURRENCY_ID TYPE OF DOM_STR_3,
    R_NET_PRICE TYPE OF DOM_CENA,
    R_MEASURE_UNIT_ID TYPE OF DOM_CHAR_15,
    R_MEASURE_UNIT_NAME TYPE OF DOM_CHAR_15,
    R_PRODUCER_ID TYPE OF DOM_CHAR_50,
    R_PRODUCER_NAME TYPE OF DOM_CHAR_50,
    R_PRODUCT_STATUS TYPE OF DOM_SMAL_INT,
    R_MULTIPLIER TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ASSECO_SALES (
    P_SEL_ID TYPE OF DOM_KEY,
    P_KLI_ID TYPE OF DOM_KEY,
    P_VAT TYPE OF DOM_SMAL_INT,
    P_DAYS TYPE OF DOM_INT)
RETURNS (
    R_OPERATION_ID TYPE OF DOM_KEY,
    R_PRODUCT_ID TYPE OF DOM_KEY,
    R_MEASURE_UNIT_ID TYPE OF DOM_CHAR_15,
    R_PRODUCER_ID TYPE OF DOM_CHAR_10,
    R_QTY TYPE OF DOM_KOL,
    R_QTY_WAS TYPE OF DOM_KOL,
    R_NET_PRICE TYPE OF DOM_CENA,
    R_NET_VALUE TYPE OF DOM_SUMA,
    R_NET_VALUE_WAS TYPE OF DOM_SUMA,
    R_PROMOTION_STATUS TYPE OF DOM_SMAL_INT,
    R_PROMOTION_ID VARCHAR(200),
    R_FIELD_3 VARCHAR(200),
    R_PARCHASE_ORDER TYPE OF DOM_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ASSECO_SALES_HEADER (
    P_SEL_ID TYPE OF DOM_INT,
    P_KLI_ID TYPE OF DOM_INT,
    P_BASE_BRANCH_ID TYPE OF DOM_INT,
    P_BASE_CURRENCY_ID TYPE OF DOM_INT,
    P_DAYS TYPE OF DOM_SMAL_INT)
RETURNS (
    R_OPERATION_ID TYPE OF DOM_INT,
    R_TYPE_ID TYPE OF DOM_STR_3,
    R_BRANCH_ID TYPE OF DOM_INT,
    R_DOC_ID TYPE OF DOM_INT,
    R_CURRENCY_ID TYPE OF DOM_STR_3,
    R_ISSUE_DATE TYPE OF DOM_DATE_TIME,
    R_SALE_DATE TYPE OF DOM_DATE,
    R_CUSTOMER_ID TYPE OF DOM_INT,
    R_CORDOC_ID TYPE OF DOM_INT,
    R_CORDOC_DATE TYPE OF DOM_DATE,
    R_TYPESALE_ID TYPE OF DOM_STR_3,
    R_DATE_OF_ISSUE TYPE OF DOM_DATE,
    R_NUMBER_OF_INVOICE TYPE OF DOM_CHAR_10,
    R_FIELD3 VARCHAR(200))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ASSECO_STOCKS (
    P_SEL_ID TYPE OF DOM_INT,
    P_KLI_ID TYPE OF DOM_INT,
    P_BASE_BRANCH_ID TYPE OF DOM_INT,
    P_BASE_CURRENCY TYPE OF DOM_INT,
    P_VAT TYPE OF DOM_SMAL_INT)
RETURNS (
    R_BRANCH_ID TYPE OF DOM_INT,
    R_PRODUCT_ID TYPE OF DOM_INT,
    R_STOCK_DATE TYPE OF DOM_DATE,
    R_MEASURE_UNIT_ID TYPE OF DOM_CHAR_15,
    R_PRODUCER_ID TYPE OF DOM_CHAR_10,
    R_CURRENCY_ID TYPE OF DOM_STR_3,
    R_STOCK TYPE OF DOM_KOL,
    R_NET_VALUE TYPE OF DOM_SUMA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_BARCODE (
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_BAR_CODE VARCHAR(15))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_BONUS_ATRIBUT (
    P_SIM_ID INTEGER,
    P_SKLAD_ID INTEGER,
    P_KLI_ID INTEGER)
RETURNS (
    R_DDS NUMERIC(4,2),
    R_USLUGA CHAR(1),
    R_CENA_CL DOUBLE PRECISION,
    R_CENA_OS DOUBLE PRECISION,
    R_VALUTA_ID TYPE OF DOM_KEY_SMALL,
    R_CENA_VALUTA TYPE OF DOM_CENA,
    R_FLAG_LOCK TYPE OF DOM_FLAG,
    R_VAT_PERCENT NUMERIC(4,2),
    R_VAT_GROUP TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_BONUS_PRODUKT_D (
    P_BONUS_ID INTEGER,
    P_SIM_ID INTEGER,
    P_TIP INTEGER,
    P_SEL_ID INTEGER,
    P_TIP_BONUS SMALLINT)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_BONUS_PRODUKT_SEL_D (
    P_BONUS_ID INTEGER,
    P_SIM_SEL_ID INTEGER,
    P_TIP INTEGER,
    P_SEL_ID INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_BONUS_SUMA_D (
    P_BONUS_ID INTEGER,
    P_OT_SUMA DOUBLE PRECISION,
    P_DO_SUMA DOUBLE PRECISION,
    P_TIP INTEGER,
    P_SEL_ID INTEGER,
    P_TIP_BONUS SMALLINT)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_BONUSI (
    P_KLI_ID INTEGER,
    P_SUMA DOUBLE PRECISION,
    P_TIP_BONUS SMALLINT,
    P_SKLAD_ID INTEGER)
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(50),
    R_SIM_ID INTEGER,
    R_SIM_NAME VARCHAR(100),
    R_SIM_KOL DOUBLE PRECISION,
    R_SIM_CENA DOUBLE PRECISION,
    R_PROCENT DOUBLE PRECISION,
    R_SIM_P_ID INTEGER,
    R_SIM_P_KOL DOUBLE PRECISION,
    R_SIM_P_NAME VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_BONUSI_ZA_PRODUKT (
    P_SIM_ID INTEGER,
    P_SIM_KOL DOUBLE PRECISION,
    P_SKLAD_ID INTEGER)
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(50),
    R_SIM_ID INTEGER,
    R_SIM_NAME VARCHAR(100),
    R_SIM_KOL DOUBLE PRECISION,
    R_SIM_CENA DOUBLE PRECISION,
    R_SIM_P_ID INTEGER,
    R_SIM_P_KOL DOUBLE PRECISION,
    R_SIM_P_NAME VARCHAR(100),
    R_TIP_BONUS INTEGER,
    R_PROCENT DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_BTC (
    P_SIM_ID INTEGER,
    P_KLI_ID INTEGER,
    P_SKLAD_ID INTEGER)
RETURNS (
    R_BTC INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CEN_LIST_SIMPLE (
    ID_SIMPLE TYPE OF DOM_KEY)
RETURNS (
    NAME TYPE OF DOM_CHAR_30,
    OT_DATE TYPE OF DOM_DATE,
    DO_DATE TYPE OF DOM_DATE,
    OT_TIME TYPE OF DOM_TIME,
    DO_TIME TYPE OF DOM_TIME,
    WEEK TYPE OF DOM_INT,
    ACTIVNA TYPE OF DOM_SMAL_INT,
    OT_OPR_ID TYPE OF DOM_INT,
    TIP1 TYPE OF DOM_SMAL_INT,
    PROCENT TYPE OF DOM_PERCENT,
    CENA TYPE OF DOM_CENA,
    TIP_OT_CENA TYPE OF DOM_INT,
    OPR_ID TYPE OF DOM_KEY,
    CENA_SR TYPE OF DOM_CENA,
    ROUND_TIP TYPE OF DOM_KEY,
    SUMA_SR TYPE OF DOM_SUMA,
    KOL_SR TYPE OF DOM_SUMA,
    FAKT TYPE OF DOM_INT,
    SEL_ID TYPE OF DOM_KEY,
    R_BASE_PERCENT TYPE OF DOM_PERCENT,
    R_CENA_SR_DDS TYPE OF DOM_CENA,
    R_SUMA_SR_DDS TYPE OF DOM_SUMA,
    R_FLAG_LOCK TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENA_CL (
    CL_ID INTEGER,
    S_ID INTEGER)
RETURNS (
    CENA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENA_CL_OS (
    SIM_ID INTEGER)
RETURNS (
    CENA_OS DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENA_CL_SIMPLES (
    P_SELID INTEGER,
    P_ASORTIMENT INTEGER)
RETURNS (
    ID INTEGER,
    CL_ID INTEGER,
    CENA DOUBLE PRECISION,
    R_TIP INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENA_DEF_CL (
    P_ID_SIMPLE INTEGER)
RETURNS (
    CENA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENA_FIX_CL (
    P_ID_SIMPLE INTEGER)
RETURNS (
    CENA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENA_OFERTA (
    CL_OF INTEGER,
    S_ID INTEGER)
RETURNS (
    CENA_OF DOUBLE PRECISION,
    CENA_PROD DOUBLE PRECISION,
    CENA_FIKS DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENA_PROD_DOSTAVNA (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID_S VARCHAR(1000),
    P_FAKT INTEGER)
RETURNS (
    CODE TYPE OF DOM_CHAR_50,
    NAME VARCHAR(100),
    CENA DOUBLE PRECISION,
    SELKTION_NAME VARCHAR(50),
    DOSTAVNA DOUBLE PRECISION,
    CENA_EDRO DOUBLE PRECISION,
    CENA_SR DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENA_PRODUCT (
    ID TYPE OF DOM_KEY,
    P_SKLAD TYPE OF DOM_KEY)
RETURNS (
    CENA_CURRENT TYPE OF DOM_CENA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENA_SIM (
    P_SKLAD INTEGER,
    P_KLIENT INTEGER,
    P_SEL_SIMPLE VARCHAR(3000))
RETURNS (
    CENA_CURRENT DOUBLE PRECISION,
    CENA_VALUTA TYPE OF DOM_CENA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENA_SIMPLE (
    P_SKLAD DOM_KEY,
    P_KLIENT DOM_KEY,
    P_SIMPLE_ID DOM_KEY)
RETURNS (
    ID TYPE OF DOM_KEY,
    CENA_CURRENT TYPE OF DOM_CENA,
    R_PRI DOUBLE PRECISION,
    CENA_OS TYPE OF DOM_CENA,
    R_CL_ID TYPE OF DOM_KEY,
    R_CENA_VALUTA TYPE OF DOM_CENA,
    R_VALUTA_ID TYPE OF DOM_KEY_SMALL,
    R_FLAG_LOCK TYPE OF DOM_FLAG,
    R_VAT_PERCENT NUMERIC(4,2),
    R_VAT_GROUP TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENI (
    P_SKLAD TYPE OF DOM_KEY,
    P_KLIENT TYPE OF DOM_KEY)
RETURNS (
    KOL_NAL TYPE OF DOM_KOL,
    CENA_SR TYPE OF DOM_CENA,
    LAST_CENA TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    USLUGA CHAR(1),
    ME_ID TYPE OF DOM_SMAL_INT,
    DEF_SEL_ID TYPE OF DOM_KEY,
    CENA_PROD TYPE OF DOM_CENA,
    CENA_EDRO TYPE OF DOM_CENA,
    LOCK_CENA_PROD CHAR(1),
    D_D_S TYPE OF DOM_PERCENT,
    RSN CHAR(1),
    RAZ_TIP_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    ME_KOEF TYPE OF DOM_INT,
    GR_NAME TYPE OF DOM_CHAR_50,
    R_PRI DOUBLE PRECISION,
    CENA_CURRENT TYPE OF DOM_CENA,
    ME2_ID TYPE OF DOM_SMAL_INT,
    ME2 CHAR(2),
    KOL_NAL2 TYPE OF DOM_KOL,
    KOL_RZV TYPE OF DOM_KOL,
    DEF_RAZ_EL TYPE OF DOM_INT,
    NAME_RAZ_EL TYPE OF DOM_CHAR_30,
    KOL_RAZ_EL TYPE OF DOM_INT,
    CODE2 TYPE OF DOM_CHAR_50,
    CENA_OS TYPE OF DOM_CENA,
    RAZPAD TYPE OF DOM_INT,
    R_IS_BONUS TYPE OF DOM_SMAL_INT,
    USE_PROP TYPE OF DOM_SMAL_INT,
    CL_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENI_ALL (
    P_SKLAD TYPE OF DOM_KEY,
    P_KLIENT TYPE OF DOM_KEY,
    P_FAK_SKLAD TYPE OF DOM_KEY,
    P_BTC TYPE OF DOM_SMAL_INT)
RETURNS (
    KOL_NAL TYPE OF DOM_KOL,
    CENA_CURRENT TYPE OF DOM_CENA,
    CENA_SR TYPE OF DOM_CENA,
    LAST_CENA TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    USLUGA CHAR(1),
    ME_ID TYPE OF DOM_SMAL_INT,
    DEF_SEL_ID TYPE OF DOM_KEY,
    CENA_PROD TYPE OF DOM_CENA,
    CENA_EDRO TYPE OF DOM_CENA,
    LOCK_CENA_PROD CHAR(1),
    D_D_S TYPE OF DOM_PERCENT,
    RSN CHAR(1),
    RAZ_TIP_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    ME_KOEF INTEGER,
    GR_NAME TYPE OF DOM_CHAR_50,
    R_PRI DOUBLE PRECISION,
    ME2_ID TYPE OF DOM_SMAL_INT,
    ME2 CHAR(2),
    KOL_NAL2 TYPE OF DOM_KOL,
    KOL_RZV TYPE OF DOM_KOL,
    DEF_RAZ_EL TYPE OF DOM_INT,
    NAME_RAZ_EL TYPE OF DOM_CHAR_30,
    KOL_RAZ_EL TYPE OF DOM_INT,
    CENA_OS TYPE OF DOM_CENA,
    BTC TYPE OF DOM_INT,
    BTC_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENI_SEL (
    P_SKLAD TYPE OF DOM_KEY,
    P_KLIENT TYPE OF DOM_KEY,
    P_SEL_SIMPLE VARCHAR(3000),
    P_FAK_SKLAD TYPE OF DOM_KEY,
    P_BTC TYPE OF DOM_SMAL_INT)
RETURNS (
    KOL_NAL TYPE OF DOM_KOL,
    CENA_CURRENT TYPE OF DOM_CENA,
    CENA_SR TYPE OF DOM_CENA,
    LAST_CENA TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    USLUGA CHAR(1),
    ME_ID TYPE OF DOM_SMAL_INT,
    DEF_SEL_ID TYPE OF DOM_KEY,
    CENA_PROD TYPE OF DOM_CENA,
    CENA_EDRO TYPE OF DOM_CENA,
    LOCK_CENA_PROD CHAR(1),
    D_D_S TYPE OF DOM_PERCENT,
    RSN CHAR(1),
    RAZ_TIP_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    ME_KOEF TYPE OF DOM_INT,
    GR_NAME TYPE OF DOM_CHAR_50,
    R_PRI DOUBLE PRECISION,
    ME2_ID TYPE OF DOM_SMAL_INT,
    ME2 CHAR(2),
    KOL_NAL2 TYPE OF DOM_KOL,
    KOL_RZV TYPE OF DOM_KOL,
    DEF_RAZ_EL TYPE OF DOM_INT,
    NAME_RAZ_EL TYPE OF DOM_CHAR_30,
    KOL_RAZ_EL TYPE OF DOM_INT,
    CENA_OS TYPE OF DOM_CENA,
    BTC TYPE OF DOM_INT,
    BTC_ID TYPE OF DOM_KEY,
    CL_ID TYPE OF DOM_KEY,
    R_VALUTA_ID TYPE OF DOM_KEY_SMALL,
    R_CENA_VALUTA TYPE OF DOM_CENA,
    R_FLAG_LOCK TYPE OF DOM_FLAG,
    R_VAT_GROUP TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENI_SEL_KONS (
    P_SKLAD INTEGER,
    P_KLIENT INTEGER,
    P_SEL_SIMPLE VARCHAR(3000))
RETURNS (
    KOL_NAL FLOAT,
    CENA_SR DOUBLE PRECISION,
    LAST_CENA DOUBLE PRECISION,
    ID INTEGER,
    CENA_PROD DOUBLE PRECISION,
    KOL_NAL2 DOUBLE PRECISION,
    KOL_RZV DOUBLE PRECISION,
    CENA_CURRENT DOUBLE PRECISION,
    R_PRI DOUBLE PRECISION,
    CENA_OS DOUBLE PRECISION,
    BTC INTEGER,
    R_CENA_VALUTA TYPE OF DOM_CENA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENI_SEL_POCKET (
    P_SKLAD TYPE OF DOM_KEY,
    P_KLIENT TYPE OF DOM_KEY,
    P_DATE TYPE OF DOM_DATE,
    P_TIME TYPE OF DOM_TIME)
RETURNS (
    KOL_NAL TYPE OF DOM_KOL,
    LAST_CENA TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_100,
    ME_ID TYPE OF DOM_SMAL_INT,
    RSN CHAR(1),
    ME CHAR(2),
    GR_ID TYPE OF DOM_KEY,
    R_PRI DOUBLE PRECISION,
    CENA_CURRENT TYPE OF DOM_CENA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENI_SEL_POCKET_SIM_KLIENT (
    P_SKLAD TYPE OF DOM_KEY,
    P_SIMPLE TYPE OF DOM_KEY,
    P_DATE TYPE OF DOM_DATE,
    P_TIME TYPE OF DOM_TIME,
    P_CENA TYPE OF DOM_CENA)
RETURNS (
    CENA_CURRENT TYPE OF DOM_CENA,
    KLIENT TYPE OF DOM_KEY,
    SIMPLE_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENI_SEL_POS (
    P_SKLAD TYPE OF DOM_KEY,
    P_KLIENT TYPE OF DOM_KEY,
    P_SIMPLE TYPE OF DOM_KEY,
    P_SKLAD_NAL_ID TYPE OF DOM_KEY,
    P_SKLAD_NAL_IDS TYPE OF DOM_CHAR_100)
RETURNS (
    KOL_NAL DOUBLE PRECISION,
    KOL_NAL_OTHER DOUBLE PRECISION,
    CENA_CURRENT DOUBLE PRECISION,
    ID INTEGER,
    NAME VARCHAR(100),
    CODE TYPE OF DOM_CHAR_50,
    USLUGA CHAR(1),
    ME_ID SMALLINT,
    DEF_SEL_ID INTEGER,
    CENA_PROD DOUBLE PRECISION,
    CENA_EDRO DOUBLE PRECISION,
    LOCK_CENA_PROD SMALLINT,
    D_D_S DOUBLE PRECISION,
    RSN CHAR(1),
    RAZ_TIP_ID INTEGER,
    ME CHAR(2),
    ME_IS_BROI INTEGER,
    ME_KOEF INTEGER,
    GR_NAME VARCHAR(50),
    R_PRI DOUBLE PRECISION,
    ME2_ID SMALLINT,
    ME2 CHAR(2),
    KOL_NAL2 DOUBLE PRECISION,
    KOL_RZV DOUBLE PRECISION,
    DEF_RAZ_EL INTEGER,
    NAME_RAZ_EL VARCHAR(30),
    KOL_RAZ_EL INTEGER,
    CENA_OS DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENI_SHORT (
    P_SKLAD INTEGER,
    P_KLIENT INTEGER)
RETURNS (
    ID INTEGER,
    R_PRI DOUBLE PRECISION,
    CENA_CURRENT DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENI_SUB_PROD (
    P_SKLAD_IDS VARCHAR(200),
    P_KLIENT INTEGER)
RETURNS (
    R_KOL_NAL DOUBLE PRECISION,
    R_CENA_SR DOUBLE PRECISION,
    R_LAST_CENA DOUBLE PRECISION,
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(50),
    R_USLUGA CHAR(1),
    R_ME_ID SMALLINT,
    R_DEF_SEL_ID INTEGER,
    R_CENA_PROD DOUBLE PRECISION,
    R_CENA_EDRO DOUBLE PRECISION,
    R_LOCK_CENA_PROD CHAR(1),
    R_D_D_S DOUBLE PRECISION,
    R_RSN CHAR(1),
    R_RAZ_TIP_ID INTEGER,
    R_ME CHAR(2),
    R_ME_KOEF INTEGER,
    R_GR_NAME VARCHAR(50),
    R_PRI DOUBLE PRECISION,
    R_CENA_CURRENT DOUBLE PRECISION,
    R_SKLAD_ID SMALLINT,
    R_SKLAD_NAME VARCHAR(20),
    R_ME2_ID SMALLINT,
    R_ME2 CHAR(2),
    R_KOL_NAL2 DOUBLE PRECISION,
    CENA_OS DOUBLE PRECISION,
    R_KOL_RZV DOUBLE PRECISION,
    R_IS_BONUS SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENI_TEST (
    P_SKLAD INTEGER,
    P_KLIENT INTEGER,
    P_DAY INTEGER,
    P_DATE DATE,
    P_TIME TIME)
RETURNS (
    ID INTEGER,
    CENA_PROD DOUBLE PRECISION,
    R_PRI INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_CENOVA_LISTA VARCHAR(30),
    R_CODE VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENOVILISTI (
    FAKT INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    TIP SMALLINT,
    OPR_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CENOVILISTI_KLIENT (
    P_KLI_ID INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(30),
    R_VALUTA_ID TYPE OF DOM_KEY_SMALL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CL_IMPORT (
    P_KLI_ID_S VARCHAR(10000))
RETURNS (
    R_OPR_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_CODE_NUM
RETURNS (
    NOM INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_COMMENTS (
    TABLE_NODE_NAME VARCHAR(30),
    TABLE_NODE_OBJECT_NAME VARCHAR(30),
    TABLE_NODE_OBJECT_ID INTEGER)
RETURNS (
    ID INTEGER,
    COMMENT_ID INTEGER,
    OBJECT_ID INTEGER,
    DATE_MODIFIED TIMESTAMP,
    NOTE BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    USER_ID INTEGER,
    USER_NAME VARCHAR(30),
    HEADER VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_COURSE_AMBALAJ (
    P_COURSE_ID INTEGER)
RETURNS (
    R_OPR_ID TYPE OF DOM_KEY,
    R_SUMA TYPE OF DOM_SUMA,
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_KOL_KK TYPE OF DOM_KOL,
    R_KOL_BEER TYPE OF DOM_KOL,
    R_KOL_KEG TYPE OF DOM_KOL,
    R_KOL_19L TYPE OF DOM_KOL,
    R_KOL_PEPSI TYPE OF DOM_KOL,
    R_KOL_OBK TYPE OF DOM_KOL,
    R_KOL_CO2 TYPE OF DOM_KOL,
    KOL_GAZBOT TYPE OF DOM_KOL,
    R_KOL_KK075 TYPE OF DOM_KOL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_DATA_RET_PROD_POCKET (
    P_KLI_ID INTEGER,
    P_SKLAD_ID SMALLINT,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_DATE DATE)
RETURNS (
    R_OUT_EL_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_SUMA_PROD DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_DEF_DOSTKLI (
    P_KLI INTEGER,
    P_OPR_ID INTEGER,
    P_SKLAD_ID VARCHAR(3000),
    P_BARCODE TYPE OF DOM_SMAL_INT,
    P_SHOW_IZL TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SKLADID INTEGER,
    R_SIMPLEID INTEGER,
    R_SIMPLENAME VARCHAR(100),
    R_CODE DOM_CHAR_50,
    R_KOLKRIMIN DOUBLE PRECISION,
    R_KOLKRIMAX DOUBLE PRECISION,
    R_ME CHAR(2),
    R_MEID INTEGER,
    R_CENA_CL DOUBLE PRECISION,
    R_DDS DECIMAL(4,2),
    R_GRNAME VARCHAR(100),
    R_MEKOEF SMALLINT,
    R_BAR_CODE VARCHAR(13),
    R_KLINAME VARCHAR(100),
    R_SKLAD_NAME VARCHAR(20),
    R_CODE2 TYPE OF DOM_CHAR_50,
    R_KOL_NAL TYPE OF DOM_KOL,
    R_KOL_RZV TYPE OF DOM_KOL,
    R_LAST_CENA TYPE OF DOM_CENA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_DIST_HISTORY (
    P_FROM_DATE DATE,
    P_FILTER_KLI VARCHAR(10000),
    P_FILTER_DATE VARCHAR(100),
    P_FILTER_OBEKT VARCHAR(10000))
RETURNS (
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_KLI_CODE VARCHAR(15),
    R_SUMA_NACH_SALDO DOUBLE PRECISION,
    R_SUMA_NACH_DUE DOUBLE PRECISION,
    R_SUMA_NACH_PAY DOUBLE PRECISION,
    R_SUMA_DUE DOUBLE PRECISION,
    R_SUMA_PAY DOUBLE PRECISION,
    R_SUMA_KR_SALDO DOUBLE PRECISION,
    R_KLI_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(50),
    R_SUMA_DDS DOUBLE PRECISION,
    R_SUMA_TOTAL_DUE DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_DOC_NOM
RETURNS (
    R_NOM INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_DOST_CENA_PROD (
    P_OPR_ID INTEGER,
    P_CENOVA_LISTA INTEGER,
    P_TIP INTEGER)
RETURNS (
    R_SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_DOST_HISTORY (
    P_FROM_DATE DATE,
    P_FILTER_KLI VARCHAR(10000),
    P_FILTER_DATE VARCHAR(100),
    P_DDS_FAK INTEGER,
    P_TIP_FILTER SMALLINT,
    P_DDS DOUBLE PRECISION)
RETURNS (
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_KLI_CODE VARCHAR(15),
    R_SUMA_NACH_SALDO DOUBLE PRECISION,
    R_SUMA_NACH_DUE DOUBLE PRECISION,
    R_SUMA_NACH_PAY DOUBLE PRECISION,
    R_SUMA_DUE DOUBLE PRECISION,
    R_SUMA_PAY DOUBLE PRECISION,
    R_SUMA_KR_SALDO DOUBLE PRECISION,
    R_KLI_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(100),
    R_SUMA_DDS DOUBLE PRECISION,
    R_SUMA_TOTAL_DUE DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_DOST_PROD_CENA (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_CL_OPR_ID INTEGER,
    P_TIP DOM_SMAL_INT)
RETURNS (
    R_CENA_PROD DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_DOST_SKLAD_NODE (
    P_TIP_NODE SMALLINT,
    P_SKLAD_ID INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_DOSTAVKA (
    ID INTEGER,
    P_CL_ID INTEGER,
    P_TIP INTEGER,
    P_CL_2_ID TYPE OF DOM_KEY)
RETURNS (
    ME_LONG VARCHAR(15),
    BAR_CODE VARCHAR(13),
    CODE VARCHAR(50),
    NAME VARCHAR(100),
    KOL DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    ME CHAR(2),
    KOL_RAZ DOUBLE PRECISION,
    NAME_RAZ VARCHAR(30),
    NOM_DOK VARCHAR(100),
    IN_EL_ID INTEGER,
    ME2 CHAR(2),
    KOL2 DOUBLE PRECISION,
    CODE2 TYPE OF DOM_CHAR_50,
    TEMPERATURA VARCHAR(20),
    SUMA_CL DOUBLE PRECISION,
    SKLAD_NAME VARCHAR(30),
    LAST_CENA DOUBLE PRECISION,
    R_CENA DOUBLE PRECISION,
    R_CENA_S_DDS DOUBLE PRECISION,
    R_DDS DOUBLE PRECISION,
    R_CENA_CL DOUBLE PRECISION,
    R_CENA_BEZ_DDS DOUBLE PRECISION,
    R_SROK DATE,
    R_CENA_CL_2 TYPE OF DOM_CENA,
    R_TEXT_ADDR TYPE OF DOM_CHAR_50,
    R_PN TYPE OF DOM_CHAR_1000)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_DOSTAVKA_OPR (
    ID_OPR INTEGER,
    P_CL_ID INTEGER,
    P_TIP INTEGER)
RETURNS (
    ID INTEGER,
    IN_ID INTEGER,
    IN_DATETIME DATE,
    OPR_DATETIME TIMESTAMP,
    SUMA DOUBLE PRECISION,
    KLI_MOL VARCHAR(30),
    DOST_NAME VARCHAR(100),
    DOST_ADRES VARCHAR(50),
    DOST_BULSTAT VARCHAR(13),
    USER_NAME VARCHAR(30),
    COMMENT_TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    ANULIRANA INTEGER,
    PAY_TIP SMALLINT,
    DATA_PADEJ DATE,
    SKLAD_NAME VARCHAR(20),
    R_KLI_CODE VARCHAR(15),
    R_SUMA_CL TYPE OF DOM_SUMA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_DOSTAVNA_CENA (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID_S VARCHAR(1000))
RETURNS (
    R_DOSTAVNA_C DOUBLE PRECISION,
    R_DT_LAST_CENA TIMESTAMP)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_DOSTAVNA_CENA_SKLAD (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_DOSTAVNA_C DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_FACTURNA_CENA (
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_CENA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_FACTURNI_CENI
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_CENA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_FAK_EL_PN (
    P_FAK_EL TYPE OF DOM_KEY)
RETURNS (
    R_LIST_PN VARCHAR(300),
    R_LIST_SROK VARCHAR(300))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_FAK_OTKLONENIE (
    P_OPR_FAK_ID INTEGER,
    P_TIP_DDS INTEGER)
RETURNS (
    FAK_SUMA DOUBLE PRECISION,
    R_SUMA_OS DOUBLE PRECISION,
    R_SUMA_CL DOUBLE PRECISION,
    R_SUMA_NEOBLAGAEMA DOUBLE PRECISION,
    R_SUMA_DDS DOUBLE PRECISION,
    R_SUMA_TOTAL DOUBLE PRECISION,
    R_OTKL_CL DOUBLE PRECISION,
    R_OTKL_OS DOUBLE PRECISION,
    R_RAZLIKA_OS DOUBLE PRECISION,
    R_RAZLIKA_CL DOUBLE PRECISION,
    R_SUMA_S_DDS DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_FAK_PROPERTIES (
    P_FAK_EL_ID TYPE OF DOM_INT)
RETURNS (
    R_SIMPLE_PROP TYPE OF DOM_CHAR_300)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_FAK_SUMI_INVOICE (
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_RAZLIKA TYPE OF DOM_SUMA,
    R_FAK_EL_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_FAKTURA_DNEVNIK (
    P_FROM_DATE TYPE OF DOM_DATE,
    P_TO_DATE TYPE OF DOM_DATE,
    P_PO_EL TYPE OF DOM_SMAL_INT)
RETURNS (
    R_FAK_NUMBER TYPE OF DOM_CHAR_10,
    R_FAK_EL_TEXT TYPE OF DOM_CHAR_1000,
    R_SUMA TYPE OF DOM_SUMA,
    R_NEOBLAGAEMA_SUMA TYPE OF DOM_SUMA,
    R_DDS_SUMA TYPE OF DOM_SUMA,
    R_TOTAL TYPE OF DOM_SUMA,
    R_FAK_EL_CENA TYPE OF DOM_CENA,
    R_FAK_EL_KOL TYPE OF DOM_KOL,
    R_FAK_EL_DDS TYPE OF DOM_PERCENT,
    R_RAZ_NAME TYPE OF DOM_CHAR_30,
    R_RAZ_KOL TYPE OF DOM_KOL,
    R_TIP TYPE OF DOM_SMAL_INT,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_OPR_ID TYPE OF DOM_INT,
    R_FIRMA_NAME TYPE OF DOM_CHAR_50,
    R_PAY_TIP TYPE OF DOM_CHAR_10,
    R_TIP_STR TYPE OF DOM_CHAR_10)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_FIX_CENI
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_CENA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_GRAFIK_MONTAJ_DATA (
    P_OPR_ID INTEGER,
    P_BR_ME_ID INTEGER,
    P_M_ME_ID INTEGER,
    P_MM_ME_ID INTEGER,
    P_GRUPI INTEGER)
RETURNS (
    R_OPR_ID INTEGER,
    R_PVC_BR DOUBLE PRECISION,
    R_PVC_M DOUBLE PRECISION,
    R_PVC_MM DOUBLE PRECISION,
    R_AL_BR DOUBLE PRECISION,
    R_AL_M DOUBLE PRECISION,
    R_AL_MM DOUBLE PRECISION,
    R_APLAST_BR DOUBLE PRECISION,
    R_APLAST_M DOUBLE PRECISION,
    R_APLAST_MM DOUBLE PRECISION,
    L_RAZPAD INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_GRAFIK_MONTAJ_DATA_V1 (
    P_OPR_ID INTEGER,
    P_BR_ME_ID INTEGER,
    P_M_ME_ID INTEGER,
    P_MM_ME_ID INTEGER,
    P_GRUPI INTEGER)
RETURNS (
    R_OPR_ID INTEGER,
    R_PVC_BR DOUBLE PRECISION,
    R_PVC_M DOUBLE PRECISION,
    R_PVC_MM DOUBLE PRECISION,
    R_AL_BR DOUBLE PRECISION,
    R_AL_M DOUBLE PRECISION,
    R_AL_MM DOUBLE PRECISION,
    R_APLAST_BR DOUBLE PRECISION,
    R_APLAST_M DOUBLE PRECISION,
    R_APLAST_MM DOUBLE PRECISION,
    L_RAZPAD INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_IN_PN (
    P_IN_EL_ID TYPE OF DOM_KEY)
RETURNS (
    R_PN TYPE OF DOM_CHAR_300,
    R_SROK TYPE OF DOM_CHAR_300)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_INI_ID (
    P_HDD_SN INTEGER,
    P_NAME VARCHAR(20))
RETURNS (
    R_INI_ID SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_INV_PO_SIMPLE (
    P_FILTER VARCHAR(1000),
    P_FLAG_OST_IZL INTEGER,
    P_FLAG_MINUS INTEGER,
    P_BROI_ZNACI SMALLINT)
RETURNS (
    R_OPR_ID INTEGER,
    R_INV_ID INTEGER,
    R_INV_TIP SMALLINT,
    R_OPR_DATE DATE,
    R_USER_ID INTEGER,
    R_USER_NAME VARCHAR(30),
    R_SUMA_LIPSA DOUBLE PRECISION,
    R_SUMA_IZLISHAK DOUBLE PRECISION,
    R_SKLAD_ID INTEGER,
    R_SKLAD_NAME VARCHAR(30),
    R_DATE_TIME TIMESTAMP,
    R_COMMENT BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    R_SUMA_MINUS DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER,
    R_KOL_S DOUBLE PRECISION,
    R_KOL_F DOUBLE PRECISION,
    R_KOL2_S DOUBLE PRECISION,
    R_KOL2_F DOUBLE PRECISION,
    R_CENA_S DOUBLE PRECISION,
    R_CENA_F DOUBLE PRECISION,
    R_SIMPLE_NAME VARCHAR(100),
    R_CODE VARCHAR(50),
    R_ME VARCHAR(2),
    R_ME2 VARCHAR(2),
    R_GR_NAME VARCHAR(50),
    R_KOL_IZLISHACI DOUBLE PRECISION,
    R_KOL_LIPSI DOUBLE PRECISION,
    R_SUMA_F DOUBLE PRECISION,
    R_SUMA_S DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_INV_RAZ (
    P_OPR_INV_ID INTEGER,
    P_FLAG_MINUS SMALLINT,
    P_FLAG_OST_IZL SMALLINT,
    P_BROI_ZNACI SMALLINT)
RETURNS (
    R_KOL_IZLISHACI DOUBLE PRECISION,
    R_KOL_LIPSI DOUBLE PRECISION,
    R_KOL_S DOUBLE PRECISION,
    R_KOL_F DOUBLE PRECISION,
    R_KOL2_S DOUBLE PRECISION,
    R_KOL2_F DOUBLE PRECISION,
    R_CENA_S DOUBLE PRECISION,
    R_CENA_F DOUBLE PRECISION,
    R_SUMA_S DOUBLE PRECISION,
    R_SUMA_F DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_CODE DOM_CHAR_50,
    R_ME CHAR(2),
    R_ME2 CHAR(2),
    R_GR_NAME VARCHAR(50),
    R_SIMPLE_CODE2 TYPE OF DOM_CHAR_50)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_INV_RAZ_V1 (
    P_OPR_INV_ID INTEGER,
    P_FLAG_MINUS SMALLINT,
    P_FLAG_OST_IZL SMALLINT,
    P_BROI_ZNACI SMALLINT,
    P_FLAG_DETAILED TYPE OF DOM_SMAL_INT)
RETURNS (
    R_KOL_IZLISHACI DOUBLE PRECISION,
    R_KOL_LIPSI DOUBLE PRECISION,
    R_KOL_S DOUBLE PRECISION,
    R_KOL_F DOUBLE PRECISION,
    R_KOL2_S DOUBLE PRECISION,
    R_KOL2_F DOUBLE PRECISION,
    R_CENA_S DOUBLE PRECISION,
    R_CENA_F DOUBLE PRECISION,
    R_SUMA_S DOUBLE PRECISION,
    R_SUMA_F DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_CODE DOM_CHAR_50,
    R_ME CHAR(2),
    R_ME2 CHAR(2),
    R_GR_NAME VARCHAR(50),
    R_SIMPLE_CODE2 TYPE OF DOM_CHAR_50,
    R_KOL_PREVIOUS_F TYPE OF DOM_KOL,
    R_KOL_IN TYPE OF DOM_KOL,
    R_KOL_OUT TYPE OF DOM_KOL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_IZP_OPR (
    P_ID_OPR INTEGER,
    P_CL_ID INTEGER,
    P_TYPE INTEGER)
RETURNS (
    ID INTEGER,
    IZP_ID INTEGER,
    IN_DATETIME DATE,
    OPR_DATETIME TIMESTAMP,
    SUMA DOUBLE PRECISION,
    USER_NAME VARCHAR(30),
    OT_SKLAD_ID SMALLINT,
    OT_SKLAD VARCHAR(20),
    KLI_NAME VARCHAR(100),
    IZP_TIP VARCHAR(30),
    ANULIRANA INTEGER,
    COMMENT_TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_SUMA_OS DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_IZPISVANIA (
    ID INTEGER,
    CL_ID INTEGER,
    P_TYPEP INTEGER)
RETURNS (
    CODE DOM_CHAR_50,
    NAME VARCHAR(100),
    MENAME CHAR(2),
    KOL DOUBLE PRECISION,
    CENA DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    KOL_RAZ DOUBLE PRECISION,
    NAME_RAZ VARCHAR(30),
    NOM_DOK VARCHAR(100),
    CENA_OS DOUBLE PRECISION,
    SUMA_OS DOUBLE PRECISION,
    R_PN VARCHAR(2000),
    R_SROK TYPE OF DOM_CHAR_100,
    R_TEMPERATURE TYPE OF DOM_CHAR_20,
    R_EXT1 TYPE OF DOM_CHAR_300)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KLI_CODE_NUM
RETURNS (
    NOM INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KLI_GROUP (
    P_GROUP_ID INTEGER)
RETURNS (
    R_GROUP_NAME VARCHAR(1024))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KLI_HISTORY (
    P_FROM_DATE DATE,
    P_FILTER_KLI VARCHAR(10000),
    P_FILTER_DATE VARCHAR(100),
    P_FLAG_NO_KLI SMALLINT,
    P_FILTER_OBEKT VARCHAR(10000),
    P_FILTER_RET_STOKA_OBEKT VARCHAR(10000),
    P_FILTER_PAY_OBEKT VARCHAR(10000),
    P_FILTER_RET_STOKA_PAY_OBEKT VARCHAR(10000),
    P_TIP_FILTER SMALLINT,
    P_DATE_PADEJ DATE,
    P_FILTER_ACTIVE_KLI INTEGER)
RETURNS (
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_KLI_CODE VARCHAR(15),
    R_SUMA_NACH_SALDO DOUBLE PRECISION,
    R_SUMA_NACH_DUE DOUBLE PRECISION,
    R_SUMA_NACH_PAY DOUBLE PRECISION,
    R_SUMA_DUE DOUBLE PRECISION,
    R_SUMA_PAY DOUBLE PRECISION,
    R_SUMA_KR_SALDO DOUBLE PRECISION,
    R_KLI_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(100),
    R_KLI_TEL VARCHAR(100),
    R_SUMA_LATE DOUBLE PRECISION,
    R_DAYS_LATE INTEGER,
    R_SUMA_NACH_NERAZCHETENA DOUBLE PRECISION,
    R_SUMA_NERAZCHETENA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KLI_HISTORY1 (
    P_FROM_DATE DATE,
    P_FILTER_KLI VARCHAR(10000),
    P_FILTER_DATE VARCHAR(100),
    P_FLAG_NO_KLI SMALLINT,
    P_FILTER_OBEKT VARCHAR(10000),
    P_FILTER_RET_STOKA_OBEKT VARCHAR(10000),
    P_FILTER_PAY_OBEKT VARCHAR(10000),
    P_FILTER_RET_STOKA_PAY_OBEKT VARCHAR(10000),
    P_TIP_FILTER SMALLINT,
    P_DATE_PADEJ DATE)
RETURNS (
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_KLI_CODE VARCHAR(15),
    R_SUMA_NACH_SALDO DOUBLE PRECISION,
    R_SUMA_NACH_DUE DOUBLE PRECISION,
    R_SUMA_NACH_PAY DOUBLE PRECISION,
    R_SUMA_DUE DOUBLE PRECISION,
    R_SUMA_PAY DOUBLE PRECISION,
    R_SUMA_KR_SALDO DOUBLE PRECISION,
    R_KLI_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(100),
    R_KLI_TEL VARCHAR(100),
    R_SUMA_LATE DOUBLE PRECISION,
    R_DAYS_LATE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KLI_NEXT_CODE (
    OT_CODE INTEGER)
RETURNS (
    NNN INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KLI_POCKET_NODE (
    P_TIP_NODE SMALLINT,
    P_POCKET_ID INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KLI_SKLAD_NODE (
    P_TIP_NODE SMALLINT,
    P_SKLAD_ID INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KLI_SUB_GROUPS (
    P_GROUPS VARCHAR(255),
    P_PARENT_ID INTEGER)
RETURNS (
    R_GROUPS VARCHAR(255))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KLI_USER_NODE (
    P_TIP_NODE TYPE OF DOM_SMAL_INT,
    P_USER_ID TYPE OF DOM_KEY)
RETURNS (
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KOL_SUMA_FOR_FAKT_NO_SN (
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION)
RETURNS (
    R_SUMA_SR DOUBLE PRECISION,
    R_KOL DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KOL_SUMA_FOR_FAKT_SN (
    P_SIMPLE_ID INTEGER,
    P_OUT_EL_ID INTEGER,
    P_NUMBER INTEGER,
    P_KOL DOUBLE PRECISION,
    P_FLAG_SAME_SN SMALLINT)
RETURNS (
    R_SUMA_SR DOUBLE PRECISION,
    R_KOL DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KOL_ZD_NODE (
    P_PR_ID_ZD INTEGER,
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_KOL DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KONS_IN_PRINT (
    ID INTEGER)
RETURNS (
    R_DATE_TIME TIMESTAMP,
    R_OPR_DATE DATE,
    R_KLI_NAME VARCHAR(100),
    R_SKLAD_NAME VARCHAR(20),
    R_IS_ANUL INTEGER,
    R_USER_NAME VARCHAR(30),
    R_SUMA DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_OUT_ID INTEGER,
    R_KONS_ID INTEGER,
    R_IN_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KONS_OUT_PRINT (
    ID INTEGER)
RETURNS (
    R_DATE_TIME TIMESTAMP,
    R_OPR_DATE DATE,
    R_KLI_NAME VARCHAR(100),
    R_SKLAD_NAME VARCHAR(20),
    R_IS_ANUL INTEGER,
    R_USER_NAME VARCHAR(30),
    R_SUMA DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_OUT_ID INTEGER,
    R_KONS_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KRI_KOL (
    TIP_KRI_KOL SMALLINT,
    P_FILTER VARCHAR(1000),
    P_NO_MOVEMENT SMALLINT)
RETURNS (
    SIMPLE_ID INTEGER,
    CODE VARCHAR(15),
    NAME VARCHAR(100),
    ME CHAR(2),
    SUMA_DOST_CA DOUBLE PRECISION,
    NAL DOUBLE PRECISION,
    SUMA_FR DOUBLE PRECISION,
    GR_NAME VARCHAR(50),
    KOL_KRI_MIN DOUBLE PRECISION,
    KOL_KRI_MAX DOUBLE PRECISION,
    ED_CENA_SR DOUBLE PRECISION,
    SKLAD_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_KRI_KOL_ALL_SKLAD (
    TIP_KRI_KOL SMALLINT)
RETURNS (
    SIMPLE_ID INTEGER,
    CODE VARCHAR(15),
    NAME VARCHAR(100),
    ME CHAR(2),
    SUMA_DOST_CA DOUBLE PRECISION,
    NAL DOUBLE PRECISION,
    SUMA_FR DOUBLE PRECISION,
    GR_NAME VARCHAR(50),
    KOL_KRI_MIN DOUBLE PRECISION,
    KOL_KRI_MAX DOUBLE PRECISION,
    ED_CENA_SR DOUBLE PRECISION,
    SKLAD_NAME VARCHAR(20),
    SKLAD_ID SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_LAST_CENA (
    P_FKT INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_LAST_CENA FLOAT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_LAST_DOSTAV
RETURNS (
    R_SIMPLEID INTEGER,
    R_SIMPLENAME VARCHAR(100),
    R_CODE DOM_CHAR_50,
    R_MEID INTEGER,
    R_ME CHAR(2),
    R_CENAPROD DOUBLE PRECISION,
    R_DDS DECIMAL(4,2),
    R_KOLNAL DOUBLE PRECISION,
    R_CENASR DOUBLE PRECISION,
    R_GRNAME VARCHAR(100),
    R_MEKOEF SMALLINT,
    R_BARCODE VARCHAR(13),
    R_KLINAME VARCHAR(100),
    R_KOLKRIMAX FLOAT,
    R_KOLKRIMIN FLOAT,
    R_SKLADID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_LAST_DOSTAVCHIK (
    P_SIMPLEID INTEGER,
    P_SKLADID INTEGER)
RETURNS (
    R_KLINAME VARCHAR(100),
    R_KLI_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_LAST_DOSTKLI (
    P_KLI INTEGER,
    P_OPR_ID INTEGER,
    P_SKLAD_ID VARCHAR(3000),
    P_BARCODE TYPE OF DOM_SMAL_INT,
    P_SHOW_IZL TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SKLADID INTEGER,
    R_SIMPLEID INTEGER,
    R_SIMPLENAME VARCHAR(100),
    R_CODE DOM_CHAR_50,
    R_KOLKRIMIN DOUBLE PRECISION,
    R_KOLKRIMAX DOUBLE PRECISION,
    R_ME CHAR(2),
    R_MEID INTEGER,
    R_CENA_CL DOUBLE PRECISION,
    R_DDS DECIMAL(4,2),
    R_GRNAME VARCHAR(100),
    R_MEKOEF SMALLINT,
    R_BAR_CODE VARCHAR(13),
    R_KLINAME VARCHAR(100),
    R_SKLAD_NAME VARCHAR(20),
    R_CODE2 TYPE OF DOM_CHAR_50,
    R_KOL_NAL TYPE OF DOM_KOL,
    R_KOL_RZV TYPE OF DOM_KOL,
    R_LAST_CENA TYPE OF DOM_CENA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_LAST_DOSTPLACE (
    P_PLACEID INTEGER,
    P_OPR_ID INTEGER,
    P_BARCODE TYPE OF DOM_KEY,
    P_SKLAD_ID VARCHAR(3000),
    P_SHOW_IZL TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SIMPLEID INTEGER,
    R_SIMPLENAME VARCHAR(100),
    R_SKLADID INTEGER,
    R_CODE DOM_CHAR_50,
    R_KOLKRIMIN DOUBLE PRECISION,
    R_KOLKRIMAX DOUBLE PRECISION,
    R_ME CHAR(2),
    R_MEID INTEGER,
    R_CENA_CL DOUBLE PRECISION,
    R_DDS DECIMAL(4,2),
    R_GRNAME VARCHAR(100),
    R_MEKOEF SMALLINT,
    R_BAR_CODE VARCHAR(13),
    R_KLINAME VARCHAR(100),
    R_KLI_ID INTEGER,
    R_CODE_2 TYPE OF DOM_CHAR_50,
    R_SKLAD_NAME TYPE OF DOM_CHAR_50,
    R_KOL_NAL TYPE OF DOM_KOL,
    R_KOL_RZV TYPE OF DOM_KOL,
    R_LAST_CENA TYPE OF DOM_CENA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_LAST_DOSTSEL (
    P_DEFSELID INTEGER,
    OPR_ID INTEGER,
    P_SKLAD_ID VARCHAR(3000),
    P_BARCODE TYPE OF DOM_SMAL_INT,
    P_SHOW_IZL TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SIMPLEID INTEGER,
    R_SIMPLENAME VARCHAR(100),
    R_CODE DOM_CHAR_50,
    R_MEID INTEGER,
    R_ME CHAR(2),
    R_CENA_CL DOUBLE PRECISION,
    R_DDS DECIMAL(4,2),
    R_GRNAME VARCHAR(100),
    R_MEKOEF SMALLINT,
    R_BARCODE VARCHAR(13),
    R_KLINAME VARCHAR(100),
    R_KOLKRIMAX FLOAT,
    R_KOLKRIMIN FLOAT,
    R_SKLADID INTEGER,
    R_KLI_ID INTEGER,
    R_SKLAD_NAME VARCHAR(20),
    R_CODE2 TYPE OF DOM_CHAR_50,
    R_KOL_NAL TYPE OF DOM_KOL,
    R_KOL_RZV TYPE OF DOM_KOL,
    R_LAST_CENA TYPE OF DOM_CENA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_LAST_DVSK
RETURNS (
    SIMPLE_ID INTEGER,
    BG_NOMER VARCHAR(15),
    TYPE_DOC VARCHAR(10),
    NOM_DOK VARCHAR(20),
    DATE_PROIZV DATE,
    SROK_G DATE,
    PROIZVODITEL VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_LAST_OPR_COMMENTS
RETURNS (
    OPRID INTEGER,
    NOTE BLOB SUB_TYPE 1 SEGMENT SIZE 80)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_LAST_OPR_FOR_PER_OTC (
    P_LAST_OPR_ID_FOR_PER INTEGER,
    P_USER_ID INTEGER)
RETURNS (
    R_RESULT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_LAST_PARTIDEN_NOMER (
    P_OUT_EL_ID INTEGER)
RETURNS (
    R_SN VARCHAR(30),
    R_OUT_EL_ID INTEGER,
    R_SROK_GODNOST DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_LAST_SN
RETURNS (
    SIMPLE_ID INTEGER,
    SN VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_LOG_CENI_DDS (
    P_OPR_ID TYPE OF DOM_INT)
RETURNS (
    R_TIP_CENI TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_MONTAGE_SUM (
    P_ORDER_ID TYPE OF DOM_KEY,
    P_CL_ID TYPE OF DOM_KEY)
RETURNS (
    R_SUMA_DUE TYPE OF DOM_SUMA,
    R_SUMA_PAYED TYPE OF DOM_SUMA,
    R_ORDER_ID TYPE OF DOM_KEY,
    R_SUMA_BONUS TYPE OF DOM_SUMA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_MOVE (
    P_ID INTEGER,
    P_TYPE SMALLINT,
    P_CL_ID INTEGER)
RETURNS (
    BAR_CODE VARCHAR(13),
    ME_LONG VARCHAR(15),
    CODE TYPE OF DOM_CHAR_50,
    NAME VARCHAR(100),
    MENAME CHAR(2),
    KOL DOUBLE PRECISION,
    KOL_RAZ DOUBLE PRECISION,
    NAME_RAZ VARCHAR(30),
    CENA DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    NOM_DOK VARCHAR(5000),
    ME2NAME VARCHAR(2),
    KOL2 DOUBLE PRECISION,
    R_OUT_EL_ID INTEGER,
    KOL_NA_RAZ DOUBLE PRECISION,
    R_CODE_2 TYPE OF DOM_CHAR_50,
    R_NAME_SHORT TYPE OF DOM_CHAR_50,
    R_EXT_1 TYPE OF DOM_CHAR_2000,
    R_EXT_2 TYPE OF DOM_CHAR_1000)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_MOVE_SUMA (
    P_ID INTEGER,
    P_TYPE SMALLINT)
RETURNS (
    SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_MULTI_PROD_PADEJ (
    P_OPRS VARCHAR(1000),
    SUMA DOUBLE PRECISION)
RETURNS (
    R_OPR_ID INTEGER,
    R_SUMA_PADEJ DOUBLE PRECISION,
    PADEJ_NUM INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_MULTI_PROD_SUMI (
    P_TYPE_CONTRAGENT TYPE OF DOM_SMAL_INT)
RETURNS (
    R_NOM_PROD TYPE OF DOM_CHAR_300,
    R_SUMA_CL DOUBLE PRECISION,
    R_SUMA_OS DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_SUMA_S_DDS DOUBLE PRECISION,
    R_SUMA_SALDO DOUBLE PRECISION,
    R_OPR_DATE DATE,
    R_OPR_DATE_TIME TIMESTAMP,
    R_SUMA_OS_NETO TYPE OF DOM_SUMA,
    R_SUMA_CL_NETO TYPE OF DOM_SUMA,
    R_CONTRAGENT TYPE OF DOM_CHAR_300)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_MUVE_OPR (
    P_ID INTEGER,
    P_TYPE INTEGER,
    P_CL_ID INTEGER)
RETURNS (
    ID INTEGER,
    MOVE_ID INTEGER,
    IN_DATETIME DATE,
    OPR_DATETIME TIMESTAMP,
    SUMA DOUBLE PRECISION,
    USER_NAME VARCHAR(30),
    OT_SKLAD TYPE OF DOM_CHAR_50,
    W_SKLAD TYPE OF DOM_CHAR_50,
    ANULIRANA INTEGER,
    COMMENT_TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_STORAGE_ID TYPE OF DOM_INT,
    R_TO_STORAGE_ID DOM_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_NAL_SKLADOVE (
    P_SKLAD_ID INTEGER,
    P_SHOW_RESERVE_QTY INTEGER)
RETURNS (
    R_NAL_SKLAD1 DOUBLE PRECISION,
    R_NAL_SKLAD2 DOUBLE PRECISION,
    R_SIMPLE_NAME VARCHAR(100),
    R_ME_NAME VARCHAR(2),
    R_NAL_SUMA1 DOUBLE PRECISION,
    R_NAL_SUMA2 DOUBLE PRECISION,
    R_NAL_SUMA_FR1 DOUBLE PRECISION,
    R_NAL_SUMA_FR2 DOUBLE PRECISION,
    R_SIMPLE_CODE VARCHAR(15),
    R_SIMPLE_ID INTEGER,
    R_RAZLIKA DOUBLE PRECISION,
    R_KOL_RZV_2 DOUBLE PRECISION,
    R_RAZLIKA_RZV DOUBLE PRECISION,
    R_KOL_RZV DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_NEXT_CODE (
    OT_CODE INTEGER)
RETURNS (
    NNN INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_NOM_GARANCIA (
    P_SKLAD_ID INTEGER)
RETURNS (
    R_NOM_GAR INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OPR_FOR_PRINT (
    P_OPR_ID INTEGER)
RETURNS (
    R_OPR_ID INTEGER,
    R_OPR_SUMA DOUBLE PRECISION,
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_SKLAD_NAME VARCHAR(20),
    R_USER_NAME VARCHAR(30),
    R_ANUL_TIP INTEGER,
    R_OPR_DATE DATE,
    R_OBEKT_NAME VARCHAR(20),
    R_KASA_NAME VARCHAR(20),
    PARI_IO_NAME VARCHAR(30),
    R_VALUTA_CODE CHAR(3),
    R_PARI_KURS DOUBLE PRECISION,
    R_OPR_TIP INTEGER,
    R_USER_EDIT VARCHAR(50),
    R_DATE_EDIT TIMESTAMP)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OPR_HISTORY (
    P_FILTER VARCHAR(1000))
RETURNS (
    R_OPR_ID INTEGER,
    R_DATETIME TIMESTAMP,
    R_SUMA DOUBLE PRECISION,
    R_OPRTIP VARCHAR(45),
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_OPR_TIP SMALLINT,
    R_USER_ID INTEGER,
    R_USER VARCHAR(30),
    R_SKLAD_ID SMALLINT,
    R_SKLAD TYPE OF DOM_CHAR_50,
    R_IP VARCHAR(15),
    R_FLAG_ANUL SMALLINT,
    R_CH_OPR INTEGER,
    R_OPR_DATE DATE,
    R_OTC_ID INTEGER,
    R_IS_LOCK SMALLINT,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_OBEKT_ID SMALLINT,
    R_OBEKT_NAME VARCHAR(20))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OPR_ID
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OPR_POTV (
    P_USER_ID INTEGER,
    P_VSICHKI_SKLADOVE INTEGER,
    P_OPR_ID INTEGER)
RETURNS (
    R_ID INTEGER,
    R_OPR_ID INTEGER,
    R_OPR_NAME VARCHAR(100),
    R_OPR_TIP INTEGER,
    R_OPR_DATE DATE,
    R_POTV_ID INTEGER,
    R_SKLAD_ID INTEGER,
    R_SKLAD_NAME VARCHAR(20),
    R_USER_ID INTEGER,
    R_USER_NAME VARCHAR(30),
    R_SUMA DOUBLE PRECISION,
    R_FLAG_ANUL INTEGER,
    R_CH_OPR INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ORDER_CONFIRMATION_ELEMENTS (
    P_SEL_ID TYPE OF DOM_INT,
    P_KLI_ID TYPE OF DOM_INT,
    P_TYPE_ORDER TYPE OF DOM_SMAL_INT)
RETURNS (
    R_OPERATION_ID TYPE OF DOM_INT,
    R_PRODUCT_ID TYPE OF DOM_INT,
    R_QUANTITY_REALIZED TYPE OF DOM_KOL,
    R_QUANTITY_REQUESTED TYPE OF DOM_KOL,
    R_PRODUCT_NAME TYPE OF DOM_CHAR_100,
    R_RECORD_STATUS TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ORDER_EL_NUMBER (
    P_ORDER_ID TYPE OF DOM_KEY)
RETURNS (
    R_ORDER_EL_ID TYPE OF DOM_KEY,
    R_NUMBER TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OTC_DOST_KLI (
    P_FILTER VARCHAR(150),
    P_ADD_DDS SMALLINT)
RETURNS (
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(120),
    R_SUMA_PLATENO DOUBLE PRECISION,
    R_SUMA_NEPLATENO DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_KLI_CODE VARCHAR(15))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OTC_DOST_SKLAD (
    P_FILTER VARCHAR(150),
    P_ADD_DDS SMALLINT)
RETURNS (
    R_SKLAD_ID SMALLINT,
    R_SKLAD_NAME VARCHAR(40),
    R_SUMA_PLATENO DOUBLE PRECISION,
    R_SUMA_NEPLATENO DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OTC_DOST_USER (
    P_FILTER VARCHAR(150),
    P_ADD_DDS SMALLINT)
RETURNS (
    R_USER_ID SMALLINT,
    R_USER_NAME VARCHAR(45),
    R_SUMA_PLATENO DOUBLE PRECISION,
    R_SUMA_NEPLATENO DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OTC_PARI_DATA (
    P_OPR_ID INTEGER,
    P_PARI_OPR_ID INTEGER,
    P_NEW_KASA INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OTC_PAY_IN (
    P_FILTER VARCHAR(150))
RETURNS (
    R_PAYMENT_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_SUMA DOUBLE PRECISION,
    R_DATETIME DATE,
    R_IN_ID INTEGER,
    R_KLI_CODE VARCHAR(15))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OTC_PAY_OUT (
    P_FILTER VARCHAR(150))
RETURNS (
    R_PAYMENT_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_SUMA DOUBLE PRECISION,
    R_DATETIME DATE,
    R_OUT_ID INTEGER,
    R_KLI_CODE VARCHAR(15))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OTC_PROD_SKLAD (
    P_FILTER VARCHAR(150))
RETURNS (
    R_SKLAD_ID SMALLINT,
    R_SKLAD_NAME VARCHAR(20),
    R_SUMA_PLATENO DOUBLE PRECISION,
    R_SUMA_NEPLATENO DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OTC_PROD_STOKI (
    P_FILTER VARCHAR(1000),
    P_OBEKT_ID TYPE OF DOM_KEY)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_ED_CENA DOUBLE PRECISION,
    R_TOT_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_KOL2 DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OTC_USER_TOTAL (
    P_FILTER VARCHAR(150),
    P_ADD_DDS INTEGER)
RETURNS (
    R_USER_NAME VARCHAR(45),
    R_USER_ID SMALLINT,
    R_SUMA_TIP SMALLINT,
    R_OPR_SUMA DOUBLE PRECISION,
    R_TIP VARCHAR(35))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OUT_DVSK (
    P_OUT_EL_ID INTEGER)
RETURNS (
    R_IN_EL_ID INTEGER,
    R_ELEMENT_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_OPR_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OUT_DVSK_INFO (
    P_FILTER VARCHAR(1200))
RETURNS (
    R_OPR_DATE DATE,
    R_OPR_DATETIME TIMESTAMP,
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_SIMPLE_CODE VARCHAR(15),
    R_ME_ID SMALLINT,
    R_ME_NAME VARCHAR(2),
    R_SKLAD_ID SMALLINT,
    R_SKLAD_NAME VARCHAR(20),
    R_USER_ID SMALLINT,
    R_USER_NAME VARCHAR(30),
    R_OUT_ID INTEGER,
    R_OBEKT_ID SMALLINT,
    R_OBEKT_NAME VARCHAR(20),
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_FIRMA_ID INTEGER,
    R_FIRMA_NAME VARCHAR(50),
    R_ME2_ID SMALLINT,
    R_ME2_NAME VARCHAR(2),
    R_KOL DOUBLE PRECISION,
    R_NAME_KLI VARCHAR(100),
    R_NAME_DOSTAV VARCHAR(100),
    R_KLI_ID_PROIZV INTEGER,
    R_SROK DATE,
    R_NCAR VARCHAR(20),
    R_USER_NAME_DVSK VARCHAR(30),
    R_OPR_DATE_DVSK DATE,
    R_DOK_EL VARCHAR(60),
    R_DOK_H VARCHAR(60),
    R_DVSK_EL_ID INTEGER,
    R_BG_NOMER VARCHAR(15),
    R_DATE_PROIZV DATE,
    R_PARTIDA_NOMER VARCHAR(30),
    R_TEMPERATURA VARCHAR(20),
    R_TIME_PRIEMANE TIME,
    R_PARTIDA_EL_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OUT_EL_KOL_FOR_FAKTURA (
    P_NUMBER INTEGER,
    P_FLAG_FAKT_IZL SMALLINT,
    P_FLAG_SAME_SN SMALLINT)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_RSN SMALLINT,
    R_IS_ALL_KOL SMALLINT,
    R_IS_USLUGA SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OUT_EL_PRICES (
    P_FAK_EL_ID TYPE OF DOM_INT)
RETURNS (
    R_OUT_EL_CENA_OS TYPE OF DOM_CENA,
    R_OUT_EL_CENA TYPE OF DOM_CENA,
    R_OUT_EL_CENA_CL TYPE OF DOM_CENA,
    R_FAK_EL_ID TYPE OF DOM_KEY,
    R_PERCENT_MARKUP TYPE OF DOM_PERCENT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_OUT_PATIDA_INFO (
    P_ID INTEGER)
RETURNS (
    R_OUT_EL_ID INTEGER,
    R_OUT_SUMA_FR DOUBLE PRECISION,
    R_OPR_ID INTEGER,
    R_OUT_KOL DOUBLE PRECISION,
    R_PAR_KOL DOUBLE PRECISION,
    R_PAR_SUMA DOUBLE PRECISION,
    R_DATETIME TIMESTAMP,
    R_OPR_DATE DATE,
    R_OPR_NAME VARCHAR(45),
    R_OPR_TIP SMALLINT,
    R_SIMPLE_NAME VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PARI_SALDO (
    P_VALUTA_ID INTEGER,
    P_DATE DATE,
    P_FILTER VARCHAR(1024),
    P_FLAG_SUMA_BASE SMALLINT,
    P_IS_CRYPT SMALLINT,
    P_PASS VARCHAR(100))
RETURNS (
    R_VALUTA_ID INTEGER,
    R_SUMA DOUBLE PRECISION,
    R_SUMA_KURS DOUBLE PRECISION,
    R_SUMA_SR_KURS DOUBLE PRECISION,
    R_SUMA_RAZLIKA DOUBLE PRECISION,
    R_SUMA_SALDO DOUBLE PRECISION,
    R_SUMA_SALDO_KURS DOUBLE PRECISION,
    R_KURS DOUBLE PRECISION,
    R_KURS_SR DOUBLE PRECISION,
    R_PARI_IO_TIP SMALLINT,
    R_TIP SMALLINT,
    R_RAZHOD_SUMA DOUBLE PRECISION,
    R_PRIHOD_SUMA DOUBLE PRECISION,
    R_SUMA_SALDO_RAZLIKA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PARTIDA_HIS_IN (
    P_IN_ID TYPE OF DOM_KEY)
RETURNS (
    R_KOL TYPE OF DOM_KOL,
    R_SUMA_FR TYPE OF DOM_SUMA,
    R_SUMA_SR TYPE OF DOM_SUMA,
    R_ELEMENT_ID TYPE OF DOM_KEY,
    R_ID TYPE OF DOM_KEY,
    R_DATETIME TYPE OF DOM_DATE_TIME,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_OPR_SUMA TYPE OF DOM_SUMA,
    R_OPR_NAME VARCHAR(45),
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_SKLAD_NAME TYPE OF DOM_CHAR_20,
    R_SN TYPE OF DOM_CHAR_30)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PARTIDA_HIS_OUT (
    P_OUT_ID INTEGER)
RETURNS (
    R_KOL TYPE OF DOM_KOL,
    R_SUMA_FR TYPE OF DOM_SUMA,
    R_SUMA_SR TYPE OF DOM_SUMA,
    R_ELEMENT_ID TYPE OF DOM_KEY,
    R_ID TYPE OF DOM_KEY,
    R_DATETIME TYPE OF DOM_DATE_TIME,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_OPR_SUMA TYPE OF DOM_SUMA,
    R_OPR_NAME VARCHAR(45),
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_SKLAD_NAME TYPE OF DOM_CHAR_20,
    R_SN TYPE OF DOM_CHAR_30)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_DOST_AMB_DUE (
    P_DATE DATE,
    P_FILTER VARCHAR(150))
RETURNS (
    R_ID INTEGER,
    R_SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_DOST_AMB_RET_DUE (
    P_DATE DATE,
    P_FILTER VARCHAR(150))
RETURNS (
    R_ID INTEGER,
    R_SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_DOST_DUE (
    P_DATE DATE,
    P_FILTER VARCHAR(150))
RETURNS (
    R_ID INTEGER,
    R_SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_DOST_FAKT_DUE (
    P_DATE DATE,
    P_FILTER VARCHAR(150))
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(15),
    R_SUMA DOUBLE PRECISION,
    R_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_DOST_PAY (
    P_DATE DATE,
    P_FILTER VARCHAR(1000))
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(15),
    R_SUMA DOUBLE PRECISION,
    R_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_DOST_RET (
    P_DATE DATE,
    P_FILTER VARCHAR(1000),
    P_FLAG_DDS SMALLINT)
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(15),
    R_SUMA DOUBLE PRECISION,
    R_NAME_FAK VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_DOST_RET_PAY (
    P_DATE DATE,
    P_FILTER VARCHAR(150))
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(15),
    R_SUMA DOUBLE PRECISION,
    R_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_IN_DOST_SUMI (
    P_KLI_ID TYPE OF DOM_KEY,
    P_FLAG_DDS TYPE OF DOM_SMAL_INT,
    P_TO_DATE TYPE OF DOM_DATE_TIME,
    P_ADD_DOST_FNUMBER TYPE OF DOM_FLAG,
    P_FLAG_SUMI TYPE OF DOM_FLAG)
RETURNS (
    R_ID INTEGER,
    R_DATETIME DATE,
    R_PAY_TIP SMALLINT,
    R_SUMA_DOST DOUBLE PRECISION,
    R_SUMA_PAY DOUBLE PRECISION,
    R_PL_SUMA DOUBLE PRECISION,
    R_SUMA_OSTATAK DOUBLE PRECISION,
    R_OPR_TIP SMALLINT,
    R_DT TIMESTAMP,
    R_NUMBER VARCHAR(10),
    R_SUMA_ID INTEGER,
    R_FAK_DATE DATE,
    R_FAK_OPR_ID INTEGER,
    R_VAT_PERCENT DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_OUT_MOBILE (
    P_KLI_ID TYPE OF DOM_KEY)
RETURNS (
    R_OPR_ID TYPE OF DOM_KEY,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_SUMA_OPR TYPE OF DOM_SUMA,
    R_SUMA_OSTATAK TYPE OF DOM_SUMA,
    R_OPR_TIP TYPE OF DOM_SMAL_INT,
    R_SUMA_ID TYPE OF DOM_KEY,
    R_SUMI_PADEJ TYPE OF DOM_DATE,
    R_OUT_ID TYPE OF DOM_KEY,
    R_INVOICE_NUMBER TYPE OF DOM_CHAR_10,
    R_INVOICE_DATE TYPE OF DOM_DATE,
    R_UNP TYPE OF DOM_UNP,
    R_VAT_PERCENT TYPE OF DOM_PERCENT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_OUT_ONLY_FAKT (
    P_DATE DATE,
    P_FILTER VARCHAR(150),
    P_PADEJ DATE)
RETURNS (
    R_ID INTEGER,
    R_SUMA_DUE DOUBLE PRECISION,
    R_SUMA_PAY DOUBLE PRECISION,
    R_SUMA_SALDO DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_OUT_PROD_SUMI (
    P_KLI_ID TYPE OF DOM_KEY,
    P_TO_DATE TYPE OF DOM_DATE,
    P_TO_OPR_ID TYPE OF DOM_KEY,
    P_FLAG_SUMI TYPE OF DOM_FLAG)
RETURNS (
    R_ID TYPE OF DOM_KEY,
    R_DATETIME TYPE OF DOM_DATE,
    R_PAY_TIP TYPE OF DOM_SMAL_INT,
    R_SUMA_PROD TYPE OF DOM_SUMA,
    R_SUMA_PAY TYPE OF DOM_SUMA,
    R_PL_SUMA TYPE OF DOM_SUMA,
    R_SUMA_OSTATAK TYPE OF DOM_SUMA,
    R_NUMBER TYPE OF DOM_CHAR_10,
    R_DT TYPE OF DOM_DATE_TIME,
    R_OPR_TIP TYPE OF DOM_SMAL_INT,
    R_SUMA_ID TYPE OF DOM_KEY,
    R_SUMI_PADEJ TYPE OF DOM_DATE,
    R_FAK_DATA TYPE OF DOM_DATE,
    R_FLAG_BONUS TYPE OF DOM_SMAL_INT,
    R_FLAG_LICENZ TYPE OF DOM_SMAL_INT,
    R_VBROJ TYPE OF DOM_FLAG,
    R_SUMA_FAK TYPE OF DOM_SUMA,
    R_FAK_OPR_ID TYPE OF DOM_KEY,
    R_POR_NUM TYPE OF DOM_CHAR_30,
    R_UNP_ID TYPE OF DOM_INT64,
    R_UNP TYPE OF DOM_UNP,
    R_IS_BANK TYPE OF DOM_FLAG,
    R_FLAG_AVANS TYPE OF DOM_FLAG,
    R_SUMI_VAT_PERCENT TYPE OF DOM_SUMA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_OUT_SUMS
RETURNS (
    R_OPR_ID TYPE OF DOM_KEY,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_SUMA_OPR TYPE OF DOM_SUMA,
    R_SUMA_OSTATAK TYPE OF DOM_SUMA,
    R_OPR_TIP TYPE OF DOM_SMAL_INT,
    R_SUMA_ID TYPE OF DOM_KEY,
    R_SUMI_PADEJ TYPE OF DOM_DATE,
    R_OUT_ID TYPE OF DOM_KEY,
    R_INVOICE_NUMBER TYPE OF DOM_CHAR_10,
    R_INVOICE_DATE TYPE OF DOM_DATE,
    R_UNP TYPE OF DOM_UNP,
    R_VAT_PERCENT TYPE OF DOM_PERCENT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_PROD_AMB_DUE (
    P_DATE DATE,
    P_FILTER VARCHAR(150),
    P_PADEJ DATE)
RETURNS (
    R_ID INTEGER,
    R_SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_PROD_AMB_RET_DUE (
    P_DATE DATE,
    P_FILTER VARCHAR(150),
    P_PADEJ DATE)
RETURNS (
    R_ID INTEGER,
    R_SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_PROD_DUE (
    P_DATE DATE,
    P_FILTER VARCHAR(150),
    P_PADEJ DATE)
RETURNS (
    R_ID INTEGER,
    R_SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_PROD_PAY (
    P_DATE DATE,
    P_FILTER VARCHAR(150),
    P_PADEJ DATE)
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(15),
    R_SUMA DOUBLE PRECISION,
    R_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_PROD_RET (
    P_DATE DATE,
    P_FILTER VARCHAR(150),
    P_PADEJ DATE)
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(15),
    R_SUMA DOUBLE PRECISION,
    R_NAME_FAK VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAY_PROD_RET_PAY (
    P_DATE DATE,
    P_FILTER VARCHAR(150),
    P_PADEJ DATE)
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(15),
    R_SUMA DOUBLE PRECISION,
    R_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAYMENT_BONDS_OPR_ID (
    P_OPR_ID INTEGER)
RETURNS (
    R_OPR_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PAYMENT_NODE_ID (
    P_OPR_ID INTEGER)
RETURNS (
    R_PAYMENT_NODE_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PN_FOR_POR (
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_PN TYPE OF DOM_CHAR_100)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_POR_2 (
    P_SORT_KEY TYPE OF DOM_INT,
    ID TYPE OF DOM_KEY)
RETURNS (
    CODE TYPE OF DOM_CHAR_50,
    NAME TYPE OF DOM_CHAR_100,
    CENA_ED TYPE OF DOM_CENA,
    KOL TYPE OF DOM_KOL,
    ME CHAR(2),
    NAME_RAZ TYPE OF DOM_CHAR_30,
    KOL_RAZ TYPE OF DOM_KOL,
    KOL_EL_RAZ TYPE OF DOM_KOL,
    SIM_ID_RAZ TYPE OF DOM_KEY,
    TOTAL TYPE OF DOM_SUMA,
    CENA_ED_RAZ TYPE OF DOM_CENA,
    BAR_CODE VARCHAR(13),
    GODNOST TYPE OF DOM_SMAL_INT,
    R_POR_EL_COMMENT TYPE OF DOM_CHAR_100,
    CODE2 TYPE OF DOM_CHAR_50,
    R_CENA_OS TYPE OF DOM_CENA,
    R_TO TYPE OF DOM_CENA,
    R_PN TYPE OF DOM_CHAR_100)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_POR_AMBALAJ (
    KLI_ID INTEGER,
    OPR_ID INTEGER,
    P_CL_ID INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL DOUBLE PRECISION,
    R_KOL_TOTAL DOUBLE PRECISION,
    R_CENA_AMBALAJ DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_POR_DETAIL (
    P_OPR_ID INTEGER)
RETURNS (
    SIM_ID INTEGER,
    CODE TYPE OF DOM_CHAR_50,
    CODE2 TYPE OF DOM_CHAR_50,
    NAME VARCHAR(100),
    NAME_SHORT VARCHAR(12),
    ME CHAR(2),
    NAME_RAZ VARCHAR(30),
    KOL_RAZ DOUBLE PRECISION,
    KOL DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    KOL_POR DOUBLE PRECISION,
    SUMA_POR DOUBLE PRECISION,
    POR_RAZLIKA DOUBLE PRECISION,
    SUMA_RAZ DOUBLE PRECISION,
    COMMENT VARCHAR(100),
    R_KOL_PROD DOUBLE PRECISION,
    R_SUMA_PROD DOUBLE PRECISION,
    R_KOL_RAZLIKA_PROD DOUBLE PRECISION,
    R_SUMA_RAZLIKA_PROD DOUBLE PRECISION,
    KOL_RZV DOUBLE PRECISION,
    R_SIMPLE_PROP VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_POR_EL (
    P_OPR_ID INTEGER)
RETURNS (
    R_KOL FLOAT,
    R_SIMPLE_ID INTEGER,
    R_CENA DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_RAZ_ID INTEGER,
    R_RAZ_EL_ID INTEGER,
    R_KOL_RAZ DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_POR_EL_P (
    P_OPR_ID_POR INTEGER)
RETURNS (
    ID INTEGER,
    SIMPLE_ID INTEGER,
    KOL DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    KOL_RAZ DOUBLE PRECISION,
    RAZFASOVKA_ID INTEGER,
    KOL_NAL DOUBLE PRECISION,
    CENA_DOST DOUBLE PRECISION,
    CENA_BASE DOUBLE PRECISION,
    KOL2 DOUBLE PRECISION,
    ME2_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_POR_EL_PRODUCTION_OBOB (
    P_OPR_ID INTEGER)
RETURNS (
    R_SIMPLE_CODE DOM_CHAR_50,
    R_SIMPLE_NAME VARCHAR(100),
    R_ME_NAME CHAR(2),
    R_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_GR_NAME VARCHAR(50),
    R_ME2_NAME CHAR(2),
    R_CENA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_POR_NEDOSTIG (
    P_SKLAD INTEGER,
    P_OPR_ID INTEGER,
    P_PROIZ INTEGER)
RETURNS (
    SIM_ID INTEGER,
    SIM_NAME VARCHAR(100),
    SIM_CODE DOM_CHAR_50,
    ME_ID SMALLINT,
    NAME_ME CHAR(2),
    KOL_NAL DOUBLE PRECISION,
    KOL DOUBLE PRECISION,
    KOL_MOVE DOUBLE PRECISION,
    PRODUCT INTEGER,
    MASTER INTEGER,
    TIP_PRODUKT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_POR_OB (
    P_OPR_ID VARCHAR(3000))
RETURNS (
    ID INTEGER,
    OPR_ID INTEGER,
    STATUS SMALLINT,
    TIP_ZAQWKA SMALLINT,
    ZA_DATA DATE,
    SKLAD_ID INTEGER,
    NAME_SKLAD VARCHAR(20),
    STATUS_DATE TIMESTAMP,
    NOMER VARCHAR(30),
    AGENT_ID INTEGER,
    STOKOV_NOM VARCHAR(15),
    OTKADE SMALLINT,
    NAME_KLI VARCHAR(100),
    NAME_PLACE VARCHAR(30),
    TOTAL_OLD DOUBLE PRECISION,
    SUMA_POR DOUBLE PRECISION,
    ADDRESS VARCHAR(50),
    KLI_ID INTEGER,
    R_KOL_BRUTO TYPE OF DOM_KOL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_POR_TOTAL (
    OPR_ID INTEGER)
RETURNS (
    SUMA_TOTAL DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_POR_ZAIVKA (
    P_SKLAD INTEGER,
    P_PROIZV INTEGER,
    P_OPR_ID INTEGER)
RETURNS (
    SIM_ID INTEGER,
    KOL DOUBLE PRECISION,
    SKLAD_ID INTEGER,
    POR_EL_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PORS (
    P_STATUS TYPE OF DOM_SMAL_INT,
    P_DATE TYPE OF DOM_DATE,
    P_DATE_TYPE TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SKLAD_ID INTEGER,
    R_SKLAD_NAME VARCHAR(20),
    R_POR_ID INTEGER,
    R_OPR_ID INTEGER,
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_ZA_DATA DATE,
    R_TIP SMALLINT,
    R_NOM_POR VARCHAR(30),
    R_AGENT_NAME VARCHAR(100),
    R_STOKOV_NOM VARCHAR(15),
    R_USER_NAME VARCHAR(30),
    R_AGENT_ID INTEGER,
    R_FOR_DATE_TIME TYPE OF DOM_DATE_TIME,
    R_KLI_ADDRES TYPE OF DOM_CHAR_100,
    R_UNP_ID TYPE OF DOM_INT64,
    R_UNP TYPE OF DOM_UNP)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PORS_1 (
    P_OPR_ID VARCHAR(3000),
    P_PROIZVODSTVO INTEGER)
RETURNS (
    SIMPLE_ID INTEGER,
    NAME VARCHAR(100),
    USLUGA CHAR(1),
    ME CHAR(2),
    NAME_RAZ VARCHAR(30),
    KOL_RAZ DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    KOL DOUBLE PRECISION,
    KOL_NAL DOUBLE PRECISION,
    KOL_POR DOUBLE PRECISION,
    PRODUCT INTEGER,
    R_MASTER INTEGER,
    KOL_RZV DOUBLE PRECISION,
    TIP_PRODUKT INTEGER,
    POR_EL_ID_PROP INTEGER,
    RAZ_ID INTEGER,
    R_NOTE VARCHAR(100),
    DDS FLOAT,
    ME2 VARCHAR(2),
    KOL2 FLOAT,
    R_PRICE TYPE OF DOM_CENA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PORS_AMBALAJ (
    P_OPR_ID VARCHAR(3000),
    P_CL_ID INTEGER)
RETURNS (
    ID INTEGER,
    KLI_ID INTEGER,
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL DOUBLE PRECISION,
    R_KOL_TOTAL DOUBLE PRECISION,
    R_CENA_AMBALAJ DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PORS_POR (
    P_OPR_ID VARCHAR(3000))
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_NAME VARCHAR(100),
    R_USLUGA CHAR(1),
    R_ME CHAR(2),
    R_NAME_RAZ VARCHAR(30),
    R_KOL_RAZ DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_KOL DOUBLE PRECISION,
    R_KOL_NAL DOUBLE PRECISION,
    R_OPR_ID INTEGER,
    R_KOL_POR DOUBLE PRECISION,
    R_KOL_RZV DOUBLE PRECISION,
    R_CENA DOUBLE PRECISION,
    R_POR_EL_ID_PROP INTEGER,
    R_TIP_PRODUKT INTEGER,
    R_KOL2 DOUBLE PRECISION,
    R_ME2 CHAR(2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PORS_TOTAL (
    P_STATUS TYPE OF DOM_INT,
    P_DATE TYPE OF DOM_DATE,
    P_DATE_TYPE TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SKLAD_ID TYPE OF DOM_KEY,
    R_SKLAD_NAME TYPE OF DOM_CHAR_20,
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_KOL TYPE OF DOM_KOL,
    R_SUMA TYPE OF DOM_SUMA,
    R_KOL2 DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PROD_PN (
    P_OPR_ID TYPE OF DOM_KEY,
    P_TIP_PN TYPE OF DOM_KEY_SMALL)
RETURNS (
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_PN TYPE OF DOM_CHAR_30,
    R_SROK DOM_DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PROD_SUMI_FOR_FAK_NO_SN (
    P_NUMBER INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_IS_USLUGA SMALLINT)
RETURNS (
    R_SUMA_PROD DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PROD_SUMI_FOR_FAK_SN (
    P_NUMBER INTEGER,
    P_SIMPLE_ID INTEGER,
    P_FLAG_SAME_SN SMALLINT)
RETURNS (
    R_SUMA_PROD DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PRODAJBA (
    ID INTEGER,
    P_TIP INTEGER,
    P_TIP_PN TYPE OF DOM_KEY_SMALL,
    P_BONUS_TEXT TYPE OF DOM_CHAR_30)
RETURNS (
    R_PROCENT_NAD_OS DOUBLE PRECISION,
    CODE DOM_CHAR_50,
    NAME VARCHAR(115),
    CENA_PROD DOUBLE PRECISION,
    KOL DOUBLE PRECISION,
    CENA DOUBLE PRECISION,
    ME CHAR(2),
    R_PROCENT_NAD_CL DOUBLE PRECISION,
    KOL_RAZ DOUBLE PRECISION,
    NAME_RAZ VARCHAR(30),
    KLI_KOD VARCHAR(15),
    KOL_NA_RAZ DOUBLE PRECISION,
    KOL_POR DOUBLE PRECISION,
    NOM_DOK VARCHAR(3000),
    ME2 CHAR(2),
    KOL2 DOUBLE PRECISION,
    ME_LONG VARCHAR(15),
    BAR_CODE VARCHAR(13),
    CODE2 TYPE OF DOM_CHAR_50,
    CENA_OS DOUBLE PRECISION,
    CENA_CL DOUBLE PRECISION,
    R_SEL_NAME VARCHAR(115),
    R_SIMPLE_ID INTEGER,
    R_SUMA_OS DOUBLE PRECISION,
    R_SUMA_CL DOUBLE PRECISION,
    R_PN VARCHAR(2000),
    VET_NOM_DOST VARCHAR(3000),
    R_SROK VARCHAR(2000),
    R_CENA_BEZ_DDS DOUBLE PRECISION,
    R_CENA_S_DDS DOUBLE PRECISION,
    R_MARKA VARCHAR(2000),
    R_STRANA VARCHAR(2000),
    R_KLI_PROIZV VARCHAR(2000),
    R_SIMPLE_PROP TYPE OF DOM_CHAR_300,
    R_SIMPLE_NAME_SORT TYPE OF DOM_CHAR_50,
    R_SIMPLE_EXT1 TYPE OF DOM_CHAR_2000,
    R_KOL_DEF_RAZ TYPE OF DOM_INT,
    R_DEF_RAZ_REST TYPE OF DOM_INT,
    R_NAME_DEF_RAZ TYPE OF DOM_CHAR_30,
    R_SELEKCIQ_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PRODAJBI (
    P_TIP INTEGER,
    P_TIP_PN TYPE OF DOM_KEY_SMALL,
    P_BONUS_TEXT TYPE OF DOM_CHAR_30)
RETURNS (
    CODE DOM_CHAR_50,
    NAME VARCHAR(115),
    CENA_PROD DOUBLE PRECISION,
    KOL DOUBLE PRECISION,
    CENA DOUBLE PRECISION,
    ME CHAR(2),
    R_PROCENT_NAD_OS DOUBLE PRECISION,
    KOL_RAZ DOUBLE PRECISION,
    NAME_RAZ VARCHAR(30),
    KLI_KOD VARCHAR(15),
    KOL_NA_RAZ DOUBLE PRECISION,
    KOL_POR DOUBLE PRECISION,
    ME2 CHAR(2),
    BAR_CODE VARCHAR(13),
    R_PROCENT_NAD_CL DOUBLE PRECISION,
    ME_LONG VARCHAR(15),
    CODE2 DOM_CHAR_50,
    CENA_CL DOUBLE PRECISION,
    CENA_OS DOUBLE PRECISION,
    R_SEL_NAME VARCHAR(115),
    KOL2 DOUBLE PRECISION,
    NOM_DOK TYPE OF DOM_CHAR_1000,
    R_SIMPLE_ID INTEGER,
    R_SUMA_OS DOUBLE PRECISION,
    R_SUMA_CL DOUBLE PRECISION,
    R_PN VARCHAR(2000))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PRODREPORTEL (
    P_ID INTEGER,
    P_SORT_KEY INTEGER)
RETURNS (
    CODE VARCHAR(15),
    NAME VARCHAR(100),
    GODNOST SMALLINT,
    KOL DOUBLE PRECISION,
    ME CHAR(2),
    NAME_RAZ VARCHAR(30),
    KOL_RAZ DOUBLE PRECISION,
    BAR_CODE VARCHAR(13),
    SUMA DOUBLE PRECISION,
    ED_CENA DOUBLE PRECISION,
    KOL_NEDOSTIG DOUBLE PRECISION,
    R_POR_EL_COMMENT VARCHAR(100),
    CODE2 VARCHAR(15),
    R_SIMPLE_PROP VARCHAR(100),
    R_CENA_OS DOUBLE PRECISION,
    R_TO DOUBLE PRECISION,
    R_PN TYPE OF DOM_CHAR_100,
    KOL2 DOUBLE PRECISION,
    ME2 CHAR(2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PRODUCTION_IN (
    ID TYPE OF DOM_KEY)
RETURNS (
    R_CODE TYPE OF DOM_CHAR_50,
    R_NAME TYPE OF DOM_CHAR_100,
    R_SIMPLEID TYPE OF DOM_KEY,
    R_ME CHAR(2),
    CENA TYPE OF DOM_CENA,
    SUMA TYPE OF DOM_SUMA,
    GR_NAME TYPE OF DOM_CHAR_50,
    R_IN_EL_ID TYPE OF DOM_KEY,
    R_KOL TYPE OF DOM_KOL,
    NOM_DOK TYPE OF DOM_CHAR_1000,
    R_ME2 CHAR(2),
    R_KOL2 TYPE OF DOM_KOL,
    R_SROK TYPE OF DOM_CHAR_100,
    R_PARTIDA_NUM TYPE OF DOM_CHAR_1000,
    R_IN_EL_PARAM_COUNT TYPE OF DOM_KOL,
    R_PARAMAS TYPE OF DOM_CHAR_100,
    R_EXPLANATORY_TEXT TYPE OF DOM_CHAR_100,
    R_QTY_COMPLETE TYPE OF DOM_KOL,
    R_QTY_COMPLETE_TOTAL TYPE OF DOM_KOL,
    R_EXT_1 TYPE OF DOM_CHAR_300,
    R_EXT_2 TYPE OF DOM_CHAR_300,
    R_TEMPERATURE TYPE OF DOM_CHAR_20)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PRODUCTION_OUT (
    ID TYPE OF DOM_KEY,
    CL_ID TYPE OF DOM_KEY)
RETURNS (
    R_CODE TYPE OF DOM_CHAR_50,
    R_NAME TYPE OF DOM_CHAR_100,
    R_ME CHAR(2),
    R_KOL TYPE OF DOM_KOL,
    CENA TYPE OF DOM_CENA,
    SUMA TYPE OF DOM_SUMA,
    R_SUMAFR TYPE OF DOM_SUMA,
    GR_NAME TYPE OF DOM_CHAR_50,
    R_OUT_EL_ID TYPE OF DOM_KEY,
    NOM_DOK TYPE OF DOM_CHAR_1000,
    R_ME2 CHAR(2),
    R_KOL2 TYPE OF DOM_KOL,
    R_LAST_CENA TYPE OF DOM_SUMA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PRODUCTION_OUT2
RETURNS (
    R_CODE TYPE OF DOM_CHAR_50,
    R_NAME TYPE OF DOM_CHAR_100,
    R_ME CHAR(2),
    R_KOL TYPE OF DOM_KOL,
    R_ME2 CHAR(2),
    R_KOL2 TYPE OF DOM_KOL,
    R_OUT_EL_ID TYPE OF DOM_KEY,
    R_SEL_TEXT TYPE OF DOM_CHAR_50,
    GR_NAME TYPE OF DOM_CHAR_50,
    CENA TYPE OF DOM_CENA,
    SUMA TYPE OF DOM_SUMA,
    SUMA_FR TYPE OF DOM_SUMA,
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_PARTIDA_SROK TYPE OF DOM_DATE_TIME,
    R_PARTIDA_NUM TYPE OF DOM_CHAR_30,
    R_CHILD_SEL_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PRODUK_ZAIAVKA (
    OPR_ID TYPE OF DOM_KEY,
    P_BARCODE TYPE OF DOM_KEY,
    P_SKLAD_ID VARCHAR(3000),
    P_SHOW_IZL TYPE OF DOM_KEY_SMALL)
RETURNS (
    R_SIMPLEID TYPE OF DOM_KEY,
    R_SIMPLENAME TYPE OF DOM_CHAR_100,
    R_CODE TYPE OF DOM_CHAR_50,
    R_MEID TYPE OF DOM_KEY,
    R_ME CHAR(2),
    R_CENA_CL TYPE OF DOM_CENA,
    R_DDS DECIMAL(4,2),
    R_GRNAME TYPE OF DOM_CHAR_100,
    R_MEKOEF TYPE OF DOM_SMAL_INT,
    R_BARCODE VARCHAR(13),
    R_KLINAME TYPE OF DOM_CHAR_100,
    R_KOLKRIMAX FLOAT,
    R_KOLKRIMIN FLOAT,
    R_SKLADID INTEGER,
    R_KLI_ID INTEGER,
    R_SKLAD_NAME TYPE OF DOM_CHAR_50,
    R_USE_PROP SMALLINT,
    R_CODE_2 TYPE OF DOM_CHAR_50,
    R_KOL_NAL TYPE OF DOM_KOL,
    R_LAST_CENA TYPE OF DOM_CENA,
    R_KOL_RZV TYPE OF DOM_KOL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PROP_PRODUKT_POR (
    P_POR_EL_ID INTEGER)
RETURNS (
    R_STAUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PROV_NAL_RAZLIKI
RETURNS (
    R_IN_EL_ID INTEGER,
    R_SUMA_IN_FR DOUBLE PRECISION,
    R_SUMA_IN_SR DOUBLE PRECISION,
    R_SUMA_OUT_FR DOUBLE PRECISION,
    R_SUMA_OUT_SR DOUBLE PRECISION,
    R_ELEMENT_ID INTEGER,
    R_PARTIDA_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PROVERKA_NAL (
    P_FLAG_FKT SMALLINT)
RETURNS (
    SIMPLE_ID INTEGER,
    SKLAD_ID SMALLINT,
    F_KOL DOUBLE PRECISION,
    F_SUMA_FR DOUBLE PRECISION,
    F_SUMA_SR DOUBLE PRECISION,
    S_KOL DOUBLE PRECISION,
    S_SUMA_FR DOUBLE PRECISION,
    S_SUMA_SR DOUBLE PRECISION,
    PAR_KOL DOUBLE PRECISION,
    PAR_SUMA_FR DOUBLE PRECISION,
    PAR_SUMA_SR DOUBLE PRECISION,
    P_KOL DOUBLE PRECISION,
    P_SUMA_FR DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_PROVERKA_POR (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY)
RETURNS (
    SIMPLE_ID TYPE OF DOM_KEY,
    CODE TYPE OF DOM_CHAR_50,
    NAME TYPE OF DOM_CHAR_100,
    ME_ID TYPE OF DOM_SMAL_INT,
    ME CHAR(2),
    NAL_KOL TYPE OF DOM_KOL,
    NAL_KOL_ZRV TYPE OF DOM_KOL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_QUANTITY_CALC_PARAMS (
    P_REQUEST_EL_ID TYPE OF DOM_KEY,
    P_COUNT TYPE OF DOM_KOL)
RETURNS (
    R_PARAM_QTY TYPE OF DOM_KOL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_QUANTITY_CALC_PARAMS_V1 (
    P_ORDER_EL_ID TYPE OF DOM_KEY,
    P_COUNT TYPE OF DOM_KOL)
RETURNS (
    R_PARAM_QTY TYPE OF DOM_KOL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_RAZBITI (
    P_OT DATE,
    P_DO DATE,
    P_OBOB_OUT INTEGER,
    P_OBOB_IN INTEGER,
    P_FILTER VARCHAR(2000),
    P_OBOB_PROD INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_TIP INTEGER,
    R_DATE DATE,
    R_SKLAD_ID SMALLINT,
    R_NOM INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_RAZHOD_KLI (
    P_PARI_IO INTEGER,
    P_FROM_DATE VARCHAR(30),
    TO_DATE VARCHAR(30),
    P_FILTER_KLI VARCHAR(1000),
    P_FILTER_OBEKTI VARCHAR(1000),
    P_VALUTA INTEGER,
    FLAG_CRYPT INTEGER,
    PASS VARCHAR(24),
    P_TIP INTEGER,
    P_BASE_VALUTA INTEGER,
    P_TIP_SPR INTEGER,
    P_DDS DOUBLE PRECISION)
RETURNS (
    R_SUMA DOUBLE PRECISION,
    PRIH_RAZH_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_SUMA_DDS DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_RAZHOD_OBEKTI (
    P_PARI_IO INTEGER,
    P_FROM_DATE VARCHAR(30),
    TO_DATE VARCHAR(30),
    P_FILTER_KLI VARCHAR(1000),
    P_FILTER_OBEKTI VARCHAR(1000),
    P_VALUTA INTEGER,
    FLAG_CRYPT INTEGER,
    PASS VARCHAR(24),
    P_TIP_RAZH INTEGER,
    P_BASE_VALUTA INTEGER,
    P_TIP_SPR INTEGER,
    P_DDS DOUBLE PRECISION)
RETURNS (
    R_SUMA DOUBLE PRECISION,
    PRIH_RAZH_ID INTEGER,
    R_OBEKT_NAME VARCHAR(20),
    R_SUMA_DDS DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_RAZPAD_IN (
    CL_ID TYPE OF DOM_KEY,
    OUT_EL_ID TYPE OF DOM_KEY)
RETURNS (
    R_KOL TYPE OF DOM_KOL,
    R_ME1 CHAR(2),
    R_CODE TYPE OF DOM_CHAR_50,
    R_NAME TYPE OF DOM_CHAR_100,
    SUMA TYPE OF DOM_SUMA,
    R_SUMAFR TYPE OF DOM_SUMA,
    CENA TYPE OF DOM_CENA,
    GR_NAME TYPE OF DOM_CHAR_50,
    R_ME2 CHAR(2),
    R_KOL2 DOUBLE PRECISION,
    R_CALC_RATIO TYPE OF DOM_PERCENT,
    R_SHAREHOLDING TYPE OF DOM_PERCENT,
    R_SN TYPE OF DOM_CHAR_100)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_RAZPAD_OUT (
    ID TYPE OF DOM_KEY,
    CL_ID TYPE OF DOM_KEY)
RETURNS (
    CENA TYPE OF DOM_CENA,
    SUMA TYPE OF DOM_SUMA,
    R_CODE TYPE OF DOM_CHAR_50,
    R_NAME TYPE OF DOM_CHAR_100,
    R_ME CHAR(2),
    R_KOL TYPE OF DOM_KOL,
    R_SUMAFR TYPE OF DOM_SUMA,
    GR_NAME TYPE OF DOM_CHAR_50,
    R_OUT_EL_ID TYPE OF DOM_KEY,
    R_SN TYPE OF DOM_CHAR_100)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_RECIPIENTS_ALL
RETURNS (
    FLAG INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_REKVIZITI (
    P_KLI_ID INTEGER)
RETURNS (
    R_SUMA DOUBLE PRECISION,
    R_BR_NPLATENI INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_RET_STOKA_DOST_SN (
    P_OPR_ID TYPE OF DOM_KEY,
    P_IS_FKT TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SN TYPE OF DOM_CHAR_30,
    R_ELEMENT_ID TYPE OF DOM_KEY,
    R_EL_ID TYPE OF DOM_KEY,
    R_IN_EL_ID TYPE OF DOM_KEY,
    R_REAL_IN_EL TYPE OF DOM_KEY,
    R_SKLAD_ID TYPE OF DOM_KEY_SMALL,
    R_KOL TYPE OF DOM_KOL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_RETURN_STOKA_DOST (
    P_OPR_ID INTEGER,
    P_FLAG_FKT SMALLINT)
RETURNS (
    R_EL_ID INTEGER,
    R_NAL_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER,
    R_ALL_IN_ORG_SKLAD SMALLINT,
    R_SKLAD_ID SMALLINT,
    R_FLAG_FAK_IN SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_RETURN_STOKA_DOST_KI (
    P_OPR_ID INTEGER,
    P_FLAG_FKT SMALLINT)
RETURNS (
    R_EL_ID INTEGER,
    R_NAL_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER,
    R_ALL_IN_ORG_SKLAD SMALLINT,
    R_SKLAD_ID SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_RETURN_STOKA_DOST_KI_SUMI (
    P_IS_F INTEGER)
RETURNS (
    R_EL_ID INTEGER,
    R_NAL_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER,
    R_ALL_IN_ORG_SKLAD SMALLINT,
    R_SKLAD_ID SMALLINT,
    R_RSN CHAR(1),
    R_OPR_ID TYPE OF DOM_KEY,
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_VAT_PERCENT DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_RETURN_STOKA_PROD (
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_EL_ID TYPE OF DOM_KEY,
    R_NAL_KOL TYPE OF DOM_KOL,
    R_SUMA TYPE OF DOM_SUMA,
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_SKLAD_ID TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_RETURN_STOKA_PROD_KI (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OPR_FAK_PROD TYPE OF DOM_KEY)
RETURNS (
    R_EL_ID TYPE OF DOM_KEY,
    R_NAL_KOL TYPE OF DOM_KOL,
    R_SUMA TYPE OF DOM_SUMA,
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_SKLAD_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_RETURN_STOKA_PROD_KI_SUMA (
    P_OPR_FAK_PROD TYPE OF DOM_KEY)
RETURNS (
    R_OUT_EL_ID TYPE OF DOM_KEY,
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_SKLAD_ID TYPE OF DOM_KEY,
    R_SUMA TYPE OF DOM_SUMA,
    R_NAL_KOL TYPE OF DOM_KOL,
    R_KLI_ID TYPE OF DOM_KEY,
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_UNP TYPE OF DOM_UNP,
    R_OPR_ID TYPE OF DOM_KEY,
    R_OUT_KOL TYPE OF DOM_KOL,
    R_OUT_SUMA TYPE OF DOM_SUMA,
    R_SUMA_LEFT TYPE OF DOM_SUMA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SERIAL_NUM_SUB_PROD (
    P_SKLAD_IDS VARCHAR(200))
RETURNS (
    R_SKLAD_ID SMALLINT,
    R_SIMPLE_ID INTEGER,
    R_ELEMENT_ID INTEGER,
    R_IN_EL_ID INTEGER,
    R_SN VARCHAR(30))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_ET (
    ID_SIM INTEGER,
    ID_CL INTEGER)
RETURNS (
    NAME VARCHAR(100),
    NAME_SHORT TYPE OF DOM_CHAR_50,
    CODE TYPE OF DOM_CHAR_50,
    CENA_PROD DOUBLE PRECISION,
    ME_NAME CHAR(2),
    ME_NAME_LONG VARCHAR(15),
    SEL_NAME VARCHAR(50),
    BARCOD VARCHAR(13),
    BARCODKOL INTEGER,
    ME_IS_BROI INTEGER,
    ME_NAME2 CHAR(2),
    ME_NAME_LONG2 VARCHAR(15),
    ME_IS_BROI2 INTEGER,
    KOEF_ET INTEGER,
    KOEF_ET2 INTEGER,
    EXT1 TYPE OF DOM_CHAR_2000,
    NBARCODE INTEGER,
    SASTAV_NAME VARCHAR(100),
    CODE2 TYPE OF DOM_CHAR_50,
    NAME_LAT VARCHAR(100),
    R_EXT2 TYPE OF DOM_CHAR_1000)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_GROUP (
    P_GROUP_ID INTEGER)
RETURNS (
    R_GROUP_NAME VARCHAR(1024))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_GROUP_NAME
RETURNS (
    R_GROUP_ID INTEGER,
    R_GROUP_ID_IN VARCHAR(1024),
    R_GROUP_NAME VARCHAR(1024))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_HISTORY (
    P_SKLAD_ID TYPE OF DOM_SMAL_INT,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_FROM_DATE TYPE OF DOM_CHAR_10,
    P_TO_DATE TYPE OF DOM_CHAR_10,
    P_FILTER_ORDER TYPE OF DOM_CHAR_10)
RETURNS (
    R_SIMPLE_CODE TYPE OF DOM_CHAR_50,
    R_BARCODE VARCHAR(13),
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_OPR_ID TYPE OF DOM_KEY,
    R_OPR_TIP TYPE OF DOM_SMAL_INT,
    R_OPR_NAME TYPE OF DOM_CHAR_50,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_KOL_IN TYPE OF DOM_KOL,
    R_KOL_OUT TYPE OF DOM_KOL,
    R_KOL_SALDO TYPE OF DOM_KOL,
    R_SUMA_IN_FR TYPE OF DOM_KOL,
    R_SUMA_OUT_FR TYPE OF DOM_KOL,
    R_SUMA_SALDO_FR TYPE OF DOM_KOL,
    R_SUMA_IN_SR TYPE OF DOM_KOL,
    R_SUMA_OUT_SR TYPE OF DOM_KOL,
    R_SUMA_SALDO_SR TYPE OF DOM_KOL,
    R_SKLAD_NAME TYPE OF DOM_CHAR_20,
    R_ED_CENA_IN_FR TYPE OF DOM_CENA,
    R_ED_CENA_IN_SR TYPE OF DOM_CENA,
    R_ED_CENA_OUT_FR TYPE OF DOM_CENA,
    R_ED_CENA_OUT_SR TYPE OF DOM_CENA,
    R_ED_CENA_SALDO_FR TYPE OF DOM_CENA,
    R_ED_CENA_SALDO_SR TYPE OF DOM_CENA,
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_KLI_ID TYPE OF DOM_KEY,
    R_PN_SUMA_FR TYPE OF DOM_KOL,
    R_PN_SUMA_SR TYPE OF DOM_KOL,
    R_PN_KOL TYPE OF DOM_KOL,
    R_PN_SALDO_SUMA_FR TYPE OF DOM_KOL,
    R_PN_SALDO_SUMA_SR TYPE OF DOM_SUMA,
    R_PN_SALDO_KOL TYPE OF DOM_KOL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_HISTORY_OBOB (
    P_SKLAD_ID TYPE OF DOM_KEY,
    P_FROM_DATE TYPE OF DOM_CHAR_10,
    P_TO_DATE TYPE OF DOM_CHAR_10,
    P_SIMPLE_ID TYPE OF DOM_KEY)
RETURNS (
    R_SIMPLE_CODE TYPE OF DOM_CHAR_50,
    R_BARCODE VARCHAR(13),
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_SUMANACH_FR TYPE OF DOM_SUMA,
    R_SUMA_SALDO_FR TYPE OF DOM_SUMA,
    R_SUMA_SALDO_SR TYPE OF DOM_SUMA,
    R_SUMANACH_SR TYPE OF DOM_SUMA,
    R_KOLNACH TYPE OF DOM_KOL,
    R_KOL_OB TYPE OF DOM_KOL,
    R_SUMA_FR_OB TYPE OF DOM_SUMA,
    R_SUMA_SR_OB TYPE OF DOM_SUMA,
    R_KOL_SALDO TYPE OF DOM_KOL,
    R_KOL_IN_OB TYPE OF DOM_KOL,
    R_KOL_OUT_OB TYPE OF DOM_KOL,
    R_SUMAIN_FR_OB TYPE OF DOM_SUMA,
    R_SUMA_OUT_FR_OB TYPE OF DOM_SUMA,
    R_SUMA_IN_SR_OB TYPE OF DOM_SUMA,
    R_SUMA_OUT_SR_OB TYPE OF DOM_SUMA,
    R_ED_CENA_IN_SR TYPE OF DOM_CENA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_IZP (
    P_SKLAD TYPE OF DOM_KEY,
    P_CL_ID TYPE OF DOM_KEY,
    P_TIP TYPE OF DOM_KEY)
RETURNS (
    KOL_NAL TYPE OF DOM_KOL,
    CENA TYPE OF DOM_CENA,
    CENA_SR TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    ME_ID TYPE OF DOM_SMAL_INT,
    RSN TYPE OF DOM_BOOLEAN,
    SIM_GROUP_ID TYPE OF DOM_KEY,
    RAZ_TIP_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    ME_KOEF TYPE OF DOM_INT,
    GR_NAME TYPE OF DOM_CHAR_50,
    KOL_NAL2 TYPE OF DOM_KOL,
    CODE2 TYPE OF DOM_CHAR_50,
    KOL_RZV TYPE OF DOM_KOL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_KLI_CENI (
    P_SKLAD INTEGER,
    P_KLIENT INTEGER,
    P_DATE DATE,
    P_TIME TIME,
    P_SIMPLE_ID INTEGER,
    P_CENA_CURRENT DOUBLE PRECISION)
RETURNS (
    R_LINE VARCHAR(10000))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_KONS (
    P_SKLAD TYPE OF DOM_KEY,
    P_TIP_PROD TYPE OF DOM_KEY,
    P_KLIENT TYPE OF DOM_KEY)
RETURNS (
    KOL_NAL TYPE OF DOM_KOL,
    CENA_SR TYPE OF DOM_CENA,
    LAST_CENA TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    CODE2 TYPE OF DOM_CHAR_50,
    USLUGA TYPE OF DOM_BOOLEAN,
    ME_ID TYPE OF DOM_SMAL_INT,
    DEF_SEL_ID TYPE OF DOM_KEY,
    LOCK_CENA_PROD TYPE OF DOM_BOOLEAN,
    D_D_S NUMERIC(4,2),
    RSN TYPE OF DOM_BOOLEAN,
    RAZ_TIP_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    ME_KOEF TYPE OF DOM_INT,
    GR_NAME TYPE OF DOM_CHAR_50,
    ME2_ID TYPE OF DOM_SMAL_INT,
    ME2 CHAR(2),
    KOL_NAL2 TYPE OF DOM_KOL,
    KOL_RZV TYPE OF DOM_KOL,
    DEF_RAZ_EL TYPE OF DOM_INT,
    KOL_RAZ_EL TYPE OF DOM_KOL,
    NAME_RAZ_EL TYPE OF DOM_CHAR_30,
    KOL_FKT TYPE OF DOM_KOL,
    KOEF_ET TYPE OF DOM_INT,
    KOEF_ET2 TYPE OF DOM_INT,
    IS_BROI TYPE OF DOM_SMAL_INT,
    IS_BROI2 TYPE OF DOM_SMAL_INT,
    IN_EL_ID TYPE OF DOM_KEY,
    CENA TYPE OF DOM_CENA,
    NEW_PARAM INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_MOVE (
    P_SKLAD TYPE OF DOM_KEY,
    P_CL_ID TYPE OF DOM_KEY,
    P_TIP TYPE OF DOM_KEY)
RETURNS (
    ME2_ID TYPE OF DOM_KEY,
    ME2 CHAR(2),
    KOL_NAL TYPE OF DOM_KOL,
    CENA TYPE OF DOM_CENA,
    CENA_SR TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    ME_ID TYPE OF DOM_SMAL_INT,
    D_D_S NUMERIC(4,2),
    RSN TYPE OF DOM_BOOLEAN,
    SIM_GROUP_ID TYPE OF DOM_KEY,
    RAZ_TIP_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    ME_KOEF TYPE OF DOM_INT,
    GR_NAME TYPE OF DOM_CHAR_50,
    KOL_NAL2 TYPE OF DOM_KOL,
    CODE2 TYPE OF DOM_CHAR_50,
    KOL_RZV TYPE OF DOM_KOL,
    DEF_RAZ_EL TYPE OF DOM_KEY,
    KOL_RAZ_EL TYPE OF DOM_KOL,
    NAME_RAZ_EL TYPE OF DOM_CHAR_30)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_MOVEMENT (
    P_FROM_DATE TYPE OF DOM_DATE,
    P_TO_DATE TYPE OF DOM_DATE,
    P_DOST_FILTER TYPE OF DOM_INT)
RETURNS (
    R_KLI_ID TYPE OF DOM_INT,
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_SUMA_PROD TYPE OF DOM_SUMA,
    R_KOL_PROD TYPE OF DOM_KOL,
    R_SUMA_FR_PROD TYPE OF DOM_SUMA,
    R_KOL_IZP TYPE OF DOM_KOL,
    R_SUMA_PAY TYPE OF DOM_SUMA,
    R_SUMA_PAY_OLD TYPE OF DOM_SUMA,
    R_SUMA_DUE TYPE OF DOM_SUMA,
    R_SIMPLE_ID TYPE OF DOM_INT,
    R_KOL_PAY_OLD TYPE OF DOM_KOL,
    R_SUMA_PAY_OLD_FR TYPE OF DOM_SUMA,
    R_SUMA_IZP_FR TYPE OF DOM_SUMA,
    R_SIMPLE_NAME_PAY TYPE OF DOM_CHAR_100,
    R_SIMPLE_NAME_IZP TYPE OF DOM_CHAR_100,
    R_SORT_INDX TYPE OF DOM_INT,
    R_UNPAYED_KOL TYPE OF DOM_KOL,
    R_UNPAYED_SUMA TYPE OF DOM_SUMA,
    R_UNPAYED_SUMA_FR TYPE OF DOM_SUMA,
    R_UNPAYED_NAME TYPE OF DOM_CHAR_100,
    R_SIMPLE_TOTAL_SUMA TYPE OF DOM_SUMA,
    R_SIMPLE_TOTAL_KOL TYPE OF DOM_KOL,
    R_SIMPLE_TOTAL_SUMA_FR TYPE OF DOM_SUMA,
    R_DOST_NAME TYPE OF DOM_CHAR_100)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_NAL_BY_DATE (
    P_OPR_DATE TYPE OF DOM_DATE,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY)
RETURNS (
    R_KOL_NAL TYPE OF DOM_KOL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_OT_CL (
    P_OPR_ID INTEGER,
    P_FAKT INTEGER)
RETURNS (
    R_OT_OPR_ID INTEGER,
    R_SIMPLE_ID INTEGER,
    R_TIP SMALLINT,
    R_PROCENT DOUBLE PRECISION,
    R_CENA DOUBLE PRECISION,
    R_OT_CENA DOUBLE PRECISION,
    R_OT_PROCENT DOUBLE PRECISION,
    R_SIMPLE_CODE TYPE OF DOM_CHAR_50,
    R_SIMPLE_NAME VARCHAR(100),
    R_TIP_OT_CENA INTEGER,
    R_DOSTAVNA DOUBLE PRECISION,
    R_CL_NAME VARCHAR(30),
    R_CENA_PROD DOUBLE PRECISION,
    R_SELEKCIQ_NAME VARCHAR(50),
    R_ID_CL_EL INTEGER,
    R_CENA_EDRO DOUBLE PRECISION,
    R_CENA_SR DOUBLE PRECISION,
    R_ROUND_TIP_ID INTEGER,
    R_ROUND_TIP_NAME VARCHAR(20),
    R_FLAG_LOCK TYPE OF DOM_FLAG,
    R_CENA_OS TYPE OF DOM_CENA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_PRICE_LIST_PROMO (
    P_SIMPLE_ID TYPE OF DOM_INT,
    P_KLIENT_ID TYPE OF DOM_INT,
    P_SKLAD_ID TYPE OF DOM_INT)
RETURNS (
    R_CL_IS_PROMOTIONAL TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_PROD (
    P_USER_ID TYPE OF DOM_KEY,
    P_SKLAD TYPE OF DOM_KEY,
    P_TIP_PROD TYPE OF DOM_SMAL_INT,
    P_KLIENT TYPE OF DOM_KEY,
    P_SKLADOVE TYPE OF DOM_CHAR_300,
    P_NUM_TR TYPE OF DOM_KEY,
    P_FLAG_SHOW_IZL TYPE OF DOM_FLAG = 0)
RETURNS (
    KOL_NAL TYPE OF DOM_KOL,
    CENA_SR TYPE OF DOM_CENA,
    LAST_CENA TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    USLUGA TYPE OF DOM_BOOLEAN,
    ME_ID TYPE OF DOM_SMAL_INT,
    DEF_SEL_ID TYPE OF DOM_KEY,
    LOCK_CENA_PROD TYPE OF DOM_BOOLEAN,
    D_D_S NUMERIC(4,2),
    RSN TYPE OF DOM_BOOLEAN,
    RAZ_TIP_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    ME_KOEF TYPE OF DOM_INT,
    GR_NAME TYPE OF DOM_CHAR_50,
    ME2_ID TYPE OF DOM_SMAL_INT,
    ME2 CHAR(2),
    KOL_NAL2 TYPE OF DOM_KOL,
    KOL_RZV TYPE OF DOM_KOL,
    DEF_RAZ_EL TYPE OF DOM_INT,
    KOL_RAZ_EL TYPE OF DOM_KOL,
    NAME_RAZ_EL TYPE OF DOM_CHAR_30,
    KOL_FKT TYPE OF DOM_KOL,
    KOEF_ET TYPE OF DOM_INT,
    KOEF_ET2 TYPE OF DOM_INT,
    IS_BROI TYPE OF DOM_SMAL_INT,
    IS_BROI2 TYPE OF DOM_SMAL_INT,
    IN_EL_ID TYPE OF DOM_KEY,
    CENA TYPE OF DOM_CENA,
    R_SKLAD_ID TYPE OF DOM_KEY,
    R_SKLAD_NAME TYPE OF DOM_CHAR_50,
    R_SKLAD_OTR_FLAG TYPE OF DOM_INT,
    R_ACTIVE_FAK TYPE OF DOM_CHAR_10,
    R_CODE2 TYPE OF DOM_CHAR_50,
    R_ADRESIRANE TYPE OF DOM_CHAR_50,
    R_FLAG_VAUCHER TYPE OF DOM_SMAL_INT,
    R_COEFF_ME TYPE OF DOM_PERCENT,
    R_SIMPLE_RAZPAD TYPE OF DOM_SMAL_INT,
    R_VAT_GROUP INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_PROP (
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_PROP_NAME VARCHAR(1000))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SIMPLE_SUB_GROUPS (
    P_GROUPS VARCHAR(255),
    P_PARENT_ID INTEGER)
RETURNS (
    R_GROUPS VARCHAR(255))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SINGLE_LAST_PRICE (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_FKT TYPE OF DOM_SMAL_INT)
RETURNS (
    R_PRICE TYPE OF DOM_CENA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SKLAD_ID_S (
    P_OPR_ID INTEGER)
RETURNS (
    R_SKLAD_ID_S VARCHAR(1000))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SMR_PROTOCOL (
    P_BRZN_CENI TYPE OF DOM_INT)
RETURNS (
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_ME_NAME TYPE OF DOM_CHAR_15,
    R_KOL TYPE OF DOM_KOL,
    R_CENA TYPE OF DOM_CENA,
    R_SUMA TYPE OF DOM_SUMA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPEDITION
RETURNS (
    R_KLI_ID INTEGER,
    R_FIRMA_MOL VARCHAR(30),
    R_KLI_NAME VARCHAR(100),
    R_KLI_ADDRES VARCHAR(50),
    R_KLI_PLACE VARCHAR(30),
    R_FIRMA_NAME VARCHAR(50),
    R_FIRMA_PLACE VARCHAR(30),
    R_FIRMA_ADDRES VARCHAR(50),
    R_FIRMA_ID_NOM VARCHAR(13),
    R_FIRMA_ID_NOM_DDS VARCHAR(15),
    R_KLI_TEL VARCHAR(30),
    R_CODE VARCHAR(15),
    R_KLI_AGENT VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_DOST (
    P_OPR_TIP SMALLINT,
    P_FILTER VARCHAR(100),
    P_FLAG_ANNUL INTEGER,
    P_CENOVA_LISTA INTEGER,
    P_TIP INTEGER,
    P_FILTER_COLUMNS TYPE OF DOM_INT)
RETURNS (
    R_ID INTEGER,
    R_IN_ID INTEGER,
    R_OPR_DATE DATE,
    R_KLI_ID INTEGER,
    R_SUMA DOUBLE PRECISION,
    R_USER_ID SMALLINT,
    R_SKLAD_ID SMALLINT,
    R_PAY_TIP SMALLINT,
    R_PAY_TIP_1 VARCHAR(12),
    R_KLI VARCHAR(100),
    R_USERNAME VARCHAR(30),
    R_SKLAD TYPE OF DOM_CHAR_50,
    R_ANUL_FLAG SMALLINT,
    R_SUMA_OSTATAK DOUBLE PRECISION,
    R_TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_DATETIME TIMESTAMP,
    NOM_GAR VARCHAR(30),
    R_KLI_CODE VARCHAR(15),
    R_IS_LOCK INTEGER,
    R_OPR_TIP INTEGER,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    R_IS_FAK SMALLINT,
    R_SUMA_PROD DOUBLE PRECISION,
    R_SUMA_DDS TYPE OF DOM_SUMA,
    R_HAS_DOCUMENT TYPE OF DOM_INT,
    R_FAK_NUMBER TYPE OF DOM_CHAR_300,
    R_NAME_FAK TYPE OF DOM_CHAR_2000,
    R_BULSTAT TYPE OF DOM_CHAR_300,
    R_IDNOMDDS TYPE OF DOM_CHAR_300)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_INV (
    P_ID INTEGER,
    P_CL INTEGER)
RETURNS (
    OPR_ID INTEGER,
    ID INTEGER,
    SUMA_IZLISHAK DOUBLE PRECISION,
    SUMA_LIPSA DOUBLE PRECISION,
    IN_DATETIME DATE,
    OPR_DATETIME TIMESTAMP,
    NAME VARCHAR(20),
    SKLAD_ID SMALLINT,
    USER_NAME VARCHAR(30),
    ANULIRANA INTEGER,
    COMMENT_TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_INV_EL (
    P_ID TYPE OF DOM_KEY,
    P_CL TYPE OF DOM_KEY)
RETURNS (
    CODE TYPE OF DOM_CHAR_50,
    NAME TYPE OF DOM_CHAR_100,
    ME CHAR(2),
    CENA TYPE OF DOM_CENA,
    KOL_LIPSA TYPE OF DOM_KOL,
    SUMA_LIPSA TYPE OF DOM_SUMA,
    KOL_IZLISHAK TYPE OF DOM_KOL,
    SUMA_IZLISHAK TYPE OF DOM_SUMA,
    BAR_CODE VARCHAR(13),
    ME2 CHAR(2),
    KOL2_LIPSA TYPE OF DOM_KOL,
    ME_LONG TYPE OF DOM_CHAR_15,
    KOL2_IZLISHAK TYPE OF DOM_KOL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_IZP_OPR (
    P_FILTER VARCHAR(1000),
    P_TIP INTEGER)
RETURNS (
    IZP_ID INTEGER,
    ID INTEGER,
    OPR_DATE DATE,
    USER_ID INTEGER,
    SUMA DOUBLE PRECISION,
    USERNAME VARCHAR(30),
    OT_SKLAD VARCHAR(20),
    KLINAME VARCHAR(100),
    KLI_ID INTEGER,
    IZPNAME VARCHAR(30),
    SUMA_SR DOUBLE PRECISION,
    SUMA_FR DOUBLE PRECISION,
    DATETIME TIMESTAMP,
    TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    OBEKT_NAME VARCHAR(20),
    R_IS_LOCK INTEGER,
    R_OPR_TIP INTEGER,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    FKT_OPR_ID INTEGER,
    R_SUMA_CL DOUBLE PRECISION,
    R_ANUL_TIP TYPE OF DOM_KEY_SMALL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_IZP_SIM (
    P_TIP TYPE OF DOM_SMAL_INT,
    OPR_ID TYPE OF DOM_KEY)
RETURNS (
    CODE TYPE OF DOM_CHAR_50,
    NAME TYPE OF DOM_CHAR_100,
    SIMPLE_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    KOL TYPE OF DOM_KOL,
    CENA TYPE OF DOM_CENA,
    SUMA TYPE OF DOM_SUMA,
    SUMA_SR TYPE OF DOM_SUMA,
    SUMA_FR TYPE OF DOM_SUMA,
    GR_NAME TYPE OF DOM_CHAR_50,
    CODE2 TYPE OF DOM_CHAR_50,
    R_CENA_CL TYPE OF DOM_CENA,
    R_SUMA_CL TYPE OF DOM_SUMA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_KONS_OPR (
    P_FILTER VARCHAR(1000))
RETURNS (
    ID INTEGER,
    OPR_DATE DATE,
    USER_ID SMALLINT,
    KONS_ID INTEGER,
    SUMA_FR DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    SUMA_SR DOUBLE PRECISION,
    USERNAME VARCHAR(30),
    OT_SKLAD TYPE OF DOM_CHAR_50,
    W_SKLAD TYPE OF DOM_CHAR_50,
    TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DATETIME TIMESTAMP,
    R_IS_LOCK INTEGER,
    R_OPR_TIP INTEGER,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_MOVE_OPR (
    TIP INTEGER,
    P_FILTER VARCHAR(3000),
    P_CL_ID INTEGER)
RETURNS (
    ID INTEGER,
    OPR_DATE DATE,
    USER_ID SMALLINT,
    MOVE_ID INTEGER,
    SUMA_FR DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    SUMA_SR DOUBLE PRECISION,
    USERNAME VARCHAR(30),
    OT_SKLAD TYPE OF DOM_CHAR_50,
    W_SKLAD TYPE OF DOM_CHAR_50,
    TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DATETIME TIMESTAMP,
    R_IS_LOCK INTEGER,
    R_OPR_TIP INTEGER,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    R_STATUS_EDIT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_MOVE_SIM (
    TIP TYPE OF DOM_INT,
    OPR_ID TYPE OF DOM_KEY,
    P_CL_ID TYPE OF DOM_KEY)
RETURNS (
    CODE TYPE OF DOM_CHAR_50,
    NAME TYPE OF DOM_CHAR_100,
    ME1 CHAR(2),
    ME2 CHAR(2),
    SIMPLE_ID TYPE OF DOM_KEY,
    KOL TYPE OF DOM_KOL,
    SUMA_SR TYPE OF DOM_SUMA,
    SUMA_FR TYPE OF DOM_SUMA,
    GR_NAME TYPE OF DOM_CHAR_50,
    KOL2 TYPE OF DOM_KOL,
    CODE2 TYPE OF DOM_CHAR_50,
    CENA TYPE OF DOM_CENA,
    SUMA_MOVE TYPE OF DOM_SUMA,
    ME1_ID TYPE OF DOM_KEY,
    ME2_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_PRIHOD (
    P_FILTER_PARI_IO VARCHAR(1000),
    P_FROM_DATE VARCHAR(1000),
    TO_DATE VARCHAR(1000),
    P_FILTER_KLI VARCHAR(1000),
    P_FILTER_OBEKTI VARCHAR(1000),
    P_VALUTA SMALLINT,
    FLAG_CRYPT INTEGER,
    PASS VARCHAR(25))
RETURNS (
    PRIH_RAZH_ID INTEGER,
    PRIH_RAZH_NAME VARCHAR(30),
    R_SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_PROD (
    P_OPR_TIP SMALLINT,
    P_GET_RET_STOKA SMALLINT,
    P_FILTER VARCHAR(1000),
    P_FLAG_ANNUL INTEGER,
    P_SUMA_TIP SMALLINT,
    P_SEL_SIMPLE_ID INTEGER,
    P_SEL_KLI_ID INTEGER,
    P_FLAG_FILTER_KLI_NULL SMALLINT,
    P_COLUMN_SKLAD TYPE OF DOM_SMAL_INT)
RETURNS (
    R_ID INTEGER,
    R_OUT_ID INTEGER,
    R_DATETIME DATE,
    R_KLI_ID INTEGER,
    R_SUMA DOUBLE PRECISION,
    R_USER_ID SMALLINT,
    R_SKLAD_ID SMALLINT,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_SUMA_CL DOUBLE PRECISION,
    R_FP SMALLINT,
    R_PAY_TIP_2 SMALLINT,
    R_KLI VARCHAR(100),
    R_USERNAME VARCHAR(30),
    R_SKLAD VARCHAR(20),
    R_SUMA_RAZLIKA DOUBLE PRECISION,
    R_NADCENKA DOUBLE PRECISION,
    R_NUMBER VARCHAR(10),
    R_IS_FAKTURA SMALLINT,
    R_FROM_POCKET CHAR(1),
    R_DIST_SUMA DOUBLE PRECISION,
    R_DIST_PAY SMALLINT,
    R_SUMA_OSTATAK DOUBLE PRECISION,
    R_FAK_TOTAL DOUBLE PRECISION,
    R_SYSDATE TIMESTAMP,
    R_SUMA_RAZLIKA_FR DOUBLE PRECISION,
    R_NADCENKA_FR DOUBLE PRECISION,
    R_STATUS SMALLINT,
    R_OTKL_CL SMALLINT,
    R_SUMA_OS DOUBLE PRECISION,
    R_PROC_OTS_CL DOUBLE PRECISION,
    R_PROC_OTS_OS DOUBLE PRECISION,
    R_RAZLIKA_CL DOUBLE PRECISION,
    R_RAZLIKA_OS DOUBLE PRECISION,
    R_DIST_NAME VARCHAR(500),
    R_KLI_CODE VARCHAR(15),
    R_OBEKT_ID SMALLINT,
    R_IS_LOCK SMALLINT,
    R_OPT_TIP INTEGER,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    R_TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_REQUIRE_FAKT INTEGER,
    R_KLI_AGENT_ID SMALLINT,
    R_KLI_AGENT VARCHAR(50),
    R_SUMA_BEZ_DDS DOUBLE PRECISION,
    R_SUMA_DDS DOUBLE PRECISION,
    R_FAK_DATE DATE,
    R_FLAG_UNCOLLECT SMALLINT,
    R_SUMA_OS_NETO TYPE OF DOM_SUMA,
    R_SUMA_CL_NETO TYPE OF DOM_SUMA,
    R_PAY_TIP_NAME TYPE OF DOM_CHAR_50,
    R_POR_NUM TYPE OF DOM_CHAR_30,
    R_TS_SMETKA_ID INTEGER,
    R_FAK_OPR_ID TYPE OF DOM_KEY,
    R_PERCENT_DIST TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_PROD_1 (
    P_OPR_TIP SMALLINT,
    P_GET_RET_STOKA SMALLINT,
    P_FILTER VARCHAR(1000),
    P_FLAG_ANNUL INTEGER,
    P_SUMA_TIP SMALLINT,
    P_SEL_SIMPLE_ID INTEGER,
    P_SEL_KLI_ID INTEGER,
    P_FLAG_FILTER_KLI_NULL SMALLINT,
    P_COLUMN_SKLAD TYPE OF DOM_SMAL_INT)
RETURNS (
    R_ID INTEGER,
    R_OUT_ID INTEGER,
    R_DATETIME DATE,
    R_KLI_ID INTEGER,
    R_SUMA DOUBLE PRECISION,
    R_USER_ID SMALLINT,
    R_SKLAD_ID SMALLINT,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_SUMA_CL DOUBLE PRECISION,
    R_FP SMALLINT,
    R_PAY_TIP_2 SMALLINT,
    R_KLI VARCHAR(100),
    R_USERNAME VARCHAR(30),
    R_SKLAD VARCHAR(20),
    R_SUMA_RAZLIKA DOUBLE PRECISION,
    R_NADCENKA DOUBLE PRECISION,
    R_NUMBER VARCHAR(10),
    R_IS_FAKTURA SMALLINT,
    R_FROM_POCKET CHAR(1),
    R_DIST_SUMA DOUBLE PRECISION,
    R_DIST_PAY SMALLINT,
    R_SUMA_OSTATAK DOUBLE PRECISION,
    R_FAK_TOTAL DOUBLE PRECISION,
    R_SYSDATE TIMESTAMP,
    R_SUMA_RAZLIKA_FR DOUBLE PRECISION,
    R_NADCENKA_FR DOUBLE PRECISION,
    R_STATUS SMALLINT,
    R_OTKL_CL SMALLINT,
    R_SUMA_OS DOUBLE PRECISION,
    R_PROC_OTS_CL DOUBLE PRECISION,
    R_PROC_OTS_OS DOUBLE PRECISION,
    R_RAZLIKA_CL DOUBLE PRECISION,
    R_RAZLIKA_OS DOUBLE PRECISION,
    R_DIST_NAME VARCHAR(500),
    R_KLI_CODE VARCHAR(15),
    R_OBEKT_ID SMALLINT,
    R_IS_LOCK SMALLINT,
    R_OPT_TIP INTEGER,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    R_TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_REQUIRE_FAKT INTEGER,
    R_KLI_AGENT_ID SMALLINT,
    R_KLI_AGENT VARCHAR(50),
    R_SUMA_BEZ_DDS DOUBLE PRECISION,
    R_SUMA_DDS DOUBLE PRECISION,
    R_FAK_DATE DATE,
    R_FLAG_UNCOLLECT SMALLINT,
    R_SUMA_OS_NETO TYPE OF DOM_SUMA,
    R_SUMA_CL_NETO TYPE OF DOM_SUMA,
    R_PAY_TIP_NAME TYPE OF DOM_CHAR_50,
    R_POR_NUM TYPE OF DOM_CHAR_30,
    R_TS_SMETKA_ID INTEGER,
    R_FAK_OPR_ID TYPE OF DOM_KEY,
    R_PERCENT_DIST TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_PROD2_KLI (
    SIMPLE_ID INTEGER,
    P_FILTER VARCHAR(1000))
RETURNS (
    R_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_KOL_V DOUBLE PRECISION,
    R_SUMA_SR_V DOUBLE PRECISION,
    R_KLI_NAME VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_PROD2_SKLAD (
    SIMPLE_ID INTEGER,
    P_FILTER VARCHAR(1000),
    P_FAKT INTEGER,
    P_FILTER_SKLAD VARCHAR(1000),
    P_FILTER_RET_STOKA VARCHAR(1000))
RETURNS (
    R_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_NAME VARCHAR(50),
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_KOL_V DOUBLE PRECISION,
    R_SUMA_SR_V DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_PRODUCTION (
    P_FLAG_FKT TYPE OF DOM_SMAL_INT)
RETURNS (
    R_ID INTEGER,
    R_USERNAME VARCHAR(30),
    R_SKLAD_IN TYPE OF DOM_CHAR_50,
    R_SKLAD_OUT TYPE OF DOM_CHAR_50,
    R_OPR_DATE DATE,
    R_SUMA_FR DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_OPR_OUT_ID INTEGER,
    R_OPR_IN_ID INTEGER,
    R_DATETIME TIMESTAMP,
    R_SKLAD_IN_ID SMALLINT,
    R_SKLAD_OUT_ID SMALLINT,
    R_IS_LOCK SMALLINT,
    R_OPR_TIP SMALLINT,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    R_USER_ID INTEGER,
    R_CAR_NUM TYPE OF DOM_CHAR_10,
    R_CAR_MARKA TYPE OF DOM_CHAR_20,
    R_CAR_DRIVER TYPE OF DOM_CHAR_30)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_RAZHOD (
    P_FILTER_PARI_IO VARCHAR(1000),
    P_FROM_DATE VARCHAR(1000),
    TO_DATE VARCHAR(1000),
    P_FILTER_KLI VARCHAR(1000),
    P_FILTER_OBEKTI VARCHAR(1000),
    P_VALUTA SMALLINT,
    FLAG_CRYPT INTEGER,
    PASS VARCHAR(25),
    P_FILTER_IZP VARCHAR(1000),
    P_BASE_VALUTA INTEGER,
    P_TIP_SPR INTEGER,
    P_DDS DOUBLE PRECISION)
RETURNS (
    PRIH_RAZH_ID INTEGER,
    PRIH_RAZH_NAME VARCHAR(50),
    R_SUMA DOUBLE PRECISION,
    R_TIP INTEGER,
    R_VALUTA CHAR(3),
    R_SUMA_DDS DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_SALE (
    P_FROM_DATE TYPE OF DOM_DATE,
    P_TO_DATE TYPE OF DOM_DATE,
    P_FILTER TYPE OF DOM_INT64,
    P_OBEKT_ID TYPE OF DOM_KEY,
    P_PC_IDS TYPE OF DOM_CHAR_1000)
RETURNS (
    R_OPR_ID TYPE OF DOM_KEY,
    R_SUMA TYPE OF DOM_SUMA,
    R_DATE_TIME TYPE OF DOM_DATE_TIME,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_KLI_ID TYPE OF DOM_KEY,
    R_SKLAD_ID TYPE OF DOM_KEY,
    R_OUT_ID TYPE OF DOM_KEY,
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_SKLAD_NAME TYPE OF DOM_CHAR_50,
    R_USER_ID TYPE OF DOM_KEY,
    R_USER_NAME TYPE OF DOM_CHAR_30,
    R_PAY_TYPE TYPE OF DOM_FLAG,
    R_OPR_TIP TYPE OF DOM_SMAL_INT,
    R_TEXT TYPE OF DOM_CHAR_1000,
    R_FIRMA_ID TYPE OF DOM_KEY,
    R_FIRMA_NAME TYPE OF DOM_CHAR_100,
    R_OBEKT_ID TYPE OF DOM_KEY,
    R_OBEKT_NAME TYPE OF DOM_CHAR_50,
    R_DIST_NAME TYPE OF DOM_CHAR_1000,
    R_DIST_SUMA TYPE OF DOM_SUMA,
    R_INVOICE_NUMBER TYPE OF DOM_CHAR_10,
    R_INVOICE_TOTAL TYPE OF DOM_SUMA,
    R_INVOICE_DATE TYPE OF DOM_DATE,
    R_INVOICE_OPR_ID TYPE OF DOM_KEY,
    R_DIST_PAY TYPE OF DOM_SMAL_INT,
    R_IS_LOCK TYPE OF DOM_SMAL_INT,
    R_FP TYPE OF DOM_SMAL_INT,
    R_OTC_ID TYPE OF DOM_KEY,
    R_STATUS TYPE OF DOM_SMAL_INT,
    R_OWNER_ID TYPE OF DOM_KEY_SMALL,
    R_OWNER_NAME TYPE OF DOM_CHAR_50,
    R_TD_NUM TYPE OF DOM_INT,
    R_NET_AMOUNT TYPE OF DOM_SUMA,
    R_SUMA_SR TYPE OF DOM_SUMA,
    R_SUMA_FR TYPE OF DOM_SUMA,
    R_SUMA_RAZLIKA_SR TYPE OF DOM_SUMA,
    R_NADCENKA_SR TYPE OF CURRENCY,
    R_SUMA_RAZLIKA_FR TYPE OF DOM_SUMA,
    R_NADCENKA_FR TYPE OF CURRENCY,
    R_PAY_TYPE_NAME TYPE OF DOM_CHAR_300,
    R_USER_CREATE_POR_PRODUCTION TYPE OF DOM_CHAR_30)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_SIMPLE_KLI (
    P_SEL_ID INTEGER,
    P_FILTER VARCHAR(1000),
    P_SIMPLES VARCHAR(10000),
    P_FLAG_SHOW_ALL SMALLINT,
    P_OBEKT_ID SMALLINT)
RETURNS (
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL DOUBLE PRECISION,
    R_KLI_ID INTEGER,
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_GROUP VARCHAR(100),
    R_SIMPLE_SEL_ID INTEGER,
    R_SKLAD_ID INTEGER,
    R_SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_SIMPLE_KLI_RAZ (
    P_SEL_ID TYPE OF DOM_KEY,
    P_FILTER VARCHAR(1000),
    P_SIMPLES VARCHAR(10000),
    P_FLAG_SHOW_ALL TYPE OF DOM_FLAG,
    P_OBEKT_ID TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_KOL TYPE OF DOM_KOL,
    R_KLI_ID TYPE OF DOM_KEY,
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_SIMPLE_GROUP TYPE OF DOM_CHAR_100,
    R_SIMPLE_SEL_ID TYPE OF DOM_KEY,
    R_SUMA TYPE OF DOM_SUMA,
    R_SKLAD_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SPR_SROK (
    P_FILTER VARCHAR(1000),
    P_DAYS INTEGER)
RETURNS (
    R_SIMPLE_NAME VARCHAR(100),
    R_SKLAD_NAME VARCHAR(20),
    R_KOL_NAL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_ED_CENA DOUBLE PRECISION,
    R_SROK DATE,
    SN VARCHAR(30),
    R_CODE VARCHAR(15),
    R_CODE2 VARCHAR(15),
    DAYS_LEFT INTEGER,
    R_SIMPLE_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SR_CENA (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_SKLAD_ID_S VARCHAR(1000))
RETURNS (
    CENA_SR DOUBLE PRECISION,
    R_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SR_FR_LR (
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_SR DOUBLE PRECISION,
    R_FR DOUBLE PRECISION,
    R_LR DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_STATUS_ZD (
    P_OPR_ID INTEGER)
RETURNS (
    R_TIP INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SUMA_IZL (
    P_OPR_ID INTEGER)
RETURNS (
    R_KOL_IZL DOUBLE PRECISION,
    R_SUMA_IZL DOUBLE PRECISION,
    R_OPR_ID INTEGER,
    R_OUT_EL_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SUMA_KLI_DATE (
    P_KLI_ID INTEGER,
    P_PERIOD SMALLINT,
    P_NUMBER_WMY SMALLINT,
    P_WMY SMALLINT,
    P_SUMA DOUBLE PRECISION)
RETURNS (
    SUMA DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SUMA_SR (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID SMALLINT,
    P_KOL DOUBLE PRECISION)
RETURNS (
    R_SUMA_SR DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SUMI_PROD (
    OPR_ID INTEGER,
    P_TIP INTEGER)
RETURNS (
    R_SUMA_CL DOUBLE PRECISION,
    R_SUMA_OS DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_SUMA_BEZ_DDS DOUBLE PRECISION,
    R_SUMA_OS_NETO TYPE OF DOM_SUMA,
    R_SUMA_CL_NETO TYPE OF DOM_SUMA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SUMI_PROD_DDS (
    P_OPR_ID INTEGER)
RETURNS (
    R_SUMA_S_DDS DOUBLE PRECISION,
    R_SUMA_BEZ_DDS DOUBLE PRECISION,
    R_SUMA_DDS DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SUMI_S_DDS (
    P_TIP SMALLINT,
    P_OUT_EL_ID INTEGER)
RETURNS (
    R_SUMA DOUBLE PRECISION,
    R_SUMA_BEZ_DDS DOUBLE PRECISION,
    R_SUMA_OTS DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SUMI_ZARABOTKA (
    P_OPR_ID TYPE OF DOM_KEY,
    P_CL_ID TYPE OF DOM_INT)
RETURNS (
    R_SUMA_DUE TYPE OF DOM_SUMA,
    R_SUMA_PAY TYPE OF DOM_SUMA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_SUPTO_SIMPLE_HISTORY_OBOB (
    P_FROM_DATE TYPE OF DOM_CHAR_30,
    P_TO_DATE TYPE OF DOM_CHAR_30,
    P_FILTER_SIMPLES TYPE OF DOM_CHAR_300)
RETURNS (
    R_SIMPLE_CODE TYPE OF DOM_CHAR_50,
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_SUMA_SALDO_SR TYPE OF DOM_SUMA,
    R_SUMANACH_SR TYPE OF DOM_SUMA,
    R_KOLNACH TYPE OF DOM_KOL,
    R_KOL_OB TYPE OF DOM_KOL,
    R_SUMA_SR_OB TYPE OF DOM_SUMA,
    R_KOL_SALDO TYPE OF DOM_KOL,
    R_KOL_IN_OB TYPE OF DOM_KOL,
    R_KOL_OUT_OB TYPE OF DOM_KOL,
    R_SUMA_IN_SR_OB TYPE OF DOM_SUMA,
    R_SUMA_OUT_SR_OB TYPE OF DOM_SUMA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_USER_SKLAD_NAL (
    P_USER_ID INTEGER,
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_KOL_NAL DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ZAIAVKA_DOSTAVKA (
    P_FLAG_IZP INTEGER,
    P_DOSTAVCHICI INTEGER,
    P_FROM_DATE TYPE OF DOM_DATE,
    P_TO_DATE TYPE OF DOM_DATE)
RETURNS (
    TIP INTEGER,
    OPR_ID INTEGER,
    OPR_DATE DATE,
    DATETIME TIMESTAMP,
    SUMA DOUBLE PRECISION,
    USER_ID SMALLINT,
    USERNAME VARCHAR(30),
    COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    OPR_ID_OB INTEGER,
    R_IZPL VARCHAR(2000),
    R_TIP_ZD INTEGER,
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_OBOB INTEGER,
    R_DAYS_DOST INTEGER,
    R_TIP SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ZAJAVKA_ZA_DOST_EL (
    P_ID TYPE OF DOM_KEY,
    P_TYPE_SORT TYPE OF DOM_INT)
RETURNS (
    CODE TYPE OF DOM_CHAR_50,
    CODE2 TYPE OF DOM_CHAR_50,
    SIMPLE_NAME VARCHAR(100),
    CENA_LAST DOUBLE PRECISION,
    CENA_CL DOUBLE PRECISION,
    KOL_ZAIAVKA DOUBLE PRECISION,
    KOL_NAL DOUBLE PRECISION,
    KOL_RAZ DOUBLE PRECISION,
    RAZ_NAME VARCHAR(30),
    ME VARCHAR(2),
    SKLAD_NAME VARCHAR(20),
    KLI_NAME VARCHAR(100),
    SUMA_LAST_CENA DOUBLE PRECISION,
    SUMA_CL DOUBLE PRECISION,
    DAYS_DOST SMALLINT,
    R_SIMPLE_PROP VARCHAR(1000),
    R_RAZ_ELEMENT VARCHAR(30))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ZD_DOST_REPORT_EL (
    OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_SIMPLE_CENA TYPE OF DOM_CENA,
    R_SIMPLE_CENA_CL TYPE OF DOM_CENA,
    R_KOL TYPE OF DOM_KOL,
    SKLAD_NAME TYPE OF DOM_CHAR_100,
    RAZ_NAME TYPE OF DOM_CHAR_50,
    RAZ_KOL TYPE OF DOM_KOL,
    ME CHAR(2),
    CODE TYPE OF DOM_CHAR_50,
    CODE2 TYPE OF DOM_CHAR_50,
    R_KOL_ZAIAVKA TYPE OF DOM_KOL,
    R_KOL_IZP TYPE OF DOM_KOL,
    R_SIMP_PROP TYPE OF DOM_CHAR_1000,
    R_KLI_ID TYPE OF DOM_KEY,
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_KLI_ADDRESS TYPE OF DOM_CHAR_100,
    R_OBEKT_NAME TYPE OF DOM_CHAR_20,
    R_PLACE_NAME TYPE OF DOM_CHAR_30,
    R_DAYS_DOST TYPE OF DOM_INT,
    R_KLI_TEL TYPE OF DOM_CHAR_100,
    KOL_NAL TYPE OF DOM_KOL,
    KOL_RAZ TYPE OF DOM_KOL,
    RAZ_TIP_NAME TYPE OF DOM_CHAR_30)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ZD_PROPERTIES (
    P_ZD_ID INTEGER)
RETURNS (
    R_SIMPLE_PROP VARCHAR(1000))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE IMPORT_ELTRADE_DB (
    P_SERVER TYPE OF DOM_CHAR_100,
    P_DATABASE TYPE OF DOM_CHAR_100,
    P_PORT TYPE OF DOM_SMAL_INT,
    P_USER TYPE OF DOM_CHAR_100,
    P_PASSSWORD TYPE OF DOM_CHAR_10,
    P_CL_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE IMPORT_KLI_DOST (
    P_KLI_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE IMPORT_LAST_CENA (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID INTEGER,
    P_LAST_DOST_CENA DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INC_OTC_SUMI (
    P_SUMA DOUBLE PRECISION,
    P_SKLAD_ID INTEGER,
    P_USER_ID INTEGER,
    P_OTC_OPR_ID INTEGER,
    P_OPR_TYPE SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INC_PARI_OTC_EDIT (
    P_OPR_ID INTEGER,
    P_USER_EDIT INTEGER,
    P_IP INTEGER,
    P_SUMA DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INC_SUMA_KI_DOST (
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_SUMA TYPE OF DOM_SUMA)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INFO_SIMPLE (
    P_ID TYPE OF DOM_KEY)
RETURNS (
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    CODE2 TYPE OF DOM_CHAR_50,
    NAME_SHORT VARCHAR(12),
    ME_ID TYPE OF DOM_SMAL_INT,
    "ACTIVE" TYPE OF DOM_BOOLEAN,
    ACTIVE_FAK TYPE OF DOM_BOOLEAN,
    ACTIVE_SCALE TYPE OF DOM_FLAG,
    USLUGA TYPE OF DOM_BOOLEAN,
    FLAG_CHECK TYPE OF DOM_FLAG,
    RSN TYPE OF DOM_BOOLEAN,
    KOL_KRI_MIN TYPE OF DOM_KOL,
    KOL_KRI_MAX TYPE OF DOM_KOL,
    DD_S NUMERIC(4,2),
    DEFAULT_RAZ_ID TYPE OF DOM_SMAL_INT,
    ME_LONG TYPE OF DOM_CHAR_20,
    ME CHAR(2),
    RAZ TYPE OF DOM_CHAR_15,
    RAZ_TIP_ID TYPE OF DOM_KEY,
    GODNOST TYPE OF DOM_SMAL_INT,
    BRUTO TYPE OF DOM_CENA,
    DEF_SEL_ID TYPE OF DOM_KEY,
    SEL_NAME TYPE OF DOM_CHAR_50,
    BAR_CODE TYPE OF DOM_CHAR_15,
    NAL_KOL TYPE OF DOM_KOL,
    LAST_CENA TYPE OF DOM_CENA,
    DATE_LAST_CENA TYPE OF DOM_DATE_TIME,
    CENA_SR TYPE OF DOM_CENA,
    NAL_KOL_FAK TYPE OF DOM_KOL,
    ADRESIRANE TYPE OF DOM_CHAR_1000,
    EXT1 TYPE OF DOM_CHAR_300,
    R_TEMPERATURE TYPE OF DOM_CHAR_20)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE INIT_RDBS (
    P_SIMPLE_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INS_TASK_EL
RETURNS (
    L_TASK_ID INTEGER,
    L_TEMPLATE_ID INTEGER,
    L_EL_ID INTEGER,
    L_SIMPLE_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE INSERT_NEW_PARI_DIST (
    P_OPR_PROD_ID INTEGER,
    P_IP INTEGER,
    P_USER_ID INTEGER,
    P_KLI_ID INTEGER,
    P_SUMA DOUBLE PRECISION)
RETURNS (
    R_OPR_ID INTEGER,
    R_PARI_DIST_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE IS_NUMBER (
    STR VARCHAR(15))
RETURNS (
    NUM INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE IS_SUMA_CORRECT (
    P_OPR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE IS_USER_WORKED (
    P_USER_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE KIDOST_KUMFAK (
    P_OPR_ID INTEGER)
RETURNS (
    R_KUM_FAK VARCHAR(1024))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KLI_APPEND (
    NAME VARCHAR(100),
    KLIENT CHAR(1),
    DOSTAV CHAR(1),
    PROIZV CHAR(1),
    DIST CHAR(1),
    ZA_KASA CHAR(1),
    PADEJ SMALLINT,
    TIP_PRINT SMALLINT,
    PADEJ_DDS SMALLINT,
    FLAG_PAY SMALLINT,
    SLEDI SMALLINT,
    FLAG_PAY_FAKT SMALLINT,
    COEFF NUMERIC(3,2),
    DVSK_PRINT SMALLINT,
    DNI_FAK_PADEJ SMALLINT,
    CHECK_FAK SMALLINT,
    VOP SMALLINT)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KLI_GROUP_TO_SEL
RETURNS (
    R_GROUP_ID INTEGER,
    R_GROUP_ID_IN VARCHAR(1024),
    R_GROUP_NAME VARCHAR(1024))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KONS_ADD_OPR_RAZPAD (
    P_OPR_OUT_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE LOCK_ADD (
    P_USER_ID INTEGER,
    P_IS_LOCK INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE LOCK_CONFLICT
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE LOCK_EL_ADD (
    P_LOCK_ID INTEGER,
    P_OPR_ID INTEGER,
    P_IS_LOCK SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE MAINTENANCE_SELECTIVITY
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE MEAT_CUTTING_CALC (
    P_IN_EL_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE MESTI_V_OLD_IN_EL (
    P_OPR_ID INTEGER,
    P_OPR_ID_KI INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE MOVE_ADD_OLD_EL (
    P_OPR_EDIT_OUT_ID INTEGER,
    P_OPR_EDIT_IN_ID INTEGER,
    P_OUT_EL_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE MOVE_ADD_OPR_RAZPAD (
    P_OPR_OUT_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE MOVE_EDIT_GET_DETAILS (
    P_OPR_OUT_ID INTEGER)
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_RSN CHAR(1),
    R_ME CHAR(2),
    R_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_KOL2 DOUBLE PRECISION,
    R_OUT_EL2_ID INTEGER,
    R_OUT_EL_ID INTEGER,
    R_KOL_USED DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MOVE_EDIT_GET_SN (
    P_OPR_OUT_ID INTEGER,
    P_SKLAD_ID INTEGER)
RETURNS (
    R_SN VARCHAR(30),
    R_ELEMENT_ID INTEGER,
    R_SIMPLE_ID INTEGER,
    R_OUT_EL_ID INTEGER,
    R_IS_USED SMALLINT,
    R_IN_EL_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MOVE_POR_MOVE (
    P_SKLAD_ID_OSN INTEGER,
    P_OPR_MOVE_ID INTEGER,
    P_IP INTEGER,
    P_USER_ID INTEGER,
    P_FL_IZL SMALLINT,
    P_FLAG_FUTURE_DATE SMALLINT)
RETURNS (
    R_STATUS TYPE OF DOM_INT,
    R_OPR_OUT_ID TYPE OF DOM_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE NAL_PARTIDA_EL_NODE (
    P_FLAG_FKT SMALLINT)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_SKLAD_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE NEW_PARI_DIST (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OPR_PROD_ID TYPE OF DOM_KEY,
    P_SUMA_DIST TYPE OF DOM_SUMA)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE NEW_PARTIDA_IN (
    P_KOL TYPE OF DOM_KOL,
    P_SUMA_FR TYPE OF DOM_SUMA,
    P_SUMA_SR TYPE OF DOM_SUMA,
    P_PARTIDA_NAL_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE NEW_PARTIDA_OUT (
    P_KOL TYPE OF DOM_KOL,
    P_OUT_EL_ID TYPE OF DOM_KEY)
RETURNS (
    R_KOL DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE NEW_PARTIDA_OUT_SN (
    P_KOL TYPE OF DOM_KOL,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_PARTIDA_NAL_ID TYPE OF DOM_KEY)
RETURNS (
    R_KOL TYPE OF DOM_KOL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ORDER_TO_PR_REQUEST (
    P_ORDER_ID TYPE OF DOM_KEY,
    P_USER_ID TYPE OF DOM_KEY)
RETURNS (
    R_STATUS TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE OTC_ARHIVE (
    P_OPR_ID INTEGER)
RETURNS (
    R_OTC_OPR_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE OTC_MAX (
    P_OPR_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE OUT_EL_UPDATE_FR (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_SUMA_FR DOUBLE PRECISION,
    P_SKLAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE OWNER_SEL (
    OPR_ID INTEGER,
    OWNER_BANKAID INTEGER)
RETURNS (
    ID SMALLINT,
    OWNER_NAME VARCHAR(50),
    OWNER_MOL VARCHAR(30),
    OWNER_ADRES VARCHAR(50),
    OWNER_BULSTAT VARCHAR(13),
    OWNER_IDNOMDDS VARCHAR(15),
    OWNER_LOGO BLOB SUB_TYPE 0 SEGMENT SIZE 1024,
    OWNER_BANKA VARCHAR(30),
    OWNER_BANK_SMETKA VARCHAR(30),
    OWNER_BANK_KOD VARCHAR(8))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PACK_OFFON_LOG
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PARTIDA_DOST_FAST (
    P_OPR_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PARTIDA_HISTORY_NEW_PARTIDA (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_FLAG_IZL TYPE OF DOM_FLAG,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT = NULL,
    P_FLAG_LAST SMALLINT = 0)
RETURNS (
    R_RESULT TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PARTIDA_HISTORY_NEW_PARTIDA_SN (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT = NULL,
    P_FLAG_LAST TYPE OF DOM_SMAL_INT = 0)
RETURNS (
    R_RESULT TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PARTIDA_HISTORY_OLD_PARTIDA (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT = NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PARTIDA_HISTORY_OLD_PARTIDA_SN (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT = null)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PARTIDA_HISTORY_RETURN_PR_AMBL (
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL,
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_KOL TYPE OF DOM_KOL,
    R_RESULT TYPE OF DOM_FLAG)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PARTIDA_HISTORY_RETURN_PROD (
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL,
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_KOL TYPE OF DOM_KOL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PARTIDA_HISTORY_RETURN_PROD_OLD (
    P_IN_EL_ID INTEGER,
    P_KOL DOUBLE PRECISION)
RETURNS (
    R_KOL DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PARTIDA_HISTORY_RETURN_PROD_SN (
    P_IN_EL_ID TYPE OF DOM_KEY)
RETURNS (
    R_RESULT SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PARTIDA_HISTORY_SUB_QUERY (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_DATE DATE,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT = NULL,
    P_FLAG_LAST SMALLINT = 0)
RETURNS (
    R_KOL DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_EL_ID INTEGER,
    R_OPR_ID INTEGER,
    R_OPR_TIP INTEGER,
    R_SKLAD_ID INTEGER,
    R_OPR_DATE DATE,
    R_IN_OUT SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PARTIDA_IN_DOST (
    P_KOL TYPE OF DOM_KOL,
    P_SUMA TYPE OF DOM_SUMA,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_SROK_DATE TYPE OF DOM_DATE)
RETURNS (
    R_PARTIDA_EL_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PARTIDA_IN_DOST_SN (
    P_KOL TYPE OF DOM_KOL,
    P_SUMA TYPE OF DOM_SUMA,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_SN TYPE OF DOM_CHAR_30,
    P_SROK_DATE TYPE OF DOM_DATE)
RETURNS (
    R_ELEMENT_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PARTIDA_IN_FKT_DOST (
    P_OPR_ID INTEGER,
    P_FAKT_ID INTEGER,
    P_FLAG_IZL SMALLINT,
    P_REAL_DDS SMALLINT,
    P_FKT_DDS SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PARTIDA_IN_IZL (
    P_KOL TYPE OF DOM_KOL,
    P_SUMA_FR TYPE OF DOM_SUMA,
    P_SUMA_SR TYPE OF DOM_KOL,
    P_OPR_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_PARTIDA_NAL_ID TYPE OF DOM_KEY,
    P_CMP_RZV TYPE OF DOM_SMAL_INT = 1)
RETURNS (
    R_KOL TYPE OF DOM_KOL,
    R_SUMA_FR TYPE OF DOM_SUMA,
    R_SUMA_SR TYPE OF DOM_SUMA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PARTIDA_IN_PRODUCTION (
    P_IN_EL_ID TYPE OF DOM_KEY)
RETURNS (
    R_RESULT TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PARTIDA_IZL_KI_DOST (
    P_IN_EL_ID TYPE OF DOM_KEY)
RETURNS (
    R_RESULT TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PARTIDA_OUT_MOVE (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT,
    P_FLAG_IZL TYPE OF DOM_FLAG,
    P_IN_EL_ID TYPE OF DOM_KEY)
RETURNS (
    R_RESULT TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PARTIDA_OUT_NEW (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT,
    P_FLAG_IZL TYPE OF DOM_SMAL_INT)
RETURNS (
    R_RESULT TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PARTIDA_OUT_SN_INV (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PARTIDA_OUT_SN_IZP (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PARTIDA_OUT_SN_MOVE (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_OUT_IN_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PARTIDA_OUT_SN_PROD (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PARTIDA_OUT_SN_PRODUCTION (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PLASTANE_S_AVANSOVI_SUMI (
    P_SUMI_ID INTEGER,
    P_KLI_ID INTEGER,
    P_SUMA DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PLASTANE_S_BONUSI (
    P_SUMI_ID INTEGER,
    P_KLI_ID INTEGER,
    P_SUMA DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PN_TMP_ADD (
    P_SKLAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE POCKET_GET_NEPLATENI_KI_PROD (
    P_SKLAD_ID INTEGER)
RETURNS (
    R_OPR_ID INTEGER,
    R_KLI_ID INTEGER,
    R_DATETIME TIMESTAMP,
    R_SUMA_OSTATAK DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE POCKET_GET_NEPLATENI_PROD (
    P_SKLAD_ID INTEGER)
RETURNS (
    R_OPR_ID INTEGER,
    R_KLI_ID INTEGER,
    R_DATETIME TIMESTAMP,
    R_SUMA_OSTATAK DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE POCKET_GET_NEPLATENI_RET_PROD (
    P_SKLAD_ID INTEGER)
RETURNS (
    R_OPR_ID INTEGER,
    R_KLI_ID INTEGER,
    R_DATETIME TIMESTAMP,
    R_SUMA_OSTATAK DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE POR_ANUL_DOST_KOL_RZV (
    P_OPR_ID_DOST INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE POR_CHANGE_STAUS (
    P_STA INTEGER,
    P_OPR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE POR_NEPALNA (
    P_OPR_ID INTEGER,
    P_SIM_ID INTEGER,
    P_KOL_RAZ DOUBLE PRECISION,
    P_RAZFASOVKA_ID INTEGER)
RETURNS (
    R_KOL_OSTAVA_RAZ DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE POR_PREIZCISLI_CENI (
    P_OPR_ID INTEGER,
    P_SKLA_ID_OS INTEGER,
    P_PREIZCHISLI INTEGER)
RETURNS (
    R_CENA_OLD DOUBLE PRECISION,
    R_CENA_NEW DOUBLE PRECISION,
    R_SIM_ID INTEGER,
    R_VAT_PERCENT NUMERIC(4,2),
    R_VAT_GROUP TYPE OF DOM_SMAL_INT,
    R_IS_BONUS TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE POR_PROVERKA_MOVE (
    P_OPR_ID INTEGER,
    P_SKLAD_ID INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE POR_SAVE_PROD_CENI (
    P_SKLAD INTEGER,
    P_KLIENT INTEGER,
    P_SIMPLE_ID INTEGER,
    P_OUT_EL_ID INTEGER,
    P_CENA DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE POR_UP_POR_EL (
    OPR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE POR_UPDATE_PROVERKA (
    KOL DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    KOL_POR DOUBLE PRECISION,
    KOL_RZV DOUBLE PRECISION,
    KOL_RZF DOUBLE PRECISION,
    POR_EL_ID INTEGER,
    SKLAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE POST_EVENT_PARAMETER (
    EVN VARCHAR(255))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PREPARE_CALCULATION (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_DATE DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PREPARE_PROVERKA_NAL (
    P_FLAG_FKT SMALLINT)
RETURNS (
    SIMPLE_ID INTEGER,
    SKLAD_ID SMALLINT,
    F_KOL DOUBLE PRECISION,
    F_SUMA_FR DOUBLE PRECISION,
    F_SUMA_SR DOUBLE PRECISION,
    S_KOL DOUBLE PRECISION,
    S_SUMA_FR DOUBLE PRECISION,
    S_SUMA_SR DOUBLE PRECISION,
    PAR_KOL DOUBLE PRECISION,
    PAR_SUMA_FR DOUBLE PRECISION,
    PAR_SUMA_SR DOUBLE PRECISION,
    P_KOL DOUBLE PRECISION,
    P_SUMA_FR DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PREPARE_SPR_SEL (
    P_TIP INTEGER,
    P_ALL_IDS BLOB SUB_TYPE 0)
RETURNS (
    R_SEL_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PROD_CHANGE_KLI_AMBALAJ_IN (
    P_AMB_IN_OPR_ID INTEGER,
    P_OPR_EDIT_ID INTEGER,
    P_OLD_KLI INTEGER,
    P_NEW_KLI INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PROD_CHANGE_KLI_AMBALAJ_OUT (
    P_AMB_OUT_OPR_ID INTEGER,
    P_OPR_EDIT_ID INTEGER,
    P_OLD_KLI INTEGER,
    P_NEW_KLI INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PRODUCTION_ANNUL (
    P_OPR_OUT_ID INTEGER,
    P_USER_ID INTEGER,
    P_IP INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PRODUCTION_EDIT (
    P_OPR_OUT_ID INTEGER,
    P_USER_ID INTEGER,
    P_IP INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PRODUCTION_SWITCH (
    P_OUT_OPR_ID INTEGER,
    P_USER_ID SMALLINT,
    P_IP INTEGER,
    P_FLAG_IS_EDIT SMALLINT)
RETURNS (
    R_RESULT SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PROIZVODSTVO_CALC_SUMA_SR (
    P_OPR_IN_ID INTEGER,
    P_OPR_OUT_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PROIZVODSTVO_NO_SN (
    P_IN_EL_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PROIZVODSTVO_SN (
    P_IN_EL_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PROV_CL_EL
RETURNS (
    AA INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PROVERKA_TRANSFER_POR (
    P_SKLAD_ID TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    SIMPLE_ID TYPE OF DOM_KEY,
    KOL TYPE OF DOM_KOL,
    NAME TYPE OF DOM_CHAR_100,
    KOL_RAZ TYPE OF DOM_KOL,
    RAZFASOVKA_ID TYPE OF DOM_KEY,
    NAME_RAZ TYPE OF DOM_CHAR_30,
    SUMA TYPE OF DOM_SUMA,
    KOL_NAL TYPE OF DOM_KOL,
    KOL_V_RAZ TYPE OF DOM_KOL,
    PRODUCT TYPE OF DOM_KEY,
    DDS TYPE OF DOM_PERCENT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE RAZCHET_FAKTURI (
    P_FROM_DATE TYPE OF DOM_DATE,
    P_TO_DATE TYPE OF DOM_DATE,
    P_PAYMENT_DATE TYPE OF DOM_DATE)
RETURNS (
    R_INVOICE_ID TYPE OF DOM_KEY,
    R_OPR_ID TYPE OF DOM_KEY,
    R_INVOICE_NUMBER TYPE OF DOM_CHAR_10,
    R_NETO TYPE OF DOM_SUMA,
    R_DDS TYPE OF DOM_SUMA,
    R_TOTAL TYPE OF DOM_SUMA,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_CUSTOMER_ID TYPE OF DOM_KEY,
    R_CUSTOMER_NAME TYPE OF DOM_CHAR_100,
    R_COMPANY_NAME TYPE OF DOM_CHAR_100,
    R_PAY_TYPE TYPE OF DOM_SMAL_INT,
    R_IDNOMDDS TYPE OF DOM_CHAR_15,
    R_IDNOM TYPE OF DOM_CHAR_15,
    R_SUMA_PL TYPE OF DOM_SUMA,
    R_FAK_TYPE TYPE OF DOM_SMAL_INT,
    R_SUMA_PL_NETO TYPE OF DOM_SUMA,
    R_SUMA_PL_DDS TYPE OF DOM_SUMA)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE RAZF_INSERT (
    P_NAME VARCHAR(30),
    P_AMBALAJ SMALLINT)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE RAZPAD_CALC (
    P_IN_EL_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE RAZPAD_CALC_ORIGINAL (
    P_IN_EL_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE RECALCULATE_SIMPLES_REC_SUB (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_FLAG_IZL TYPE OF DOM_FLAG,
    P_SKLAD_ID DOM_SMAL_INT)
RETURNS (
    R_RESULT INTEGER,
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE RECALCULATE_SIMPLES_RECURSIVE (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_FLAG_IZL TYPE OF DOM_FLAG,
    P_SKLAD_ID DOM_SMAL_INT)
RETURNS (
    R_RESULT INTEGER,
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE RECREATE_KI_PROD_SUMI (
    P_OPR_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE RENUM_TABLE (
    P_START_ID INTEGER,
    P_TABLE VARCHAR(50))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE RESTORE_ANNUL_FAK_PROD (
    P_FKT_PROD_OPR_ID TYPE OF DOM_KEY,
    P_FAK_OPR_ID TYPE OF DOM_KEY,
    P_FLAG_IZL TYPE OF DOM_FLAG)
RETURNS (
    R_RESULT TYPE OF DOM_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE RETURN_DOST_AMBALAJ (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL)
RETURNS (
    R_RESULT TYPE OF DOM_SMAL_INT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE RETURN_STOKA_DOST_SN (
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY,
    P_FLAG_FKT TYPE OF DOM_FLAG,
    P_ORG_IN_EL_ID TYPE OF DOM_KEY,
    P_SUMA TYPE OF DOM_SUMA,
    P_KOL TYPE OF DOM_KOL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE RETURN_STOKA_PROD_SN (
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SAVE_BONUS (
    IS_ACTIV SMALLINT,
    NAME VARCHAR(50),
    WEEK_DAY INTEGER,
    OT_TIME TIME,
    DO_TIME TIME,
    OT_SUMA DOUBLE PRECISION,
    DO_SUMA DOUBLE PRECISION,
    SIMPLE_ID INTEGER,
    SIMPLE_KOL DOUBLE PRECISION,
    PERIOD SMALLINT,
    NUMBER_WMY SMALLINT,
    WMY SMALLINT,
    PROCENT DOUBLE PRECISION,
    SIMPLE_ID_BONUS INTEGER,
    KOL_SIM_BONUS DOUBLE PRECISION,
    CENA_SIM_BONUS DOUBLE PRECISION,
    ZA_SMETKA SMALLINT,
    ID_BONUS INTEGER,
    USER_ID INTEGER,
    SEL_KLI INTEGER,
    TIP INTEGER,
    TIP_BONUS SMALLINT,
    BTC SMALLINT,
    P_SIMPLE_SEL_ID TYPE OF DOM_KEY,
    P_SUMA_SEL TYPE OF DOM_SUMA,
    P_OT_DATE TYPE OF DOM_DATE,
    P_DO_DATE TYPE OF DOM_DATE)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SAVE_CL_HISTORY (
    CL_EL_ID INTEGER,
    SIMPLE_ID INTEGER,
    USER_ID INTEGER,
    CENA_OLD DOUBLE PRECISION,
    CENA_NEW DOUBLE PRECISION,
    OPR_ID_E INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SAVE_EDIT_CL_EL (
    P_OT_OPR_ID INTEGER,
    P_TIP INTEGER,
    P_PROCENT DOUBLE PRECISION,
    P_CENA DOUBLE PRECISION,
    P_TIP_OT_CENA INTEGER,
    P_ROUND_TIP_ID INTEGER,
    P_OPR INTEGER,
    P_SIM_ID INTEGER,
    P_USER_ID INTEGER,
    P_TIP_OLD INTEGER,
    P_OT_OPR_ID_OLD INTEGER,
    P_PROCENT_OLD DOUBLE PRECISION,
    P_CENA_OLD DOUBLE PRECISION,
    P_TIP_OT_CENA_OLD INTEGER,
    P_UPDATE INTEGER,
    P_DELETE INTEGER,
    P_OPR_OLD INTEGER,
    OPR_ID_E INTEGER,
    P_FLAG_LOCK TYPE OF DOM_FLAG)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SAVE_NAL_BIG (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID INTEGER,
    P_LAST_CENA DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SAVE_OLD_OFFER_DATA (
    P_OFFER_ID TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SAVE_OLD_ORDER_DATA (
    P_ORDER_ID TYPE OF DOM_KEY,
    P_EDIT_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SAVE_PARI (
    P_PARI_ID INTEGER,
    P_EDITING_USER_ID INTEGER,
    P_IP INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SAVE_PAYMENT_AVANSOVO (
    P_SUMA DOUBLE PRECISION,
    P_PAYMENT_OPR_ID INTEGER,
    P_KLI_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SAVE_POR_EL (
    P_RAZ_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_OPR_ID INTEGER,
    P_SKLAD INTEGER,
    P_KLI_ID INTEGER,
    P_ORDER_N SMALLINT,
    P_NOTE VARCHAR(100))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SAVE_POR_EL_9 (
    P_RAZ_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_OPR_ID INTEGER,
    P_SKLAD INTEGER,
    P_KLI_ID INTEGER,
    P_ORDER_N SMALLINT,
    P_NOTE VARCHAR(100),
    P_IS_BONUS INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SAVE_POR_ZD (
    P_POR_OPR_ID INTEGER,
    P_ZD_OPR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SAVE_PRODICTION (
    P_OPR_IN_ID INTEGER,
    P_OPR_OUT_ID INTEGER,
    P_SUMA_SR DOUBLE PRECISION)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SAVE_SIM_BIG (
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    CODE2 TYPE OF DOM_CHAR_50,
    ME TYPE OF DOM_INT,
    BARCODE VARCHAR(13),
    OPR_CL TYPE OF DOM_KEY,
    CENA TYPE OF DOM_CENA,
    SEL_ID TYPE OF DOM_KEY)
RETURNS (
    ID TYPE OF DOM_KEY,
    R_OLD_CENA TYPE OF DOM_CENA,
    R_ID_CL TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SEARCH_FOR_REKURS (
    P_CHILD_SIMPLE_ID TYPE OF DOM_KEY,
    P_SEARCH_SIMPLE_ID TYPE OF DOM_KEY,
    P_COUNT TYPE OF DOM_SMAL_INT = 1)
RETURNS (
    R_RESULT SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SEARCH_IN_CALC (
    P_SEARCH_TYPE TYPE OF DOM_KEY)
RETURNS (
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_SIMPLE TYPE OF DOM_KEY,
    R_CHILD_SIMPLE_ID TYPE OF DOM_KEY,
    R_SIMPLE_CALC_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SEARCH_SERIAL_NUMBER (
    P_SN VARCHAR(30))
RETURNS (
    R_SROK TIMESTAMP,
    R_OPR_ID INTEGER,
    R_SKLAD_ID INTEGER,
    R_KLI_ID INTEGER,
    R_USER_ID INTEGER,
    R_OPR_DATE DATE,
    R_DATETIME TIMESTAMP,
    R_OPR_TIP SMALLINT,
    R_SUMA DOUBLE PRECISION,
    R_SERIAL_NUM VARCHAR(30),
    R_GARSROK VARCHAR(30),
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL TYPE OF DOM_KOL,
    R_KOL_SALDO TYPE OF DOM_KOL,
    R_SIMPLE_ID TYPE OF DOM_INT,
    R_ELEMENT_ID TYPE OF DOM_KEY,
    R_SIMPLE_RSN INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SET_IZL_FROM_INV (
    P_OPR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SET_POR_EL_KOL_MUVE (
    P_SKLAD_ID INTEGER,
    P_STATUS INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SET_WORK_OTR_KOL_FLAG
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SLEDI_LICENZ_UPDATE (
    P_OPR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SLEDI_ROUMING_PAIED (
    P_OPR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SLEDI_TEMPLATE_UPDATE (
    P_SIMPLE_TRACKER_ID INTEGER,
    P_SIMPLE_TRACKER_2_ID INTEGER)
RETURNS (
    R_KLI_ID INTEGER,
    R_S_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SLOW_SPR_NAL (
    P_FLAG_FKT SMALLINT,
    P_DATA DATE)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_SKLAD_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_KOL2 DOUBLE PRECISION,
    R_LAST_CENA DOUBLE PRECISION,
    R_LAST_DOST_OPR_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SLOW_SPR_NAL_EL (
    P_FLAG_FKT SMALLINT,
    P_DATA DATE)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_SKLAD_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_KOL2 DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SORT_ID (
    P_TABLE_NAME VARCHAR(31),
    P_GEN_NAME VARCHAR(31))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_BCT_ADD_EDIT (
    P_ID INTEGER,
    P_OTDT DATE,
    P_DODT DATE,
    P_SIMPLE_ID INTEGER,
    P_CENA DOUBLE PRECISION,
    P_TOCHKI INTEGER,
    P_USER_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_DEL_ANUL_CL
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_DELETE_INSTALLATIONS (
    P_INSTALLATIONS_ID DOM_INT,
    P_POR_ID DOM_INT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_DROP_LOG_TBL
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_GEN_OTC_EL_EDIT_P_NOMER
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_GEN_SEL_SIM_QR_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_SET_LOG_TBL
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SP_UPDATE_CRM_KOL (
    P_KLI_ID INTEGER,
    P_PRODUCT_CRM INTEGER,
    P_CRM_KOL INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPR_DOSIE_KA (
    P_KA_ID INTEGER)
RETURNS (
    R_KA_ID INTEGER,
    R_KA_OLD_ID INTEGER,
    R_OPR_ID DOM_INT,
    R_OPR_DT TIMESTAMP,
    R_OPR_TIP_ID DOM_INT,
    R_OPR_TIP_NAME DOM_CHAR_100,
    R_USER_ID INTEGER,
    R_USER_NAME VARCHAR(100),
    R_OPR_DATE DATE,
    R_OPR_PROD_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPR_GENERATOR_NACHISLIAVANE (
    P_TO_DATE DATE)
RETURNS (
    R_ID INTEGER,
    R_SUMA DOUBLE PRECISION,
    R_KLI_ID INTEGER,
    R_OBEKT_ID INTEGER,
    R_TASK_TIP_ID INTEGER,
    R_KUM_DATE DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPR_KONS_KLI (
    P_KLI_ID TYPE OF DOM_KEY)
RETURNS (
    R_IN_KONS TYPE OF DOM_KOL,
    R_IN_SUMA_FR TYPE OF DOM_SUMA,
    R_IN_SUMA_SR TYPE OF DOM_SUMA,
    R_OUT_KONS TYPE OF DOM_KOL,
    R_OUT_SUMA_FR TYPE OF DOM_SUMA,
    R_OUT_SUMA_SR TYPE OF DOM_SUMA,
    R_PROD_KONS TYPE OF DOM_KOL,
    R_PROD_SUMA_FR TYPE OF DOM_SUMA,
    R_PROD_SUMA_SR TYPE OF DOM_SUMA,
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    ME VARCHAR(2),
    ME2 VARCHAR(2),
    R_KOL_RESULT TYPE OF DOM_KOL,
    R_RESULT_SUMA_FR TYPE OF DOM_SUMA,
    R_RESULT_SUMA_SR TYPE OF DOM_SUMA,
    R_CODE TYPE OF DOM_CHAR_50,
    R_CODE2 TYPE OF DOM_CHAR_50,
    R_SIMPLE_ID TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPR_NAL_FOR_DATE_FOR_SIMPLE (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID INTEGER,
    P_DATA DATE)
RETURNS (
    R_KOL DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPR_SP_OTC (
    P_SKLAD_ID INTEGER,
    P_FROM_DATE DATE,
    P_TO_DATE DATE)
RETURNS (
    R_NACH_SALDO DOUBLE PRECISION,
    R_KRAINO_SALDO DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE STOCK_PARICHEN_OTC (
    P_SKLAD_ID INTEGER,
    P_FROM_DATE DATE,
    P_TO_DATE DATE)
RETURNS (
    R_NACH_SALDO DOUBLE PRECISION,
    R_KRAINO_SALDO DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE TMP_KASA_TO_REAL_KASA (
    P_USER_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_AMBALAJ (
    P_KLI_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_CENA_INFO (
    P_CL_OPR_ID INTEGER,
    P_KLI_ID INTEGER,
    P_SKLAD_ID TYPE OF DOM_INT)
RETURNS (
    R_RESULT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE UPDATE_CENI_AFTER_DOST (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID INTEGER,
    P_CENA_DOST DOUBLE PRECISION,
    P_CENA_PROD DOUBLE PRECISION,
    P_CENA_EDRO DOUBLE PRECISION,
    P_OPR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_COMMENT_OPR_HEADERS (
    I_OPR_ID INTEGER,
    NEW_HEADER VARCHAR(50))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_DVSK_PARTIDA_EL (
    P_KLI_ID_PROIZV TYPE OF DOM_KEY,
    P_TYPE_DOC TYPE OF DOM_KEY,
    P_NOM_DOK TYPE OF DOM_CHAR_20,
    P_BG_NOMER TYPE OF DOM_CHAR_15,
    P_DATE_PROIZV TYPE OF DOM_DATE,
    P_SROK TYPE OF DOM_DATE,
    P_PARTIDA_EL TYPE OF DOM_KEY,
    P_SN TYPE OF DOM_CHAR_30,
    P_PROIZHOD INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_FAK_COMMENT (
    OPR_ID INTEGER,
    STR VARCHAR(100))
RETURNS (
    R_TEXT VARCHAR(100),
    R_OPR_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE UPDATE_FAK_EL_CENA_FIX (
    P_TYPE_TOST INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_KLI_SKLAD_NODE (
    P_SKLAD_ID VARCHAR(1000),
    KLI_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_MULTI_PROD_SUMI (
    P_OPRS VARCHAR(1000))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_NAL_KOL_RZV (
    R_OPR_ID INTEGER,
    R_SKLAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_OSNOVNA_CL (
    P_SIMPLE_ID INTEGER,
    P_CENA_PROD DOUBLE PRECISION,
    P_UPDATE SMALLINT,
    P_USER_ID INTEGER,
    OPR_ID_E INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_OTC_EL_TIP_7
RETURNS (
    R_OPR_ID INTEGER,
    R_SUM DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE UPDATE_OUT (
    OPR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_PRIORITET (
    P_PRIORITET1 INTEGER,
    P_PRIORITET2 INTEGER,
    P_ID1 INTEGER,
    P_ID2 INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_PROD_SUMI (
    P_OPR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_REQUEST_STATUS (
    P_POR_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_SIMPLE_CALC_FORMULA2
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_SUMI_PROD_INVOICE (
    P_OPR_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_ZARABOTKA_FROM_PROD (
    P_OPR_PROD_ID TYPE OF DOM_KEY,
    P_CL_ID TYPE OF DOM_KEY)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE VERIFICATION_CODE (
    P_KODE TYPE OF DOM_CHAR_50,
    P_TIPE_CODE TYPE OF DOM_SMAL_INT,
    P_ID_REC TYPE OF DOM_KEY)
RETURNS (
    R_RESULT TYPE OF DOM_KEY)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE VERIFICATION_FIRMA (
    P_NAME TYPE OF DOM_CHAR_100,
    P_BUSTAT VARCHAR(13),
    P_IDNOMDDS VARCHAR(15),
    P_ID INTEGER)
RETURNS (
    R_RESULT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ZAKRAGLQVANE (
    P_CL_EL_ID INTEGER,
    P_CENA DOUBLE PRECISION,
    P_ROUND_TIP_ID INTEGER,
    P_CENA_OLD DOUBLE PRECISION)
RETURNS (
    R_CENA DOUBLE PRECISION,
    R_PROCENT DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ZD_DOST (
    P_OPR_ID_DOST INTEGER,
    P_OPR_ID_ZD INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ZD_EDIT_NODE (
    P_OPR_ID INTEGER,
    P_OPR_ID_EDIT INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ZD_KOL_NODE (
    P_OPR_ID_S VARCHAR(3000),
    L_SIM_ID INTEGER)
RETURNS (
    R_KOL DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ZD_OBOBSHTAVANE (
    P_OPR_ID_S VARCHAR(3000),
    P_OPR_ID_OB INTEGER,
    P_SKLAD_OSN INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ZD_SIM_DOST (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_KOL FLOAT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ZDOSTAVKA_SAVE (
    OPR_ID INTEGER,
    SIMPLE_ID INTEGER,
    SKLAD_ID INTEGER,
    KLI_ID INTEGER,
    RAZFASOVKA_ID INTEGER,
    CENA_LAST DOUBLE PRECISION,
    CENA_CL DOUBLE PRECISION,
    KOL_ZAIAVKA DOUBLE PRECISION,
    KOL_NAL DOUBLE PRECISION,
    KOL_RAZ DOUBLE PRECISION,
    POR_EL_ID INTEGER,
    CENA_CL_NO_DDS TYPE OF DOM_CENA)
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE ACTIONS (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_100 NOT NULL
);


CREATE TABLE ACTIVE_USERS (
    USER_ID        INTEGER,
    SATRTDATETIME  TIMESTAMP,
    IP_USER        INTEGER,
    APP_VERSION    VARCHAR(15),
    ZEBEDEE        DOM_BOOLEAN,
    FLAG           DOM_FLAG
);


CREATE TABLE ADDRESSES (
    ID        DOM_KEY NOT NULL,
    PLACE_ID  DOM_KEY NOT NULL,
    ADDRESS   DOM_CHAR_100 NOT NULL
);


CREATE TABLE AMBALAJ (
    ID         INTEGER NOT NULL,
    KLI_ID     INTEGER,
    SIMPLE_ID  INTEGER,
    KOL        DOUBLE PRECISION
);


CREATE TABLE AMBALAJ_HISTORY (
    ID         INTEGER NOT NULL,
    OPR_ID     INTEGER NOT NULL,
    SIMPLE_ID  INTEGER NOT NULL,
    KOL        DOUBLE PRECISION NOT NULL
);


CREATE TABLE AMBALAJ_HISTORY_EDIT (
    ID         INTEGER NOT NULL,
    EDIT_ID    INTEGER,
    SIMPLE_ID  INTEGER,
    KOL        DOUBLE PRECISION
);


CREATE TABLE ANALYSES (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY,
    OUT_EL_ID  DOM_KEY,
    SUMA       DOM_SUMA,
    SUMA_SR    DOM_SUMA,
    VAT        DOM_PERCENT
);


CREATE TABLE BARCODE (
    ID         INTEGER NOT NULL,
    SIMPLE_ID  INTEGER,
    BARCODE    VARCHAR(13),
    KOL        INTEGER,
    NAME       DOM_CHAR_50
);


CREATE TABLE BH_OTSTAPKI (
    ID                DOM_KEY NOT NULL,
    P_OT              DOM_PERCENT,
    P_DO              DOM_PERCENT,
    CODE              DOM_CHAR_8 COLLATE PXW_CYRL,
    NAME              DOM_CHAR_30 COLLATE PXW_CYRL,
    RANK              DOM_SMAL_INT,
    AKTIVEN           DOM_SMAL_INT,
    MAX_DISCOUNT_SUM  DOM_SUMA
);


CREATE TABLE BH_PROD_POR (
    ID      DOM_KEY NOT NULL,
    OPR_ID  DOM_KEY,
    POR_N   DOM_CHAR_15
);


CREATE TABLE BONUS_CENA_TOCHKI (
    ID            DOM_KEY NOT NULL,
    OTDT          DOM_DATE NOT NULL,
    DODT          DOM_DATE NOT NULL,
    SIMPLE_ID     DOM_KEY NOT NULL,
    CENA          DOM_CENA NOT NULL,
    TOCHKI        DOM_INT NOT NULL,
    ANUL          DOM_FLAG DEFAULT 0 NOT NULL,
    BONUS_C_T_ID  DOM_KEY,
    DT            DOM_DATE_TIME,
    USER_ID       DOM_KEY NOT NULL
);


CREATE TABLE BONUS_CONFIG (
    ID               DOM_KEY NOT NULL,
    IS_ACTIV         DOM_FLAG NOT NULL,
    NAME             DOM_CHAR_50 NOT NULL COLLATE PXW_CYRL,
    WEEK_DAY         DOM_KEY NOT NULL,
    OT_TIME          DOM_TIME NOT NULL,
    DO_TIME          DOM_TIME NOT NULL,
    OT_SUMA          DOM_SUMA,
    DO_SUMA          DOM_SUMA,
    SIMPLE_ID        DOM_KEY,
    SIMPLE_KOL       DOM_KOL,
    PERIOD           DOM_SMAL_INT,
    NUMBER_WMY       DOM_SMAL_INT,
    WMY              DOM_SMAL_INT,
    PROCENT          DOM_CENA,
    SIMPLE_ID_BONUS  DOM_KEY,
    KOL_SIM_BONUS    DOM_KOL,
    CENA_SIM_BONUS   DOM_CENA,
    ANULIRAN         DOM_FLAG default 0 NOT NULL,
    ZA_SMETKA        DOM_FLAG default 0,
    ID_BONUS         DOM_KEY,
    DATE_TIME_AE     DOM_DATE_TIME NOT NULL,
    USER_ID          DOM_KEY NOT NULL,
    SEL_KLI          DOM_KEY,
    TIP              DOM_SMAL_INT NOT NULL,
    TIP_BONUS        DOM_SMAL_INT NOT NULL,
    BTC              DOM_SMAL_INT,
    SIMPLE_SEL_ID    DOM_KEY,
    SUMA_SEL         DOM_SUMA,
    OT_DATE          DOM_DATE,
    DO_DATE          DOM_DATE,
    DT_ANUL          DOM_DATE_TIME,
    USER_ANUL        DOM_KEY
);


CREATE TABLE BONUS_CONFIG_KLI (
    ID        DOM_KEY NOT NULL,
    BONUS_ID  DOM_KEY NOT NULL,
    KLI_ID    DOM_KEY NOT NULL
);


CREATE TABLE BONUS_CONFIG_SKLAD (
    ID        DOM_KEY NOT NULL,
    BONUS_ID  DOM_KEY,
    SKLAD_ID  DOM_KEY
);


CREATE TABLE BONUS_KLI_USED (
    ID        DOM_KEY NOT NULL,
    BONUS_ID  DOM_KEY,
    KLI_ID    DOM_KEY,
    DT        DOM_DATE_TIME
);


CREATE TABLE BONUS_RAZCHET_NODE (
    ID      DOM_KEY NOT NULL,
    IN_ID   DOM_KEY NOT NULL,
    OUT_ID  DOM_KEY NOT NULL,
    SUMA    DOM_SUMA NOT NULL
);


CREATE TABLE BONUSI_ZA_RAZCHET (
    ID         DOM_KEY NOT NULL,
    IN_EL_ID   DOM_KEY,
    OUT_EL_ID  DOM_KEY,
    KOL        DOM_KOL NOT NULL,
    SUMA       DOM_SUMA NOT NULL,
    SUMA_OST   DOM_SUMA NOT NULL,
    KI_OPR_ID  DOM_KEY
);


CREATE TABLE BROENE (
    ID           DOM_KEY NOT NULL,
    OPR_ID       DOM_KEY NOT NULL,
    TIP          DOM_SMAL_INT DEFAULT 0 NOT NULL,
    STATUS       DOM_SMAL_INT DEFAULT 0 NOT NULL,
    DISTRID      DOM_KEY,
    AGENTDID     DOM_KEY,
    FROM_OPR_ID  DOM_KEY
);


CREATE TABLE BROENE_EL (
    ID         DOM_KEY NOT NULL,
    BROENE_ID  DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY NOT NULL,
    KOL        DOM_KOL NOT NULL,
    PRICE      DOM_CENA,
    KOL2       DOM_KOL
);


CREATE TABLE BROENE_EL_DETAILS (
    ID            DOM_KEY NOT NULL,
    BROENE_EL_ID  DOM_KEY,
    WIDTH         DOM_KOL,
    HEIGHT        DOM_KOL,
    QTY           DOM_SMAL_INT,
    OTV           DOM_SMAL_INT,
    KANT          DOM_SMAL_INT
);


CREATE TABLE BROENE_EL_RAZ_NODE (
    ID             INTEGER NOT NULL,
    BROENE_EL_ID   INTEGER,
    RAZFASOVKA_ID  INTEGER,
    KOL            DOUBLE PRECISION
);


CREATE TABLE CENOVA_LISTA (
    ID              INTEGER NOT NULL,
    NAME            VARCHAR(30),
    OPR_ID          INTEGER NOT NULL,
    TIP             SMALLINT,
    OT_DATE         DATE,
    DO_DATE         DATE,
    OT_TIME         TIME,
    DO_TIME         TIME,
    WEEK            INTEGER,
    ACTIVNA         SMALLINT DEFAULT 0,
    PRIORITET       INTEGER DEFAULT 0,
    DEF             DOM_FLAG DEFAULT 0 NOT NULL,
    DEF_FIKS        DOM_FLAG DEFAULT 0 NOT NULL,
    FAKTURNA        DOM_FLAG DEFAULT 0 NOT NULL,
    SEL_KLI         DOM_KEY,
    IS_VALUTNA      DOM_FLAG DEFAULT 0,
    VALUTA_ID       DOM_KEY_SMALL,
    BASE_PERCENT    DOM_PERCENT,
    AUTO_PERCENT    DOM_PERCENT,
    IS_PROMOTIONAL  DOM_SMAL_INT DEFAULT 0 NOT NULL
);


CREATE TABLE CENOVA_LISTA_EDIT (
    ID              INTEGER NOT NULL,
    NAME            VARCHAR(30),
    OPR_EDIT_ID     INTEGER,
    TIP             SMALLINT,
    OT_DATE         DATE,
    DO_DATE         DATE,
    OT_TIME         TIME,
    DO_TIME         TIME,
    WEEK            INTEGER,
    ACTIVNA         SMALLINT,
    PRIORITET       INTEGER,
    SEL_KLI         DOM_KEY,
    VALUTA_ID       DOM_KEY_SMALL,
    BASE_PERCENT    DOM_PERCENT,
    IS_PROMOTIONAL  DOM_SMAL_INT DEFAULT 0 NOT NULL
);


CREATE TABLE CENOVA_LISTA_EL (
    ID            INTEGER NOT NULL,
    OPR_ID        INTEGER,
    OT_OPR_ID     INTEGER,
    SIMPLE_ID     INTEGER,
    TIP           SMALLINT,
    PROCENT       DOUBLE PRECISION,
    CENA          DOUBLE PRECISION,
    TIP_OT_CENA   INTEGER DEFAULT 0 NOT NULL,
    ROUND_TIP_ID  DOM_KEY,
    FLAG_LOCK     DOM_FLAG,
    SEL_ID        DOM_KEY,
    DT_ADD        DOM_DATE_TIME
);


CREATE TABLE CENOVA_LISTA_EL_EDIT (
    ID           INTEGER NOT NULL,
    OPR_EDIT_ID  INTEGER,
    OT_OPR_ID    INTEGER,
    SIMPLE_ID    INTEGER,
    TIP          SMALLINT,
    PROCENT      DOUBLE PRECISION,
    CENA         DOUBLE PRECISION,
    TIP_OT_CENA  INTEGER
);


CREATE TABLE CENOVA_LISTA_HISTORY (
    ID         DOM_KEY NOT NULL,
    CL_EL_ID   DOM_KEY,
    SIMPLE_ID  DOM_KEY,
    USER_ID    DOM_KEY,
    CENA_OLD   ED_CENA,
    CENA_NEW   ED_CENA,
    DT         TIMESTAMP,
    OPR_ID     DOM_KEY,
    OPR_ID_E   DOM_KEY
);


CREATE TABLE CENOVA_LISTA_KLI (
    ID      INTEGER NOT NULL,
    OPR_ID  INTEGER,
    KLI_ID  INTEGER
);


CREATE TABLE CENOVA_LISTA_KLI_EDIT (
    ID           INTEGER NOT NULL,
    OPR_EDIT_ID  INTEGER,
    KLI_ID       INTEGER
);


CREATE TABLE CENOVA_LISTA_PROTOKOL (
    ID             DOM_KEY NOT NULL,
    OPR_ID         DOM_KEY,
    PROTOKOL       INTEGER,
    PROTOKOL_DATE  DOM_DATE,
    OTC_ID         DOM_KEY
);


CREATE TABLE CENOVA_LISTA_SKLAD (
    ID        INTEGER NOT NULL,
    OPR_ID    INTEGER NOT NULL,
    SKLAD_ID  INTEGER NOT NULL
);


CREATE TABLE CENOVA_LISTA_SKLAD_EDIT (
    ID           INTEGER NOT NULL,
    OPR_EDIT_ID  INTEGER NOT NULL,
    SKLAD_ID     INTEGER NOT NULL
);


CREATE TABLE CENOVA_LISTA_TMP (
    SIM_ID  INTEGER
);


CREATE TABLE CFG_FAK_ACCOUNTING (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_50
);


CREATE TABLE CFG_INFO (
    ID        DOM_KEY_SMALL NOT NULL,
    PC_ID     DOM_SMAL_INT,
    MSG_TIP   DOM_SMAL_INT,
    HOURS     DOM_INT64,
    EMAIL     DOM_CHAR_50,
    SHORT     DOM_BOOLEAN,
    LAT       DOM_BOOLEAN,
    OBEKT_ID  DOM_KEY_SMALL
);


CREATE TABLE CFG_KASA_TEMPLATE (
    ID       DOM_KEY NOT NULL,
    NAME     DOM_CHAR_30 NOT NULL COLLATE PXW_CYRL,
    USER_ID  DOM_KEY,
    INS_DT   DOM_DATE_TIME,
    ERASED   DOM_FLAG DEFAULT 0 NOT NULL,
    DT_GEN   DOM_DATE
);


CREATE TABLE CFG_KASA_TEMPLATE_EL (
    ID              DOM_KEY NOT NULL,
    TEMPLATE_ID     DOM_KEY,
    PARI_IO_ID      DOM_KEY,
    KASA_ID         DOM_KEY,
    OBEKT_ID        DOM_KEY,
    VALUTA_PRIH_ID  DOM_KEY,
    TIP             DOM_SMAL_INT,
    KOD             DOM_FLAG,
    SUMA_PRIH       DOM_SUMA,
    KURS_PRIH       KURS,
    SUMA_RASH       DOM_SUMA,
    KURS_RAZH       KURS,
    VALUTA_RAZH_ID  DOM_KEY,
    KLI_ID          DOM_KEY,
    KASA_2_ID       DOM_KEY,
    SUMA_PRIH_KOD   DOM_CHAR_30 COLLATE PXW_CYRL,
    SUMA_RAZH_KOD   DOM_CHAR_30 COLLATE PXW_CYRL,
    ALLOW_FAK       DOM_SMAL_INT,
    COMMENT         DOM_CHAR_100
);


CREATE TABLE CFG_LOG (
    ID          INTEGER NOT NULL,
    DATETIME    TIMESTAMP NOT NULL,
    USER_ID     INTEGER NOT NULL,
    IP          INTEGER NOT NULL,
    TABLE_CODE  SMALLINT NOT NULL,
    OBJ_ID      INTEGER NOT NULL,
    OPR_TIP     CHAR(1) NOT NULL
);


CREATE TABLE CFG_OSN_DDS (
    ID                  DOM_KEY NOT NULL,
    DDS_PERCENT         DOM_CENA,
    OSNOVANIE_TEXT      DOM_CHAR_100,
    OSNOVANIE_TEXT_LAT  DOM_CHAR_100,
    USER_TEXT           DOM_CHAR_50,
    IS_ACTIVE           DOM_SMAL_INT DEFAULT 1,
    ACCOUNTING_CODE     DOM_CHAR_20
);


CREATE TABLE CFG_PAYMENTS (
    ID          DOM_KEY NOT NULL,
    NAME        DOM_CHAR_50,
    FISK        DOM_KEY_SMALL,
    ATRIB       DOM_KEY_SMALL,
    KASA_ID     DOM_KEY,
    CODE        DOM_CHAR_15 COLLATE PXW_CYRL,
    METRO_CODE  DOM_CHAR_15
);


CREATE TABLE CFG_PAYMENTS_KLI (
    ID               INTEGER NOT NULL,
    CFG_PAYMENTS_ID  DOM_KEY,
    KLI_ID           DOM_KEY,
    KASA_ID          DOM_KEY,
    NOM              DOM_CHAR_15 COLLATE PXW_CYRL
);


CREATE TABLE CFG_RAZPAD_CALC (
    ID               DOM_KEY NOT NULL,
    FROM_PRODUCT_ID  DOM_KEY NOT NULL,
    TO_PRODUCT_ID    DOM_KEY NOT NULL,
    RATIO            DOM_PERCENT
);


CREATE TABLE CFG_VEZNI (
    ID       DOM_KEY_SMALL NOT NULL,
    TIP      SMALLINT NOT NULL,
    PATH     VARCHAR(255) NOT NULL,
    ACTIVEN  DOM_SMAL_INT NOT NULL,
    NAME     DOM_CHAR_50 NOT NULL COLLATE PXW_CYRL
);


CREATE TABLE CLAIM_EL (
    ID         DOM_KEY NOT NULL,
    RET_ID     DOM_KEY,
    SIMPLE_ID  DOM_KEY,
    KOL        DOM_KOL
);


CREATE TABLE CLAIM_NUM (
    CLAIM_NUM  DOM_INT
);


CREATE TABLE CLOTH_SIZE (
    ID      DOM_KEY NOT NULL,
    "SIZE"  DOM_CHAR_8 COLLATE PXW_CYRL,
    L       DOM_SMAL_INT,
    D       DOM_SMAL_INT,
    GB      DOM_SMAL_INT,
    F       DOM_SMAL_INT
);


CREATE TABLE CN_DELIVERY_ELEMENTS (
    ID         DOM_KEY NOT NULL,
    OUT_EL_ID  DOM_KEY,
    CN_OPR_ID  DOM_KEY
);


CREATE TABLE COMMENT (
    ID      INTEGER NOT NULL,
    OPR_ID  INTEGER,
    TEXT    VARCHAR(100)
);


CREATE TABLE COMMENT_EINVOICE_NODE (
    ID           DOM_KEY NOT NULL,
    COMMENT_ID   DOM_KEY,
    EINVOICE_ID  DOM_KEY
);


CREATE TABLE COMMENT_FIRMI_NODE (
    ID          DOM_KEY NOT NULL,
    COMMENT_ID  DOM_KEY,
    FIRMI_ID    DOM_KEY
);


CREATE TABLE COMMENT_KLI_NODE (
    ID          DOM_KEY NOT NULL,
    COMMENT_ID  DOM_KEY,
    KLI_ID      DOM_KEY
);


CREATE TABLE COMMENT_OPR_NODE (
    ID          DOM_KEY NOT NULL,
    COMMENT_ID  DOM_KEY,
    OPR_ID      DOM_KEY
);


CREATE TABLE COMMENT_OPR_TEMPLATE_NODE (
    ID               DOM_KEY NOT NULL,
    COMMENT_ID       DOM_KEY,
    OPR_TEMPLATE_ID  DOM_KEY
);


CREATE TABLE COMMENT_SIMPLE_NODE (
    ID          DOM_KEY NOT NULL,
    COMMENT_ID  DOM_KEY,
    SIMPLE_ID   DOM_KEY
);


CREATE TABLE COMMENT_TASKS_NODE (
    ID          DOM_KEY NOT NULL,
    COMMENT_ID  DOM_KEY,
    TASKS_ID    DOM_KEY
);


CREATE TABLE COMMENTS (
    ID             DOM_KEY NOT NULL,
    NOTE           BLOB SUB_TYPE 1 SEGMENT SIZE 2048,
    DATE_MODIFIED  DOM_DATE_TIME,
    USER_ID        DOM_KEY,
    HEADER         DOM_CHAR_50 COLLATE PXW_CYRL
);


CREATE TABLE COUNTIES (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_100,
    CODE  DOM_CHAR_20
);


CREATE TABLE COUNTRIES (
    ID              DOM_KEY_SMALL NOT NULL,
    CODE            CHAR(3),
    NAME            DOM_CHAR_50,
    NAME_ENG        DOM_CHAR_50,
    INTRASTAT_CODE  DOM_STR_3
);


CREATE TABLE COURSES (
    ID           DOM_KEY NOT NULL,
    COURSE_DATE  DOM_DATE NOT NULL,
    NOTE         DOM_CHAR_20,
    KLI_ID       DOM_KEY,
    DATE_TIME    DOM_DATE_TIME
);


CREATE TABLE COURSES_OPR_NODE (
    ID         DOM_KEY NOT NULL,
    COURSE_ID  DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY NOT NULL
);


CREATE TABLE CRM_ATON_PRODUKT (
    ID           DOM_KEY NOT NULL,
    SIMPLE_ID    DOM_KEY NOT NULL,
    CRM_PRODUKT  DOM_KEY NOT NULL
);


CREATE TABLE CRM_INFO_LICENZIA (
    ID           DOM_KEY NOT NULL,
    KLI_ID       DOM_KEY NOT NULL,
    PRODUCT_CRM  DOM_KEY NOT NULL,
    KOL1         DOM_SMAL_INT NOT NULL,
    DT1          DOM_DATE NOT NULL,
    KOL2         DOM_SMAL_INT,
    DT2          DOM_DATE,
    DAY_REG      DOM_SMAL_INT,
    FLAG_MONTH   DOM_SMAL_INT,
    CS_TYPE      DOM_SMAL_INT,
    DT_GET       DOM_DATE_TIME,
    CRM_KOL      DOM_SMAL_INT,
    LICENZ_KOL   DOM_SMAL_INT,
    L_TYPE       DOM_SMAL_INT DEFAULT 0,
    CRM_OPR_ID   DOM_KEY,
    DT_UPDATE    DOM_DATE_TIME,
    OLD_KOL      DOM_SMAL_INT,
    OLD_DT       DOM_DATE,
    FL_CHECK     DOM_SMAL_INT DEFAULT 0 NOT NULL,
    STATUS       DOM_FLAG DEFAULT 0 NOT NULL
);


CREATE TABLE CRM_KLI (
    ID        DOM_KEY NOT NULL,
    KLI_ID    DOM_KEY NOT NULL,
    CRM_ID    DOM_KEY NOT NULL,
    CRM_NAME  DOM_CHAR_50 NOT NULL
);


CREATE TABLE CRM_PRODUCT (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_30 NOT NULL
);


CREATE TABLE DEF_RAZ_SIMPLE (
    ID             DOM_KEY NOT NULL,
    SIMPLE_ID      DOM_KEY NOT NULL,
    RAZFASOVKA_ID  DOM_KEY NOT NULL
);


CREATE TABLE DELIVERY_CURRENCY (
    ID              DOM_KEY NOT NULL,
    IN_EL_ID        INTEGER,
    CURRENCY_PRICE  DOM_CENA,
    CURRENCY_ID     DOM_KEY_SMALL,
    EXCHANGE_RATE   KURS
);


CREATE TABLE DOC (
    ID      DOM_KEY NOT NULL,
    NOM     DOM_INT,
    OPR_ID  DOM_KEY
);


CREATE TABLE DOCUMENTS (
    ID              DOM_KEY NOT NULL,
    USER_ID         DOM_KEY NOT NULL,
    DT              DOM_DATE_TIME NOT NULL,
    DOC_TYPE        DOM_KEY NOT NULL,
    STATUS          DOM_FLAG NOT NULL,
    FILE_NAME       DOM_CHAR_100 NOT NULL,
    NOTE            DOM_CHAR_100,
    DOC_CODE        DOM_SMAL_INT NOT NULL,
    RECORD_ID       DOM_KEY NOT NULL,
    DT_DELETE       DOM_DATE_TIME,
    DELETE_USER_ID  DOM_KEY
);


CREATE TABLE DOCUMENTS_TIP (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_100
);


CREATE TABLE DOCUMENTS_TIP_CODE (
    ID               DOM_KEY NOT NULL,
    CODE             DOM_INT,
    DOCUMENT_TIP_ID  DOM_KEY
);


CREATE TABLE DOST_CENI (
    ID         DOM_KEY NOT NULL,
    LAST_CENA  DOM_CENA,
    IN_EL_ID   DOM_KEY
);


CREATE TABLE DOST_IMPORT_KLI_MAP (
    ID           INTEGER NOT NULL,
    IN_KLI_NAME  VARCHAR(100) NOT NULL,
    KLI_ID       INTEGER NOT NULL
);


CREATE TABLE DOST_IMPORT_RAZF_MAP (
    ID          INTEGER NOT NULL,
    IN_RAZF_ID  INTEGER NOT NULL,
    RAZF_ID     INTEGER NOT NULL,
    KLI_ID      INTEGER NOT NULL
);


CREATE TABLE DOST_IMPORT_SIMPLE_MAP (
    ID            DOM_KEY NOT NULL,
    IN_SIMPLE_ID  DOM_KEY NOT NULL,
    SIMPLE_ID     DOM_KEY NOT NULL,
    KLI_ID        DOM_KEY NOT NULL
);


CREATE TABLE DOST_NODE (
    ID           INTEGER NOT NULL,
    DOST_ID      INTEGER NOT NULL,
    RAZ_DOST_ID  INTEGER NOT NULL
);


CREATE TABLE DVSK_DOK_TYPE (
    ID          DOM_KEY NOT NULL,
    DOK_TYPE    DOM_FLAG,
    NAME        DOM_CHAR_20,
    SHORT_NAME  DOM_CHAR_10
);


CREATE TABLE DVSK_EL (
    ID             INTEGER NOT NULL,
    PARTIDA_EL_ID  INTEGER,
    KLI_ID_PROIZV  INTEGER,
    TYPE_DOK       DOM_KEY,
    NOM_DOK        VARCHAR(20),
    BG_NOMER       DOM_CHAR_15,
    DATE_PROIZV    DOM_DATE,
    PROIZHOD       DOM_KEY
);


CREATE TABLE DVSK_OPR (
    ID             INTEGER NOT NULL,
    OPR_ID         INTEGER,
    NCAR           VARCHAR(20),
    TYPE_DOK       DOM_KEY,
    DOK            VARCHAR(20),
    USER_ID        INTEGER,
    TIME_PRIEMANE  DOM_TIME,
    DRIVER_NAME    DOM_CHAR_50 COLLATE PXW_CYRL,
    TEMP           VARCHAR(5)
);


CREATE TABLE EGROUPS (
    ID           DOM_KEY NOT NULL,
    NAME         DOM_CHAR_50,
    SEL_ID       DOM_KEY,
    PARENT_ID    DOM_KEY,
    DESCRIPTION  DOM_CHAR_1000
);


CREATE TABLE ESIMPLE (
    ID                  DOM_KEY NOT NULL,
    SIMPLE_ID           DOM_KEY,
    ACTIVEN             DOM_FLAG,
    DESCRIPTION         VARCHAR(500),
    DETAIL_DESCRIPTION  VARCHAR(1000),
    META_KEYWORDS       VARCHAR(500),
    META_DESCRIPTION    VARCHAR(1000),
    MANUFACTURER_ID     DOM_KEY
);


CREATE TABLE ETIKETI (
    ID               DOM_KEY NOT NULL,
    NAME             VARCHAR(30),
    OPISANIE_ETIKET  DOM_CHAR_1000
);


CREATE TABLE EXCHANGE_SN (
    ID            DOM_KEY NOT NULL,
    OPR_ID        DOM_KEY NOT NULL,
    SIMPLE_ID     DOM_KEY NOT NULL,
    OLD_EL_ID     DOM_KEY NOT NULL,
    NEW_EL_ID     DOM_KEY NOT NULL,
    OLD_SN        DOM_CHAR_30 NOT NULL,
    NEW_SN        DOM_CHAR_30 NOT NULL,
    TO_SIMPLE_ID  DOM_KEY NOT NULL
);


CREATE TABLE EXPLANATORY (
    ID          DOM_KEY NOT NULL,
    NAME        DOM_CHAR_100,
    NAME_SHORT  DOM_CHAR_30,
    TIP         DOM_KEY,
    FORMULA     DOM_CHAR_100
);


CREATE TABLE EXPLANATORY_TYPE (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_30
);


CREATE TABLE EXPORT_OPR (
    ID      DOM_KEY NOT NULL,
    TIP     DOM_SMAL_INT,
    OPR_ID  DOM_KEY
);


CREATE TABLE EXPORT_SYNC (
    ID              DOM_KEY NOT NULL,
    VENDOR_ID       DOM_SMAL_INT,
    EXPORT_TYPE_ID  DOM_SMAL_INT,
    DAYS            DOM_SMAL_INT,
    TIME_TO_SEND    DOM_TIME,
    DATE_OF_YEAR    DOM_CHAR_8,
    MONTHS          DOM_SMAL_INT
);


CREATE TABLE EXPORT_TYPES (
    ID         DOM_KEY_SMALL NOT NULL,
    TYPE_NAME  DOM_CHAR_100
);


CREATE TABLE EXPORT_VENDORS (
    ID           DOM_KEY_SMALL NOT NULL,
    VENDOR_NAME  DOM_CHAR_100
);


CREATE TABLE EXPORTED_OPERATIONS (
    ID        DOM_KEY NOT NULL,
    OPR_ID    DOM_KEY,
    SYS_DATE  DOM_DATE_TIME
);


CREATE TABLE EXPORTS (
    ID              DOM_KEY NOT NULL,
    TIP             DOM_SMAL_INT,
    EXPORT_DATE     DOM_DATE_TIME,
    USER_ID         DOM_KEY,
    LAST_OPR_ID     DOM_INT,
    EXPORT_SYNC_ID  DOM_SMAL_INT,
    SYNC_DATE_TIME  DOM_DATE_TIME
);


CREATE TABLE EXTENDED_VARANTY_NODE (
    ID              DOM_KEY NOT NULL,
    OUT_EL_ID       DOM_KEY NOT NULL,
    KLI_VARANTY_ID  DOM_KEY NOT NULL,
    DT              DOM_DATE_TIME NOT NULL
);


CREATE TABLE FAK (
    ID              INTEGER NOT NULL,
    OPR_ID          INTEGER,
    NUMBER          VARCHAR(10),
    TIP             SMALLINT,
    SUMA            CURRENCY,
    NEOBLAGAEMA     CURRENCY,
    DDS             CURRENCY,
    TOTAL           CURRENCY,
    V_BROI          DOM_BOOLEAN,
    V_BROI_DDS      DOM_BOOLEAN,
    MOL             VARCHAR(30),
    POLUCHENA_OT    VARCHAR(30),
    POLUCHENA_DATE  DATE,
    POLUCHENA_EGN   VARCHAR(10),
    PALNOM          INTEGER,
    PALNOM_DATE     DATE,
    PASP_NUMBER     INTEGER,
    PASP_PU         VARCHAR(15),
    PASP_DATE       DATE,
    OWNER_ID        SMALLINT,
    OBEKT_ID        SMALLINT,
    DATE_SDELKA     DOM_DATE NOT NULL,
    SUMA_TO         DOM_SUMA,
    VALUTA_ID       DOM_KEY,
    KURS_VALUTA     DOM_CENA,
    POR_NUM         DOM_CHAR_30,
    PAY_TYPE        DOM_SMAL_INT DEFAULT 1,
    SUMA_AKCIZ      DOM_SUMA,
    FAK_ACCOUNTING  DOM_INT,
    TIP2            DOM_SMAL_INT,
    FIRMA_ID        DOM_KEY,
    DOWNLOAD_DATE   DOM_DATE_TIME,
    EFAK            DOM_FLAG
);


CREATE TABLE FAK_EL (
    ID             INTEGER NOT NULL,
    OPR_ID         INTEGER,
    TEXT           DOM_CHAR_1000,
    ME_ID          SMALLINT,
    KOL            QTY,
    CENA           DOM_CENA,
    DDS            DOM_CENA,
    SUMA_DDS       DOM_SUMA DEFAULT 0 NOT NULL,
    SUMA_TOTAL     DOM_SUMA DEFAULT 0 NOT NULL,
    CENA_FIX       DOM_CENA,
    TOST           DOM_CENA,
    SIMPLE_ID      INTEGER,
    RAZ_ID         DOM_KEY,
    RAZ_KOL        DOM_KOL,
    TEXT_LAT       DOM_CHAR_100,
    AVANS_OPR_ID   DOM_KEY,
    VAT_REASON_ID  DOM_KEY
);


CREATE TABLE FAK_EL_IN_EL_NODE (
    ID         DOM_KEY NOT NULL,
    IN_EL_ID   DOM_KEY NOT NULL,
    FAK_EL_ID  DOM_KEY NOT NULL,
    KOL        DOM_KOL DEFAULT 0 NOT NULL
);


CREATE TABLE FAK_IN (
    ID                  INTEGER NOT NULL,
    OPR_ID              INTEGER,
    NUMBER              VARCHAR(10),
    TIP                 SMALLINT,
    SUMA                CURRENCY,
    NEOBLAGAEMA         CURRENCY,
    DDS                 CURRENCY,
    TOTAL               CURRENCY,
    SKLAD_ID            SMALLINT,
    FAK_IN_TIP          SMALLINT,
    SUMA_NO_DK          CURRENCY,
    DAN_PER             DATE,
    PAY_TIP_DDS         SMALLINT DEFAULT 1 NOT NULL,
    PAY_TIP             DOM_SMAL_INT,
    SCHETOVODNA_SMETKA  DOM_STR_3
);


CREATE TABLE FAK_IN_EL_NODE (
    ID         INTEGER NOT NULL,
    FAK_IN_ID  INTEGER NOT NULL,
    IN_EL_ID   INTEGER NOT NULL
);


CREATE TABLE FAK_IN_SUMI (
    ID           DOM_KEY NOT NULL,
    OPR_ID       DOM_KEY,
    BASE_SUM     CURRENCY,
    NO_TAX_SUM   CURRENCY,
    VAT_SUM      CURRENCY,
    TOTAL_SUM    CURRENCY,
    VAT_PERCENT  DOM_PERCENT,
    SUM_TO_PAY   CURRENCY
);


CREATE TABLE FAK_KI_NUMBER (
    ID          DOM_KEY_SMALL NOT NULL,
    OPR_ID      DOM_KEY,
    NUMBER      DOM_CHAR_10,
    OPR_FAK_ID  DOM_KEY
);


CREATE TABLE FAK_OUT_EL_NODE (
    ID         DOM_KEY NOT NULL,
    OUT_EL_ID  DOM_KEY NOT NULL,
    FAK_EL_ID  DOM_KEY NOT NULL,
    KOL        DOM_KOL DEFAULT 0 NOT NULL
);


CREATE TABLE FAK_PROD (
    ID      INTEGER NOT NULL,
    OPR_ID  INTEGER,
    FAK_ID  INTEGER
);


CREATE TABLE FAK_PROD_REAL_PROD_NODE (
    ID               DOM_KEY NOT NULL,
    PROD_OPR_ID      DOM_KEY NOT NULL,
    FKT_PROD_OPR_ID  DOM_KEY NOT NULL
);


CREATE TABLE FAKTURA_OSNOVANIE (
    ID      DOM_KEY NOT NULL,
    OSN_ID  DOM_KEY,
    FAK_ID  DOM_KEY
);


CREATE TABLE FIRMI (
    ID               INTEGER NOT NULL,
    NAME_FAK         DOM_CHAR_100,
    COMMENT          VARCHAR(50),
    ADRES            DOM_CHAR_100,
    MOL              DOM_CHAR_100,
    DAN_NUM          VARCHAR(10),
    BULSTAT          VARCHAR(13),
    REG_DDS          DOM_BOOLEAN,
    EMAIL            VARCHAR(30),
    HTTP             VARCHAR(30),
    TEL              VARCHAR(30),
    PLACE_ID         INTEGER,
    IDNOMDDS         VARCHAR(15),
    DEF_OWNERBANKA   DOM_KEY_SMALL,
    EMAIL_FAKTURA    DOM_CHAR_50 COLLATE PXW_CYRL,
    E_FAK            DOM_FLAG,
    E_FAK_USER_NAME  DOM_CHAR_15,
    EO_ID_TPD        DOM_CHAR_20,
    GLN              DOM_CHAR_20,
    FLAG_SYNC        DOM_FLAG DEFAULT 0 NOT NULL,
    LOGIN_PASSWORD   VARCHAR(32),
    IS_SYSTEM        DOM_FLAG DEFAULT 0 NOT NULL
);


CREATE TABLE FIRMI_FAK_DATA (
    ID           DOM_KEY NOT NULL,
    NAME_FAK     DOM_CHAR_100,
    ADDRES       DOM_CHAR_100,
    MOL          DOM_CHAR_30,
    IDNOM        VARCHAR(13),
    REG_DDS      DOM_BOOLEAN,
    IDNOMDDS     DOM_CHAR_15,
    PLACE_NAME   DOM_CHAR_30,
    FAK_ID       DOM_KEY,
    KLI_NAME     VARCHAR(100),
    DEF_BANKA    INTEGER,
    EO_ID_TPD    DOM_CHAR_20,
    GLN          DOM_CHAR_20,
    KLI_ADDRESS  DOM_CHAR_100
);


CREATE TABLE FISKAL_BONS (
    ID             DOM_INT64 NOT NULL,
    OPR_ID         DOM_KEY NOT NULL,
    SUMA           DOM_SUMA NOT NULL,
    DEVICE_NUMBER  DOM_FP_NUMBER,
    BON_NUMBER     DOM_INT NOT NULL,
    DT             DOM_DATE_TIME NOT NULL,
    FISK_MEM       DOM_CHAR_8
);


CREATE TABLE FP (
    ID               DOM_INT64 NOT NULL,
    FP_NUMBER        DOM_FP_NUMBER,
    GEN_NAME         DOM_FP_GEN,
    OBEKT_ID         DOM_KEY NOT NULL,
    GEN_NAME_ACTIVE  DOM_FP_GEN NOT NULL,
    INIT_VAL         DOM_INT
);


CREATE TABLE FR_REPORTS (
    ID             DOM_KEY NOT NULL,
    NAME           DOM_CHAR_100,
    NAME_CRC       DOM_INT64,
    CRC            DOM_INT64,
    DATE_MODIFIED  DOM_DATE_TIME,
    DATA           DOM_BLOB,
    READ_ONLY      DOM_FLAG,
    PC_ID          DOM_KEY
);


CREATE TABLE FU (
    ID              DOM_KEY NOT NULL,
    KLI_ID          DOM_KEY,
    FIRMA_ID        DOM_KEY,
    FU_NOM          DOM_CHAR_15 COLLATE PXW_CYRL,
    FP_NOM          DOM_CHAR_15 COLLATE PXW_CYRL,
    CENA1           ED_CENA,
    CENA2           ED_CENA,
    COMMENT         DOM_CHAR_100,
    DT              DOM_DATE_TIME,
    SIMPLE_ID       DOM_KEY,
    SKLAD_ID        DOM_KEY,
    OBEKT_ID        DOM_KEY,
    OBEKT_NAME      DOM_CHAR_50 COLLATE PXW_CYRL,
    OBEKT_PLACE_ID  DOM_KEY,
    OBEKT_ADRES     DOM_CHAR_100,
    DAN_PLACE_ID    DOM_KEY,
    SERV_DOG_NOM    DOM_INT,
    SERV_DOG_DATE   DOM_DATE,
    FDRID           DOM_CHAR_10,
    BIM_NOM         DOM_CHAR_30,
    LOCKED          DOM_FLAG,
    NOTE            DOM_CHAR_1000
);


CREATE TABLE FU_EXPORT_DOGOVOR (
    ID       DOM_KEY NOT NULL,
    DOGOVOR  DOM_INT,
    DT       DOM_DATE
);


CREATE TABLE FU_OBOROTI (
    ID                  DOM_KEY NOT NULL,
    KA_ID               DOM_KEY,
    OPR_ID              DOM_KEY,
    DDS_A               DOM_SUMA,
    DDS_B               DOM_SUMA,
    DDS_V               DOM_SUMA,
    DDS_G               DOM_SUMA,
    BEZ_OBOROTI         DOM_FLAG,
    STORNO_A            DOM_SUMA,
    STORNO_B            DOM_SUMA,
    STORNO_V            DOM_SUMA,
    STORNO_G            DOM_SUMA,
    STORNO_BEZ_OBOROTI  DOM_FLAG
);


CREATE TABLE FU_SER_NUM (
    ID          DOM_KEY NOT NULL,
    KA_ID       DOM_KEY,
    SER_NUM_ID  DOM_KEY
);


CREATE TABLE GARANCII (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(30) NOT NULL
);


CREATE TABLE GRFINGER (
    ID        DOM_SMAL_INT NOT NULL,
    TEMPLATE  BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    USER_ID   DOM_KEY_SMALL
);


CREATE TABLE HGROUPS (
    ID       DOM_KEY NOT NULL,
    NAME     DOM_CHAR_100,
    PERCENT  DOM_PERCENT
);


CREATE TABLE IBE$PARAMS_HISTORY (
    IBE$PH_PROCEDURE_NAME  VARCHAR(67) CHARACTER SET UNICODE_FSS NOT NULL,
    IBE$PH_PARAMS          BLOB SUB_TYPE 0 SEGMENT SIZE 80
);


CREATE TABLE IBE$VERSION_HISTORY (
    IBE$VH_ID           INTEGER NOT NULL,
    IBE$VH_MODIFY_DATE  TIMESTAMP NOT NULL,
    IBE$VH_USER_NAME    VARCHAR(67),
    IBE$VH_OBJECT_TYPE  SMALLINT NOT NULL,
    IBE$VH_OBJECT_NAME  VARCHAR(67) NOT NULL,
    IBE$VH_HEADER       BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    IBE$VH_BODY         BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    IBE$VH_DESCRIPTION  BLOB SUB_TYPE 1 SEGMENT SIZE 80
);


CREATE TABLE "IN" (
    ID       INTEGER NOT NULL,
    OPR_ID   INTEGER,
    PAY_TIP  DOM_FLAG,
    PSHOP    DOM_BOOLEAN NOT NULL,
    NOM_GAR  DOM_CHAR_30,
    RF       DOM_FLAG
);


CREATE TABLE IN_EL (
    ID             INTEGER NOT NULL,
    OPR_ID         INTEGER,
    SIMPLE_ID      INTEGER,
    KOL            QTY,
    SUMA_FR        DOM_SUMA NOT NULL,
    IS_F           SMALLINT DEFAULT 0 NOT NULL,
    SUMA_SR        DOM_SUMA NOT NULL,
    VAT_PERCENT    DOM_PERCENT,
    VAT_REASON_ID  DOM_KEY
);


CREATE TABLE IN_EL_ANUL (
    ID         INTEGER NOT NULL,
    ANUL_ID    INTEGER,
    SIMPLE_ID  INTEGER,
    KOL        QTY,
    SUMA       CURRENCY,
    KOL2       DOM_KOL
);


CREATE TABLE IN_EL_EDIT (
    ID         INTEGER NOT NULL,
    EDIT_ID    INTEGER,
    SIMPLE_ID  INTEGER,
    KOL        QTY,
    SUMA       CURRENCY,
    KOL2       DOM_KOL
);


CREATE TABLE IN_EL_RAZ_NODE (
    ID             INTEGER NOT NULL,
    IN_EL_ID       INTEGER,
    RAZFASOVKA_ID  INTEGER,
    KOL            DOUBLE PRECISION
);


CREATE TABLE IN_EL2 (
    ID        DOM_KEY NOT NULL,
    IN_EL_ID  DOM_KEY NOT NULL,
    KOL       DOM_KOL NOT NULL
);


CREATE TABLE IN_TO_FAK_EL (
    ID            DOM_KEY NOT NULL,
    IN_EL_ID      DOM_KEY NOT NULL,
    FAK_IN_EL_ID  DOM_KEY NOT NULL
);


CREATE TABLE INI (
    ID        DOM_KEY_SMALL NOT NULL,
    IP        INTEGER,
    INI_FILE  BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    NAME      DOM_CHAR_20 COLLATE PXW_CYRL,
    HDD_SN    DOM_KEY
);


CREATE TABLE INSTALLATION_PICTURES (
    ID       DOM_KEY NOT NULL,
    NOTE     DOM_CHAR_100 NOT NULL,
    PICTURE  DOM_BLOB NOT NULL
);


CREATE TABLE INSTALLATION_USERS (
    ID               DOM_KEY NOT NULL,
    INSTALLATION_ID  DOM_KEY NOT NULL,
    INSTALLER_ID     DOM_KEY NOT NULL,
    CLASS            DOM_SMAL_INT NOT NULL,
    SUMA             DOM_SUMA NOT NULL,
    BONUS_SUMA       DOM_SUMA DEFAULT 0.00 NOT NULL
);


CREATE TABLE INSTALLATIONS (
    ID               DOM_KEY NOT NULL,
    ORDER_ID         DOM_KEY NOT NULL,
    MONTAGE_SUM      DOM_SUMA DEFAULT 0.00 NOT NULL,
    USER_ID          DOM_KEY_SMALL NOT NULL,
    DT_INSTALLATION  DOM_DATE_TIME NOT NULL,
    DURATION         DOM_SMAL_INT NOT NULL,
    BONUS_SUMA       DOM_SUMA DEFAULT 0.00 NOT NULL
);


CREATE TABLE INSTALLERS (
    ID           DOM_KEY_SMALL NOT NULL,
    USER_ID      DOM_KEY_SMALL NOT NULL,
    GROUP_INDEX  DOM_SMAL_INT,
    CLASS        DOM_SMAL_INT NOT NULL
);


CREATE TABLE INSTALLERS_GROUP (
    ID            DOM_KEY_SMALL NOT NULL,
    INSTALLER_ID  DOM_SMAL_INT NOT NULL,
    GROUP_ID      DOM_INT NOT NULL
);


CREATE TABLE INTRASTAT_DATA (
    ID                      DOM_KEY NOT NULL,
    OPR_ID                  DOM_KEY,
    COUNTRY_SEND_ARRIVE_ID  SMALLINT,
    COUNTRY_ORIGIN_ID       DOM_KEY_SMALL,
    DEAL_TYPE               DOM_KEY,
    DELIVERY_CONDITIONS     DOM_INT,
    TRANSPORT_TYPE          DOM_INT,
    VEHICLES_NATIONALITY    DOM_KEY,
    REGION                  DOM_KEY,
    ADDITIONAL_AMOUNT       DOM_SUMA,
    REFERENCE_DATE          DOM_DATE
);


CREATE TABLE INTRASTAT_DEAL_TYPE (
    ID       DOM_KEY NOT NULL,
    NAME     DOM_CHAR_100,
    CODE     DOM_CHAR_10,
    AKTIVEN  DOM_FLAG NOT NULL
);


CREATE TABLE INTRASTAT_DELIVERY_CONDITIONS (
    ID       DOM_KEY NOT NULL,
    TERMIN   DOM_CHAR_100,
    NAME     DOM_CHAR_100,
    CODE     DOM_CHAR_10,
    AKTIVEN  DOM_FLAG NOT NULL
);


CREATE TABLE INTRASTAT_REGION (
    ID       DOM_KEY NOT NULL,
    NAME     DOM_CHAR_100,
    CODE     DOM_CHAR_10,
    AKTIVEN  SMALLINT NOT NULL
);


CREATE TABLE INTRASTAT_TRANSPORT_TYPE (
    ID       DOM_KEY NOT NULL,
    NAME     DOM_CHAR_100,
    CODE     DOM_CHAR_10,
    AKTIVEN  DOM_FLAG NOT NULL
);


CREATE TABLE INV (
    ID             INTEGER NOT NULL,
    OPR_ID         INTEGER,
    SUMA_LIPSA     CURRENCY,
    SUMA_IZLISHAK  CURRENCY,
    TIP            DOM_SMAL_INT DEFAULT 0 NOT NULL
);


CREATE TABLE INV_IZL (
    ID        DOM_KEY NOT NULL,
    IN_EL_ID  DOM_KEY NOT NULL,
    KOL       DOM_KOL,
    KOL_IZL   DOM_KOL,
    ED_CENA   DOM_CENA
);


CREATE TABLE INV_NACH_INI (
    ID          INTEGER NOT NULL,
    OPR_INV_ID  INTEGER NOT NULL
);


CREATE TABLE INV_OPIS (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY NOT NULL,
    KOL_S      DOM_KOL NOT NULL,
    CENA_S     DOM_CENA NOT NULL,
    KOL_F      DOM_KOL NOT NULL,
    CENA_F     DOM_CENA NOT NULL,
    KOL2_F     DOM_KOL,
    KOL2_S     DOM_KOL
);


CREATE TABLE IZL (
    ID             INTEGER NOT NULL,
    KOL            QTY,
    OUT_EL_ID      INTEGER,
    KOL_IZL        DOUBLE PRECISION,
    LAST_CENA      DOUBLE PRECISION,
    FLAG_LOCK_KOR  DOM_FLAG DEFAULT 0 NOT NULL,
    SIMPLE_ID      DOM_KEY NOT NULL,
    SKLAD_ID       DOM_SMAL_INT NOT NULL
);


CREATE TABLE IZP (
    ID          INTEGER NOT NULL,
    OPR_ID      INTEGER,
    IZP_TIP_ID  SMALLINT,
    SUMA_SR     CURRENCY,
    SUMA_FR     CURRENCY
);


CREATE TABLE IZP_TIP (
    ID           SMALLINT NOT NULL,
    NAME         VARCHAR(30),
    USE_KLI      DOM_BOOLEAN,
    USE_COMMENT  DOM_BOOLEAN
);


CREATE TABLE KA_DEMONTAJ_DDS (
    ID                  DOM_KEY NOT NULL,
    KA_ID               DOM_KEY,
    OPR_ID              DOM_KEY,
    DDS_A               DOM_SUMA,
    DDS_B               DOM_SUMA,
    DDS_V               DOM_SUMA,
    DDS_G               DOM_SUMA,
    BEZ_OBOROTI         DOM_FLAG,
    STORNO_A            DOM_SUMA,
    STORNO_B            DOM_SUMA,
    STORNO_V            DOM_SUMA,
    STORNO_G            DOM_SUMA,
    STORNO_BEZ_OBOROTI  DOM_FLAG
);


CREATE TABLE KA_INFO (
    ID          DOM_KEY NOT NULL,
    FU_NOM      DOM_CHAR_15 NOT NULL COLLATE PXW_CYRL,
    FP_NOM      DOM_CHAR_15 NOT NULL COLLATE PXW_CYRL,
    STORNO_NOM  DOM_CHAR_10 COLLATE PXW_CYRL,
    AKTIVEN     DOM_FLAG DEFAULT 1 NOT NULL
);


CREATE TABLE KA_LOG_NODE (
    ID         DOM_KEY NOT NULL,
    KA_ID      DOM_KEY,
    KA_ID_OLD  DOM_KEY
);


CREATE TABLE KA_PROIZVODITEL (
    ID       DOM_KEY NOT NULL,
    NAME     DOM_CHAR_100,
    BULSTAT  DOM_CHAR_15
);


CREATE TABLE KA_SER_NUM (
    ID          DOM_KEY NOT NULL,
    KA_ID       DOM_KEY,
    SER_NUM_ID  DOM_KEY
);


CREATE TABLE KASA (
    ID           SMALLINT NOT NULL,
    NAME         VARCHAR(20),
    USER_ID      SMALLINT,
    OBEKT_ID     SMALLINT,
    IS_ACTIVE    SMALLINT NOT NULL,
    ACTIV_CODE2  DOM_FLAG DEFAULT 0 NOT NULL
);


CREATE TABLE KI_DOST_NODE (
    ID             DOM_KEY NOT NULL,
    KI_OPR_ID      DOM_KEY NOT NULL,
    SUB_KI_OPR_ID  DOM_KEY NOT NULL
);


CREATE TABLE KI_DOST_SUMA (
    ID           DOM_KEY NOT NULL,
    KI_OPR_ID    DOM_KEY NOT NULL,
    PAY_TIP      DOM_FLAG DEFAULT 0 NOT NULL,
    VAT_PERCENT  DOM_PERCENT
);


CREATE TABLE KI_DOST_SUMA_EL (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY,
    SIMPLE_ID  DOM_KEY,
    KOL        DOM_KOL,
    CENA       DOM_CENA,
    SUMA       DOM_SUMA,
    IN_EL_ID   DOM_KEY
);


CREATE TABLE KI_DOST_SUMA_FAK (
    ID          DOM_KEY NOT NULL,
    KI_SUMA_ID  DOM_KEY NOT NULL,
    FAK_IN_ID   DOM_KEY NOT NULL
);


CREATE TABLE KI_NODE (
    ID             DOM_KEY NOT NULL,
    KI_OPR_ID      DOM_KEY NOT NULL,
    SUB_KI_OPR_ID  DOM_KEY NOT NULL
);


CREATE TABLE KI_PROD_SUMA_EL (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY,
    SIMPLE_ID  DOM_KEY,
    KOL        DOM_KOL,
    CENA       DOM_CENA,
    SUMA       DOM_SUMA,
    OUT_EL_ID  DOM_KEY,
    SUMI_ID    DOM_KEY
);


CREATE TABLE KLI (
    ID                INTEGER NOT NULL,
    KLI_GROUP_ID      SMALLINT,
    CODE              VARCHAR(15),
    NAME              VARCHAR(100) COLLATE PXW_CYRL,
    KLIENT            DOM_BOOLEAN,
    DOSTAV            DOM_BOOLEAN,
    PROIZV            DOM_BOOLEAN,
    PERCENT           NUMERIC(8,4),
    COMMENT           VARCHAR(30),
    ADRES             DOM_CHAR_100,
    TEL               DOM_CHAR_100,
    FOLDER            VARCHAR(128),
    FIRMA_ID          INTEGER,
    DIST              DOM_BOOLEAN,
    ZA_KASA           DOM_BOOLEAN,
    FLAG_CHECK        SMALLINT DEFAULT 0 NOT NULL,
    OBEKT_ID          INTEGER,
    PLACE_ID          INTEGER,
    PADEJ             SMALLINT default 0 NOT NULL,
    DEF_SEL_ID        INTEGER,
    TIP_PRINT         DOM_FLAG,
    DEF_DOST_PRINT    VARCHAR(255),
    DEF_PROD_PRINT    VARCHAR(255),
    DEF_FAK_PRINT     VARCHAR(255),
    DEF_MOVE_PRINT    VARCHAR(255),
    PADEJ_DDS         DOM_SMAL_INT DEFAULT 0 NOT NULL,
    FLAG_PAY          DOM_FLAG DEFAULT 0 NOT NULL,
    DAYS_DOST         DOM_KEY_SMALL,
    FILE_EXPORT_PATH  DOM_CHAR_100,
    DNI_DO_PADEJ      DOM_SMAL_INT,
    NAME_ENGL         DOM_CHAR_100,
    BONUS_TOCHKI      DOM_KEY DEFAULT 0 NOT NULL,
    ADD_DDS           DOM_FLAG DEFAULT 0,
    SLEDI             DOM_FLAG,
    FLAG_PAY_FAKT     DOM_SMAL_INT DEFAULT 0,
    LIST_ID           DOM_INT,
    COEFF             NUMERIC(3,2),
    CFG_LOG_ID        DOM_KEY,
    CODE2             DOM_CHAR_20,
    DVSK_PRINT        DOM_FLAG,
    DNI_FAK_PADEJ     SMALLINT DEFAULT 0 NOT NULL,
    CHECK_FAK         DOM_FLAG,
    VOP               DOM_FLAG NOT NULL,
    LATITUDE          DOM_KOL,
    LONGITUDE         DOM_KOL,
    RADIUS            DOM_SMAL_INT,
    EMAIL             DOM_CHAR_100,
    AGENT             DOM_SMAL_INT,
    CL_ID             DOM_KEY,
    F_ID_TPD          DOM_CHAR_20,
    GLN               DOM_CHAR_20,
    DEF_ORDER_PRINT   VARCHAR(255)
);


CREATE TABLE KLI_ABONAMENT (
    ID             DOM_KEY NOT NULL,
    ABONAMENT_DO   DATE,
    KLI_ID         DOM_KEY,
    OBEKT_ID       DOM_KEY,
    TIP_ABONAMENT  SMALLINT
);


CREATE TABLE KLI_AGENTS (
    ID        DOM_KEY_SMALL NOT NULL,
    NAME      DOM_CHAR_50,
    CODE      DOM_CHAR_15,
    "ACTIVE"  DOM_BOOLEAN,
    KLI_ID    DOM_KEY NOT NULL
);


CREATE TABLE KLI_DIST_NODE (
    ID       INTEGER NOT NULL,
    KLI_ID   INTEGER NOT NULL,
    DIST_ID  INTEGER NOT NULL,
    PERCENT  DOM_PERCENT
);


CREATE TABLE KLI_DOST_NODE (
    KLI_ID     DOM_KEY,
    SIMPLE_ID  DOM_KEY,
    ID         DOM_KEY NOT NULL
);


CREATE TABLE KLI_EXTENDED_VARANTY (
    ID            DOM_KEY NOT NULL,
    KLI_ID        DOM_KEY NOT NULL,
    NAME          DOM_CHAR_50 NOT NULL,
    ADDRESS       DOM_CHAR_100 NOT NULL,
    PHONE_NUMBER  DOM_CHAR_15 NOT NULL,
    EMAIL         DOM_CHAR_50 NOT NULL
);


CREATE TABLE KLI_FIRMA_NODE (
    ID            DOM_KEY NOT NULL,
    KLI_ID        DOM_KEY,
    FIRMA_ID      DOM_KEY,
    INVOICE       DOM_SMAL_INT DEFAULT 0,
    INVOICE_ENGL  DOM_SMAL_INT DEFAULT 0
);


CREATE TABLE KLI_GROUP (
    ID      SMALLINT NOT NULL,
    NAME    VARCHAR(25),
    CODE    VARCHAR(15),
    PARENT  SMALLINT
);


CREATE TABLE KLI_KASA_MAIL_NODE (
    ID       DOM_KEY NOT NULL,
    KLI_ID   DOM_KEY NOT NULL,
    KASA_ID  DOM_KEY NOT NULL,
    EMAIL    DOM_CHAR_50 NOT NULL
);


CREATE TABLE KLI_POCKET_NODE (
    ID           DOM_KEY NOT NULL,
    KLI_ID       DOM_KEY,
    POCKET_ID    DOM_KEY NOT NULL,
    SELEKCIQ_ID  DOM_KEY
);


CREATE TABLE KLI_PRAGOVE (
    ID        INTEGER NOT NULL,
    KLI_ID    INTEGER,
    NOM_PROD  INTEGER,
    SUMA      DOUBLE PRECISION
);


CREATE TABLE KLI_SKLAD_NODE (
    ID           DOM_KEY NOT NULL,
    KLI_ID       DOM_KEY,
    SKLAD_ID     DOM_KEY NOT NULL,
    SELEKCIQ_ID  DOM_KEY
);


CREATE TABLE KLI_TOCHKI_NODE (
    ID             DOM_KEY NOT NULL,
    OPR_CHANGE_ID  DOM_KEY,
    POINTS_OLD     DOM_INT,
    POINTS_NEW     DOM_INT
);


CREATE TABLE KLI_USER_NODE (
    ID       DOM_KEY NOT NULL,
    USER_ID  DOM_KEY,
    KLI_ID   DOM_KEY
);


CREATE TABLE KONSIGNACIA (
    ID          DOM_KEY NOT NULL,
    OPR_OUT_ID  DOM_KEY NOT NULL,
    OPR_IN_ID   DOM_KEY NOT NULL
);


CREATE TABLE LAYOUTS (
    ID        DOM_KEY NOT NULL,
    NAME      DOM_CHAR_50,
    USER_ID   DOM_KEY,
    SHARE     DOM_BOOLEAN,
    FORM_CRC  DOM_INT,
    LAYOUT    DOM_BLOB_TEXT,
    FILTERS   DOM_BLOB_TEXT,
    SQL       DOM_BLOB_TEXT
);


CREATE TABLE LICENCE_EL (
    ID         DOM_KEY NOT NULL,
    SN         DOM_CHAR_30,
    OUT_EL_ID  DOM_KEY,
    IN_EL_ID   DOM_KEY,
    SUMA       DOM_SUMA,
    NAME       DOM_CHAR_30,
    REG_NUM    DOM_CHAR_15,
    SUMA_RET   DOM_SUMA,
    EL_GEN_ID  DOM_KEY
);


CREATE TABLE LICENZ_PROD_NODE (
    ID           DOM_KEY NOT NULL,
    OPR_PROD_ID  DOM_KEY NOT NULL,
    LICENZ_ID    DOM_KEY NOT NULL
);


CREATE TABLE LOCK_OPR (
    ID       DOM_KEY NOT NULL,
    USER_ID  DOM_KEY NOT NULL,
    DT       DOM_DATE_TIME DEFAULT current_timestamp NOT NULL,
    IS_LOCK  DOM_SMAL_INT DEFAULT 0 NOT NULL
);


CREATE TABLE LOCK_OPR_EL (
    ID       DOM_KEY NOT NULL,
    LOCK_ID  DOM_KEY NOT NULL,
    OPR_ID   DOM_KEY NOT NULL
);


CREATE TABLE LOG_CENI_DDS (
    ID        DOM_KEY NOT NULL,
    TIP_DDS   DOM_SMAL_INT NOT NULL,
    OPR_ID    DOM_KEY NOT NULL,
    TIP_CENI  DOM_SMAL_INT NOT NULL,
    USER_ID   DOM_KEY_SMALL NOT NULL,
    DATETIME  DOM_DATE_TIME
);


CREATE TABLE ME (
    ID         SMALLINT NOT NULL,
    NAME       CHAR(2),
    NAME_LONG  VARCHAR(15),
    KOEF       SMALLINT,
    IS_BROI    SMALLINT DEFAULT 0 NOT NULL,
    PREFIX     CHAR(2),
    NAME_ENG   DOM_CHAR_15 COLLATE PXW_CYRL,
    KOEF_ET    DOM_SMAL_INT
);


CREATE TABLE MESA (
    ID                DOM_KEY NOT NULL,
    MARKA             DOM_CHAR_30 NOT NULL,
    STRANA_R          DOM_KEY_SMALL NOT NULL,
    STRANA_G          DOM_KEY_SMALL NOT NULL,
    STRANA_K          DOM_KEY_SMALL NOT NULL,
    ELEMENT_ID        DOM_KEY NOT NULL,
    TIP               DOM_KEY_SMALL,
    AGE               DOM_CHAR_20,
    CATEGORY          DOM_CHAR_10,
    STEPEN_ZALOENOST  DOM_CHAR_10,
    TEGLO             DOM_KOL
);


CREATE TABLE MESA_TIP (
    ID    DOM_KEY_SMALL NOT NULL,
    NAME  DOM_CHAR_10 NOT NULL
);


CREATE TABLE MESSAGES (
    ID       INTEGER NOT NULL,
    USER_ID  INTEGER NOT NULL,
    OT       VARCHAR(30) NOT NULL,
    TEXT     VARCHAR(300) NOT NULL,
    DT       DOM_DATE_TIME,
    CHECKED  DOM_BOOLEAN
);


CREATE TABLE METRO_ARTICLES (
    ID                  DOM_KEY NOT NULL,
    ARTICLE_LIBRARY_ID  DOM_CHAR_300,
    NAME                DOM_CHAR_300,
    SUB_SYS_ID          DOM_CHAR_50,
    EAN                 DOM_CHAR_15,
    CATEGORY_ID         DOM_CHAR_50
);


CREATE TABLE METRO_EXPORT_OPR (
    ID         INTEGER NOT NULL,
    EXPORT_ID  INTEGER,
    OPR_ID     INTEGER
);


CREATE TABLE METRO_EXPORT_SIMPLES (
    ID            DOM_KEY NOT NULL,
    TO_SIMPLE_ID  DOM_INT,
    EXPORT_ID     DOM_INT
);


CREATE TABLE METRO_INVOICE_DOCUMENTS (
    ID                       DOM_KEY NOT NULL,
    DOCUMENT_ID              DOM_CHAR_100,
    DOCUMENT_NUMBER          DOM_CHAR_10,
    DOCUMENT_DATE            DOM_DATE,
    RELATED_DOCUMENT_NUMBER  DOM_CHAR_10,
    ISSUER                   VARCHAR(13),
    RECIPIENT                VARCHAR(13),
    LOCATION                 DOM_CHAR_20,
    INVOICE_TYPE_CODE        DOM_CHAR_8,
    CLASSIFICATION_DESC      DOM_CHAR_8,
    IMPORTED                 DOM_SMAL_INT,
    IMPORTED_OPR_ID          DOM_INT,
    CLIENT_ID                DOM_CHAR_20
);


CREATE TABLE MOVE (
    ID          INTEGER NOT NULL,
    OPR_OUT_ID  INTEGER,
    OPR_IN_ID   INTEGER,
    SUMA_SR     DOUBLE PRECISION
);


CREATE TABLE NAL (
    ID                 INTEGER NOT NULL,
    SIMPLE_ID          INTEGER,
    SKLAD_ID           INTEGER,
    KOL_NAL            QTY,
    SUMA               CURRENCY,
    LAST_CENA          DOM_CENA,
    SUMA_FR            CURRENCY,
    KOL_RZV            DOM_KOL,
    DATETIME_LASTCENA  DOM_DATE_TIME,
    KOL_IZL            DOM_KOL NOT NULL,
    MIN_QTY            DOM_KOL,
    MAX_QTY            DOM_KOL,
    LAST_DOST_OPR_ID   DOM_KEY
);


CREATE TABLE NAL_F (
    ID         INTEGER NOT NULL,
    SIMPLE_ID  INTEGER,
    KOL        DOUBLE PRECISION,
    SUMA_SR    DOUBLE PRECISION,
    SUMA_FR    DOUBLE PRECISION,
    LAST_CENA  NUMERIC(8,3)
);


CREATE TABLE NAL2 (
    ID      DOM_KEY NOT NULL,
    KOL     DOM_KOL NOT NULL,
    NAL_ID  DOM_KEY NOT NULL
);


CREATE TABLE OBEKT (
    ID                SMALLINT NOT NULL,
    NAME              VARCHAR(20),
    FAK_NUM           VARCHAR(10),
    PLACE_ID          INTEGER,
    LOCAL_FAK_NUM     VARCHAR(10),
    GARANCIA_NUM      INTEGER,
    LOCAL_STORNO_NUM  DOM_CHAR_10,
    EXPORT_NUMBER     DOM_CHAR_15,
    EMAIL             DOM_CHAR_50,
    ADDRESS           DOM_CHAR_100,
    PHONE_NUMBER      DOM_CHAR_30,
    NAME_LAT          DOM_CHAR_50
);


CREATE TABLE OFERTA (
    ID      INTEGER NOT NULL,
    NAME    VARCHAR(100),
    OPR_ID  INTEGER
);


CREATE TABLE OFERTA_EL (
    ID             INTEGER NOT NULL,
    SIMPLE_ID      INTEGER,
    CENA           DOUBLE PRECISION,
    OPR_ID         INTEGER,
    CENA_IN        DOUBLE PRECISION,
    KOL            DOM_KOL,
    RAZFASOVKA_ID  DOM_KEY,
    RAZ_KOL        DOM_KOL,
    CENA_OS        DOM_CENA
);


CREATE TABLE OFF_OBEKTI_LIST (
    ID        DOM_KEY NOT NULL,
    OBEKT_ID  DOM_KEY
);


CREATE TABLE OFF_ON_LINE_LOG (
    ID          INTEGER NOT NULL,
    TABLE_NAME  VARCHAR(50),
    CMD         VARCHAR(1),
    RECORD_ID   INTEGER
);


CREATE TABLE OFFER_EL (
    ID          DOM_KEY NOT NULL,
    SIMPLE_ID   DOM_KEY NOT NULL,
    QTY         DOM_KOL NOT NULL,
    OFFER_ID    DOM_KEY NOT NULL,
    COMMENT_ID  DOM_KEY
);


CREATE TABLE OFFER_POR_NODE (
    ID        DOM_KEY NOT NULL,
    OFFER_ID  DOM_KEY NOT NULL,
    POR_ID    DOM_KEY NOT NULL
);


CREATE TABLE OFFER_TERMS (
    ID       DOM_KEY NOT NULL,
    NOTE     DOM_CHAR_100 NOT NULL,
    USER_ID  DOM_KEY,
    STATUS   DOM_FLAG,
    TERMS    DOM_BLOB_TEXT NOT NULL
);


CREATE TABLE OFFER_USER_NODE (
    ID        DOM_KEY NOT NULL,
    OFFER_ID  DOM_KEY NOT NULL,
    USER_ID   DOM_KEY NOT NULL
);


CREATE TABLE OFFERS (
    ID              DOM_KEY NOT NULL,
    OPR_ID          DOM_KEY NOT NULL,
    STATUS          DOM_FLAG NOT NULL,
    AGENT_ID        DOM_KEY,
    VISIT_DATE      DOM_DATE_TIME,
    VISIT_DURATION  DOM_TIME,
    OFFER_TYPE      DOM_SMAL_INT NOT NULL,
    ADDRESS_ID      DOM_KEY
);


CREATE TABLE OLD_IN_EL (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY NOT NULL,
    SUMA_FR    DOM_SUMA NOT NULL,
    KOL        DOM_KOL NOT NULL,
    KOL2       DOM_KOL,
    SUMA_SR    DOM_SUMA NOT NULL,
    SUMA       DOM_SUMA
);


CREATE TABLE OLD_OFFER_EL (
    ID          DOM_KEY NOT NULL,
    SIMPLE_ID   DOM_KEY NOT NULL,
    QTY         DOM_KOL NOT NULL,
    OFFER_ID    DOM_KEY NOT NULL,
    OPR_ID      DOM_KEY NOT NULL,
    COMMENT_ID  DOM_KEY
);


CREATE TABLE OLD_OFFER_USER_NODE (
    ID        DOM_KEY NOT NULL,
    OFFER_ID  DOM_KEY NOT NULL,
    USER_ID   DOM_KEY NOT NULL,
    OPR_ID    DOM_KEY NOT NULL
);


CREATE TABLE OLD_OFFERS (
    ID              DOM_KEY NOT NULL,
    OFFER_ID        DOM_KEY NOT NULL,
    OPR_ID          DOM_KEY NOT NULL,
    STATUS          DOM_FLAG NOT NULL,
    AGENT_ID        DOM_KEY,
    VISIT_DATE      DOM_DATE_TIME,
    VISIT_DURATION  DOM_TIME,
    OFFER_TYPE      DOM_SMAL_INT NOT NULL,
    ADDRESS_ID      DOM_KEY
);


CREATE TABLE OLD_OUT_EL (
    ID           DOM_KEY NOT NULL,
    OPR_ID       DOM_KEY NOT NULL,
    SIMPLE_ID    DOM_KEY NOT NULL,
    SUMA_FR      DOM_SUMA NOT NULL,
    SUMA_SR      DOM_SUMA NOT NULL,
    SUMA         DOM_SUMA NOT NULL,
    KOL          DOM_KOL NOT NULL,
    KOL2         DOM_KOL,
    PROD_CENA    DOM_CENA,
    CENA_OS      DOM_CENA,
    CENA_CL      DOM_CENA,
    VAT_PERCENT  DOM_PERCENT NOT NULL
);


CREATE TABLE OLD_OUT_EL_PE_NODE (
    ID             DOM_KEY NOT NULL,
    OLD_OUT_EL_ID  DOM_KEY NOT NULL,
    PARTIDA_EL_ID  DOM_KEY NOT NULL,
    IN_EL_ID       DOM_KEY
);


CREATE TABLE OLD_PARI_EL (
    ID          DOM_KEY NOT NULL,
    OPR_ID      DOM_KEY NOT NULL,
    KASA_ID     DOM_KEY_SMALL,
    OBEKT_ID    DOM_KEY_SMALL,
    SUMA        DOM_SUMA NOT NULL,
    VALUTA_ID   DOM_KEY NOT NULL,
    KURS        DOM_CENA NOT NULL,
    TIP         DOM_FLAG NOT NULL,
    PARI_IO_ID  DOM_KEY,
    ALLOW_FAK   DOM_SMAL_INT
);


CREATE TABLE OLD_PARI_FAK_NODE (
    ID       DOM_KEY NOT NULL,
    FAK_ID   DOM_KEY NOT NULL,
    SUMA     DOM_SUMA NOT NULL,
    NODE_ID  DOM_KEY NOT NULL
);


CREATE TABLE OLD_POR_EL_PARAMS (
    ID         DOM_KEY NOT NULL,
    POR_EL_ID  DOM_KEY NOT NULL,
    VAR_NAME   DOM_CHAR_10 NOT NULL,
    QUANTITY   QTY NOT NULL,
    QTY_COUNT  QTY
);


CREATE TABLE OLD_POR_EL_PRICE_COEF (
    ID          DOM_KEY NOT NULL,
    POR_EL_ID   DOM_KEY NOT NULL,
    SIMPLE_ID   DOM_KEY NOT NULL,
    COEFICIENT  DOM_PERCENT NOT NULL
);


CREATE TABLE OLD_REQUEST_EL (
    ID                DOM_KEY NOT NULL,
    OPR_REQUEST_ID    DOM_INT,
    NOMER             DOM_SMAL_INT,
    SIMPLE_ID         DOM_INT,
    MASTER_SIMPLE_ID  DOM_INT,
    SIMPLE_CALC_ID    DOM_INT,
    KOL               DOM_KOL,
    TOT_SUM           DOM_SUMA,
    CENA_CL           DOM_CENA
);


CREATE TABLE OLD_TASKS (
    ID       DOM_KEY NOT NULL,
    TASK_ID  DOM_KEY,
    OPR_ID   DOM_KEY
);


CREATE TABLE ON_OFF_LINE_LOG (
    ID          INTEGER,
    SQL         VARCHAR(1024),
    RECIPIENTS  INTEGER
);


CREATE TABLE ONLINE_ROLES (
    ID         DOM_KEY NOT NULL,
    ROLE_NAME  DOM_CHAR_30 NOT NULL,
    NOTE       DOM_CHAR_50
);


CREATE TABLE ONLINE_USERS (
    ID              DOM_KEY_SMALL NOT NULL,
    EMAIL           DOM_CHAR_100 NOT NULL,
    USER_ID         DOM_KEY_SMALL,
    DISTRIBUTOR_ID  DOM_KEY,
    IS_ACTIVE       DOM_FLAG NOT NULL,
    PASS            DOM_CHAR_50 NOT NULL
);


CREATE TABLE OPENED_FORMS_SYS (
    ID           DOM_KEY NOT NULL,
    FORM_NAME    DOM_CHAR_100 NOT NULL,
    OPENED_FROM  DOM_INT,
    USER_ID      DOM_KEY
);


CREATE TABLE OPR (
    ID        INTEGER NOT NULL,
    OPR_TIP   SMALLINT,
    DATETIME  TIMESTAMP,
    IP        INTEGER,
    USER_ID   SMALLINT,
    SKLAD_ID  SMALLINT,
    KLI_ID    INTEGER,
    SUMA      CURRENCY,
    OPR_DATE  DATE,
    OTC_ID    DOM_KEY,
    IS_LOCK   DOM_SMAL_INT DEFAULT 0 NOT NULL,
    PC_ID     DOM_KEY_SMALL
);


CREATE TABLE OPR_AMBALAJ_NODE (
    ID              INTEGER NOT NULL,
    OPR_PROD_ID     INTEGER NOT NULL,
    OPR_AMBALAJ_ID  INTEGER NOT NULL
);


CREATE TABLE OPR_ANUL (
    ID         INTEGER NOT NULL,
    OPR_ID     INTEGER NOT NULL,
    AN_OPR_ID  INTEGER NOT NULL
);


CREATE TABLE OPR_EDIT (
    ID         INTEGER NOT NULL,
    OPR_ID     INTEGER NOT NULL,
    ED_OPR_ID  INTEGER NOT NULL,
    SKLAD_ID   SMALLINT,
    USER_ID    SMALLINT,
    KLI_ID     INTEGER,
    SUMA       CURRENCY,
    OPR_DATE   DATE
);


CREATE TABLE OPR_GARANCIA_NODE (
    ID               INTEGER NOT NULL,
    OPR_PROD_ID      INTEGER,
    OPR_GARANCIA_ID  INTEGER,
    COL_GAR          SMALLINT DEFAULT 0 NOT NULL
);


CREATE TABLE OPR_PADEJ (
    ID          INTEGER NOT NULL,
    OPR_ID      INTEGER,
    DATA_PADEJ  DATE
);


CREATE TABLE OPR_PAYMENT_NODE (
    ID               INTEGER NOT NULL,
    OPR_ID           INTEGER NOT NULL,
    PAYMENT_ID       INTEGER NOT NULL,
    SUMA             DOUBLE PRECISION,
    DATE_OF_PAYMENT  DOM_DATE_TIME
);


CREATE TABLE OPR_PRODUCTION_REQUEST (
    ID                    DOM_KEY NOT NULL,
    OPR_ID                DOM_INT,
    SUMA_KAPARO           DOM_SUMA,
    OT_SKLAD              DOM_SMAL_INT,
    V_SKLAD               DOM_SMAL_INT,
    FLAG_COMPLETE         DOM_BOOLEAN,
    KLIENT                DOM_CHAR_100,
    POR_NUM               DOM_CHAR_30,
    DT_MONTAJ             DOM_DATE,
    MONTAJ_USER_ID        DOM_KEY,
    MANUAL_COMPLETE       DOM_FLAG,
    PROD                  DOM_KEY,
    TIME_MONTAJ           DOM_TIME,
    DT_PRODUCTION_MANUAL  DOM_DATE,
    MONTAJ_FLAG           DOM_FLAG,
    ZARABOTKA_FLAG        DOM_FLAG,
    DT_MONTAJ_END         DOM_DATE,
    TIME_MONTAJ_END       DOM_TIME
);


CREATE TABLE OPR_RAZPAD_NODE (
    ID              INTEGER NOT NULL,
    OUT_EL_ID       INTEGER,
    IN_EL_ID        INTEGER,
    SUMA_SR         DOUBLE PRECISION,
    SIMPLE_CALC_ID  DOM_KEY,
    PERCENT_SUM     DOM_PERCENT
);


CREATE TABLE OPR_RECEPIES (
    ID          DOM_KEY NOT NULL,
    OPR_ID      DOM_KEY NOT NULL,
    RECEPIE_ID  DOM_KEY NOT NULL,
    KOL         DOM_KOL NOT NULL
);


CREATE TABLE OPR_RECEPIES_EL (
    ID          DOM_KEY NOT NULL,
    OPR_ID      DOM_KEY NOT NULL,
    RECEPIE_ID  DOM_KEY NOT NULL,
    SIMPLE_ID   DOM_KEY NOT NULL,
    KOL         DOM_KOL NOT NULL
);


CREATE TABLE OPR_REFUSED (
    ID              DOM_KEY NOT NULL,
    ORP_ID          DOM_KEY,
    TIP_REFUSED_ID  DOM_KEY
);


CREATE TABLE OPR_REMOTE (
    ID         DOM_KEY NOT NULL,
    OPR_ID     INTEGER,
    REMOTE_ID  INTEGER,
    OBEKT_ID   INTEGER,
    DATETIME   TIMESTAMP
);


CREATE TABLE OPR_SUMI (
    ID       DOM_KEY NOT NULL,
    OPR_ID   DOM_KEY NOT NULL,
    SUMA_SR  DOM_SUMA,
    SUMA_FR  DOM_SUMA
);


CREATE TABLE OPR_TEMPLATE (
    ID                 DOM_KEY NOT NULL,
    KLI_ID             DOM_KEY,
    OBEKT_ID           DOM_KEY,
    PAY_TIP            DOM_SMAL_INT,
    FAK                DOM_FLAG,
    ACTIVEN            DOM_FLAG,
    ACTIVEN_OT_DATA    DOM_DATE,
    ACTIVEN_DO_DATA    DOM_DATE,
    GENERIRANE_DEN     DOM_SMAL_INT,
    PADEJ_DEN          DOM_SMAL_INT,
    ACTIVEN_MESECI     DOM_SMAL_INT,
    SUMA               DOM_SUMA,
    LAST_GEN_DATE      DOM_DATE,
    USER_ID            DOM_KEY,
    SKLAD_ID           DOM_KEY_SMALL,
    SUMA_OSCL          DOM_SUMA,
    DAY_REG            DOM_SMAL_INT,
    FLAG_MONTH         DOM_SMAL_INT,
    DELETED            DOM_FLAG DEFAULT 0 NOT NULL,
    OBEKT_FAK_ID       DOM_KEY,
    TIP                DOM_SMAL_INT DEFAULT 0,
    FAK_NAME           DOM_CHAR_100,
    EFAK               DOM_FLAG,
    FIRMA_ID           DOM_KEY,
    DISTRIBUTOR_ID     DOM_KEY,
    DIST_SUMA          DOM_SUMA,
    DIST_PROCENT       DOM_PERCENT,
    DIST_ROUND_TIP_ID  DOM_KEY,
    DIST_DT_AKTIVEN    DOM_DATE,
    DIST_FAK_FLAG      DOM_FLAG,
    FAK_COMMENT        DOM_CHAR_100
);


CREATE TABLE OPR_TEMPLATE_EL (
    ID               DOM_KEY NOT NULL,
    SIMPLE_ID        DOM_KEY,
    KOL              DOM_KOL,
    CENA             DOM_CENA,
    SUMA             DOM_SUMA,
    OPR_TEMPLATE_ID  DOM_KEY,
    CENA_OSCL        DOM_CENA,
    SUMA_OSCL        DOM_SUMA
);


CREATE TABLE OPR_TEMPLATE_GEN (
    ID                 DOM_KEY NOT NULL,
    KLI_ID             DOM_KEY,
    OBEKT_ID           DOM_KEY,
    PAY_TIP            DOM_SMAL_INT,
    FAK                DOM_FLAG,
    ACTIVEN            DOM_FLAG,
    ACTIVEN_OT_DATA    DOM_DATE,
    ACTIVEN_DO_DATA    DOM_DATE,
    GENERIRANE_DEN     DOM_SMAL_INT,
    PADEJ_DEN          DOM_SMAL_INT,
    ACTIVEN_MESECI     DOM_SMAL_INT,
    SUMA               DOM_SUMA,
    LAST_GEN_DATE      DOM_DATE,
    USER_ID            DOM_KEY,
    SKLAD_ID           DOM_KEY_SMALL,
    SUMA_OSCL          DOM_SUMA,
    DAY_REG            DOM_SMAL_INT,
    FLAG_MONTH         DOM_SMAL_INT,
    DELETED            DOM_FLAG DEFAULT 0 NOT NULL,
    OBEKT_FAK_ID       DOM_KEY,
    TIP                DOM_SMAL_INT DEFAULT 0,
    FAK_NAME           DOM_CHAR_100,
    EFAK               DOM_FLAG,
    FIRMA_ID           DOM_KEY,
    DISTRIBUTOR_ID     DOM_KEY,
    DIST_SUMA          DOM_SUMA,
    DIST_PROCENT       DOM_PERCENT,
    DIST_ROUND_TIP_ID  DOM_KEY,
    DIST_DT_AKTIVEN    DOM_DATE,
    DIST_FAK_FLAG      DOM_FLAG,
    FAK_COMMENT        DOM_CHAR_100,
    OPR_TEMPLATE_ID    DOM_KEY
);


CREATE TABLE OPR_TEMPLATE_TASK_NODE (
    ID               DOM_KEY NOT NULL,
    TEMPLATE_ID      DOM_KEY,
    TASK_ID          DOM_KEY,
    TEMPLATE_GEN_ID  DOM_KEY
);


CREATE TABLE OPR_TIP (
    ID           SMALLINT NOT NULL,
    NAME         VARCHAR(45),
    IS_LOCK      DOM_SMAL_INT DEFAULT 0 NOT NULL,
    FLAG_BROENE  DOM_FLAG DEFAULT 0 NOT NULL
);


CREATE TABLE OPR_WAITING_NODE (
    ID              DOM_KEY NOT NULL,
    WAITING_OPR_ID  DOM_KEY,
    OPR_ID          DOM_KEY
);


CREATE TABLE OPRGARANCIA (
    ID         INTEGER NOT NULL,
    OPR_ID     DOM_KEY,
    SIMPLE_ID  DOM_KEY,
    G_TIP_ID   DOM_KEY,
    G_PERIOD   INTEGER,
    GAR_NOM    INTEGER,
    SN         VARCHAR(30)
);


CREATE TABLE ORDER_ACTIONS (
    ID         DOM_KEY NOT NULL,
    ORDER_ID   DOM_KEY NOT NULL,
    USER_ID    DOM_KEY NOT NULL,
    ACTION_ID  DOM_KEY NOT NULL,
    DT         DOM_DATE_TIME NOT NULL
);


CREATE TABLE OTC (
    ID        DOM_KEY NOT NULL,
    OPR_ID    INTEGER,
    OTC_KASA  SMALLINT DEFAULT 0 NOT NULL,
    OBEKT_ID  DOM_SMAL_INT
);


CREATE TABLE OTC_EL (
    ID        INTEGER NOT NULL,
    OPR_ID    INTEGER,
    TIP_SUMA  SMALLINT,
    SUMA_ID   SMALLINT,
    SUMA      CURRENCY
);


CREATE TABLE OTC_EL_EDIT (
    ID        INTEGER NOT NULL,
    OPR_ID    INTEGER,
    TIP_SUMA  SMALLINT,
    SUMA_ID   SMALLINT,
    SUMA      CURRENCY,
    P_NOMER   INTEGER
);


CREATE TABLE OTC_PER (
    ID        INTEGER NOT NULL,
    OPR_ID    INTEGER NOT NULL,
    OTC_KASA  SMALLINT DEFAULT 0 NOT NULL
);


CREATE TABLE OTCS_OPR_NODE (
    ID       DOM_KEY NOT NULL,
    OTCS_ID  DOM_KEY NOT NULL,
    OPR_ID   DOM_KEY NOT NULL
);


CREATE TABLE OUT (
    ID              INTEGER NOT NULL,
    OPR_ID          INTEGER,
    SUMA_BASE       CURRENCY,
    FP              DOM_FLAG,
    PAY_TIP         DOM_FLAG,
    PSHOP           DOM_BOOLEAN DEFAULT '0',
    OTKLONENIE      DOM_KEY_SMALL,
    SUMA_KLI_PAY    DOM_SUMA,
    OBEKT_ID        DOM_SMAL_INT,
    REQUIRE_FAKT    DOM_FLAG,
    BONNUM          INTEGER,
    KLI_AGENT_ID    DOM_KEY_SMALL,
    FLAG_UNCOLLECT  DOM_FLAG DEFAULT 0,
    POR_NUM         DOM_CHAR_30,
    CODE            DOM_CHAR_15,
    TS_SMETKA_ID    DOM_KEY,
    TD              DOM_INT,
    UNP_ID          DOM_INT64
);


CREATE TABLE OUT_EL (
    ID         INTEGER NOT NULL,
    OPR_ID     INTEGER,
    SIMPLE_ID  INTEGER,
    KOL        QTY,
    SUMA_SR    CURRENCY,
    SUMA_FR    CURRENCY,
    SUMA       CURRENCY,
    IS_F       SMALLINT DEFAULT 0 NOT NULL
);


CREATE TABLE OUT_EL_ANUL (
    ID         INTEGER NOT NULL,
    ANUL_ID    INTEGER,
    SIMPLE_ID  INTEGER,
    KOL        QTY,
    SUMA_SR    CURRENCY,
    SUMA_FR    CURRENCY,
    SUMA       CURRENCY,
    KOL2       DOM_KOL,
    PROD_CENA  DOM_CENA
);


CREATE TABLE OUT_EL_EDIT (
    ID         INTEGER NOT NULL,
    EDIT_ID    INTEGER,
    SIMPLE_ID  INTEGER,
    KOL        QTY,
    SUMA_SR    CURRENCY,
    SUMA_FR    CURRENCY,
    SUMA       CURRENCY,
    KOL2       DOM_KOL,
    PROD_CENA  DOM_CENA
);


CREATE TABLE OUT_EL_FAK_OUT_EL (
    ID             DOM_KEY NOT NULL,
    OUT_EL_ID      DOM_KEY NOT NULL,
    FAK_OUT_EL_ID  DOM_KEY NOT NULL,
    KOL            DOM_KOL DEFAULT 0.00 NOT NULL
);


CREATE TABLE OUT_EL_RAZ_NODE (
    ID             INTEGER NOT NULL,
    OUT_EL_ID      INTEGER NOT NULL,
    RAZFASOVKA_ID  INTEGER NOT NULL,
    KOL            DOUBLE PRECISION
);


CREATE TABLE OUT_EL2 (
    ID         DOM_KEY NOT NULL,
    OUT_EL_ID  DOM_KEY NOT NULL,
    KOL        DOM_KOL NOT NULL
);


CREATE TABLE OWNER (
    ID              SMALLINT NOT NULL,
    NAME            VARCHAR(50),
    NAME_SHORT      DOM_CHAR_50,
    ADRES           VARCHAR(50),
    TEL             VARCHAR(50),
    EMAIL           VARCHAR(50),
    HTTP            VARCHAR(50),
    MOL             VARCHAR(30),
    DAN_NUM         VARCHAR(10),
    BULSTAT         VARCHAR(13),
    BANKA           VARCHAR(30),
    BANK_SMETKA     VARCHAR(30),
    BANK_KOD        VARCHAR(8),
    DDS_BANKA       VARCHAR(30),
    DDS_SMETKA      VARCHAR(30),
    LOGO            BLOB SUB_TYPE 0 SEGMENT SIZE 1024,
    REG_DDS         DOM_BOOLEAN DEFAULT '1',
    DDS_BANK_KOD    VARCHAR(8),
    IDNOMDDS        VARCHAR(15),
    DEF             DOM_KEY_SMALL,
    C_CHECK         CHAR(32),
    NAME_LAT        DOM_CHAR_50,
    NAME_SHORT_LAT  DOM_CHAR_50,
    ADDRES_LAT      DOM_CHAR_50,
    MOL_LAT         DOM_CHAR_30
);


CREATE TABLE OWNER_BANKI (
    ID              DOM_SMAL_INT NOT NULL,
    BANKA           DOM_CHAR_30,
    KOD             DOM_CHAR_8,
    SMETKA          DOM_CHAR_30 NOT NULL,
    OWNER_ID        DOM_SMAL_INT,
    BANKA_NAME_LAT  DOM_CHAR_30
);


CREATE TABLE PARI (
    ID          INTEGER NOT NULL,
    OPR_ID      INTEGER,
    PARI_IO_ID  SMALLINT,
    KASA_ID     SMALLINT,
    OBEKT_ID    SMALLINT,
    SUMA        NUMERIC(10,2) NOT NULL,
    VALUTA_ID   INTEGER NOT NULL,
    KURS        DOUBLE PRECISION NOT NULL,
    PROWERKA    SMALLINT DEFAULT 0 NOT NULL,
    ALLOW_FAK   SMALLINT DEFAULT 0 NOT NULL,
    TIP         SMALLINT NOT NULL
);


CREATE TABLE PARI_CRYPT (
    ID          INTEGER NOT NULL,
    OPR_ID      INTEGER,
    PARI_IO_ID  SMALLINT,
    KASA_ID     SMALLINT,
    OBEKT_ID    SMALLINT,
    SUMA        VARCHAR(25) NOT NULL,
    VALUTA_ID   INTEGER NOT NULL,
    KURS        DOUBLE PRECISION NOT NULL,
    PROWERKA    SMALLINT DEFAULT 0 NOT NULL,
    ALLOW_FAK   SMALLINT DEFAULT 0 NOT NULL,
    TIP         SMALLINT NOT NULL
);


CREATE TABLE PARI_DIST (
    ID           INTEGER NOT NULL,
    OPR_ID       INTEGER NOT NULL,
    OPR_PROD_ID  INTEGER NOT NULL,
    PAY_TIP      SMALLINT DEFAULT 0,
    SUMA         CURRENCY
);


CREATE TABLE PARI_EL_ANUL (
    ID         INTEGER NOT NULL,
    ANUL_ID    INTEGER,
    KASA_ID    SMALLINT,
    OBEKT_ID   SMALLINT,
    SUMA       NUMERIC(10,2) NOT NULL,
    VALUTA_ID  INTEGER NOT NULL,
    KURS       DOUBLE PRECISION NOT NULL,
    TIP        SMALLINT NOT NULL
);


CREATE TABLE PARI_EL_EDIT (
    ID         INTEGER NOT NULL,
    EDIT_ID    INTEGER,
    KASA_ID    SMALLINT,
    OBEKT_ID   SMALLINT,
    SUMA       NUMERIC(10,2) NOT NULL,
    VALUTA_ID  INTEGER NOT NULL,
    KURS       DOUBLE PRECISION NOT NULL,
    TIP        SMALLINT NOT NULL
);


CREATE TABLE PARI_FAK_NODE (
    ID       DOM_KEY NOT NULL,
    FAK_ID   DOM_KEY NOT NULL,
    SUMA     DOM_SUMA NOT NULL,
    NODE_ID  DOM_KEY NOT NULL
);


CREATE TABLE PARI_FAKINUSLUGA_NODE (
    ID         INTEGER NOT NULL,
    PARI_ID    INTEGER,
    FAK_IN_ID  INTEGER
);


CREATE TABLE PARI_IO (
    ID         SMALLINT NOT NULL,
    NAME       VARCHAR(30),
    TIP        SMALLINT,
    PARENT     INTEGER,
    USE_KLI    DOM_BOOLEAN,
    FAK        DOM_BOOLEAN,
    SPR_TIP    DOM_KEY_SMALL,
    IS_ACTIVE  DOM_SMAL_INT DEFAULT 1
);


CREATE TABLE PARI_NODE (
    ID       INTEGER NOT NULL,
    FROM_ID  INTEGER,
    TO_ID    INTEGER
);


CREATE TABLE PARI_SKLOPR_NODE (
    ID           INTEGER NOT NULL,
    OPR_PARI_ID  INTEGER NOT NULL,
    OPR_ID       INTEGER NOT NULL,
    SUMA         CURRENCY,
    OPR_OTC_ID   INTEGER,
    KASA_ID      DOM_KEY
);


CREATE TABLE PARI_TMP (
    ID          INTEGER NOT NULL,
    OPR_ID      INTEGER NOT NULL,
    PARI_IO_ID  SMALLINT NOT NULL,
    KASA_ID     SMALLINT NOT NULL,
    OBEKT_ID    SMALLINT,
    SUMA        NUMERIC(10,2) NOT NULL,
    VALUTA_ID   INTEGER NOT NULL,
    KURS        DOUBLE PRECISION NOT NULL,
    TIP         SMALLINT NOT NULL,
    IS_USED     SMALLINT DEFAULT 0 NOT NULL,
    FAK_OPR_ID  DOM_KEY
);


CREATE TABLE PARTIDA_EL (
    ID    INTEGER NOT NULL,
    SROK  DATE
);


CREATE TABLE PARTIDA_EL_NODE (
    ID          INTEGER NOT NULL,
    OPR_ID      INTEGER,
    KOL         QTY,
    SUMA_FR     DOM_SUMA NOT NULL,
    SUMA_SR     DOM_SUMA NOT NULL,
    PARTIDA_ID  DOM_KEY NOT NULL
);


CREATE TABLE PARTIDA_EL_PRINT (
    ID           DOM_KEY NOT NULL,
    PARTIDA_N    DOM_CHAR_30,
    SROK         DOM_DATE,
    OUT_EL_ID    DOM_INT,
    ORDER_EL_ID  DOM_INT
);


CREATE TABLE PARTIDA_IN_EL_NODE (
    ID               DOM_KEY NOT NULL,
    IN_EL_ID         DOM_KEY NOT NULL,
    PARTIDA_NODE_ID  DOM_KEY NOT NULL
);


CREATE TABLE PARTIDA_IZL_NODE (
    ID             INTEGER NOT NULL,
    PARTIDA_EL_ID  INTEGER NOT NULL,
    IZL_ID         INTEGER NOT NULL
);


CREATE TABLE PARTIDA_NAL (
    ID          INTEGER NOT NULL,
    KOL         DOM_KOL NOT NULL,
    SUMA_FR     DOM_SUMA NOT NULL,
    IN_EL_ID    INTEGER NOT NULL,
    ELEMENT_ID  INTEGER NOT NULL,
    SIMPLE_ID   DOM_KEY,
    SKLAD_ID    DOM_KEY_SMALL
);


CREATE TABLE PARTIDA_OUT_EL_NODE (
    ID               INTEGER NOT NULL,
    OUT_EL_ID        INTEGER NOT NULL,
    PARTIDA_NODE_ID  INTEGER NOT NULL
);


CREATE TABLE PARTIDA_PROP_NODE (
    ID             DOM_KEY NOT NULL,
    PARTIDA_EL_ID  DOM_KEY NOT NULL,
    MAJOR_PROP_ID  DOM_KEY NOT NULL,
    MINOR_PROP_ID  DOM_KEY NOT NULL
);


CREATE TABLE PARTIDA_RETURN_NODE (
    ID       DOM_KEY NOT NULL,
    FROM_ID  DOM_KEY NOT NULL,
    TO_ID    DOM_KEY NOT NULL
);


CREATE TABLE PATHS (
    ID             DOM_KEY NOT NULL,
    FROM_PLACE_ID  DOM_KEY,
    TO_PLACE_ID    DOM_KEY,
    DISTANCE       DOUBLE PRECISION,
    MARSHRUT       VARCHAR(1024)
);


CREATE TABLE PAY_NOCASH_NODE (
    ID             DOM_KEY NOT NULL,
    OPR_ID         DOM_KEY,
    PAYMENT_EL_ID  DOM_KEY
);


CREATE TABLE PAYMENT (
    ID           INTEGER NOT NULL,
    OPR_ID       INTEGER,
    FLAG_BONUS   DOM_SMAL_INT DEFAULT 0 NOT NULL,
    FLAG_AVANS   DOM_SMAL_INT DEFAULT 0 NOT NULL,
    UNP_ID       DOM_INT64,
    FAK_ID       DOM_KEY,
    IS_BANK      DOM_FLAG DEFAULT 1 NOT NULL,
    IDX          DOM_KEY,
    NUMBER       DOM_CHAR_50,
    BRANCH_ID    DOM_KEY,
    VAT_PERCENT  DOM_PERCENT
);


CREATE TABLE PAYMENT_AVANSOVO (
    ID              DOM_KEY NOT NULL,
    SUMA_AVANSOVA   DOM_SUMA,
    SUMA_OSTATAK    DOM_SUMA,
    KLI_ID          DOM_KEY,
    PAYMENT_OPR_ID  DOM_KEY
);


CREATE TABLE PAYMENT_NODE (
    ID       DOM_KEY NOT NULL,
    OPR_ID   DOM_KEY NOT NULL,
    NODE_ID  DOM_KEY NOT NULL
);


CREATE TABLE PAYMENT_NOW (
    ID              DOM_KEY NOT NULL,
    OPR_PROD_ID     DOM_KEY,
    OPR_PAYMENT_ID  DOM_KEY
);


CREATE TABLE PAYMENTS_EL (
    ID              DOM_KEY NOT NULL,
    SUMA            DOM_SUMA,
    BANKA           DOM_CHAR_50,
    NOMER           DOM_CHAR_50,
    PAYMENT_TIP_ID  DOM_KEY,
    PAYMENT_ID      DOM_KEY,
    KLI_ID          DOM_KEY
);


CREATE TABLE PL_DELIVERY_STORAGE_EDIT (
    ID           INTEGER NOT NULL,
    OPR_EDIT_ID  INTEGER,
    STORAGE_ID   INTEGER
);


CREATE TABLE PLACE (
    ID         INTEGER NOT NULL,
    NAME       VARCHAR(30),
    POST_CODE  DOM_SMAL_INT,
    CODE2      DOM_CHAR_20,
    COUNTY_ID  DOM_INT
);


CREATE GLOBAL TEMPORARY TABLE PN_TMP (
    PN_ID          DOM_INT,
    PN_KOL         DOM_KOL,
    PN_SUMA_FR     DOM_SUMA,
    PN_SIMPLE_ID   DOM_INT,
    PN_IN_EL_ID    DOM_INT,
    PN_ELEMENT_ID  INTEGER
) ON COMMIT DELETE ROWS;


CREATE TABLE POCKET_OTC (
    ID         DOM_KEY NOT NULL,
    MD5        DOM_CHAR_50 COLLATE PXW_CYRL,
    FILE_DT    DOM_DATE_TIME,
    FILE_NAME  DOM_CHAR_20 COLLATE PXW_CYRL,
    DT         DOM_DATE_TIME,
    USER_ID    DOM_KEY
);


CREATE TABLE POCKET_SHOP (
    ID               INTEGER NOT NULL,
    SKLAD_ID         INTEGER NOT NULL,
    USER_ID          INTEGER NOT NULL,
    PRINTER          CHAR(1),
    SMETKI           DOM_BOOLEAN,
    KOLICHESTWA      DOM_BOOLEAN,
    PATH             VARCHAR(255),
    HIDE_QTY         DOM_BOOLEAN NOT NULL,
    VSICHKI          DOM_KEY_SMALL,
    CL_ID            DOM_KEY,
    TIP_IZBOR_CENA   DOM_KEY_SMALL DEFAULT 0 NOT NULL,
    OTR_KOL          DOM_KEY_SMALL,
    HIDE_CODE        DOM_SMAL_INT,
    AGENT_ID         DOM_KEY,
    NAME             DOM_CHAR_50 COLLATE PXW_CYRL,
    NOV_KLI_V_SKLAD  DOM_FLAG,
    FIRMA_ID         DOM_KEY
);


CREATE TABLE POR (
    ID                         INTEGER NOT NULL,
    OPR_ID                     INTEGER NOT NULL,
    STATUS                     SMALLINT DEFAULT 0 NOT NULL,
    TIP_ZAQWKA                 SMALLINT DEFAULT 0 NOT NULL,
    ZA_DATA                    DATE DEFAULT CURRENT_DATE NOT NULL,
    SKLAD_ID                   INTEGER NOT NULL,
    STATUS_DATE                TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    NOMER                      VARCHAR(30),
    AGENT_ID                   DOM_KEY,
    STOKOV_NOM                 VARCHAR(15),
    OTKADE                     DOM_FLAG DEFAULT 1 NOT NULL,
    MOVE_OPR_ID                DOM_KEY,
    OPR_ID_KAPARO              DOM_KEY,
    PRODUCTION_ID              DOM_KEY,
    IS_BONUS                   DOM_KEY,
    ZA_TIME                    TIME,
    FOR_DATE_TIME              DOM_DATE_TIME,
    DISCOUNT_PERCENT           DOM_PERCENT,
    ADDRESS_ID                 DOM_KEY,
    FLAG_INVOICE               DOM_FLAG,
    FLAG_PAYMENT               DOM_FLAG,
    FLAG_CUSTOMER_PREPARATION  DOM_FLAG,
    FLAG_SEND_EMAIL            DOM_FLAG,
    TAG                        DOM_INT,
    PARENT_ID                  DOM_KEY,
    INSTALLERS_COUNT           DOM_SMAL_INT,
    INSTALLATION_DURATION      DOM_SMAL_INT,
    PRODUCTION_USER_ID         DOM_KEY_SMALL,
    CHANGE_STATUS_USER_ID      DOM_KEY,
    SALE_OPR_ID                DOM_KEY,
    INSTALLATION_PHASE         DOM_FLAG DEFAULT 0,
    CONTRACT_DATE              DOM_DATE,
    PRODUCTION_STATUS_USER_ID  DOM_KEY,
    PRODUCTION_STATUS_DT       DOM_DATE_TIME,
    FLAG_FIXED_INSTALLATION    DOM_FLAG,
    FLAG_DEFERRED_PAYMENT      DOM_FLAG NOT NULL,
    FLAG_RAZKROI               DOM_FLAG DEFAULT 0,
    UNP_ID                     DOM_INT64,
    FLAG_LINES                 DOM_FLAG DEFAULT 0 NOT NULL,
    IMPORT_INVOICE_NUM         DOM_CHAR_30,
    FLAG_SYNC                  DOM_FLAG,
    ASSECO_SYNC                DOM_FLAG DEFAULT 0,
    ASSECO_SOURCE              DOM_CHAR_50
);


CREATE TABLE POR_DOST_KOL_RZV (
    ID           DOM_KEY NOT NULL,
    OPR_ID_DOST  DOM_KEY NOT NULL,
    OPR_ID_POR   DOM_KEY NOT NULL,
    SIMPLE_ID    DOM_KEY NOT NULL,
    KOL          DOM_KOL NOT NULL
);


CREATE TABLE POR_EDIT (
    ID                DOM_KEY NOT NULL,
    EDIT_ID           DOM_KEY NOT NULL,
    ORDER_ID          DOM_KEY NOT NULL,
    STATUS            DOM_SMAL_INT NOT NULL,
    ZA_DATA           DOM_DATE,
    AGENT_ID          DOM_KEY,
    NOMER             DOM_CHAR_30,
    FOR_DATE_TIME     DOM_DATE_TIME,
    DISCOUNT_PERCENT  DOM_PERCENT
);


CREATE TABLE POR_EL (
    ID                  INTEGER NOT NULL,
    SIMPLE_ID           INTEGER NOT NULL,
    KOL                 DOUBLE PRECISION DEFAULT 0 NOT NULL,
    OPR_ID              INTEGER NOT NULL,
    SUMA                DOM_SUMA,
    KOL_POR             QTY,
    OUT_EL_ID           DOM_KEY,
    KOL_MUVE            QTY,
    FLAG_MOVE           DOM_FLAG DEFAULT 0,
    KOL_RZV             DOM_KOL DEFAULT 0 NOT NULL,
    ORDER_N             DOM_SMAL_INT,
    KOL2                DOM_KOL,
    INSTALLATION_PRICE  DOM_CENA,
    PRICE               DOM_CENA,
    FLAG_LINE           DOM_FLAG DEFAULT 0 NOT NULL,
    IS_BONUS            DOM_SMAL_INT DEFAULT 0
);


CREATE TABLE POR_EL_COMMENT (
    ID         INTEGER NOT NULL,
    POR_EL_ID  INTEGER,
    COMMENT    VARCHAR(100)
);


CREATE TABLE POR_EL_EDIT (
    ID          INTEGER NOT NULL,
    EDIT_ID     INTEGER,
    SIMPLE_ID   INTEGER,
    KOL         DOUBLE PRECISION,
    SUMA        DOUBLE PRECISION,
    KOL_RZV     DOM_KOL,
    OPR_KAPARO  DOM_KEY,
    COMMENT     DOM_CHAR_100,
    KOL2        DOM_KOL,
    PRICE       DOM_CENA
);


CREATE TABLE POR_EL_EXPLANATORY (
    ID         DOM_KEY NOT NULL,
    EXPLAN_ID  DOM_INT,
    POR_EL_ID  DOM_INT,
    MIN_KOL    DOM_KOL
);


CREATE TABLE POR_EL_PICTURES_NODE (
    ID          DOM_KEY NOT NULL,
    POR_EL_ID   DOM_KEY NOT NULL,
    PICTURE_ID  DOM_KEY NOT NULL
);


CREATE TABLE POR_EL_PRICE_COEFICIENT (
    ID          DOM_KEY NOT NULL,
    POR_EL_ID   DOM_KEY NOT NULL,
    SIMPLE_ID   DOM_KEY NOT NULL,
    COEFICIENT  DOM_PERCENT NOT NULL
);


CREATE TABLE POR_EL_PRODUCTION (
    ID               DOM_KEY NOT NULL,
    SIMPLE_ID        DOM_KEY NOT NULL,
    KOL              DOM_KOL NOT NULL,
    POR_EL_ID        DOM_KEY NOT NULL,
    SIMPLE_CALAC_ID  DOM_KEY NOT NULL
);


CREATE TABLE POR_EL_RAZ_NODE (
    ID             INTEGER NOT NULL,
    POR_EL_ID      INTEGER,
    RAZFASOVKA_ID  INTEGER,
    KOL            DOUBLE PRECISION
);


CREATE TABLE POR_EL_REQUEST_NODE (
    ID             DOM_KEY NOT NULL,
    POR_EL_ID      DOM_KEY NOT NULL,
    REQUEST_EL_ID  DOM_KEY NOT NULL
);


CREATE TABLE POR_FAK_PROD_NODE (
    ID               DOM_KEY NOT NULL,
    POR_ID           DOM_KEY NOT NULL,
    FAK_PROD_OPR_ID  DOM_KEY NOT NULL
);


CREATE TABLE POR_FORMULA_PARAMS (
    ID          DOM_KEY NOT NULL,
    POR_EL_ID   DOM_INT,
    "VARIABLE"  DOM_CHAR_10,
    "COUNT"     QTY,
    QUANTITY    QTY
);


CREATE TABLE POR_OFFER_TERMS_NODE (
    ID        DOM_KEY NOT NULL,
    POR_ID    DOM_KEY NOT NULL,
    TERMS_ID  DOM_KEY NOT NULL
);


CREATE TABLE POR_OUT_NODE (
    ID      INTEGER NOT NULL,
    OUT_ID  INTEGER NOT NULL,
    POR_ID  INTEGER NOT NULL
);


CREATE TABLE POR_PRODUCTION_REQUEST_NODE (
    ID                     DOM_KEY NOT NULL,
    POR_OPR_ID             DOM_INT,
    PRODUCTION_REQUEST_ID  DOM_INT
);


CREATE TABLE POR_PROP_NODE (
    ID             DOM_KEY NOT NULL,
    POR_EL_ID      DOM_KEY NOT NULL,
    MAJOR_PROP_ID  DOM_KEY NOT NULL,
    MINOR_PROP_ID  DOM_KEY NOT NULL
);


CREATE TABLE POR_RAZ_EDIT (
    ID             INTEGER NOT NULL,
    EDIT_ID        INTEGER,
    RAZFASOVKA_ID  INTEGER,
    KOL            DOUBLE PRECISION
);


CREATE TABLE POR_ZD_NODE (
    ID          DOM_KEY NOT NULL,
    POR_OPR_ID  DOM_KEY,
    ZD_OPR_ID   DOM_KEY
);


CREATE TABLE POS_OUT_EL_TO_SRV_OUT_EL (
    ID             DOM_KEY NOT NULL,
    POS_OUT_EL_ID  DOM_KEY,
    SRV_OUT_EL_ID  DOM_KEY,
    DT             DOM_DATE_TIME
);


CREATE TABLE POS_TO_SRV (
    ID          DOM_KEY NOT NULL,
    POS_OPR_ID  DOM_KEY,
    SRV_OPR_ID  DOM_KEY,
    DT          DOM_DATE_TIME
);


CREATE TABLE POTV (
    ID      DOM_KEY NOT NULL,
    OPR_ID  DOM_KEY
);


CREATE TABLE POTV_EL (
    ID           DOM_KEY NOT NULL,
    OPR_POTV_ID  DOM_KEY,
    POTV_ID      DOM_KEY,
    MOL_USER_ID  DOM_KEY
);


CREATE TABLE POTV_MOVE_EL (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY,
    SIMPLE_ID  DOM_KEY,
    KOL        DOM_KOL,
    CHECKED    DOM_FLAG
);


CREATE TABLE PR_REQ_EL_PRICE_COEFICIENT (
    ID             DOM_KEY NOT NULL,
    REQUEST_EL_ID  DOM_KEY NOT NULL,
    SIMPLE_ID      DOM_KEY NOT NULL,
    COEFICIENT     DOM_PERCENT NOT NULL
);


CREATE TABLE PR_REQUEST_EXPLANATORY (
    ID                DOM_KEY NOT NULL,
    EXPLAN_ID         DOM_INT,
    PR_REQUEST_EL_ID  DOM_INT,
    MIN_KOL           DOM_KOL
);


CREATE TABLE PR_REQUEST_FORMULA_PARAMS (
    ID             INTEGER NOT NULL,
    REQUEST_EL_ID  DOM_INT,
    "VARIABLE"     DOM_CHAR_10,
    "COUNT"        QTY,
    QUANTITY       QTY
);


CREATE TABLE PRICE_LIST_DELIVERY_STORAGES (
    ID             INTEGER NOT NULL,
    STORAGE_ID     INTEGER,
    PRICE_LIST_ID  INTEGER
);


CREATE TABLE PROD_AVANS (
    ID            DOM_KEY NOT NULL,
    AVANS_OUT_ID  DOM_KEY,
    OUT_ID        DOM_KEY,
    OPR_ID        DOM_KEY
);


CREATE TABLE PROD_CENI_EL (
    ID              DOM_KEY NOT NULL,
    OUT_EL_ID       DOM_KEY NOT NULL,
    CENA            DOM_CENA NOT NULL,
    BARCODE_ID      DOM_KEY,
    CENA_OS         DOM_CENA,
    CENA_CL         DOM_CENA,
    BONUS_ID        DOM_KEY,
    PERCENT_OTKL    DOM_PERCENT,
    BONUS_TOCHKI    DOM_INT,
    CENA_VALUTA     DOM_CENA,
    VALUTA_ID       DOM_KEY,
    VALUTA_KURS     KURS,
    OTSTAPKA_ID     DOM_KEY,
    VAT_PERCENT     DOM_PERCENT NOT NULL,
    VAT_GROUP       DOM_KEY_SMALL NOT NULL,
    VAT_REASON_ID   DOM_KEY,
    IS_PROMOTIONAL  DOM_SMAL_INT DEFAULT 0 NOT NULL
);


CREATE TABLE PROD_NODE (
    ID               DOM_KEY NOT NULL,
    OPR_PROD_ID      DOM_KEY NOT NULL,
    OPR_SUB_PROD_ID  DOM_KEY NOT NULL
);


CREATE TABLE PROD_PRODUCTION (
    ID                 DOM_KEY NOT NULL,
    PROD_OPR_ID        DOM_KEY,
    PRODUCTION_OPR_ID  DOM_KEY
);


CREATE TABLE PROD_REQUEST_PRODUCTION_NODE (
    ID                         DOM_KEY NOT NULL,
    OPR_PROD_ID                DOM_INT,
    OPR_REQUEST_PRODUCTION_ID  DOM_INT
);


CREATE TABLE PROD_STOCK (
    ID           DOM_KEY NOT NULL,
    OPR_ID       DOM_KEY,
    OWNER_ID     DOM_KEY_SMALL,
    DOC_NUM      DOM_CHAR_20,
    DRIVER_NAME  DOM_CHAR_50,
    CAR_NUM      DOM_CHAR_20
);


CREATE TABLE PROD_STOCK_EL (
    ID           DOM_KEY NOT NULL,
    OPR_ID       DOM_KEY,
    SIMPLE_ID    DOM_KEY,
    PARTIDA      DOM_CHAR_100,
    SROK         DOM_DATE,
    COUNTRY_ID   DOM_KEY,
    KOL          DOM_KOL,
    USHNA_MARKA  DOM_CHAR_30
);


CREATE TABLE PROD_VAUCHER (
    ID             DOM_KEY NOT NULL,
    OPR_PROD_ID    DOM_INT,
    SUMA           DOM_SUMA,
    PAYMENT_EL_ID  DOM_KEY,
    FLAG           DOM_FLAG
);


CREATE TABLE PRODUCT_WAREHOUSE_MAP_NODE (
    ID          DOM_KEY NOT NULL,
    PRODUCT_ID  DOM_KEY NOT NULL,
    NODE_ID     DOM_KEY NOT NULL
);


CREATE TABLE PRODUCTION (
    ID            DOM_KEY NOT NULL,
    OPR_IN_ID     DOM_KEY NOT NULL,
    OPR_OUT_ID    DOM_KEY NOT NULL,
    SUMA_SR       DOM_SUMA,
    DATETIMEMIX   DOM_DATE_TIME,
    DATETIMEDOST  DOM_DATE_TIME,
    CARNUM        DOM_CHAR_10,
    CARM_MARKA    DOM_CHAR_20,
    CAR_DRIVER    DOM_CHAR_30
);


CREATE TABLE PRODUCTION_EXPLANATORY (
    ID          DOM_KEY NOT NULL,
    IN_EL_ID    DOM_KEY,
    EXPLAIN_ID  DOM_KEY
);


CREATE TABLE PRODUCTION_GRUPI (
    ID           DOM_KEY NOT NULL,
    TIP          DOM_SMAL_INT,
    SELEKCIQ_ID  DOM_KEY
);


CREATE TABLE PRODUCTION_IN_EL_PARAMS (
    ID          DOM_KEY NOT NULL,
    IN_EL_ID    DOM_KEY,
    "COUNT"     QTY,
    "VARIABLE"  DOM_CHAR_10,
    QUANTITY    QTY
);


CREATE TABLE PRODUCTION_KAPARO_NODE (
    ID              INTEGER NOT NULL,
    REQUEST_ID      DOM_INT,
    OPR_PAYMENT_ID  DOM_INT
);


CREATE TABLE PRODUCTION_MONTAJISTI (
    ID                     DOM_KEY NOT NULL,
    PRODUCTION_REQUEST_ID  DOM_KEY,
    USER_ID                DOM_KEY,
    DATE_TIME_ADD          DOM_DATE_TIME
);


CREATE TABLE PRODUCTION_REQUEST_EL (
    ID                  DOM_KEY NOT NULL,
    OPR_REQUEST_ID      DOM_INT,
    NOMER               DOM_SMAL_INT,
    SIMPLE_ID           DOM_INT,
    MASTER_SIMPLE_ID    DOM_INT,
    SIMPLE_CALC_ID      DOM_INT,
    KOL                 DOM_KOL,
    TOT_SUM             DOM_SUMA,
    CENA_CL             DOM_CENA,
    QTY_COMLETE         DOM_KOL,
    INSTALLATION_PRICE  DOM_CENA
);


CREATE TABLE PRODUCTION_ZARABOTKA (
    ID              DOM_KEY NOT NULL,
    PRODUCTION_ID   DOM_KEY,
    USER_ID         DOM_KEY,
    ZARABOTKA_SUMA  DOM_SUMA,
    DATE_TIME_ADD   DOM_DATE_TIME
);


CREATE TABLE PRODUCTION_ZARABOTKA_IZPLATENO (
    ID            DOM_KEY NOT NULL,
    ZARABOTKA_ID  DOM_KEY,
    DT            DOM_DATE_TIME,
    SUMA          DOM_SUMA
);


CREATE TABLE PROFORMA_TO_FAK (
    ID           DOM_KEY NOT NULL,
    FAK_ID       DOM_KEY NOT NULL,
    PROFORMA_ID  DOM_KEY NOT NULL
);


CREATE TABLE PROP_NODE (
    ID             DOM_KEY NOT NULL,
    MAJOR_PROP_ID  DOM_KEY NOT NULL,
    MINOR_PROP_ID  DOM_KEY NOT NULL
);


CREATE TABLE RAZ_ELEMENT (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(30)
);


CREATE TABLE RAZ_TIP (
    ID       INTEGER NOT NULL,
    NAME     VARCHAR(30),
    AMBALAJ  SMALLINT DEFAULT 0
);


CREATE TABLE RAZFASOVKA (
    ID              INTEGER NOT NULL,
    RAZ_TIP_ID      INTEGER NOT NULL,
    KOL             QTY NOT NULL,
    SIMPLE_ID       INTEGER,
    RAZ_ELEMENT_ID  INTEGER
);


CREATE TABLE RAZPAD (
    ID       INTEGER NOT NULL,
    OPR_ID   INTEGER NOT NULL,
    SUMA_SR  DOUBLE PRECISION,
    R_TYPE   DOM_FLAG
);


CREATE TABLE RDB$NAL (
    SKLAD_ID   INTEGER NOT NULL,
    SUMA       DOUBLE PRECISION,
    SUMA_FR    DOUBLE PRECISION,
    KOL        DOUBLE PRECISION,
    LAST_CENA  DOUBLE PRECISION
);


CREATE TABLE RDB$PARTIDA_NAL (
    ID          INTEGER NOT NULL,
    IN_EL_ID    INTEGER NOT NULL,
    ELEMENT_ID  INTEGER NOT NULL,
    KOL_NAL     DOUBLE PRECISION,
    SUMA        DOUBLE PRECISION
);


CREATE TABLE REAL_IZP_FAKT_IZP_NODE (
    ID           DOM_KEY NOT NULL,
    REAL_OPR_ID  DOM_KEY NOT NULL,
    FAKT_OPR_ID  DOM_KEY NOT NULL
);


CREATE TABLE REFUSED_TMP (
    OPR_ID  INTEGER
);


CREATE TABLE REQUEST_PRODUCTION_NODE (
    ID             DOM_KEY NOT NULL,
    PRODUCTION_ID  DOM_INT,
    REQUEST_ID     DOM_INT
);


CREATE TABLE RET_DOST_KI_DOST_NODE (
    ID           DOM_KEY NOT NULL,
    RET_DOST_ID  DOM_KEY NOT NULL,
    KI_DOST_ID   DOM_KEY NOT NULL
);


CREATE TABLE RET_DOST_MOVE_NODE (
    ID          DOM_KEY NOT NULL,
    RET_OPR_ID  DOM_KEY NOT NULL,
    OUT_OPR_ID  DOM_KEY NOT NULL,
    IN_OPR_ID   DOM_KEY NOT NULL
);


CREATE TABLE RET_PROD_RET_FAK_PROD_KI_NODE (
    ID                      INTEGER NOT NULL,
    OPR_RET_PROD_ID         DOM_KEY,
    OPR_RET_FAK_PROD_KI_ID  DOM_KEY
);


CREATE TABLE RET_STOKA_DOST (
    ID       DOM_KEY NOT NULL,
    OPR_ID   DOM_KEY NOT NULL,
    PAY_TIP  DOM_FLAG DEFAULT 0 NOT NULL
);


CREATE TABLE RET_STOKA_DOST_KI (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY NOT NULL,
    FAK_IN_ID  DOM_KEY,
    PAY_TIP    DOM_FLAG DEFAULT 0 NOT NULL
);


CREATE TABLE RET_STOKA_PROD (
    ID             DOM_KEY NOT NULL,
    OPR_ID         DOM_KEY NOT NULL,
    PAY_TIP        DOM_FLAG DEFAULT 0 NOT NULL,
    FU_NOM         DOM_CHAR_10 COLLATE PXW_CYRL,
    FP_NUM         DOM_CHAR_10 COLLATE PXW_CYRL,
    IME            DOM_CHAR_100,
    PLACE_ID       DOM_KEY,
    ADDRESS        DOM_CHAR_100,
    EGN            DOM_CHAR_10 COLLATE PXW_CYRL,
    STORNO_NUM     DOM_CHAR_10,
    TEL            DOM_CHAR_20,
    EMAIL          DOM_CHAR_30,
    REFUSED_ID     DOM_INT,
    RESOLUTION_ID  DOM_KEY,
    CLAIM_NUM      DOM_INT,
    UNP_ID         DOM_INT64
);


CREATE TABLE RET_STOKA_PROD_KI (
    ID           DOM_KEY NOT NULL,
    OPR_ID       DOM_KEY NOT NULL,
    FAK_OPR_ID   DOM_KEY NOT NULL,
    PAY_TIP      DOM_FLAG DEFAULT 0 NOT NULL,
    UNP_ID       DOM_INT64,
    VAT_PERCENT  DOM_PERCENT
);


CREATE TABLE RETURN_DOST_KOL (
    ID        DOM_KEY NOT NULL,
    OPR_ID    DOM_KEY NOT NULL,
    IN_EL_ID  DOM_KEY NOT NULL,
    KOL       DOM_KOL NOT NULL
);


CREATE TABLE ROUND_TIP (
    ID           DOM_KEY NOT NULL,
    NAME         DOM_CHAR_20 NOT NULL COLLATE PXW_CYRL,
    UP_DOWN      DOM_FLAG DEFAULT 0 NOT NULL,
    COEFFICIENT  DOM_CENA NOT NULL,
    PRODUCE      DOM_CENA DEFAULT 0
);


CREATE TABLE SASTAV (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_100
);


CREATE GLOBAL TEMPORARY TABLE SEL_BONUS (
    SEL_BONUS_ID  DOM_KEY NOT NULL
) ON COMMIT DELETE ROWS;


CREATE TABLE SEL_FIRMI_QR (
    SEL_ID    INTEGER,
    FIRMA_ID  DOM_KEY NOT NULL
);


CREATE TABLE SEL_IO_IZP_QR (
    SEL_ID      DOM_KEY,
    IO_IZP_TIP  DOM_KEY
);


CREATE TABLE SEL_IO_QR (
    SEL_ID  INTEGER,
    IO_ID   INTEGER
);


CREATE TABLE SEL_KASI_QR (
    SEL_ID   INTEGER,
    KASA_ID  SMALLINT NOT NULL
);


CREATE TABLE SEL_KLI_QR (
    SEL_ID  INTEGER,
    KLI_ID  INTEGER
);


CREATE TABLE SEL_MAJOR_PROP_QR (
    SEL_ID         INTEGER,
    MAJOR_PROP_ID  INTEGER
);


CREATE TABLE SEL_MINOR_PROP_QR (
    SEL_ID         INTEGER,
    MINOR_PROP_ID  INTEGER
);


CREATE TABLE SEL_OBEKT_QR (
    SEL_ID    DOM_KEY NOT NULL,
    OBEKT_ID  DOM_KEY NOT NULL
);


CREATE GLOBAL TEMPORARY TABLE SEL_OPR (
    ID      INTEGER NOT NULL,
    OPR_ID  INTEGER
) ON COMMIT DELETE ROWS;


CREATE TABLE SEL_OPRS (
    ID      DOM_KEY NOT NULL,
    OPR_ID  DOM_KEY
);


CREATE TABLE SEL_SIM_QR (
    SEL_ID     INTEGER,
    SIMPLE_ID  INTEGER
);


CREATE GLOBAL TEMPORARY TABLE SEL_SIMPLE (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE TABLE SEL_SKLAD_QR (
    SEL_ID    INTEGER NOT NULL,
    SKLAD_ID  DOM_KEY NOT NULL
);


CREATE TABLE SELEKCIQ (
    ID              INTEGER NOT NULL,
    NAME            VARCHAR(50) NOT NULL,
    TIP             SMALLINT DEFAULT 0 NOT NULL,
    ACTIVEN         SMALLINT DEFAULT 1 NOT NULL,
    USER_ID         INTEGER,
    DATETIME        TIMESTAMP,
    FISK_BY_SIMPLE  DOM_FLAG,
    FOR_ESHOP       DOM_FLAG,
    CODE            DOM_INT,
    PROC_DISTR      DOM_PERCENT
);


CREATE TABLE SELEKCIQ_KALK_EL (
    ID           DOM_KEY NOT NULL,
    SIMPLE_ID    DOM_KEY NOT NULL,
    SELEKCIQ_ID  DOM_KEY NOT NULL
);


CREATE TABLE SELEKCIQ_KASA_EL (
    ID           DOM_KEY NOT NULL,
    KASA_ID      DOM_KEY_SMALL NOT NULL,
    SELEKCIQ_ID  DOM_KEY NOT NULL
);


CREATE TABLE SELEKCIQ_KLI_EL (
    ID           INTEGER NOT NULL,
    KLI_ID       INTEGER NOT NULL,
    SELEKCIQ_ID  INTEGER NOT NULL
);


CREATE TABLE SELEKCIQ_SIM_EL (
    ID           INTEGER NOT NULL,
    SIMPLE_ID    INTEGER NOT NULL,
    SELEKCIQ_ID  INTEGER NOT NULL
);


CREATE TABLE SERIAL_NUM (
    ID             INTEGER NOT NULL,
    PARTIDA_EL_ID  INTEGER NOT NULL,
    SN             VARCHAR(30),
    SIMPLE_ID      DOM_KEY
);


CREATE TABLE SIMPLE (
    ID               INTEGER NOT NULL,
    NAME             VARCHAR(100) COLLATE PXW_CYRL,
    NAME_SHORT       VARCHAR(12),
    CODE             DOM_CHAR_50,
    ME_ID            SMALLINT,
    SIMPLE_GROUP_ID  SMALLINT,
    "ACTIVE"         DOM_BOOLEAN DEFAULT '1',
    ACTIVE_FAK       DOM_BOOLEAN DEFAULT '1',
    LOCK_CENA_PROD   DOM_BOOLEAN,
    CENA_PROD        DOM_CENA,
    CENA_EDRO        DOM_CENA,
    CENA_OFERTA      DOM_CENA,
    CENA_PROD_FAK    DOM_CENA,
    DDS              NUMERIC(4,2) DEFAULT 20.0,
    KOL_KRI_MIN      QTY,
    KOL_KRI_MAX      QTY,
    DEFAULT_RAZ_ID   SMALLINT,
    USLUGA           DOM_BOOLEAN DEFAULT '0',
    CENA_POCKET      DOM_CENA DEFAULT 0,
    RSN              DOM_BOOLEAN DEFAULT '0',
    FLAG_CHECK       SMALLINT DEFAULT 0 NOT NULL,
    RAZ_TIP_ID       INTEGER,
    AMBALAJ          SMALLINT DEFAULT 0 NOT NULL,
    ACTIVE_SCALE     SMALLINT default 0 NOT NULL,
    GODNOST          SMALLINT DEFAULT 0 NOT NULL,
    BRUTO            DOUBLE PRECISION,
    DEF_SEL_ID       INTEGER,
    RAZPAD           SMALLINT DEFAULT 0 NOT NULL,
    G_KRI_DOST       DOUBLE PRECISION,
    G_KRI_MIN        DOUBLE PRECISION,
    G_PERIOD         INTEGER,
    G_TIP            DOM_KEY,
    ME2_ID           DOM_KEY_SMALL,
    FLAF_AMBALAJ     DOM_BOOLEAN DEFAULT 0 NOT NULL,
    DEF_SEL_CALC     INTEGER,
    CODE2            DOM_CHAR_50,
    TEMPERATURA      DOM_CHAR_20 COLLATE PXW_CYRL,
    SUMA_DOST_CALC   DOM_SUMA,
    GR_ZAMQNA_ID     DOM_KEY,
    IS_BONUS         DOM_FLAG DEFAULT 0 NOT NULL,
    USE_PROP         DOM_FLAG DEFAULT 0,
    NAME_2           DOM_CHAR_100 COLLATE PXW_CYRL,
    FLAG_PROIZHOD    DOM_KEY_SMALL DEFAULT 0 NOT NULL,
    EXT1             DOM_CHAR_2000,
    USE_EXPLAN       DOM_SMAL_INT DEFAULT 0,
    MARK_AS_BROI     DOM_SMAL_INT DEFAULT 0,
    SASTAV_ID        DOM_KEY,
    FLAG_VAUCHER     DOM_SMAL_INT DEFAULT 0 NOT NULL,
    FLAG_MENU        DOM_SMAL_INT DEFAULT 0 NOT NULL,
    GARANZIA_EXT     DOM_FLAG,
    PREPARE_TIME     DOM_TIME,
    MENU_TEXT        DOM_CHAR_20,
    COUNT_DEL        DOM_INT,
    FLAG_RAZPAD_QTY  DOM_FLAG,
    EXT2             DOM_CHAR_1000,
    VAT_GROUP        DOM_KEY_SMALL DEFAULT 2 NOT NULL,
    FLAG_TBL_PRICE   DOM_FLAG,
    ADRESIRANE_ID    DOM_KEY,
    COEFF_ME         DOM_PERCENT,
    VAT_REASON_ID    DOM_KEY,
    DEF_DOST_KLI_ID  DOM_KEY,
    CODE_SIMILAR     DOM_CHAR_10,
    HGROUP_ID        DOM_KEY
);


CREATE TABLE SIMPLE_ACZIS (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY,
    SUMA       DOM_SUMA
);


CREATE TABLE SIMPLE_ADRESIRANE (
    ID        DOM_KEY NOT NULL,
    TEXT      DOM_CHAR_120,
    GRUPA_ID  DOM_KEY
);


CREATE TABLE SIMPLE_ADRESIRANE_GRUPA (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_50,
    CT    DOM_KOL,
    TIP   DOM_SMAL_INT DEFAULT 0
);


CREATE TABLE SIMPLE_ADRESIRANE_NODE (
    ID             DOM_KEY NOT NULL,
    SIMPLE_ID      DOM_KEY,
    ADRESIRANE_ID  DOM_KEY
);


CREATE TABLE SIMPLE_CALC (
    ID               INTEGER NOT NULL,
    SIMPLE_ID        INTEGER,
    CHILD_SIMPLE_ID  INTEGER,
    KOL              QTY,
    FORMULA          DOM_CHAR_120,
    CHILD_SEL_ID     DOM_KEY,
    SEL_TEXT         VARCHAR(50),
    MIN_KOL          QTY,
    MAX_KOL          QTY,
    A_SN             DOM_BOOLEAN,
    PERCENT_LOST     DOM_PERCENT,
    PERCENT_SUM      DOM_PERCENT,
    SORT_INDEX       DOM_SMAL_INT,
    FORMULA2         DOM_CHAR_120,
    KOL2             DOM_KOL,
    QTY_NETO         DOM_KOL
);


CREATE TABLE SIMPLE_CALC_OLD (
    ID               INTEGER NOT NULL,
    OPR_ID           DOM_INT,
    SIMPLE_ID        INTEGER,
    CHILD_SIMPLE_ID  INTEGER,
    KOL              QTY,
    FORMULA          DOM_CHAR_120,
    CHILD_SEL_ID     DOM_KEY,
    SEL_TEXT         VARCHAR(50),
    MIN_KOL          QTY,
    MAX_KOL          QTY,
    A_SN             DOM_BOOLEAN,
    PERCENT_LOST     DOM_PERCENT,
    PERCENT_SUM      DOM_PERCENT,
    SORT_INDEX       DOM_SMAL_INT,
    FORMULA2         VARCHAR(120),
    KOL2             DOM_KOL,
    QTY_NETO         DOM_KOL
);


CREATE TABLE SIMPLE_CENI (
    ID            INTEGER NOT NULL,
    SIMPLE_ID     INTEGER,
    KLI_ID        INTEGER,
    KLI_GROUP_ID  SMALLINT,
    CENA          DOM_CENA,
    PERCENT       DOUBLE PRECISION,
    SIMPLE_GR_ID  INTEGER
);


CREATE TABLE SIMPLE_EXPLANATORY (
    ID              DOM_KEY NOT NULL,
    SIMPLE_ID       DOM_KEY,
    EXPL_ID         DOM_KEY,
    MIN_KOL         DOM_KOL,
    SIMPLE_MARK_ID  DOM_KEY,
    FORMULA         DOM_CHAR_100
);


CREATE TABLE SIMPLE_GROUP (
    ID            SMALLINT NOT NULL,
    NAME          VARCHAR(25),
    PERCENT_PROD  CURRENCY,
    PERCENT_EDRO  CURRENCY,
    ROUND_PROD    NUMERIC(4,2),
    ROUND_EDRO    NUMERIC(4,2),
    PARENT        SMALLINT
);


CREATE TABLE SIMPLE_KA_BIM (
    ID             DOM_KEY NOT NULL,
    SIMPLE_ID      DOM_KEY,
    BIM            DOM_CHAR_30,
    PROIZVODITEL   DOM_CHAR_20,
    DOC_METROLOGY  DOM_CHAR_30
);


CREATE TABLE SIMPLE_KOD (
    ID         INTEGER NOT NULL,
    SIMPLE_ID  INTEGER,
    KLI_ID     INTEGER,
    KOD        VARCHAR(15)
);


CREATE TABLE SIMPLE_MONTAGE (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY
);


CREATE TABLE SIMPLE_OBSERV (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY,
    NOTE       DOM_CHAR_1000
);


CREATE TABLE SIMPLE_PICT (
    ID         DOM_KEY_SMALL NOT NULL,
    SIMPLE_ID  DOM_KEY,
    PICTURE    DOM_BLOB,
    TEXT       DOM_CHAR_100
);


CREATE TABLE SIMPLE_PROP (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_50 NOT NULL
);


CREATE TABLE SIMPLE_PROP_MINOR (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_50 NOT NULL
);


CREATE TABLE SIMPLE_PROP_NODE (
    ID             DOM_KEY NOT NULL,
    SIMPLE_ID      DOM_KEY NOT NULL,
    MAJOR_PROP_ID  DOM_KEY NOT NULL
);


CREATE TABLE SIMPLE_RAZ (
    ID         SMALLINT NOT NULL,
    NAME       VARCHAR(15),
    SIMPLE_ID  INTEGER,
    KOL        QTY
);


CREATE TABLE SIMPLE_SKLAD_KOD (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY,
    SKLAD_ID   DOM_KEY,
    TEXT       DOM_CHAR_50 COLLATE PXW_CYRL
);


CREATE TABLE SIMPLE_TABLE_PRICES (
    ID                DOM_KEY NOT NULL,
    SIMPLE_ID         DOM_KEY NOT NULL,
    HEIGHT            DOM_KOL NOT NULL,
    WIDTH             DOM_KOL NOT NULL,
    PRICE             DOM_CENA NOT NULL,
    SELECT_SIMPLE_ID  DOM_KEY
);


CREATE TABLE SIMPLE_TRACKER (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY
);


CREATE TABLE SIMPLE_ZAETOST (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY
);


CREATE TABLE SKLAD (
    ID                SMALLINT NOT NULL,
    NAME              DOM_CHAR_50,
    OBEKT_ID          SMALLINT,
    USER_ID           INTEGER,
    POCKET            DOM_BOOLEAN DEFAULT '0',
    IS_SYSTEM         SMALLINT DEFAULT 0 NOT NULL,
    IS_ACTIVE         SMALLINT DEFAULT 1,
    F_MOVE_CENA       DOM_FLAG DEFAULT 0 NOT NULL,
    OWNER_ID          DOM_SMAL_INT,
    F_OTR_KOL         DOM_FLAG DEFAULT 0 NOT NULL,
    CL_MOVE_ID        DOM_KEY,
    CODE              DOM_CHAR_20,
    WAREHOUSE_MAP_ID  DOM_KEY,
    METRO_CLIENT_ID   DOM_CHAR_20
);


CREATE TABLE SKLAD_MOL (
    ID        INTEGER NOT NULL,
    SKLAD_ID  INTEGER,
    USER_ID   INTEGER
);


CREATE TABLE SKLAD_SELEKCIQ_NODE (
    ID           DOM_KEY NOT NULL,
    ID_SKLAD     DOM_KEY NOT NULL,
    ID_SELEKCIQ  DOM_KEY NOT NULL
);


CREATE TABLE SLEDI_KLI (
    ID              DOM_KEY NOT NULL,
    SLEDI_KLI       DOM_KEY,
    ATON_KLI        DOM_KEY,
    SLEDI_KLI_NAME  DOM_CHAR_100
);


CREATE TABLE SLEDI_LICENZ (
    ID            DOM_KEY NOT NULL,
    OT_OPR_ID     DOM_KEY,
    SLEDI_KLI_ID  DOM_KEY,
    DO_DATE       DOM_DATE,
    DATETIME      DOM_DATE_TIME,
    OBR           DOM_SMAL_INT
);


CREATE TABLE SLEDI_ROUMING_LOG (
    ID                  DOM_KEY NOT NULL,
    SLEDI_ID            DOM_INT,
    SLEDI_USER_ID       DOM_INT,
    SLEDI_KLI_ID        DOM_INT,
    DT                  DOM_DATE_TIME,
    OBR_DT              DOM_DATE,
    PROD_OPR_ID         DOM_KEY,
    PAIED               DOM_SMAL_INT,
    BUS_ID              DOM_INT,
    SMS_VALUE           DOM_CHAR_30 COLLATE PXW_CYRL,
    BUS_NUM             DOM_CHAR_30 COLLATE PXW_CYRL,
    BUS_IMEI            DOM_CHAR_20 COLLATE PXW_CYRL,
    BUS_REG_NUM         DOM_CHAR_15 COLLATE PXW_CYRL,
    USER_NAME           DOM_CHAR_50 COLLATE PXW_CYRL,
    USER_REALNAME       DOM_CHAR_50 COLLATE PXW_CYRL,
    SLEDI_COMPANY_NAME  DOM_CHAR_30 COLLATE PXW_CYRL
);


CREATE TABLE SLEDI_ROUMING_LOG_PAIED (
    ID        DOM_KEY NOT NULL,
    SLEDI_ID  DOM_INT,
    OBR       DOM_SMAL_INT
);


CREATE TABLE SLEDI_SIMPLE (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY
);


CREATE TABLE SLEDI_TEMPLATE_EL (
    ID                   DOM_KEY NOT NULL,
    S_ID                 DOM_KEY,
    SIMPLE_ID            DOM_KEY,
    TEMPLATE_ID          DOM_KEY,
    CENA                 DOM_CENA,
    PROMO_CENA           DOM_CENA,
    PROMO_PERIOD         DOM_SMAL_INT,
    SPRIAN               DOM_FLAG,
    SPRIAN_CENA          DOM_CENA,
    LIZING_SUMA          DOM_SUMA,
    LIZING_PERIOD        DOM_SMAL_INT,
    FAK_NAME             DOM_CHAR_100,
    DISTRIBUTOR_KLI_ID   DOM_KEY,
    DISTRIBUTOR_SUMA     DOM_SUMA,
    DISTRIBUTOR_TO_DATE  DOM_DATE,
    DT_LICENS            DOM_DATE,
    LAST_GEN_DATE        DOM_DATE
);


CREATE TABLE SLEDI_TEMPLATE_EL_GEN (
    ID                   DOM_KEY NOT NULL,
    S_ID                 DOM_KEY,
    SN                   DOM_CHAR_20,
    SIMPLE_ID            DOM_KEY,
    TEMPLATE_ID          DOM_KEY,
    TEMPLATE_GEN_ID      DOM_KEY,
    CENA                 DOM_CENA,
    PROMO_CENA           DOM_CENA,
    PROMO_PERIOD         DOM_SMAL_INT,
    SPRIAN               DOM_FLAG,
    SPRIAN_CENA          DOM_CENA,
    LIZING_SUMA          DOM_SUMA,
    LIZING_PERIOD        DOM_SMAL_INT,
    FAK_NAME             DOM_CHAR_100,
    DISTRIBUTOR_KLI_ID   DOM_KEY,
    DISTRIBUTOR_SUMA     DOM_SUMA,
    DISTRIBUTOR_TO_DATE  DOM_DATE,
    STE_ID               DOM_KEY
);


CREATE TABLE SLEDI_TEMPLATE_LIZING (
    SLEDI_TEMPLATE_EL_ID  DOM_KEY,
    OPR_ID                DOM_KEY
);


CREATE TABLE SLEDI_TEMPLATE_PROMO (
    SLEDI_TEMPLATE_EL_ID  DOM_KEY,
    OPR_ID                DOM_KEY
);


CREATE TABLE STORE_OBJ (
    ID             DOM_SMAL_INT NOT NULL,
    NAME           DOM_CHAR_50 NOT NULL,
    NAME_SHORT     DOM_CHAR_15,
    SKLAD_ID       DOM_SMAL_INT,
    PRICE_LIST_ID  DOM_KEY,
    OBEKT_ID       DOM_KEY
);


CREATE TABLE STORE_OTC (
    ID       DOM_KEY NOT NULL,
    OTCS_ID  DOM_KEY NOT NULL,
    OPR_ID   DOM_KEY NOT NULL
);


CREATE TABLE STORNO (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY NOT NULL,
    KOL        DOM_KOL NOT NULL,
    SUMA       DOM_SUMA,
    NOTE       DOM_CHAR_100,
    REASON_ID  DOM_KEY
);


CREATE TABLE STORNO_REASON (
    ID      DOM_KEY NOT NULL,
    REASON  DOM_CHAR_100
);


CREATE TABLE SUMI (
    ID           DOM_KEY NOT NULL,
    OPR_ID       DOM_KEY NOT NULL,
    SUMA         DOM_SUMA NOT NULL,
    SUMA_OST     DOM_SUMA NOT NULL,
    PADEJ        DOM_DATE,
    VAT_PERCENT  DOM_PERCENT
);


CREATE TABLE SYNC_ADVANCE_PAYMENT (
    ID              DOM_KEY NOT NULL,
    LOCAL_OPR_ID    DOM_KEY,
    SRV_PAYMENT_ID  DOM_INT,
    SUMA            DOM_SUMA,
    SYNC            DOM_FLAG
);


CREATE TABLE SYSTEM (
    DB_VERSION              INTEGER,
    ACTIVE_OWNER_ID         SMALLINT,
    KOL_DEC_POINT           SMALLINT DEFAULT 3,
    KOL_MINUS               DOM_BOOLEAN,
    CENI_S_DDS              DOM_BOOLEAN DEFAULT '1',
    PARI_PASS               CHAR(32),
    MIN_VERSION             INTEGER,
    H_SKLAD                 SMALLINT,
    ONOFF_LAST_RESEEVED_ID  INTEGER,
    EXE                     BLOB SUB_TYPE 0,
    EXE_VERSION             DOM_CHAR_20,
    UNREALSOFT              DOM_FLAG DEFAULT 0 NOT NULL,
    PROFORMAFAK_NUM         DOM_CHAR_10,
    K_SKLAD                 DOM_KEY,
    POS                     BLOB SUB_TYPE 0 SEGMENT SIZE 4096,
    POS_VERSION             DOM_CHAR_20 COLLATE PXW_CYRL,
    IZL_METOD               DOM_SMAL_INT,
    TRUST                   DOM_SMAL_INT,
    REDIRECT                BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    IZL_TYPE                DOM_FLAG,
    PW                      DOM_CHAR_100,
    API                     DOM_SMAL_INT NOT NULL
);


CREATE TABLE SYSTEM2 (
    ID           DOM_KEY NOT NULL,
    VAR_NAME     DOM_CHAR_30 NOT NULL,
    VAR_VALUE    DOM_BLOB_TEXT NOT NULL,
    DESCRIPTION  DOM_CHAR_100
);


CREATE TABLE TABLE_PRICE_COEFICIENT (
    ID                DOM_KEY NOT NULL,
    MASTER_SIMPLE_ID  DOM_KEY NOT NULL,
    SIMPLE_ID         DOM_KEY NOT NULL,
    COEFICIENT        DOM_PERCENT NOT NULL
);


CREATE TABLE TABLE_PRICE_SIMPLE_NODE (
    ID         DOM_KEY NOT NULL,
    PRICE_ID   DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY NOT NULL
);


CREATE TABLE TABLE_PRICES_DISCOUNTS (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY NOT NULL,
    KLI_ID     DOM_KEY NOT NULL,
    DISCOUNT   DOM_PERCENT NOT NULL
);


CREATE TABLE TASKS (
    ID            DOM_KEY NOT NULL,
    TASKS_TIP_ID  DOM_KEY NOT NULL,
    KLI_ID        DOM_KEY,
    OBEKT_ID      DOM_KEY,
    STATUS_TASKS  DOM_SMAL_INT NOT NULL,
    DT            DOM_DATE_TIME NOT NULL,
    OPR_ID        DOM_KEY,
    DOSHLO        DOM_SMAL_INT,
    SUMA          DOM_SUMA,
    OBEKT_FAK_ID  DOM_KEY,
    TMP_OPR_ID    DOM_KEY,
    USER_ID       DOM_KEY
);


CREATE TABLE TASKS_EL (
    ID             DOM_KEY NOT NULL,
    EL_ID          DOM_KEY,
    TASKS_ID       DOM_KEY,
    SIMPLE_ID      DOM_KEY,
    H              DOM_FLAG,
    LAST_GEN_DATE  DOM_DATE,
    EL_GEN_ID      DOM_KEY
);


CREATE TABLE TASKS_TIP (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_100 NOT NULL
);


CREATE TABLE TBL_KA (
    ID                   DOM_KEY NOT NULL,
    KLI_ID               DOM_KEY,
    FIRMA_ID             DOM_KEY,
    FU_NOM               DOM_CHAR_15 COLLATE PXW_CYRL,
    FP_NOM               DOM_CHAR_15 COLLATE PXW_CYRL,
    CENA1                ED_CENA,
    CENA2                ED_CENA,
    COMMENT              DOM_CHAR_100,
    DT                   DOM_DATE_TIME,
    SIMPLE_ID            DOM_KEY,
    SKLAD_ID             DOM_KEY,
    OBEKT_ID             DOM_KEY,
    OBEKT_NAME           DOM_CHAR_50 COLLATE PXW_CYRL,
    OBEKT_PLACE_ID       DOM_KEY,
    OBEKT_ADRES          DOM_CHAR_100,
    DAN_PLACE_ID         DOM_KEY,
    SERV_DOG_NOM         DOM_INT,
    SERV_DOG_DATE        DOM_DATE,
    FDRID                DOM_CHAR_10,
    BIM_NOM              DOM_CHAR_30,
    LOCKED               DOM_FLAG,
    NOTE                 DOM_CHAR_1000,
    IMSI                 DOM_INT64,
    PHONE_NUMBER         DOM_CHAR_15,
    OPERATOR             DOM_SMAL_INT,
    DISTRIBUTOR_KLI_ID   DOM_KEY,
    DISTRIBUTOR_SUMA     DOM_SUMA,
    DISTRIBUTOR_TO_DATE  DOM_DATE
);


CREATE TABLE TBL_KA_OPR_LOG (
    ID                DOM_KEY NOT NULL,
    KA_ID             DOM_KEY,
    OPR_ID            DOM_KEY,
    OPR_ID_PROD       DOM_KEY,
    OSNOVANIE         DOM_SMAL_INT,
    SERV_USER_ID      DOM_KEY,
    SERV_OPER_KLI_ID  DOM_KEY
);


CREATE TABLE TBL_KA_OPR_NODE (
    ID             DOM_KEY NOT NULL,
    KA_ID          DOM_KEY,
    OPR_ID         DOM_KEY,
    SERV_NUM       DOM_INT,
    SERV_USER_ID   DOM_KEY,
    DT_VALIDEN_DO  DOM_DATE
);


CREATE TABLE TBL_KA_REGNOM_NODE (
    ID       DOM_KEY NOT NULL,
    OPR_ID   DOM_KEY,
    REG_NOM  DOM_INT
);


CREATE TABLE TBL_KA_SERV_NOM (
    SERV_NOM  DOM_INT,
    BUSY      DOM_FLAG,
    REG_NOM   DOM_INT
);


CREATE TABLE TBL_KA_STOP_SIM_NODE (
    ID        DOM_KEY NOT NULL,
    DT_STOP   DOM_DATE,
    DT_START  DOM_DATE,
    KA_ID     DOM_KEY,
    USER_ID   DOM_KEY
);


CREATE TABLE TBL_LOG (
    ID           DOM_KEY NOT NULL,
    TABLE_NAME   DOM_CHAR_50 NOT NULL COLLATE PXW_CYRL,
    TABLE_ID     DOM_INT,
    TABLE_FIELD  DOM_CHAR_50 NOT NULL,
    TIP_OPR      DOM_BOOLEAN NOT NULL,
    OLD_VALUE    DOM_CHAR_300,
    NEW_VALUE    DOM_CHAR_300,
    DATETIME     DOM_DATE_TIME NOT NULL,
    USER_ID      DOM_INT,
    PC_ID        DOM_INT
);


CREATE GLOBAL TEMPORARY TABLE TBL_TEMPLATES_TMP_GEN (
    TEMPLATE_ID    INTEGER,
    GEN_FROM_DATE  DOM_DATE
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TBL_TMP_FAK_IN_OPR_ID (
    OPR_ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TBL_USER_PC (
    USER_ID  DOM_INT,
    PC_ID    DOM_INT
) ON COMMIT PRESERVE ROWS;


CREATE GLOBAL TEMPORARY TABLE TBL_WORK_OTR_KOL (
    FLAG  SMALLINT
) ON COMMIT DELETE ROWS;


CREATE TABLE TEMP$PROD_FOR_ANNUL (
    NUMBER  DOM_KEY NOT NULL,
    OPR_ID  DOM_KEY NOT NULL
);


CREATE TABLE TEMP$PROD_TO_FAK (
    NUMBER        DOM_KEY NOT NULL,
    PROD_ID       DOM_KEY NOT NULL,
    FAKT_PROD_ID  DOM_KEY
);


CREATE GLOBAL TEMPORARY TABLE TEMP$SLEDI_DATA (
    IMEI         DOM_CHAR_30,
    ROUMING_M2M  DOM_SMAL_INT,
    PROFIL       DOM_CHAR_10,
    IMSI         DOM_CHAR_15,
    IMEI_STATUS  DOM_CHAR_10,
    REG_NUMBER   DOM_CHAR_15,
    ERASED       DOM_BOOLEAN,
    DT_LICENS    DOM_DATE,
    IMEI_SIM     DOM_CHAR_20
) ON COMMIT DELETE ROWS;


CREATE TABLE TEMP_IMPORT (
    ID         DOM_KEY NOT NULL,
    VER        DOM_SMAL_INT NOT NULL,
    SIMPLE_ID  DOM_KEY,
    NAME       VARCHAR(100),
    NAME2      VARCHAR(100),
    CODE       VARCHAR(15),
    KOL        DOM_KOL,
    KOL2       DOM_KOL,
    SUMA       DOM_SUMA,
    CENA       DOM_CENA,
    RSN        DOM_SMAL_INT,
    OPIS       DOM_CHAR_50 NOT NULL
);


CREATE TABLE TEMPLATE_OPER_REL (
    USER_ID        DOM_KEY,
    ALLOW_USER_ID  DOM_KEY
);


CREATE TABLE TIP_REFUSED (
    ID             DOM_KEY NOT NULL,
    NAME           VARCHAR(100),
    FP_STORNO_TIP  DOM_INT
);


CREATE TABLE TIP_RESOLUTION (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_100
);


CREATE GLOBAL TEMPORARY TABLE TMP_ELTRADE_IMPORT (
    ID                    DOM_KEY,
    E_PRODUCT_ID          DOM_KEY,
    E_PRODUCT_NAME        DOM_CHAR_100,
    E_PRODUCT_SHORT_NAME  DOM_CHAR_15,
    E_PRICE               DOM_CENA,
    E_VAT_GROUP           DOM_SMAL_INT,
    E_ME_ID               DOM_SMAL_INT,
    E_ME_NAME             DOM_CHAR_10,
    E_GROUP_ID            DOM_SMAL_INT,
    E_GROUP_NAME          DOM_CHAR_50,
    E_BARCODE             DOM_CHAR_15,
    E_BARCODE_QTY         DOM_KOL,
    A_PRODUCT_ID          DOM_KEY,
    A_ME_ID               DOM_KEY,
    A_GROUP_ID            DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_IN_EL (
    IN_EL_ID  DOM_INT
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_IN_EL_PRODUCTION (
    IN_EL_ID  DOM_KEY NOT NULL
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_LAST_CENA (
    SIMPLE_ID  DOM_KEY NOT NULL,
    LAST_CENA  DOM_CENA
) ON COMMIT DELETE ROWS;


CREATE TABLE TMP_MARK_EL (
    ID           DOM_KEY NOT NULL,
    SIMPLE_ID    DOM_KEY NOT NULL,
    KOL          DOM_KOL NOT NULL,
    CENA         DOM_CENA,
    SUMA         DOM_SUMA NOT NULL,
    TMP_OPR_ID   DOM_KEY,
    RAZ_KOL      DOM_KOL,
    RAZ_ID       DOM_KEY,
    NUM          DOM_KEY,
    RSN          DOM_BOOLEAN,
    SKLAD_ID     DOM_KEY_SMALL,
    VAT_GROUP    DOM_SMAL_INT,
    VAT_PERCENT  NUMERIC(4,2)
);


CREATE TABLE TMP_METRO_EXPORT_OPR (
    OPR_ID  INTEGER NOT NULL
);


CREATE GLOBAL TEMPORARY TABLE TMP_NAL (
    SKLAD_ID   DOM_SMAL_INT NOT NULL,
    KOL        DOM_KOL NOT NULL,
    SUMA_SR    DOM_SUMA NOT NULL,
    SUMA_FR    DOM_SUMA NOT NULL,
    LAST_CENA  DOM_CENA,
    SIMPLE_ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE TABLE TMP_OMZ_SIM (
    SIMPLE_ID  DOM_KEY NOT NULL
);


CREATE TABLE TMP_OPR (
    ID        DOM_KEY NOT NULL,
    KLI_NOM   DOM_KEY,
    KLI_ID    DOM_KEY,
    SKLAD_ID  DOM_KEY,
    ERASED    DOM_KEY_SMALL NOT NULL,
    SUMA      DOM_SUMA,
    COMMENT   VARCHAR(1000),
    UNP_ID    DOM_INT64
);


CREATE TABLE TMP_OPR_SN (
    ID          DOM_KEY NOT NULL,
    SN          DOM_CHAR_30 NOT NULL COLLATE PXW_CYRL,
    ELEMENT_ID  DOM_KEY,
    NUM         DOM_KEY,
    TMP_OPR_ID  DOM_KEY,
    SIMPLE_ID   DOM_KEY,
    IN_EL_ID    DOM_KEY
);


CREATE GLOBAL TEMPORARY TABLE TMP_PARTIDA_ORDER (
    ELEMENT_ID  DOM_KEY,
    OPR_ID      DOM_KEY,
    OPR_DATE    DOM_DATE,
    SIMPLE_ID   DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_PARTIDA_RZV_KOL (
    PARTIDA_ID  DOM_KEY NOT NULL,
    KOL         DOM_KOL NOT NULL
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_REPLEACE_SIMPLE (
    OPR_ID  DOM_KEY NOT NULL
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_SEL_1 (
    ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_SEL_2 (
    ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_SEL_3 (
    ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_SEL_KLI (
    KLI_ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_SEL_REQUEST (
    ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_SIMPLE_RECALC (
    SIMPLE_ID  DOM_KEY NOT NULL,
    FLAG_CALC  DOM_FLAG DEFAULT 0 NOT NULL,
    DEPTH      DOM_SMAL_INT DEFAULT 0 NOT NULL,
    OPR_ID     DOM_KEY,
    OPR_DATE   DOM_DATE
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_SIMPLE_SEL_PROD (
    SIMPLE_ID  DOM_KEY,
    SKLAD_ID   DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE TABLE TMP_SIMPLE_SEL_PROD1 (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY,
    SKLAD_ID   DOM_KEY,
    NUM_TR     DOM_INT
);


CREATE GLOBAL TEMPORARY TABLE TMP_SIMPLE_TABLE_PRICES (
    HEIGHT     DOM_KOL NOT NULL,
    WIDTH      DOM_KOL NOT NULL,
    PRICE      DOM_CENA NOT NULL,
    SIMPLE_ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_TABLE_PRICES_SELECT (
    HEIGHT     DOM_KOL NOT NULL,
    WIDTH      DOM_KOL NOT NULL,
    SIMPLE_ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE TABLE TS_OTC_FILES (
    ID          DOM_KEY NOT NULL,
    FOR_DATE    DOM_DATE NOT NULL,
    DATETIME    DOM_DATE_TIME NOT NULL,
    SUMA        DOM_SUMA NOT NULL,
    OTC_DATA    DOM_BLOB_TEXT NOT NULL,
    OTC_TEXT    DOM_BLOB_TEXT NOT NULL,
    STATUS      DOM_FLAG,
    OTC_NUMBER  DOM_INT,
    DT_IMPORT   DOM_DATE_TIME,
    APP_IMPORT  VARCHAR(255),
    IP_IMPORT   VARCHAR(255)
);


CREATE TABLE UNFINISHED_SALES (
    ID         DOM_INT64 NOT NULL,
    NUM        DOM_INT NOT NULL,
    OPR_ID     DOM_INT NOT NULL,
    SIMPLE_ID  DOM_KEY NOT NULL,
    KOL        DOM_KOL NOT NULL,
    SUMA       DOM_SUMA NOT NULL,
    MAX_KOL    DOM_KOL NOT NULL,
    DT         DOM_DATE_TIME
);


CREATE TABLE UNP (
    ID      DOM_INT64 NOT NULL,
    OPR_ID  DOM_KEY NOT NULL,
    UNP     DOM_UNP,
    STATUS  DOM_FLAG
);


CREATE TABLE UNR_AGENT (
    ID     DOM_KEY NOT NULL,
    NAME   DOM_CHAR_100,
    NOMER  DOM_SMAL_INT
);


CREATE TABLE UNR_AGENT_ANALYSES (
    ID           DOM_KEY NOT NULL,
    ANALYSES_ID  DOM_KEY,
    AGENT_ID     DOM_KEY
);


CREATE TABLE UNR_ANALYSES (
    ID          DOM_KEY NOT NULL,
    OPR_ID      DOM_KEY,
    OUT_EL_ID   DOM_KEY,
    SUMA        DOM_SUMA,
    SUMA_SR     DOM_SUMA,
    VAT         DOM_PERCENT,
    PAIED       DOM_INT,
    PAIED_DATE  DOM_DATE_TIME,
    SKLAD_ID    DOM_KEY,
    KLI_ID      DOM_KEY,
    USER_ID     DOM_KEY,
    SIMPLE_ID   DOM_KEY,
    GROUP_ID    DOM_KEY,
    AGENT_ID    DOM_KEY,
    LOCK        DOM_FLAG,
    KOEF        DOM_PERCENT
);


CREATE TABLE UNR_GROUP (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_100
);


CREATE TABLE UNR_GROUP_SIMPLE (
    ID         DOM_KEY NOT NULL,
    GROUP_ID   DOM_KEY,
    SIMPLE_ID  DOM_KEY
);


CREATE TABLE UNR_KLI_AGENT (
    ID        DOM_KEY NOT NULL,
    KLI_ID    DOM_KEY,
    AGENT_ID  DOM_KEY
);


CREATE TABLE UNR_KLI_AGENT_2 (
    ID        DOM_KEY NOT NULL,
    KLI_ID    DOM_KEY,
    AGENT_ID  DOM_KEY
);


CREATE TABLE UNR_KOEF_NODE (
    ID         DOM_KEY NOT NULL,
    AGENT_ID   DOM_KEY,
    GROUP_ID   DOM_KEY,
    KOEF       DOM_PERCENT,
    KOEF_NAME  DOM_CHAR_100
);


CREATE TABLE "USER" (
    ID              SMALLINT NOT NULL,
    NAME            VARCHAR(30),
    EGN             VARCHAR(10),
    PASS            VARCHAR(32),
    RIGHTS          BIGINT,
    TEL             VARCHAR(20),
    IS_WORKED       SMALLINT DEFAULT 0 NOT NULL,
    DEF_KASA_ID     INTEGER,
    RIGHTS2         BIGINT,
    PASS2           VARCHAR(32),
    IS_ACTIVE       DOM_SMAL_INT DEFAULT 1,
    OBEKT_ID        DOM_SMAL_INT,
    SELLER          DOM_KEY_SMALL,
    KBD             DOM_KEY,
    RIGHTS3         BIGINT,
    LIMITEDUSER     DOM_SMAL_INT DEFAULT 0,
    RIGHTS4         BIGINT,
    USER_RIGHTS_ID  DOM_KEY,
    NAME_LAT        DOM_CHAR_30,
    SERV            DOM_FLAG,
    LANGUAGE        DOM_STR_3,
    RIGHTS5         BIGINT,
    RIGHTS6         BIGINT,
    EMAIL           DOM_CHAR_50,
    KASA_H          DOM_SMAL_INT,
    USER_SCHEMA_ID  DOM_KEY
);


CREATE TABLE USER_KASA_NODE (
    ID       INTEGER NOT NULL,
    KASA_ID  INTEGER,
    USER_ID  INTEGER
);


CREATE TABLE USER_OBEKT_NODE (
    ID         INTEGER NOT NULL,
    OBEKT_ID   INTEGER,
    USER_ID    INTEGER,
    SPR_RIGHT  DOM_BOOLEAN,
    OPR_RIGHT  DOM_BOOLEAN,
    OTCHET     DOM_SMAL_INT NOT NULL
);


CREATE TABLE USER_ROLES_EL (
    ID         DOM_KEY NOT NULL,
    ROLE_ID    DOM_KEY NOT NULL,
    SCHEMA_ID  DOM_KEY NOT NULL
);


CREATE TABLE USER_SCHEMAS (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_50 NOT NULL
);


CREATE TABLE USER_SEL_NODE (
    ID       DOM_KEY NOT NULL,
    USER_ID  DOM_KEY,
    SEL_ID   DOM_KEY
);


CREATE TABLE USER_SKLAD_NAL_NODE (
    ID        DOM_KEY NOT NULL,
    USER_ID   DOM_KEY_SMALL NOT NULL,
    SKLAD_ID  DOM_KEY_SMALL NOT NULL
);


CREATE TABLE USER_SKLAD_NODE (
    ID         INTEGER NOT NULL,
    SKLAD_ID   INTEGER,
    USER_ID    INTEGER,
    SPR_RIGHT  DOM_BOOLEAN,
    OPR_RIGHT  DOM_BOOLEAN
);


CREATE TABLE VALUTA (
    ID      SMALLINT NOT NULL,
    CODE    CHAR(3),
    NAME    VARCHAR(20),
    KURS    KURS,
    SYMBOL  UTF_10,
    FORMAT  UTF_10
);


CREATE TABLE VISIT (
    ID          DOM_KEY NOT NULL,
    OPR_ID      DOM_KEY NOT NULL,
    START_TIME  DOM_DATE_TIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
    END_TIME    DOM_DATE_TIME DEFAULT CURRENT_TIMESTAMP NOT NULL
);


CREATE TABLE VISIT_EL (
    ID             DOM_KEY NOT NULL,
    VISIT_OPR_ID   DOM_KEY NOT NULL,
    OPR_ID         DOM_KEY,
    VISIT_TYPE_ID  DOM_KEY NOT NULL,
    SYNCH_TIME     DOM_DATE_TIME
);


CREATE TABLE VISIT_TYPE (
    ID    DOM_KEY_SMALL NOT NULL,
    NAME  DOM_CHAR_50
);


CREATE TABLE WAREHOUSE_BASE_MAP (
    ID         DOM_KEY NOT NULL,
    NAME       DOM_CHAR_50 NOT NULL,
    PRIORITY   DOM_SMAL_INT,
    PARENT_ID  DOM_KEY
);


CREATE TABLE WHOKNA_CONNECTION (
    ID    DOM_KEY NOT NULL,
    NOTE  DOM_CHAR_100 NOT NULL,
    CS    DOM_CHAR_300 NOT NULL
);


CREATE TABLE WUERTH_COMMIS (
    ID             DOM_KEY NOT NULL,
    COMMISGRP      DOM_INT NOT NULL,
    LOWLIMIT       DOM_INT,
    HIGHLIMIT      DOM_INT,
    COMMISPROCENT  DOM_INT,
    INTERVAL_NAME  DOM_CHAR_8
);


CREATE TABLE WUERTH_SIMPLE (
    ID                   DOM_KEY NOT NULL,
    SIMPLE_ID            DOM_KEY,
    PRICEUNIT            DOM_INT,
    COMMISGRP            DOM_INT,
    MAXDISC              DOM_INT,
    LISTPRICE_W_MAXDISC  ED_CENA,
    QTY1                 DOM_KOL,
    PRICEQTY1            ED_CENA,
    QTY2                 DOM_KOL,
    PRICEQTY2            DOM_KOL,
    OPAKOVAEMO           DOM_INT
);


CREATE TABLE ZAIAVKA_DOSTAVKA (
    ID              DOM_KEY NOT NULL,
    OPR_ID          DOM_KEY NOT NULL,
    SIMPLE_ID       DOM_KEY NOT NULL,
    SKLAD_ID        DOM_KEY,
    KLI_ID          DOM_KEY,
    RAZFASOVKA_ID   DOM_KEY,
    CENA_LAST       DOM_CENA,
    CENA_CL         DOM_CENA,
    KOL_ZAIAVKA     DOM_KOL,
    KOL_NAL         DOM_KOL,
    KOL_RAZ         DOM_KOL,
    FLAG_READY      DOM_SMAL_INT DEFAULT 0,
    CENA_CL_NO_DDS  DOM_CENA
);


CREATE TABLE ZAIAVKA_DOSTAVKA_NODE (
    ID         DOM_KEY NOT NULL,
    OPR_ID_OB  DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY NOT NULL
);


CREATE TABLE ZD_DOST_MOVE_NODE (
    ID                DOM_KEY NOT NULL,
    OPR_ID_ZD         DOM_KEY NOT NULL,
    OPR_ID_DOST_MOVE  DOM_KEY NOT NULL,
    SIMPLE_ID         DOM_KEY NOT NULL,
    KOL               DOM_KOL NOT NULL
);


CREATE TABLE ZD_POR_NODE (
    ID         DOM_KEY NOT NULL,
    OPR_ID_ZD  DOM_KEY NOT NULL,
    POR_EL_ID  DOM_KEY NOT NULL
);




/******************************************************************************/
/***                                 Views                                  ***/
/******************************************************************************/


/* View: GET_PAY_PARI_INFO */
CREATE VIEW GET_PAY_PARI_INFO(
    PARI_ID,
    SKL_OPR_ID,
    KASA_NAME)
AS
SELECT 
    PARI.ID, 
    PARI_SKLOPR_NODE.OPR_ID, 
    KASA.NAME 
FROM 
    PARI INNER JOIN PARI_SKLOPR_NODE ON PARI_SKLOPR_NODE.OPR_PARI_ID = PARI.OPR_ID 
    INNER JOIN KASA ON KASA.ID = PARI.KASA_ID 
 
UNION ALL 
 
SELECT 
    PARI_TMP.ID, 
    PARI_TMP.OPR_ID, 
    KASA.NAME 
FROM 
    PARI_TMP INNER JOIN KASA ON KASA.ID = PARI_TMP.KASA_ID 
WHERE 
    NOT EXISTS (SELECT PARI_SKLOPR_NODE.ID FROM PARI_SKLOPR_NODE WHERE PARI_SKLOPR_NODE.OPR_ID = PARI_TMP.OPR_ID) 
ORDER BY 2;
;



/* View: V_GET_KLI */
CREATE VIEW V_GET_KLI(
    KLI_ID)
AS
SELECT DISTINCT 
  OPR.KLI_ID 
FROM 
  OPR 
WHERE 
  OPR.OPR_TIP = 2 
  AND OPR.KLI_ID IS NOT NULL
;



/* View: V_KLI_SUMA_PAY_OST */
CREATE VIEW V_KLI_SUMA_PAY_OST(
    KLI_ID,
    SUMA_OSTATAK)
AS
SELECT 
KLI.ID, 
SUM(SUMI.SUMA_OST) 
FROM 
KLI INNER JOIN OPR ON OPR.KLI_ID = KLI.ID AND KLI.KLIENT = '1' AND OPR.OPR_TIP = 6 
INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
WHERE 
NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
GROUP BY 1 
 
UNION ALL 
 
SELECT 
KLI.ID, 
SUM(-SUMI.SUMA_OST) 
FROM 
KLI INNER JOIN OPR ON OPR.KLI_ID = KLI.ID AND KLI.KLIENT = '1' AND OPR.OPR_TIP = 29 
INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
WHERE 
NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
GROUP BY 1
;



/* View: V_KLI_PAY_OST */
CREATE VIEW V_KLI_PAY_OST(
    KLI_ID,
    SUMA_OSTATAK)
AS
SELECT 
V_KLI_SUMA_PAY_OST.KLI_ID, 
SUM(V_KLI_SUMA_PAY_OST.SUMA_OSTATAK) 
FROM 
V_KLI_SUMA_PAY_OST 
GROUP BY 1
;



/* View: V_PARTIDA_EL_IN */
CREATE VIEW V_PARTIDA_EL_IN(
    ELEMENT_ID,
    OPR_ID,
    OPR_DATE,
    SIMPLE_ID,
    IS_F)
AS
SELECT 
    PN.ELEMENT_ID, 
    OPR.ID, 
    OPR.OPR_DATE, 
    IN_EL.SIMPLE_ID, 
    IN_EL.IS_F 
FROM 
    PARTIDA_NAL PN INNER JOIN IN_EL ON IN_EL.ID = PN.IN_EL_ID 
    INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
WHERE 
    OPR.OPR_TIP IN (1,3,12,14,22,28,33,55)
;




/******************************************************************************/
/***                           Check constraints                            ***/
/******************************************************************************/

ALTER TABLE WAREHOUSE_BASE_MAP ADD CONSTRAINT CHK1_WAREHOUSE_BASE_MAP CHECK (parent_id <> id);
ALTER TABLE ONLINE_USERS ADD CONSTRAINT CHK1_ONLINE_USERS CHECK (IS_ACTIVE IN (0, 1));
ALTER TABLE UNP ADD CONSTRAINT CHK1_UNP CHECK ((COALESCE((SELECT COUNT(UNP.ID) FROM UNP WHERE UPPER(UNP.UNP) = UPPER(NEW.UNP) AND UNP.ID <> NEW.ID),0) = 0));
ALTER TABLE SUMI ADD CONSTRAINT CHK_SUMI CHECK (SUMA_OST >= 0.00);


/******************************************************************************/
/***                           Unique constraints                           ***/
/******************************************************************************/

ALTER TABLE CENOVA_LISTA_EL ADD CONSTRAINT UNQ1_CENOVA_LISTA_EL UNIQUE (OPR_ID, SIMPLE_ID);
ALTER TABLE CFG_RAZPAD_CALC ADD CONSTRAINT UNQ1_CFG_RAZPAD_CALC UNIQUE (FROM_PRODUCT_ID, TO_PRODUCT_ID);
ALTER TABLE COUNTIES ADD CONSTRAINT UNQ_COUNTIES_NAME UNIQUE (NAME);
ALTER TABLE COURSES_OPR_NODE ADD CONSTRAINT UNQ1_COURSES_OPR_NODE UNIQUE (OPR_ID);
ALTER TABLE CRM_ATON_PRODUKT ADD CONSTRAINT UNQ_CRM_ATON_PRODUKT UNIQUE (SIMPLE_ID, CRM_PRODUKT);
ALTER TABLE CRM_INFO_LICENZIA ADD CONSTRAINT UNQ_CRM_INFO_LICENZIA UNIQUE (KLI_ID, PRODUCT_CRM);
ALTER TABLE CRM_KLI ADD CONSTRAINT UNQ1_CRM_KLI UNIQUE (KLI_ID, CRM_ID);
ALTER TABLE DEF_RAZ_SIMPLE ADD CONSTRAINT UNQ1_DEF_RAZ_SIMPLE UNIQUE (SIMPLE_ID, RAZFASOVKA_ID);
ALTER TABLE EXTENDED_VARANTY_NODE ADD CONSTRAINT UNQ1_EXTENDED_VARANTY_NODE UNIQUE (OUT_EL_ID);
ALTER TABLE FAK_PROD ADD CONSTRAINT UNQ1_FAK_PROD UNIQUE (OPR_ID, FAK_ID);
ALTER TABLE FAK_PROD_REAL_PROD_NODE ADD CONSTRAINT UNQ_FP_RP_IDS UNIQUE (PROD_OPR_ID, FKT_PROD_OPR_ID);
ALTER TABLE FIRMI ADD CONSTRAINT UNQ_FIRMI_USER_NAME UNIQUE (E_FAK_USER_NAME);
ALTER TABLE FP ADD CONSTRAINT UNQ1_FP UNIQUE (FP_NUMBER);
ALTER TABLE INSTALLATION_USERS ADD CONSTRAINT UNQ1_INSTALLATION_USERS UNIQUE (INSTALLATION_ID, INSTALLER_ID);
ALTER TABLE INSTALLERS ADD CONSTRAINT UNQ1_INSTALLERS UNIQUE (USER_ID);
ALTER TABLE INSTALLERS_GROUP ADD CONSTRAINT UNQ1_INSTALLERS_GROUP UNIQUE (INSTALLER_ID, GROUP_ID);
ALTER TABLE KI_DOST_NODE ADD CONSTRAINT UNQ_KI_DOST_SUN_OPR_ID UNIQUE (SUB_KI_OPR_ID);
ALTER TABLE KI_DOST_SUMA ADD CONSTRAINT UNQ_KI_DOST_SUMA_OPR_ID UNIQUE (KI_OPR_ID);
ALTER TABLE KI_DOST_SUMA_FAK ADD CONSTRAINT UNQ_KI_DOST_SUMA_FAK_KI UNIQUE (KI_SUMA_ID, FAK_IN_ID);
ALTER TABLE KLI_DIST_NODE ADD CONSTRAINT UNQ_KLI_DIST_NODE UNIQUE (KLI_ID, DIST_ID);
ALTER TABLE KLI_FIRMA_NODE ADD CONSTRAINT UNQ1_KLI_FIRMA_NODE UNIQUE (KLI_ID, FIRMA_ID);
ALTER TABLE KLI_SKLAD_NODE ADD CONSTRAINT UNQ1_KLI_SKLAD_NODE UNIQUE (KLI_ID, SKLAD_ID, SELEKCIQ_ID);
ALTER TABLE NAL ADD CONSTRAINT UNQ_NAL_SIMPLE_SKLAD UNIQUE (SIMPLE_ID, SKLAD_ID);
ALTER TABLE NAL_F ADD CONSTRAINT UNQ_NAL_F_SIMPLE UNIQUE (SIMPLE_ID);
ALTER TABLE OFFER_USER_NODE ADD CONSTRAINT UNQ1_OFFER_USER_NODE UNIQUE (OFFER_ID, USER_ID);
ALTER TABLE OFF_OBEKTI_LIST ADD CONSTRAINT UNQ1_OFF_OBEKTI_LIST UNIQUE (OBEKT_ID);
ALTER TABLE ONLINE_USERS ADD CONSTRAINT UNQ1_ONLINE_USERS UNIQUE (EMAIL);
ALTER TABLE ONLINE_USERS ADD CONSTRAINT UNQ_ONLINE_USERS_DISTRIBUTOR UNIQUE (DISTRIBUTOR_ID);
ALTER TABLE ONLINE_USERS ADD CONSTRAINT UNQ_ONLINE_USERS_USER UNIQUE (USER_ID);
ALTER TABLE OPR_PAYMENT_NODE ADD CONSTRAINT UNQ_OPR_PAYMENT_NODE UNIQUE (OPR_ID, PAYMENT_ID);
ALTER TABLE OPR_RECEPIES ADD CONSTRAINT UNQ_OPR_RECEPIES UNIQUE (OPR_ID, RECEPIE_ID);
ALTER TABLE PARTIDA_IN_EL_NODE ADD CONSTRAINT UNQ_PIN UNIQUE (IN_EL_ID, PARTIDA_NODE_ID);
ALTER TABLE PARTIDA_NAL ADD CONSTRAINT UNQ_PARTIDA_NAL UNIQUE (IN_EL_ID, ELEMENT_ID);
ALTER TABLE PARTIDA_OUT_EL_NODE ADD CONSTRAINT UNQ_PON UNIQUE (OUT_EL_ID, PARTIDA_NODE_ID);
ALTER TABLE PLACE ADD CONSTRAINT UNQ_PLACE UNIQUE (NAME);
ALTER TABLE POR_EL_PICTURES_NODE ADD CONSTRAINT UNQ1_POR_EL_PICTURES_NODE UNIQUE (POR_EL_ID, PICTURE_ID);
ALTER TABLE POR_OFFER_TERMS_NODE ADD CONSTRAINT UNQ1_POR_OFFER_TERMS_NODE UNIQUE (POR_ID, TERMS_ID);
ALTER TABLE PROFORMA_TO_FAK ADD CONSTRAINT UNQ_PROFORMA_ID UNIQUE (PROFORMA_ID);
ALTER TABLE PROP_NODE ADD CONSTRAINT UNQ_PROP_NODE UNIQUE (MAJOR_PROP_ID, MINOR_PROP_ID);
ALTER TABLE RET_DOST_MOVE_NODE ADD CONSTRAINT UNQ_RET_MOVE_NODE_IN UNIQUE (IN_OPR_ID);
ALTER TABLE RET_DOST_MOVE_NODE ADD CONSTRAINT UNQ_RET_MOVE_NODE_OUT UNIQUE (OUT_OPR_ID);
ALTER TABLE SELEKCIQ_KALK_EL ADD CONSTRAINT UNQ_SELEKCIQ_KALK_EL UNIQUE (SELEKCIQ_ID, SIMPLE_ID);
ALTER TABLE SELEKCIQ_KASA_EL ADD CONSTRAINT UNQ1_SELEKCIQ_KASI_EL_SEL_KASA_ UNIQUE (SELEKCIQ_ID, KASA_ID);
ALTER TABLE SELEKCIQ_KLI_EL ADD CONSTRAINT UNQ_SELEKCIQ_KLI_EL UNIQUE (KLI_ID, SELEKCIQ_ID);
ALTER TABLE SELEKCIQ_SIM_EL ADD CONSTRAINT UNQ_SELEKCIQ_SIM_EL UNIQUE (SIMPLE_ID, SELEKCIQ_ID);
ALTER TABLE SIMPLE_PROP_NODE ADD CONSTRAINT UNQ_SIMPLE_PROP_NODE UNIQUE (MAJOR_PROP_ID, SIMPLE_ID);
ALTER TABLE SKLAD_MOL ADD CONSTRAINT UNQ_SKLAD_MOL UNIQUE (SKLAD_ID, USER_ID);
ALTER TABLE SYSTEM2 ADD CONSTRAINT UNQ_SYSTEM UNIQUE (VAR_NAME);
ALTER TABLE TABLE_PRICES_DISCOUNTS ADD CONSTRAINT UNQ1_TABLE_PRICES_DISCOUNTS UNIQUE (SIMPLE_ID, KLI_ID);
ALTER TABLE TABLE_PRICE_COEFICIENT ADD CONSTRAINT UNQ1_TABLE_PRICE_COEFICIENT UNIQUE (MASTER_SIMPLE_ID, SIMPLE_ID);
ALTER TABLE TABLE_PRICE_SIMPLE_NODE ADD CONSTRAINT UNQ1_TABLE_PRICE_SIMPLE_NODE UNIQUE (PRICE_ID, SIMPLE_ID);
ALTER TABLE TMP_PARTIDA_RZV_KOL ADD CONSTRAINT UNQ_TMP_PARTIDA_ID UNIQUE (PARTIDA_ID);
ALTER TABLE TMP_REPLEACE_SIMPLE ADD CONSTRAINT UNQ_TMP_REPLACE_SIMPLE UNIQUE (OPR_ID);
ALTER TABLE UNR_GROUP_SIMPLE ADD CONSTRAINT UNQ1_UNR_GROUP_SIMPLE UNIQUE (SIMPLE_ID);


/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE ACTIONS ADD CONSTRAINT PK_ACTIONS_ID PRIMARY KEY (ID);
ALTER TABLE ADDRESSES ADD CONSTRAINT PK_ADDRESSES_ID PRIMARY KEY (ID);
ALTER TABLE AMBALAJ ADD CONSTRAINT PK_AMBALAJ PRIMARY KEY (ID);
ALTER TABLE AMBALAJ_HISTORY ADD CONSTRAINT PK_AMABALAJ_HISTORY_ID PRIMARY KEY (ID);
ALTER TABLE AMBALAJ_HISTORY_EDIT ADD CONSTRAINT PK_AMBALAJ_HISTORY_EDIT PRIMARY KEY (ID);
ALTER TABLE ANALYSES ADD CONSTRAINT PK_ANALYSES PRIMARY KEY (ID);
ALTER TABLE BARCODE ADD CONSTRAINT PK_BARKODE_ID PRIMARY KEY (ID);
ALTER TABLE BH_OTSTAPKI ADD CONSTRAINT PK_BH_OTSTAPKI_ID PRIMARY KEY (ID);
ALTER TABLE BH_PROD_POR ADD CONSTRAINT PK_BH_PROD_POR_ID PRIMARY KEY (ID);
ALTER TABLE BONUSI_ZA_RAZCHET ADD CONSTRAINT PK_BZR_ID PRIMARY KEY (ID);
ALTER TABLE BONUS_CENA_TOCHKI ADD CONSTRAINT PK_BONUS_CENA_TOCHKI PRIMARY KEY (ID);
ALTER TABLE BONUS_CONFIG ADD CONSTRAINT PK_BONUS_CONFIG PRIMARY KEY (ID);
ALTER TABLE BONUS_CONFIG_KLI ADD CONSTRAINT PK_BONUS_CONFIG_KLI PRIMARY KEY (ID);
ALTER TABLE BONUS_CONFIG_SKLAD ADD CONSTRAINT PK_BONUS_CONFIG_SKLAD PRIMARY KEY (ID);
ALTER TABLE BONUS_KLI_USED ADD CONSTRAINT PK_BONUS_KLI_USED_ID PRIMARY KEY (ID);
ALTER TABLE BONUS_RAZCHET_NODE ADD CONSTRAINT PK_BONUS_RAZCHET_NODE_ID PRIMARY KEY (ID);
ALTER TABLE BROENE ADD CONSTRAINT PK_BROENE_ID PRIMARY KEY (ID);
ALTER TABLE BROENE_EL ADD CONSTRAINT PK_BROENE_EL_ID PRIMARY KEY (ID);
ALTER TABLE BROENE_EL_DETAILS ADD CONSTRAINT PK_BROENE_EL_DETAILS PRIMARY KEY (ID);
ALTER TABLE BROENE_EL_RAZ_NODE ADD CONSTRAINT PK_BROENE_EL_RAZ_NODE PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA ADD CONSTRAINT PK_CENOVA_LISTA PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_EDIT ADD CONSTRAINT PK_CENOVA_LISTA_EDIT PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_EL ADD CONSTRAINT PK_CENOVA_LISTA_EL PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_EL_EDIT ADD CONSTRAINT PK_CENOVA_LISTA_EL_EDIT PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_HISTORY ADD CONSTRAINT PK_CENOVA_LISTA_HISTORY PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_KLI ADD CONSTRAINT PK_CENOVA_LISTA_KLI PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_KLI_EDIT ADD CONSTRAINT PK_CENOVA_LISTA_KLI_EDIT PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_PROTOKOL ADD CONSTRAINT PK_CENOVA_LISTA_PROTOKOL PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_SKLAD ADD CONSTRAINT PK_CENOVA_LISTA_SKLAD PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_SKLAD_EDIT ADD CONSTRAINT PK_CENOVA_LISTA_SKLAD_EDIT PRIMARY KEY (ID);
ALTER TABLE CFG_FAK_ACCOUNTING ADD CONSTRAINT PK_CFG_FAK_ACCOUNTING PRIMARY KEY (ID);
ALTER TABLE CFG_INFO ADD CONSTRAINT PK_CFG_INFO PRIMARY KEY (ID);
ALTER TABLE CFG_KASA_TEMPLATE ADD CONSTRAINT PK_CFG_KASA_TEMPLATE PRIMARY KEY (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT PK_CFG_KASA_TEMPLATE_EL PRIMARY KEY (ID);
ALTER TABLE CFG_LOG ADD CONSTRAINT PK_CFG_LOG PRIMARY KEY (ID);
ALTER TABLE CFG_OSN_DDS ADD CONSTRAINT PK_CFG_OSN_DDS PRIMARY KEY (ID);
ALTER TABLE CFG_PAYMENTS ADD CONSTRAINT PK_CFG_PAYMENTS PRIMARY KEY (ID);
ALTER TABLE CFG_PAYMENTS_KLI ADD CONSTRAINT PK_CFG_PAYMENTS_KLI_ID PRIMARY KEY (ID);
ALTER TABLE CFG_RAZPAD_CALC ADD CONSTRAINT PK_CFG_RAZPAD_CALC_ID PRIMARY KEY (ID);
ALTER TABLE CFG_VEZNI ADD CONSTRAINT PK_CFG_VEZNI_ID PRIMARY KEY (ID);
ALTER TABLE CLAIM_EL ADD CONSTRAINT PK_CLAIM_EL_ID PRIMARY KEY (ID);
ALTER TABLE CLOTH_SIZE ADD CONSTRAINT PK_CLOTH_SIZE_ID PRIMARY KEY (ID);
ALTER TABLE CN_DELIVERY_ELEMENTS ADD CONSTRAINT PK_CN_DELIVERY_ELEMENTS PRIMARY KEY (ID);
ALTER TABLE COMMENT ADD CONSTRAINT PK_COMMENT_ID PRIMARY KEY (ID);
ALTER TABLE COMMENTS ADD CONSTRAINT PK_COMMENTS PRIMARY KEY (ID);
ALTER TABLE COMMENT_EINVOICE_NODE ADD CONSTRAINT PK_COMMENT_EINVOICE_NODE PRIMARY KEY (ID);
ALTER TABLE COMMENT_FIRMI_NODE ADD CONSTRAINT PK_COMMENT_FIRMI_NODE PRIMARY KEY (ID);
ALTER TABLE COMMENT_KLI_NODE ADD CONSTRAINT PK_COMMENT_KLI_NODE PRIMARY KEY (ID);
ALTER TABLE COMMENT_OPR_NODE ADD CONSTRAINT PK_COMMENT_OPR_NODE PRIMARY KEY (ID);
ALTER TABLE COMMENT_OPR_TEMPLATE_NODE ADD CONSTRAINT PK_COMMENT_OPR_TEMPLATE_NODE_ID PRIMARY KEY (ID);
ALTER TABLE COMMENT_SIMPLE_NODE ADD CONSTRAINT PK_COMMENT_SIMPLE_NODE PRIMARY KEY (ID);
ALTER TABLE COMMENT_TASKS_NODE ADD CONSTRAINT PK_COMMENT_TASKS_NODE PRIMARY KEY (ID);
ALTER TABLE COUNTIES ADD CONSTRAINT PK_COUNTIES PRIMARY KEY (ID);
ALTER TABLE COUNTRIES ADD CONSTRAINT PK_COUNTRIES_ID PRIMARY KEY (ID);
ALTER TABLE COURSES ADD CONSTRAINT PK_COURSES_ID PRIMARY KEY (ID);
ALTER TABLE COURSES_OPR_NODE ADD CONSTRAINT PK_COURSES_OPR_NODE_ID PRIMARY KEY (ID);
ALTER TABLE CRM_ATON_PRODUKT ADD CONSTRAINT PK_CRM_ATON_PRODUKT PRIMARY KEY (ID);
ALTER TABLE CRM_INFO_LICENZIA ADD CONSTRAINT PK_CRM_INFO_LICENZIA PRIMARY KEY (ID);
ALTER TABLE CRM_KLI ADD CONSTRAINT PK_CRM_KLI_ID PRIMARY KEY (ID);
ALTER TABLE CRM_PRODUCT ADD CONSTRAINT PK_CRM_PRODUCT_ID PRIMARY KEY (ID);
ALTER TABLE DEF_RAZ_SIMPLE ADD CONSTRAINT PK_DEF_RAZ_SIMPLE PRIMARY KEY (ID);
ALTER TABLE DELIVERY_CURRENCY ADD CONSTRAINT PK_DELIVERY_CURRENCY PRIMARY KEY (ID);
ALTER TABLE DOC ADD CONSTRAINT PK_DOC PRIMARY KEY (ID);
ALTER TABLE DOCUMENTS ADD CONSTRAINT PK_DOCUMENTS_ID PRIMARY KEY (ID);
ALTER TABLE DOCUMENTS_TIP ADD CONSTRAINT PK_DOCUMENTS_TIP_ID PRIMARY KEY (ID);
ALTER TABLE DOCUMENTS_TIP_CODE ADD CONSTRAINT PK_DOCUMENTS_TIP_CODE_ID PRIMARY KEY (ID);
ALTER TABLE DOST_CENI ADD CONSTRAINT PK_DOST_CENI PRIMARY KEY (ID);
ALTER TABLE DOST_IMPORT_KLI_MAP ADD CONSTRAINT PK_DOST_IMPORT_KLI_MAP PRIMARY KEY (ID);
ALTER TABLE DOST_IMPORT_RAZF_MAP ADD CONSTRAINT PK_DOST_IMPORT_RAZF_MAP PRIMARY KEY (ID);
ALTER TABLE DOST_IMPORT_SIMPLE_MAP ADD CONSTRAINT PK_DOST_IMPORT_SIMPLE_MAP PRIMARY KEY (ID);
ALTER TABLE DOST_NODE ADD CONSTRAINT PK_DOST_NODE_ID PRIMARY KEY (ID);
ALTER TABLE DVSK_DOK_TYPE ADD CONSTRAINT PK_DVSK_DOK_TYPE_ID PRIMARY KEY (ID);
ALTER TABLE DVSK_EL ADD CONSTRAINT PK_DVSK_EL PRIMARY KEY (ID);
ALTER TABLE DVSK_OPR ADD CONSTRAINT PK_DVSK_OPR PRIMARY KEY (ID);
ALTER TABLE EGROUPS ADD CONSTRAINT PK_EGROUPS_ID PRIMARY KEY (ID);
ALTER TABLE ESIMPLE ADD CONSTRAINT PK_ESIMPLE_ID PRIMARY KEY (ID);
ALTER TABLE ETIKETI ADD CONSTRAINT PK_ETIKETI PRIMARY KEY (ID);
ALTER TABLE EXCHANGE_SN ADD CONSTRAINT PK_EXCHANGE_SN_ID PRIMARY KEY (ID);
ALTER TABLE EXPLANATORY ADD CONSTRAINT PK_EXPLANATORY PRIMARY KEY (ID);
ALTER TABLE EXPLANATORY_TYPE ADD CONSTRAINT PK_EXPLANATORY_TYPE_ID PRIMARY KEY (ID);
ALTER TABLE EXPORTED_OPERATIONS ADD CONSTRAINT PK_EXPORTED_OPERATIONS PRIMARY KEY (ID);
ALTER TABLE EXPORTS ADD CONSTRAINT PK_EXPORTS_ID PRIMARY KEY (ID);
ALTER TABLE EXPORT_OPR ADD CONSTRAINT PK_EXPORT_OPR_ID PRIMARY KEY (ID);
ALTER TABLE EXPORT_SYNC ADD CONSTRAINT PK_EXPORT_SYNC PRIMARY KEY (ID);
ALTER TABLE EXPORT_TYPES ADD CONSTRAINT PK_EXPORT_TYPES PRIMARY KEY (ID);
ALTER TABLE EXPORT_VENDORS ADD CONSTRAINT PK_EXPORT_VENDORS PRIMARY KEY (ID);
ALTER TABLE EXTENDED_VARANTY_NODE ADD CONSTRAINT PK_EXTENDED_VARANTY_NODE_ID PRIMARY KEY (ID);
ALTER TABLE FAK ADD CONSTRAINT PK_FAK_ID PRIMARY KEY (ID);
ALTER TABLE FAKTURA_OSNOVANIE ADD CONSTRAINT PK_FAKTURA_OSNOVANIE PRIMARY KEY (ID);
ALTER TABLE FAK_EL ADD CONSTRAINT PK_FAK_EL_ID PRIMARY KEY (ID);
ALTER TABLE FAK_EL_IN_EL_NODE ADD CONSTRAINT PK_FAK_EL_IN_EL_NODE_ID PRIMARY KEY (ID);
ALTER TABLE FAK_IN ADD CONSTRAINT PK_FAK_IN_ID PRIMARY KEY (ID);
ALTER TABLE FAK_IN_EL_NODE ADD CONSTRAINT PK_FAK_IN_EL_NODE_ID PRIMARY KEY (ID);
ALTER TABLE FAK_IN_SUMI ADD CONSTRAINT PK_FAK_IN_SUMI PRIMARY KEY (ID);
ALTER TABLE FAK_KI_NUMBER ADD CONSTRAINT PK_FAK_KI_NUMBER PRIMARY KEY (ID);
ALTER TABLE FAK_OUT_EL_NODE ADD CONSTRAINT PK_FAK_OUT_EL_NODE_ID PRIMARY KEY (ID);
ALTER TABLE FAK_PROD ADD CONSTRAINT PK_FAK_PROD_ID PRIMARY KEY (ID);
ALTER TABLE FAK_PROD_REAL_PROD_NODE ADD CONSTRAINT PK_FAK_PROD_REAL_PROD_ID PRIMARY KEY (ID);
ALTER TABLE FIRMI ADD CONSTRAINT PK_FIRMI_ID PRIMARY KEY (ID);
ALTER TABLE FIRMI_FAK_DATA ADD CONSTRAINT PK_FIRMI_FAK_DATA_ID PRIMARY KEY (ID);
ALTER TABLE FISKAL_BONS ADD CONSTRAINT PK_FISKAL_BONS_ID PRIMARY KEY (ID);
ALTER TABLE FP ADD CONSTRAINT PK_FP_ID PRIMARY KEY (ID);
ALTER TABLE FR_REPORTS ADD CONSTRAINT PK_FR_REPORTS PRIMARY KEY (ID);
ALTER TABLE FU ADD CONSTRAINT PK_FU_ID PRIMARY KEY (ID);
ALTER TABLE FU_EXPORT_DOGOVOR ADD CONSTRAINT PK_FU_EXPORT_DOGOVOR_ID PRIMARY KEY (ID);
ALTER TABLE FU_OBOROTI ADD CONSTRAINT PK_FU_OBOROTI PRIMARY KEY (ID);
ALTER TABLE FU_SER_NUM ADD CONSTRAINT PK_FU_SER_NUM_ID PRIMARY KEY (ID);
ALTER TABLE GARANCII ADD CONSTRAINT PK_GARANCII PRIMARY KEY (ID);
ALTER TABLE GRFINGER ADD CONSTRAINT PK_GRFINGER PRIMARY KEY (ID);
ALTER TABLE HGROUPS ADD CONSTRAINT PK_HGROUPS PRIMARY KEY (ID);
ALTER TABLE IBE$PARAMS_HISTORY ADD PRIMARY KEY (IBE$PH_PROCEDURE_NAME);
ALTER TABLE IBE$VERSION_HISTORY ADD PRIMARY KEY (IBE$VH_ID);
ALTER TABLE "IN" ADD CONSTRAINT PK_IN_ID PRIMARY KEY (ID);
ALTER TABLE INI ADD CONSTRAINT PK_INI_ID PRIMARY KEY (ID);
ALTER TABLE INSTALLATIONS ADD CONSTRAINT PK_INSTALLATIONS_ID PRIMARY KEY (ID);
ALTER TABLE INSTALLATION_PICTURES ADD CONSTRAINT PK_INSTALLATION_PICTURES_ID PRIMARY KEY (ID);
ALTER TABLE INSTALLATION_USERS ADD CONSTRAINT PK_INSTALLATION_USERS_ID PRIMARY KEY (ID);
ALTER TABLE INSTALLERS ADD CONSTRAINT PK_INSTALLERS_ID PRIMARY KEY (ID);
ALTER TABLE INSTALLERS_GROUP ADD CONSTRAINT PK_INSTALLERS_GROUP PRIMARY KEY (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT PK_INTRASTAT_DATA_ID PRIMARY KEY (ID);
ALTER TABLE INTRASTAT_DEAL_TYPE ADD CONSTRAINT PK_INTRASTAT_DEAL_TYPE_ID PRIMARY KEY (ID);
ALTER TABLE INTRASTAT_DELIVERY_CONDITIONS ADD CONSTRAINT PK_INTRASTAT_DELIVERY_COND_ID PRIMARY KEY (ID);
ALTER TABLE INTRASTAT_REGION ADD CONSTRAINT PK_INTRASTAT_REGION_ID PRIMARY KEY (ID);
ALTER TABLE INTRASTAT_TRANSPORT_TYPE ADD CONSTRAINT PK_INTRASTAT_TRANSPORT_TYPE_ID PRIMARY KEY (ID);
ALTER TABLE INV ADD CONSTRAINT PK_INV_ID PRIMARY KEY (ID);
ALTER TABLE INV_IZL ADD CONSTRAINT PK_INV_IZL_ID PRIMARY KEY (ID);
ALTER TABLE INV_NACH_INI ADD CONSTRAINT PK_INV_NACH_INI_ID PRIMARY KEY (ID);
ALTER TABLE INV_OPIS ADD CONSTRAINT PK_INV_OPIS_ID PRIMARY KEY (ID);
ALTER TABLE IN_EL ADD CONSTRAINT PK_IN_EL_ID PRIMARY KEY (ID);
ALTER TABLE IN_EL2 ADD CONSTRAINT PK_IN_EL2_ID PRIMARY KEY (ID);
ALTER TABLE IN_EL_ANUL ADD CONSTRAINT PK_IN_EL_ANUL_ID PRIMARY KEY (ID);
ALTER TABLE IN_EL_EDIT ADD CONSTRAINT PK_IN_EL_EDIT_ID PRIMARY KEY (ID);
ALTER TABLE IN_EL_RAZ_NODE ADD CONSTRAINT PK_IN_EL_RAZ_NODE PRIMARY KEY (ID);
ALTER TABLE IN_TO_FAK_EL ADD CONSTRAINT PK_IN_TO_FAK_EL_ID PRIMARY KEY (ID);
ALTER TABLE IZL ADD CONSTRAINT PK_IZL_ID PRIMARY KEY (ID);
ALTER TABLE IZP ADD CONSTRAINT PK_IZP PRIMARY KEY (ID);
ALTER TABLE IZP_TIP ADD CONSTRAINT PK_IZP_TIP PRIMARY KEY (ID);
ALTER TABLE KASA ADD CONSTRAINT PK_KASA_ID PRIMARY KEY (ID);
ALTER TABLE KA_DEMONTAJ_DDS ADD CONSTRAINT PK_KA_DEMONTAJ_DDS PRIMARY KEY (ID);
ALTER TABLE KA_INFO ADD CONSTRAINT PK_KA_INFO_ID PRIMARY KEY (ID);
ALTER TABLE KA_LOG_NODE ADD CONSTRAINT PK_KA_LOG_NODE_ID PRIMARY KEY (ID);
ALTER TABLE KA_PROIZVODITEL ADD CONSTRAINT PK_KA_PROIZVODITEL_ID PRIMARY KEY (ID);
ALTER TABLE KA_SER_NUM ADD CONSTRAINT PK_KA_SER_NUM_ID PRIMARY KEY (ID);
ALTER TABLE KI_DOST_NODE ADD CONSTRAINT PK_KI_DOST_NODE_ID PRIMARY KEY (ID);
ALTER TABLE KI_DOST_SUMA ADD CONSTRAINT PK_KI_DOST_SUMA_ID PRIMARY KEY (ID);
ALTER TABLE KI_DOST_SUMA_EL ADD CONSTRAINT PK_KI_DOST_SUMA_EL_ID PRIMARY KEY (ID);
ALTER TABLE KI_DOST_SUMA_FAK ADD CONSTRAINT PK_KI_DOST_SUMA_FAK_ID PRIMARY KEY (ID);
ALTER TABLE KI_NODE ADD CONSTRAINT PK_KI_NODE_ID PRIMARY KEY (ID);
ALTER TABLE KI_PROD_SUMA_EL ADD CONSTRAINT PK_KI_PROD_SUMA_EL_ID PRIMARY KEY (ID);
ALTER TABLE KLI ADD CONSTRAINT PK_KLI_ID PRIMARY KEY (ID);
ALTER TABLE KLI_ABONAMENT ADD CONSTRAINT PK_KLI_ABONAMENT PRIMARY KEY (ID);
ALTER TABLE KLI_AGENTS ADD CONSTRAINT PK_KLI_AGENTS PRIMARY KEY (ID);
ALTER TABLE KLI_DIST_NODE ADD CONSTRAINT PK_KLI_DIST_NODE_ID PRIMARY KEY (ID);
ALTER TABLE KLI_DOST_NODE ADD PRIMARY KEY (ID);
ALTER TABLE KLI_EXTENDED_VARANTY ADD CONSTRAINT PK_KLI_EXTENDED_VARANTY_ID PRIMARY KEY (ID);
ALTER TABLE KLI_FIRMA_NODE ADD CONSTRAINT PK_KLI_FIRMA_NODE PRIMARY KEY (ID);
ALTER TABLE KLI_GROUP ADD CONSTRAINT PK_KLI_GROUP_ID PRIMARY KEY (ID);
ALTER TABLE KLI_KASA_MAIL_NODE ADD CONSTRAINT PK_KLI_KASA_MAIL_NODE_ID PRIMARY KEY (ID);
ALTER TABLE KLI_POCKET_NODE ADD CONSTRAINT PK_KLI_POCKET_NODE_ID PRIMARY KEY (ID);
ALTER TABLE KLI_PRAGOVE ADD CONSTRAINT PK_KLI_PRAGOVE PRIMARY KEY (ID);
ALTER TABLE KLI_SKLAD_NODE ADD CONSTRAINT PK_KLI_SKLAD_NODE PRIMARY KEY (ID);
ALTER TABLE KLI_TOCHKI_NODE ADD CONSTRAINT PK_KLI_TOCHKI_NODE PRIMARY KEY (ID);
ALTER TABLE KLI_USER_NODE ADD CONSTRAINT PK_KLI_USER_NODE_ID PRIMARY KEY (ID);
ALTER TABLE KONSIGNACIA ADD CONSTRAINT PK_KONSIGNACIA PRIMARY KEY (ID);
ALTER TABLE LAYOUTS ADD CONSTRAINT PK_LAYOUTS PRIMARY KEY (ID);
ALTER TABLE LICENCE_EL ADD CONSTRAINT PK_LICENCE_EL_ID PRIMARY KEY (ID);
ALTER TABLE LICENZ_PROD_NODE ADD CONSTRAINT PK_LICENZ_PROD_NODE_ID PRIMARY KEY (ID);
ALTER TABLE LOCK_OPR ADD CONSTRAINT PK_LOCK_OPR PRIMARY KEY (ID);
ALTER TABLE LOCK_OPR_EL ADD CONSTRAINT PK_LOCK_OPR_EL PRIMARY KEY (ID);
ALTER TABLE LOG_CENI_DDS ADD CONSTRAINT PK_LOG_CENI_DDS_ID PRIMARY KEY (ID);
ALTER TABLE ME ADD CONSTRAINT PK_ME_ID PRIMARY KEY (ID);
ALTER TABLE MESA ADD CONSTRAINT PK_MESA_ID PRIMARY KEY (ID);
ALTER TABLE MESA_TIP ADD CONSTRAINT PK_MESA_TIP_ID PRIMARY KEY (ID);
ALTER TABLE MESSAGES ADD CONSTRAINT PK_MESSAGES_ID PRIMARY KEY (ID);
ALTER TABLE METRO_ARTICLES ADD CONSTRAINT PK_METRO_ARTICLES PRIMARY KEY (ID);
ALTER TABLE METRO_EXPORT_OPR ADD CONSTRAINT PK_METRO_EXPORT_OPR PRIMARY KEY (ID);
ALTER TABLE METRO_INVOICE_DOCUMENTS ADD CONSTRAINT PK_METRO_INVOICE_DOCUMENTS PRIMARY KEY (ID);
ALTER TABLE MOVE ADD CONSTRAINT PK_MOVE_ID PRIMARY KEY (ID);
ALTER TABLE NAL ADD CONSTRAINT PK_NAL_ID PRIMARY KEY (ID);
ALTER TABLE NAL2 ADD CONSTRAINT PK_NAL2_ID PRIMARY KEY (ID);
ALTER TABLE NAL_F ADD CONSTRAINT PK_NAL_F_ID PRIMARY KEY (ID);
ALTER TABLE OBEKT ADD CONSTRAINT PK_OBEKT_ID PRIMARY KEY (ID);
ALTER TABLE OFERTA ADD CONSTRAINT PK_OFERTA PRIMARY KEY (ID);
ALTER TABLE OFERTA_EL ADD CONSTRAINT PK_OFERTA_EL PRIMARY KEY (ID);
ALTER TABLE OFFERS ADD CONSTRAINT PK_OFFERS_ID PRIMARY KEY (ID);
ALTER TABLE OFFER_EL ADD CONSTRAINT PK_OFFER_EL_ID PRIMARY KEY (ID);
ALTER TABLE OFFER_POR_NODE ADD CONSTRAINT PK_OFFER_POR_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OFFER_TERMS ADD CONSTRAINT PK_OFFER_TERMS_ID PRIMARY KEY (ID);
ALTER TABLE OFFER_USER_NODE ADD CONSTRAINT PK_OFFER_USER_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OFF_OBEKTI_LIST ADD CONSTRAINT PK_OFF_OBEKTI_LIST PRIMARY KEY (ID);
ALTER TABLE OLD_IN_EL ADD CONSTRAINT PK_OLD_IN_EL_ID PRIMARY KEY (ID);
ALTER TABLE OLD_OFFERS ADD CONSTRAINT PK_OLD_OFFERS_ID PRIMARY KEY (ID);
ALTER TABLE OLD_OFFER_EL ADD CONSTRAINT PK_OLD_OFFER_EL_ID PRIMARY KEY (ID);
ALTER TABLE OLD_OFFER_USER_NODE ADD CONSTRAINT PK_OLD_OFFER_USER_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OLD_OUT_EL ADD CONSTRAINT PK_OLD_OUT_EL_ID PRIMARY KEY (ID);
ALTER TABLE OLD_OUT_EL_PE_NODE ADD CONSTRAINT PK_OLD_OUT_EL_PE_ID PRIMARY KEY (ID);
ALTER TABLE OLD_PARI_EL ADD CONSTRAINT PK_OLD_PARI_EL_ID PRIMARY KEY (ID);
ALTER TABLE OLD_POR_EL_PARAMS ADD CONSTRAINT PK_OLD_POR_EL_PARAMS_ID PRIMARY KEY (ID);
ALTER TABLE OLD_POR_EL_PRICE_COEF ADD CONSTRAINT PK_OLD_POR_EL_PRICE_COEF_ID PRIMARY KEY (ID);
ALTER TABLE OLD_REQUEST_EL ADD CONSTRAINT PK_OLD_REQUEST_EL PRIMARY KEY (ID);
ALTER TABLE OLD_TASKS ADD CONSTRAINT PK_OLD_TASKS_ID PRIMARY KEY (ID);
ALTER TABLE ONLINE_ROLES ADD CONSTRAINT PK_ONLINE_USER_ROLES_ID PRIMARY KEY (ID);
ALTER TABLE ONLINE_USERS ADD CONSTRAINT PK_ONLINE_USERS_ID PRIMARY KEY (ID);
ALTER TABLE OPENED_FORMS_SYS ADD CONSTRAINT PK_OPENED_FORMS_SYS_ID PRIMARY KEY (ID);
ALTER TABLE OPR ADD CONSTRAINT PK_OPR_ID PRIMARY KEY (ID);
ALTER TABLE OPRGARANCIA ADD CONSTRAINT PK_OPRGARANCIA PRIMARY KEY (ID);
ALTER TABLE OPR_AMBALAJ_NODE ADD CONSTRAINT PK_OPR_AMBALAJ_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OPR_ANUL ADD CONSTRAINT PK_OPR_ANUL_ID PRIMARY KEY (ID);
ALTER TABLE OPR_EDIT ADD CONSTRAINT PK_OPR_EDIT_ID PRIMARY KEY (ID);
ALTER TABLE OPR_GARANCIA_NODE ADD CONSTRAINT PK_OPR_GARANCIA_NODE PRIMARY KEY (ID);
ALTER TABLE OPR_PADEJ ADD CONSTRAINT PK_OPR_PADEJ PRIMARY KEY (ID);
ALTER TABLE OPR_PAYMENT_NODE ADD CONSTRAINT PK_OPR_PAYMENT_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OPR_PRODUCTION_REQUEST ADD CONSTRAINT PK_OPR_PRODUCTION_REQUEST_ID PRIMARY KEY (ID);
ALTER TABLE OPR_RAZPAD_NODE ADD CONSTRAINT PK_OPR_RAZPAD_NODE PRIMARY KEY (ID);
ALTER TABLE OPR_RECEPIES ADD CONSTRAINT PK_OPR_RECEPIES_ID PRIMARY KEY (ID);
ALTER TABLE OPR_RECEPIES_EL ADD CONSTRAINT PK_OPR_RECEPIES_EL_ID PRIMARY KEY (ID);
ALTER TABLE OPR_REFUSED ADD CONSTRAINT PK_OPR_REFUSED PRIMARY KEY (ID);
ALTER TABLE OPR_REMOTE ADD CONSTRAINT PK_OPR_REMOTE_ID PRIMARY KEY (ID);
ALTER TABLE OPR_SUMI ADD CONSTRAINT PK_OPR_SUMI_ID PRIMARY KEY (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT PK_OPR_TEMPLATE_ID PRIMARY KEY (ID);
ALTER TABLE OPR_TEMPLATE_EL ADD CONSTRAINT PK_OPR_TEMPLATE_EL_ID PRIMARY KEY (ID);
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT PK_OPR_TEMPLATE_GEN_ID PRIMARY KEY (ID);
ALTER TABLE OPR_TEMPLATE_TASK_NODE ADD CONSTRAINT PK_OPR_TEMPLATE_TASK_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OPR_TIP ADD CONSTRAINT PK_OPR_TIP_ID PRIMARY KEY (ID);
ALTER TABLE OPR_WAITING_NODE ADD CONSTRAINT PK_OPR_WAITING_NODE_ID PRIMARY KEY (ID);
ALTER TABLE ORDER_ACTIONS ADD CONSTRAINT PK_ORDER_ACTIONS_ID PRIMARY KEY (ID);
ALTER TABLE OTC ADD CONSTRAINT PK_OTC_ID PRIMARY KEY (ID);
ALTER TABLE OTCS_OPR_NODE ADD CONSTRAINT PK_OTCS_OPR_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OTC_EL ADD CONSTRAINT PK_OTC_EL PRIMARY KEY (ID);
ALTER TABLE OTC_EL_EDIT ADD CONSTRAINT PK_OTC_EL_EDIT_ID PRIMARY KEY (ID);
ALTER TABLE OTC_PER ADD CONSTRAINT PK_OTC_PER_ID PRIMARY KEY (ID);
ALTER TABLE OUT ADD CONSTRAINT PK_OUT_ID PRIMARY KEY (ID);
ALTER TABLE OUT_EL ADD CONSTRAINT PK_OUT_EL_ID PRIMARY KEY (ID);
ALTER TABLE OUT_EL2 ADD CONSTRAINT PK_OUT_EL2_ID PRIMARY KEY (ID);
ALTER TABLE OUT_EL_ANUL ADD CONSTRAINT PK_OUT_EL_ANUL_ID PRIMARY KEY (ID);
ALTER TABLE OUT_EL_EDIT ADD CONSTRAINT PK_OUT_EL_EDIT_ID PRIMARY KEY (ID);
ALTER TABLE OUT_EL_FAK_OUT_EL ADD CONSTRAINT PK_OUT_EL_FAK_OUT_EL_ID PRIMARY KEY (ID);
ALTER TABLE OUT_EL_RAZ_NODE ADD CONSTRAINT PK_OUT_EL_RAZ_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OWNER ADD CONSTRAINT PK_OWNER_ID PRIMARY KEY (ID);
ALTER TABLE OWNER_BANKI ADD CONSTRAINT PK_OWNER_BANKI PRIMARY KEY (ID);
ALTER TABLE PARI ADD CONSTRAINT PK_PARI_ID PRIMARY KEY (ID);
ALTER TABLE PARI_CRYPT ADD CONSTRAINT PK_PARI_CRYPT_ID PRIMARY KEY (ID);
ALTER TABLE PARI_DIST ADD CONSTRAINT PK_PARI_DIST_ID PRIMARY KEY (ID);
ALTER TABLE PARI_EL_ANUL ADD CONSTRAINT PK_PARI_EL_ANUL_ID PRIMARY KEY (ID);
ALTER TABLE PARI_EL_EDIT ADD CONSTRAINT PK_PARI_EL_EDIT_ID PRIMARY KEY (ID);
ALTER TABLE PARI_FAKINUSLUGA_NODE ADD CONSTRAINT PK_PARI_FAKINUSLUGA_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PARI_FAK_NODE ADD CONSTRAINT PK_PARI_FAK_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PARI_IO ADD CONSTRAINT PK_PARI_IO_ID PRIMARY KEY (ID);
ALTER TABLE PARI_NODE ADD CONSTRAINT PK_PARI_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PARI_SKLOPR_NODE ADD CONSTRAINT PK_PARI_SKLOPR_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PARI_TMP ADD CONSTRAINT PK_PARI_TMP_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_EL ADD CONSTRAINT PK_PARTIDA_EL_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_EL_NODE ADD CONSTRAINT PK_PARTIDA_EL_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_EL_PRINT ADD CONSTRAINT PK_PARTIDA_EL_PRINT_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_IN_EL_NODE ADD CONSTRAINT PK_PARTIDA_IN_EL_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_IZL_NODE ADD CONSTRAINT PK_PARTIDA_IZL_NODE PRIMARY KEY (ID);
ALTER TABLE PARTIDA_NAL ADD CONSTRAINT PK_PARTIDA_NAL_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_OUT_EL_NODE ADD CONSTRAINT PK_PARTIDA_OUT_EL_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_PROP_NODE ADD CONSTRAINT PK_PARTIDA_PROP_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_RETURN_NODE ADD CONSTRAINT PK_PARTIDA_RETURN_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PATHS ADD CONSTRAINT PK_PATHS PRIMARY KEY (ID);
ALTER TABLE PAYMENT ADD CONSTRAINT PK_PAYMENT_ID PRIMARY KEY (ID);
ALTER TABLE PAYMENTS_EL ADD CONSTRAINT PK_PAYMENTS_EL_ID PRIMARY KEY (ID);
ALTER TABLE PAYMENT_AVANSOVO ADD CONSTRAINT PK_PAYMENT_AVANSOVO_ID PRIMARY KEY (ID);
ALTER TABLE PAYMENT_NODE ADD CONSTRAINT PK_PAYMENT_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PAYMENT_NOW ADD CONSTRAINT PK_PAYMENT_NOW_ID PRIMARY KEY (ID);
ALTER TABLE PAY_NOCASH_NODE ADD CONSTRAINT PK_PAY_NOCASH_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PLACE ADD CONSTRAINT PK_PLACE_ID PRIMARY KEY (ID);
ALTER TABLE PL_DELIVERY_STORAGE_EDIT ADD CONSTRAINT PK_PL_DELIVERY_STORAGE_EDIT PRIMARY KEY (ID);
ALTER TABLE POCKET_OTC ADD CONSTRAINT PK_POCKET_OTC PRIMARY KEY (ID);
ALTER TABLE POCKET_SHOP ADD CONSTRAINT PK_POCKET_SHOP_ID PRIMARY KEY (ID);
ALTER TABLE POR ADD CONSTRAINT PK_POR_ID PRIMARY KEY (ID);
ALTER TABLE POR_DOST_KOL_RZV ADD CONSTRAINT PK_POR_DOST_KOL_RZV PRIMARY KEY (ID);
ALTER TABLE POR_EDIT ADD CONSTRAINT PK_POR_EDIT_ID PRIMARY KEY (ID);
ALTER TABLE POR_EL ADD CONSTRAINT PK_POR_EL_ID PRIMARY KEY (ID);
ALTER TABLE POR_EL_EDIT ADD CONSTRAINT PK_POR_EL_EDIT PRIMARY KEY (ID);
ALTER TABLE POR_EL_EXPLANATORY ADD CONSTRAINT PK_POR_EL_EXPLANATORY PRIMARY KEY (ID);
ALTER TABLE POR_EL_PICTURES_NODE ADD CONSTRAINT PK_POR_EL_PICTURES_NODE_ID PRIMARY KEY (ID);
ALTER TABLE POR_EL_PRICE_COEFICIENT ADD CONSTRAINT PK_POR_EL_PRICE_COEFICIENT_ID PRIMARY KEY (ID);
ALTER TABLE POR_EL_PRODUCTION ADD CONSTRAINT PK_POR_EL_PRODUCTION PRIMARY KEY (ID);
ALTER TABLE POR_EL_RAZ_NODE ADD CONSTRAINT PK_POR_EL_RAZ_NODE PRIMARY KEY (ID);
ALTER TABLE POR_EL_REQUEST_NODE ADD CONSTRAINT PK_POR_EL_REQUEST_NODE_ID PRIMARY KEY (ID);
ALTER TABLE POR_FAK_PROD_NODE ADD CONSTRAINT PK_POR_FAK_PROD_NODE_ID PRIMARY KEY (ID);
ALTER TABLE POR_FORMULA_PARAMS ADD CONSTRAINT PK_POR_FORMULA_PARAMS PRIMARY KEY (ID);
ALTER TABLE POR_OFFER_TERMS_NODE ADD CONSTRAINT PK_POR_OFFER_TERMS_NODE_ID PRIMARY KEY (ID);
ALTER TABLE POR_OUT_NODE ADD CONSTRAINT PK_POR_OUT_NODE_ID PRIMARY KEY (ID);
ALTER TABLE POR_PRODUCTION_REQUEST_NODE ADD CONSTRAINT PK_POR_PRODUCTION_REQUEST_NODE PRIMARY KEY (ID);
ALTER TABLE POR_PROP_NODE ADD CONSTRAINT PK_POR_PROP_NODE PRIMARY KEY (ID);
ALTER TABLE POR_RAZ_EDIT ADD CONSTRAINT PK_POR_RAZ_EDIT PRIMARY KEY (ID);
ALTER TABLE POR_ZD_NODE ADD CONSTRAINT PK_POR_ZD_NODE PRIMARY KEY (ID);
ALTER TABLE POS_TO_SRV ADD CONSTRAINT PK_POS_TO_SRV_ID PRIMARY KEY (ID);
ALTER TABLE POTV ADD PRIMARY KEY (ID);
ALTER TABLE POTV_EL ADD CONSTRAINT PK_POTV_EL PRIMARY KEY (ID);
ALTER TABLE POTV_MOVE_EL ADD CONSTRAINT PK_POTV_MOVE_EL_ID PRIMARY KEY (ID);
ALTER TABLE PRICE_LIST_DELIVERY_STORAGES ADD CONSTRAINT PK_PRICE_LIST_DELIVERY_STORAGES PRIMARY KEY (ID);
ALTER TABLE PRODUCTION ADD CONSTRAINT PK_PRODUCTION_ID PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_EXPLANATORY ADD CONSTRAINT PK_PRODUCTION_EXPLANATORY PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_GRUPI ADD CONSTRAINT PK_PRODUCTION_GRUPI_ID PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_IN_EL_PARAMS ADD CONSTRAINT PK_PRODUCTION_IN_EL_PARAMS PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_KAPARO_NODE ADD CONSTRAINT PK_PRODUCTION_KAPARO_NODE PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_MONTAJISTI ADD CONSTRAINT PK_PRODUCTION_MONTAJISTI_ID PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_REQUEST_EL ADD CONSTRAINT PK_PRODUCTION_REQUEST_EL PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_ZARABOTKA ADD CONSTRAINT PK_PRODUCTION_ZARABOTKA_ID PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_ZARABOTKA_IZPLATENO ADD CONSTRAINT PK_PRODUCTION_ZARABOTKA_IZPL_ID PRIMARY KEY (ID);
ALTER TABLE PRODUCT_WAREHOUSE_MAP_NODE ADD CONSTRAINT PK_PRODUCT_WAREHOUSE_MAP_NODE_I PRIMARY KEY (ID);
ALTER TABLE PROD_AVANS ADD CONSTRAINT PK_PROD_AVANS_ID PRIMARY KEY (ID);
ALTER TABLE PROD_CENI_EL ADD CONSTRAINT PK_PROD_CENI_EL_ID PRIMARY KEY (ID);
ALTER TABLE PROD_NODE ADD CONSTRAINT PK_PROD_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PROD_PRODUCTION ADD CONSTRAINT PK_PROD_PRODUCTION PRIMARY KEY (ID);
ALTER TABLE PROD_REQUEST_PRODUCTION_NODE ADD CONSTRAINT PK_PROD_REQUEST_PRODUCTION_NODE PRIMARY KEY (ID);
ALTER TABLE PROD_STOCK ADD CONSTRAINT PK_PROD_STOCK PRIMARY KEY (ID);
ALTER TABLE PROD_STOCK_EL ADD CONSTRAINT PK_PROD_STOCK_EL PRIMARY KEY (ID);
ALTER TABLE PROD_VAUCHER ADD CONSTRAINT PK_PROD_VAUCHER PRIMARY KEY (ID);
ALTER TABLE PROFORMA_TO_FAK ADD CONSTRAINT PK_PROFORMA_TO_FAK_ID PRIMARY KEY (ID);
ALTER TABLE PROP_NODE ADD CONSTRAINT PK_PROP_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PR_REQUEST_EXPLANATORY ADD CONSTRAINT PK_PR_EXPLANATORY PRIMARY KEY (ID);
ALTER TABLE PR_REQUEST_FORMULA_PARAMS ADD CONSTRAINT PK_PREP_PR_FORMULA_PARAMS PRIMARY KEY (ID);
ALTER TABLE PR_REQ_EL_PRICE_COEFICIENT ADD CONSTRAINT PK_PR_REQ_EL_PRICE_COEF_ID PRIMARY KEY (ID);
ALTER TABLE RAZFASOVKA ADD CONSTRAINT PK_RAZFASOVKA PRIMARY KEY (ID);
ALTER TABLE RAZPAD ADD CONSTRAINT PK_RAZPAD_ID PRIMARY KEY (ID);
ALTER TABLE RAZ_ELEMENT ADD CONSTRAINT PK_RAZ_ELEMENT PRIMARY KEY (ID);
ALTER TABLE RAZ_TIP ADD CONSTRAINT PK_RAZ_TIP PRIMARY KEY (ID);
ALTER TABLE RDB$PARTIDA_NAL ADD CONSTRAINT PK_RDB_PARTIDA_NAL_ID PRIMARY KEY (ID);
ALTER TABLE REAL_IZP_FAKT_IZP_NODE ADD CONSTRAINT PK_REAL_IZP_FAKT_IZP_NODE_ID PRIMARY KEY (ID);
ALTER TABLE REQUEST_PRODUCTION_NODE ADD CONSTRAINT PK_REQUEST_PRODUCTION_NODE PRIMARY KEY (ID);
ALTER TABLE RET_DOST_KI_DOST_NODE ADD CONSTRAINT PK_RET_KI_DOST_NODE_ID PRIMARY KEY (ID);
ALTER TABLE RET_DOST_MOVE_NODE ADD CONSTRAINT PK_RET_DOST_MOVE_ID PRIMARY KEY (ID);
ALTER TABLE RET_PROD_RET_FAK_PROD_KI_NODE ADD CONSTRAINT PK_RET_PROD_RET_FAK_PROD_KI_ID PRIMARY KEY (ID);
ALTER TABLE RET_STOKA_DOST ADD CONSTRAINT PK_RET_STOKA_DOST_ID PRIMARY KEY (ID);
ALTER TABLE RET_STOKA_DOST_KI ADD CONSTRAINT PK_RET_STOKA_DOST_KI_ID PRIMARY KEY (ID);
ALTER TABLE RET_STOKA_PROD ADD CONSTRAINT PK_RET_STOKA_PROD_ID PRIMARY KEY (ID);
ALTER TABLE RET_STOKA_PROD_KI ADD CONSTRAINT PK_RET_STOKA_PROD_KI_ID PRIMARY KEY (ID);
ALTER TABLE ROUND_TIP ADD CONSTRAINT PK_ROUND_TIP PRIMARY KEY (ID);
ALTER TABLE SASTAV ADD CONSTRAINT PK_SASTAV PRIMARY KEY (ID);
ALTER TABLE SELEKCIQ ADD CONSTRAINT PK_SELEKCIQ_ID PRIMARY KEY (ID);
ALTER TABLE SELEKCIQ_KALK_EL ADD CONSTRAINT PK_SELEKCIQ_KALK_EL PRIMARY KEY (ID);
ALTER TABLE SELEKCIQ_KASA_EL ADD CONSTRAINT PK_SELEKCIQ_KASA_EL_ID PRIMARY KEY (ID);
ALTER TABLE SELEKCIQ_KLI_EL ADD CONSTRAINT PK_SELEKCIQ_KLI_EL_ID PRIMARY KEY (ID);
ALTER TABLE SELEKCIQ_SIM_EL ADD CONSTRAINT PK_SELEKCIQ_SIM_EL PRIMARY KEY (ID);
ALTER TABLE SEL_OPRS ADD CONSTRAINT PK_SEL_OPRS PRIMARY KEY (ID);
ALTER TABLE SERIAL_NUM ADD CONSTRAINT PK_SERIAL_NUM_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT PK_SIMPLE_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_ACZIS ADD CONSTRAINT PK_SIMPLE_ACZIS_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_ADRESIRANE ADD CONSTRAINT PK_SIMPLE_ADRESIRANE_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_ADRESIRANE_GRUPA ADD CONSTRAINT PK_SIMPLE_ADRESIRANE_GRUPA PRIMARY KEY (ID);
ALTER TABLE SIMPLE_ADRESIRANE_NODE ADD CONSTRAINT PK_SIMPLE_ADRESIRANE_NODE_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_CALC ADD CONSTRAINT PK_SIMPLE_CALC_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_CALC_OLD ADD CONSTRAINT PK_SIMPLE_CALC_OLD_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_CENI ADD CONSTRAINT PK_SIMPLE_CENI_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_EXPLANATORY ADD CONSTRAINT PK_SIMPLE_EXPLANATORY PRIMARY KEY (ID);
ALTER TABLE SIMPLE_GROUP ADD CONSTRAINT PK_SIMPLE_GROUP_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_KA_BIM ADD CONSTRAINT PK_SIMPLE_KA_BIM_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_KOD ADD CONSTRAINT PK_SIMPLE_KOD PRIMARY KEY (ID);
ALTER TABLE SIMPLE_MONTAGE ADD CONSTRAINT PK_SIMPLE_MONTAGE PRIMARY KEY (ID);
ALTER TABLE SIMPLE_OBSERV ADD CONSTRAINT PK_SIMPLE_OBSERV_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_PICT ADD CONSTRAINT PK_SIMPLE_PICT_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_PROP ADD CONSTRAINT PK_SIMPLE_PROP_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_PROP_MINOR ADD CONSTRAINT PK_SIMPLE_PROP_MINOR_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_PROP_NODE ADD CONSTRAINT PK_SIMPLE_PROP_NODE_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_RAZ ADD CONSTRAINT PK_SIMPLE_RAZ_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_SKLAD_KOD ADD CONSTRAINT PK_SIMPLE_SKLAD_KOD PRIMARY KEY (ID);
ALTER TABLE SIMPLE_TABLE_PRICES ADD CONSTRAINT PK_SIMPLE_TABLE_PRICES_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_TRACKER ADD CONSTRAINT PK_SIMPLE_TRACKER_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_ZAETOST ADD CONSTRAINT PK_SIMPLE_ZAETOST_ID PRIMARY KEY (ID);
ALTER TABLE SKLAD ADD CONSTRAINT PK_SKLAD_ID PRIMARY KEY (ID);
ALTER TABLE SKLAD_MOL ADD CONSTRAINT PK_SKLAD_MOL PRIMARY KEY (ID);
ALTER TABLE SKLAD_SELEKCIQ_NODE ADD CONSTRAINT PK_SKLAD_SELEKCIQ_NODE PRIMARY KEY (ID);
ALTER TABLE SLEDI_KLI ADD CONSTRAINT PK_SLEDI_KLI PRIMARY KEY (ID);
ALTER TABLE SLEDI_LICENZ ADD CONSTRAINT PK_SLEDI_LICENZ PRIMARY KEY (ID);
ALTER TABLE SLEDI_ROUMING_LOG ADD CONSTRAINT PK_SLEDI_ROUMING_LOG PRIMARY KEY (ID);
ALTER TABLE SLEDI_SIMPLE ADD CONSTRAINT PK_SLEDI_SIMPLE PRIMARY KEY (ID);
ALTER TABLE SLEDI_TEMPLATE_EL ADD CONSTRAINT PK_SLEDI_TEMPLATE_EL PRIMARY KEY (ID);
ALTER TABLE SLEDI_TEMPLATE_EL_GEN ADD CONSTRAINT PK_SLEDI_TEMPLATE_EL_GEN_ID PRIMARY KEY (ID);
ALTER TABLE STORE_OBJ ADD CONSTRAINT PK_STORE_OBJ_ID PRIMARY KEY (ID);
ALTER TABLE STORE_OTC ADD CONSTRAINT PK_STORE_OTC_ID PRIMARY KEY (ID);
ALTER TABLE STORNO_REASON ADD CONSTRAINT PK_STORNO_REASON_ID PRIMARY KEY (ID);
ALTER TABLE SUMI ADD CONSTRAINT PK_SUMI_ID PRIMARY KEY (ID);
ALTER TABLE SYNC_ADVANCE_PAYMENT ADD CONSTRAINT PK_SYNC_ADVANCE_PAYMENT_ID PRIMARY KEY (ID);
ALTER TABLE SYSTEM2 ADD CONSTRAINT PK_SYSTEM_ID PRIMARY KEY (ID);
ALTER TABLE TABLE_PRICES_DISCOUNTS ADD CONSTRAINT PK_TABLE_PRICES_DISCOUNTS_ID PRIMARY KEY (ID);
ALTER TABLE TABLE_PRICE_COEFICIENT ADD CONSTRAINT PK_TABLE_PRICE_COEFICIENT_ID PRIMARY KEY (ID);
ALTER TABLE TABLE_PRICE_SIMPLE_NODE ADD CONSTRAINT PK_TABLE_PRICE_SIMPLE_NODE_ID PRIMARY KEY (ID);
ALTER TABLE TASKS ADD CONSTRAINT PK_TASKS PRIMARY KEY (ID);
ALTER TABLE TASKS_EL ADD CONSTRAINT PK_TASKS_EL PRIMARY KEY (ID);
ALTER TABLE TASKS_TIP ADD CONSTRAINT PK_TASKS_TIP PRIMARY KEY (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT PK_TBL_KA_ID PRIMARY KEY (ID);
ALTER TABLE TBL_KA_OPR_LOG ADD CONSTRAINT PK_TBL_KA_OPR_LOG_ID PRIMARY KEY (ID);
ALTER TABLE TBL_KA_OPR_NODE ADD CONSTRAINT PK_TBL_KA_OPR_NODE_ID PRIMARY KEY (ID);
ALTER TABLE TBL_KA_REGNOM_NODE ADD CONSTRAINT PK_TBL_KA_REGNOM_NODE_ID PRIMARY KEY (ID);
ALTER TABLE TBL_KA_STOP_SIM_NODE ADD CONSTRAINT PK_TBL_KA_STOP_SIM_NODE PRIMARY KEY (ID);
ALTER TABLE TBL_LOG ADD CONSTRAINT PK_TBL_LOG PRIMARY KEY (ID);
ALTER TABLE TEMP_IMPORT ADD CONSTRAINT PK_TEMP_IMPORT_ID PRIMARY KEY (ID);
ALTER TABLE TIP_REFUSED ADD CONSTRAINT PK_TIP_REFUSED PRIMARY KEY (ID);
ALTER TABLE TIP_RESOLUTION ADD CONSTRAINT PK_TIP_RESOLUTION_ID PRIMARY KEY (ID);
ALTER TABLE TMP_LAST_CENA ADD CONSTRAINT PK_TMP_LAST_CENA PRIMARY KEY (SIMPLE_ID);
ALTER TABLE TMP_MARK_EL ADD CONSTRAINT TMP_MARK_EL_ID PRIMARY KEY (ID);
ALTER TABLE TMP_OPR ADD CONSTRAINT TMP_OPR_ID PRIMARY KEY (ID);
ALTER TABLE TMP_OPR_SN ADD CONSTRAINT TMP_OPR_SN_ID PRIMARY KEY (ID);
ALTER TABLE TMP_SIMPLE_SEL_PROD1 ADD CONSTRAINT PK_TMP_SIMPLE_SEL_PROD1 PRIMARY KEY (ID);
ALTER TABLE TS_OTC_FILES ADD CONSTRAINT PK_TS_OTC_FILES_ID PRIMARY KEY (ID);
ALTER TABLE UNFINISHED_SALES ADD CONSTRAINT PK_UNFINISHED_SALES_ID PRIMARY KEY (ID);
ALTER TABLE UNP ADD CONSTRAINT PK_UNP_ID PRIMARY KEY (ID);
ALTER TABLE UNR_AGENT ADD CONSTRAINT PK_UNR_AGENT PRIMARY KEY (ID);
ALTER TABLE UNR_AGENT_ANALYSES ADD CONSTRAINT PK_UNR_AGENT_ANALYSES_ID PRIMARY KEY (ID);
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT PK_UNR_ANALYSES PRIMARY KEY (ID);
ALTER TABLE UNR_GROUP ADD CONSTRAINT PK_UNR_GROUP_ID PRIMARY KEY (ID)
USING INDEX PK_UNR_GROUP;
ALTER TABLE UNR_GROUP_SIMPLE ADD CONSTRAINT PK_UNR_GROUP_SIMPLE_ID PRIMARY KEY (ID);
ALTER TABLE UNR_KLI_AGENT ADD CONSTRAINT PK_UNR_KLI_AGENT PRIMARY KEY (ID);
ALTER TABLE UNR_KLI_AGENT_2 ADD CONSTRAINT PK_UNR_KLI_AGENT_2 PRIMARY KEY (ID);
ALTER TABLE UNR_KOEF_NODE ADD CONSTRAINT PK_UNR_KOEF_NODE PRIMARY KEY (ID);
ALTER TABLE "USER" ADD CONSTRAINT PK_USER_ID PRIMARY KEY (ID);
ALTER TABLE USER_KASA_NODE ADD CONSTRAINT PK_USER_KASA_NODE_ID PRIMARY KEY (ID);
ALTER TABLE USER_OBEKT_NODE ADD CONSTRAINT PK_USER_OBEKT_NODE_ID PRIMARY KEY (ID);
ALTER TABLE USER_ROLES_EL ADD CONSTRAINT PK_USER_ROLES_EL_ID PRIMARY KEY (ID);
ALTER TABLE USER_SCHEMAS ADD CONSTRAINT PK_USER_SCHEMAS_ID PRIMARY KEY (ID);
ALTER TABLE USER_SEL_NODE ADD CONSTRAINT PK_USER_SEL_NODE PRIMARY KEY (ID);
ALTER TABLE USER_SKLAD_NAL_NODE ADD CONSTRAINT PK_USER_SKLAD_NAL_NODE_ID PRIMARY KEY (ID);
ALTER TABLE USER_SKLAD_NODE ADD CONSTRAINT PK_USER_SKLAD_NODE_ID PRIMARY KEY (ID);
ALTER TABLE VALUTA ADD CONSTRAINT PK_VALUTA_ID PRIMARY KEY (ID);
ALTER TABLE VISIT ADD CONSTRAINT PK_VISIT_ID PRIMARY KEY (ID);
ALTER TABLE VISIT_EL ADD CONSTRAINT PK_VISIT_EL_ID PRIMARY KEY (ID);
ALTER TABLE VISIT_TYPE ADD CONSTRAINT PK_VISIT_TYPE_ID PRIMARY KEY (ID);
ALTER TABLE WAREHOUSE_BASE_MAP ADD CONSTRAINT PK_WAREHOUSE_BASE_MAP_ID PRIMARY KEY (ID);
ALTER TABLE WHOKNA_CONNECTION ADD CONSTRAINT PK_WHOKNA_CONNECTION_ID PRIMARY KEY (ID);
ALTER TABLE WUERTH_COMMIS ADD CONSTRAINT PK_WUERTH_COMMIS PRIMARY KEY (ID);
ALTER TABLE WUERTH_SIMPLE ADD CONSTRAINT PK_WUERTH_SIMPLE_ID PRIMARY KEY (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA ADD CONSTRAINT PK_ZAIAVKA_DOSTAVKA PRIMARY KEY (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA_NODE ADD CONSTRAINT PK_ZAIAVKA_DOSTAVKA_NODE PRIMARY KEY (ID);
ALTER TABLE ZD_DOST_MOVE_NODE ADD CONSTRAINT PK_ZD_DOST_MOVE_NODE PRIMARY KEY (ID);
ALTER TABLE ZD_POR_NODE ADD CONSTRAINT PK_ZD_POR_NODE PRIMARY KEY (ID);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE ACTIVE_USERS ADD CONSTRAINT FK_ACTIVE_USERS_USERS FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE ADDRESSES ADD CONSTRAINT FK_ADDRESSES_PLACE_ID FOREIGN KEY (PLACE_ID) REFERENCES PLACE (ID) ON UPDATE CASCADE;
ALTER TABLE AMBALAJ ADD CONSTRAINT FK_AMBALAJ_KLI FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE AMBALAJ ADD CONSTRAINT FK_AMBALAJ_SIMPLE FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE AMBALAJ_HISTORY ADD CONSTRAINT FK_AMABALAJ_HISTORY_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE AMBALAJ_HISTORY ADD CONSTRAINT FK_AMABALAJ_HISTORY_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE AMBALAJ_HISTORY_EDIT ADD CONSTRAINT FK_AMBALAJ_HISTORY_EDIT_EDIT_ID FOREIGN KEY (EDIT_ID) REFERENCES OPR_EDIT (ID);
ALTER TABLE AMBALAJ_HISTORY_EDIT ADD CONSTRAINT FK_AMBALAJ_HISTORY_EDIT_SIMPLE_ FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE ANALYSES ADD CONSTRAINT FK_ANALYSES_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE ANALYSES ADD CONSTRAINT FK_ANALYSES_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID);
ALTER TABLE BARCODE ADD CONSTRAINT FK_BARCODE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE BH_PROD_POR ADD CONSTRAINT FK_BH_PROD_POR_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE BONUSI_ZA_RAZCHET ADD CONSTRAINT FK_BZR_KI_OPR_ID FOREIGN KEY (KI_OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE BONUS_CENA_TOCHKI ADD CONSTRAINT FK_BONUS_CENA_TOCHKI_BTC_ID FOREIGN KEY (BONUS_C_T_ID) REFERENCES BONUS_CENA_TOCHKI (ID);
ALTER TABLE BONUS_CENA_TOCHKI ADD CONSTRAINT FK_BONUS_CENA_TOCHKI_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE BONUS_CENA_TOCHKI ADD CONSTRAINT FK_BONUS_CENA_TOCHKI_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE BONUS_CONFIG ADD CONSTRAINT FK_BONUS_CONFIG_ID_BONUS FOREIGN KEY (ID_BONUS) REFERENCES BONUS_CONFIG (ID);
ALTER TABLE BONUS_CONFIG ADD CONSTRAINT FK_BONUS_CONFIG_SIMPLE_SEL_ID FOREIGN KEY (SIMPLE_SEL_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE BONUS_CONFIG ADD CONSTRAINT FK_BONUS_CONFIG_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE BONUS_CONFIG ADD CONSTRAINT FK_BONUS_CONFIG_SIM_ID_BONUS FOREIGN KEY (SIMPLE_ID_BONUS) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE BONUS_CONFIG ADD CONSTRAINT FK_BONUS_CONFIG_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE BONUS_CONFIG_KLI ADD CONSTRAINT FK_BONUS_CONFIG_KLI_BONUS_ID FOREIGN KEY (BONUS_ID) REFERENCES BONUS_CONFIG (ID);
ALTER TABLE BONUS_CONFIG_KLI ADD CONSTRAINT FK_BONUS_CONFIG_KLI_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE BONUS_CONFIG_SKLAD ADD CONSTRAINT FK_BONUS_CONFIG_SKLAD_BONUS_ID FOREIGN KEY (BONUS_ID) REFERENCES BONUS_CONFIG (ID) ON DELETE CASCADE;
ALTER TABLE BONUS_CONFIG_SKLAD ADD CONSTRAINT FK_BONUS_CONFIG_SKLAD_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID) ON DELETE CASCADE;
ALTER TABLE BONUS_KLI_USED ADD CONSTRAINT FK_BONUS_KLI_USED_BONUS_ID FOREIGN KEY (BONUS_ID) REFERENCES BONUS_CONFIG (ID);
ALTER TABLE BONUS_KLI_USED ADD CONSTRAINT FK_BONUS_KLI_USED_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE BONUS_RAZCHET_NODE ADD CONSTRAINT FK_BONUS_RAZCHET_NODE_IN_ID FOREIGN KEY (IN_ID) REFERENCES BONUSI_ZA_RAZCHET (ID) ON DELETE CASCADE;
ALTER TABLE BONUS_RAZCHET_NODE ADD CONSTRAINT FK_BONUS_RAZCHET_NODE_OUT_ID FOREIGN KEY (OUT_ID) REFERENCES BONUSI_ZA_RAZCHET (ID) ON DELETE CASCADE;
ALTER TABLE BROENE ADD CONSTRAINT FK_BROENE_KLI FOREIGN KEY (DISTRID) REFERENCES KLI (ID);
ALTER TABLE BROENE ADD CONSTRAINT FK_BROENE_KLI_AGENTS FOREIGN KEY (AGENTDID) REFERENCES KLI_AGENTS (ID);
ALTER TABLE BROENE ADD CONSTRAINT FK_BROENE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE BROENE_EL ADD CONSTRAINT FK_BROENE_EL_BROENE_ID FOREIGN KEY (BROENE_ID) REFERENCES BROENE (ID);
ALTER TABLE BROENE_EL ADD CONSTRAINT FK_BROENE_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE BROENE_EL_DETAILS ADD CONSTRAINT FK_BROENE_EL_DETAILS_EL_ID FOREIGN KEY (BROENE_EL_ID) REFERENCES BROENE_EL (ID) ON DELETE CASCADE;
ALTER TABLE BROENE_EL_RAZ_NODE ADD CONSTRAINT FK_BROENE_EL_RAZ_NODE_BROENE_EL FOREIGN KEY (BROENE_EL_ID) REFERENCES BROENE_EL (ID);
ALTER TABLE BROENE_EL_RAZ_NODE ADD CONSTRAINT FK_BROENE_EL_RAZ_NODE_RAZ_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE CENOVA_LISTA ADD CONSTRAINT FK_CENOVA_LISTA_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE CENOVA_LISTA_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_EDIT_OPR_EDIT FOREIGN KEY (OPR_EDIT_ID) REFERENCES OPR_EDIT (ID);
ALTER TABLE CENOVA_LISTA_EL ADD CONSTRAINT FK_CENOVA_LISTA_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE CENOVA_LISTA_EL ADD CONSTRAINT FK_CENOVA_LISTA_EL_OT_OPR_ID FOREIGN KEY (OT_OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE CENOVA_LISTA_EL ADD CONSTRAINT FK_CENOVA_LISTA_EL_ROUND_TIP_ID FOREIGN KEY (ROUND_TIP_ID) REFERENCES ROUND_TIP (ID);
ALTER TABLE CENOVA_LISTA_EL ADD CONSTRAINT FK_CENOVA_LISTA_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE CENOVA_LISTA_EL ADD CONSTRAINT FK_CENOVA_LISTA_EL_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE CENOVA_LISTA_EL_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_EL_EDIT_OPR_EDI FOREIGN KEY (OPR_EDIT_ID) REFERENCES OPR_EDIT (ID);
ALTER TABLE CENOVA_LISTA_EL_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_EL_EDIT_OT_OPR_ FOREIGN KEY (OT_OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE CENOVA_LISTA_EL_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_EL_EDIT_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE CENOVA_LISTA_HISTORY ADD CONSTRAINT FK_CENOVA_LISTA_HISTORY_CL_OPR FOREIGN KEY (CL_EL_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE CENOVA_LISTA_HISTORY ADD CONSTRAINT FK_CENOVA_LISTA_HISTORY_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE CENOVA_LISTA_HISTORY ADD CONSTRAINT FK_CENOVA_LISTA_HISTORY_OPR_ID_ FOREIGN KEY (OPR_ID_E) REFERENCES OPR (ID);
ALTER TABLE CENOVA_LISTA_HISTORY ADD CONSTRAINT FK_CENOVA_LISTA_HISTORY_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE CENOVA_LISTA_HISTORY ADD CONSTRAINT FK_CENOVA_LISTA_HISTORY_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE CENOVA_LISTA_KLI ADD CONSTRAINT FK_CENOVA_LISTA_KLI_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE CENOVA_LISTA_KLI ADD CONSTRAINT FK_CENOVA_LISTA_KLI_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE CENOVA_LISTA_KLI_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_KLI_EDIT_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE CENOVA_LISTA_KLI_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_KLI_EDIT_OPR_ED FOREIGN KEY (OPR_EDIT_ID) REFERENCES OPR_EDIT (ID);
ALTER TABLE CENOVA_LISTA_PROTOKOL ADD CONSTRAINT FK_CENOVA_LISTA_PROTOKOL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE CENOVA_LISTA_PROTOKOL ADD CONSTRAINT FK_CENOVA_LISTA_PROTOKOL_OTC_ID FOREIGN KEY (OTC_ID) REFERENCES OTC (ID);
ALTER TABLE CENOVA_LISTA_SKLAD ADD CONSTRAINT FK_CENOVA_LISTA_SKLAD_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE CENOVA_LISTA_SKLAD ADD CONSTRAINT FK_CENOVA_LISTA_SKLAD_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE CENOVA_LISTA_SKLAD_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_SKLAD_EDIT_OPR_ FOREIGN KEY (OPR_EDIT_ID) REFERENCES OPR_EDIT (ID);
ALTER TABLE CENOVA_LISTA_SKLAD_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_SKLAD_EDIT_SKLA FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE CENOVA_LISTA_TMP ADD CONSTRAINT FK_CENOVA_LISTA_TMP_1 FOREIGN KEY (SIM_ID) REFERENCES SIMPLE (ID);
ALTER TABLE CFG_INFO ADD CONSTRAINT FK_CFG_INFO_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID) ON DELETE SET NULL;
ALTER TABLE CFG_INFO ADD CONSTRAINT FK_CFG_INFO_PC_ID FOREIGN KEY (PC_ID) REFERENCES INI (ID) ON DELETE SET NULL;
ALTER TABLE CFG_KASA_TEMPLATE ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_KASA_2 FOREIGN KEY (KASA_2_ID) REFERENCES KASA (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_OBEKT FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_PARI_IO FOREIGN KEY (PARI_IO_ID) REFERENCES PARI_IO (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_TEMPL FOREIGN KEY (TEMPLATE_ID) REFERENCES CFG_KASA_TEMPLATE (ID) ON DELETE CASCADE;
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_VAL_P FOREIGN KEY (VALUTA_PRIH_ID) REFERENCES VALUTA (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_VAL_R FOREIGN KEY (VALUTA_RAZH_ID) REFERENCES VALUTA (ID);
ALTER TABLE CFG_LOG ADD CONSTRAINT FK_CFG_LOG_USER FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE CFG_PAYMENTS ADD CONSTRAINT FK_CFG_PAYMENTS_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE CFG_PAYMENTS_KLI ADD CONSTRAINT FK_CFG_PAYMENTS_KLI_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE CFG_PAYMENTS_KLI ADD CONSTRAINT FK_CFG_PAYMENTS_KLI_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE CFG_PAYMENTS_KLI ADD CONSTRAINT FK_CFG_PAYMENTS_KLI_PAYMENT_ID FOREIGN KEY (CFG_PAYMENTS_ID) REFERENCES CFG_PAYMENTS (ID);
ALTER TABLE CFG_RAZPAD_CALC ADD CONSTRAINT FK_CFG_RAZPAD_CALC_FROM_PR_ID FOREIGN KEY (FROM_PRODUCT_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CFG_RAZPAD_CALC ADD CONSTRAINT FK_CFG_RAZPAD_CALC_TO_PR_ID FOREIGN KEY (TO_PRODUCT_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CLAIM_EL ADD CONSTRAINT FK_CLAIM_EL_RET_ID FOREIGN KEY (RET_ID) REFERENCES RET_STOKA_PROD (ID);
ALTER TABLE CLAIM_EL ADD CONSTRAINT FK_CLAIM_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE CN_DELIVERY_ELEMENTS ADD CONSTRAINT FK_CN_ELEMENTS_CN_OPR_ID FOREIGN KEY (CN_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE CN_DELIVERY_ELEMENTS ADD CONSTRAINT FK_CN_ELEMENTS_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID)
  USING INDEX FK_CN_DELIVERY_ELEMENTS_1;
ALTER TABLE COMMENT ADD CONSTRAINT FK_COMMENT_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE COMMENTS ADD CONSTRAINT FK_COMMENTS_USER FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_EINVOICE_NODE ADD CONSTRAINT FK_COMMENT_COMMENT_ID FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID);
ALTER TABLE COMMENT_EINVOICE_NODE ADD CONSTRAINT FK_COMMENT_EINVOICE_ID FOREIGN KEY (EINVOICE_ID) REFERENCES FAK (ID) ON DELETE CASCADE;
ALTER TABLE COMMENT_FIRMI_NODE ADD CONSTRAINT FK_COMMENT_FIRMI_NODE_COMM FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_FIRMI_NODE ADD CONSTRAINT FK_COMMENT_FIRMI_NODE_ID FOREIGN KEY (FIRMI_ID) REFERENCES FIRMI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_KLI_NODE ADD CONSTRAINT FK_COMMENT_KLI_NODE_COMM FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_KLI_NODE ADD CONSTRAINT FK_COMMENT_KLI_NODE_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_OPR_NODE ADD CONSTRAINT FK_COMMENT_OPR_NODE_COMM FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_OPR_NODE ADD CONSTRAINT FK_COMMENT_OPR_NODE_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_OPR_TEMPLATE_NODE ADD CONSTRAINT FK_COMMENT_OPR_TEMPLATE_NODE_1 FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID);
ALTER TABLE COMMENT_OPR_TEMPLATE_NODE ADD CONSTRAINT FK_COMMENT_OPR_TEMPLATE_NODE_2 FOREIGN KEY (OPR_TEMPLATE_ID) REFERENCES OPR_TEMPLATE (ID);
ALTER TABLE COMMENT_SIMPLE_NODE ADD CONSTRAINT FK_COMMENT_SIMPLE_NODE_COMM FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_SIMPLE_NODE ADD CONSTRAINT FK_COMMENT_SIMPLE_NODE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_TASKS_NODE ADD CONSTRAINT FK_COMMENT_TASKS_NODE_COMM FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_TASKS_NODE ADD CONSTRAINT FK_COMMENT_TASKS_NODE_ID FOREIGN KEY (TASKS_ID) REFERENCES TASKS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COURSES ADD CONSTRAINT FK_COURSES_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE COURSES_OPR_NODE ADD CONSTRAINT FK_COURSES_OPR_NODE_COURSE_ID FOREIGN KEY (COURSE_ID) REFERENCES COURSES (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COURSES_OPR_NODE ADD CONSTRAINT FK_COURSES_OPR_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CRM_ATON_PRODUKT ADD CONSTRAINT FK_CRM_ATON_PRODUKT_CRM_PRODUKT FOREIGN KEY (CRM_PRODUKT) REFERENCES CRM_PRODUCT (ID) ON UPDATE CASCADE;
ALTER TABLE CRM_ATON_PRODUKT ADD CONSTRAINT FK_CRM_ATON_PRODUKT_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE CRM_INFO_LICENZIA ADD CONSTRAINT FK_CRM_INFO_LICENZIA_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE;
ALTER TABLE CRM_INFO_LICENZIA ADD CONSTRAINT FK_CRM_INFO_PRODUCT_CRM FOREIGN KEY (PRODUCT_CRM) REFERENCES CRM_PRODUCT (ID);
ALTER TABLE CRM_KLI ADD CONSTRAINT FK_CRM_KLI_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE;
ALTER TABLE DEF_RAZ_SIMPLE ADD CONSTRAINT FK_DEF_RAZ_SIMPLE_RAZ_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID) ON DELETE CASCADE;
ALTER TABLE DEF_RAZ_SIMPLE ADD CONSTRAINT FK_DEF_RAZ_SIMPLE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE
  USING INDEX FK_DEF_RAZ_SIMPLE_1;
ALTER TABLE DELIVERY_CURRENCY ADD CONSTRAINT FK_DELIVERY_CURRENCY_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE
  USING INDEX FK_DELIVERY_CURRENCY_1;
ALTER TABLE DOC ADD CONSTRAINT FK_DOC_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE DOCUMENTS ADD CONSTRAINT FK_DOCUMENTS_DELETE_USER_ID FOREIGN KEY (DELETE_USER_ID) REFERENCES "USER" (ID) ON UPDATE CASCADE;
ALTER TABLE DOCUMENTS ADD CONSTRAINT FK_DOCUMENTS_DOC_TYPE FOREIGN KEY (DOC_TYPE) REFERENCES DOCUMENTS_TIP (ID) ON UPDATE CASCADE;
ALTER TABLE DOCUMENTS ADD CONSTRAINT FK_DOCUMENTS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON UPDATE CASCADE;
ALTER TABLE DOCUMENTS_TIP_CODE ADD CONSTRAINT FK_DOCUMENTS_TIP_CODE_DOCTIPID FOREIGN KEY (DOCUMENT_TIP_ID) REFERENCES DOCUMENTS_TIP (ID);
ALTER TABLE DOST_CENI ADD CONSTRAINT FK_DOST_CENI_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE DOST_IMPORT_KLI_MAP ADD CONSTRAINT FK_DOST_IMPORT_KLI_MAP_KLI FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DOST_IMPORT_RAZF_MAP ADD CONSTRAINT FK_DOST_IMPORT_RAZF_MAP_KLI FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DOST_IMPORT_RAZF_MAP ADD CONSTRAINT FK_DOST_IMPORT_RAZF_MAP_RAZF FOREIGN KEY (RAZF_ID) REFERENCES RAZFASOVKA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DOST_IMPORT_SIMPLE_MAP ADD CONSTRAINT FK_DOST_IMPORT_SIMPLE_MAP_KLI FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DOST_IMPORT_SIMPLE_MAP ADD CONSTRAINT FK_DOST_IMPORT_SIMPLE_MAP_SIMPL FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DOST_NODE ADD CONSTRAINT FK_DOST_NODE_DOST_ID FOREIGN KEY (DOST_ID) REFERENCES OPR (ID);
ALTER TABLE DOST_NODE ADD CONSTRAINT FK_DOST_NODE_RAZ_DOST_ID FOREIGN KEY (RAZ_DOST_ID) REFERENCES OPR (ID);
ALTER TABLE DVSK_EL ADD CONSTRAINT FK_DVSK_EL_KLI_ID_PROIZV FOREIGN KEY (KLI_ID_PROIZV) REFERENCES KLI (ID);
ALTER TABLE DVSK_EL ADD CONSTRAINT FK_DVSK_EL_PARTIDA_EL_ID FOREIGN KEY (PARTIDA_EL_ID) REFERENCES PARTIDA_EL (ID);
ALTER TABLE DVSK_EL ADD CONSTRAINT FK_DVSK_EL_PROIZHOD FOREIGN KEY (PROIZHOD) REFERENCES COUNTRIES (ID);
ALTER TABLE DVSK_EL ADD CONSTRAINT FK_DVSK_EL_TYPE_DOK FOREIGN KEY (TYPE_DOK) REFERENCES DVSK_DOK_TYPE (ID);
ALTER TABLE DVSK_OPR ADD CONSTRAINT FK_DVSK_OPR_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE DVSK_OPR ADD CONSTRAINT FK_DVSK_OPR_TYPE_DOK FOREIGN KEY (TYPE_DOK) REFERENCES DVSK_DOK_TYPE (ID);
ALTER TABLE DVSK_OPR ADD CONSTRAINT FK_DVSK_OPR_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE ESIMPLE ADD CONSTRAINT FK_ESIMPLE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE EXCHANGE_SN ADD CONSTRAINT FK_EXCHANGE_SN_NEW_EL_ID FOREIGN KEY (NEW_EL_ID) REFERENCES PARTIDA_EL (ID);
ALTER TABLE EXCHANGE_SN ADD CONSTRAINT FK_EXCHANGE_SN_OLD_EL_ID FOREIGN KEY (OLD_EL_ID) REFERENCES PARTIDA_EL (ID);
ALTER TABLE EXCHANGE_SN ADD CONSTRAINT FK_EXCHANGE_SN_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE EXCHANGE_SN ADD CONSTRAINT FK_EXCHANGE_SN_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE EXPLANATORY ADD CONSTRAINT FK_EXPLANATORY_TIP FOREIGN KEY (TIP) REFERENCES EXPLANATORY_TYPE (ID);
ALTER TABLE EXPORTED_OPERATIONS ADD CONSTRAINT FK_EXPORTED_OPERATIONS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE EXPORTS ADD CONSTRAINT FK_EXPORTS_EXPORT_SYNC_ID FOREIGN KEY (EXPORT_SYNC_ID) REFERENCES EXPORT_SYNC (ID);
ALTER TABLE EXPORTS ADD CONSTRAINT FK_EXPORTS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE EXPORT_OPR ADD CONSTRAINT FK_EXPORT_OPR_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE EXPORT_SYNC ADD CONSTRAINT FK_EXPORT_SYNC_TYPE FOREIGN KEY (EXPORT_TYPE_ID) REFERENCES EXPORT_TYPES (ID);
ALTER TABLE EXPORT_SYNC ADD CONSTRAINT FK_EXPORT_SYNC_VENDOR_ID FOREIGN KEY (VENDOR_ID) REFERENCES EXPORT_VENDORS (ID);
ALTER TABLE EXTENDED_VARANTY_NODE ADD CONSTRAINT FK_EXTENDED_VARANTY_NODE_KLI_VA FOREIGN KEY (KLI_VARANTY_ID) REFERENCES KLI_EXTENDED_VARANTY (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE EXTENDED_VARANTY_NODE ADD CONSTRAINT FK_EXTENDED_VARANTY_NODE_OUT_EL FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE FAK ADD CONSTRAINT FK_FAK_ACCOUNTING FOREIGN KEY (FAK_ACCOUNTING) REFERENCES CFG_FAK_ACCOUNTING (ID);
ALTER TABLE FAK ADD CONSTRAINT FK_FAK_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE FAK ADD CONSTRAINT FK_FAK_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE FAK ADD CONSTRAINT FK_FAK_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FAK ADD CONSTRAINT FK_FAK_OWNER_ID FOREIGN KEY (OWNER_ID) REFERENCES OWNER (ID);
ALTER TABLE FAK ADD CONSTRAINT FK_FAK_VALUTA_ID FOREIGN KEY (VALUTA_ID) REFERENCES VALUTA (ID);
ALTER TABLE FAKTURA_OSNOVANIE ADD CONSTRAINT FK_FAKTURA_OSNOVANIE_FAK_ID FOREIGN KEY (FAK_ID) REFERENCES FAK (ID) ON DELETE CASCADE;
ALTER TABLE FAKTURA_OSNOVANIE ADD CONSTRAINT FK_FAKTURA_OSNOVANIE_OSN_ID FOREIGN KEY (OSN_ID) REFERENCES CFG_OSN_DDS (ID);
ALTER TABLE FAK_EL ADD CONSTRAINT FK_FAK_EL_AVANS_OPR_ID FOREIGN KEY (AVANS_OPR_ID) REFERENCES OPR (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE FAK_EL ADD CONSTRAINT FK_FAK_EL_ME_ID FOREIGN KEY (ME_ID) REFERENCES ME (ID);
ALTER TABLE FAK_EL ADD CONSTRAINT FK_FAK_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FAK_EL ADD CONSTRAINT FK_FAK_EL_RAZ_ID FOREIGN KEY (RAZ_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE FAK_EL ADD CONSTRAINT FK_FAK_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE FAK_EL ADD CONSTRAINT FK_FAK_EL_VAT_REASON_ID FOREIGN KEY (VAT_REASON_ID) REFERENCES CFG_OSN_DDS (ID) ON UPDATE CASCADE;
ALTER TABLE FAK_EL_IN_EL_NODE ADD CONSTRAINT FK_FAK_EL_IN_EL_NODE_FAK_EL_ID FOREIGN KEY (FAK_EL_ID) REFERENCES FAK_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE FAK_EL_IN_EL_NODE ADD CONSTRAINT FK_FAK_EL_IN_EL_NODE_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE FAK_IN ADD CONSTRAINT FK_FAK_IN_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FAK_IN ADD CONSTRAINT FK_FAK_IN_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE FAK_IN_EL_NODE ADD CONSTRAINT FK_FAK_IN_EL_NODE_FAK_ID FOREIGN KEY (FAK_IN_ID) REFERENCES FAK_IN (ID);
ALTER TABLE FAK_IN_EL_NODE ADD CONSTRAINT FK_FAK_IN_EL_NODE_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID);
ALTER TABLE FAK_KI_NUMBER ADD CONSTRAINT FK_FAK_KI_NUMBER_OPR_FAK_ID FOREIGN KEY (OPR_FAK_ID) REFERENCES OPR (ID);
ALTER TABLE FAK_KI_NUMBER ADD CONSTRAINT FK_FAK_KI_NUMBER_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FAK_OUT_EL_NODE ADD CONSTRAINT FK_FAK_OUT_EL_NODE_FAK_EL_ID FOREIGN KEY (FAK_EL_ID) REFERENCES FAK_EL (ID) ON DELETE CASCADE;
ALTER TABLE FAK_OUT_EL_NODE ADD CONSTRAINT FK_FAK_OUT_EL_NODE_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE FAK_PROD ADD CONSTRAINT FK_FAK_PROD_FAK_ID FOREIGN KEY (FAK_ID) REFERENCES FAK (ID);
ALTER TABLE FAK_PROD ADD CONSTRAINT FK_FAK_PROD_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FAK_PROD_REAL_PROD_NODE ADD CONSTRAINT FK_FP_RP_FKT_PROD_OPR_ID FOREIGN KEY (FKT_PROD_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FAK_PROD_REAL_PROD_NODE ADD CONSTRAINT FK_FP_RP_PROD_OPR_ID FOREIGN KEY (PROD_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FIRMI ADD CONSTRAINT FK_FIRMI_OWNERBANKA FOREIGN KEY (DEF_OWNERBANKA) REFERENCES OWNER_BANKI (ID);
ALTER TABLE FIRMI ADD CONSTRAINT FK_FIRMI_PLACE_ID FOREIGN KEY (PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE FIRMI_FAK_DATA ADD CONSTRAINT FK_FIRMI_FAK_DATA_DEF_BANKA FOREIGN KEY (DEF_BANKA) REFERENCES OWNER_BANKI (ID);
ALTER TABLE FIRMI_FAK_DATA ADD CONSTRAINT FK_FIRMI_FAK_DATA_FAK_ID FOREIGN KEY (FAK_ID) REFERENCES FAK (ID) ON DELETE CASCADE;
ALTER TABLE FISKAL_BONS ADD CONSTRAINT FK_FISKAL_BONS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE FR_REPORTS ADD CONSTRAINT FK_FR_REPORTS_PC_ID FOREIGN KEY (PC_ID) REFERENCES INI (ID);
ALTER TABLE FU ADD CONSTRAINT FK_FU_DAN_PLACE_ID FOREIGN KEY (DAN_PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE FU ADD CONSTRAINT FK_FU_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID);
ALTER TABLE FU ADD CONSTRAINT FK_FU_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE FU ADD CONSTRAINT FK_FU_OBEKT_PLACE_ID FOREIGN KEY (OBEKT_PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE FU ADD CONSTRAINT FK_FU_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE FU_OBOROTI ADD CONSTRAINT FK_FU_OBOROTI_FU_ID FOREIGN KEY (KA_ID) REFERENCES FU (ID);
ALTER TABLE FU_OBOROTI ADD CONSTRAINT FK_FU_OBOROTI_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FU_SER_NUM ADD CONSTRAINT FK_FU_SER_NUM_KA_ID FOREIGN KEY (KA_ID) REFERENCES FU (ID) ON DELETE CASCADE;
ALTER TABLE FU_SER_NUM ADD CONSTRAINT FK_FU_SER_NUM_SER_NUM_ID FOREIGN KEY (SER_NUM_ID) REFERENCES SERIAL_NUM (ID);
ALTER TABLE GRFINGER ADD CONSTRAINT FK_GRFINGER FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE "IN" ADD CONSTRAINT FK_IN_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE INSTALLATIONS ADD CONSTRAINT FK_INSTALLATIONS_ORDER_ID FOREIGN KEY (ORDER_ID) REFERENCES POR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE INSTALLATIONS ADD CONSTRAINT FK_INSTALLATIONS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON UPDATE CASCADE;
ALTER TABLE INSTALLATION_USERS ADD CONSTRAINT FK_INSTALLATION_USERS_INSTALLER FOREIGN KEY (INSTALLER_ID) REFERENCES "USER" (ID) ON UPDATE CASCADE;
ALTER TABLE INSTALLATION_USERS ADD CONSTRAINT FK_INSTALLATION_USERS_INST_ID FOREIGN KEY (INSTALLATION_ID) REFERENCES INSTALLATIONS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE INSTALLERS ADD CONSTRAINT FK_INSTALLERS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE INSTALLERS_GROUP ADD CONSTRAINT FK_INSTALLERS_GROUP_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE INSTALLERS_GROUP ADD CONSTRAINT FK_INSTALLERS_GROUP_INSTALLER_I FOREIGN KEY (INSTALLER_ID) REFERENCES INSTALLERS (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT FK_INTRASTAT_DATA_CO_ID FOREIGN KEY (COUNTRY_ORIGIN_ID) REFERENCES COUNTRIES (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT FK_INTRASTAT_DATA_CSA_ID FOREIGN KEY (COUNTRY_SEND_ARRIVE_ID) REFERENCES COUNTRIES (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT FK_INTRASTAT_DATA_DC_ID FOREIGN KEY (DELIVERY_CONDITIONS) REFERENCES INTRASTAT_DELIVERY_CONDITIONS (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT FK_INTRASTAT_DATA_DTYPE_ID FOREIGN KEY (DEAL_TYPE) REFERENCES INTRASTAT_DEAL_TYPE (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT FK_INTRASTAT_DATA_REGION_ID FOREIGN KEY (REGION) REFERENCES INTRASTAT_REGION (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT FK_INTRASTAT_DATA_TTYPE_ID FOREIGN KEY (TRANSPORT_TYPE) REFERENCES INTRASTAT_TRANSPORT_TYPE (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT FK_INTRASTAT_DATA_VN_ID FOREIGN KEY (VEHICLES_NATIONALITY) REFERENCES COUNTRIES (ID);
ALTER TABLE INV ADD CONSTRAINT FK_INV_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE INV_IZL ADD CONSTRAINT FK_INV_IZL_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID);
ALTER TABLE INV_NACH_INI ADD CONSTRAINT FK_INV_NACH_INI_OPR_INV_ID FOREIGN KEY (OPR_INV_ID) REFERENCES OPR (ID);
ALTER TABLE INV_OPIS ADD CONSTRAINT FK_INV_OPIS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE INV_OPIS ADD CONSTRAINT FK_INV_OPIS_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE IN_EL ADD CONSTRAINT FK_IN_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE IN_EL ADD CONSTRAINT FK_IN_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE IN_EL ADD CONSTRAINT FK_IN_EL_VAT_REASON_ID FOREIGN KEY (VAT_REASON_ID) REFERENCES CFG_OSN_DDS (ID);
ALTER TABLE IN_EL2 ADD CONSTRAINT FK_IN_EL2_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE IN_EL_RAZ_NODE ADD CONSTRAINT FK_IN_EL_RAZ_NODE_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE IN_EL_RAZ_NODE ADD CONSTRAINT FK_IN_EL_RAZ_NODE_RAZFASOVKA_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE IN_TO_FAK_EL ADD CONSTRAINT FK_IN_TO_FAK_EL_FAK_IN_EL_ID FOREIGN KEY (FAK_IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE IN_TO_FAK_EL ADD CONSTRAINT FK_IN_TO_FAK_EL_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE IZL ADD CONSTRAINT FK_IZL_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE IZL ADD CONSTRAINT FK_IZL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE IZL ADD CONSTRAINT FK_IZL_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE IZP ADD CONSTRAINT FK_IZP_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE IZP ADD CONSTRAINT FK_IZP_TIP_ID FOREIGN KEY (IZP_TIP_ID) REFERENCES IZP_TIP (ID);
ALTER TABLE KASA ADD CONSTRAINT FK_KASA_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE KASA ADD CONSTRAINT FK_KASA_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE KA_LOG_NODE ADD CONSTRAINT FK_KA_LOG_NODE_KA_ID FOREIGN KEY (KA_ID) REFERENCES TBL_KA (ID);
ALTER TABLE KA_LOG_NODE ADD CONSTRAINT FK_KA_LOG_NODE_KA_ID_OLD FOREIGN KEY (KA_ID_OLD) REFERENCES TBL_KA (ID);
ALTER TABLE KA_SER_NUM ADD CONSTRAINT FK_KA_SER_NUM_KA_ID FOREIGN KEY (KA_ID) REFERENCES TBL_KA (ID);
ALTER TABLE KA_SER_NUM ADD CONSTRAINT FK_KA_SER_NUM_SER_NUM_ID FOREIGN KEY (SER_NUM_ID) REFERENCES SERIAL_NUM (ID);
ALTER TABLE KI_DOST_NODE ADD CONSTRAINT FK_KI_DOST_NODE_KI_OPR_ID FOREIGN KEY (KI_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE KI_DOST_NODE ADD CONSTRAINT FK_KI_DOST_NODE_SUB_OPR_ID FOREIGN KEY (SUB_KI_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE KI_DOST_SUMA ADD CONSTRAINT FK_KI_DOST_SUMA_OPR_ID FOREIGN KEY (KI_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE KI_DOST_SUMA_EL ADD CONSTRAINT FK_KI_DOST_SUMA_EL_IN_EL FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID);
ALTER TABLE KI_DOST_SUMA_EL ADD CONSTRAINT FK_KI_DOST_SUMA_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE KI_DOST_SUMA_EL ADD CONSTRAINT FK_KI_DOST_SUMA_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE KI_DOST_SUMA_FAK ADD CONSTRAINT FK_KI_DOST_SUMA_FAK_FAK_ID FOREIGN KEY (FAK_IN_ID) REFERENCES FAK_IN (ID);
ALTER TABLE KI_DOST_SUMA_FAK ADD CONSTRAINT FK_KI_DOST_SUMA_FAK_KI_ID FOREIGN KEY (KI_SUMA_ID) REFERENCES KI_DOST_SUMA (ID);
ALTER TABLE KI_NODE ADD CONSTRAINT FK_KI_NODE_KI_OPR FOREIGN KEY (KI_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE KI_NODE ADD CONSTRAINT FK_KI_NODE_SUB_OPR FOREIGN KEY (SUB_KI_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE KI_PROD_SUMA_EL ADD CONSTRAINT FK_KI_PROD_SUMA_EL_ FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE KI_PROD_SUMA_EL ADD CONSTRAINT FK_KI_PROD_SUMA_EL_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID);
ALTER TABLE KI_PROD_SUMA_EL ADD CONSTRAINT FK_KI_PROD_SUMA_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE KI_PROD_SUMA_EL ADD CONSTRAINT FK_KI_PROD_SUMA_EL_SUMI_ID FOREIGN KEY (SUMI_ID) REFERENCES SUMI (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE KLI ADD CONSTRAINT FK_KLI_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID) ON UPDATE CASCADE;
ALTER TABLE KLI ADD CONSTRAINT FK_KLI_KLI_GROUP_ID FOREIGN KEY (KLI_GROUP_ID) REFERENCES KLI_GROUP (ID);
ALTER TABLE KLI ADD CONSTRAINT FK_KLI_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE KLI ADD CONSTRAINT FK_KLI_PLACE_ID FOREIGN KEY (PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE KLI ADD CONSTRAINT FK_KLI_SEL_ID FOREIGN KEY (DEF_SEL_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE KLI_ABONAMENT ADD CONSTRAINT FK_KLI_ABONAMENT_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE KLI_ABONAMENT ADD CONSTRAINT FK_KLI_ABONAMENT_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE KLI_AGENTS ADD CONSTRAINT FK_KLI_AGENTS_KLI FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_DIST_NODE ADD CONSTRAINT FK_KLI_DIST_NODE_DIST_ID FOREIGN KEY (DIST_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_DIST_NODE ADD CONSTRAINT FK_KLI_DIST_NODE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_DOST_NODE ADD CONSTRAINT FK_KLI_DOST_NODE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_DOST_NODE ADD CONSTRAINT FK_KLI_DOST_NODE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE KLI_EXTENDED_VARANTY ADD CONSTRAINT FK_KLI_EXTENDED_VARANTY_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE KLI_FIRMA_NODE ADD CONSTRAINT FK_KLI_FIRMA_NODE_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID) ON DELETE CASCADE;
ALTER TABLE KLI_FIRMA_NODE ADD CONSTRAINT FK_KLI_FIRMA_NODE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE;
ALTER TABLE KLI_KASA_MAIL_NODE ADD CONSTRAINT FK_KLI_KASA_MAIL_NODE_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE KLI_KASA_MAIL_NODE ADD CONSTRAINT FK_KLI_KASA_MAIL_NODE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE KLI_POCKET_NODE ADD CONSTRAINT FK_KLI_POCKET_NODE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_POCKET_NODE ADD CONSTRAINT FK_KLI_POCKET_NODE_POCKET_ID FOREIGN KEY (POCKET_ID) REFERENCES POCKET_SHOP (ID);
ALTER TABLE KLI_POCKET_NODE ADD CONSTRAINT FK_KLI_POCKET_NODE_SEL_ID FOREIGN KEY (SELEKCIQ_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE KLI_PRAGOVE ADD CONSTRAINT FK_KLI_PRAGOVE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_SKLAD_NODE ADD CONSTRAINT FK_KLI_SKLAD_NODE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_SKLAD_NODE ADD CONSTRAINT FK_KLI_SKLAD_NODE_SELEKCIQ_ID FOREIGN KEY (SELEKCIQ_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE KLI_SKLAD_NODE ADD CONSTRAINT FK_KLI_SKLAD_NODE_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE KLI_TOCHKI_NODE ADD CONSTRAINT FK_KLI_TOCHKI_NODE_OPR_ID FOREIGN KEY (OPR_CHANGE_ID) REFERENCES OPR (ID);
ALTER TABLE KLI_USER_NODE ADD CONSTRAINT FK_KLI_USER_NODE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_USER_NODE ADD CONSTRAINT FK_KLI_USER_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE KONSIGNACIA ADD CONSTRAINT FK_KONSIGNACIA_OPR_IN_ID FOREIGN KEY (OPR_IN_ID) REFERENCES OPR (ID);
ALTER TABLE KONSIGNACIA ADD CONSTRAINT FK_KONSIGNACIA_OPR_OUT_ID FOREIGN KEY (OPR_OUT_ID) REFERENCES OPR (ID);
ALTER TABLE LAYOUTS ADD CONSTRAINT FK_LAYOUTS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE LICENCE_EL ADD CONSTRAINT FK_LICENCE_EL_GEN_ID FOREIGN KEY (EL_GEN_ID) REFERENCES SLEDI_TEMPLATE_EL_GEN (ID);
ALTER TABLE LICENCE_EL ADD CONSTRAINT FK_LICENCE_EL_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID);
ALTER TABLE LICENCE_EL ADD CONSTRAINT FK_LICENCE_EL_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID);
ALTER TABLE LICENZ_PROD_NODE ADD CONSTRAINT FK_LICENZ_PROD_NODE_LICENZ_ID FOREIGN KEY (LICENZ_ID) REFERENCES CRM_INFO_LICENZIA (ID) ON DELETE CASCADE;
ALTER TABLE LICENZ_PROD_NODE ADD CONSTRAINT FK_LICENZ_PROD_NODE_OPR_ID FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE LOCK_OPR ADD CONSTRAINT FK_LOCK_OPR_USER FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE LOCK_OPR_EL ADD CONSTRAINT FK_LOCK_OPR_EL_LOCK_ID FOREIGN KEY (LOCK_ID) REFERENCES LOCK_OPR (ID) ON DELETE CASCADE;
ALTER TABLE LOCK_OPR_EL ADD CONSTRAINT FK_LOCK_OPR_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE MESA ADD CONSTRAINT FK_MESA_ELEMENT_ID FOREIGN KEY (ELEMENT_ID) REFERENCES PARTIDA_EL (ID);
ALTER TABLE MESA ADD CONSTRAINT FK_MESA_STRANA_G_ID FOREIGN KEY (STRANA_G) REFERENCES COUNTRIES (ID);
ALTER TABLE MESA ADD CONSTRAINT FK_MESA_STRANA_K_ID FOREIGN KEY (STRANA_K) REFERENCES COUNTRIES (ID);
ALTER TABLE MESA ADD CONSTRAINT FK_MESA_STRANA_R_ID FOREIGN KEY (STRANA_R) REFERENCES COUNTRIES (ID);
ALTER TABLE MESA ADD CONSTRAINT FK_MESA_TIP_ID FOREIGN KEY (TIP) REFERENCES MESA_TIP (ID);
ALTER TABLE METRO_EXPORT_OPR ADD CONSTRAINT FK_METRO_EXPORT_ID FOREIGN KEY (EXPORT_ID) REFERENCES EXPORTS (ID);
ALTER TABLE METRO_EXPORT_OPR ADD CONSTRAINT FK_METRO_EXPORT_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE METRO_EXPORT_SIMPLES ADD CONSTRAINT FK_METRO_EXPORT_EXPORT_ID FOREIGN KEY (EXPORT_ID) REFERENCES EXPORTS (ID) ON DELETE CASCADE;
ALTER TABLE METRO_EXPORT_SIMPLES ADD CONSTRAINT FK_METRO_EXPORT_SIMPLES_ID FOREIGN KEY (TO_SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE METRO_INVOICE_DOCUMENTS ADD CONSTRAINT FK_METRO_INVOICE_IMP_OPR_ID FOREIGN KEY (IMPORTED_OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE MOVE ADD CONSTRAINT FK_MOVE_OPR_IN_ID FOREIGN KEY (OPR_IN_ID) REFERENCES OPR (ID);
ALTER TABLE MOVE ADD CONSTRAINT FK_MOVE_OPR_OUT_ID FOREIGN KEY (OPR_OUT_ID) REFERENCES OPR (ID);
ALTER TABLE NAL ADD CONSTRAINT FK_NAL_OPR_ID FOREIGN KEY (LAST_DOST_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE NAL ADD CONSTRAINT FK_NAL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE NAL ADD CONSTRAINT FK_NAL_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE NAL2 ADD CONSTRAINT FK_NAL2_NAL_ID FOREIGN KEY (NAL_ID) REFERENCES NAL (ID);
ALTER TABLE NAL_F ADD CONSTRAINT FK_NAL_F_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OBEKT ADD CONSTRAINT FK_OBEKT_PLACE_ID FOREIGN KEY (PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE OFERTA ADD CONSTRAINT FK_OFERTA_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OFERTA_EL ADD CONSTRAINT FK_OFERTA_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OFERTA_EL ADD CONSTRAINT FK_OFERTA_EL_RAZFASOVKA_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE OFERTA_EL ADD CONSTRAINT FK_OFERTA_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OFFERS ADD CONSTRAINT FK_OFFERS_ADDRESS_ID FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESSES (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE OFFERS ADD CONSTRAINT FK_OFFERS_AGENT_ID FOREIGN KEY (AGENT_ID) REFERENCES KLI (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE OFFERS ADD CONSTRAINT FK_OFFERS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OFFER_EL ADD CONSTRAINT FK_OFFER_EL_COMMENT_ID FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE OFFER_EL ADD CONSTRAINT FK_OFFER_EL_OFFER_ID FOREIGN KEY (OFFER_ID) REFERENCES OFFERS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OFFER_EL ADD CONSTRAINT FK_OFFER_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OFFER_POR_NODE ADD CONSTRAINT FK_OFFER_POR_NODE_OFFER_ID FOREIGN KEY (OFFER_ID) REFERENCES OFFERS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OFFER_POR_NODE ADD CONSTRAINT FK_OFFER_POR_NODE_POR_ID FOREIGN KEY (POR_ID) REFERENCES POR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OFFER_USER_NODE ADD CONSTRAINT FK_OFFER_USER_NODE_OFFER_ID FOREIGN KEY (OFFER_ID) REFERENCES OFFERS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OFFER_USER_NODE ADD CONSTRAINT FK_OFFER_USER_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OFF_OBEKTI_LIST ADD CONSTRAINT FK_OFF_OBEKTI_LIST_OBEKT FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_IN_EL ADD CONSTRAINT FK_OLD_IN_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OLD_IN_EL ADD CONSTRAINT FK_OLD_IN_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OLD_OFFERS ADD CONSTRAINT FK_OLD_OFFERS_ADDRESS_ID FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESSES (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE OLD_OFFERS ADD CONSTRAINT FK_OLD_OFFERS_AGENT_ID FOREIGN KEY (AGENT_ID) REFERENCES KLI (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE OLD_OFFERS ADD CONSTRAINT FK_OLD_OFFERS_OFFER_ID FOREIGN KEY (OFFER_ID) REFERENCES OFFERS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OFFERS ADD CONSTRAINT FK_OLD_OFFERS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OFFER_EL ADD CONSTRAINT FK_OLD_OFFER_EL_COMMENT_ID FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE OLD_OFFER_EL ADD CONSTRAINT FK_OLD_OFFER_EL_OFFER_ID FOREIGN KEY (OFFER_ID) REFERENCES OFFERS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OFFER_EL ADD CONSTRAINT FK_OLD_OFFER_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OFFER_EL ADD CONSTRAINT FK_OLD_OFFER_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OFFER_USER_NODE ADD CONSTRAINT FK_OLD_OFFER_USER_NODE_OFFER_ID FOREIGN KEY (OFFER_ID) REFERENCES OFFERS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OFFER_USER_NODE ADD CONSTRAINT FK_OLD_OFFER_USER_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OFFER_USER_NODE ADD CONSTRAINT FK_OLD_OFFER_USER_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OUT_EL ADD CONSTRAINT FK_OLD_OUT_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OLD_OUT_EL ADD CONSTRAINT FK_OLD_OUT_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OLD_OUT_EL_PE_NODE ADD CONSTRAINT FK_OLD_OUT_EL_PE_NODE_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE OLD_OUT_EL_PE_NODE ADD CONSTRAINT FK_OLD_OUT_EL_PE_OUT_ID FOREIGN KEY (OLD_OUT_EL_ID) REFERENCES OLD_OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE OLD_OUT_EL_PE_NODE ADD CONSTRAINT FK_OLD_OUT_EL_PE_PE_ID FOREIGN KEY (PARTIDA_EL_ID) REFERENCES PARTIDA_EL (ID) ON DELETE CASCADE;
ALTER TABLE OLD_PARI_EL ADD CONSTRAINT FK_OLD_PARI_EL_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE OLD_PARI_EL ADD CONSTRAINT FK_OLD_PARI_EL_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE OLD_PARI_EL ADD CONSTRAINT FK_OLD_PARI_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OLD_PARI_EL ADD CONSTRAINT FK_OLD_PARI_EL_PARI_IO_ID FOREIGN KEY (PARI_IO_ID) REFERENCES PARI (ID);
ALTER TABLE OLD_PARI_EL ADD CONSTRAINT FK_OLD_PARI_EL_VALUTA_ID FOREIGN KEY (VALUTA_ID) REFERENCES VALUTA (ID);
ALTER TABLE OLD_POR_EL_PARAMS ADD CONSTRAINT FK_OLD_POR_EL_PARAMS_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL_EDIT (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_POR_EL_PRICE_COEF ADD CONSTRAINT FK_OLD_POR_EL_PRICE_COEF_SIMPLE FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON UPDATE CASCADE;
ALTER TABLE OLD_POR_EL_PRICE_COEF ADD CONSTRAINT FK_OLD_POR_EL_PRICE_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL_EDIT (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_REQUEST_EL ADD CONSTRAINT FK_OLD_MASTER_SIMPLE_ID FOREIGN KEY (MASTER_SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OLD_REQUEST_EL ADD CONSTRAINT FK_OLD_OPR_PREPARE_ID FOREIGN KEY (OPR_REQUEST_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE OLD_REQUEST_EL ADD CONSTRAINT FK_OLD_SIMPLE_CALC_ID FOREIGN KEY (SIMPLE_CALC_ID) REFERENCES SIMPLE_CALC (ID);
ALTER TABLE OLD_REQUEST_EL ADD CONSTRAINT FK_OLD_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OLD_TASKS ADD CONSTRAINT FK_OLD_TASKS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OLD_TASKS ADD CONSTRAINT FK_OLD_TASKS_TASK_ID FOREIGN KEY (TASK_ID) REFERENCES TASKS (ID);
ALTER TABLE ONLINE_USERS ADD CONSTRAINT FK_ONLINE_USERS_DISTRIBUTOR_ID FOREIGN KEY (DISTRIBUTOR_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLINE_USERS ADD CONSTRAINT FK_ONLINE_USERS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OPR ADD CONSTRAINT FK_OPR_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON UPDATE CASCADE;
ALTER TABLE OPR ADD CONSTRAINT FK_OPR_OPR_TIP FOREIGN KEY (OPR_TIP) REFERENCES OPR_TIP (ID);
ALTER TABLE OPR ADD CONSTRAINT FK_OPR_OTC_ID FOREIGN KEY (OTC_ID) REFERENCES OTC (ID);
ALTER TABLE OPR ADD CONSTRAINT FK_OPR_PC_ID FOREIGN KEY (PC_ID) REFERENCES INI (ID);
ALTER TABLE OPR ADD CONSTRAINT FK_OPR_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE OPR ADD CONSTRAINT FK_OPR_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE OPRGARANCIA ADD CONSTRAINT FK_OPRGARANCIA_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPRGARANCIA ADD CONSTRAINT FK_OPRGARANCIA_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OPR_AMBALAJ_NODE ADD CONSTRAINT FK_OPR_AMBALAJ_NODE_AMB_ID FOREIGN KEY (OPR_AMBALAJ_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_AMBALAJ_NODE ADD CONSTRAINT FK_OPR_AMBALAJ_NODE_PROD_ID FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_ANUL ADD CONSTRAINT FK_OPR_ANUL_AN_OPR_ID FOREIGN KEY (AN_OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE OPR_ANUL ADD CONSTRAINT FK_OPR_ANUL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_EDIT ADD CONSTRAINT FK_EDIT_OPR_ED_OPR_ID FOREIGN KEY (ED_OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE OPR_EDIT ADD CONSTRAINT FK_EDIT_OPR_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE OPR_EDIT ADD CONSTRAINT FK_EDIT_OPR_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_EDIT ADD CONSTRAINT FK_EDIT_OPR_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE OPR_EDIT ADD CONSTRAINT FK_EDIT_OPR_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE OPR_GARANCIA_NODE ADD CONSTRAINT FK_OPR_GARANCIA_NODE_OPR_GAR FOREIGN KEY (OPR_GARANCIA_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_GARANCIA_NODE ADD CONSTRAINT FK_OPR_GARANCIA_NODE_OPR_PROD FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_PADEJ ADD CONSTRAINT FK_OPR_PADEJ_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_PAYMENT_NODE ADD CONSTRAINT FK_OPR_PAYMENT_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES SUMI (ID) ON DELETE CASCADE;
ALTER TABLE OPR_PAYMENT_NODE ADD CONSTRAINT FK_OPR_PAYMENT_NODE_PAY_ID FOREIGN KEY (PAYMENT_ID) REFERENCES SUMI (ID) ON DELETE CASCADE;
ALTER TABLE OPR_PRODUCTION_REQUEST ADD CONSTRAINT FK_OPR_PRODUCTION_REQUEST_M_ID FOREIGN KEY (MONTAJ_USER_ID) REFERENCES "USER" (ID);
ALTER TABLE OPR_PRODUCTION_REQUEST ADD CONSTRAINT FK_OPR_PRODUCTION_REQUEST_PROD FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_PRODUCTION_REQUEST ADD CONSTRAINT FK_OPR_PRODUCT_REQUEST_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE OPR_PRODUCTION_REQUEST ADD CONSTRAINT FK_OPR_PRODUCT_REQUEST_V_SKLAD FOREIGN KEY (V_SKLAD) REFERENCES SKLAD (ID);
ALTER TABLE OPR_PRODUCTION_REQUEST ADD CONSTRAINT FK_PRODUCT_REQUEST_OT_SKLAD FOREIGN KEY (OT_SKLAD) REFERENCES SKLAD (ID);
ALTER TABLE OPR_RAZPAD_NODE ADD CONSTRAINT FK_OPR_RAZPAD_NODE_IN_EL FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE OPR_RAZPAD_NODE ADD CONSTRAINT FK_OPR_RAZPAD_NODE_OUT_EL FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE OPR_RAZPAD_NODE ADD CONSTRAINT FK_OPR_RAZPAD_NODE_SIMPLE_CALC FOREIGN KEY (SIMPLE_CALC_ID) REFERENCES SIMPLE_CALC (ID);
ALTER TABLE OPR_RECEPIES ADD CONSTRAINT FK_OPR_RECEPIES_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OPR_RECEPIES ADD CONSTRAINT FK_OPR_RECEPIES_RECEPIE_ID FOREIGN KEY (RECEPIE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OPR_RECEPIES_EL ADD CONSTRAINT FK_OPR_RECEPIES_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OPR_RECEPIES_EL ADD CONSTRAINT FK_OPR_RECEPIES_EL_RECEPIE_ID FOREIGN KEY (RECEPIE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OPR_RECEPIES_EL ADD CONSTRAINT FK_OPR_RECEPIES_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OPR_REFUSED ADD CONSTRAINT FK_OPR_REFUSED_OPR_ID FOREIGN KEY (ORP_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_REFUSED ADD CONSTRAINT FK_OPR_REFUSED_TIP_REFUSED_ID FOREIGN KEY (TIP_REFUSED_ID) REFERENCES TIP_REFUSED (ID);
ALTER TABLE OPR_REMOTE ADD CONSTRAINT FK_OPR_REMOTE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_SUMI ADD CONSTRAINT FK_OPR_SUMI_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT FK_OPR_TEMPLATE_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT FK_OPR_TEMPLATE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT FK_OPR_TEMPLATE_OBEKT_FAK_ID FOREIGN KEY (OBEKT_FAK_ID) REFERENCES OBEKT (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT FK_OPR_TEMPLATE_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT FK_OPR_TEMPLATE_ROUND_TIP_ID FOREIGN KEY (DIST_ROUND_TIP_ID) REFERENCES ROUND_TIP (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT FK_OPR_TEMPLATE_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT FK_OPR_TEMPLATE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE OPR_TEMPLATE_EL ADD CONSTRAINT FK_OPR_TEMPLATE_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OPR_TEMPLATE_EL ADD CONSTRAINT FK_OPR_TEMPLATE_EL_TEMPLATE_ID FOREIGN KEY (OPR_TEMPLATE_ID) REFERENCES OPR_TEMPLATE (ID) ON DELETE CASCADE;
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT FK_OPR_TEMPLATE_GEN_DIST_ID FOREIGN KEY (DISTRIBUTOR_ID) REFERENCES KLI (ID);
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT FK_OPR_TEMPLATE_GEN_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID);
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT FK_OPR_TEMPLATE_GEN_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT FK_OPR_TEMPLATE_GEN_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT FK_OPR_TEMPLATE_GEN_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT FK_OPR_TEMPLATE_GEN_TEMPL_ID FOREIGN KEY (OPR_TEMPLATE_ID) REFERENCES OPR_TEMPLATE (ID);
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT FK_OPR_TEMPLATE_GEN_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE OPR_TEMPLATE_TASK_NODE ADD CONSTRAINT FK_OPR_TEMPLATE_TASK_NODE_G FOREIGN KEY (TEMPLATE_GEN_ID) REFERENCES OPR_TEMPLATE_GEN (ID);
ALTER TABLE OPR_TEMPLATE_TASK_NODE ADD CONSTRAINT FK_OPR_TEMPLATE_TASK_TASK_ID FOREIGN KEY (TASK_ID) REFERENCES TASKS (ID);
ALTER TABLE OPR_TEMPLATE_TASK_NODE ADD CONSTRAINT FK_OPR_TEMPLATE_TASK_TEMPL_ID FOREIGN KEY (TEMPLATE_ID) REFERENCES OPR_TEMPLATE (ID);
ALTER TABLE OPR_WAITING_NODE ADD CONSTRAINT FK_OPR_WAITING_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_WAITING_NODE ADD CONSTRAINT FK_OPR_WAITING_NODE_WAITING_ID FOREIGN KEY (WAITING_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE ORDER_ACTIONS ADD CONSTRAINT FK_ORDER_ACTIONS_ACTION_ID FOREIGN KEY (ACTION_ID) REFERENCES ACTIONS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ORDER_ACTIONS ADD CONSTRAINT FK_ORDER_ACTIONS_ORDER_ID FOREIGN KEY (ORDER_ID) REFERENCES POR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ORDER_ACTIONS ADD CONSTRAINT FK_ORDER_ACTIONS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OTC ADD CONSTRAINT FK_OTC_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE OTC ADD CONSTRAINT FK_OTC_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OTCS_OPR_NODE ADD CONSTRAINT FK_OTCS_OPR_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OTCS_OPR_NODE ADD CONSTRAINT FK_OTCS_OPR_NODE_OTCS_ID FOREIGN KEY (OTCS_ID) REFERENCES STORE_OTC (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OTC_EL ADD CONSTRAINT FK_OTC_EL_OPR_EL_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OTC_EL_EDIT ADD CONSTRAINT KF_OTC_EL_EDIT_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OTC_PER ADD CONSTRAINT FK_OTC_PER_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OUT ADD CONSTRAINT FK_OUT_KLI_AGENT FOREIGN KEY (KLI_AGENT_ID) REFERENCES KLI_AGENTS (ID);
ALTER TABLE OUT ADD CONSTRAINT FK_OUT_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE OUT ADD CONSTRAINT FK_OUT_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OUT ADD CONSTRAINT FK_OUT_UNP_ID FOREIGN KEY (UNP_ID) REFERENCES UNP (ID) ON UPDATE CASCADE;
ALTER TABLE OUT_EL ADD CONSTRAINT FK_OUT_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OUT_EL ADD CONSTRAINT FK_OUT_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OUT_EL2 ADD CONSTRAINT FK_OUT_EL2_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE OUT_EL_FAK_OUT_EL ADD CONSTRAINT FK_OUT_EL_FAK_OUT_EL_FAK_ID FOREIGN KEY (FAK_OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE OUT_EL_FAK_OUT_EL ADD CONSTRAINT FK_OUT_EL_FAK_OUT_EL_OUT_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE OUT_EL_RAZ_NODE ADD CONSTRAINT FK_OUT_EL_RAZ_NODE_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE OUT_EL_RAZ_NODE ADD CONSTRAINT FK_OUT_EL_RAZ_NODE_RAZF_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE OWNER_BANKI ADD CONSTRAINT FK_OWNER_BANKI_1 FOREIGN KEY (OWNER_ID) REFERENCES OWNER (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARI ADD CONSTRAINT FK_PARI_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE PARI ADD CONSTRAINT FK_PARI_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE PARI ADD CONSTRAINT FK_PARI_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PARI ADD CONSTRAINT FK_PARI_PARI_IO_ID FOREIGN KEY (PARI_IO_ID) REFERENCES PARI_IO (ID);
ALTER TABLE PARI ADD CONSTRAINT FK_PARI_VALUTA_ID FOREIGN KEY (VALUTA_ID) REFERENCES VALUTA (ID);
ALTER TABLE PARI_CRYPT ADD CONSTRAINT FK_PARI_CRYPT_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE PARI_CRYPT ADD CONSTRAINT FK_PARI_CRYPT_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE PARI_CRYPT ADD CONSTRAINT FK_PARI_CRYPT_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_CRYPT ADD CONSTRAINT FK_PARI_CRYPT_PARI_IO_ID FOREIGN KEY (PARI_IO_ID) REFERENCES PARI_IO (ID);
ALTER TABLE PARI_CRYPT ADD CONSTRAINT FK_PARI_CRYPT_VALUTA_ID FOREIGN KEY (VALUTA_ID) REFERENCES VALUTA (ID);
ALTER TABLE PARI_DIST ADD CONSTRAINT FK_PARI_DIST_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_DIST ADD CONSTRAINT FK_PARI_DIST_OPR_PROD_ID FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_FAKINUSLUGA_NODE ADD CONSTRAINT FK_PARI_FAKINUSL_FAKIN_ID FOREIGN KEY (FAK_IN_ID) REFERENCES FAK_IN (ID);
ALTER TABLE PARI_FAKINUSLUGA_NODE ADD CONSTRAINT FK_PARI_FAKINUSL_OPR_ID FOREIGN KEY (PARI_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_FAK_NODE ADD CONSTRAINT FK_PARI_FAK_NODE_FAK_ID FOREIGN KEY (FAK_ID) REFERENCES FAK (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARI_NODE ADD CONSTRAINT FK_PARI_NODE_FROM FOREIGN KEY (FROM_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_NODE ADD CONSTRAINT FK_PARI_NODE_TO FOREIGN KEY (TO_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_SKLOPR_NODE ADD CONSTRAINT FK_PARI_SKLOPR_NODE_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE PARI_SKLOPR_NODE ADD CONSTRAINT FK_PARI_SKLOPR_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_SKLOPR_NODE ADD CONSTRAINT FK_PARI_SKLOPR_NODE_OTC_ID FOREIGN KEY (OPR_OTC_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_SKLOPR_NODE ADD CONSTRAINT FK_PARI_SKLOPR_NODE_PARI_ID FOREIGN KEY (OPR_PARI_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_TMP ADD CONSTRAINT FK_PARI_TMP_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE PARI_TMP ADD CONSTRAINT FK_PARI_TMP_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE PARI_TMP ADD CONSTRAINT FK_PARI_TMP_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_TMP ADD CONSTRAINT FK_PARI_TMP_PARI_IO_ID FOREIGN KEY (PARI_IO_ID) REFERENCES PARI_IO (ID);
ALTER TABLE PARI_TMP ADD CONSTRAINT FK_PARI_TMP_VALUTA_ID FOREIGN KEY (VALUTA_ID) REFERENCES VALUTA (ID);
ALTER TABLE PARTIDA_EL_NODE ADD CONSTRAINT FK_PARTIDA_EL_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PARTIDA_EL_NODE ADD CONSTRAINT FK_PARTIDA_EL_NODE_PARTIDA_ID FOREIGN KEY (PARTIDA_ID) REFERENCES PARTIDA_NAL (ID) ON UPDATE CASCADE;
ALTER TABLE PARTIDA_EL_PRINT ADD CONSTRAINT FK_PARTIDA_EL_PRINT_ORDER_EL_ID FOREIGN KEY (ORDER_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARTIDA_EL_PRINT ADD CONSTRAINT FK_PARTIDA_EL_PRINT_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE PARTIDA_IN_EL_NODE ADD CONSTRAINT FK_PIN_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARTIDA_IN_EL_NODE ADD CONSTRAINT FK_PIN_PARTIDA_NODE_ID FOREIGN KEY (PARTIDA_NODE_ID) REFERENCES PARTIDA_EL_NODE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARTIDA_IZL_NODE ADD CONSTRAINT FK_PARTIDA_IZL_IZL_ID FOREIGN KEY (IZL_ID) REFERENCES IZL (ID) ON DELETE CASCADE;
ALTER TABLE PARTIDA_IZL_NODE ADD CONSTRAINT FK_PARTIDA_IZL_PARTIDA_EL_ID FOREIGN KEY (PARTIDA_EL_ID) REFERENCES PARTIDA_EL_NODE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARTIDA_NAL ADD CONSTRAINT FK_PARTIDA_NAL_ELEMENT_ID FOREIGN KEY (ELEMENT_ID) REFERENCES PARTIDA_EL (ID);
ALTER TABLE PARTIDA_NAL ADD CONSTRAINT FK_PARTIDA_NAL_IN_EL__ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID);
ALTER TABLE PARTIDA_NAL ADD CONSTRAINT FK_PARTIDA_NAL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE PARTIDA_NAL ADD CONSTRAINT FK_PARTIDA_NAL_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE PARTIDA_OUT_EL_NODE ADD CONSTRAINT FK_PARTIDA_OUT_EL_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID);
ALTER TABLE PARTIDA_OUT_EL_NODE ADD CONSTRAINT FK_PARTIDA_OUT_EL_PARTIDA_ID FOREIGN KEY (PARTIDA_NODE_ID) REFERENCES PARTIDA_EL_NODE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARTIDA_PROP_NODE ADD CONSTRAINT FK_PARTIDA_PROP_NODE_MAJOR_ID FOREIGN KEY (MAJOR_PROP_ID) REFERENCES SIMPLE_PROP (ID);
ALTER TABLE PARTIDA_PROP_NODE ADD CONSTRAINT FK_PARTIDA_PROP_NODE_MINOR_ID FOREIGN KEY (MINOR_PROP_ID) REFERENCES SIMPLE_PROP_MINOR (ID);
ALTER TABLE PARTIDA_PROP_NODE ADD CONSTRAINT FK_PARTIDA_PROP_NODE_PAR_EL_ID FOREIGN KEY (PARTIDA_EL_ID) REFERENCES PARTIDA_EL (ID);
ALTER TABLE PARTIDA_RETURN_NODE ADD CONSTRAINT FK_PARTIDA_RETURN_NODE_FROM_ID FOREIGN KEY (FROM_ID) REFERENCES PARTIDA_EL_NODE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARTIDA_RETURN_NODE ADD CONSTRAINT FK_PARTIDA_RETURN_NODE_TO_ID FOREIGN KEY (TO_ID) REFERENCES PARTIDA_EL_NODE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PATHS ADD CONSTRAINT FK_PATHS_FROM FOREIGN KEY (FROM_PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE PATHS ADD CONSTRAINT FK_PATHS_TO FOREIGN KEY (TO_PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE PAYMENT ADD CONSTRAINT FK_PAYMENT_BRANCH_ID FOREIGN KEY (BRANCH_ID) REFERENCES OBEKT (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PAYMENT ADD CONSTRAINT FK_PAYMENT_FAK_ID FOREIGN KEY (FAK_ID) REFERENCES FAK (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PAYMENT ADD CONSTRAINT FK_PAYMENT_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PAYMENT ADD CONSTRAINT FK_PAYMENT_UNP_ID FOREIGN KEY (UNP_ID) REFERENCES UNP (ID) ON UPDATE CASCADE;
ALTER TABLE PAYMENTS_EL ADD CONSTRAINT FK_PAYMENTS_EL_CFG_PAYMENTS_ID FOREIGN KEY (PAYMENT_TIP_ID) REFERENCES CFG_PAYMENTS (ID);
ALTER TABLE PAYMENTS_EL ADD CONSTRAINT FK_PAYMENTS_EL_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON UPDATE CASCADE;
ALTER TABLE PAYMENTS_EL ADD CONSTRAINT FK_PAYMENTS_EL_PAYMENT_ID FOREIGN KEY (PAYMENT_ID) REFERENCES PAYMENT (ID);
ALTER TABLE PAYMENT_AVANSOVO ADD CONSTRAINT FK_PAYMENT_AVANSOVO_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE PAYMENT_AVANSOVO ADD CONSTRAINT FK_PAYMENT_AVANSOVO_PAYMENT_ID FOREIGN KEY (PAYMENT_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PAYMENT_NODE ADD CONSTRAINT FK_PAYMENT_NODE_NODE_ID FOREIGN KEY (NODE_ID) REFERENCES OPR_PAYMENT_NODE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PAYMENT_NODE ADD CONSTRAINT FK_PAYMENT_NODE_SUMI_ID FOREIGN KEY (OPR_ID) REFERENCES SUMI (ID);
ALTER TABLE PAYMENT_NOW ADD CONSTRAINT FK_PAYMENT_NOW_PAYMENT_ID FOREIGN KEY (OPR_PAYMENT_ID) REFERENCES OPR (ID);
ALTER TABLE PAYMENT_NOW ADD CONSTRAINT FK_PAYMENT_NOW_PROD_ID FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE PAY_NOCASH_NODE ADD CONSTRAINT FK_PAY_NOCASH_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PAY_NOCASH_NODE ADD CONSTRAINT FK_PAY_NOCASH_NODE_PAYMENT_EL FOREIGN KEY (PAYMENT_EL_ID) REFERENCES PAYMENTS_EL (ID);
ALTER TABLE PLACE ADD CONSTRAINT FK_PLACE_COUNTY_ID FOREIGN KEY (COUNTY_ID) REFERENCES COUNTIES (ID);
ALTER TABLE PL_DELIVERY_STORAGE_EDIT ADD CONSTRAINT FK_PL_DELIVERY_STORAGE_OPR_ID FOREIGN KEY (OPR_EDIT_ID) REFERENCES OPR_EDIT (ID);
ALTER TABLE POCKET_SHOP ADD CONSTRAINT FK_POCKET_SHOP_CL_ID FOREIGN KEY (CL_ID) REFERENCES CENOVA_LISTA (ID);
ALTER TABLE POCKET_SHOP ADD CONSTRAINT FK_POCKET_SHOP_KLI_ID FOREIGN KEY (AGENT_ID) REFERENCES KLI (ID);
ALTER TABLE POCKET_SHOP ADD CONSTRAINT FK_POCKET_SHOP_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE POCKET_SHOP ADD CONSTRAINT FK_POCKET_SHOP_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE POR ADD CONSTRAINT FK_POR_ADDRESS_ID FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESSES (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE POR ADD CONSTRAINT FK_POR_CHANGE_STATUS_USER_ID FOREIGN KEY (CHANGE_STATUS_USER_ID) REFERENCES "USER" (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE POR ADD CONSTRAINT FK_POR_MOVE_OPR_ID FOREIGN KEY (MOVE_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POR ADD CONSTRAINT FK_POR_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POR ADD CONSTRAINT FK_POR_OPR_ID_KAPARO FOREIGN KEY (OPR_ID_KAPARO) REFERENCES OPR (ID);
ALTER TABLE POR ADD CONSTRAINT FK_POR_PARENT_ID FOREIGN KEY (PARENT_ID) REFERENCES POR (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE POR ADD CONSTRAINT FK_POR_PRODUCTION_ID FOREIGN KEY (PRODUCTION_ID) REFERENCES PRODUCTION (ID);
ALTER TABLE POR ADD CONSTRAINT FK_POR_PRODUCTION_STAT_USER_ID FOREIGN KEY (PRODUCTION_STATUS_USER_ID) REFERENCES "USER" (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE POR ADD CONSTRAINT FK_POR_PRODUCTION_USER_ID FOREIGN KEY (PRODUCTION_USER_ID) REFERENCES "USER" (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE POR ADD CONSTRAINT FK_POR_SALE_OPR_ID FOREIGN KEY (SALE_OPR_ID) REFERENCES OPR (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE POR ADD CONSTRAINT FK_POR_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE POR ADD CONSTRAINT FK_POR_UNP_ID FOREIGN KEY (UNP_ID) REFERENCES UNP (ID) ON UPDATE CASCADE;
ALTER TABLE POR_DOST_KOL_RZV ADD CONSTRAINT FK_POR_DOST_KOL_RZV_OPR_ID_DOST FOREIGN KEY (OPR_ID_DOST) REFERENCES OPR (ID);
ALTER TABLE POR_DOST_KOL_RZV ADD CONSTRAINT FK_POR_DOST_KOL_RZV_OPR_ID_POR FOREIGN KEY (OPR_ID_POR) REFERENCES OPR (ID);
ALTER TABLE POR_DOST_KOL_RZV ADD CONSTRAINT FK_POR_DOST_KOL_RZV_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE POR_EDIT ADD CONSTRAINT FK_POR_EDIT_EDIT_ID FOREIGN KEY (EDIT_ID) REFERENCES OPR_EDIT (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_EDIT ADD CONSTRAINT FK_POR_EDIT_ORDER_ID FOREIGN KEY (ORDER_ID) REFERENCES POR (ID) ON UPDATE CASCADE;
ALTER TABLE POR_EL ADD CONSTRAINT FK_POR_EL_OPR_EL FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POR_EL ADD CONSTRAINT FK_POR_EL_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE POR_EL ADD CONSTRAINT FK_POR_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE POR_EL_COMMENT ADD CONSTRAINT FK_POR_EL_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE;
ALTER TABLE POR_EL_EDIT ADD CONSTRAINT FK_POR_EL_EDIT_EDIT_ID FOREIGN KEY (EDIT_ID) REFERENCES OPR_EDIT (ID);
ALTER TABLE POR_EL_EDIT ADD CONSTRAINT FK_POR_EL_EDIT_OPR_KAPARO FOREIGN KEY (OPR_KAPARO) REFERENCES OPR (ID);
ALTER TABLE POR_EL_EDIT ADD CONSTRAINT FK_POR_EL_EDIT_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE POR_EL_EXPLANATORY ADD CONSTRAINT FK_POR_EL_EXPLANATORY_ID FOREIGN KEY (EXPLAN_ID) REFERENCES EXPLANATORY (ID);
ALTER TABLE POR_EL_EXPLANATORY ADD CONSTRAINT FK_POR_EL_EXPLANATORY_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE;
ALTER TABLE POR_EL_PICTURES_NODE ADD CONSTRAINT FK_POR_EL_PICS_NODE_PICTURE_ID FOREIGN KEY (PICTURE_ID) REFERENCES INSTALLATION_PICTURES (ID) ON UPDATE CASCADE;
ALTER TABLE POR_EL_PICTURES_NODE ADD CONSTRAINT FK_POR_EL_PICS_NODE_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_EL_PRICE_COEFICIENT ADD CONSTRAINT FK_POR_EL_PRICE_COEF_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_EL_PRICE_COEFICIENT ADD CONSTRAINT FK_POR_EL_PRICE_COEF_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON UPDATE CASCADE;
ALTER TABLE POR_EL_PRODUCTION ADD CONSTRAINT FK_POR_EL_PRODUCTION_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE;
ALTER TABLE POR_EL_PRODUCTION ADD CONSTRAINT FK_POR_EL_PRODUCTION_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE POR_EL_PRODUCTION ADD CONSTRAINT FK_POR_EL_PRODUCTION_SIM_CALC_I FOREIGN KEY (SIMPLE_CALAC_ID) REFERENCES SIMPLE_CALC (ID);
ALTER TABLE POR_EL_RAZ_NODE ADD CONSTRAINT FK_POR_EL_RAZ_NODE_POR_RL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE;
ALTER TABLE POR_EL_RAZ_NODE ADD CONSTRAINT FK_POR_EL_RAZ_NODE_RAZF_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE POR_EL_REQUEST_NODE ADD CONSTRAINT FK_POR_EL_REQ_NODE_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_EL_REQUEST_NODE ADD CONSTRAINT FK_POR_EL_REQ_NODE_REQUEST_ID FOREIGN KEY (REQUEST_EL_ID) REFERENCES PRODUCTION_REQUEST_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_FAK_PROD_NODE ADD CONSTRAINT FK_POR_FAK_PROD_NODE_OPR_ID FOREIGN KEY (FAK_PROD_OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_FAK_PROD_NODE ADD CONSTRAINT FK_POR_FAK_PROD_NODE_POR_ID FOREIGN KEY (POR_ID) REFERENCES POR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_FORMULA_PARAMS ADD CONSTRAINT FK_POR_FORMULA_PARAMS_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE;
ALTER TABLE POR_OFFER_TERMS_NODE ADD CONSTRAINT FK_POR_OFFER_TERMS_NODE_POR_ID FOREIGN KEY (POR_ID) REFERENCES POR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_OFFER_TERMS_NODE ADD CONSTRAINT FK_POR_OFFER_TERMS_NODE_TERMS_I FOREIGN KEY (TERMS_ID) REFERENCES OFFER_TERMS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_OUT_NODE ADD CONSTRAINT FK_POR_OUT_NODE_OUT_ID FOREIGN KEY (OUT_ID) REFERENCES OUT (ID);
ALTER TABLE POR_OUT_NODE ADD CONSTRAINT FK_POR_OUT_NODE_POR_ID FOREIGN KEY (POR_ID) REFERENCES POR (ID);
ALTER TABLE POR_PRODUCTION_REQUEST_NODE ADD CONSTRAINT FK_POR_NODE_OPR_ID FOREIGN KEY (POR_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POR_PRODUCTION_REQUEST_NODE ADD CONSTRAINT FK_REQUEST_NODE_OPR_ID FOREIGN KEY (PRODUCTION_REQUEST_ID) REFERENCES OPR (ID);
ALTER TABLE POR_PROP_NODE ADD CONSTRAINT FK_POR_PROP_NODE_MAJOR_PROP_ID FOREIGN KEY (MAJOR_PROP_ID) REFERENCES SIMPLE_PROP (ID);
ALTER TABLE POR_PROP_NODE ADD CONSTRAINT FK_POR_PROP_NODE_MINOR_PROP_ID FOREIGN KEY (MINOR_PROP_ID) REFERENCES SIMPLE_PROP_MINOR (ID);
ALTER TABLE POR_PROP_NODE ADD CONSTRAINT FK_POR_PROP_NODE_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE;
ALTER TABLE POR_RAZ_EDIT ADD CONSTRAINT FK_POR_RAZ_EDIT_EDIT_ID FOREIGN KEY (EDIT_ID) REFERENCES POR_EL_EDIT (ID);
ALTER TABLE POR_RAZ_EDIT ADD CONSTRAINT FK_POR_RAZ_EDIT_RAZ_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE POR_ZD_NODE ADD CONSTRAINT FK_POR_ZD_NODE_POR_OPR_ID FOREIGN KEY (POR_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POR_ZD_NODE ADD CONSTRAINT FK_POR_ZD_NODE_ZD_OPR_ID FOREIGN KEY (ZD_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POTV ADD CONSTRAINT FK_POTV_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POTV_EL ADD CONSTRAINT FK_POTV_EL_MOL_USER_ID FOREIGN KEY (MOL_USER_ID) REFERENCES "USER" (ID);
ALTER TABLE POTV_EL ADD CONSTRAINT FK_POTV_EL_OPR_ID FOREIGN KEY (OPR_POTV_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE POTV_EL ADD CONSTRAINT FK_POTV_EL_POTV_ID FOREIGN KEY (POTV_ID) REFERENCES POTV (ID);
ALTER TABLE POTV_MOVE_EL ADD CONSTRAINT FK_POTV_MOVE_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POTV_MOVE_EL ADD CONSTRAINT FK_POTV_MOVE_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE PRICE_LIST_DELIVERY_STORAGES ADD CONSTRAINT FK_PRICE_LIST_DELIVERY_STORAGES FOREIGN KEY (STORAGE_ID) REFERENCES SKLAD (ID);
ALTER TABLE PRICE_LIST_DELIVERY_STORAGES ADD CONSTRAINT FK_PRICE_LIST_D_PRICE_LIST_ID FOREIGN KEY (PRICE_LIST_ID) REFERENCES OPR (ID);
ALTER TABLE PRODUCTION ADD CONSTRAINT FK_PRODUCTION_OPR_IN_ID FOREIGN KEY (OPR_IN_ID) REFERENCES OPR (ID);
ALTER TABLE PRODUCTION ADD CONSTRAINT FK_PRODUCTION_OPR_OUT_ID FOREIGN KEY (OPR_OUT_ID) REFERENCES OPR (ID);
ALTER TABLE PRODUCTION_EXPLANATORY ADD CONSTRAINT FK_PRODUCTION_EXPLANATORY_1 FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE PRODUCTION_EXPLANATORY ADD CONSTRAINT FK_PRODUCTION_EXPLANATORY_2 FOREIGN KEY (EXPLAIN_ID) REFERENCES EXPLANATORY (ID);
ALTER TABLE PRODUCTION_GRUPI ADD CONSTRAINT FK_PRODUCTION_GRUPI_SEL_ID FOREIGN KEY (SELEKCIQ_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE PRODUCTION_IN_EL_PARAMS ADD CONSTRAINT FK_PRODUCTION_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE PRODUCTION_KAPARO_NODE ADD CONSTRAINT FK_PRODUCTION_PAYMENT_OPR_ID FOREIGN KEY (OPR_PAYMENT_ID) REFERENCES OPR (ID);
ALTER TABLE PRODUCTION_KAPARO_NODE ADD CONSTRAINT FK_PRODUCTION_REQUEST_OPR_ID FOREIGN KEY (REQUEST_ID) REFERENCES OPR (ID);
ALTER TABLE PRODUCTION_MONTAJISTI ADD CONSTRAINT FK_PRODUCTION_MONTAJ_REQUEST_ID FOREIGN KEY (PRODUCTION_REQUEST_ID) REFERENCES OPR_PRODUCTION_REQUEST (ID) ON DELETE CASCADE
  USING INDEX FK_PRODUCTION_REQUEST_ID;
ALTER TABLE PRODUCTION_MONTAJISTI ADD CONSTRAINT FK_PRODUCTION_MONTAJ_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE PRODUCTION_REQUEST_EL ADD CONSTRAINT FK_REQUEST_MASTER_SIMPLE_ID FOREIGN KEY (MASTER_SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE PRODUCTION_REQUEST_EL ADD CONSTRAINT FK_REQUEST_OPR_PREPARE_ID FOREIGN KEY (OPR_REQUEST_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE PRODUCTION_REQUEST_EL ADD CONSTRAINT FK_REQUEST_SIMPLE_CALC_ID FOREIGN KEY (SIMPLE_CALC_ID) REFERENCES SIMPLE_CALC (ID);
ALTER TABLE PRODUCTION_REQUEST_EL ADD CONSTRAINT FK_REQUEST_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE PRODUCTION_ZARABOTKA ADD CONSTRAINT FK_PRODUCTION_ZARABOTKA_PR_ID FOREIGN KEY (PRODUCTION_ID) REFERENCES OPR_PRODUCTION_REQUEST (ID) ON DELETE CASCADE;
ALTER TABLE PRODUCTION_ZARABOTKA ADD CONSTRAINT FK_PRODUCTION_ZARABOTKA_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE PRODUCTION_ZARABOTKA_IZPLATENO ADD CONSTRAINT FK_ZARABOTKA_IZPL_ID FOREIGN KEY (ZARABOTKA_ID) REFERENCES PRODUCTION_ZARABOTKA (ID) ON DELETE CASCADE;
ALTER TABLE PRODUCT_WAREHOUSE_MAP_NODE ADD CONSTRAINT FK_PRODUCT_WAREHOUSE_MAP_NODE_N FOREIGN KEY (NODE_ID) REFERENCES WAREHOUSE_BASE_MAP (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PRODUCT_WAREHOUSE_MAP_NODE ADD CONSTRAINT FK_PRODUCT_WAREHOUSE_MAP_NODE_P FOREIGN KEY (PRODUCT_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PROD_AVANS ADD CONSTRAINT FK_PROD_AVANS_AVANS_OUT_ID FOREIGN KEY (AVANS_OUT_ID) REFERENCES OUT (ID);
ALTER TABLE PROD_AVANS ADD CONSTRAINT FK_PROD_AVANS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_AVANS ADD CONSTRAINT FK_PROD_AVANS_OUT_ID FOREIGN KEY (OUT_ID) REFERENCES OUT (ID);
ALTER TABLE PROD_CENI_EL ADD CONSTRAINT FK_PROD_CENI_EL_BARCODE_ID FOREIGN KEY (BARCODE_ID) REFERENCES BARCODE (ID) ON DELETE SET NULL;
ALTER TABLE PROD_CENI_EL ADD CONSTRAINT FK_PROD_CENI_EL_BONUS_ID FOREIGN KEY (BONUS_ID) REFERENCES BONUS_CONFIG (ID) ON DELETE SET NULL;
ALTER TABLE PROD_CENI_EL ADD CONSTRAINT FK_PROD_CENI_EL_OTSTAPKA_ID FOREIGN KEY (OTSTAPKA_ID) REFERENCES BH_OTSTAPKI (ID);
ALTER TABLE PROD_CENI_EL ADD CONSTRAINT FK_PROD_CENI_EL_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PROD_CENI_EL ADD CONSTRAINT FK_PROD_CENI_EL_VAT_REASON_ID FOREIGN KEY (VAT_REASON_ID) REFERENCES CFG_OSN_DDS (ID) ON UPDATE CASCADE;
ALTER TABLE PROD_NODE ADD CONSTRAINT FK_PROD_NODE_PROD_ID FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_NODE ADD CONSTRAINT FK_PROD_NODE_SUB_PROD_ID FOREIGN KEY (OPR_SUB_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_PRODUCTION ADD CONSTRAINT FK_PROD_PRODUCTION_1 FOREIGN KEY (PROD_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_PRODUCTION ADD CONSTRAINT FK_PROD_PRODUCTION_2 FOREIGN KEY (PRODUCTION_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_REQUEST_PRODUCTION_NODE ADD CONSTRAINT FK_PROD_REQUEST_PRODUCTION_ID FOREIGN KEY (OPR_REQUEST_PRODUCTION_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_REQUEST_PRODUCTION_NODE ADD CONSTRAINT FK_PROD_REQUEST_PRODUCTION_NODE FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_STOCK ADD CONSTRAINT FK_PROD_STOCK_1 FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_STOCK ADD CONSTRAINT FK_PROD_STOCK_2 FOREIGN KEY (OWNER_ID) REFERENCES OWNER (ID);
ALTER TABLE PROD_STOCK_EL ADD CONSTRAINT FK_PROD_STOCK_EL_1 FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE PROD_STOCK_EL ADD CONSTRAINT FK_PROD_STOCK_EL_2 FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRIES (ID);
ALTER TABLE PROD_STOCK_EL ADD CONSTRAINT FK_PROD_STOCK_EL_3 FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_VAUCHER ADD CONSTRAINT FK_PROD_VAUCHER_1 FOREIGN KEY (PAYMENT_EL_ID) REFERENCES PAYMENTS_EL (ID);
ALTER TABLE PROD_VAUCHER ADD CONSTRAINT FK_PROD_VAUCHER_OPR_ID FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE PROFORMA_TO_FAK ADD CONSTRAINT FK_PROFORMA_TO_FAK_FAK_ID FOREIGN KEY (FAK_ID) REFERENCES FAK (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PROFORMA_TO_FAK ADD CONSTRAINT FK_PROFORMA_TO_FAK_PROF_ID FOREIGN KEY (PROFORMA_ID) REFERENCES FAK (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PROP_NODE ADD CONSTRAINT FK_PROP_NODE_MAJOR_ID FOREIGN KEY (MAJOR_PROP_ID) REFERENCES SIMPLE_PROP (ID);
ALTER TABLE PROP_NODE ADD CONSTRAINT FK_PROP_NODE_MINOR_ID FOREIGN KEY (MINOR_PROP_ID) REFERENCES SIMPLE_PROP_MINOR (ID);
ALTER TABLE PR_REQUEST_EXPLANATORY ADD CONSTRAINT FK_PREPARE_EXPL_ID FOREIGN KEY (EXPLAN_ID) REFERENCES EXPLANATORY (ID);
ALTER TABLE PR_REQUEST_EXPLANATORY ADD CONSTRAINT FK_PREPARE_PR_EL_ID FOREIGN KEY (PR_REQUEST_EL_ID) REFERENCES PRODUCTION_REQUEST_EL (ID) ON DELETE CASCADE;
ALTER TABLE PR_REQUEST_FORMULA_PARAMS ADD CONSTRAINT FK_PREP_PR_EL_ID FOREIGN KEY (REQUEST_EL_ID) REFERENCES PRODUCTION_REQUEST_EL (ID) ON DELETE CASCADE;
ALTER TABLE PR_REQ_EL_PRICE_COEFICIENT ADD CONSTRAINT FK_PR_REQ_PRICE_COEF_REQ_EL_ID FOREIGN KEY (REQUEST_EL_ID) REFERENCES PRODUCTION_REQUEST_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE RAZFASOVKA ADD CONSTRAINT FK_RAZFASOVKA_RAZ_ELEMENT FOREIGN KEY (RAZ_ELEMENT_ID) REFERENCES RAZ_ELEMENT (ID);
ALTER TABLE RAZFASOVKA ADD CONSTRAINT FK_RAZFASOVKA_RAZ_TIP FOREIGN KEY (RAZ_TIP_ID) REFERENCES RAZ_TIP (ID);
ALTER TABLE RAZFASOVKA ADD CONSTRAINT FK_RAZFASOVKA_SIMPLE FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE RAZPAD ADD CONSTRAINT FK_RAZPAD_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE RDB$NAL ADD CONSTRAINT FK_RDBNAL_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE RDB$PARTIDA_NAL ADD CONSTRAINT FK_RDB_PARTIDA_NAL_ELEMENT_ID FOREIGN KEY (ELEMENT_ID) REFERENCES PARTIDA_EL (ID) ON DELETE CASCADE;
ALTER TABLE RDB$PARTIDA_NAL ADD CONSTRAINT FK_RDB_PARTIDA_NAL_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE REAL_IZP_FAKT_IZP_NODE ADD CONSTRAINT FK_REAL_IZP_FAKT_IZP_NODE_1 FOREIGN KEY (REAL_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE REAL_IZP_FAKT_IZP_NODE ADD CONSTRAINT FK_REAL_IZP_FAKT_IZP_NODE_2 FOREIGN KEY (FAKT_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE REQUEST_PRODUCTION_NODE ADD CONSTRAINT FK_REQUEST_ID FOREIGN KEY (REQUEST_ID) REFERENCES OPR (ID);
ALTER TABLE REQUEST_PRODUCTION_NODE ADD CONSTRAINT FK_REQUEST_PRODUCTION_ID FOREIGN KEY (PRODUCTION_ID) REFERENCES OPR (ID);
ALTER TABLE RET_DOST_KI_DOST_NODE ADD CONSTRAINT FK_RET_KI_DOST_NODE_KI_ID FOREIGN KEY (KI_DOST_ID) REFERENCES RET_STOKA_DOST_KI (ID);
ALTER TABLE RET_DOST_KI_DOST_NODE ADD CONSTRAINT FK_RET_KI_DOST_NODE_RET_ID FOREIGN KEY (RET_DOST_ID) REFERENCES RET_STOKA_DOST (ID);
ALTER TABLE RET_DOST_MOVE_NODE ADD CONSTRAINT FK_RET_DOST_MOVE_IN_ID FOREIGN KEY (IN_OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE RET_DOST_MOVE_NODE ADD CONSTRAINT FK_RET_DOST_MOVE_OPR_ID FOREIGN KEY (RET_OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE RET_DOST_MOVE_NODE ADD CONSTRAINT FK_RET_DOST_MOVE_OUT_ID FOREIGN KEY (OUT_OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE RET_PROD_RET_FAK_PROD_KI_NODE ADD CONSTRAINT FK_RET_PROD_RET_FAK_PROD_KI_1 FOREIGN KEY (OPR_RET_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE RET_PROD_RET_FAK_PROD_KI_NODE ADD CONSTRAINT FK_RET_PROD_RET_FAK_PROD_KI_2 FOREIGN KEY (OPR_RET_FAK_PROD_KI_ID) REFERENCES OPR (ID);
ALTER TABLE RET_STOKA_DOST ADD CONSTRAINT FK_RET_STOKA_DOST_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE RET_STOKA_DOST_KI ADD CONSTRAINT FK_RET_STOKA_DOST_KI_FAK_IN_ID FOREIGN KEY (FAK_IN_ID) REFERENCES FAK_IN (ID);
ALTER TABLE RET_STOKA_DOST_KI ADD CONSTRAINT FK_RET_STOKA_DOST_KI_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE RET_STOKA_PROD ADD CONSTRAINT FK_RET_STOKA_PROD_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE RET_STOKA_PROD ADD CONSTRAINT FK_RET_STOKA_PROD_REFUSED_ID FOREIGN KEY (REFUSED_ID) REFERENCES TIP_REFUSED (ID);
ALTER TABLE RET_STOKA_PROD ADD CONSTRAINT FK_RET_STOKA_PROD_RESOLUTION_ID FOREIGN KEY (RESOLUTION_ID) REFERENCES TIP_RESOLUTION (ID);
ALTER TABLE RET_STOKA_PROD ADD CONSTRAINT FK_RET_STOKA_PROD_UNP_ID FOREIGN KEY (UNP_ID) REFERENCES UNP (ID) ON UPDATE CASCADE;
ALTER TABLE RET_STOKA_PROD_KI ADD CONSTRAINT FK_RET_STOKA_PROD_KI_FAK_ID FOREIGN KEY (FAK_OPR_ID) REFERENCES FAK (ID);
ALTER TABLE RET_STOKA_PROD_KI ADD CONSTRAINT FK_RET_STOKA_PROD_KI_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE RET_STOKA_PROD_KI ADD CONSTRAINT FK_RET_STOKA_PROD_KI_UNP_ID FOREIGN KEY (UNP_ID) REFERENCES UNP (ID) ON UPDATE CASCADE;
ALTER TABLE SELEKCIQ ADD CONSTRAINT FK_SELEKCIQ_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE SELEKCIQ_KALK_EL ADD CONSTRAINT FK_SELEKCIQ_KALK_EL_SELEKCIQ_ID FOREIGN KEY (SELEKCIQ_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE SELEKCIQ_KALK_EL ADD CONSTRAINT FK_SELEKCIQ_KALK_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SELEKCIQ_KASA_EL ADD CONSTRAINT FK_SELEKCIQ_KASA_EL_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE SELEKCIQ_KASA_EL ADD CONSTRAINT FK_SELEKCIQ_KASI_EL_SEL_ID FOREIGN KEY (SELEKCIQ_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE SELEKCIQ_KLI_EL ADD CONSTRAINT FK_SELEKCIQ_KLI_EL_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE;
ALTER TABLE SELEKCIQ_KLI_EL ADD CONSTRAINT FK_SELEKCIQ_KLI_EL_SELEKCIQ_ID FOREIGN KEY (SELEKCIQ_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE SELEKCIQ_SIM_EL ADD CONSTRAINT FK_SELEKCIQ_SIM_EL_SELEKCIQ_ID FOREIGN KEY (SELEKCIQ_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE SELEKCIQ_SIM_EL ADD CONSTRAINT FK_SELEKCIQ_SIM_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE SEL_FIRMI_QR ADD CONSTRAINT FK_SEL_FIRMI_QR_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID);
ALTER TABLE SEL_KASI_QR ADD CONSTRAINT FK_SEL_KASI_QR_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE SEL_KLI_QR ADD CONSTRAINT FK_SEL_KLI_QR_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE SEL_MAJOR_PROP_QR ADD CONSTRAINT FK_SEL_MAJOR_PROP_QR_MAJOR_ID FOREIGN KEY (MAJOR_PROP_ID) REFERENCES SIMPLE_PROP (ID) ON DELETE CASCADE;
ALTER TABLE SEL_MINOR_PROP_QR ADD CONSTRAINT FK_SEL_MINOR_PROP_QR_MINOR_ID FOREIGN KEY (MINOR_PROP_ID) REFERENCES SIMPLE_PROP_MINOR (ID) ON DELETE CASCADE;
ALTER TABLE SEL_OBEKT_QR ADD CONSTRAINT FK_SEL_OBEKT_QR_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE SEL_SIM_QR ADD CONSTRAINT FK_SEL_SIM_QR_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE SEL_SKLAD_QR ADD CONSTRAINT FK_SEL_SKLAD_QR_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE SERIAL_NUM ADD CONSTRAINT FK_SERIAL_NUM_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SERIAL_NUM ADD CONSTRAINT FK_SERIAL_NUM__PARTIDA_EL_ID FOREIGN KEY (PARTIDA_EL_ID) REFERENCES PARTIDA_EL (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_ADRESIRANE_ID FOREIGN KEY (ADRESIRANE_ID) REFERENCES SIMPLE_ADRESIRANE (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_DEFAUKT_RAZ_ID FOREIGN KEY (DEFAULT_RAZ_ID) REFERENCES SIMPLE_RAZ (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_GROUP_ID FOREIGN KEY (SIMPLE_GROUP_ID) REFERENCES SIMPLE_GROUP (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_GR_ZAMQNA_ID FOREIGN KEY (GR_ZAMQNA_ID) REFERENCES SELEKCIQ (ID) ON DELETE CASCADE;
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_G_TIP FOREIGN KEY (G_TIP) REFERENCES GARANCII (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_HGROUP_ID FOREIGN KEY (HGROUP_ID) REFERENCES HGROUPS (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_ME2_ID FOREIGN KEY (ME2_ID) REFERENCES ME (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_ME_ID FOREIGN KEY (ME_ID) REFERENCES ME (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_RAZ_TIP FOREIGN KEY (RAZ_TIP_ID) REFERENCES RAZ_TIP (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_SASTAV_ID FOREIGN KEY (SASTAV_ID) REFERENCES SASTAV (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_SEL_CALC_ID FOREIGN KEY (DEF_SEL_CALC) REFERENCES SELEKCIQ (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_SEL_ID FOREIGN KEY (DEF_SEL_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_VAT_REASON_ID FOREIGN KEY (VAT_REASON_ID) REFERENCES CFG_OSN_DDS (ID) ON UPDATE CASCADE;
ALTER TABLE SIMPLE_ACZIS ADD CONSTRAINT FK_SIMPLE_ACZIS_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_ADRESIRANE ADD CONSTRAINT FK_SIMPLE_ADRESIRANE_GRUPA_ID FOREIGN KEY (GRUPA_ID) REFERENCES SIMPLE_ADRESIRANE_GRUPA (ID);
ALTER TABLE SIMPLE_ADRESIRANE_NODE ADD CONSTRAINT FK_SIMPLE_ADRESIRANE_ADRES_ID FOREIGN KEY (ADRESIRANE_ID) REFERENCES SIMPLE_ADRESIRANE (ID);
ALTER TABLE SIMPLE_ADRESIRANE_NODE ADD CONSTRAINT FK_SIMPLE_ADRESIRANE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_CALC ADD CONSTRAINT FK_SIMPLE_CALC_CHILD_SIMPLE_ID FOREIGN KEY (CHILD_SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_CALC ADD CONSTRAINT FK_SIMPLE_CALC_SEL_ID FOREIGN KEY (CHILD_SEL_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE SIMPLE_CALC ADD CONSTRAINT FK_SIMPLE_CALC_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE SIMPLE_CALC_OLD ADD CONSTRAINT FK_CALC_OLD_CHILD_SIMPLE_ID FOREIGN KEY (CHILD_SIMPLE_ID) REFERENCES SIMPLE (ID) ON UPDATE CASCADE;
ALTER TABLE SIMPLE_CALC_OLD ADD CONSTRAINT FK_CALC_OLD_SEL_ID FOREIGN KEY (CHILD_SEL_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE SIMPLE_CALC_OLD ADD CONSTRAINT FK_CALC_OLD_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE SIMPLE_CALC_OLD ADD CONSTRAINT FK_SIMPLE_CALC_OLD_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE SIMPLE_CENI ADD CONSTRAINT FK_SIMPLE_CENI_KLI_GROUP_ID FOREIGN KEY (KLI_GROUP_ID) REFERENCES KLI_GROUP (ID);
ALTER TABLE SIMPLE_CENI ADD CONSTRAINT FK_SIMPLE_CENI_SIMPLE_GR_ID FOREIGN KEY (SIMPLE_GR_ID) REFERENCES SIMPLE_GROUP (ID);
ALTER TABLE SIMPLE_CENI ADD CONSTRAINT FK_SIMPLE_CENI_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_CENI ADD CONSTRAINT FK_SIMPLE_CENI_SIMPLE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE SIMPLE_EXPLANATORY ADD CONSTRAINT FK_SIMPLE_EXPLANATORY_1 FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_EXPLANATORY ADD CONSTRAINT FK_SIMPLE_EXPLANATORY_2 FOREIGN KEY (EXPL_ID) REFERENCES EXPLANATORY (ID);
ALTER TABLE SIMPLE_EXPLANATORY ADD CONSTRAINT FK_SIMPLE_EXPLANATORY_MARK_ID FOREIGN KEY (SIMPLE_MARK_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_KA_BIM ADD CONSTRAINT FK_SIMPLE_KA_BIM_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_KOD ADD CONSTRAINT FK_SIMPLE_KOD_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE SIMPLE_KOD ADD CONSTRAINT FK_SIMPLE_KOD_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE SIMPLE_MONTAGE ADD CONSTRAINT FK_SIMPLE_MONTAGE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_OBSERV ADD CONSTRAINT FK_SIMPLE_OBSERV_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_PICT ADD CONSTRAINT FK_SIMPLE_PICT_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_PROP_NODE ADD CONSTRAINT FK_SIMPLE_PROP_NODE_MAJOR_ID FOREIGN KEY (MAJOR_PROP_ID) REFERENCES SIMPLE_PROP (ID);
ALTER TABLE SIMPLE_PROP_NODE ADD CONSTRAINT FK_SIMPLE_PROP_NODE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE SIMPLE_RAZ ADD CONSTRAINT FK_SIMPLE_RAZ_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_SKLAD_KOD ADD CONSTRAINT FK_SIMPLE_SKLAD_KOD_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_SKLAD_KOD ADD CONSTRAINT FK_SIMPLE_SKLAD_KOD_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE SIMPLE_TABLE_PRICES ADD CONSTRAINT FK_SIMPLE_TABLE_PRICES_SIMPLE_I FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE SIMPLE_TABLE_PRICES ADD CONSTRAINT FK_SIM_TBL_PRICES_SEL_SIMPLE_ID FOREIGN KEY (SELECT_SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE SIMPLE_TRACKER ADD CONSTRAINT FK_SIMPLE_TRACKER_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_ZAETOST ADD CONSTRAINT FK_SIMPLE_ZAETOST_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SKLAD ADD CONSTRAINT FK_SKLAD_CL_MOVE_ID FOREIGN KEY (CL_MOVE_ID) REFERENCES CENOVA_LISTA (ID) ON DELETE SET NULL;
ALTER TABLE SKLAD ADD CONSTRAINT FK_SKLAD_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE SKLAD ADD CONSTRAINT FK_SKLAD_OWNER_ID FOREIGN KEY (OWNER_ID) REFERENCES OWNER (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE SKLAD ADD CONSTRAINT FK_SKLAD_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE SKLAD ADD CONSTRAINT FK_SKLAD_WAREHOUSE_MAP_ID FOREIGN KEY (WAREHOUSE_MAP_ID) REFERENCES WAREHOUSE_BASE_MAP (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE SKLAD_MOL ADD CONSTRAINT FK_SKLAD_MOL_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE SKLAD_MOL ADD CONSTRAINT FK_SKLAD_MOL_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE SKLAD_SELEKCIQ_NODE ADD CONSTRAINT FK_SKLAD_SELEKCIQ_NODE_ID_SELEK FOREIGN KEY (ID_SELEKCIQ) REFERENCES SELEKCIQ (ID) ON DELETE CASCADE;
ALTER TABLE SKLAD_SELEKCIQ_NODE ADD CONSTRAINT FK_SKLAD_SELEKCIQ_NODE_ID_SKLAD FOREIGN KEY (ID_SKLAD) REFERENCES SKLAD (ID);
ALTER TABLE SLEDI_KLI ADD CONSTRAINT FK_SLEDI_KLI_ATON_KLI_ID FOREIGN KEY (ATON_KLI) REFERENCES KLI (ID);
ALTER TABLE SLEDI_LICENZ ADD CONSTRAINT FK_SLEDI_LICENZ_OT_OPR_ID FOREIGN KEY (OT_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE SLEDI_SIMPLE ADD CONSTRAINT FK_SLEDI_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SLEDI_TEMPLATE_EL ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SLEDI_TEMPLATE_EL ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_S_ID FOREIGN KEY (S_ID) REFERENCES SERIAL_NUM (ID);
ALTER TABLE SLEDI_TEMPLATE_EL ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_TEMPL_ID FOREIGN KEY (TEMPLATE_ID) REFERENCES OPR_TEMPLATE (ID);
ALTER TABLE SLEDI_TEMPLATE_EL_GEN ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_GEN_DIST FOREIGN KEY (DISTRIBUTOR_KLI_ID) REFERENCES KLI (ID);
ALTER TABLE SLEDI_TEMPLATE_EL_GEN ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_GEN_SIMPLE FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SLEDI_TEMPLATE_EL_GEN ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_GEN_SN_ID FOREIGN KEY (S_ID) REFERENCES SERIAL_NUM (ID);
ALTER TABLE SLEDI_TEMPLATE_EL_GEN ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_GEN_STE_ID FOREIGN KEY (STE_ID) REFERENCES SLEDI_TEMPLATE_EL (ID);
ALTER TABLE SLEDI_TEMPLATE_EL_GEN ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_GEN_TEMPL1 FOREIGN KEY (TEMPLATE_ID) REFERENCES OPR_TEMPLATE (ID);
ALTER TABLE SLEDI_TEMPLATE_EL_GEN ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_GEN_TEMPL2 FOREIGN KEY (TEMPLATE_GEN_ID) REFERENCES OPR_TEMPLATE_GEN (ID);
ALTER TABLE SLEDI_TEMPLATE_LIZING ADD CONSTRAINT FK_SLEDI_TEMPLATE_LIZING_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE SLEDI_TEMPLATE_LIZING ADD CONSTRAINT FK_SLEDI_TEMPLATE_LIZING_S_T_ID FOREIGN KEY (SLEDI_TEMPLATE_EL_ID) REFERENCES SLEDI_TEMPLATE_EL (ID);
ALTER TABLE SLEDI_TEMPLATE_PROMO ADD CONSTRAINT FK_SLEDI_TEMPLATE_PROMO_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE SLEDI_TEMPLATE_PROMO ADD CONSTRAINT FK_SLEDI_TEMPLATE_PROMO_S_T_ID FOREIGN KEY (SLEDI_TEMPLATE_EL_ID) REFERENCES SLEDI_TEMPLATE_EL (ID);
ALTER TABLE STORE_OBJ ADD CONSTRAINT FK_STORE_OBJ_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE STORE_OBJ ADD CONSTRAINT FK_STORE_OBJ_PRICE_LIST_ID FOREIGN KEY (PRICE_LIST_ID) REFERENCES CENOVA_LISTA (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE STORE_OBJ ADD CONSTRAINT FK_STORE_OBJ_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE STORE_OTC ADD CONSTRAINT FK_STORE_OTC_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE STORE_OTC ADD CONSTRAINT FK_STORE_OTC_OTCS_ID FOREIGN KEY (OTCS_ID) REFERENCES TS_OTC_FILES (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE STORNO ADD CONSTRAINT FK_STORNO_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE STORNO ADD CONSTRAINT FK_STORNO_REASON_ID FOREIGN KEY (REASON_ID) REFERENCES STORNO_REASON (ID);
ALTER TABLE STORNO ADD CONSTRAINT FK_STORNO_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE SUMI ADD CONSTRAINT FK_SUMI_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE SYSTEM ADD CONSTRAINT FK_SYSTEM_OWNER_ID FOREIGN KEY (ACTIVE_OWNER_ID) REFERENCES OWNER (ID);
ALTER TABLE TABLE_PRICES_DISCOUNTS ADD CONSTRAINT FK_TBL_PRICES_DISC_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TABLE_PRICES_DISCOUNTS ADD CONSTRAINT FK_TBL_PRICES_DISC_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TABLE_PRICE_COEFICIENT ADD CONSTRAINT FK_TABLE_PRICE_COEF_MASTER_ID FOREIGN KEY (MASTER_SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TABLE_PRICE_COEFICIENT ADD CONSTRAINT FK_TABLE_PRICE_COEF_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TABLE_PRICE_SIMPLE_NODE ADD CONSTRAINT FK_TBL_PRICE_SIM_NODE_PRICE_ID FOREIGN KEY (PRICE_ID) REFERENCES SIMPLE_TABLE_PRICES (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TABLE_PRICE_SIMPLE_NODE ADD CONSTRAINT FK_TBL_PRICE_SIM_NODE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_KLI FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_OBEKT_FAK_ID FOREIGN KEY (OBEKT_FAK_ID) REFERENCES OBEKT (ID);
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_TASK_TIP FOREIGN KEY (TASKS_TIP_ID) REFERENCES TASKS_TIP (ID);
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_TMP_OPR_ID FOREIGN KEY (TMP_OPR_ID) REFERENCES TMP_OPR (ID);
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE TASKS_EL ADD CONSTRAINT FK_TASKS_EL_EL_GEN_ID FOREIGN KEY (EL_GEN_ID) REFERENCES SLEDI_TEMPLATE_EL_GEN (ID);
ALTER TABLE TASKS_EL ADD CONSTRAINT FK_TASKS_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE TASKS_EL ADD CONSTRAINT FK_TASKS_EL_TASKS_ID FOREIGN KEY (TASKS_ID) REFERENCES TASKS (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT FK_TBL_KA_DAN_PLACE_ID FOREIGN KEY (DAN_PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT FK_TBL_KA_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT FK_TBL_KA_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT FK_TBL_KA_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT FK_TBL_KA_OBEKT_PLACE_ID FOREIGN KEY (OBEKT_PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT FK_TBL_KA_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT FK_TBL_KA_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE TBL_KA_OPR_LOG ADD CONSTRAINT FK_TBL_KA_OPR_LOG_KA_ID FOREIGN KEY (KA_ID) REFERENCES TBL_KA (ID) ON DELETE CASCADE;
ALTER TABLE TBL_KA_OPR_LOG ADD CONSTRAINT FK_TBL_KA_OPR_LOG_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE TBL_KA_OPR_LOG ADD CONSTRAINT FK_TBL_KA_OPR_LOG_OPR_ID_PROD FOREIGN KEY (OPR_ID_PROD) REFERENCES OPR (ID);
ALTER TABLE TBL_KA_OPR_LOG ADD CONSTRAINT FK_TBL_KA_OPR_LOG_OPR_PROD_ID FOREIGN KEY (OPR_ID_PROD) REFERENCES OPR (ID);
ALTER TABLE TBL_KA_OPR_LOG ADD CONSTRAINT FK_TBL_KA_OPR_LOG_SERV_USER_ID FOREIGN KEY (SERV_USER_ID) REFERENCES "USER" (ID);
ALTER TABLE TBL_KA_OPR_NODE ADD CONSTRAINT FK_TBL_KA_OPR_NODE_KA_ID FOREIGN KEY (KA_ID) REFERENCES TBL_KA (ID) ON DELETE CASCADE;
ALTER TABLE TBL_KA_OPR_NODE ADD CONSTRAINT FK_TBL_KA_OPR_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE TBL_KA_OPR_NODE ADD CONSTRAINT FK_TBL_KA_OPR_NODE_SERV_USER_ID FOREIGN KEY (SERV_USER_ID) REFERENCES "USER" (ID);
ALTER TABLE TBL_KA_STOP_SIM_NODE ADD CONSTRAINT FK_TBL_KA_STOP_SIM_NODE_KA FOREIGN KEY (KA_ID) REFERENCES TBL_KA (ID);
ALTER TABLE TBL_KA_STOP_SIM_NODE ADD CONSTRAINT FK_TBL_KA_STOP_SIM_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE TBL_LOG ADD CONSTRAINT FK_TBL_LOG_PC FOREIGN KEY (PC_ID) REFERENCES INI (ID);
ALTER TABLE TBL_LOG ADD CONSTRAINT FK_TBL_LOG_USER FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE TEMP$PROD_FOR_ANNUL ADD CONSTRAINT FK_TEMP$PROD_FOR_ANNUL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TEMPLATE_OPER_REL ADD CONSTRAINT FK_TEMPLATE_OPER_REL_1 FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE TEMPLATE_OPER_REL ADD CONSTRAINT FK_TEMPLATE_OPER_REL_2 FOREIGN KEY (ALLOW_USER_ID) REFERENCES "USER" (ID);
ALTER TABLE TMP_MARK_EL ADD CONSTRAINT FK_TMP_MARK_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE TMP_MARK_EL ADD CONSTRAINT FK_TMP_MARK_EL_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE TMP_MARK_EL ADD CONSTRAINT FK_TMP_MARK_EL_TMP_OPR_ID FOREIGN KEY (TMP_OPR_ID) REFERENCES TMP_OPR (ID);
ALTER TABLE TMP_OMZ_SIM ADD CONSTRAINT FK_TMP_OMZ_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE TMP_OPR ADD CONSTRAINT FK_TMP_OPR_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE TMP_OPR ADD CONSTRAINT FK_TMP_OPR_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE TMP_OPR ADD CONSTRAINT FK_TMP_OPR_UNP_ID FOREIGN KEY (UNP_ID) REFERENCES UNP (ID) ON UPDATE CASCADE;
ALTER TABLE TMP_OPR_SN ADD CONSTRAINT FK_TMP_OPR_SN_OPR_ID FOREIGN KEY (TMP_OPR_ID) REFERENCES TMP_OPR (ID);
ALTER TABLE TMP_SIMPLE_SEL_PROD1 ADD CONSTRAINT FK_TMP_SIMPLE_SEL_PROD1_1 FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE TMP_SIMPLE_SEL_PROD1 ADD CONSTRAINT FK_TMP_SIMPLE_SEL_PROD1_2 FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE UNFINISHED_SALES ADD CONSTRAINT FK_UNFINISHED_SALES_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON UPDATE CASCADE;
ALTER TABLE UNP ADD CONSTRAINT FK_UNP_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE UNR_AGENT_ANALYSES ADD CONSTRAINT FK_UNR_AGENT_ANALYSES_AGENT_ID FOREIGN KEY (AGENT_ID) REFERENCES UNR_AGENT (ID);
ALTER TABLE UNR_AGENT_ANALYSES ADD CONSTRAINT FK_UNR_AGENT_ANALYSES_ANLS_ID FOREIGN KEY (ANALYSES_ID) REFERENCES UNR_ANALYSES (ID) ON DELETE CASCADE;
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT FK_UNR_ANALYSES_AGENT_ID FOREIGN KEY (AGENT_ID) REFERENCES UNR_AGENT (ID);
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT FK_UNR_ANALYSES_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES UNR_GROUP (ID);
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT FK_UNR_ANALYSES_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT FK_UNR_ANALYSES_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT FK_UNR_ANALYSES_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT FK_UNR_ANALYSES_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT FK_UNR_ANALYSES_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE UNR_GROUP_SIMPLE ADD CONSTRAINT FK_UNR_GROUP_SIMPLE_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES UNR_GROUP (ID);
ALTER TABLE UNR_GROUP_SIMPLE ADD CONSTRAINT FK_UNR_GROUP_SIMPLE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE UNR_KLI_AGENT ADD CONSTRAINT FK_UNR_KLI_AGENT_AGENT_ID FOREIGN KEY (AGENT_ID) REFERENCES UNR_AGENT (ID);
ALTER TABLE UNR_KLI_AGENT ADD CONSTRAINT FK_UNR_KLI_AGENT_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE UNR_KLI_AGENT_2 ADD CONSTRAINT FK_UNR_KLI_AGENT_AGENT_2_ID FOREIGN KEY (AGENT_ID) REFERENCES UNR_AGENT (ID);
ALTER TABLE UNR_KLI_AGENT_2 ADD CONSTRAINT FK_UNR_KLI_AGENT_KLI_2_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE UNR_KOEF_NODE ADD CONSTRAINT FK_UNR_KOEF_NODE_AGENT_ID FOREIGN KEY (AGENT_ID) REFERENCES UNR_AGENT (ID);
ALTER TABLE UNR_KOEF_NODE ADD CONSTRAINT FK_UNR_KOEF_NODE_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES UNR_GROUP (ID);
ALTER TABLE "USER" ADD CONSTRAINT FK_USER_DEF_KASA_ID FOREIGN KEY (DEF_KASA_ID) REFERENCES KASA (ID);
ALTER TABLE "USER" ADD CONSTRAINT FK_USER_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE "USER" ADD CONSTRAINT FK_USER_USER_ID FOREIGN KEY (USER_RIGHTS_ID) REFERENCES "USER" (ID);
ALTER TABLE "USER" ADD CONSTRAINT FK_USER_USER_SCHEMA_ID FOREIGN KEY (USER_SCHEMA_ID) REFERENCES USER_SCHEMAS (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE USER_KASA_NODE ADD CONSTRAINT FK_USER_KASA_NODE_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE USER_KASA_NODE ADD CONSTRAINT FK_USER_KASA_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE;
ALTER TABLE USER_OBEKT_NODE ADD CONSTRAINT FK_USER_OBEKT_NODE_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE USER_ROLES_EL ADD CONSTRAINT FK_USER_ROLES_EL_ROLE_ID FOREIGN KEY (ROLE_ID) REFERENCES ONLINE_ROLES (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE USER_ROLES_EL ADD CONSTRAINT FK_USER_ROLES_EL_SCHEMA_ID FOREIGN KEY (SCHEMA_ID) REFERENCES USER_SCHEMAS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE USER_SEL_NODE ADD CONSTRAINT FK_USER_SEL_NODE_SEL_ID FOREIGN KEY (SEL_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE USER_SEL_NODE ADD CONSTRAINT FK_USER_SEL_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE USER_SKLAD_NAL_NODE ADD CONSTRAINT FK_USER_SKLAD_NAL_NODE_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE USER_SKLAD_NAL_NODE ADD CONSTRAINT FK_USER_SKLAD_NAL_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE USER_SKLAD_NODE ADD CONSTRAINT FK_USER_SKLAD_NODE_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE USER_SKLAD_NODE ADD CONSTRAINT FK_USER_SKLAD_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE;
ALTER TABLE VISIT ADD CONSTRAINT FK_VISIT_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE VISIT_EL ADD CONSTRAINT FK_VISIT_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE VISIT_EL ADD CONSTRAINT FK_VISIT_EL_VISIT_OPR_ID FOREIGN KEY (VISIT_OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE VISIT_EL ADD CONSTRAINT FK_VISIT_EL_VISIT_TYPE_ID FOREIGN KEY (VISIT_TYPE_ID) REFERENCES VISIT_TYPE (ID) ON DELETE CASCADE;
ALTER TABLE WAREHOUSE_BASE_MAP ADD CONSTRAINT FK_WAREHOUSE_BASE_MAP_PARENT_ID FOREIGN KEY (PARENT_ID) REFERENCES WAREHOUSE_BASE_MAP (ID) ON UPDATE CASCADE;
ALTER TABLE WUERTH_SIMPLE ADD CONSTRAINT FK_WUERTH_SIMPLE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA ADD CONSTRAINT FK_ZAIAVKA_DOSTAVKA_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA ADD CONSTRAINT FK_ZAIAVKA_DOSTAVKA_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID)
  USING INDEX FK_ZAIAVKA_DOSTAVKA_OPR;
ALTER TABLE ZAIAVKA_DOSTAVKA ADD CONSTRAINT FK_ZAIAVKA_DOSTAVKA_RAZ_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA ADD CONSTRAINT FK_ZAIAVKA_DOSTAVKA_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA ADD CONSTRAINT FK_ZAIAVKA_DOSTAVKA_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA_NODE ADD CONSTRAINT FK_Z_D_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA_NODE ADD CONSTRAINT FK_Z_D_NODE_OPR_ID_OB FOREIGN KEY (OPR_ID_OB) REFERENCES OPR (ID);
ALTER TABLE ZD_DOST_MOVE_NODE ADD CONSTRAINT FK_ZD_DOST_MOVE_NODE_OPR_ID FOREIGN KEY (OPR_ID_DOST_MOVE) REFERENCES OPR (ID);
ALTER TABLE ZD_DOST_MOVE_NODE ADD CONSTRAINT FK_ZD_DOST_MOVE_NODE_OPR_ID_ZD FOREIGN KEY (OPR_ID_ZD) REFERENCES OPR (ID);
ALTER TABLE ZD_DOST_MOVE_NODE ADD CONSTRAINT FK_ZD_DOST_MOVE_NODE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE ZD_POR_NODE ADD CONSTRAINT FK_ZD_POR_NODE_OPR_ID_ZD FOREIGN KEY (OPR_ID_ZD) REFERENCES OPR (ID);
ALTER TABLE ZD_POR_NODE ADD CONSTRAINT FK_ZD_POR_NODE_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX IDX_BARCODE_BARCODE ON BARCODE (BARCODE);
CREATE DESCENDING INDEX BONUS_CENA_TOCHKI_DTOT_DTDO ON BONUS_CENA_TOCHKI (OTDT, DODT);
CREATE INDEX CENOVA_LISTA_EL_IDX1 ON CENOVA_LISTA_EL (SIMPLE_ID);
CREATE INDEX IDX_CFG_LOG_1 ON CFG_LOG (TABLE_CODE);
CREATE DESCENDING INDEX IDX_CFG_LOG_2 ON CFG_LOG (DATETIME);
CREATE INDEX IDX_COURSES_1 ON COURSES (COURSE_DATE);
CREATE INDEX DOCUMENTS_OPR_ID ON DOCUMENTS (RECORD_ID);
CREATE INDEX IDX_FAK_KI_NUMBER_NUMBER ON FAK_KI_NUMBER (NUMBER);
CREATE INDEX IDX_FIRMI_1 ON FIRMI (BULSTAT);
CREATE INDEX IDX_IN_PAY_TIP ON "IN" (PAY_TIP);
CREATE INDEX IDX_KLI_CODE ON KLI (CODE);
CREATE INDEX IDX_KLI_DOST ON KLI (DOSTAV);
CREATE INDEX IDX_KLI_KLI ON KLI (KLIENT);
CREATE INDEX IDX_KLI_LIST_ID ON KLI (LIST_ID);
CREATE INDEX IDX_KLI_AGENT_CODE ON KLI_AGENTS (CODE);
CREATE DESCENDING INDEX IDX_LOG_CENI_DDS_1 ON LOG_CENI_DDS (DATETIME);
CREATE INDEX IDX_LOG_CENI_DDS_2 ON LOG_CENI_DDS (TIP_DDS);
CREATE INDEX METRO_ARTICLES_IDX_SUBSYS_ID ON METRO_ARTICLES (SUB_SYS_ID);
CREATE INDEX IDX_OFFERS_2 ON OFFERS COMPUTED BY (iif(status = 1, 0, 1));
CREATE INDEX IDX_OPR_OPR_DATE ON OPR (OPR_DATE);
CREATE DESCENDING INDEX IDX_OPR_OPR_DATE_DESC ON OPR (OPR_DATE);
CREATE INDEX OPR_DATETIME ON OPR (DATETIME);
CREATE INDEX OPR_SUMA ON OPR (SUMA);
CREATE INDEX IDX_ORDER_ACTIONS_1 ON ORDER_ACTIONS (DT);
CREATE INDEX IDX_OUT_CODE ON OUT (CODE);
CREATE INDEX IDX_OUT_PAY_TIP ON OUT (PAY_TIP);
CREATE INDEX IDX_PARI_FAK_NODE_NODE_ID ON PARI_FAK_NODE (NODE_ID);
CREATE INDEX IDX_PARI_FAK_NODE_SUMA ON PARI_FAK_NODE (SUMA);
CREATE DESCENDING INDEX IDX_PARTIDA_NAL_IN_EL_ID ON PARTIDA_NAL COMPUTED BY (IIF(KOL > 0.00,IN_EL_ID,NULL));
CREATE INDEX PARTIDA_NAL_KOL ON PARTIDA_NAL (KOL);
CREATE INDEX IDX_PAYMENT_1 ON PAYMENT (NUMBER);
CREATE INDEX PN_TMP_SIMPLE_ID ON PN_TMP (PN_SIMPLE_ID);
CREATE INDEX IDX_POR_TAG ON POR (TAG);
CREATE INDEX IDX_POR_ZA_DATA ON POR (ZA_DATA);
CREATE INDEX POR_STATUS ON POR (STATUS);
CREATE INDEX SEL_OBEKT_QR_SEL_ID ON SEL_OBEKT_QR (SEL_ID);
CREATE INDEX IDX_SIMPLE_CODE ON SIMPLE (CODE);
CREATE INDEX IDX_SLEDI_KLI_1 ON SLEDI_KLI (SLEDI_KLI);
CREATE INDEX TBL_LOG_DT ON TBL_LOG (DATETIME);
CREATE INDEX TBL_LOG_TBL ON TBL_LOG (TABLE_NAME);
CREATE INDEX IDX_NUMBER_NUMBER ON TEMP$PROD_TO_FAK (NUMBER);
CREATE INDEX TEMP$SLEDI_DATA_IDX1 ON TEMP$SLEDI_DATA (IMEI);
CREATE INDEX IDX_TMP_ELTRADE_IMPORT_1 ON TMP_ELTRADE_IMPORT (E_PRODUCT_ID);
CREATE INDEX IDX_TMP_NAL_SIMPLE_ID ON TMP_NAL (SIMPLE_ID);
CREATE INDEX TMP_NAL_SKLAD_ID ON TMP_NAL (SKLAD_ID);
CREATE INDEX IDX_TMP_PARTIDA_ID ON TMP_PARTIDA_RZV_KOL (PARTIDA_ID);
CREATE INDEX IDX_TMP_REPLEACE_SIMPLE ON TMP_REPLEACE_SIMPLE (OPR_ID);
CREATE INDEX IDX_TMP_SEL_1 ON TMP_SEL_1 (ID);
CREATE INDEX IDX_TMP_SEL_2 ON TMP_SEL_2 (ID);
CREATE INDEX IDX_TMP_SEL_3 ON TMP_SEL_3 (ID);
CREATE INDEX IDX_SIMPLE_RECLALC_SIMPLE_ID ON TMP_SIMPLE_RECALC (SIMPLE_ID);
CREATE INDEX FK_UNFINISHED_SALES_OPR_ID ON UNFINISHED_SALES (OPR_ID);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: AMBALAJ_BI */
CREATE TRIGGER AMBALAJ_BI FOR AMBALAJ
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_AMBALAJ_ID,1);
END
^


/* Trigger: AMBALAJ_HISTORY_EDIT_BI */
CREATE TRIGGER AMBALAJ_HISTORY_EDIT_BI FOR AMBALAJ_HISTORY_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN   IF (NEW.ID IS NULL) THEN     NEW.ID = GEN_ID(GEN_AMBALAJ_HISTORY_EDIT_ID,1); END
^


/* Trigger: ANALYSES_BI */
CREATE TRIGGER ANALYSES_BI FOR ANALYSES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_ANALYSES_ID, 1); 
END
^


/* Trigger: BARCODE_BI */
CREATE TRIGGER BARCODE_BI FOR BARCODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_BARCODE_ID,1);
END
^


/* Trigger: BARCODE_LOG_AD103 */
CREATE TRIGGER BARCODE_LOG_AD103 FOR BARCODE
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'SIMPLE_ID', 'D', CAST(OLD."SIMPLE_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'BARCODE', 'D', CAST(OLD."BARCODE" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'KOL', 'D', CAST(OLD."KOL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null); END
^


/* Trigger: BARCODE_LOG_AI103 */
CREATE TRIGGER BARCODE_LOG_AI103 FOR BARCODE
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('BARCODE', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', null, 'SIMPLE_ID', 'I', null, CAST(NEW."SIMPLE_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', null, 'BARCODE', 'I', null, CAST(NEW."BARCODE" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', null, 'KOL', 'I', null, CAST(NEW."KOL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300)); END
^


/* Trigger: BARCODE_LOG_AU103 */
CREATE TRIGGER BARCODE_LOG_AU103 FOR BARCODE
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'SIMPLE_ID', 'U', CAST(OLD."SIMPLE_ID" AS DOM_CHAR_300), CAST(NEW.SIMPLE_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'BARCODE', 'U', CAST(OLD."BARCODE" AS DOM_CHAR_300), CAST(NEW.BARCODE AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'KOL', 'U', CAST(OLD."KOL" AS DOM_CHAR_300), CAST(NEW.KOL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300)); END
^


/* Trigger: BH_OTSTAPKI_BI */
CREATE TRIGGER BH_OTSTAPKI_BI FOR BH_OTSTAPKI
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_bh_otstapki_id,1); 
end
^


/* Trigger: BH_PROD_POR_BI */
CREATE TRIGGER BH_PROD_POR_BI FOR BH_PROD_POR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_BH_PROD_POR_ID,1); 
END
^


/* Trigger: BONUS_CONFIG_BI */
CREATE TRIGGER BONUS_CONFIG_BI FOR BONUS_CONFIG
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_bonus_config_id,1); 
end
^


/* Trigger: BONUS_CONFIG_SKLAD_BI */
CREATE TRIGGER BONUS_CONFIG_SKLAD_BI FOR BONUS_CONFIG_SKLAD
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_bonus_config_sklad_id,1); 
end
^


/* Trigger: BONUS_KLI_USED_BI */
CREATE TRIGGER BONUS_KLI_USED_BI FOR BONUS_KLI_USED
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_BONUS_KLI_USED_ID,1); 
 
  IF (NEW.DT IS NULL) THEN 
    NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: BROENE_EL_DETAILS_BI */
CREATE TRIGGER BROENE_EL_DETAILS_BI FOR BROENE_EL_DETAILS
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.ID is null) then 
    new.ID = gen_id(GEN_BROENE_EL_DETAILS_ID,1); 
end
^


/* Trigger: BROENE_EL_RAZ_NODE_BI */
CREATE TRIGGER BROENE_EL_RAZ_NODE_BI FOR BROENE_EL_RAZ_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_BROENE_EL_RAZ_NODE_ID,1); 
END
^


/* Trigger: CENOVA_LISTA_BI */
CREATE TRIGGER CENOVA_LISTA_BI FOR CENOVA_LISTA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_ID,1); 
 
  if (new.IS_PROMOTIONAL is NULL) then 
    new.IS_PROMOTIONAL = 0; 
END
^


/* Trigger: CENOVA_LISTA_EDIT_BI */
CREATE TRIGGER CENOVA_LISTA_EDIT_BI FOR CENOVA_LISTA_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_EDIT_ID,1); 
 
  IF (NEW.IS_PROMOTIONAL IS NULL) THEN 
    NEW.IS_PROMOTIONAL = 0; 
END
^


/* Trigger: CENOVA_LISTA_EL_BI */
CREATE TRIGGER CENOVA_LISTA_EL_BI FOR CENOVA_LISTA_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_CENOVA_LISTA_EL_ID,1); 
 
    IF (NEW.FLAG_LOCK IS NULL) THEN 
        NEW.FLAG_LOCK = 0; 
 
    IF (NEW.DT_ADD IS NULL) THEN 
        NEW.DT_ADD = CURRENT_TIMESTAMP; 
END
^


/* Trigger: CENOVA_LISTA_EL_EDIT_BI */
CREATE TRIGGER CENOVA_LISTA_EL_EDIT_BI FOR CENOVA_LISTA_EL_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_EL_EDIT_ID,1);
END
^


/* Trigger: CENOVA_LISTA_HISTORY_BI */
CREATE TRIGGER CENOVA_LISTA_HISTORY_BI FOR CENOVA_LISTA_HISTORY
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_HISTORY_ID,1);
END
^


/* Trigger: CENOVA_LISTA_KLI_BI */
CREATE TRIGGER CENOVA_LISTA_KLI_BI FOR CENOVA_LISTA_KLI
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_KLI_ID,1);
END
^


/* Trigger: CENOVA_LISTA_KLI_EDIT_BI */
CREATE TRIGGER CENOVA_LISTA_KLI_EDIT_BI FOR CENOVA_LISTA_KLI_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_KLI_EDIT_ID,1);
END
^


/* Trigger: CENOVA_LISTA_PROTOKOL_BI */
CREATE TRIGGER CENOVA_LISTA_PROTOKOL_BI FOR CENOVA_LISTA_PROTOKOL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_PROTOKOL_ID,1);

  NEW.protokol = NEW.ID;
END
^


/* Trigger: CENOVA_LISTA_SKLAD_BI */
CREATE TRIGGER CENOVA_LISTA_SKLAD_BI FOR CENOVA_LISTA_SKLAD
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_SKLAD_ID,1);
END
^


/* Trigger: CENOVA_LISTA_SKLAD_EDIT_BI */
CREATE TRIGGER CENOVA_LISTA_SKLAD_EDIT_BI FOR CENOVA_LISTA_SKLAD_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_SKLAD_EDIT_ID,1);
END
^


/* Trigger: CFG_FAK_ACCOUNTING_BI */
CREATE TRIGGER CFG_FAK_ACCOUNTING_BI FOR CFG_FAK_ACCOUNTING
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CFG_FAK_ACCOUNTING_ID,1); 
END
^


/* Trigger: CFG_INFO_BI */
CREATE TRIGGER CFG_INFO_BI FOR CFG_INFO
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.ID is null) then 
    new.ID = gen_id(GEN_CFG_INFO_ID,1); 
end
^


/* Trigger: CFG_KASA_TEMPLATE_BI */
CREATE TRIGGER CFG_KASA_TEMPLATE_BI FOR CFG_KASA_TEMPLATE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN BEGIN 
    NEW.ID = GEN_ID(GEN_CFG_KASA_TEMPLATE_ID,1); 
    NEW.ERASED = 0; 
   END 
END
^


/* Trigger: CFG_KASA_TEMPLATE_EL_BI */
CREATE TRIGGER CFG_KASA_TEMPLATE_EL_BI FOR CFG_KASA_TEMPLATE_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CFG_KASA_TEMPLATE_EL_ID,1); 
END
^


/* Trigger: CFG_LOG_AI */
CREATE TRIGGER CFG_LOG_AI FOR CFG_LOG
ACTIVE AFTER INSERT POSITION 0
AS
begin
  POST_EVENT 'CFG_LOG_REFRESH';
end
^


/* Trigger: CFG_LOG_AI0 */
CREATE TRIGGER CFG_LOG_AI0 FOR CFG_LOG
ACTIVE AFTER INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.TABLE_CODE = 3) THEN BEGIN 
    UPDATE KLI SET KLI.CFG_LOG_ID = NEW.ID WHERE KLI.ID = NEW.OBJ_ID; 
  END 
END
^


/* Trigger: CFG_LOG_BI */
CREATE TRIGGER CFG_LOG_BI FOR CFG_LOG
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CFG_LOG_ID,1);
  IF (NEW.DATETIME IS NULL) THEN
    NEW.DATETIME = current_timestamp;
END
^


/* Trigger: CFG_OSN_DDS_BI */
CREATE TRIGGER CFG_OSN_DDS_BI FOR CFG_OSN_DDS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CFG_OSN_DDS_ID,1); 
END
^


/* Trigger: CFG_PAYMENTS_KLI_BI */
CREATE TRIGGER CFG_PAYMENTS_KLI_BI FOR CFG_PAYMENTS_KLI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CFG_PAYMENTS_KLI_ID,1); 
END
^


/* Trigger: CFG_PAYMENTS_LOG_AD103 */
CREATE TRIGGER CFG_PAYMENTS_LOG_AD103 FOR CFG_PAYMENTS
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'FISK', 'D', CAST(OLD."FISK" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'ATRIB', 'D', CAST(OLD."ATRIB" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'KASA_ID', 'D', CAST(OLD."KASA_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'CODE', 'D', CAST(OLD."CODE" AS DOM_CHAR_300), null); END
^


/* Trigger: CFG_PAYMENTS_LOG_AI103 */
CREATE TRIGGER CFG_PAYMENTS_LOG_AI103 FOR CFG_PAYMENTS
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', null, 'FISK', 'I', null, CAST(NEW."FISK" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', null, 'ATRIB', 'I', null, CAST(NEW."ATRIB" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', null, 'KASA_ID', 'I', null, CAST(NEW."KASA_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', null, 'CODE', 'I', null, CAST(NEW."CODE" AS DOM_CHAR_300)); END
^


/* Trigger: CFG_PAYMENTS_LOG_AU103 */
CREATE TRIGGER CFG_PAYMENTS_LOG_AU103 FOR CFG_PAYMENTS
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'FISK', 'U', CAST(OLD."FISK" AS DOM_CHAR_300), CAST(NEW.FISK AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'ATRIB', 'U', CAST(OLD."ATRIB" AS DOM_CHAR_300), CAST(NEW.ATRIB AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'KASA_ID', 'U', CAST(OLD."KASA_ID" AS DOM_CHAR_300), CAST(NEW.KASA_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'CODE', 'U', CAST(OLD."CODE" AS DOM_CHAR_300), CAST(NEW.CODE AS DOM_CHAR_300)); END
^


/* Trigger: CFG_VEZNI_BI */
CREATE TRIGGER CFG_VEZNI_BI FOR CFG_VEZNI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CFG_VEZNI_ID,1); 
END
^


/* Trigger: CLAIM_EL_BI */
CREATE TRIGGER CLAIM_EL_BI FOR CLAIM_EL
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_claim_el_id,1); 
end
^


/* Trigger: CLOTH_SIZE_BI */
CREATE TRIGGER CLOTH_SIZE_BI FOR CLOTH_SIZE
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_cloth_size_id,1); 
end
^


/* Trigger: CN_DELIVERY_ELEMENTS_BI */
CREATE TRIGGER CN_DELIVERY_ELEMENTS_BI FOR CN_DELIVERY_ELEMENTS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CN_DELIVERY_ELEMENTS_ID,1); 
END
^


/* Trigger: COMMENTS_BI */
CREATE TRIGGER COMMENTS_BI FOR COMMENTS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENTS_ID,1); 
  new.DATE_MODIFIED = CURRENT_TIMESTAMP; 
END
^


/* Trigger: COMMENTS_BU0 */
CREATE TRIGGER COMMENTS_BU0 FOR COMMENTS
ACTIVE BEFORE UPDATE POSITION 0
AS 
begin 
  /* Trigger text */ 
  new.DATE_MODIFIED = CURRENT_TIMESTAMP; 
end
^


/* Trigger: COMMENT_BI */
CREATE TRIGGER COMMENT_BI FOR COMMENT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_COMMENT_ID,1);
END
^


/* Trigger: COMMENT_EINVOICE_NODE_BI */
CREATE TRIGGER COMMENT_EINVOICE_NODE_BI FOR COMMENT_EINVOICE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENT_EINVOICE_NODE_ID,1); 
END
^


/* Trigger: COMMENT_FIRMI_NODE_AD0 */
CREATE TRIGGER COMMENT_FIRMI_NODE_AD0 FOR COMMENT_FIRMI_NODE
ACTIVE AFTER DELETE POSITION 0
AS 
begin 
  DELETE FROM COMMENTS WHERE COMMENTS.ID = OLD.COMMENT_ID; 
end
^


/* Trigger: COMMENT_FIRMI_NODE_BI */
CREATE TRIGGER COMMENT_FIRMI_NODE_BI FOR COMMENT_FIRMI_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENT_FIRMI_NODE_ID,1); 
END
^


/* Trigger: COMMENT_KLI_NODE_AD0 */
CREATE TRIGGER COMMENT_KLI_NODE_AD0 FOR COMMENT_KLI_NODE
ACTIVE AFTER DELETE POSITION 0
AS 
begin 
  DELETE FROM COMMENTS WHERE COMMENTS.ID = OLD.COMMENT_ID; 
end
^


/* Trigger: COMMENT_KLI_NODE_BI */
CREATE TRIGGER COMMENT_KLI_NODE_BI FOR COMMENT_KLI_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENT_KLI_NODE_ID,1); 
END
^


/* Trigger: COMMENT_OPR_NODE_AD0 */
CREATE TRIGGER COMMENT_OPR_NODE_AD0 FOR COMMENT_OPR_NODE
ACTIVE AFTER DELETE POSITION 0
AS 
begin 
  DELETE FROM COMMENTS WHERE COMMENTS.ID = OLD.COMMENT_ID; 
end
^


/* Trigger: COMMENT_OPR_NODE_BI */
CREATE TRIGGER COMMENT_OPR_NODE_BI FOR COMMENT_OPR_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENT_OPR_NODE_ID,1); 
END
^


/* Trigger: COMMENT_OPR_TEMPLATE_NODE_BI */
CREATE TRIGGER COMMENT_OPR_TEMPLATE_NODE_BI FOR COMMENT_OPR_TEMPLATE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENT_OPR_TMPLT_NODE_ID,1); 
END
^


/* Trigger: COMMENT_SIMPLE_NODE_AD0 */
CREATE TRIGGER COMMENT_SIMPLE_NODE_AD0 FOR COMMENT_SIMPLE_NODE
ACTIVE AFTER DELETE POSITION 0
AS 
begin 
  DELETE FROM COMMENTS WHERE COMMENTS.ID = OLD.COMMENT_ID; 
end
^


/* Trigger: COMMENT_SIMPLE_NODE_BI */
CREATE TRIGGER COMMENT_SIMPLE_NODE_BI FOR COMMENT_SIMPLE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENT_SIMPLE_NODE_ID,1); 
END
^


/* Trigger: COMMENT_TASKS_NODE_AD0 */
CREATE TRIGGER COMMENT_TASKS_NODE_AD0 FOR COMMENT_TASKS_NODE
ACTIVE AFTER DELETE POSITION 0
AS 
begin 
  DELETE FROM COMMENTS WHERE COMMENTS.ID = OLD.COMMENT_ID; 
end
^


/* Trigger: COMMENT_TASKS_NODE_BI */
CREATE TRIGGER COMMENT_TASKS_NODE_BI FOR COMMENT_TASKS_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENT_TASKS_NODE_ID,1); 
END
^


/* Trigger: COUNTIES_BI */
CREATE TRIGGER COUNTIES_BI FOR COUNTIES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COUNTIES_ID,1); 
END
^


/* Trigger: COUNTRIES_BI */
CREATE TRIGGER COUNTRIES_BI FOR COUNTRIES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COUNTRIES_ID,1); 
END
^


/* Trigger: CRM_ATON_PRODUKT_BI */
CREATE TRIGGER CRM_ATON_PRODUKT_BI FOR CRM_ATON_PRODUKT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CRM_ATON_PRODUKT_ID,1); 
END
^


/* Trigger: CRM_INFO_LICENZIA_BI */
CREATE TRIGGER CRM_INFO_LICENZIA_BI FOR CRM_INFO_LICENZIA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_CRM_INFO_LICENZIA_ID, 1);

    NEW.STATUS = 0;
END
^


/* Trigger: DEF_RAZ_SIMPLE_BI */
CREATE TRIGGER DEF_RAZ_SIMPLE_BI FOR DEF_RAZ_SIMPLE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DEF_RAZ_SIMPLE_ID,1); 
END
^


/* Trigger: DELIVERY_CURRENCY_BI */
CREATE TRIGGER DELIVERY_CURRENCY_BI FOR DELIVERY_CURRENCY
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DELIVERY_CURRENCY_ID,1); 
END
^


/* Trigger: DOCUMENTS_TIP_BI */
CREATE TRIGGER DOCUMENTS_TIP_BI FOR DOCUMENTS_TIP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DOCUMENTS_TIP_ID,1); 
END
^


/* Trigger: DOCUMENTS_TIP_CODE_BI */
CREATE TRIGGER DOCUMENTS_TIP_CODE_BI FOR DOCUMENTS_TIP_CODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DOCUMENTS_TIP_CODE_ID,1); 
END
^


/* Trigger: DOC_BI */
CREATE TRIGGER DOC_BI FOR DOC
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DOC_ID,1); 
END
^


/* Trigger: DOST_CENI_BI */
CREATE TRIGGER DOST_CENI_BI FOR DOST_CENI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DOST_CENI_ID,1); 
END
^


/* Trigger: DOST_IMPORT_KLI_MAP_BI */
CREATE TRIGGER DOST_IMPORT_KLI_MAP_BI FOR DOST_IMPORT_KLI_MAP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DOST_IMPORT_KLI_MAP_ID,1); 
END
^


/* Trigger: DOST_IMPORT_RAZF_MAP_BI */
CREATE TRIGGER DOST_IMPORT_RAZF_MAP_BI FOR DOST_IMPORT_RAZF_MAP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DOST_IMPORT_RAZF_MAP_ID,1); 
END
^


/* Trigger: DOST_IMPORT_SIMPLE_MAP_BI */
CREATE TRIGGER DOST_IMPORT_SIMPLE_MAP_BI FOR DOST_IMPORT_SIMPLE_MAP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DOST_IMPORT_SIMPLE_MAP_ID,1); 
END
^


/* Trigger: DVSK_EL_BI */
CREATE TRIGGER DVSK_EL_BI FOR DVSK_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_DVSK_EL_ID,1);
END
^


/* Trigger: DVSK_OPR_BI */
CREATE TRIGGER DVSK_OPR_BI FOR DVSK_OPR
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_DVSK_OPR_ID,1);
END
^


/* Trigger: EGROUPS_BI */
CREATE TRIGGER EGROUPS_BI FOR EGROUPS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_EGROUPS_ID,1); 
END
^


/* Trigger: ESIMPLE_BI */
CREATE TRIGGER ESIMPLE_BI FOR ESIMPLE
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_esimple_id,1); 
end
^


/* Trigger: ETIKETI_BI */
CREATE TRIGGER ETIKETI_BI FOR ETIKETI
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_ETIKETI_ID,1);
END
^


/* Trigger: EXPLANATORY_BI */
CREATE TRIGGER EXPLANATORY_BI FOR EXPLANATORY
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_EXPLANATORY_ID,1); 
END
^


/* Trigger: EXPORTED_OPERATIONS_BI */
CREATE TRIGGER EXPORTED_OPERATIONS_BI FOR EXPORTED_OPERATIONS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_EXPORTED_OPERATIONS_ID,1); 
 
  if (new.SYS_DATE is null) then 
    NEW.SYS_DATE = CURRENT_TIMESTAMP; 
END
^


/* Trigger: EXPORTS_BI */
CREATE TRIGGER EXPORTS_BI FOR EXPORTS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_EXPORTS_ID,1); 
 
  IF (NEW.EXPORT_DATE IS NULL) THEN 
    NEW.EXPORT_DATE = CURRENT_TIMESTAMP; 
END
^


/* Trigger: EXPORT_OPR_BI */
CREATE TRIGGER EXPORT_OPR_BI FOR EXPORT_OPR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_EXPORT_OPR_ID,1); 
END
^


/* Trigger: EXPORT_SYNC_BI */
CREATE TRIGGER EXPORT_SYNC_BI FOR EXPORT_SYNC
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_EXPORT_SYNC_ID,1); 
END
^


/* Trigger: EXPORT_VENDORS_BI */
CREATE TRIGGER EXPORT_VENDORS_BI FOR EXPORT_VENDORS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_EXPORT_VENDORS_ID,1); 
END
^


/* Trigger: FAKTURA_OSNOVANIE_BI */
CREATE TRIGGER FAKTURA_OSNOVANIE_BI FOR FAKTURA_OSNOVANIE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_FAKTURA_OSNOVANIE_ID,1); 
END
^


/* Trigger: FAK_BI */
CREATE TRIGGER FAK_BI FOR FAK
ACTIVE BEFORE INSERT POSITION 0
AS 
DECLARE VARIABLE L_DOWNLOAD_DATE TIMESTAMP;
BEGIN 
    IF (NEW.TIP = 5) THEN BEGIN 
        IF (EXISTS ( 
            SELECT 
                FAK.ID 
            FROM 
                FAK INNER JOIN OPR ON OPR.ID = FAK.OPR_ID+0 
            WHERE 
                OPR.OPR_DATE > '31.12.2006' 
                AND FAK.NUMBER = NEW.NUMBER 
                AND FAK.TIP = 5 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = FAK.OPR_ID 
                ))) 
        THEN 
            EXCEPTION EXC_DOUBLE_FAK_NUM; 
    END 
    ELSE BEGIN 
        IF (NEW.NUMBER <> '') THEN 
          IF (EXISTS ( 
              SELECT 
                  FAK.ID 
              FROM 
                  FAK INNER JOIN OPR ON OPR.ID = FAK.OPR_ID+0 
              WHERE 
                  OPR.OPR_DATE > '31.12.2006' 
                  AND FAK.NUMBER = NEW.NUMBER 
                  AND FAK.OWNER_ID = NEW.OWNER_ID 
                  AND NOT (FAK.TIP = 5) 
                  AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = FAK.OPR_ID 
                  ))) 
          THEN 
              EXCEPTION EXC_DOUBLE_FAK_NUM; 
    END 
 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_FAK_ID,1); 
 
    IF (NEW.DATE_SDELKA IS NULL) THEN 
        NEW.DATE_SDELKA  = CURRENT_DATE; 
 
    IF (NEW.TIP2 IS NULL) THEN 
        NEW.TIP2 = 0; 
 
    SELECT KLI.FIRMA_ID 
    FROM 
        KLI INNER JOIN OPR ON OPR.KLI_ID = KLI.ID 
    WHERE 
        OPR.ID = NEW.OPR_ID 
    INTO 
        NEW.FIRMA_ID; 

    SELECT
      OPR.DATETIME
    FROM
      OPR
    WHERE
      OPR.ID = NEW.OPR_ID
    INTO
      :L_DOWNLOAD_DATE;

    if (NEW.PAY_TYPE = 1) then
      NEW.DOWNLOAD_DATE = :L_DOWNLOAD_DATE;
END
^


/* Trigger: FAK_BU0 */
CREATE TRIGGER FAK_BU0 FOR FAK
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
  IF (NEW.FIRMA_ID IS NOT NULL) THEN BEGIN 
    SELECT 
      FIRMI.E_FAK 
    FROM 
      FIRMI 
    WHERE 
      FIRMI.ID = NEW.FIRMA_ID 
    INTO NEW.EFAK; 
  END 
 
  IF (NEW.DOWNLOAD_DATE IS NOT NULL) THEN BEGIN 
    UPDATE OPR SET 
      OPR.IS_LOCK = 1 
    WHERE 
      OPR.ID = NEW.OPR_ID; 
  END 
END
^


/* Trigger: FAK_EL_BI */
CREATE TRIGGER FAK_EL_BI FOR FAK_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_FAK_EL_ID,1);
END
^


/* Trigger: FAK_IN_SUMI_BI */
CREATE TRIGGER FAK_IN_SUMI_BI FOR FAK_IN_SUMI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_FAK_IN_SUMI_ID,1); 
END
^


/* Trigger: FAK_KI_NUMBER_BI */
CREATE TRIGGER FAK_KI_NUMBER_BI FOR FAK_KI_NUMBER
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_FAK_KI_NUMBER_ID,1); 
END
^


/* Trigger: FAK_PROD_BI */
CREATE TRIGGER FAK_PROD_BI FOR FAK_PROD
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_FAK_PROD_ID,1);
END
^


/* Trigger: FIRMI_FAK_DATA_BI */
CREATE TRIGGER FIRMI_FAK_DATA_BI FOR FIRMI_FAK_DATA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_FIRMI_FAK_DATA_ID,1); 
 
  IF (NEW.REG_DDS IS NULL AND NEW.IDNOMDDS IS NULL) THEN 
    NEW.REG_DDS = '0'; 
 
  if (NEW.IDNOMDDS IS NOT NULL) then 
    NEW.REG_DDS = '1'; 
END
^


/* Trigger: FIRMI_LOG_AD103 */
CREATE TRIGGER FIRMI_LOG_AD103 FOR FIRMI
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'NAME_FAK', 'D', CAST(OLD."NAME_FAK" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'COMMENT', 'D', CAST(OLD."COMMENT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'ADRES', 'D', CAST(OLD."ADRES" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'MOL', 'D', CAST(OLD."MOL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'DAN_NUM', 'D', CAST(OLD."DAN_NUM" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'BULSTAT', 'D', CAST(OLD."BULSTAT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'REG_DDS', 'D', CAST(OLD."REG_DDS" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'EMAIL', 'D', CAST(OLD."EMAIL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'HTTP', 'D', CAST(OLD."HTTP" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'TEL', 'D', CAST(OLD."TEL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'PLACE_ID', 'D', CAST(OLD."PLACE_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'IDNOMDDS', 'D', CAST(OLD."IDNOMDDS" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'DEF_OWNERBANKA', 'D', CAST(OLD."DEF_OWNERBANKA" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'EMAIL_FAKTURA', 'D', CAST(OLD."EMAIL_FAKTURA" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'E_FAK', 'D', CAST(OLD."E_FAK" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'E_FAK_USER_NAME', 'D', CAST(OLD."E_FAK_USER_NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'EO_ID_TPD', 'D', CAST(OLD."EO_ID_TPD" AS DOM_CHAR_300), null); END
^


/* Trigger: FIRMI_LOG_AI103 */
CREATE TRIGGER FIRMI_LOG_AI103 FOR FIRMI
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'NAME_FAK', 'I', null, CAST(NEW."NAME_FAK" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'COMMENT', 'I', null, CAST(NEW."COMMENT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'ADRES', 'I', null, CAST(NEW."ADRES" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'MOL', 'I', null, CAST(NEW."MOL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'DAN_NUM', 'I', null, CAST(NEW."DAN_NUM" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'BULSTAT', 'I', null, CAST(NEW."BULSTAT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'REG_DDS', 'I', null, CAST(NEW."REG_DDS" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'EMAIL', 'I', null, CAST(NEW."EMAIL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'HTTP', 'I', null, CAST(NEW."HTTP" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'TEL', 'I', null, CAST(NEW."TEL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'PLACE_ID', 'I', null, CAST(NEW."PLACE_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'IDNOMDDS', 'I', null, CAST(NEW."IDNOMDDS" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'DEF_OWNERBANKA', 'I', null, CAST(NEW."DEF_OWNERBANKA" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'EMAIL_FAKTURA', 'I', null, CAST(NEW."EMAIL_FAKTURA" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'E_FAK', 'I', null, CAST(NEW."E_FAK" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'E_FAK_USER_NAME', 'I', null, CAST(NEW."E_FAK_USER_NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'EO_ID_TPD', 'I', null, CAST(NEW."EO_ID_TPD" AS DOM_CHAR_300)); END
^


/* Trigger: FIRMI_LOG_AU103 */
CREATE TRIGGER FIRMI_LOG_AU103 FOR FIRMI
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'NAME_FAK', 'U', CAST(OLD."NAME_FAK" AS DOM_CHAR_300), CAST(NEW.NAME_FAK AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'COMMENT', 'U', CAST(OLD."COMMENT" AS DOM_CHAR_300), CAST(NEW.COMMENT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'ADRES', 'U', CAST(OLD."ADRES" AS DOM_CHAR_300), CAST(NEW.ADRES AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'MOL', 'U', CAST(OLD."MOL" AS DOM_CHAR_300), CAST(NEW.MOL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'DAN_NUM', 'U', CAST(OLD."DAN_NUM" AS DOM_CHAR_300), CAST(NEW.DAN_NUM AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'BULSTAT', 'U', CAST(OLD."BULSTAT" AS DOM_CHAR_300), CAST(NEW.BULSTAT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'REG_DDS', 'U', CAST(OLD."REG_DDS" AS DOM_CHAR_300), CAST(NEW.REG_DDS AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'EMAIL', 'U', CAST(OLD."EMAIL" AS DOM_CHAR_300), CAST(NEW.EMAIL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'HTTP', 'U', CAST(OLD."HTTP" AS DOM_CHAR_300), CAST(NEW.HTTP AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'TEL', 'U', CAST(OLD."TEL" AS DOM_CHAR_300), CAST(NEW.TEL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'PLACE_ID', 'U', CAST(OLD."PLACE_ID" AS DOM_CHAR_300), CAST(NEW.PLACE_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'IDNOMDDS', 'U', CAST(OLD."IDNOMDDS" AS DOM_CHAR_300), CAST(NEW.IDNOMDDS AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'DEF_OWNERBANKA', 'U', CAST(OLD."DEF_OWNERBANKA" AS DOM_CHAR_300), CAST(NEW.DEF_OWNERBANKA AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'EMAIL_FAKTURA', 'U', CAST(OLD."EMAIL_FAKTURA" AS DOM_CHAR_300), CAST(NEW.EMAIL_FAKTURA AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'E_FAK', 'U', CAST(OLD."E_FAK" AS DOM_CHAR_300), CAST(NEW.E_FAK AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'E_FAK_USER_NAME', 'U', CAST(OLD."E_FAK_USER_NAME" AS DOM_CHAR_300), CAST(NEW.E_FAK_USER_NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'EO_ID_TPD', 'U', CAST(OLD."EO_ID_TPD" AS DOM_CHAR_300), CAST(NEW.EO_ID_TPD AS DOM_CHAR_300)); END
^


/* Trigger: FR_REPORTS_BI */
CREATE TRIGGER FR_REPORTS_BI FOR FR_REPORTS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_FR_REPORTS_ID,1); 
END
^


/* Trigger: FU_BI */
CREATE TRIGGER FU_BI FOR FU
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_fu_id,1); 
end
^


/* Trigger: FU_EXPORT_DOGOVOR_BI */
CREATE TRIGGER FU_EXPORT_DOGOVOR_BI FOR FU_EXPORT_DOGOVOR
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_fu_export_dogovor_id,1); 
end
^


/* Trigger: FU_OBOROTI_BI */
CREATE TRIGGER FU_OBOROTI_BI FOR FU_OBOROTI
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_FU_OBOROTI_id,1); 
end
^


/* Trigger: FU_SER_NUM_BI */
CREATE TRIGGER FU_SER_NUM_BI FOR FU_SER_NUM
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_fu_ser_num_id,1); 
end
^


/* Trigger: GARANCII_BI */
CREATE TRIGGER GARANCII_BI FOR GARANCII
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_GARANCII_ID,1);
END
^


/* Trigger: GRFINGER_BI */
CREATE TRIGGER GRFINGER_BI FOR GRFINGER
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_GRFINGER_ID,1); 
END
^


/* Trigger: HGROUPS_BI */
CREATE TRIGGER HGROUPS_BI FOR HGROUPS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_HGROUPS_ID,1); 
END
^


/* Trigger: IBE$VERSION_HISTORY_BI */
CREATE TRIGGER IBE$VERSION_HISTORY_BI FOR IBE$VERSION_HISTORY
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.IBE$VH_ID IS NULL) THEN
    NEW.IBE$VH_ID = GEN_ID(IBE$VERSION_HISTORY_ID_GEN,1);
  NEW.IBE$VH_USER_NAME = USER;
  NEW.IBE$VH_MODIFY_DATE = 'NOW';
END
^


/* Trigger: INI_BI */
CREATE TRIGGER INI_BI FOR INI
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
  NEW.ID = GEN_ID(GEN_INI_ID,1);
END
^


/* Trigger: INSTALLERS_GROUP_BI */
CREATE TRIGGER INSTALLERS_GROUP_BI FOR INSTALLERS_GROUP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_INSTALLERS_GROUP_ID,1); 
END
^


/* Trigger: INTRASTAT_DATA_BI */
CREATE TRIGGER INTRASTAT_DATA_BI FOR INTRASTAT_DATA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_INTRASTAT_DATA_ID,1); 
END
^


/* Trigger: INTRASTAT_DEAL_TYPE_BI */
CREATE TRIGGER INTRASTAT_DEAL_TYPE_BI FOR INTRASTAT_DEAL_TYPE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_INTRASTAT_DEAL_TYPE_ID,1); 
END
^


/* Trigger: INTRASTAT_DELIVERY_CONDITIONS_B */
CREATE TRIGGER INTRASTAT_DELIVERY_CONDITIONS_B FOR INTRASTAT_DELIVERY_CONDITIONS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_INTRASTAT_DELIVERY_CONDITIO,1); 
END
^


/* Trigger: INTRASTAT_REGION_BI */
CREATE TRIGGER INTRASTAT_REGION_BI FOR INTRASTAT_REGION
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_INTRASTAT_REGION_ID,1); 
END
^


/* Trigger: INTRASTAT_TRANSPORT_TYPE_BI */
CREATE TRIGGER INTRASTAT_TRANSPORT_TYPE_BI FOR INTRASTAT_TRANSPORT_TYPE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_INTRASTAT_TRANSPORT_TYPE_ID,1); 
END
^


/* Trigger: INV_BI */
CREATE TRIGGER INV_BI FOR INV
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_INV_ID,1);
END
^


/* Trigger: IN_BI */
CREATE TRIGGER IN_BI FOR "IN"
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_IN_ID,1);
END
^


/* Trigger: IN_EL2_BI */
CREATE TRIGGER IN_EL2_BI FOR IN_EL2
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_IN_EL2_ID,1);
END
^


/* Trigger: IN_EL_ANUL_BI */
CREATE TRIGGER IN_EL_ANUL_BI FOR IN_EL_ANUL
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_IN_EL_ANUL_ID,1); END
^


/* Trigger: IN_EL_BI */
CREATE TRIGGER IN_EL_BI FOR IN_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
DECLARE VARIABLE L_SKLAD_ID INTEGER; 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_IN_EL_ID,1); 
 
    SELECT 
        OPR.SKLAD_ID 
    FROM 
        OPR 
    WHERE 
        ID = NEW.OPR_ID 
    INTO 
        :L_SKLAD_ID; 
 
    IF (NOT EXISTS ( 
        SELECT 
            NAL.ID 
        FROM 
            NAL 
        WHERE 
            NAL.SKLAD_ID = :L_SKLAD_ID 
            AND NAL.SIMPLE_ID = NEW.SIMPLE_ID)) 
    THEN BEGIN 
 
        INSERT INTO NAL (SIMPLE_ID, SKLAD_ID, KOL_NAL, SUMA, LAST_CENA, SUMA_FR, KOL_RZV, DATETIME_LASTCENA) 
        VALUES (NEW.SIMPLE_ID, :L_SKLAD_ID, 0.00, 0.00, 0.00,0.00, 0.00, CURRENT_TIMESTAMP); 
    END 
 
   IF (NEW.VAT_PERCENT IS NULL) THEN 
     NEW.VAT_PERCENT = (SELECT SIMPLE.DDS FROM SIMPLE WHERE SIMPLE.ID = NEW.SIMPLE_ID); 
 
   IF ((NEW.VAT_REASON_ID IS NULL) AND (NEW.VAT_PERCENT <> 20.0)) THEN 
     NEW.VAT_REASON_ID = (SELECT SIMPLE.VAT_REASON_ID FROM SIMPLE WHERE SIMPLE.ID = NEW.SIMPLE_ID); 
END
^


/* Trigger: IN_EL_EDIT_BI */
CREATE TRIGGER IN_EL_EDIT_BI FOR IN_EL_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_IN_EL_EDIT_ID,1); END
^


/* Trigger: IZP_BI */
CREATE TRIGGER IZP_BI FOR IZP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_IZP_ID,1);
END
^


/* Trigger: IZP_TIP_BI */
CREATE TRIGGER IZP_TIP_BI FOR IZP_TIP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_IZP_TIP_ID,1);
END
^


/* Trigger: IZP_TIP_LOG_AD103 */
CREATE TRIGGER IZP_TIP_LOG_AD103 FOR IZP_TIP
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'USE_KLI', 'D', CAST(OLD."USE_KLI" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'USE_COMMENT', 'D', CAST(OLD."USE_COMMENT" AS DOM_CHAR_300), null); END
^


/* Trigger: IZP_TIP_LOG_AI103 */
CREATE TRIGGER IZP_TIP_LOG_AI103 FOR IZP_TIP
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', null, 'USE_KLI', 'I', null, CAST(NEW."USE_KLI" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', null, 'USE_COMMENT', 'I', null, CAST(NEW."USE_COMMENT" AS DOM_CHAR_300)); END
^


/* Trigger: IZP_TIP_LOG_AU103 */
CREATE TRIGGER IZP_TIP_LOG_AU103 FOR IZP_TIP
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'USE_KLI', 'U', CAST(OLD."USE_KLI" AS DOM_CHAR_300), CAST(NEW.USE_KLI AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'USE_COMMENT', 'U', CAST(OLD."USE_COMMENT" AS DOM_CHAR_300), CAST(NEW.USE_COMMENT AS DOM_CHAR_300)); END
^


/* Trigger: KASA_BI */
CREATE TRIGGER KASA_BI FOR KASA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_KASA_ID,1);
END
^


/* Trigger: KA_DEMONTAJ_DDS_BI */
CREATE TRIGGER KA_DEMONTAJ_DDS_BI FOR KA_DEMONTAJ_DDS
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_ka_demontaj_dds_id,1); 
end
^


/* Trigger: KA_INFO_BI */
CREATE TRIGGER KA_INFO_BI FOR KA_INFO
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KA_INFO_ID,1); 
END
^


/* Trigger: KA_LOG_NODE_BI */
CREATE TRIGGER KA_LOG_NODE_BI FOR KA_LOG_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KA_LOG_NODE_ID,1); 
END
^


/* Trigger: KA_PROIZVODITEL_BI */
CREATE TRIGGER KA_PROIZVODITEL_BI FOR KA_PROIZVODITEL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KA_PROIZVODITEL_ID,1); 
END
^


/* Trigger: KA_SER_NUM_BI */
CREATE TRIGGER KA_SER_NUM_BI FOR KA_SER_NUM
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_ka_ser_num_id,1); 
end
^


/* Trigger: KI_DOST_SUMA_EL_BI */
CREATE TRIGGER KI_DOST_SUMA_EL_BI FOR KI_DOST_SUMA_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KI_DOST_SUMA_EL_ID,1); 
END
^


/* Trigger: KI_NODE_BI */
CREATE TRIGGER KI_NODE_BI FOR KI_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
      NEW.ID = GEN_ID(GEN_KI_NODE_ID,1);
END
^


/* Trigger: KI_PROD_SUMA_EL_BD0 */
CREATE TRIGGER KI_PROD_SUMA_EL_BD0 FOR KI_PROD_SUMA_EL
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN 
  UPDATE OUT_EL SET 
    OUT_EL.SUMA = OUT_EL.SUMA + OLD.SUMA 
  WHERE 
    OUT_EL.ID = OLD.OUT_EL_ID AND 
    OLD.KOL IS NULL; 
 
  --UPDATE OPR SET 
  --  OPR.SUMA = OPR.SUMA + OLD.SUMA 
  --WHERE 
  --  OPR.ID = (SELECT OUT_EL.OPR_ID FROM OUT_EL WHERE OUT_EL.ID = OLD.OUT_EL_ID) AND 
  --  OLD.KOL IS NULL; 
END
^


/* Trigger: KI_PROD_SUMA_EL_BI */
CREATE TRIGGER KI_PROD_SUMA_EL_BI FOR KI_PROD_SUMA_EL
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_ki_prod_suma_el_id,1); 
end
^


/* Trigger: KLI_ABONAMENT_BI */
CREATE TRIGGER KLI_ABONAMENT_BI FOR KLI_ABONAMENT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_KLI_ABONAMENT_ID,1);
END
^


/* Trigger: KLI_AGENTS_BI */
CREATE TRIGGER KLI_AGENTS_BI FOR KLI_AGENTS
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_kli_agents_id,1); 
end
^


/* Trigger: KLI_BI */
CREATE TRIGGER KLI_BI FOR KLI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_KLI_ID,1); 
 
    IF (NEW.VOP IS NULL) THEN 
        NEW.VOP = 0; 
END
^


/* Trigger: KLI_DOST_NODE_BI */
CREATE TRIGGER KLI_DOST_NODE_BI FOR KLI_DOST_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KLI_DOST_NODE_ID,1); 
END
^


/* Trigger: KLI_FIRMA_NODE_BI */
CREATE TRIGGER KLI_FIRMA_NODE_BI FOR KLI_FIRMA_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KLI_FIRMA_NODE_ID,1); 
END
^


/* Trigger: KLI_GROUP_BI */
CREATE TRIGGER KLI_GROUP_BI FOR KLI_GROUP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_KLI_GROUP_ID,1);
END
^


/* Trigger: KLI_LOG_AD103 */
CREATE TRIGGER KLI_LOG_AD103 FOR KLI
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'KLI_GROUP_ID', 'D', CAST(OLD."KLI_GROUP_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CODE', 'D', CAST(OLD."CODE" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'KLIENT', 'D', CAST(OLD."KLIENT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DOSTAV', 'D', CAST(OLD."DOSTAV" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PROIZV', 'D', CAST(OLD."PROIZV" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PERCENT', 'D', CAST(OLD."PERCENT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'COMMENT', 'D', CAST(OLD."COMMENT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ADRES', 'D', CAST(OLD."ADRES" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'TEL', 'D', CAST(OLD."TEL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FOLDER', 'D', CAST(OLD."FOLDER" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FIRMA_ID', 'D', CAST(OLD."FIRMA_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DIST', 'D', CAST(OLD."DIST" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ZA_KASA', 'D', CAST(OLD."ZA_KASA" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FLAG_CHECK', 'D', CAST(OLD."FLAG_CHECK" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'OBEKT_ID', 'D', CAST(OLD."OBEKT_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PLACE_ID', 'D', CAST(OLD."PLACE_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PADEJ', 'D', CAST(OLD."PADEJ" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_SEL_ID', 'D', CAST(OLD."DEF_SEL_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'TIP_PRINT', 'D', CAST(OLD."TIP_PRINT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_DOST_PRINT', 'D', CAST(OLD."DEF_DOST_PRINT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_PROD_PRINT', 'D', CAST(OLD."DEF_PROD_PRINT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_FAK_PRINT', 'D', CAST(OLD."DEF_FAK_PRINT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_MOVE_PRINT', 'D', CAST(OLD."DEF_MOVE_PRINT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PADEJ_DDS', 'D', CAST(OLD."PADEJ_DDS" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FLAG_PAY', 'D', CAST(OLD."FLAG_PAY" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DAYS_DOST', 'D', CAST(OLD."DAYS_DOST" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FILE_EXPORT_PATH', 'D', CAST(OLD."FILE_EXPORT_PATH" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DNI_DO_PADEJ', 'D', CAST(OLD."DNI_DO_PADEJ" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'NAME_ENGL', 'D', CAST(OLD."NAME_ENGL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'BONUS_TOCHKI', 'D', CAST(OLD."BONUS_TOCHKI" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ADD_DDS', 'D', CAST(OLD."ADD_DDS" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'SLEDI', 'D', CAST(OLD."SLEDI" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FLAG_PAY_FAKT', 'D', CAST(OLD."FLAG_PAY_FAKT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'LIST_ID', 'D', CAST(OLD."LIST_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'COEFF', 'D', CAST(OLD."COEFF" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CFG_LOG_ID', 'D', CAST(OLD."CFG_LOG_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CODE2', 'D', CAST(OLD."CODE2" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DVSK_PRINT', 'D', CAST(OLD."DVSK_PRINT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DNI_FAK_PADEJ', 'D', CAST(OLD."DNI_FAK_PADEJ" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CHECK_FAK', 'D', CAST(OLD."CHECK_FAK" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'VOP', 'D', CAST(OLD."VOP" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'LATITUDE', 'D', CAST(OLD."LATITUDE" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'LONGITUDE', 'D', CAST(OLD."LONGITUDE" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'RADIUS', 'D', CAST(OLD."RADIUS" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'EMAIL', 'D', CAST(OLD."EMAIL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'AGENT', 'D', CAST(OLD."AGENT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CL_ID', 'D', CAST(OLD."CL_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'F_ID_TPD', 'D', CAST(OLD."F_ID_TPD" AS DOM_CHAR_300), null); END
^


/* Trigger: KLI_LOG_AI103 */
CREATE TRIGGER KLI_LOG_AI103 FOR KLI
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'KLI_GROUP_ID', 'I', null, CAST(NEW."KLI_GROUP_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'CODE', 'I', null, CAST(NEW."CODE" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'KLIENT', 'I', null, CAST(NEW."KLIENT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DOSTAV', 'I', null, CAST(NEW."DOSTAV" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'PROIZV', 'I', null, CAST(NEW."PROIZV" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'PERCENT', 'I', null, CAST(NEW."PERCENT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'COMMENT', 'I', null, CAST(NEW."COMMENT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'ADRES', 'I', null, CAST(NEW."ADRES" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'TEL', 'I', null, CAST(NEW."TEL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'FOLDER', 'I', null, CAST(NEW."FOLDER" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'FIRMA_ID', 'I', null, CAST(NEW."FIRMA_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DIST', 'I', null, CAST(NEW."DIST" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'ZA_KASA', 'I', null, CAST(NEW."ZA_KASA" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'FLAG_CHECK', 'I', null, CAST(NEW."FLAG_CHECK" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'OBEKT_ID', 'I', null, CAST(NEW."OBEKT_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'PLACE_ID', 'I', null, CAST(NEW."PLACE_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'PADEJ', 'I', null, CAST(NEW."PADEJ" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DEF_SEL_ID', 'I', null, CAST(NEW."DEF_SEL_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'TIP_PRINT', 'I', null, CAST(NEW."TIP_PRINT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DEF_DOST_PRINT', 'I', null, CAST(NEW."DEF_DOST_PRINT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DEF_PROD_PRINT', 'I', null, CAST(NEW."DEF_PROD_PRINT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DEF_FAK_PRINT', 'I', null, CAST(NEW."DEF_FAK_PRINT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DEF_MOVE_PRINT', 'I', null, CAST(NEW."DEF_MOVE_PRINT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'PADEJ_DDS', 'I', null, CAST(NEW."PADEJ_DDS" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'FLAG_PAY', 'I', null, CAST(NEW."FLAG_PAY" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DAYS_DOST', 'I', null, CAST(NEW."DAYS_DOST" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'FILE_EXPORT_PATH', 'I', null, CAST(NEW."FILE_EXPORT_PATH" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DNI_DO_PADEJ', 'I', null, CAST(NEW."DNI_DO_PADEJ" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'NAME_ENGL', 'I', null, CAST(NEW."NAME_ENGL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'BONUS_TOCHKI', 'I', null, CAST(NEW."BONUS_TOCHKI" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'ADD_DDS', 'I', null, CAST(NEW."ADD_DDS" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'SLEDI', 'I', null, CAST(NEW."SLEDI" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'FLAG_PAY_FAKT', 'I', null, CAST(NEW."FLAG_PAY_FAKT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'LIST_ID', 'I', null, CAST(NEW."LIST_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'COEFF', 'I', null, CAST(NEW."COEFF" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'CFG_LOG_ID', 'I', null, CAST(NEW."CFG_LOG_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'CODE2', 'I', null, CAST(NEW."CODE2" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DVSK_PRINT', 'I', null, CAST(NEW."DVSK_PRINT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DNI_FAK_PADEJ', 'I', null, CAST(NEW."DNI_FAK_PADEJ" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'CHECK_FAK', 'I', null, CAST(NEW."CHECK_FAK" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'VOP', 'I', null, CAST(NEW."VOP" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'LATITUDE', 'I', null, CAST(NEW."LATITUDE" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'LONGITUDE', 'I', null, CAST(NEW."LONGITUDE" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'RADIUS', 'I', null, CAST(NEW."RADIUS" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'EMAIL', 'I', null, CAST(NEW."EMAIL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'AGENT', 'I', null, CAST(NEW."AGENT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'CL_ID', 'I', null, CAST(NEW."CL_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'F_ID_TPD', 'I', null, CAST(NEW."F_ID_TPD" AS DOM_CHAR_300)); END
^


/* Trigger: KLI_LOG_AU103 */
CREATE TRIGGER KLI_LOG_AU103 FOR KLI
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'KLI_GROUP_ID', 'U', CAST(OLD."KLI_GROUP_ID" AS DOM_CHAR_300), CAST(NEW.KLI_GROUP_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CODE', 'U', CAST(OLD."CODE" AS DOM_CHAR_300), CAST(NEW.CODE AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'KLIENT', 'U', CAST(OLD."KLIENT" AS DOM_CHAR_300), CAST(NEW.KLIENT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DOSTAV', 'U', CAST(OLD."DOSTAV" AS DOM_CHAR_300), CAST(NEW.DOSTAV AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PROIZV', 'U', CAST(OLD."PROIZV" AS DOM_CHAR_300), CAST(NEW.PROIZV AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PERCENT', 'U', CAST(OLD."PERCENT" AS DOM_CHAR_300), CAST(NEW.PERCENT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'COMMENT', 'U', CAST(OLD."COMMENT" AS DOM_CHAR_300), CAST(NEW.COMMENT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ADRES', 'U', CAST(OLD."ADRES" AS DOM_CHAR_300), CAST(NEW.ADRES AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'TEL', 'U', CAST(OLD."TEL" AS DOM_CHAR_300), CAST(NEW.TEL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FOLDER', 'U', CAST(OLD."FOLDER" AS DOM_CHAR_300), CAST(NEW.FOLDER AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FIRMA_ID', 'U', CAST(OLD."FIRMA_ID" AS DOM_CHAR_300), CAST(NEW.FIRMA_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DIST', 'U', CAST(OLD."DIST" AS DOM_CHAR_300), CAST(NEW.DIST AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ZA_KASA', 'U', CAST(OLD."ZA_KASA" AS DOM_CHAR_300), CAST(NEW.ZA_KASA AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FLAG_CHECK', 'U', CAST(OLD."FLAG_CHECK" AS DOM_CHAR_300), CAST(NEW.FLAG_CHECK AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'OBEKT_ID', 'U', CAST(OLD."OBEKT_ID" AS DOM_CHAR_300), CAST(NEW.OBEKT_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PLACE_ID', 'U', CAST(OLD."PLACE_ID" AS DOM_CHAR_300), CAST(NEW.PLACE_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PADEJ', 'U', CAST(OLD."PADEJ" AS DOM_CHAR_300), CAST(NEW.PADEJ AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_SEL_ID', 'U', CAST(OLD."DEF_SEL_ID" AS DOM_CHAR_300), CAST(NEW.DEF_SEL_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'TIP_PRINT', 'U', CAST(OLD."TIP_PRINT" AS DOM_CHAR_300), CAST(NEW.TIP_PRINT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_DOST_PRINT', 'U', CAST(OLD."DEF_DOST_PRINT" AS DOM_CHAR_300), CAST(NEW.DEF_DOST_PRINT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_PROD_PRINT', 'U', CAST(OLD."DEF_PROD_PRINT" AS DOM_CHAR_300), CAST(NEW.DEF_PROD_PRINT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_FAK_PRINT', 'U', CAST(OLD."DEF_FAK_PRINT" AS DOM_CHAR_300), CAST(NEW.DEF_FAK_PRINT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_MOVE_PRINT', 'U', CAST(OLD."DEF_MOVE_PRINT" AS DOM_CHAR_300), CAST(NEW.DEF_MOVE_PRINT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PADEJ_DDS', 'U', CAST(OLD."PADEJ_DDS" AS DOM_CHAR_300), CAST(NEW.PADEJ_DDS AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FLAG_PAY', 'U', CAST(OLD."FLAG_PAY" AS DOM_CHAR_300), CAST(NEW.FLAG_PAY AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DAYS_DOST', 'U', CAST(OLD."DAYS_DOST" AS DOM_CHAR_300), CAST(NEW.DAYS_DOST AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FILE_EXPORT_PATH', 'U', CAST(OLD."FILE_EXPORT_PATH" AS DOM_CHAR_300), CAST(NEW.FILE_EXPORT_PATH AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DNI_DO_PADEJ', 'U', CAST(OLD."DNI_DO_PADEJ" AS DOM_CHAR_300), CAST(NEW.DNI_DO_PADEJ AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'NAME_ENGL', 'U', CAST(OLD."NAME_ENGL" AS DOM_CHAR_300), CAST(NEW.NAME_ENGL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'BONUS_TOCHKI', 'U', CAST(OLD."BONUS_TOCHKI" AS DOM_CHAR_300), CAST(NEW.BONUS_TOCHKI AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ADD_DDS', 'U', CAST(OLD."ADD_DDS" AS DOM_CHAR_300), CAST(NEW.ADD_DDS AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'SLEDI', 'U', CAST(OLD."SLEDI" AS DOM_CHAR_300), CAST(NEW.SLEDI AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FLAG_PAY_FAKT', 'U', CAST(OLD."FLAG_PAY_FAKT" AS DOM_CHAR_300), CAST(NEW.FLAG_PAY_FAKT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'LIST_ID', 'U', CAST(OLD."LIST_ID" AS DOM_CHAR_300), CAST(NEW.LIST_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'COEFF', 'U', CAST(OLD."COEFF" AS DOM_CHAR_300), CAST(NEW.COEFF AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CFG_LOG_ID', 'U', CAST(OLD."CFG_LOG_ID" AS DOM_CHAR_300), CAST(NEW.CFG_LOG_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CODE2', 'U', CAST(OLD."CODE2" AS DOM_CHAR_300), CAST(NEW.CODE2 AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DVSK_PRINT', 'U', CAST(OLD."DVSK_PRINT" AS DOM_CHAR_300), CAST(NEW.DVSK_PRINT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DNI_FAK_PADEJ', 'U', CAST(OLD."DNI_FAK_PADEJ" AS DOM_CHAR_300), CAST(NEW.DNI_FAK_PADEJ AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CHECK_FAK', 'U', CAST(OLD."CHECK_FAK" AS DOM_CHAR_300), CAST(NEW.CHECK_FAK AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'VOP', 'U', CAST(OLD."VOP" AS DOM_CHAR_300), CAST(NEW.VOP AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'LATITUDE', 'U', CAST(OLD."LATITUDE" AS DOM_CHAR_300), CAST(NEW.LATITUDE AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'LONGITUDE', 'U', CAST(OLD."LONGITUDE" AS DOM_CHAR_300), CAST(NEW.LONGITUDE AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'RADIUS', 'U', CAST(OLD."RADIUS" AS DOM_CHAR_300), CAST(NEW.RADIUS AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'EMAIL', 'U', CAST(OLD."EMAIL" AS DOM_CHAR_300), CAST(NEW.EMAIL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'AGENT', 'U', CAST(OLD."AGENT" AS DOM_CHAR_300), CAST(NEW.AGENT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CL_ID', 'U', CAST(OLD."CL_ID" AS DOM_CHAR_300), CAST(NEW.CL_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'F_ID_TPD', 'U', CAST(OLD."F_ID_TPD" AS DOM_CHAR_300), CAST(NEW.F_ID_TPD AS DOM_CHAR_300)); END
^


/* Trigger: KLI_POCKET_NODE_BI */
CREATE TRIGGER KLI_POCKET_NODE_BI FOR KLI_POCKET_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KLI_POCKET_NODE_ID,1); 
END
^


/* Trigger: KLI_PRAGOVE_BI */
CREATE TRIGGER KLI_PRAGOVE_BI FOR KLI_PRAGOVE
ACTIVE BEFORE INSERT POSITION 0
AS
    BEGIN
      IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_KLI_PRAGOVE_ID,1);
    END
^


/* Trigger: KLI_SKLAD_NODE_BI */
CREATE TRIGGER KLI_SKLAD_NODE_BI FOR KLI_SKLAD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KLI_SKLAD_NODE_ID,1); 
END
^


/* Trigger: KLI_TOCHKI_NODE_BI */
CREATE TRIGGER KLI_TOCHKI_NODE_BI FOR KLI_TOCHKI_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KLI_TOCHKI_NODE_ID,1); 
END
^


/* Trigger: KLI_USER_NODE_BI */
CREATE TRIGGER KLI_USER_NODE_BI FOR KLI_USER_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KLI_USER_NODE_ID,1); 
END
^


/* Trigger: LAYOUTS_BI */
CREATE TRIGGER LAYOUTS_BI FOR LAYOUTS
ACTIVE BEFORE INSERT POSITION 0
as 
  begin 
    if (new.ID is null) then 
      new.ID = gen_id(GEN_LAYOUTS_ID,1); 
  end
^


/* Trigger: LICENCE_EL_BI */
CREATE TRIGGER LICENCE_EL_BI FOR LICENCE_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_LICENCE_EL_ID,1); 
END
^


/* Trigger: LOCK_OPR_BI */
CREATE TRIGGER LOCK_OPR_BI FOR LOCK_OPR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_LOCK_OPR_ID,1); 
END
^


/* Trigger: LOCK_OPR_EL_BI */
CREATE TRIGGER LOCK_OPR_EL_BI FOR LOCK_OPR_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_LOCK_OPR_EL_ID,1); 
END
^


/* Trigger: METRO_ARTICLES_BI */
CREATE TRIGGER METRO_ARTICLES_BI FOR METRO_ARTICLES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_METRO_ARTICLES_ID,1); 
END
^


/* Trigger: METRO_EXPORT_OPR_BI */
CREATE TRIGGER METRO_EXPORT_OPR_BI FOR METRO_EXPORT_OPR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_METRO_EXPORT_OPR_ID,1); 
END
^


/* Trigger: METRO_EXPORT_SIMPLES_BI */
CREATE TRIGGER METRO_EXPORT_SIMPLES_BI FOR METRO_EXPORT_SIMPLES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_METRO_EXPORT_SIMPLES_ID,1); 
END
^


/* Trigger: METRO_INVOICE_DOCUMENTS_BI */
CREATE TRIGGER METRO_INVOICE_DOCUMENTS_BI FOR METRO_INVOICE_DOCUMENTS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_METRO_INVOICE_DOCUMENTS_ID,1); 
  IF (NEW.IMPORTED IS NULL) THEN 
    NEW.IMPORTED = 0; 
END
^


/* Trigger: ME_BI */
CREATE TRIGGER ME_BI FOR ME
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_ME_ID,1);
END
^


/* Trigger: ME_LOG_AD103 */
CREATE TRIGGER ME_LOG_AD103 FOR ME
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'NAME_LONG', 'D', CAST(OLD."NAME_LONG" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'KOEF', 'D', CAST(OLD."KOEF" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'IS_BROI', 'D', CAST(OLD."IS_BROI" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'PREFIX', 'D', CAST(OLD."PREFIX" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'NAME_ENG', 'D', CAST(OLD."NAME_ENG" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'KOEF_ET', 'D', CAST(OLD."KOEF_ET" AS DOM_CHAR_300), null); END
^


/* Trigger: ME_LOG_AI103 */
CREATE TRIGGER ME_LOG_AI103 FOR ME
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'NAME_LONG', 'I', null, CAST(NEW."NAME_LONG" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'KOEF', 'I', null, CAST(NEW."KOEF" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'IS_BROI', 'I', null, CAST(NEW."IS_BROI" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'PREFIX', 'I', null, CAST(NEW."PREFIX" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'NAME_ENG', 'I', null, CAST(NEW."NAME_ENG" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'KOEF_ET', 'I', null, CAST(NEW."KOEF_ET" AS DOM_CHAR_300)); END
^


/* Trigger: ME_LOG_AU103 */
CREATE TRIGGER ME_LOG_AU103 FOR ME
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'NAME_LONG', 'U', CAST(OLD."NAME_LONG" AS DOM_CHAR_300), CAST(NEW.NAME_LONG AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'KOEF', 'U', CAST(OLD."KOEF" AS DOM_CHAR_300), CAST(NEW.KOEF AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'IS_BROI', 'U', CAST(OLD."IS_BROI" AS DOM_CHAR_300), CAST(NEW.IS_BROI AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'PREFIX', 'U', CAST(OLD."PREFIX" AS DOM_CHAR_300), CAST(NEW.PREFIX AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'NAME_ENG', 'U', CAST(OLD."NAME_ENG" AS DOM_CHAR_300), CAST(NEW.NAME_ENG AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'KOEF_ET', 'U', CAST(OLD."KOEF_ET" AS DOM_CHAR_300), CAST(NEW.KOEF_ET AS DOM_CHAR_300)); END
^


/* Trigger: MOVE_BI */
CREATE TRIGGER MOVE_BI FOR MOVE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_MOVE_ID,1);
END
^


/* Trigger: NAL2_BI */
CREATE TRIGGER NAL2_BI FOR NAL2
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_NAL2_ID,1);
END
^


/* Trigger: NAL_BU0 */
CREATE TRIGGER NAL_BU0 FOR NAL
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    EXECUTE PROCEDURE CHECK_OTR_KOL(NEW.KOL_NAL); 
 
    IF (NEW.LAST_CENA = 0.00) THEN BEGIN 
        NEW.LAST_CENA = OLD.LAST_CENA; 
        NEW.DATETIME_LASTCENA = OLD.DATETIME_LASTCENA; 
    END 
 
END
^


/* Trigger: OBEKT_BI */
CREATE TRIGGER OBEKT_BI FOR OBEKT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OBEKT_ID,1);
END
^


/* Trigger: OFERTA_BI */
CREATE TRIGGER OFERTA_BI FOR OFERTA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OFERTA_ID,1);
END
^


/* Trigger: OFERTA_EL_BI */
CREATE TRIGGER OFERTA_EL_BI FOR OFERTA_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OFERTA_EL_ID,1);
END
^


/* Trigger: OFFONL_KLI_I */
CREATE TRIGGER OFFONL_KLI_I FOR KLI
INACTIVE AFTER INSERT POSITION 1024
AS
begin
  /* Trigger text */


  insert into off_on_line_log(table_name, cmd, record_id)
  values ('KLI', 'I', new.id);
end
^


/* Trigger: OFFONL_KLI_U */
CREATE TRIGGER OFFONL_KLI_U FOR KLI
INACTIVE AFTER UPDATE POSITION 0
AS
begin
 insert into off_on_line_log(table_name, cmd, record_id)
  values ('KLI', 'U', new.id);
end
^


/* Trigger: OFF_ON_LINE_LOG_BI */
CREATE TRIGGER OFF_ON_LINE_LOG_BI FOR OFF_ON_LINE_LOG
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OFF_ON_LINE_LOG_ID,1);
END
^


/* Trigger: OLD_REQUEST_EL_BI */
CREATE TRIGGER OLD_REQUEST_EL_BI FOR OLD_REQUEST_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OLD_REQUEST_EL_ID,1); 
END
^


/* Trigger: OLD_TASKS_BI */
CREATE TRIGGER OLD_TASKS_BI FOR OLD_TASKS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OLD_TASKS_ID,1); 
END
^


/* Trigger: ONOFFL_BARCODE_D */
CREATE TRIGGER ONOFFL_BARCODE_D FOR BARCODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "BARCODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_BARCODE_I */
CREATE TRIGGER ONOFFL_BARCODE_I FOR BARCODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "BARCODE" ("ID","SIMPLE_ID","BARCODE","KOL")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(''''||NEW."BARCODE"||'''','NULL')||','
||COALESCE(NEW."KOL",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_BARCODE_U */
CREATE TRIGGER ONOFFL_BARCODE_U FOR BARCODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "BARCODE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"BARCODE"='||COALESCE(''''||NEW."BARCODE"||'''','NULL')||','
||'"KOL"='||COALESCE(NEW."KOL",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_BONUS_CONFIG_D */
CREATE TRIGGER ONOFFL_BONUS_CONFIG_D FOR BONUS_CONFIG
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "BONUS_CONFIG" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_BONUS_CONFIG_I */
CREATE TRIGGER ONOFFL_BONUS_CONFIG_I FOR BONUS_CONFIG
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "BONUS_CONFIG" ("ID","IS_ACTIV","NAME","WEEK_DAY","OT_TIME","DO_TIME","OT_SUMA","DO_SUMA","SIMPLE_ID","SIMPLE_KOL","PERIOD","NUMBER_WMY","WMY","PROCENT","SIMPLE_ID_BONUS","KOL_SIM_BONUS","CENA_SIM_BONUS","ANULIRAN","ZA_SMETKA","ID_BONUS","DATE_TIME_AE","USER_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."IS_ACTIV",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."WEEK_DAY",'NULL')||','
||COALESCE(''''||NEW."OT_TIME"||'''','NULL')||','
||COALESCE(''''||NEW."DO_TIME"||'''','NULL')||','
||COALESCE(NEW."OT_SUMA",'NULL')||','
||COALESCE(NEW."DO_SUMA",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."SIMPLE_KOL",'NULL')||','
||COALESCE(NEW."PERIOD",'NULL')||','
||COALESCE(NEW."NUMBER_WMY",'NULL')||','
||COALESCE(NEW."WMY",'NULL')||','
||COALESCE(NEW."PROCENT",'NULL')||','
||COALESCE(NEW."SIMPLE_ID_BONUS",'NULL')||','
||COALESCE(NEW."KOL_SIM_BONUS",'NULL')||','
||COALESCE(NEW."CENA_SIM_BONUS",'NULL')||','
||COALESCE(NEW."ANULIRAN",0)||','
||COALESCE(NEW."ZA_SMETKA",0)||','
||COALESCE(NEW."ID_BONUS",'NULL')||','
||COALESCE(''''||NEW."DATE_TIME_AE"||'''','NULL')||','
||COALESCE(NEW."USER_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_BONUS_CONFIG_U */
CREATE TRIGGER ONOFFL_BONUS_CONFIG_U FOR BONUS_CONFIG
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "BONUS_CONFIG" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"IS_ACTIV"='||COALESCE(NEW."IS_ACTIV",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"WEEK_DAY"='||COALESCE(NEW."WEEK_DAY",'NULL')||','
||'"OT_TIME"='||COALESCE(''''||NEW."OT_TIME"||'''','NULL')||','
||'"DO_TIME"='||COALESCE(''''||NEW."DO_TIME"||'''','NULL')||','
||'"OT_SUMA"='||COALESCE(NEW."OT_SUMA",'NULL')||','
||'"DO_SUMA"='||COALESCE(NEW."DO_SUMA",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"SIMPLE_KOL"='||COALESCE(NEW."SIMPLE_KOL",'NULL')||','
||'"PERIOD"='||COALESCE(NEW."PERIOD",'NULL')||','
||'"NUMBER_WMY"='||COALESCE(NEW."NUMBER_WMY",'NULL')||','
||'"WMY"='||COALESCE(NEW."WMY",'NULL')||','
||'"PROCENT"='||COALESCE(NEW."PROCENT",'NULL')||','
||'"SIMPLE_ID_BONUS"='||COALESCE(NEW."SIMPLE_ID_BONUS",'NULL')||','
||'"KOL_SIM_BONUS"='||COALESCE(NEW."KOL_SIM_BONUS",'NULL')||','
||'"CENA_SIM_BONUS"='||COALESCE(NEW."CENA_SIM_BONUS",'NULL')||','
||'"ANULIRAN"='||COALESCE(NEW."ANULIRAN",'NULL')||','
||'"ZA_SMETKA"='||COALESCE(NEW."ZA_SMETKA",'NULL')||','
||'"ID_BONUS"='||COALESCE(NEW."ID_BONUS",'NULL')||','
||'"DATE_TIME_AE"='||COALESCE(''''||NEW."DATE_TIME_AE"||'''','NULL')||','
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_D */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_D FOR CENOVA_LISTA
INACTIVE AFTER DELETE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'delete from  CENOVA_LISTA where "ID"='||old.ID,(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_EL_D */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_EL_D FOR CENOVA_LISTA_EL
INACTIVE AFTER DELETE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'delete from  CENOVA_LISTA_EL where "ID"='||old.ID,(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_EL_I */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_EL_I FOR CENOVA_LISTA_EL
INACTIVE AFTER INSERT POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'insert into CENOVA_LISTA_EL ("ID", 
"OPR_ID", 
"OT_OPR_ID", 
"SIMPLE_ID", 
"TIP", 
"PROCENT", 
"CENA", 
"TIP_OT_CENA")  values ('||coalesce(new."ID",'NULL')||' , ' 
||coalesce(-new."OPR_ID",'NULL')||' , ' 
||coalesce(-new."OT_OPR_ID",'NULL')||' , ' 
||coalesce(new."SIMPLE_ID",'NULL')||' , ' 
||coalesce(new."TIP",'NULL')||' , ' 
||coalesce(new."PROCENT",'NULL')||' , ' 
||coalesce(new."CENA",'NULL')||' , ' 
||coalesce(new."TIP_OT_CENA",0)||');', 
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_EL_U */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_EL_U FOR CENOVA_LISTA_EL
INACTIVE AFTER UPDATE POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'update CENOVA_LISTA_EL SET '||'"ID"='||coalesce(new."ID",'NULL')||' , ' 
||'"OPR_ID"='||coalesce(-new."OPR_ID",'NULL')||' , ' 
||'"OT_OPR_ID"='||coalesce(-new."OT_OPR_ID",'NULL')||' , ' 
||'"SIMPLE_ID"='||coalesce(new."SIMPLE_ID",'NULL')||' , ' 
||'"TIP"='||coalesce(new."TIP",'NULL')||' , ' 
||'"PROCENT"='||coalesce(new."PROCENT",'NULL')||' , ' 
||'"CENA"='||coalesce(new."CENA",'NULL')||' , ' 
||'"TIP_OT_CENA"='||coalesce(new."TIP_OT_CENA",'NULL')|| 
' WHERE ID='||old.ID ,  
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_I */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_I FOR CENOVA_LISTA
INACTIVE AFTER INSERT POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'insert into CENOVA_LISTA ("DEF", 
"ID", 
"NAME", 
"OPR_ID", 
"TIP", 
"OT_DATE", 
"DO_DATE", 
"OT_TIME", 
"DO_TIME", 
"WEEK", 
"ACTIVNA", 
"PRIORITET")  values ('||coalesce(new."DEF", 0)||' , ' 
||coalesce(new."ID",'NULL')||' , ' 
||coalesce(''''||new."NAME"||'''','NULL')||' , ' 
||coalesce(-new."OPR_ID",'NULL')||' , ' 
||coalesce(new."TIP",'NULL')||' , ' 
||coalesce(''''||new."OT_DATE"||'''','NULL')||' , ' 
||coalesce(''''||new."DO_DATE"||'''','NULL')||' , ' 
||coalesce(''''||new."OT_TIME"||'''','NULL')||' , ' 
||coalesce(''''||new."DO_TIME"||'''','NULL')||' , ' 
||coalesce(new."WEEK",'NULL')||' , ' 
||coalesce(new."ACTIVNA",0)||' , ' 
||coalesce(new."PRIORITET",0)||');', 
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_KLI_D */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_KLI_D FOR CENOVA_LISTA_KLI
INACTIVE AFTER DELETE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'delete from  CENOVA_LISTA_KLI where "ID"='||old.ID,(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_KLI_I */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_KLI_I FOR CENOVA_LISTA_KLI
INACTIVE AFTER INSERT POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'insert into CENOVA_LISTA_KLI ("ID", 
"OPR_ID", 
"KLI_ID")  values ('||coalesce(new."ID",'NULL')||' , ' 
||coalesce(-new."OPR_ID",'NULL')||' , ' 
||coalesce(new."KLI_ID",'NULL')||');', 
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_KLI_U */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_KLI_U FOR CENOVA_LISTA_KLI
INACTIVE AFTER UPDATE POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'update CENOVA_LISTA_KLI SET '||'"ID"='||coalesce(new."ID",'NULL')||' , ' 
||'"OPR_ID"='||coalesce(-new."OPR_ID",'NULL')||' , ' 
||'"KLI_ID"='||coalesce(new."KLI_ID",'NULL')|| 
' WHERE ID='||old.ID ,  
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_SKLAD_D */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_SKLAD_D FOR CENOVA_LISTA_SKLAD
INACTIVE AFTER DELETE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'delete from  CENOVA_LISTA_SKLAD where "ID"='||old.ID,(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_SKLAD_I */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_SKLAD_I FOR CENOVA_LISTA_SKLAD
INACTIVE AFTER INSERT POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'insert into CENOVA_LISTA_SKLAD ("ID", 
"OPR_ID", 
"SKLAD_ID")  values ('||coalesce(new."ID",'NULL')||' , ' 
||coalesce(-new."OPR_ID",'NULL')||' , ' 
||coalesce(new."SKLAD_ID",'NULL')||');', 
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_SKLAD_U */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_SKLAD_U FOR CENOVA_LISTA_SKLAD
INACTIVE AFTER UPDATE POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'update CENOVA_LISTA_SKLAD SET '||'"ID"='||coalesce(new."ID",'NULL')||' , ' 
||'"OPR_ID"='||coalesce(-new."OPR_ID",'NULL')||' , ' 
||'"SKLAD_ID"='||coalesce(new."SKLAD_ID",'NULL')|| 
' WHERE ID='||old.ID ,  
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_U */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_U FOR CENOVA_LISTA
INACTIVE AFTER UPDATE POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'update CENOVA_LISTA SET '||'"DEF"='||coalesce(new."DEF",'NULL')||' , ' 
||'"ID"='||coalesce(new."ID",'NULL')||' , ' 
||'"NAME"='||coalesce(''''||new."NAME"||'''','NULL')||' , ' 
||'"OPR_ID"='||coalesce(-new."OPR_ID",'NULL')||' , ' 
||'"TIP"='||coalesce(new."TIP",'NULL')||' , ' 
||'"OT_DATE"='||coalesce(''''||new."OT_DATE"||'''','NULL')||' , ' 
||'"DO_DATE"='||coalesce(''''||new."DO_DATE"||'''','NULL')||' , ' 
||'"OT_TIME"='||coalesce(''''||new."OT_TIME"||'''','NULL')||' , ' 
||'"DO_TIME"='||coalesce(''''||new."DO_TIME"||'''','NULL')||' , ' 
||'"WEEK"='||coalesce(new."WEEK",'NULL')||' , ' 
||'"ACTIVNA"='||coalesce(new."ACTIVNA",'NULL')||' , ' 
||'"PRIORITET"='||coalesce(new."PRIORITET",'NULL')||' , ' 
||'"DEF_FIKS"='||coalesce(new."DEF_FIKS",'NULL')|| 
' WHERE ID='||old.ID ,  
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CFG_PAYMENTS_D */
CREATE TRIGGER ONOFFL_CFG_PAYMENTS_D FOR CFG_PAYMENTS
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "CFG_PAYMENTS" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_CFG_PAYMENTS_I */
CREATE TRIGGER ONOFFL_CFG_PAYMENTS_I FOR CFG_PAYMENTS
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "CFG_PAYMENTS" ("KASA_ID","NAME","ID","ATRIB","FISK")
VALUES ('||COALESCE(NEW."KASA_ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."ATRIB",'NULL')||','
||COALESCE(NEW."FISK",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_CFG_PAYMENTS_KLI_D */
CREATE TRIGGER ONOFFL_CFG_PAYMENTS_KLI_D FOR CFG_PAYMENTS_KLI
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "CFG_PAYMENTS_KLI" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_CFG_PAYMENTS_KLI_I */
CREATE TRIGGER ONOFFL_CFG_PAYMENTS_KLI_I FOR CFG_PAYMENTS_KLI
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "CFG_PAYMENTS_KLI" ("ID","CFG_PAYMENTS_ID","KLI_ID","KASA_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."CFG_PAYMENTS_ID",'NULL')||','
||COALESCE(NEW."KLI_ID",'NULL')||','
||COALESCE(NEW."KASA_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_CFG_PAYMENTS_KLI_U */
CREATE TRIGGER ONOFFL_CFG_PAYMENTS_KLI_U FOR CFG_PAYMENTS_KLI
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "CFG_PAYMENTS_KLI" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"CFG_PAYMENTS_ID"='||COALESCE(NEW."CFG_PAYMENTS_ID",'NULL')||','
||'"KLI_ID"='||COALESCE(NEW."KLI_ID",'NULL')||','
||'"KASA_ID"='||COALESCE(NEW."KASA_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_CFG_PAYMENTS_U */
CREATE TRIGGER ONOFFL_CFG_PAYMENTS_U FOR CFG_PAYMENTS
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "CFG_PAYMENTS" SET '
||'"KASA_ID"='||COALESCE(NEW."KASA_ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"ATRIB"='||COALESCE(NEW."ATRIB",'NULL')||','
||'"FISK"='||COALESCE(NEW."FISK",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_COUNTRIES_D */
CREATE TRIGGER ONOFFL_COUNTRIES_D FOR COUNTRIES
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "COUNTRIES" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_COUNTRIES_I */
CREATE TRIGGER ONOFFL_COUNTRIES_I FOR COUNTRIES
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "COUNTRIES" ("ID","NAME","CODE","NAME_ENG")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||COALESCE(''''||NEW."NAME_ENG"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_COUNTRIES_U */
CREATE TRIGGER ONOFFL_COUNTRIES_U FOR COUNTRIES
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "COUNTRIES" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"CODE"='||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||'"NAME_ENG"='||COALESCE(''''||NEW."NAME_ENG"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_DEF_RAZ_SIMPLE_D */
CREATE TRIGGER ONOFFL_DEF_RAZ_SIMPLE_D FOR DEF_RAZ_SIMPLE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "DEF_RAZ_SIMPLE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_DEF_RAZ_SIMPLE_I */
CREATE TRIGGER ONOFFL_DEF_RAZ_SIMPLE_I FOR DEF_RAZ_SIMPLE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "DEF_RAZ_SIMPLE" ("ID","SIMPLE_ID","RAZFASOVKA_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."RAZFASOVKA_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_DEF_RAZ_SIMPLE_U */
CREATE TRIGGER ONOFFL_DEF_RAZ_SIMPLE_U FOR DEF_RAZ_SIMPLE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "DEF_RAZ_SIMPLE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"RAZFASOVKA_ID"='||COALESCE(NEW."RAZFASOVKA_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_DVSK_DOK_TYPE_D */
CREATE TRIGGER ONOFFL_DVSK_DOK_TYPE_D FOR DVSK_DOK_TYPE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "DVSK_DOK_TYPE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_DVSK_DOK_TYPE_I */
CREATE TRIGGER ONOFFL_DVSK_DOK_TYPE_I FOR DVSK_DOK_TYPE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "DVSK_DOK_TYPE" ("ID","DOK_TYPE","NAME","SHORT_NAME")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."DOK_TYPE",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(''''||NEW."SHORT_NAME"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_DVSK_DOK_TYPE_U */
CREATE TRIGGER ONOFFL_DVSK_DOK_TYPE_U FOR DVSK_DOK_TYPE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "DVSK_DOK_TYPE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"DOK_TYPE"='||COALESCE(NEW."DOK_TYPE",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"SHORT_NAME"='||COALESCE(''''||NEW."SHORT_NAME"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ETIKETI_D */
CREATE TRIGGER ONOFFL_ETIKETI_D FOR ETIKETI
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "ETIKETI" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ETIKETI_I */
CREATE TRIGGER ONOFFL_ETIKETI_I FOR ETIKETI
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "ETIKETI" ("ID","NAME","OPISANIE_ETIKET")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(''''||NEW."OPISANIE_ETIKET"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ETIKETI_U */
CREATE TRIGGER ONOFFL_ETIKETI_U FOR ETIKETI
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "ETIKETI" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"OPISANIE_ETIKET"='||COALESCE(''''||NEW."OPISANIE_ETIKET"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_FIRMI_D */
CREATE TRIGGER ONOFFL_FIRMI_D FOR FIRMI
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "FIRMI" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_FIRMI_I */
CREATE TRIGGER ONOFFL_FIRMI_I FOR FIRMI
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "FIRMI" ("ID","NAME_FAK","COMMENT","ADRES","MOL","DAN_NUM","BULSTAT","REG_DDS","EMAIL","HTTP","TEL","PLACE_ID","IDNOMDDS")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME_FAK"||'''','NULL')||','
||COALESCE(''''||NEW."COMMENT"||'''','NULL')||','
||COALESCE(''''||NEW."ADRES"||'''','NULL')||','
||COALESCE(''''||NEW."MOL"||'''','NULL')||','
||COALESCE(''''||NEW."DAN_NUM"||'''','NULL')||','
||COALESCE(''''||NEW."BULSTAT"||'''','NULL')||','
||COALESCE(''''||NEW."REG_DDS"||'''','NULL')||','
||COALESCE(''''||NEW."EMAIL"||'''','NULL')||','
||COALESCE(''''||NEW."HTTP"||'''','NULL')||','
||COALESCE(''''||NEW."TEL"||'''','NULL')||','
||COALESCE(NEW."PLACE_ID",'NULL')||','
||COALESCE(''''||NEW."IDNOMDDS"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_FIRMI_U */
CREATE TRIGGER ONOFFL_FIRMI_U FOR FIRMI
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "FIRMI" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME_FAK"='||COALESCE(''''||NEW."NAME_FAK"||'''','NULL')||','
||'"COMMENT"='||COALESCE(''''||NEW."COMMENT"||'''','NULL')||','
||'"ADRES"='||COALESCE(''''||NEW."ADRES"||'''','NULL')||','
||'"MOL"='||COALESCE(''''||NEW."MOL"||'''','NULL')||','
||'"DAN_NUM"='||COALESCE(''''||NEW."DAN_NUM"||'''','NULL')||','
||'"BULSTAT"='||COALESCE(''''||NEW."BULSTAT"||'''','NULL')||','
||'"REG_DDS"='||COALESCE(''''||NEW."REG_DDS"||'''','NULL')||','
||'"EMAIL"='||COALESCE(''''||NEW."EMAIL"||'''','NULL')||','
||'"HTTP"='||COALESCE(''''||NEW."HTTP"||'''','NULL')||','
||'"TEL"='||COALESCE(''''||NEW."TEL"||'''','NULL')||','
||'"PLACE_ID"='||COALESCE(NEW."PLACE_ID",'NULL')||','
||'"IDNOMDDS"='||COALESCE(''''||NEW."IDNOMDDS"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_GARANCII_D */
CREATE TRIGGER ONOFFL_GARANCII_D FOR GARANCII
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "GARANCII" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_GARANCII_I */
CREATE TRIGGER ONOFFL_GARANCII_I FOR GARANCII
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "GARANCII" ("NAME","ID")
VALUES ('||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_GARANCII_U */
CREATE TRIGGER ONOFFL_GARANCII_U FOR GARANCII
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "GARANCII" SET '
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"ID"='||COALESCE(NEW."ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_IZP_TIP_D */
CREATE TRIGGER ONOFFL_IZP_TIP_D FOR IZP_TIP
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "IZP_TIP" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_IZP_TIP_I */
CREATE TRIGGER ONOFFL_IZP_TIP_I FOR IZP_TIP
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "IZP_TIP" ("ID","NAME","USE_KLI","USE_COMMENT")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(''''||NEW."USE_KLI"||'''','NULL')||','
||COALESCE(''''||NEW."USE_COMMENT"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_IZP_TIP_U */
CREATE TRIGGER ONOFFL_IZP_TIP_U FOR IZP_TIP
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "IZP_TIP" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"USE_KLI"='||COALESCE(''''||NEW."USE_KLI"||'''','NULL')||','
||'"USE_COMMENT"='||COALESCE(''''||NEW."USE_COMMENT"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KASA_D */
CREATE TRIGGER ONOFFL_KASA_D FOR KASA
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "KASA" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KASA_I */
CREATE TRIGGER ONOFFL_KASA_I FOR KASA
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "KASA" ("ID","NAME","USER_ID","IS_ACTIVE","OBEKT_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."USER_ID",'NULL')||','
||COALESCE(NEW."IS_ACTIVE",'NULL')||','
||COALESCE(NEW."OBEKT_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KASA_U */
CREATE TRIGGER ONOFFL_KASA_U FOR KASA
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "KASA" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||','
||'"IS_ACTIVE"='||COALESCE(NEW."IS_ACTIVE",'NULL')||','
||'"OBEKT_ID"='||COALESCE(NEW."OBEKT_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_ABONAMENT_D */
CREATE TRIGGER ONOFFL_KLI_ABONAMENT_D FOR KLI_ABONAMENT
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "KLI_ABONAMENT" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_ABONAMENT_I */
CREATE TRIGGER ONOFFL_KLI_ABONAMENT_I FOR KLI_ABONAMENT
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "KLI_ABONAMENT" ("ID","ABONAMENT_DO","KLI_ID","OBEKT_ID","TIP_ABONAMENT")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."ABONAMENT_DO"||'''','NULL')||','
||COALESCE(NEW."KLI_ID",'NULL')||','
||COALESCE(NEW."OBEKT_ID",'NULL')||','
||COALESCE(NEW."TIP_ABONAMENT",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_ABONAMENT_U */
CREATE TRIGGER ONOFFL_KLI_ABONAMENT_U FOR KLI_ABONAMENT
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "KLI_ABONAMENT" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"ABONAMENT_DO"='||COALESCE(''''||NEW."ABONAMENT_DO"||'''','NULL')||','
||'"KLI_ID"='||COALESCE(NEW."KLI_ID",'NULL')||','
||'"OBEKT_ID"='||COALESCE(NEW."OBEKT_ID",'NULL')||','
||'"TIP_ABONAMENT"='||COALESCE(NEW."TIP_ABONAMENT",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_D */
CREATE TRIGGER ONOFFL_KLI_D FOR KLI
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "KLI" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_DIST_NODE_D */
CREATE TRIGGER ONOFFL_KLI_DIST_NODE_D FOR KLI_DIST_NODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "KLI_DIST_NODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_DIST_NODE_I */
CREATE TRIGGER ONOFFL_KLI_DIST_NODE_I FOR KLI_DIST_NODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "KLI_DIST_NODE" ("ID","KLI_ID","DIST_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."KLI_ID",'NULL')||','
||COALESCE(NEW."DIST_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_DIST_NODE_U */
CREATE TRIGGER ONOFFL_KLI_DIST_NODE_U FOR KLI_DIST_NODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "KLI_DIST_NODE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"KLI_ID"='||COALESCE(NEW."KLI_ID",'NULL')||','
||'"DIST_ID"='||COALESCE(NEW."DIST_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_GROUP_D */
CREATE TRIGGER ONOFFL_KLI_GROUP_D FOR KLI_GROUP
INACTIVE AFTER DELETE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'delete from  KLI_GROUP where "ID"='||old.ID,(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_KLI_GROUP_I */
CREATE TRIGGER ONOFFL_KLI_GROUP_I FOR KLI_GROUP
INACTIVE AFTER INSERT POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'insert into KLI_GROUP ("ID",
"NAME",
"CODE",
"PARENT")  values ('||coalesce(new."ID",'NULL')||' , '
||coalesce(''''||new."NAME"||'''','NULL')||' , '
||coalesce(''''||new."CODE"||'''','NULL')||' , '
||coalesce(new."PARENT",'NULL')||');',
(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_KLI_GROUP_U */
CREATE TRIGGER ONOFFL_KLI_GROUP_U FOR KLI_GROUP
INACTIVE AFTER UPDATE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'update KLI_GROUP SET '||'"ID"='||coalesce(new."ID",'NULL')||' , '
||'"NAME"='||coalesce(''''||new."NAME"||'''','NULL')||' , '
||'"CODE"='||coalesce(''''||new."CODE"||'''','NULL')||' , '
||'"PARENT"='||coalesce(new."PARENT",'NULL')||
' WHERE ID='||old.ID , 
(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_KLI_I */
CREATE TRIGGER ONOFFL_KLI_I FOR KLI
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "KLI" ("ID","KLI_GROUP_ID","CODE","NAME","KLIENT","DOSTAV","PROIZV","PERCENT","COMMENT","ADRES","TEL","DIST","FOLDER","ZA_KASA","FIRMA_ID","FLAG_CHECK","OBEKT_ID","PLACE_ID","PADEJ","DEF_SEL_ID","TIP_PRINT","DEF_DOST_PRINT","DEF_PROD_PRINT","DEF_FAK_PRINT","DEF_MOVE_PRINT","PADEJ_DDS")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."KLI_GROUP_ID",'NULL')||','
||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(''''||NEW."KLIENT"||'''','NULL')||','
||COALESCE(''''||NEW."DOSTAV"||'''','NULL')||','
||COALESCE(''''||NEW."PROIZV"||'''','NULL')||','
||COALESCE(NEW."PERCENT",'NULL')||','
||COALESCE(''''||NEW."COMMENT"||'''','NULL')||','
||COALESCE(''''||NEW."ADRES"||'''','NULL')||','
||COALESCE(''''||NEW."TEL"||'''','NULL')||','
||COALESCE(''''||NEW."DIST"||'''','NULL')||','
||COALESCE(''''||NEW."FOLDER"||'''','NULL')||','
||COALESCE(''''||NEW."ZA_KASA"||'''','NULL')||','
||COALESCE(NEW."FIRMA_ID",'NULL')||','
||COALESCE(NEW."FLAG_CHECK",0)||','
||COALESCE(NEW."OBEKT_ID",'NULL')||','
||COALESCE(NEW."PLACE_ID",'NULL')||','
||COALESCE(NEW."PADEJ",0)||','
||COALESCE(NEW."DEF_SEL_ID",'NULL')||','
||COALESCE(NEW."TIP_PRINT",'NULL')||','
||COALESCE(''''||NEW."DEF_DOST_PRINT"||'''','NULL')||','
||COALESCE(''''||NEW."DEF_PROD_PRINT"||'''','NULL')||','
||COALESCE(''''||NEW."DEF_FAK_PRINT"||'''','NULL')||','
||COALESCE(''''||NEW."DEF_MOVE_PRINT"||'''','NULL')||','
||COALESCE(NEW."PADEJ_DDS", 0)||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_PRAGOVE_D */
CREATE TRIGGER ONOFFL_KLI_PRAGOVE_D FOR KLI_PRAGOVE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "KLI_PRAGOVE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_PRAGOVE_I */
CREATE TRIGGER ONOFFL_KLI_PRAGOVE_I FOR KLI_PRAGOVE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "KLI_PRAGOVE" ("ID","KLI_ID","NOM_PROD","SUMA")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."KLI_ID",'NULL')||','
||COALESCE(NEW."NOM_PROD",'NULL')||','
||COALESCE(NEW."SUMA",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_PRAGOVE_U */
CREATE TRIGGER ONOFFL_KLI_PRAGOVE_U FOR KLI_PRAGOVE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "KLI_PRAGOVE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"KLI_ID"='||COALESCE(NEW."KLI_ID",'NULL')||','
||'"NOM_PROD"='||COALESCE(NEW."NOM_PROD",'NULL')||','
||'"SUMA"='||COALESCE(NEW."SUMA",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_SKLAD_NODE_D */
CREATE TRIGGER ONOFFL_KLI_SKLAD_NODE_D FOR KLI_SKLAD_NODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "KLI_SKLAD_NODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_SKLAD_NODE_I */
CREATE TRIGGER ONOFFL_KLI_SKLAD_NODE_I FOR KLI_SKLAD_NODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "KLI_SKLAD_NODE" ("ID","KLI_ID","SKLAD_ID","SELEKCIQ_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."KLI_ID",'NULL')||','
||COALESCE(NEW."SKLAD_ID",'NULL')||','
||COALESCE(NEW."SELEKCIQ_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_SKLAD_NODE_U */
CREATE TRIGGER ONOFFL_KLI_SKLAD_NODE_U FOR KLI_SKLAD_NODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "KLI_SKLAD_NODE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"KLI_ID"='||COALESCE(NEW."KLI_ID",'NULL')||','
||'"SKLAD_ID"='||COALESCE(NEW."SKLAD_ID",'NULL')||','
||'"SELEKCIQ_ID"='||COALESCE(NEW."SELEKCIQ_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_U */
CREATE TRIGGER ONOFFL_KLI_U FOR KLI
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "KLI" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"KLI_GROUP_ID"='||COALESCE(NEW."KLI_GROUP_ID",'NULL')||','
||'"CODE"='||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"KLIENT"='||COALESCE(''''||NEW."KLIENT"||'''','NULL')||','
||'"DOSTAV"='||COALESCE(''''||NEW."DOSTAV"||'''','NULL')||','
||'"PROIZV"='||COALESCE(''''||NEW."PROIZV"||'''','NULL')||','
||'"PERCENT"='||COALESCE(NEW."PERCENT",'NULL')||','
||'"COMMENT"='||COALESCE(''''||NEW."COMMENT"||'''','NULL')||','
||'"ADRES"='||COALESCE(''''||NEW."ADRES"||'''','NULL')||','
||'"TEL"='||COALESCE(''''||NEW."TEL"||'''','NULL')||','
||'"DIST"='||COALESCE(''''||NEW."DIST"||'''','NULL')||','
||'"FOLDER"='||COALESCE(''''||NEW."FOLDER"||'''','NULL')||','
||'"ZA_KASA"='||COALESCE(''''||NEW."ZA_KASA"||'''','NULL')||','
||'"FIRMA_ID"='||COALESCE(NEW."FIRMA_ID",'NULL')||','
||'"FLAG_CHECK"='||COALESCE(NEW."FLAG_CHECK",'NULL')||','
||'"OBEKT_ID"='||COALESCE(NEW."OBEKT_ID",'NULL')||','
||'"PLACE_ID"='||COALESCE(NEW."PLACE_ID",'NULL')||','
||'"PADEJ"='||COALESCE(NEW."PADEJ",'NULL')||','
||'"DEF_SEL_ID"='||COALESCE(NEW."DEF_SEL_ID",'NULL')||','
||'"TIP_PRINT"='||COALESCE(NEW."TIP_PRINT",'NULL')||','
||'"DEF_DOST_PRINT"='||COALESCE(''''||NEW."DEF_DOST_PRINT"||'''','NULL')||','
||'"DEF_PROD_PRINT"='||COALESCE(''''||NEW."DEF_PROD_PRINT"||'''','NULL')||','
||'"DEF_FAK_PRINT"='||COALESCE(''''||NEW."DEF_FAK_PRINT"||'''','NULL')||','
||'"DEF_MOVE_PRINT"='||COALESCE(''''||NEW."DEF_MOVE_PRINT"||'''','NULL')||','
||'"PADEJ_DDS"='||COALESCE(NEW."PADEJ_DDS",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_MESA_D */
CREATE TRIGGER ONOFFL_MESA_D FOR MESA
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "MESA" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_MESA_I */
CREATE TRIGGER ONOFFL_MESA_I FOR MESA
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "MESA" ("ID","MARKA","STRANA_R","STRANA_G","STRANA_K","ELEMENT_ID","TIP","AGE")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."MARKA"||'''','NULL')||','
||COALESCE(NEW."STRANA_R",'NULL')||','
||COALESCE(NEW."STRANA_G",'NULL')||','
||COALESCE(NEW."STRANA_K",'NULL')||','
||COALESCE(NEW."ELEMENT_ID",'NULL')||','
||COALESCE(NEW."TIP",'NULL')||','
||COALESCE(''''||NEW."AGE"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_MESA_TIP_D */
CREATE TRIGGER ONOFFL_MESA_TIP_D FOR MESA_TIP
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "MESA_TIP" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_MESA_TIP_I */
CREATE TRIGGER ONOFFL_MESA_TIP_I FOR MESA_TIP
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "MESA_TIP" ("ID","NAME")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_MESA_TIP_U */
CREATE TRIGGER ONOFFL_MESA_TIP_U FOR MESA_TIP
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "MESA_TIP" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_MESA_U */
CREATE TRIGGER ONOFFL_MESA_U FOR MESA
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "MESA" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"MARKA"='||COALESCE(''''||NEW."MARKA"||'''','NULL')||','
||'"STRANA_R"='||COALESCE(NEW."STRANA_R",'NULL')||','
||'"STRANA_G"='||COALESCE(NEW."STRANA_G",'NULL')||','
||'"STRANA_K"='||COALESCE(NEW."STRANA_K",'NULL')||','
||'"ELEMENT_ID"='||COALESCE(NEW."ELEMENT_ID",'NULL')||','
||'"TIP"='||COALESCE(NEW."TIP",'NULL')||','
||'"AGE"='||COALESCE(''''||NEW."AGE"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ME_D */
CREATE TRIGGER ONOFFL_ME_D FOR ME
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "ME" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ME_I */
CREATE TRIGGER ONOFFL_ME_I FOR ME
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "ME" ("ID","NAME","NAME_LONG","KOEF","IS_BROI","PREFIX")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(''''||NEW."NAME_LONG"||'''','NULL')||','
||COALESCE(NEW."KOEF",'NULL')||','
||COALESCE(NEW."IS_BROI",0)||','
||COALESCE(''''||NEW."PREFIX"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ME_U */
CREATE TRIGGER ONOFFL_ME_U FOR ME
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "ME" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"NAME_LONG"='||COALESCE(''''||NEW."NAME_LONG"||'''','NULL')||','
||'"KOEF"='||COALESCE(NEW."KOEF",'NULL')||','
||'"IS_BROI"='||COALESCE(NEW."IS_BROI",'NULL')||','
||'"PREFIX"='||COALESCE(''''||NEW."PREFIX"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_OBEKT_D */
CREATE TRIGGER ONOFFL_OBEKT_D FOR OBEKT
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "OBEKT" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_OBEKT_I */
CREATE TRIGGER ONOFFL_OBEKT_I FOR OBEKT
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "OBEKT" ("ID","NAME","GARANCIA_NUM","FAK_NUM","PLACE_ID","LOCAL_FAK_NUM")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."GARANCIA_NUM",'NULL')||','
||COALESCE(''''||NEW."FAK_NUM"||'''','NULL')||','
||COALESCE(NEW."PLACE_ID",'NULL')||','
||COALESCE(''''||NEW."LOCAL_FAK_NUM"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_OBEKT_U */
CREATE TRIGGER ONOFFL_OBEKT_U FOR OBEKT
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "OBEKT" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"GARANCIA_NUM"='||COALESCE(NEW."GARANCIA_NUM",'NULL')||','
||'"FAK_NUM"='||COALESCE(''''||NEW."FAK_NUM"||'''','NULL')||','
||'"PLACE_ID"='||COALESCE(NEW."PLACE_ID",'NULL')||','
||'"LOCAL_FAK_NUM"='||COALESCE(''''||NEW."LOCAL_FAK_NUM"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_OWNER_BANKI_D */
CREATE TRIGGER ONOFFL_OWNER_BANKI_D FOR OWNER_BANKI
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "OWNER_BANKI" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_OWNER_BANKI_I */
CREATE TRIGGER ONOFFL_OWNER_BANKI_I FOR OWNER_BANKI
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "OWNER_BANKI" ("ID","BANKA","KOD","SMETKA","OWNER_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."BANKA"||'''','NULL')||','
||COALESCE(''''||NEW."KOD"||'''','NULL')||','
||COALESCE(''''||NEW."SMETKA"||'''','NULL')||','
||COALESCE(NEW."OWNER_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_OWNER_BANKI_U */
CREATE TRIGGER ONOFFL_OWNER_BANKI_U FOR OWNER_BANKI
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "OWNER_BANKI" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"BANKA"='||COALESCE(''''||NEW."BANKA"||'''','NULL')||','
||'"KOD"='||COALESCE(''''||NEW."KOD"||'''','NULL')||','
||'"SMETKA"='||COALESCE(''''||NEW."SMETKA"||'''','NULL')||','
||'"OWNER_ID"='||COALESCE(NEW."OWNER_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PARI_IO_D */
CREATE TRIGGER ONOFFL_PARI_IO_D FOR PARI_IO
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "PARI_IO" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PARI_IO_I */
CREATE TRIGGER ONOFFL_PARI_IO_I FOR PARI_IO
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "PARI_IO" ("ID","NAME","TIP","PARENT","USE_KLI","FAK")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."TIP",'NULL')||','
||COALESCE(NEW."PARENT",'NULL')||','
||COALESCE(''''||NEW."USE_KLI"||'''','NULL')||','
||COALESCE(''''||NEW."FAK"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PARI_IO_U */
CREATE TRIGGER ONOFFL_PARI_IO_U FOR PARI_IO
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "PARI_IO" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"TIP"='||COALESCE(NEW."TIP",'NULL')||','
||'"PARENT"='||COALESCE(NEW."PARENT",'NULL')||','
||'"USE_KLI"='||COALESCE(''''||NEW."USE_KLI"||'''','NULL')||','
||'"FAK"='||COALESCE(''''||NEW."FAK"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PATHS_D */
CREATE TRIGGER ONOFFL_PATHS_D FOR PATHS
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "PATHS" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PATHS_I */
CREATE TRIGGER ONOFFL_PATHS_I FOR PATHS
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "PATHS" ("ID","FROM_PLACE_ID","TO_PLACE_ID","DISTANCE","MARSHRUT")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."FROM_PLACE_ID",'NULL')||','
||COALESCE(NEW."TO_PLACE_ID",'NULL')||','
||COALESCE(NEW."DISTANCE",'NULL')||','
||COALESCE(''''||NEW."MARSHRUT"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PATHS_U */
CREATE TRIGGER ONOFFL_PATHS_U FOR PATHS
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "PATHS" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"FROM_PLACE_ID"='||COALESCE(NEW."FROM_PLACE_ID",'NULL')||','
||'"TO_PLACE_ID"='||COALESCE(NEW."TO_PLACE_ID",'NULL')||','
||'"DISTANCE"='||COALESCE(NEW."DISTANCE",'NULL')||','
||'"MARSHRUT"='||COALESCE(''''||NEW."MARSHRUT"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PLACE_D */
CREATE TRIGGER ONOFFL_PLACE_D FOR PLACE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "PLACE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PLACE_I */
CREATE TRIGGER ONOFFL_PLACE_I FOR PLACE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "PLACE" ("ID","NAME")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PLACE_U */
CREATE TRIGGER ONOFFL_PLACE_U FOR PLACE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "PLACE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_POCKET_SHOP_D */
CREATE TRIGGER ONOFFL_POCKET_SHOP_D FOR POCKET_SHOP
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "POCKET_SHOP" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_POCKET_SHOP_I */
CREATE TRIGGER ONOFFL_POCKET_SHOP_I FOR POCKET_SHOP
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "POCKET_SHOP" ("ID","SKLAD_ID","USER_ID","PRINTER","SMETKI","KOLICHESTWA","PATH","HIDE_QTY","VSICHKI","CL_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SKLAD_ID",'NULL')||','
||COALESCE(NEW."USER_ID",'NULL')||','
||COALESCE(''''||NEW."PRINTER"||'''','NULL')||','
||COALESCE(''''||NEW."SMETKI"||'''','NULL')||','
||COALESCE(''''||NEW."KOLICHESTWA"||'''','NULL')||','
||COALESCE(''''||NEW."PATH"||'''','NULL')||','
||COALESCE(''''||NEW."HIDE_QTY"||'''','NULL')||','
||COALESCE(NEW."VSICHKI",'NULL')||','
||COALESCE(NEW."CL_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_POCKET_SHOP_U */
CREATE TRIGGER ONOFFL_POCKET_SHOP_U FOR POCKET_SHOP
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "POCKET_SHOP" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SKLAD_ID"='||COALESCE(NEW."SKLAD_ID",'NULL')||','
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||','
||'"PRINTER"='||COALESCE(''''||NEW."PRINTER"||'''','NULL')||','
||'"SMETKI"='||COALESCE(''''||NEW."SMETKI"||'''','NULL')||','
||'"KOLICHESTWA"='||COALESCE(''''||NEW."KOLICHESTWA"||'''','NULL')||','
||'"PATH"='||COALESCE(''''||NEW."PATH"||'''','NULL')||','
||'"HIDE_QTY"='||COALESCE(''''||NEW."HIDE_QTY"||'''','NULL')||','
||'"VSICHKI"='||COALESCE(NEW."VSICHKI",'NULL')||','
||'"CL_ID"='||COALESCE(NEW."CL_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PROP_NODE_D */
CREATE TRIGGER ONOFFL_PROP_NODE_D FOR PROP_NODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "PROP_NODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PROP_NODE_I */
CREATE TRIGGER ONOFFL_PROP_NODE_I FOR PROP_NODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "PROP_NODE" ("ID","MAJOR_PROP_ID","MINOR_PROP_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."MAJOR_PROP_ID",'NULL')||','
||COALESCE(NEW."MINOR_PROP_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PROP_NODE_U */
CREATE TRIGGER ONOFFL_PROP_NODE_U FOR PROP_NODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "PROP_NODE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"MAJOR_PROP_ID"='||COALESCE(NEW."MAJOR_PROP_ID",'NULL')||','
||'"MINOR_PROP_ID"='||COALESCE(NEW."MINOR_PROP_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZFASOVKA_D */
CREATE TRIGGER ONOFFL_RAZFASOVKA_D FOR RAZFASOVKA
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "RAZFASOVKA" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZFASOVKA_I */
CREATE TRIGGER ONOFFL_RAZFASOVKA_I FOR RAZFASOVKA
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "RAZFASOVKA" ("ID","RAZ_TIP_ID","KOL","SIMPLE_ID","RAZ_ELEMENT_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."RAZ_TIP_ID",'NULL')||','
||COALESCE(NEW."KOL",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."RAZ_ELEMENT_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZFASOVKA_U */
CREATE TRIGGER ONOFFL_RAZFASOVKA_U FOR RAZFASOVKA
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "RAZFASOVKA" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"RAZ_TIP_ID"='||COALESCE(NEW."RAZ_TIP_ID",'NULL')||','
||'"KOL"='||COALESCE(NEW."KOL",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"RAZ_ELEMENT_ID"='||COALESCE(NEW."RAZ_ELEMENT_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZ_ELEMENT_D */
CREATE TRIGGER ONOFFL_RAZ_ELEMENT_D FOR RAZ_ELEMENT
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "RAZ_ELEMENT" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZ_ELEMENT_I */
CREATE TRIGGER ONOFFL_RAZ_ELEMENT_I FOR RAZ_ELEMENT
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "RAZ_ELEMENT" ("ID","NAME")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZ_ELEMENT_U */
CREATE TRIGGER ONOFFL_RAZ_ELEMENT_U FOR RAZ_ELEMENT
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "RAZ_ELEMENT" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZ_TIP_D */
CREATE TRIGGER ONOFFL_RAZ_TIP_D FOR RAZ_TIP
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "RAZ_TIP" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZ_TIP_I */
CREATE TRIGGER ONOFFL_RAZ_TIP_I FOR RAZ_TIP
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "RAZ_TIP" ("ID","NAME","AMBALAJ")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."AMBALAJ",0)||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZ_TIP_U */
CREATE TRIGGER ONOFFL_RAZ_TIP_U FOR RAZ_TIP
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "RAZ_TIP" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"AMBALAJ"='||COALESCE(NEW."AMBALAJ",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ROUND_TIP_D */
CREATE TRIGGER ONOFFL_ROUND_TIP_D FOR ROUND_TIP
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "ROUND_TIP" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ROUND_TIP_I */
CREATE TRIGGER ONOFFL_ROUND_TIP_I FOR ROUND_TIP
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "ROUND_TIP" ("ID","NAME","UP_DOWN","COEFFICIENT","PRODUCE")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."UP_DOWN", 0)||','
||COALESCE(NEW."COEFFICIENT",'NULL')||','
||COALESCE(NEW."PRODUCE", 0)||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ROUND_TIP_U */
CREATE TRIGGER ONOFFL_ROUND_TIP_U FOR ROUND_TIP
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "ROUND_TIP" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"UP_DOWN"='||COALESCE(NEW."UP_DOWN",'NULL')||','
||'"COEFFICIENT"='||COALESCE(NEW."COEFFICIENT",'NULL')||','
||'"PRODUCE"='||COALESCE(NEW."PRODUCE",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_D */
CREATE TRIGGER ONOFFL_SELEKCIQ_D FOR SELEKCIQ
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SELEKCIQ" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_I */
CREATE TRIGGER ONOFFL_SELEKCIQ_I FOR SELEKCIQ
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SELEKCIQ" ("USER_ID","DATETIME","ID","NAME","TIP","ACTIVEN")
VALUES ('||COALESCE(NEW."USER_ID",'NULL')||','
||COALESCE(''''||NEW."DATETIME"||'''','NULL')||','
||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."TIP",0)||','
||COALESCE(NEW."ACTIVEN",1)||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_KALK_EL_D */
CREATE TRIGGER ONOFFL_SELEKCIQ_KALK_EL_D FOR SELEKCIQ_KALK_EL
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SELEKCIQ_KALK_EL" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_KALK_EL_I */
CREATE TRIGGER ONOFFL_SELEKCIQ_KALK_EL_I FOR SELEKCIQ_KALK_EL
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SELEKCIQ_KALK_EL" ("ID","SIMPLE_ID","SELEKCIQ_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."SELEKCIQ_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_KALK_EL_U */
CREATE TRIGGER ONOFFL_SELEKCIQ_KALK_EL_U FOR SELEKCIQ_KALK_EL
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SELEKCIQ_KALK_EL" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"SELEKCIQ_ID"='||COALESCE(NEW."SELEKCIQ_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_KLI_EL_D */
CREATE TRIGGER ONOFFL_SELEKCIQ_KLI_EL_D FOR SELEKCIQ_KLI_EL
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SELEKCIQ_KLI_EL" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_KLI_EL_I */
CREATE TRIGGER ONOFFL_SELEKCIQ_KLI_EL_I FOR SELEKCIQ_KLI_EL
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SELEKCIQ_KLI_EL" ("ID","KLI_ID","SELEKCIQ_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."KLI_ID",'NULL')||','
||COALESCE(NEW."SELEKCIQ_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_KLI_EL_U */
CREATE TRIGGER ONOFFL_SELEKCIQ_KLI_EL_U FOR SELEKCIQ_KLI_EL
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SELEKCIQ_KLI_EL" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"KLI_ID"='||COALESCE(NEW."KLI_ID",'NULL')||','
||'"SELEKCIQ_ID"='||COALESCE(NEW."SELEKCIQ_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_SIM_EL_D */
CREATE TRIGGER ONOFFL_SELEKCIQ_SIM_EL_D FOR SELEKCIQ_SIM_EL
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SELEKCIQ_SIM_EL" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_SIM_EL_I */
CREATE TRIGGER ONOFFL_SELEKCIQ_SIM_EL_I FOR SELEKCIQ_SIM_EL
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SELEKCIQ_SIM_EL" ("ID","SIMPLE_ID","SELEKCIQ_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."SELEKCIQ_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_SIM_EL_U */
CREATE TRIGGER ONOFFL_SELEKCIQ_SIM_EL_U FOR SELEKCIQ_SIM_EL
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SELEKCIQ_SIM_EL" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"SELEKCIQ_ID"='||COALESCE(NEW."SELEKCIQ_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_U */
CREATE TRIGGER ONOFFL_SELEKCIQ_U FOR SELEKCIQ
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SELEKCIQ" SET '
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||','
||'"DATETIME"='||COALESCE(''''||NEW."DATETIME"||'''','NULL')||','
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"TIP"='||COALESCE(NEW."TIP",'NULL')||','
||'"ACTIVEN"='||COALESCE(NEW."ACTIVEN",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_CALC_D */
CREATE TRIGGER ONOFFL_SIMPLE_CALC_D FOR SIMPLE_CALC
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SIMPLE_CALC" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_CALC_I */
CREATE TRIGGER ONOFFL_SIMPLE_CALC_I FOR SIMPLE_CALC
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SIMPLE_CALC" ("ID","SIMPLE_ID","CHILD_SIMPLE_ID","KOL","FORMULA","CHILD_SEL_ID","SEL_TEXT","MIN_KOL","MAX_KOL")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."CHILD_SIMPLE_ID",'NULL')||','
||COALESCE(NEW."KOL",'NULL')||','
||COALESCE(''''||NEW."FORMULA"||'''','NULL')||','
||COALESCE(NEW."CHILD_SEL_ID",'NULL')||','
||COALESCE(''''||NEW."SEL_TEXT"||'''','NULL')||','
||COALESCE(NEW."MIN_KOL",'NULL')||','
||COALESCE(NEW."MAX_KOL",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_CALC_U */
CREATE TRIGGER ONOFFL_SIMPLE_CALC_U FOR SIMPLE_CALC
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SIMPLE_CALC" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"CHILD_SIMPLE_ID"='||COALESCE(NEW."CHILD_SIMPLE_ID",'NULL')||','
||'"KOL"='||COALESCE(NEW."KOL",'NULL')||','
||'"FORMULA"='||COALESCE(''''||NEW."FORMULA"||'''','NULL')||','
||'"CHILD_SEL_ID"='||COALESCE(NEW."CHILD_SEL_ID",'NULL')||','
||'"SEL_TEXT"='||COALESCE(''''||NEW."SEL_TEXT"||'''','NULL')||','
||'"MIN_KOL"='||COALESCE(NEW."MIN_KOL",'NULL')||','
||'"MAX_KOL"='||COALESCE(NEW."MAX_KOL",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_CENI_D */
CREATE TRIGGER ONOFFL_SIMPLE_CENI_D FOR SIMPLE_CENI
INACTIVE AFTER DELETE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'delete from  SIMPLE_CENI where "ID"='||old.ID,(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_SIMPLE_CENI_I */
CREATE TRIGGER ONOFFL_SIMPLE_CENI_I FOR SIMPLE_CENI
INACTIVE AFTER INSERT POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'insert into SIMPLE_CENI ("ID",
"SIMPLE_ID",
"KLI_ID",
"KLI_GROUP_ID",
"CENA",
"PERCENT",
"SIMPLE_GR_ID")  values ('||coalesce(new."ID",'NULL')||' , '
||coalesce(new."SIMPLE_ID",'NULL')||' , '
||coalesce(new."KLI_ID",'NULL')||' , '
||coalesce(new."KLI_GROUP_ID",'NULL')||' , '
||coalesce(new."CENA",'NULL')||' , '
||coalesce(new."PERCENT",'NULL')||' , '
||coalesce(new."SIMPLE_GR_ID",'NULL')||');',
(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_SIMPLE_CENI_U */
CREATE TRIGGER ONOFFL_SIMPLE_CENI_U FOR SIMPLE_CENI
INACTIVE AFTER UPDATE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'update SIMPLE_CENI SET '||'"ID"='||coalesce(new."ID",'NULL')||' , '
||'"SIMPLE_ID"='||coalesce(new."SIMPLE_ID",'NULL')||' , '
||'"KLI_ID"='||coalesce(new."KLI_ID",'NULL')||' , '
||'"KLI_GROUP_ID"='||coalesce(new."KLI_GROUP_ID",'NULL')||' , '
||'"CENA"='||coalesce(new."CENA",'NULL')||' , '
||'"PERCENT"='||coalesce(new."PERCENT",'NULL')||' , '
||'"SIMPLE_GR_ID"='||coalesce(new."SIMPLE_GR_ID",'NULL')||
' WHERE ID='||old.ID , 
(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_SIMPLE_D */
CREATE TRIGGER ONOFFL_SIMPLE_D FOR SIMPLE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SIMPLE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_GROUP_D */
CREATE TRIGGER ONOFFL_SIMPLE_GROUP_D FOR SIMPLE_GROUP
INACTIVE AFTER DELETE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'delete from  SIMPLE_GROUP where "ID"='||old.ID,(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_SIMPLE_GROUP_I */
CREATE TRIGGER ONOFFL_SIMPLE_GROUP_I FOR SIMPLE_GROUP
INACTIVE AFTER INSERT POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'insert into SIMPLE_GROUP ("ID",
"NAME",
"PERCENT_PROD",
"PERCENT_EDRO",
"ROUND_PROD",
"ROUND_EDRO",
"PARENT")  values ('||coalesce(new."ID",'NULL')||' , '
||coalesce(''''||new."NAME"||'''','NULL')||' , '
||coalesce(new."PERCENT_PROD",'NULL')||' , '
||coalesce(new."PERCENT_EDRO",'NULL')||' , '
||coalesce(new."ROUND_PROD",'NULL')||' , '
||coalesce(new."ROUND_EDRO",'NULL')||' , '
||coalesce(new."PARENT",'NULL')||');',
(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_SIMPLE_GROUP_U */
CREATE TRIGGER ONOFFL_SIMPLE_GROUP_U FOR SIMPLE_GROUP
INACTIVE AFTER UPDATE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'update SIMPLE_GROUP SET '||'"ID"='||coalesce(new."ID",'NULL')||' , '
||'"NAME"='||coalesce(''''||new."NAME"||'''','NULL')||' , '
||'"PERCENT_PROD"='||coalesce(new."PERCENT_PROD",'NULL')||' , '
||'"PERCENT_EDRO"='||coalesce(new."PERCENT_EDRO",'NULL')||' , '
||'"ROUND_PROD"='||coalesce(new."ROUND_PROD",'NULL')||' , '
||'"ROUND_EDRO"='||coalesce(new."ROUND_EDRO",'NULL')||' , '
||'"PARENT"='||coalesce(new."PARENT",'NULL')||
' WHERE ID='||old.ID , 
(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_SIMPLE_I */
CREATE TRIGGER ONOFFL_SIMPLE_I FOR SIMPLE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SIMPLE" ("G_KRI_MIN","G_KRI_DOST","BRUTO","CENA_POCKET","KOL_KRI_MAX","KOL_KRI_MIN","CENA_PROD_FAK","CENA_OFERTA","CENA_EDRO","CENA_PROD","DEF_SEL_CALC","G_TIP","G_PERIOD","DEF_SEL_ID","RAZ_TIP_ID","ID","TEMPERATURA","ME2_ID","RAZPAD","GODNOST","ACTIVE_SCALE","AMBALAJ","FLAG_CHECK","DEFAULT_RAZ_ID","DDS","SIMPLE_GROUP_ID","ME_ID","NAME_SHORT","NAME","CODE2","FLAF_AMBALAJ","RSN","USLUGA","LOCK_CENA_PROD","ACTIVE_FAK","ACTIVE","CODE","SUMA_DOST_CALC","GR_ZAMQNA_ID","IS_BONUS","USE_PROP")
VALUES ('||COALESCE(NEW."G_KRI_MIN",'NULL')||','
||COALESCE(NEW."G_KRI_DOST",'NULL')||','
||COALESCE(NEW."BRUTO",'NULL')||','
||COALESCE(NEW."CENA_POCKET", 0)||','
||COALESCE(NEW."KOL_KRI_MAX",'NULL')||','
||COALESCE(NEW."KOL_KRI_MIN",'NULL')||','
||COALESCE(NEW."CENA_PROD_FAK",'NULL')||','
||COALESCE(NEW."CENA_OFERTA",'NULL')||','
||COALESCE(NEW."CENA_EDRO",'NULL')||','
||COALESCE(NEW."CENA_PROD",'NULL')||','
||COALESCE(NEW."DEF_SEL_CALC",'NULL')||','
||COALESCE(NEW."G_TIP",'NULL')||','
||COALESCE(NEW."G_PERIOD",'NULL')||','
||COALESCE(NEW."DEF_SEL_ID",'NULL')||','
||COALESCE(NEW."RAZ_TIP_ID",'NULL')||','
||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."TEMPERATURA"||'''','NULL')||','
||COALESCE(NEW."ME2_ID",'NULL')||','
||COALESCE(NEW."RAZPAD",0)||','
||COALESCE(NEW."GODNOST",0)||','
||COALESCE(NEW."ACTIVE_SCALE",0)||','
||COALESCE(NEW."AMBALAJ",0)||','
||COALESCE(NEW."FLAG_CHECK",0)||','
||COALESCE(NEW."DEFAULT_RAZ_ID",'NULL')||','
||COALESCE(NEW."DDS",20.0)||','
||COALESCE(NEW."SIMPLE_GROUP_ID",'NULL')||','
||COALESCE(NEW."ME_ID",'NULL')||','
||COALESCE(''''||NEW."NAME_SHORT"||'''','NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(''''||NEW."CODE2"||'''','NULL')||','
||COALESCE(''''||NEW."FLAF_AMBALAJ"||'''', 0)||','
||COALESCE(''''||NEW."RSN"||'''', '0')||','
||COALESCE(''''||NEW."USLUGA"||'''', '0')||','
||COALESCE(''''||NEW."LOCK_CENA_PROD"||'''','NULL')||','
||COALESCE(''''||NEW."ACTIVE_FAK"||'''', '1')||','
||COALESCE(''''||NEW."ACTIVE"||'''', '1')||','
||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||COALESCE(NEW."SUMA_DOST_CALC",'NULL')||','
||COALESCE(NEW."GR_ZAMQNA_ID",'NULL')||','
||COALESCE(NEW."IS_BONUS",0)||','
||COALESCE(NEW."USE_PROP",0)||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_KOD_D */
CREATE TRIGGER ONOFFL_SIMPLE_KOD_D FOR SIMPLE_KOD
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SIMPLE_KOD" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_KOD_I */
CREATE TRIGGER ONOFFL_SIMPLE_KOD_I FOR SIMPLE_KOD
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SIMPLE_KOD" ("ID","SIMPLE_ID","KLI_ID","KOD")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."KLI_ID",'NULL')||','
||COALESCE(''''||NEW."KOD"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_KOD_U */
CREATE TRIGGER ONOFFL_SIMPLE_KOD_U FOR SIMPLE_KOD
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SIMPLE_KOD" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"KLI_ID"='||COALESCE(NEW."KLI_ID",'NULL')||','
||'"KOD"='||COALESCE(''''||NEW."KOD"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_D */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_D FOR SIMPLE_PROP
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SIMPLE_PROP" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_I */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_I FOR SIMPLE_PROP
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SIMPLE_PROP" ("ID","NAME")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_MINOR_D */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_MINOR_D FOR SIMPLE_PROP_MINOR
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SIMPLE_PROP_MINOR" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_MINOR_I */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_MINOR_I FOR SIMPLE_PROP_MINOR
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SIMPLE_PROP_MINOR" ("ID","NAME")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_MINOR_U */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_MINOR_U FOR SIMPLE_PROP_MINOR
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SIMPLE_PROP_MINOR" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_NODE_D */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_NODE_D FOR SIMPLE_PROP_NODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SIMPLE_PROP_NODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_NODE_I */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_NODE_I FOR SIMPLE_PROP_NODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SIMPLE_PROP_NODE" ("ID","SIMPLE_ID","MAJOR_PROP_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."MAJOR_PROP_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_NODE_U */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_NODE_U FOR SIMPLE_PROP_NODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SIMPLE_PROP_NODE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"MAJOR_PROP_ID"='||COALESCE(NEW."MAJOR_PROP_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_U */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_U FOR SIMPLE_PROP
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SIMPLE_PROP" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_RAZ_D */
CREATE TRIGGER ONOFFL_SIMPLE_RAZ_D FOR SIMPLE_RAZ
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SIMPLE_RAZ" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_RAZ_I */
CREATE TRIGGER ONOFFL_SIMPLE_RAZ_I FOR SIMPLE_RAZ
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SIMPLE_RAZ" ("ID","NAME","SIMPLE_ID","KOL")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."KOL",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_RAZ_U */
CREATE TRIGGER ONOFFL_SIMPLE_RAZ_U FOR SIMPLE_RAZ
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SIMPLE_RAZ" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"KOL"='||COALESCE(NEW."KOL",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_U */
CREATE TRIGGER ONOFFL_SIMPLE_U FOR SIMPLE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SIMPLE" SET '
||'"G_KRI_MIN"='||COALESCE(NEW."G_KRI_MIN",'NULL')||','
||'"G_KRI_DOST"='||COALESCE(NEW."G_KRI_DOST",'NULL')||','
||'"BRUTO"='||COALESCE(NEW."BRUTO",'NULL')||','
||'"CENA_POCKET"='||COALESCE(NEW."CENA_POCKET",'NULL')||','
||'"KOL_KRI_MAX"='||COALESCE(NEW."KOL_KRI_MAX",'NULL')||','
||'"KOL_KRI_MIN"='||COALESCE(NEW."KOL_KRI_MIN",'NULL')||','
||'"CENA_PROD_FAK"='||COALESCE(NEW."CENA_PROD_FAK",'NULL')||','
||'"CENA_OFERTA"='||COALESCE(NEW."CENA_OFERTA",'NULL')||','
||'"CENA_EDRO"='||COALESCE(NEW."CENA_EDRO",'NULL')||','
||'"CENA_PROD"='||COALESCE(NEW."CENA_PROD",'NULL')||','
||'"DEF_SEL_CALC"='||COALESCE(NEW."DEF_SEL_CALC",'NULL')||','
||'"G_TIP"='||COALESCE(NEW."G_TIP",'NULL')||','
||'"G_PERIOD"='||COALESCE(NEW."G_PERIOD",'NULL')||','
||'"DEF_SEL_ID"='||COALESCE(NEW."DEF_SEL_ID",'NULL')||','
||'"RAZ_TIP_ID"='||COALESCE(NEW."RAZ_TIP_ID",'NULL')||','
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"TEMPERATURA"='||COALESCE(''''||NEW."TEMPERATURA"||'''','NULL')||','
||'"ME2_ID"='||COALESCE(NEW."ME2_ID",'NULL')||','
||'"RAZPAD"='||COALESCE(NEW."RAZPAD",'NULL')||','
||'"GODNOST"='||COALESCE(NEW."GODNOST",'NULL')||','
||'"ACTIVE_SCALE"='||COALESCE(NEW."ACTIVE_SCALE",'NULL')||','
||'"AMBALAJ"='||COALESCE(NEW."AMBALAJ",'NULL')||','
||'"FLAG_CHECK"='||COALESCE(NEW."FLAG_CHECK",'NULL')||','
||'"DEFAULT_RAZ_ID"='||COALESCE(NEW."DEFAULT_RAZ_ID",'NULL')||','
||'"DDS"='||COALESCE(NEW."DDS",'NULL')||','
||'"SIMPLE_GROUP_ID"='||COALESCE(NEW."SIMPLE_GROUP_ID",'NULL')||','
||'"ME_ID"='||COALESCE(NEW."ME_ID",'NULL')||','
||'"NAME_SHORT"='||COALESCE(''''||NEW."NAME_SHORT"||'''','NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"CODE2"='||COALESCE(''''||NEW."CODE2"||'''','NULL')||','
||'"FLAF_AMBALAJ"='||COALESCE(''''||NEW."FLAF_AMBALAJ"||'''','NULL')||','
||'"RSN"='||COALESCE(''''||NEW."RSN"||'''','NULL')||','
||'"USLUGA"='||COALESCE(''''||NEW."USLUGA"||'''','NULL')||','
||'"LOCK_CENA_PROD"='||COALESCE(''''||NEW."LOCK_CENA_PROD"||'''','NULL')||','
||'"ACTIVE_FAK"='||COALESCE(''''||NEW."ACTIVE_FAK"||'''','NULL')||','
||'"ACTIVE"='||COALESCE(''''||NEW."ACTIVE"||'''','NULL')||','
||'"CODE"='||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||'"SUMA_DOST_CALC"='||COALESCE(NEW."SUMA_DOST_CALC",'NULL')||','
||'"GR_ZAMQNA_ID"='||COALESCE(NEW."GR_ZAMQNA_ID",'NULL')||','
||'"IS_BONUS"='||COALESCE(NEW."IS_BONUS",'NULL')||','
||'"USE_PROP"='||COALESCE(NEW."USE_PROP",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_D */
CREATE TRIGGER ONOFFL_SKLAD_D FOR SKLAD
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SKLAD" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_I */
CREATE TRIGGER ONOFFL_SKLAD_I FOR SKLAD
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SKLAD" ("ID","NAME","OBEKT_ID","USER_ID","IS_SYSTEM","POCKET","IS_ACTIVE")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."OBEKT_ID",'NULL')||','
||COALESCE(NEW."USER_ID",'NULL')||','
||COALESCE(NEW."IS_SYSTEM",0)||','
||COALESCE(''''||NEW."POCKET"||'''', '0')||','
||COALESCE(NEW."IS_ACTIVE",1)||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_MOL_D */
CREATE TRIGGER ONOFFL_SKLAD_MOL_D FOR SKLAD_MOL
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SKLAD_MOL" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_MOL_I */
CREATE TRIGGER ONOFFL_SKLAD_MOL_I FOR SKLAD_MOL
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SKLAD_MOL" ("ID","SKLAD_ID","USER_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SKLAD_ID",'NULL')||','
||COALESCE(NEW."USER_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_MOL_U */
CREATE TRIGGER ONOFFL_SKLAD_MOL_U FOR SKLAD_MOL
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SKLAD_MOL" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SKLAD_ID"='||COALESCE(NEW."SKLAD_ID",'NULL')||','
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_SELEKCIQ_NODE_D */
CREATE TRIGGER ONOFFL_SKLAD_SELEKCIQ_NODE_D FOR SKLAD_SELEKCIQ_NODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SKLAD_SELEKCIQ_NODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_SELEKCIQ_NODE_I */
CREATE TRIGGER ONOFFL_SKLAD_SELEKCIQ_NODE_I FOR SKLAD_SELEKCIQ_NODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SKLAD_SELEKCIQ_NODE" ("ID_SELEKCIQ","ID_SKLAD","ID")
VALUES ('||COALESCE(NEW."ID_SELEKCIQ",'NULL')||','
||COALESCE(NEW."ID_SKLAD",'NULL')||','
||COALESCE(NEW."ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_SELEKCIQ_NODE_U */
CREATE TRIGGER ONOFFL_SKLAD_SELEKCIQ_NODE_U FOR SKLAD_SELEKCIQ_NODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SKLAD_SELEKCIQ_NODE" SET '
||'"ID_SELEKCIQ"='||COALESCE(NEW."ID_SELEKCIQ",'NULL')||','
||'"ID_SKLAD"='||COALESCE(NEW."ID_SKLAD",'NULL')||','
||'"ID"='||COALESCE(NEW."ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_U */
CREATE TRIGGER ONOFFL_SKLAD_U FOR SKLAD
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SKLAD" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"OBEKT_ID"='||COALESCE(NEW."OBEKT_ID",'NULL')||','
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||','
||'"IS_SYSTEM"='||COALESCE(NEW."IS_SYSTEM",'NULL')||','
||'"POCKET"='||COALESCE(''''||NEW."POCKET"||'''','NULL')||','
||'"IS_ACTIVE"='||COALESCE(NEW."IS_ACTIVE",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_TIP_REFUSED_D */
CREATE TRIGGER ONOFFL_TIP_REFUSED_D FOR TIP_REFUSED
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "TIP_REFUSED" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_TIP_REFUSED_I */
CREATE TRIGGER ONOFFL_TIP_REFUSED_I FOR TIP_REFUSED
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "TIP_REFUSED" ("ID","NAME")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_TIP_REFUSED_U */
CREATE TRIGGER ONOFFL_TIP_REFUSED_U FOR TIP_REFUSED
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "TIP_REFUSED" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_D */
CREATE TRIGGER ONOFFL_USER_D FOR "USER"
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "USER" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_I */
CREATE TRIGGER ONOFFL_USER_I FOR "USER"
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "USER" ("RIGHTS2","RIGHTS","NAME","DEF_KASA_ID","EGN","IS_WORKED","TEL","PASS","ID","PASS2")
VALUES ('||COALESCE(NEW."RIGHTS2",'NULL')||','
||COALESCE(NEW."RIGHTS",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."DEF_KASA_ID",'NULL')||','
||COALESCE(''''||NEW."EGN"||'''','NULL')||','
||COALESCE(NEW."IS_WORKED",0)||','
||COALESCE(''''||NEW."TEL"||'''','NULL')||','
||COALESCE(''''||NEW."PASS"||'''','NULL')||','
||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."PASS2"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_KASA_NODE_D */
CREATE TRIGGER ONOFFL_USER_KASA_NODE_D FOR USER_KASA_NODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "USER_KASA_NODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_KASA_NODE_I */
CREATE TRIGGER ONOFFL_USER_KASA_NODE_I FOR USER_KASA_NODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "USER_KASA_NODE" ("ID","KASA_ID","USER_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."KASA_ID",'NULL')||','
||COALESCE(NEW."USER_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_KASA_NODE_U */
CREATE TRIGGER ONOFFL_USER_KASA_NODE_U FOR USER_KASA_NODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "USER_KASA_NODE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"KASA_ID"='||COALESCE(NEW."KASA_ID",'NULL')||','
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_SKLAD_NODE_D */
CREATE TRIGGER ONOFFL_USER_SKLAD_NODE_D FOR USER_SKLAD_NODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "USER_SKLAD_NODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_SKLAD_NODE_I */
CREATE TRIGGER ONOFFL_USER_SKLAD_NODE_I FOR USER_SKLAD_NODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "USER_SKLAD_NODE" ("USER_ID","SKLAD_ID","ID","SPR_RIGHT","OPR_RIGHT")
VALUES ('||COALESCE(NEW."USER_ID",'NULL')||','
||COALESCE(NEW."SKLAD_ID",'NULL')||','
||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."SPR_RIGHT"||'''','NULL')||','
||COALESCE(''''||NEW."OPR_RIGHT"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_SKLAD_NODE_U */
CREATE TRIGGER ONOFFL_USER_SKLAD_NODE_U FOR USER_SKLAD_NODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "USER_SKLAD_NODE" SET '
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||','
||'"SKLAD_ID"='||COALESCE(NEW."SKLAD_ID",'NULL')||','
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SPR_RIGHT"='||COALESCE(''''||NEW."SPR_RIGHT"||'''','NULL')||','
||'"OPR_RIGHT"='||COALESCE(''''||NEW."OPR_RIGHT"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_U */
CREATE TRIGGER ONOFFL_USER_U FOR "USER"
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "USER" SET '
||'"RIGHTS2"='||COALESCE(NEW."RIGHTS2",'NULL')||','
||'"RIGHTS"='||COALESCE(NEW."RIGHTS",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"DEF_KASA_ID"='||COALESCE(NEW."DEF_KASA_ID",'NULL')||','
||'"EGN"='||COALESCE(''''||NEW."EGN"||'''','NULL')||','
||'"IS_WORKED"='||COALESCE(NEW."IS_WORKED",'NULL')||','
||'"TEL"='||COALESCE(''''||NEW."TEL"||'''','NULL')||','
||'"PASS"='||COALESCE(''''||NEW."PASS"||'''','NULL')||','
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"PASS2"='||COALESCE(''''||NEW."PASS2"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_VALUTA_D */
CREATE TRIGGER ONOFFL_VALUTA_D FOR VALUTA
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "VALUTA" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_VALUTA_I */
CREATE TRIGGER ONOFFL_VALUTA_I FOR VALUTA
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "VALUTA" ("ID","CODE","NAME","KURS")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."KURS",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_VALUTA_U */
CREATE TRIGGER ONOFFL_VALUTA_U FOR VALUTA
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "VALUTA" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"CODE"='||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"KURS"='||COALESCE(NEW."KURS",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ON_OFF_LINE_LOG_AI */
CREATE TRIGGER ON_OFF_LINE_LOG_AI FOR ON_OFF_LINE_LOG
ACTIVE AFTER INSERT POSITION 0
AS
begin
  update "SYSTEM" set ONOFF_LAST_RESEEVED_ID=new.id;
  POST_EVENT 'ONOFF_LINE_LOG_REFRESH';
end
^


/* Trigger: OPENED_FORMS_SYS_BI */
CREATE TRIGGER OPENED_FORMS_SYS_BI FOR OPENED_FORMS_SYS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPENED_FORMS_SYS_ID,1); 
END
^


/* Trigger: OPRGARANCIA_BI */
CREATE TRIGGER OPRGARANCIA_BI FOR OPRGARANCIA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OPRGARANCIA_ID,1);
END
^


/* Trigger: OPR_AI0 */
CREATE TRIGGER OPR_AI0 FOR OPR
ACTIVE AFTER INSERT POSITION 0
AS
BEGIN
    POST_EVENT 'OPR_REFRESH';
    IF ( ((NEW.ID /1000 ) * 1000) = NEW.ID) THEN
        EXECUTE PROCEDURE MAINTENANCE_SELECTIVITY;
END
^


/* Trigger: OPR_ANUL_AI */
CREATE TRIGGER OPR_ANUL_AI FOR OPR_ANUL
ACTIVE AFTER INSERT POSITION 0
AS BEGIN POST_EVENT 'OPR_ANUL_REFRESH'; END
^


/* Trigger: OPR_ANUL_BI */
CREATE TRIGGER OPR_ANUL_BI FOR OPR_ANUL
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_OPR_ANUL_ID,1); END
^


/* Trigger: OPR_BI */
CREATE TRIGGER OPR_BI FOR OPR
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_OPR_ID,1);
    IF (NEW.DATETIME IS NULL) THEN
        NEW.DATETIME = CURRENT_TIMESTAMP;
    IF (NEW.OPR_DATE IS NULL) THEN
        NEW.OPR_DATE = CURRENT_DATE;
    IF (NEW.IS_LOCK IS NULL) THEN
        NEW.IS_LOCK = 0;
END
^


/* Trigger: OPR_EDIT_AI */
CREATE TRIGGER OPR_EDIT_AI FOR OPR_EDIT
ACTIVE AFTER INSERT POSITION 0
AS BEGIN POST_EVENT 'OPR_EDIT_REFRESH'; END
^


/* Trigger: OPR_EDIT_BI */
CREATE TRIGGER OPR_EDIT_BI FOR OPR_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_OPR_EDIT_ID,1); END
^


/* Trigger: OPR_GARANCIA_NODE_BI */
CREATE TRIGGER OPR_GARANCIA_NODE_BI FOR OPR_GARANCIA_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OPR_GARANCIA_NODE_ID,1);
END
^


/* Trigger: OPR_PRODUCTION_REQUEST_AI0 */
CREATE TRIGGER OPR_PRODUCTION_REQUEST_AI0 FOR OPR_PRODUCTION_REQUEST
ACTIVE AFTER INSERT POSITION 0
AS 
begin 
  POST_EVENT 'ADD_NEW_REQUEST'; 
end
^


/* Trigger: OPR_PRODUCTION_REQUEST_BI */
CREATE TRIGGER OPR_PRODUCTION_REQUEST_BI FOR OPR_PRODUCTION_REQUEST
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPR_PRODUCTION_REQUEST_ID,1); 
END
^


/* Trigger: OPR_RAZPAD_NODE_BI */
CREATE TRIGGER OPR_RAZPAD_NODE_BI FOR OPR_RAZPAD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OPR_RAZPAD_NODE_ID,1);
END
^


/* Trigger: OPR_REFUSED_BI */
CREATE TRIGGER OPR_REFUSED_BI FOR OPR_REFUSED
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OPR_REFUSED_ID,1);
END
^


/* Trigger: OPR_REMOTE_BI */
CREATE TRIGGER OPR_REMOTE_BI FOR OPR_REMOTE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OPR_REMOTE_ID,1);
END
^


/* Trigger: OPR_TEMPLATE_BI */
CREATE TRIGGER OPR_TEMPLATE_BI FOR OPR_TEMPLATE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPR_TEMPLATE_ID,1); 
END
^


/* Trigger: OPR_TEMPLATE_EL_BI */
CREATE TRIGGER OPR_TEMPLATE_EL_BI FOR OPR_TEMPLATE_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPR_TEMPLATE_EL_ID,1); 
END
^


/* Trigger: OPR_TEMPLATE_GEN_BI */
CREATE TRIGGER OPR_TEMPLATE_GEN_BI FOR OPR_TEMPLATE_GEN
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPR_TEMPLATE_GEN_ID,1); 
END
^


/* Trigger: OPR_TEMPLATE_TASK_NODE_BI */
CREATE TRIGGER OPR_TEMPLATE_TASK_NODE_BI FOR OPR_TEMPLATE_TASK_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPR_TEMPLATE_TASK_NODE_ID,1); 
END
^


/* Trigger: OPR_WAITING_NODE_BI */
CREATE TRIGGER OPR_WAITING_NODE_BI FOR OPR_WAITING_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPR_WAITING_NODE_ID,1); 
END
^


/* Trigger: OTC_BI */
CREATE TRIGGER OTC_BI FOR OTC
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OTC_ID,1);
END
^


/* Trigger: OTC_EL_BI */
CREATE TRIGGER OTC_EL_BI FOR OTC_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OTC_EL_ID,1);
END
^


/* Trigger: OUT_BI */
CREATE TRIGGER OUT_BI FOR OUT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OUT_ID,1); 
 
    IF (TRIM(NEW.CODE) = '') THEN 
        NEW.CODE = NULL; 
END
^


/* Trigger: OUT_EL2_BI */
CREATE TRIGGER OUT_EL2_BI FOR OUT_EL2
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OUT_EL2_ID,1);
END
^


/* Trigger: OUT_EL_ANUL_BI */
CREATE TRIGGER OUT_EL_ANUL_BI FOR OUT_EL_ANUL
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_OUT_EL_ANUL_ID,1); END
^


/* Trigger: OUT_EL_BI */
CREATE TRIGGER OUT_EL_BI FOR OUT_EL
ACTIVE BEFORE INSERT POSITION 0
AS
DECLARE VARIABLE L_SKLAD_ID INTEGER;
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_OUT_EL_ID,1);

    SELECT
        OPR.SKLAD_ID
    FROM
        OPR
    WHERE
        ID = NEW.OPR_ID
    INTO
        :L_SKLAD_ID;

    IF (NOT EXISTS (
        SELECT
            NAL.ID
        FROM
            NAL
        WHERE
            NAL.SKLAD_ID = :L_SKLAD_ID
            AND NAL.SIMPLE_ID = NEW.SIMPLE_ID))
    THEN BEGIN

        INSERT INTO NAL (SIMPLE_ID, SKLAD_ID, KOL_NAL, SUMA, LAST_CENA, SUMA_FR, KOL_RZV, DATETIME_LASTCENA)
        VALUES (NEW.SIMPLE_ID, :L_SKLAD_ID, 0.00, 0.00, 0.00,0.00, 0.00, CURRENT_TIMESTAMP);
    END
END
^


/* Trigger: OUT_EL_EDIT_BI */
CREATE TRIGGER OUT_EL_EDIT_BI FOR OUT_EL_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_OUT_EL_EDIT_ID,1); END
^


/* Trigger: OWNER_BANKI_BI */
CREATE TRIGGER OWNER_BANKI_BI FOR OWNER_BANKI
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_owner_banki_id,1); 
end
^


/* Trigger: OWNER_BI */
CREATE TRIGGER OWNER_BI FOR OWNER
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OWNER_ID,1);
END
^


/* Trigger: PARI_BI */
CREATE TRIGGER PARI_BI FOR PARI
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_ID,1);
END
^


/* Trigger: PARI_IO_BI */
CREATE TRIGGER PARI_IO_BI FOR PARI_IO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_IO_ID,1);
END
^


/* Trigger: PARI_NODE_BI */
CREATE TRIGGER PARI_NODE_BI FOR PARI_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_NODE_ID,1);
END
^


/* Trigger: PARTIDA_EL_PRINT_BI */
CREATE TRIGGER PARTIDA_EL_PRINT_BI FOR PARTIDA_EL_PRINT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PARTIDA_EL_PRINT_ID,1); 
END
^


/* Trigger: PATHS_BI */
CREATE TRIGGER PATHS_BI FOR PATHS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PATHS_ID,1);
END
^


/* Trigger: PAYMENTS_EL_AI0 */
CREATE TRIGGER PAYMENTS_EL_AI0 FOR PAYMENTS_EL
ACTIVE AFTER INSERT POSITION 0
AS 
DECLARE VARIABLE L_KLI_ID INTEGER; 
DECLARE VARIABLE L_BONUS_TOCHKI INTEGER; 
DECLARE VARIABLE L_BONUS_TOCHKI_PAYMENT_TIP_ID INTEGER; 
DECLARE VARIABLE L_OBMIANA_BONUS_TOCHKI DOUBLE PRECISION; 
BEGIN 
    L_BONUS_TOCHKI_PAYMENT_TIP_ID = RDB$GET_CONTEXT('USER_TRANSACTION', 'BONUS_TOCHKI_PAYMENT_TIP_ID'); 
    L_OBMIANA_BONUS_TOCHKI = RDB$GET_CONTEXT('USER_TRANSACTION', 'OBMIANA_BONUS_TOCHKI'); 
 
    IF (L_BONUS_TOCHKI_PAYMENT_TIP_ID IS NULL) THEN 
        EXIT; 
 
    IF (L_OBMIANA_BONUS_TOCHKI IS NULL) THEN 
        EXIT; 
 
    SELECT 
        OPR.KLI_ID 
    FROM 
        OPR 
        INNER JOIN PAYMENT ON PAYMENT.OPR_ID = OPR.ID 
    WHERE 
        NEW.PAYMENT_TIP_ID = :L_BONUS_TOCHKI_PAYMENT_TIP_ID AND 
        PAYMENT.ID = NEW.PAYMENT_ID 
    INTO 
        :L_KLI_ID; 
 
    IF (L_KLI_ID IS NULL) THEN 
        EXIT; 
 
    L_BONUS_TOCHKI = TRUNC(NEW.SUMA * L_OBMIANA_BONUS_TOCHKI); 
 
    UPDATE KLI SET 
      BONUS_TOCHKI = BONUS_TOCHKI - :L_BONUS_TOCHKI 
    WHERE KLI.ID = :L_KLI_ID; 
END
^


/* Trigger: PAYMENT_AVANSOVO_BI */
CREATE TRIGGER PAYMENT_AVANSOVO_BI FOR PAYMENT_AVANSOVO
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PAYMENT_AVANSOVO_ID,1); 
END
^


/* Trigger: PAYMENT_BI */
CREATE TRIGGER PAYMENT_BI FOR PAYMENT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PAYMENT_ID,1);
END
^


/* Trigger: PAYMENT_NOW_BI */
CREATE TRIGGER PAYMENT_NOW_BI FOR PAYMENT_NOW
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_payment_now_id,1); 
end
^


/* Trigger: PAY_NOCASH_NODE_BI */
CREATE TRIGGER PAY_NOCASH_NODE_BI FOR PAY_NOCASH_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PAY_NOCASH_NODE_ID,1); 
END
^


/* Trigger: PL_DELIVERY_STORAGE_EDIT_BI */
CREATE TRIGGER PL_DELIVERY_STORAGE_EDIT_BI FOR PL_DELIVERY_STORAGE_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PL_DELIVERY_STORAGE_EDIT_ID,1); 
END
^


/* Trigger: POCKET_OTC_BI */
CREATE TRIGGER POCKET_OTC_BI FOR POCKET_OTC
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POCKET_OTC_ID,1); 
 
  NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: POCKET_SHOP_BI */
CREATE TRIGGER POCKET_SHOP_BI FOR POCKET_SHOP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
  NEW.ID = GEN_ID(GEN_POCKET_SHOP_ID,1);
END
^


/* Trigger: POR_DOST_KOL_RZV_BI */
CREATE TRIGGER POR_DOST_KOL_RZV_BI FOR POR_DOST_KOL_RZV
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_por_dost_kol_rzv_id,1); 
end
^


/* Trigger: POR_EL_COMMENT_BI */
CREATE TRIGGER POR_EL_COMMENT_BI FOR POR_EL_COMMENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POR_EL_COMMENT_ID,1); 
END
^


/* Trigger: POR_EL_EDIT_BI */
CREATE TRIGGER POR_EL_EDIT_BI FOR POR_EL_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_POR_EL_EDIT_ID,1);
END
^


/* Trigger: POR_EL_EXPLANATORY_BI */
CREATE TRIGGER POR_EL_EXPLANATORY_BI FOR POR_EL_EXPLANATORY
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POR_EL_EXPLANATORY_ID,1); 
END
^


/* Trigger: POR_EL_PRODUCTION_BI */
CREATE TRIGGER POR_EL_PRODUCTION_BI FOR POR_EL_PRODUCTION
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_por_el_production_id,1); 
end
^


/* Trigger: POR_FORMULA_PARAMS_BI */
CREATE TRIGGER POR_FORMULA_PARAMS_BI FOR POR_FORMULA_PARAMS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POR_FORMULA_PARAMS_ID,1); 
END
^


/* Trigger: POR_PRODUCTION_REQUEST_NODE_BI */
CREATE TRIGGER POR_PRODUCTION_REQUEST_NODE_BI FOR POR_PRODUCTION_REQUEST_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POR_PRODUCTION_REQUEST_NODE,1); 
END
^


/* Trigger: POR_PROP_NODE_BI */
CREATE TRIGGER POR_PROP_NODE_BI FOR POR_PROP_NODE
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_por_prop_node_id,1); 
end
^


/* Trigger: POR_RAZ_EDIT_BI */
CREATE TRIGGER POR_RAZ_EDIT_BI FOR POR_RAZ_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_POR_RAZ_EDIT_ID,1);
END
^


/* Trigger: POR_ZD_NODE_BI */
CREATE TRIGGER POR_ZD_NODE_BI FOR POR_ZD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POR_ZD_NODE_ID,1); 
END
^


/* Trigger: POS_OUT_EL_TO_SRV_OUT_EL_BI */
CREATE TRIGGER POS_OUT_EL_TO_SRV_OUT_EL_BI FOR POS_OUT_EL_TO_SRV_OUT_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POS_OUT_EL_TO_SRV_OUT_EL_ID,1); 
 
  NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: POS_TO_SRV_BI */
CREATE TRIGGER POS_TO_SRV_BI FOR POS_TO_SRV
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POS_TO_SRV_ID,1); 
 
  NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: POTV_BI */
CREATE TRIGGER POTV_BI FOR POTV
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POTV_ID,1); 
END
^


/* Trigger: POTV_EL_BI */
CREATE TRIGGER POTV_EL_BI FOR POTV_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POTV_EL_ID,1); 
END
^


/* Trigger: POTV_MOVE_EL_BI */
CREATE TRIGGER POTV_MOVE_EL_BI FOR POTV_MOVE_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POTV_MOVE_EL_ID,1); 
END
^


/* Trigger: PRICE_LIST_DELIVERY_STORAGES_BI */
CREATE TRIGGER PRICE_LIST_DELIVERY_STORAGES_BI FOR PRICE_LIST_DELIVERY_STORAGES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PRICE_LIST_DELIVERY_STORAGE,1); 
END
^


/* Trigger: PRODUCTION_EXPLANATORY_BI */
CREATE TRIGGER PRODUCTION_EXPLANATORY_BI FOR PRODUCTION_EXPLANATORY
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PRODUCTION_EXPLANATORY_ID,1); 
END
^


/* Trigger: PRODUCTION_GRUPI_BI */
CREATE TRIGGER PRODUCTION_GRUPI_BI FOR PRODUCTION_GRUPI
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_production_grupi_id,1); 
end
^


/* Trigger: PRODUCTION_IN_EL_PARAMS_BI */
CREATE TRIGGER PRODUCTION_IN_EL_PARAMS_BI FOR PRODUCTION_IN_EL_PARAMS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PRODUCTION_IN_EL_PARAMS_ID,1); 
END
^


/* Trigger: PRODUCTION_KAPARO_NODE_BI */
CREATE TRIGGER PRODUCTION_KAPARO_NODE_BI FOR PRODUCTION_KAPARO_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PRODUCTION_KAPARO_NODE_ID,1); 
END
^


/* Trigger: PRODUCTION_MONTAJISTI_BI */
CREATE TRIGGER PRODUCTION_MONTAJISTI_BI FOR PRODUCTION_MONTAJISTI
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_production_montajisti_id,1); 
  if (new.DATE_TIME_ADD is null) then 
    new.DATE_TIME_ADD = CURRENT_TIMESTAMP; 
end
^


/* Trigger: PRODUCTION_REQUEST_EL_BI */
CREATE TRIGGER PRODUCTION_REQUEST_EL_BI FOR PRODUCTION_REQUEST_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PRODUCTION_REQUEST_EL_ID,1); 
END
^


/* Trigger: PRODUCTION_ZARABOTKA_BI */
CREATE TRIGGER PRODUCTION_ZARABOTKA_BI FOR PRODUCTION_ZARABOTKA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PRODUCTION_ZARABOTKA_ID,1); 
 
  if (NEW.DATE_TIME_ADD IS NULL) THEN 
    NEW.DATE_TIME_ADD = CURRENT_TIMESTAMP; 
END
^


/* Trigger: PRODUCTION_ZARABOTKA_IZPL */
CREATE TRIGGER PRODUCTION_ZARABOTKA_IZPL FOR PRODUCTION_ZARABOTKA_IZPLATENO
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PRODUCTION_ZARABOTKA_IZPL,1); 
 
  IF (NEW.DT IS NULL) THEN 
    NEW.DT = CURRENT_DATE; 
END
^


/* Trigger: PROD_AVANS_BI */
CREATE TRIGGER PROD_AVANS_BI FOR PROD_AVANS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PROD_AVANS_ID,1); 
END
^


/* Trigger: PROD_CENI_EL_AI0 */
CREATE TRIGGER PROD_CENI_EL_AI0 FOR PROD_CENI_EL
ACTIVE AFTER INSERT POSITION 0
AS 
DECLARE VARIABLE L_KLI_ID INTEGER; 
DECLARE VARIABLE L_STORE_ID INTEGER; 
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
DECLARE VARIABLE L_IS_PROMO SMALLINT; 
 
BEGIN 
  SELECT 
    OPR.KLI_ID, 
    OPR.SKLAD_ID, 
    OUT_EL.SIMPLE_ID 
  FROM 
    OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
  WHERE 
    OUT_EL.ID = NEW.OUT_EL_ID 
  INTO :L_KLI_ID, :L_STORE_ID, :L_SIMPLE_ID; 
 
  EXECUTE PROCEDURE GET_SIMPLE_PRICE_LIST_PROMO(:L_SIMPLE_ID, :L_KLI_ID, :L_STORE_ID) RETURNING_VALUES :L_IS_PROMO; 
 
  if (:L_IS_PROMO = 1) then 
    UPDATE PROD_CENI_EL SET PROD_CENI_EL.IS_PROMOTIONAL =:L_IS_PROMO WHERE PROD_CENI_EL.ID = NEW.ID; 
END
^


/* Trigger: PROD_PRODUCTION_BI */
CREATE TRIGGER PROD_PRODUCTION_BI FOR PROD_PRODUCTION
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PROD_PRODUCTION_ID,1); 
END
^


/* Trigger: PROD_REQUEST_PRODUCTION_NODE_BI */
CREATE TRIGGER PROD_REQUEST_PRODUCTION_NODE_BI FOR PROD_REQUEST_PRODUCTION_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PROD_REQUEST_PRODUCTION,1); 
END
^


/* Trigger: PROD_STOCK_BI */
CREATE TRIGGER PROD_STOCK_BI FOR PROD_STOCK
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PROD_STOCK_ID,1); 
END
^


/* Trigger: PROD_STOCK_EL_BI */
CREATE TRIGGER PROD_STOCK_EL_BI FOR PROD_STOCK_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PROD_STOCK_EL_ID,1); 
END
^


/* Trigger: PROD_VAUCHER_BI */
CREATE TRIGGER PROD_VAUCHER_BI FOR PROD_VAUCHER
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_PROD_VAUCHER_ID, 1); 
 
    NEW.FLAG = 0; 
END
^


/* Trigger: PR_REQUEST_EXPLANATORY_BI */
CREATE TRIGGER PR_REQUEST_EXPLANATORY_BI FOR PR_REQUEST_EXPLANATORY
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PR_REQUEST_EXPLANATORY_ID,1); 
END
^


/* Trigger: PR_REQUEST_FORMULA_PARAMS_BI */
CREATE TRIGGER PR_REQUEST_FORMULA_PARAMS_BI FOR PR_REQUEST_FORMULA_PARAMS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_REQUEST_FORMULA_PARAMS_ID,1); 
END
^


/* Trigger: RAZFASOVKA_BI */
CREATE TRIGGER RAZFASOVKA_BI FOR RAZFASOVKA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_RAZFASOVKA_ID,1);
END
^


/* Trigger: RAZFASOVKA_LOG_AD103 */
CREATE TRIGGER RAZFASOVKA_LOG_AD103 FOR RAZFASOVKA
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'RAZ_TIP_ID', 'D', CAST(OLD."RAZ_TIP_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'KOL', 'D', CAST(OLD."KOL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'SIMPLE_ID', 'D', CAST(OLD."SIMPLE_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'RAZ_ELEMENT_ID', 'D', CAST(OLD."RAZ_ELEMENT_ID" AS DOM_CHAR_300), null); END
^


/* Trigger: RAZFASOVKA_LOG_AI103 */
CREATE TRIGGER RAZFASOVKA_LOG_AI103 FOR RAZFASOVKA
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', null, 'RAZ_TIP_ID', 'I', null, CAST(NEW."RAZ_TIP_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', null, 'KOL', 'I', null, CAST(NEW."KOL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', null, 'SIMPLE_ID', 'I', null, CAST(NEW."SIMPLE_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', null, 'RAZ_ELEMENT_ID', 'I', null, CAST(NEW."RAZ_ELEMENT_ID" AS DOM_CHAR_300)); END
^


/* Trigger: RAZFASOVKA_LOG_AU103 */
CREATE TRIGGER RAZFASOVKA_LOG_AU103 FOR RAZFASOVKA
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'RAZ_TIP_ID', 'U', CAST(OLD."RAZ_TIP_ID" AS DOM_CHAR_300), CAST(NEW.RAZ_TIP_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'KOL', 'U', CAST(OLD."KOL" AS DOM_CHAR_300), CAST(NEW.KOL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'SIMPLE_ID', 'U', CAST(OLD."SIMPLE_ID" AS DOM_CHAR_300), CAST(NEW.SIMPLE_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'RAZ_ELEMENT_ID', 'U', CAST(OLD."RAZ_ELEMENT_ID" AS DOM_CHAR_300), CAST(NEW.RAZ_ELEMENT_ID AS DOM_CHAR_300)); END
^


/* Trigger: RAZ_ELEMENT_BI */
CREATE TRIGGER RAZ_ELEMENT_BI FOR RAZ_ELEMENT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_RAZ_ELEMENT_ID,1);
END
^


/* Trigger: RAZ_ELEMENT_LOG_AD103 */
CREATE TRIGGER RAZ_ELEMENT_LOG_AD103 FOR RAZ_ELEMENT
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZ_ELEMENT', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('RAZ_ELEMENT', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null); END
^


/* Trigger: RAZ_ELEMENT_LOG_AI103 */
CREATE TRIGGER RAZ_ELEMENT_LOG_AI103 FOR RAZ_ELEMENT
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZ_ELEMENT', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZ_ELEMENT', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300)); END
^


/* Trigger: RAZ_ELEMENT_LOG_AU103 */
CREATE TRIGGER RAZ_ELEMENT_LOG_AU103 FOR RAZ_ELEMENT
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZ_ELEMENT', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZ_ELEMENT', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300)); END
^


/* Trigger: RAZ_TIP_BI */
CREATE TRIGGER RAZ_TIP_BI FOR RAZ_TIP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_RAZ_TIP_ID,1);
END
^


/* Trigger: RAZ_TIP_LOG_AD103 */
CREATE TRIGGER RAZ_TIP_LOG_AD103 FOR RAZ_TIP
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', OLD.ID, 'AMBALAJ', 'D', CAST(OLD."AMBALAJ" AS DOM_CHAR_300), null); END
^


/* Trigger: RAZ_TIP_LOG_AI103 */
CREATE TRIGGER RAZ_TIP_LOG_AI103 FOR RAZ_TIP
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', null, 'AMBALAJ', 'I', null, CAST(NEW."AMBALAJ" AS DOM_CHAR_300)); END
^


/* Trigger: RAZ_TIP_LOG_AU103 */
CREATE TRIGGER RAZ_TIP_LOG_AU103 FOR RAZ_TIP
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', OLD.ID, 'AMBALAJ', 'U', CAST(OLD."AMBALAJ" AS DOM_CHAR_300), CAST(NEW.AMBALAJ AS DOM_CHAR_300)); END
^


/* Trigger: REQUEST_PRODUCTION_NODE_BI */
CREATE TRIGGER REQUEST_PRODUCTION_NODE_BI FOR REQUEST_PRODUCTION_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_REQUEST_PRODUCTION_NODE_ID,1); 
END
^


/* Trigger: RETPRODRETFAKPRODKINODEBI */
CREATE TRIGGER RETPRODRETFAKPRODKINODEBI FOR RET_PROD_RET_FAK_PROD_KI_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_RETPRODRETFAKPRODKINODEID,1); 
END
^


/* Trigger: RET_STOKA_PROD_KI_AI0 */
CREATE TRIGGER RET_STOKA_PROD_KI_AI0 FOR RET_STOKA_PROD_KI
INACTIVE AFTER INSERT POSITION 0
AS 
DECLARE VARIABLE L_COUNT DOUBLE PRECISION; 
 
BEGIN 
    SELECT 
        COUNT(SUMI.OPR_ID) 
    FROM 
        SUMI 
    WHERE 
        SUMI.OPR_ID = NEW.OPR_ID 
    INTO :L_COUNT; 
 
    IF (L_COUNT > 1) THEN BEGIN 
        DELETE FROM SUMI 
        WHERE 
            SUMI.OPR_ID = NEW.OPR_ID 
        ORDER BY SUMI.ID ASC 
        ROWS 2 TO :L_COUNT; 
    END 
END
^


/* Trigger: RET_STOKA_PROD_KI_BI */
CREATE TRIGGER RET_STOKA_PROD_KI_BI FOR RET_STOKA_PROD_KI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_RET_STOKA_PROD_KI_ID,1); 
END
^


/* Trigger: ROUND_TIP_BI */
CREATE TRIGGER ROUND_TIP_BI FOR ROUND_TIP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_ROUND_TIP_ID,1); 
END
^


/* Trigger: SASTAV_BI */
CREATE TRIGGER SASTAV_BI FOR SASTAV
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_sastav_id,1); 
end
^


/* Trigger: SELEKCIQ_KALK_EL_BI */
CREATE TRIGGER SELEKCIQ_KALK_EL_BI FOR SELEKCIQ_KALK_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SELEKCIQ_KALC_ID,1);
END
^


/* Trigger: SELEKCIQ_KASA_EL_BI */
CREATE TRIGGER SELEKCIQ_KASA_EL_BI FOR SELEKCIQ_KASA_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SELEKCIQ_KASA_EL_ID,1); 
END
^


/* Trigger: SELEKCIQ_KLI_EL_BID0 */
CREATE TRIGGER SELEKCIQ_KLI_EL_BID0 FOR SELEKCIQ_KLI_EL
ACTIVE BEFORE INSERT OR DELETE POSITION 0
AS 
declare variable l_cl_opr_id integer; 
declare variable l_bc_id integer; 
declare variable l_sel_id integer; 
begin 
  if (inserting) then 
    l_sel_id = new.selekciq_id; 
  else 
    l_sel_id = old.selekciq_id; 
 
  for 
    select 
      cl.opr_id 
    from cenova_lista cl 
    where 
      cl.sel_kli = :l_sel_id 
    into :l_cl_opr_id 
  do 
  begin 
    if (inserting) then 
      insert into cenova_lista_kli (opr_id, kli_id) values (:l_cl_opr_id, new.kli_id); 
    else 
    if (deleting) then 
      delete from cenova_lista_kli clk where clk.opr_id = :l_cl_opr_id and clk.kli_id = old.kli_id; 
  end 
 
  for 
    select 
      bc.id 
    from bonus_config bc 
    where 
      bc.sel_kli = :l_sel_id 
    into :l_bc_id 
  do 
  begin 
    if (inserting) then 
      insert into bonus_config_kli(bonus_id, kli_id) values (:l_bc_id, new.kli_id); 
    else 
    if (deleting) then 
      delete from bonus_config_kli bck where bck.bonus_id = :l_bc_id and bck.kli_id = old.kli_id; 
  end 
 
  IF (DELETING) THEN 
    IF ((SELECT KLI.DEF_SEL_ID FROM KLI WHERE KLI.ID = OLD.KLI_ID) = OLD.SELEKCIQ_ID) THEN 
      UPDATE KLI SET KLI.DEF_SEL_ID = NULL WHERE KLI.ID = OLD.KLI_ID; 
end
^


/* Trigger: SELEKCIQ_SIM_EL_BD0 */
CREATE TRIGGER SELEKCIQ_SIM_EL_BD0 FOR SELEKCIQ_SIM_EL
ACTIVE BEFORE DELETE POSITION 0
AS
DECLARE VARIABLE DEF_SEL_ID INTEGER;
BEGIN
  SELECT
    SIMPLE.DEF_SEL_ID
  FROM
    SIMPLE
  WHERE
    SIMPLE.ID = OLD.SIMPLE_ID
  INTO
    :DEF_SEL_ID;

  IF (DEF_SEL_ID = OLD.SELEKCIQ_ID) THEN
  BEGIN
    UPDATE SIMPLE SET SIMPLE.DEF_SEL_ID = NULL WHERE SIMPLE.ID = OLD.SIMPLE_ID;
  END
END
^


/* Trigger: SEL_OPRS_BI */
CREATE TRIGGER SEL_OPRS_BI FOR SEL_OPRS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SEL_OPRS_ID,1); 
END
^


/* Trigger: SEL_OPR_BI */
CREATE TRIGGER SEL_OPR_BI FOR SEL_OPR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SEL_OPR_ID,1); 
END
^


/* Trigger: SEL_SIMPLE_BI */
CREATE TRIGGER SEL_SIMPLE_BI FOR SEL_SIMPLE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SEL_SIMPLE_ID,1); 
END
^


/* Trigger: SIMPLE_ACZIS_BI */
CREATE TRIGGER SIMPLE_ACZIS_BI FOR SIMPLE_ACZIS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_ACZIS_ID,1); 
END
^


/* Trigger: SIMPLE_ADRESIRANE_BI */
CREATE TRIGGER SIMPLE_ADRESIRANE_BI FOR SIMPLE_ADRESIRANE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_ADRESIRANE_ID,1); 
END
^


/* Trigger: SIMPLE_ADRESIRANE_GRUPA_BI */
CREATE TRIGGER SIMPLE_ADRESIRANE_GRUPA_BI FOR SIMPLE_ADRESIRANE_GRUPA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_ADRESIRANE_GRUPA_ID,1); 
END
^


/* Trigger: SIMPLE_ADRESIRANE_NODE_BI */
CREATE TRIGGER SIMPLE_ADRESIRANE_NODE_BI FOR SIMPLE_ADRESIRANE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_ADRESIRANE_NODE_ID,1); 
END
^


/* Trigger: SIMPLE_BI */
CREATE TRIGGER SIMPLE_BI FOR SIMPLE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_SIMPLE_ID,1); 
 
    IF (NEW.FLAG_VAUCHER IS NULL) THEN 
        NEW.FLAG_VAUCHER = 0; 
 
    IF (NEW.FLAG_MENU IS NULL) THEN 
        NEW.FLAG_MENU = 0; 
END
^


/* Trigger: SIMPLE_CALC_BI */
CREATE TRIGGER SIMPLE_CALC_BI FOR SIMPLE_CALC
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SIMPLE_CALC_ID,1);
END
^


/* Trigger: SIMPLE_CALC_OLD_BI */
CREATE TRIGGER SIMPLE_CALC_OLD_BI FOR SIMPLE_CALC_OLD
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_CALC_OLD_ID,1); 
END
^


/* Trigger: SIMPLE_CENI_BI */
CREATE TRIGGER SIMPLE_CENI_BI FOR SIMPLE_CENI
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SIMPLE_CENI_ID,1);
END
^


/* Trigger: SIMPLE_EXPLANATORY_BI */
CREATE TRIGGER SIMPLE_EXPLANATORY_BI FOR SIMPLE_EXPLANATORY
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_EXPLANATORY_ID,1); 
END
^


/* Trigger: SIMPLE_GROUP_BI */
CREATE TRIGGER SIMPLE_GROUP_BI FOR SIMPLE_GROUP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SIMPLE_GROUP_ID,1);
END
^


/* Trigger: SIMPLE_KA_BIM_BI */
CREATE TRIGGER SIMPLE_KA_BIM_BI FOR SIMPLE_KA_BIM
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_simple_ka_bim_id,1); 
end
^


/* Trigger: SIMPLE_KOD_BI */
CREATE TRIGGER SIMPLE_KOD_BI FOR SIMPLE_KOD
ACTIVE BEFORE INSERT POSITION 0
AS   BEGIN     IF (NEW.ID IS NULL) THEN       NEW.ID = GEN_ID(GEN_SIMPLE_KOD_ID,1);   END
^


/* Trigger: SIMPLE_LOG_AD103 */
CREATE TRIGGER SIMPLE_LOG_AD103 FOR SIMPLE
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'NAME_SHORT', 'D', CAST(OLD."NAME_SHORT" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CODE', 'D', CAST(OLD."CODE" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ME_ID', 'D', CAST(OLD."ME_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'SIMPLE_GROUP_ID', 'D', CAST(OLD."SIMPLE_GROUP_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ACTIVE', 'D', CAST(OLD."ACTIVE" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ACTIVE_FAK', 'D', CAST(OLD."ACTIVE_FAK" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'LOCK_CENA_PROD', 'D', CAST(OLD."LOCK_CENA_PROD" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_PROD', 'D', CAST(OLD."CENA_PROD" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_EDRO', 'D', CAST(OLD."CENA_EDRO" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_OFERTA', 'D', CAST(OLD."CENA_OFERTA" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_PROD_FAK', 'D', CAST(OLD."CENA_PROD_FAK" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DDS', 'D', CAST(OLD."DDS" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'KOL_KRI_MIN', 'D', CAST(OLD."KOL_KRI_MIN" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'KOL_KRI_MAX', 'D', CAST(OLD."KOL_KRI_MAX" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DEFAULT_RAZ_ID', 'D', CAST(OLD."DEFAULT_RAZ_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'USLUGA', 'D', CAST(OLD."USLUGA" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_POCKET', 'D', CAST(OLD."CENA_POCKET" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'RSN', 'D', CAST(OLD."RSN" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_CHECK', 'D', CAST(OLD."FLAG_CHECK" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'RAZ_TIP_ID', 'D', CAST(OLD."RAZ_TIP_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'AMBALAJ', 'D', CAST(OLD."AMBALAJ" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ACTIVE_SCALE', 'D', CAST(OLD."ACTIVE_SCALE" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'GODNOST', 'D', CAST(OLD."GODNOST" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'BRUTO', 'D', CAST(OLD."BRUTO" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DEF_SEL_ID', 'D', CAST(OLD."DEF_SEL_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'RAZPAD', 'D', CAST(OLD."RAZPAD" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_KRI_DOST', 'D', CAST(OLD."G_KRI_DOST" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_KRI_MIN', 'D', CAST(OLD."G_KRI_MIN" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_PERIOD', 'D', CAST(OLD."G_PERIOD" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_TIP', 'D', CAST(OLD."G_TIP" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ME2_ID', 'D', CAST(OLD."ME2_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAF_AMBALAJ', 'D', CAST(OLD."FLAF_AMBALAJ" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DEF_SEL_CALC', 'D', CAST(OLD."DEF_SEL_CALC" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CODE2', 'D', CAST(OLD."CODE2" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'TEMPERATURA', 'D', CAST(OLD."TEMPERATURA" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'SUMA_DOST_CALC', 'D', CAST(OLD."SUMA_DOST_CALC" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'GR_ZAMQNA_ID', 'D', CAST(OLD."GR_ZAMQNA_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'IS_BONUS', 'D', CAST(OLD."IS_BONUS" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'USE_PROP', 'D', CAST(OLD."USE_PROP" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'NAME_2', 'D', CAST(OLD."NAME_2" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_PROIZHOD', 'D', CAST(OLD."FLAG_PROIZHOD" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'EXT1', 'D', CAST(SUBSTRING(OLD."EXT1" FROM 1 FOR 300) AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'USE_EXPLAN', 'D', CAST(OLD."USE_EXPLAN" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'MARK_AS_BROI', 'D', CAST(OLD."MARK_AS_BROI" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'SASTAV_ID', 'D', CAST(OLD."SASTAV_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_VAUCHER', 'D', CAST(OLD."FLAG_VAUCHER" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_MENU', 'D', CAST(OLD."FLAG_MENU" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'GARANZIA_EXT', 'D', CAST(OLD."GARANZIA_EXT" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'PREPARE_TIME', 'D', CAST(OLD."PREPARE_TIME" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'MENU_TEXT', 'D', CAST(OLD."MENU_TEXT" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'COUNT_DEL', 'D', CAST(OLD."COUNT_DEL" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_RAZPAD_QTY', 'D', CAST(OLD."FLAG_RAZPAD_QTY" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'EXT2', 'D', CAST(SUBSTRING(OLD."EXT2" FROM 1 FOR 300) AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'VAT_GROUP', 'D', CAST(OLD."VAT_GROUP" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ADRESIRANE_ID', 'D', CAST(OLD."ADRESIRANE_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'COEFF_ME', 'D', CAST(OLD."COEFF_ME" AS DOM_CHAR_300), null); END
^


/* Trigger: SIMPLE_LOG_AI103 */
CREATE TRIGGER SIMPLE_LOG_AI103 FOR SIMPLE
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'NAME_SHORT', 'I', null, CAST(NEW."NAME_SHORT" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'CODE', 'I', null, CAST(NEW."CODE" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'ME_ID', 'I', null, CAST(NEW."ME_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'SIMPLE_GROUP_ID', 'I', null, CAST(NEW."SIMPLE_GROUP_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'ACTIVE', 'I', null, CAST(NEW."ACTIVE" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'ACTIVE_FAK', 'I', null, CAST(NEW."ACTIVE_FAK" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'LOCK_CENA_PROD', 'I', null, CAST(NEW."LOCK_CENA_PROD" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'CENA_PROD', 'I', null, CAST(NEW."CENA_PROD" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'CENA_EDRO', 'I', null, CAST(NEW."CENA_EDRO" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'CENA_OFERTA', 'I', null, CAST(NEW."CENA_OFERTA" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'CENA_PROD_FAK', 'I', null, CAST(NEW."CENA_PROD_FAK" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'DDS', 'I', null, CAST(NEW."DDS" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'KOL_KRI_MIN', 'I', null, CAST(NEW."KOL_KRI_MIN" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'KOL_KRI_MAX', 'I', null, CAST(NEW."KOL_KRI_MAX" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'DEFAULT_RAZ_ID', 'I', null, CAST(NEW."DEFAULT_RAZ_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'USLUGA', 'I', null, CAST(NEW."USLUGA" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'CENA_POCKET', 'I', null, CAST(NEW."CENA_POCKET" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'RSN', 'I', null, CAST(NEW."RSN" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'FLAG_CHECK', 'I', null, CAST(NEW."FLAG_CHECK" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'RAZ_TIP_ID', 'I', null, CAST(NEW."RAZ_TIP_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'AMBALAJ', 'I', null, CAST(NEW."AMBALAJ" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'ACTIVE_SCALE', 'I', null, CAST(NEW."ACTIVE_SCALE" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'GODNOST', 'I', null, CAST(NEW."GODNOST" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'BRUTO', 'I', null, CAST(NEW."BRUTO" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'DEF_SEL_ID', 'I', null, CAST(NEW."DEF_SEL_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'RAZPAD', 'I', null, CAST(NEW."RAZPAD" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'G_KRI_DOST', 'I', null, CAST(NEW."G_KRI_DOST" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'G_KRI_MIN', 'I', null, CAST(NEW."G_KRI_MIN" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'G_PERIOD', 'I', null, CAST(NEW."G_PERIOD" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'G_TIP', 'I', null, CAST(NEW."G_TIP" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'ME2_ID', 'I', null, CAST(NEW."ME2_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'FLAF_AMBALAJ', 'I', null, CAST(NEW."FLAF_AMBALAJ" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'DEF_SEL_CALC', 'I', null, CAST(NEW."DEF_SEL_CALC" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'CODE2', 'I', null, CAST(NEW."CODE2" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'TEMPERATURA', 'I', null, CAST(NEW."TEMPERATURA" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'SUMA_DOST_CALC', 'I', null, CAST(NEW."SUMA_DOST_CALC" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'GR_ZAMQNA_ID', 'I', null, CAST(NEW."GR_ZAMQNA_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'IS_BONUS', 'I', null, CAST(NEW."IS_BONUS" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'USE_PROP', 'I', null, CAST(NEW."USE_PROP" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'NAME_2', 'I', null, CAST(NEW."NAME_2" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'FLAG_PROIZHOD', 'I', null, CAST(NEW."FLAG_PROIZHOD" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'EXT1', 'I', null, CAST(SUBSTRING(NEW."EXT1" from 1 for 300) AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'USE_EXPLAN', 'I', null, CAST(NEW."USE_EXPLAN" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'MARK_AS_BROI', 'I', null, CAST(NEW."MARK_AS_BROI" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'SASTAV_ID', 'I', null, CAST(NEW."SASTAV_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'FLAG_VAUCHER', 'I', null, CAST(NEW."FLAG_VAUCHER" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'FLAG_MENU', 'I', null, CAST(NEW."FLAG_MENU" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'GARANZIA_EXT', 'I', null, CAST(NEW."GARANZIA_EXT" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'PREPARE_TIME', 'I', null, CAST(NEW."PREPARE_TIME" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'MENU_TEXT', 'I', null, CAST(NEW."MENU_TEXT" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'COUNT_DEL', 'I', null, CAST(NEW."COUNT_DEL" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'FLAG_RAZPAD_QTY', 'I', null, CAST(NEW."FLAG_RAZPAD_QTY" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'EXT2', 'I', null, CAST(SUBSTRING(NEW."EXT2" from 1 for 300) AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'VAT_GROUP', 'I', null, CAST(NEW."VAT_GROUP" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'ADRESIRANE_ID', 'I', null, CAST(NEW."ADRESIRANE_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'COEFF_ME', 'I', null, CAST(NEW."COEFF_ME" AS DOM_CHAR_300)); END
^


/* Trigger: SIMPLE_LOG_AU103 */
CREATE TRIGGER SIMPLE_LOG_AU103 FOR SIMPLE
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'NAME_SHORT', 'U', CAST(OLD."NAME_SHORT" AS DOM_CHAR_300), CAST(NEW.NAME_SHORT AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CODE', 'U', CAST(OLD."CODE" AS DOM_CHAR_300), CAST(NEW.CODE AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ME_ID', 'U', CAST(OLD."ME_ID" AS DOM_CHAR_300), CAST(NEW.ME_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'SIMPLE_GROUP_ID', 'U', CAST(OLD."SIMPLE_GROUP_ID" AS DOM_CHAR_300), CAST(NEW.SIMPLE_GROUP_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ACTIVE', 'U', CAST(OLD."ACTIVE" AS DOM_CHAR_300), CAST(NEW."ACTIVE" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ACTIVE_FAK', 'U', CAST(OLD."ACTIVE_FAK" AS DOM_CHAR_300), CAST(NEW.ACTIVE_FAK AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'LOCK_CENA_PROD', 'U', CAST(OLD."LOCK_CENA_PROD" AS DOM_CHAR_300), CAST(NEW.LOCK_CENA_PROD AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_PROD', 'U', CAST(OLD."CENA_PROD" AS DOM_CHAR_300), CAST(NEW.CENA_PROD AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_EDRO', 'U', CAST(OLD."CENA_EDRO" AS DOM_CHAR_300), CAST(NEW.CENA_EDRO AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_OFERTA', 'U', CAST(OLD."CENA_OFERTA" AS DOM_CHAR_300), CAST(NEW.CENA_OFERTA AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_PROD_FAK', 'U', CAST(OLD."CENA_PROD_FAK" AS DOM_CHAR_300), CAST(NEW.CENA_PROD_FAK AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DDS', 'U', CAST(OLD."DDS" AS DOM_CHAR_300), CAST(NEW.DDS AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'KOL_KRI_MIN', 'U', CAST(OLD."KOL_KRI_MIN" AS DOM_CHAR_300), CAST(NEW.KOL_KRI_MIN AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'KOL_KRI_MAX', 'U', CAST(OLD."KOL_KRI_MAX" AS DOM_CHAR_300), CAST(NEW.KOL_KRI_MAX AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DEFAULT_RAZ_ID', 'U', CAST(OLD."DEFAULT_RAZ_ID" AS DOM_CHAR_300), CAST(NEW.DEFAULT_RAZ_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'USLUGA', 'U', CAST(OLD."USLUGA" AS DOM_CHAR_300), CAST(NEW.USLUGA AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_POCKET', 'U', CAST(OLD."CENA_POCKET" AS DOM_CHAR_300), CAST(NEW.CENA_POCKET AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'RSN', 'U', CAST(OLD."RSN" AS DOM_CHAR_300), CAST(NEW.RSN AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_CHECK', 'U', CAST(OLD."FLAG_CHECK" AS DOM_CHAR_300), CAST(NEW.FLAG_CHECK AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'RAZ_TIP_ID', 'U', CAST(OLD."RAZ_TIP_ID" AS DOM_CHAR_300), CAST(NEW.RAZ_TIP_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'AMBALAJ', 'U', CAST(OLD."AMBALAJ" AS DOM_CHAR_300), CAST(NEW.AMBALAJ AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ACTIVE_SCALE', 'U', CAST(OLD."ACTIVE_SCALE" AS DOM_CHAR_300), CAST(NEW.ACTIVE_SCALE AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'GODNOST', 'U', CAST(OLD."GODNOST" AS DOM_CHAR_300), CAST(NEW.GODNOST AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'BRUTO', 'U', CAST(OLD."BRUTO" AS DOM_CHAR_300), CAST(NEW.BRUTO AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DEF_SEL_ID', 'U', CAST(OLD."DEF_SEL_ID" AS DOM_CHAR_300), CAST(NEW.DEF_SEL_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'RAZPAD', 'U', CAST(OLD."RAZPAD" AS DOM_CHAR_300), CAST(NEW.RAZPAD AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_KRI_DOST', 'U', CAST(OLD."G_KRI_DOST" AS DOM_CHAR_300), CAST(NEW.G_KRI_DOST AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_KRI_MIN', 'U', CAST(OLD."G_KRI_MIN" AS DOM_CHAR_300), CAST(NEW.G_KRI_MIN AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_PERIOD', 'U', CAST(OLD."G_PERIOD" AS DOM_CHAR_300), CAST(NEW.G_PERIOD AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_TIP', 'U', CAST(OLD."G_TIP" AS DOM_CHAR_300), CAST(NEW.G_TIP AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ME2_ID', 'U', CAST(OLD."ME2_ID" AS DOM_CHAR_300), CAST(NEW.ME2_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAF_AMBALAJ', 'U', CAST(OLD."FLAF_AMBALAJ" AS DOM_CHAR_300), CAST(NEW.FLAF_AMBALAJ AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DEF_SEL_CALC', 'U', CAST(OLD."DEF_SEL_CALC" AS DOM_CHAR_300), CAST(NEW.DEF_SEL_CALC AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CODE2', 'U', CAST(OLD."CODE2" AS DOM_CHAR_300), CAST(NEW.CODE2 AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'TEMPERATURA', 'U', CAST(OLD."TEMPERATURA" AS DOM_CHAR_300), CAST(NEW.TEMPERATURA AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'SUMA_DOST_CALC', 'U', CAST(OLD."SUMA_DOST_CALC" AS DOM_CHAR_300), CAST(NEW.SUMA_DOST_CALC AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'GR_ZAMQNA_ID', 'U', CAST(OLD."GR_ZAMQNA_ID" AS DOM_CHAR_300), CAST(NEW.GR_ZAMQNA_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'IS_BONUS', 'U', CAST(OLD."IS_BONUS" AS DOM_CHAR_300), CAST(NEW.IS_BONUS AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'USE_PROP', 'U', CAST(OLD."USE_PROP" AS DOM_CHAR_300), CAST(NEW.USE_PROP AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'NAME_2', 'U', CAST(OLD."NAME_2" AS DOM_CHAR_300), CAST(NEW.NAME_2 AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_PROIZHOD', 'U', CAST(OLD."FLAG_PROIZHOD" AS DOM_CHAR_300), CAST(NEW.FLAG_PROIZHOD AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'EXT1', 'U', CAST(SUBSTRING(OLD."EXT1" FROM 1 FOR 300) AS DOM_CHAR_300), CAST(SUBSTRING(NEW.EXT1 from 1 for 300) AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'USE_EXPLAN', 'U', CAST(OLD."USE_EXPLAN" AS DOM_CHAR_300), CAST(NEW.USE_EXPLAN AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'MARK_AS_BROI', 'U', CAST(OLD."MARK_AS_BROI" AS DOM_CHAR_300), CAST(NEW.MARK_AS_BROI AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'SASTAV_ID', 'U', CAST(OLD."SASTAV_ID" AS DOM_CHAR_300), CAST(NEW.SASTAV_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_VAUCHER', 'U', CAST(OLD."FLAG_VAUCHER" AS DOM_CHAR_300), CAST(NEW.FLAG_VAUCHER AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_MENU', 'U', CAST(OLD."FLAG_MENU" AS DOM_CHAR_300), CAST(NEW.FLAG_MENU AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'GARANZIA_EXT', 'U', CAST(OLD."GARANZIA_EXT" AS DOM_CHAR_300), CAST(NEW.GARANZIA_EXT AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'PREPARE_TIME', 'U', CAST(OLD."PREPARE_TIME" AS DOM_CHAR_300), CAST(NEW.PREPARE_TIME AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'MENU_TEXT', 'U', CAST(OLD."MENU_TEXT" AS DOM_CHAR_300), CAST(NEW.MENU_TEXT AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'COUNT_DEL', 'U', CAST(OLD."COUNT_DEL" AS DOM_CHAR_300), CAST(NEW.COUNT_DEL AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_RAZPAD_QTY', 'U', CAST(OLD."FLAG_RAZPAD_QTY" AS DOM_CHAR_300), CAST(NEW.FLAG_RAZPAD_QTY AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'EXT2', 'U', CAST(SUBSTRING(OLD."EXT2" FROM 1 FOR 300) AS DOM_CHAR_300), CAST(SUBSTRING(NEW.EXT2 from 1 for 300) AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'VAT_GROUP', 'U', CAST(OLD."VAT_GROUP" AS DOM_CHAR_300), CAST(NEW.VAT_GROUP AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ADRESIRANE_ID', 'U', CAST(OLD."ADRESIRANE_ID" AS DOM_CHAR_300), CAST(NEW.ADRESIRANE_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'COEFF_ME', 'U', CAST(OLD."COEFF_ME" AS DOM_CHAR_300), CAST(NEW.COEFF_ME AS DOM_CHAR_300)); END
^


/* Trigger: SIMPLE_OBSERV_BI */
CREATE TRIGGER SIMPLE_OBSERV_BI FOR SIMPLE_OBSERV
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_OBSERV_ID,1); 
END
^


/* Trigger: SIMPLE_PICT_BI */
CREATE TRIGGER SIMPLE_PICT_BI FOR SIMPLE_PICT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_PICT_ID,1); 
END
^


/* Trigger: SIMPLE_RAZ_BI */
CREATE TRIGGER SIMPLE_RAZ_BI FOR SIMPLE_RAZ
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SIMPLE_RAZ_ID,1);
END
^


/* Trigger: SIMPLE_SKLAD_KOD_BI */
CREATE TRIGGER SIMPLE_SKLAD_KOD_BI FOR SIMPLE_SKLAD_KOD
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_simple_sklad_kod_id,1); 
end
^


/* Trigger: SIMPLE_TRACKER_BI */
CREATE TRIGGER SIMPLE_TRACKER_BI FOR SIMPLE_TRACKER
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_TRACKER_ID,1); 
END
^


/* Trigger: SIMPLE_ZAETOST_BI */
CREATE TRIGGER SIMPLE_ZAETOST_BI FOR SIMPLE_ZAETOST
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_ZAETOST_ID,1); 
END
^


/* Trigger: SKLAD_BI */
CREATE TRIGGER SKLAD_BI FOR SKLAD
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_SKLAD_ID,1); 
 
    NEW.F_MOVE_CENA = COALESCE(NEW.F_MOVE_CENA,0); 
    NEW.F_OTR_KOL = COALESCE(NEW.F_OTR_KOL,0); 
END
^


/* Trigger: SKLAD_LOG_AD103 */
CREATE TRIGGER SKLAD_LOG_AD103 FOR SKLAD
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'OBEKT_ID', 'D', CAST(OLD."OBEKT_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'USER_ID', 'D', CAST(OLD."USER_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'POCKET', 'D', CAST(OLD."POCKET" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'IS_SYSTEM', 'D', CAST(OLD."IS_SYSTEM" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'IS_ACTIVE', 'D', CAST(OLD."IS_ACTIVE" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'F_MOVE_CENA', 'D', CAST(OLD."F_MOVE_CENA" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'OWNER_ID', 'D', CAST(OLD."OWNER_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'F_OTR_KOL', 'D', CAST(OLD."F_OTR_KOL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'CL_MOVE_ID', 'D', CAST(OLD."CL_MOVE_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'CODE', 'D', CAST(OLD."CODE" AS DOM_CHAR_300), null); END
^


/* Trigger: SKLAD_LOG_AI103 */
CREATE TRIGGER SKLAD_LOG_AI103 FOR SKLAD
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'OBEKT_ID', 'I', null, CAST(NEW."OBEKT_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'USER_ID', 'I', null, CAST(NEW."USER_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'POCKET', 'I', null, CAST(NEW."POCKET" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'IS_SYSTEM', 'I', null, CAST(NEW."IS_SYSTEM" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'IS_ACTIVE', 'I', null, CAST(NEW."IS_ACTIVE" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'F_MOVE_CENA', 'I', null, CAST(NEW."F_MOVE_CENA" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'OWNER_ID', 'I', null, CAST(NEW."OWNER_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'F_OTR_KOL', 'I', null, CAST(NEW."F_OTR_KOL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'CL_MOVE_ID', 'I', null, CAST(NEW."CL_MOVE_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'CODE', 'I', null, CAST(NEW."CODE" AS DOM_CHAR_300)); END
^


/* Trigger: SKLAD_LOG_AU103 */
CREATE TRIGGER SKLAD_LOG_AU103 FOR SKLAD
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'OBEKT_ID', 'U', CAST(OLD."OBEKT_ID" AS DOM_CHAR_300), CAST(NEW.OBEKT_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'USER_ID', 'U', CAST(OLD."USER_ID" AS DOM_CHAR_300), CAST(NEW.USER_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'POCKET', 'U', CAST(OLD."POCKET" AS DOM_CHAR_300), CAST(NEW.POCKET AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'IS_SYSTEM', 'U', CAST(OLD."IS_SYSTEM" AS DOM_CHAR_300), CAST(NEW.IS_SYSTEM AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'IS_ACTIVE', 'U', CAST(OLD."IS_ACTIVE" AS DOM_CHAR_300), CAST(NEW.IS_ACTIVE AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'F_MOVE_CENA', 'U', CAST(OLD."F_MOVE_CENA" AS DOM_CHAR_300), CAST(NEW.F_MOVE_CENA AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'OWNER_ID', 'U', CAST(OLD."OWNER_ID" AS DOM_CHAR_300), CAST(NEW.OWNER_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'F_OTR_KOL', 'U', CAST(OLD."F_OTR_KOL" AS DOM_CHAR_300), CAST(NEW.F_OTR_KOL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'CL_MOVE_ID', 'U', CAST(OLD."CL_MOVE_ID" AS DOM_CHAR_300), CAST(NEW.CL_MOVE_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'CODE', 'U', CAST(OLD."CODE" AS DOM_CHAR_300), CAST(NEW.CODE AS DOM_CHAR_300)); END
^


/* Trigger: SKLAD_MOL_BI */
CREATE TRIGGER SKLAD_MOL_BI FOR SKLAD_MOL
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SKLAD_MOL_ID,1);
end
^


/* Trigger: SKLAD_SELEKCIQ_NODE_BI */
CREATE TRIGGER SKLAD_SELEKCIQ_NODE_BI FOR SKLAD_SELEKCIQ_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SKLAD_SELEKCIQ_NODE_ID,1);
END
^


/* Trigger: SLEDI_KLI_BI */
CREATE TRIGGER SLEDI_KLI_BI FOR SLEDI_KLI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SLEDI_KLI_ID,1); 
END
^


/* Trigger: SLEDI_LICENZ_BI */
CREATE TRIGGER SLEDI_LICENZ_BI FOR SLEDI_LICENZ
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SLEDI_LICENZ_ID,1); 
END
^


/* Trigger: SLEDI_ROUMING_LOG_BI */
CREATE TRIGGER SLEDI_ROUMING_LOG_BI FOR SLEDI_ROUMING_LOG
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SLEDI_ROUMING_LOG_ID,1); 
END
^


/* Trigger: SLEDI_ROUMING_LOG_PAIED_BI */
CREATE TRIGGER SLEDI_ROUMING_LOG_PAIED_BI FOR SLEDI_ROUMING_LOG_PAIED
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SLEDI_ROUMING_LOG_PAIED_ID,1); 
END
^


/* Trigger: SLEDI_SIMPLE_BI */
CREATE TRIGGER SLEDI_SIMPLE_BI FOR SLEDI_SIMPLE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SLEDI_SIMPLE_ID,1); 
END
^


/* Trigger: SLEDI_TEMPLATE_EL_BI */
CREATE TRIGGER SLEDI_TEMPLATE_EL_BI FOR SLEDI_TEMPLATE_EL
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_sledi_template_el_id,1); 
end
^


/* Trigger: SLEDI_TEMPLATE_EL_GEN_BI */
CREATE TRIGGER SLEDI_TEMPLATE_EL_GEN_BI FOR SLEDI_TEMPLATE_EL_GEN
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SLEDI_TEMPLATE_EL_GEN_ID,1); 
END
^


/* Trigger: STORNO_REASON_BI */
CREATE TRIGGER STORNO_REASON_BI FOR STORNO_REASON
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_STORNO_REASON_ID,1); 
END
^


/* Trigger: SYNC_ADVANCE_PAYMENT_BI */
CREATE TRIGGER SYNC_ADVANCE_PAYMENT_BI FOR SYNC_ADVANCE_PAYMENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SYNC_ADVANCE_PAYMENT_ID,1); 
END
^


/* Trigger: SYSTEM_AU0 */
CREATE TRIGGER SYSTEM_AU0 FOR SYSTEM
ACTIVE AFTER UPDATE POSITION 0
AS 
BEGIN 
    POST_EVENT 'SYSTEM_REFRESH'; 
END
^


/* Trigger: TASKS_BI */
CREATE TRIGGER TASKS_BI FOR TASKS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TASKS_ID,1); 
END
^


/* Trigger: TASKS_EL_BI */
CREATE TRIGGER TASKS_EL_BI FOR TASKS_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TASKS_EL_ID,1); 
END
^


/* Trigger: TASKS_TIP_BI */
CREATE TRIGGER TASKS_TIP_BI FOR TASKS_TIP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TASKS_TIP_ID,1); 
END
^


/* Trigger: TBL_KA_BI */
CREATE TRIGGER TBL_KA_BI FOR TBL_KA
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_tbl_ka_id,1); 
end
^


/* Trigger: TBL_KA_OPR_LOG_BI */
CREATE TRIGGER TBL_KA_OPR_LOG_BI FOR TBL_KA_OPR_LOG
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TBL_KA_OPR_LOG_ID,1); 
END
^


/* Trigger: TBL_KA_OPR_NODE_BI */
CREATE TRIGGER TBL_KA_OPR_NODE_BI FOR TBL_KA_OPR_NODE
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_tbl_ka_opr_node_id,1); 
end
^


/* Trigger: TBL_KA_REGNOM_NODE_BI */
CREATE TRIGGER TBL_KA_REGNOM_NODE_BI FOR TBL_KA_REGNOM_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TBL_KA_REGNOM_NODE_ID,1); 
END
^


/* Trigger: TBL_KA_STOP_SIM_NODE_BI */
CREATE TRIGGER TBL_KA_STOP_SIM_NODE_BI FOR TBL_KA_STOP_SIM_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TBL_KA_STOP_SIM_NODE_ID,1); 
END
^


/* Trigger: TBL_LOG_BI */
CREATE TRIGGER TBL_LOG_BI FOR TBL_LOG
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_tbl_log_id,1); 
end
^


/* Trigger: TIP_REFUSED_BI */
CREATE TRIGGER TIP_REFUSED_BI FOR TIP_REFUSED
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_TIP_REFUSED_ID,1);
END
^


/* Trigger: TIP_REFUSED_LOG_AD103 */
CREATE TRIGGER TIP_REFUSED_LOG_AD103 FOR TIP_REFUSED
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', OLD.ID, 'FP_STORNO_TIP', 'D', CAST(OLD."FP_STORNO_TIP" AS DOM_CHAR_300), null); END
^


/* Trigger: TIP_REFUSED_LOG_AI103 */
CREATE TRIGGER TIP_REFUSED_LOG_AI103 FOR TIP_REFUSED
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', null, 'FP_STORNO_TIP', 'I', null, CAST(NEW."FP_STORNO_TIP" AS DOM_CHAR_300)); END
^


/* Trigger: TIP_REFUSED_LOG_AU103 */
CREATE TRIGGER TIP_REFUSED_LOG_AU103 FOR TIP_REFUSED
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', OLD.ID, 'FP_STORNO_TIP', 'U', CAST(OLD."FP_STORNO_TIP" AS DOM_CHAR_300), CAST(NEW.FP_STORNO_TIP AS DOM_CHAR_300)); END
^


/* Trigger: TIP_RESOLUTION_BI */
CREATE TRIGGER TIP_RESOLUTION_BI FOR TIP_RESOLUTION
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_tip_resolution_id,1); 
end
^


/* Trigger: TMP_MARK_EL_BI */
CREATE TRIGGER TMP_MARK_EL_BI FOR TMP_MARK_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TMP_MARK_EL_ID,1); 
END
^


/* Trigger: TMP_OPR_AI0 */
CREATE TRIGGER TMP_OPR_AI0 FOR TMP_OPR
ACTIVE AFTER INSERT OR UPDATE OR DELETE POSITION 0
AS 
BEGIN 
  POST_EVENT 'TMP_OPR'; 
END
^


/* Trigger: TMP_OPR_BI */
CREATE TRIGGER TMP_OPR_BI FOR TMP_OPR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TMP_OPR_ID,1); 
END
^


/* Trigger: TMP_OPR_SN_BI */
CREATE TRIGGER TMP_OPR_SN_BI FOR TMP_OPR_SN
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TMP_OPR_SN_ID,1); 
END
^


/* Trigger: TMP_SIMPLE_SEL_PROD1_BI */
CREATE TRIGGER TMP_SIMPLE_SEL_PROD1_BI FOR TMP_SIMPLE_SEL_PROD1
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TMP_SIMPLE_SEL_PROD1_ID,1); 
END
^


/* Trigger: TR_ACTIONS_BI0 */
CREATE TRIGGER TR_ACTIONS_BI0 FOR ACTIONS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_ACTIONS_ID; 
END
^


/* Trigger: TR_ADDRESSES_BI0 */
CREATE TRIGGER TR_ADDRESSES_BI0 FOR ADDRESSES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_ADDRESSES_ID; 
END
^


/* Trigger: TR_AMBALAJ_HISTORY_AI0 */
CREATE TRIGGER TR_AMBALAJ_HISTORY_AI0 FOR AMBALAJ_HISTORY
ACTIVE AFTER INSERT POSITION 0
AS
DECLARE VARIABLE L_KLI_ID INTEGER;
DECLARE VARIABLE L_OPR_TIP SMALLINT;
DECLARE VARIABLE L_AMBL_HIS_ID INTEGER;
BEGIN
    SELECT
        OPR.KLI_ID,
        OPR.OPR_TIP
    FROM
        OPR
    WHERE
        OPR.ID = NEW.OPR_ID
    INTO
        :L_KLI_ID,:L_OPR_TIP;

    SELECT
        AMBALAJ.ID
    FROM       
        AMBALAJ
    WHERE
        AMBALAJ.KLI_ID = :L_KLI_ID
        AND AMBALAJ.SIMPLE_ID = NEW.SIMPLE_ID
    INTO
        :L_AMBL_HIS_ID;

    IF (L_OPR_TIP = 20) THEN BEGIN
        IF (:L_AMBL_HIS_ID IS NULL) THEN
            INSERT INTO AMBALAJ(KOL,SIMPLE_ID,KLI_ID)
            VALUES (NEW.KOL,NEW.SIMPLE_ID,:L_KLI_ID);
        ELSE
            UPDATE AMBALAJ SET
            AMBALAJ.KOL = ROUND5(AMBALAJ.KOL + NEW.KOL)
            WHERE AMBALAJ.KLI_ID = :L_KLI_ID
            AND AMBALAJ.SIMPLE_ID = NEW.SIMPLE_ID;
    END
    ELSE IF (L_OPR_TIP = 21) THEN BEGIN
        IF (:L_AMBL_HIS_ID IS NULL) THEN
            INSERT INTO AMBALAJ(KOL,SIMPLE_ID,KLI_ID)
            VALUES (-NEW.KOL,NEW.SIMPLE_ID,:L_KLI_ID);
        ELSE
            UPDATE AMBALAJ SET
            AMBALAJ.KOL = ROUND5(AMBALAJ.KOL - NEW.KOL)
            WHERE AMBALAJ.KLI_ID = :L_KLI_ID
            AND AMBALAJ.SIMPLE_ID = NEW.SIMPLE_ID;
    END
END
^


/* Trigger: TR_AMBALAJ_HISTORY_BI */
CREATE TRIGGER TR_AMBALAJ_HISTORY_BI FOR AMBALAJ_HISTORY
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_AMBALAJ_HISTORY_ID,1);
END
^


/* Trigger: TR_BONUSI_ZA_RAZCHET_BI0 */
CREATE TRIGGER TR_BONUSI_ZA_RAZCHET_BI0 FOR BONUSI_ZA_RAZCHET
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_BONUSI_ZA_RAZCHET_ID; 
 
    NEW.SUMA_OST = NEW.SUMA; 
END
^


/* Trigger: TR_BONUS_CENA_TOCHKI_BI */
CREATE TRIGGER TR_BONUS_CENA_TOCHKI_BI FOR BONUS_CENA_TOCHKI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_BONUS_CENA_TOCHKI_ID,1); 
END
^


/* Trigger: TR_BONUS_CONFIG_KLI_BI */
CREATE TRIGGER TR_BONUS_CONFIG_KLI_BI FOR BONUS_CONFIG_KLI
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_bonus_config_kli_id,1); 
end
^


/* Trigger: TR_BONUS_RAZCHET_NODE_BD0 */
CREATE TRIGGER TR_BONUS_RAZCHET_NODE_BD0 FOR BONUS_RAZCHET_NODE
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN 
    UPDATE BONUSI_ZA_RAZCHET SET 
        SUMA_OST = ROUND(SUMA_OST + OLD.SUMA,2) 
    WHERE 
        BONUSI_ZA_RAZCHET.ID IN (OLD.IN_ID, OLD.OUT_ID); 
END
^


/* Trigger: TR_BONUS_RAZCHET_NODE_BI0 */
CREATE TRIGGER TR_BONUS_RAZCHET_NODE_BI0 FOR BONUS_RAZCHET_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_BONUS_RAZCHET_NODE_ID; 
END
^


/* Trigger: TR_BROENE_BI0 */
CREATE TRIGGER TR_BROENE_BI0 FOR BROENE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_BROENE_ID; 
END
^


/* Trigger: TR_BROENE_EL_BI0 */
CREATE TRIGGER TR_BROENE_EL_BI0 FOR BROENE_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_BROENE_EL_ID; 
END
^


/* Trigger: TR_CFG_PAYMENTS_BI */
CREATE TRIGGER TR_CFG_PAYMENTS_BI FOR CFG_PAYMENTS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CFG_PAYMENTS_ID,1);
END
^


/* Trigger: TR_CFG_RAZPAD_CALC_BI0 */
CREATE TRIGGER TR_CFG_RAZPAD_CALC_BI0 FOR CFG_RAZPAD_CALC
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_CFG_RAZPAD_CALC_ID; 
END
^


/* Trigger: TR_CFG_RAZPAD_CALC_BIU1 */
CREATE TRIGGER TR_CFG_RAZPAD_CALC_BIU1 FOR CFG_RAZPAD_CALC
ACTIVE BEFORE INSERT OR UPDATE POSITION 1
AS 
BEGIN 
    NEW.RATIO = ABS(COALESCE(NEW.RATIO, 0.00)); 
END
^


/* Trigger: TR_COURSES_BI0 */
CREATE TRIGGER TR_COURSES_BI0 FOR COURSES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_COURSES_ID; 
    IF (NEW.DATE_TIME IS NULL) THEN 
        NEW.DATE_TIME = CURRENT_TIMESTAMP; 
END
^


/* Trigger: TR_COURSES_OPR_NODE_BI0 */
CREATE TRIGGER TR_COURSES_OPR_NODE_BI0 FOR COURSES_OPR_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_COURSES_OPR_NODE_ID; 
END
^


/* Trigger: TR_CRM_KLI_BI0 */
CREATE TRIGGER TR_CRM_KLI_BI0 FOR CRM_KLI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_CRM_KLI_ID; 
END
^


/* Trigger: TR_DOCUMENTS_BI0 */
CREATE TRIGGER TR_DOCUMENTS_BI0 FOR DOCUMENTS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_DOCUMENTS_ID; 
 
    NEW.DT = CURRENT_TIMESTAMP; 
    NEW.STATUS = 0; 
END
^


/* Trigger: TR_DOCUMENTS_BU0 */
CREATE TRIGGER TR_DOCUMENTS_BU0 FOR DOCUMENTS
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    IF (OLD.DELETE_USER_ID IS NULL AND NEW.DELETE_USER_ID > 0) THEN BEGIN 
        NEW.DT_DELETE = CURRENT_TIMESTAMP; 
    END 
END
^


/* Trigger: TR_DOST_NODE_BI */
CREATE TRIGGER TR_DOST_NODE_BI FOR DOST_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_DOST_NODE_ID,1);
END
^


/* Trigger: TR_DVSK_DOK_TYPE_BI0 */
CREATE TRIGGER TR_DVSK_DOK_TYPE_BI0 FOR DVSK_DOK_TYPE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_DVSK_DOK_TYPE_ID,1); 
END
^


/* Trigger: TR_EXCHANGE_SN_BI0 */
CREATE TRIGGER TR_EXCHANGE_SN_BI0 FOR EXCHANGE_SN
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_EXCHANGE_SN_ID; 
END
^


/* Trigger: TR_EXTENDED_VARANTY_NODE_BI0 */
CREATE TRIGGER TR_EXTENDED_VARANTY_NODE_BI0 FOR EXTENDED_VARANTY_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_EXTENDED_VARANTY_NODE_ID; 
END
^


/* Trigger: TR_FAK_EL_IN_ELNODE_BI0 */
CREATE TRIGGER TR_FAK_EL_IN_ELNODE_BI0 FOR FAK_EL_IN_EL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_VAT_REASON_ID INTEGER; 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_FAK_EL_IN_EL_NODE_ID; 
 
    IF (NEW.KOL = 0.00) THEN BEGIN 
        SELECT 
            IN_EL.KOL 
        FROM 
            IN_EL 
        WHERE 
            IN_EL.ID = NEW.IN_EL_ID 
        INTO 
            :L_KOL; 
        NEW.KOL = L_KOL; 
    END 
 
    SELECT 
        PROD_CENI_EL.VAT_REASON_ID 
    FROM 
        PROD_CENI_EL INNER JOIN OUT_EL ON OUT_EL.ID = PROD_CENI_EL.OUT_EL_ID 
        INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID 
    WHERE 
        OPR_RAZPAD_NODE.IN_EL_ID =NEW.IN_EL_ID 
    INTO :L_VAT_REASON_ID; 
    IF (:L_VAT_REASON_ID IS NOT NULL) THEN 
        UPDATE FAK_EL SET FAK_EL.VAT_REASON_ID =:L_VAT_REASON_ID WHERE FAK_EL.ID = NEW.FAK_EL_ID; 
END
^


/* Trigger: TR_FAK_IN_BI */
CREATE TRIGGER TR_FAK_IN_BI FOR FAK_IN
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_FAK_IN_ID,1);
END
^


/* Trigger: TR_FAK_IN_BIU10 */
CREATE TRIGGER TR_FAK_IN_BIU10 FOR FAK_IN
ACTIVE BEFORE INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_OPR_TIP SMALLINT; 
DECLARE VARIABLE L_VAT_PERCENT DOUBLE PRECISION; 
DECLARE VARIABLE L_DDS_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_DDS_SUMA_TO_PAY DOUBLE PRECISION; 
BEGIN 
    SELECT 
        OPR.OPR_TIP 
    FROM 
        OPR 
    WHERE 
        OPR.ID = NEW.OPR_ID 
    INTO 
        :L_OPR_TIP; 
    IF (INSERTING) THEN BEGIN 
        --IF (NEW.PAY_TIP_DDS = 1) THEN BEGIN 
            IF (L_OPR_TIP = 13) THEN BEGIN 
                FOR SELECT 
                  FAK_IN_SUMI.VAT_PERCENT, 
                  FAK_IN_SUMI.VAT_SUM, 
                  FAK_IN_SUMI.SUM_TO_PAY 
                FROM 
                  FAK_IN_SUMI 
                WHERE 
                  FAK_IN_SUMI.OPR_ID = NEW.OPR_ID 
                INTO :L_VAT_PERCENT, :L_DDS_SUMA, :L_DDS_SUMA_TO_PAY 
                DO BEGIN 
                    IF (L_DDS_SUMA_TO_PAY > 0.00) THEN BEGIN 
                        INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
                        VALUES (NEW.OPR_ID, :L_DDS_SUMA_TO_PAY, :L_DDS_SUMA_TO_PAY, :L_VAT_PERCENT); 
                    END 
                END 
            END 
        --END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        --IF ((OLD.PAY_TIP_DDS IN (0,2)) AND (NEW.PAY_TIP_DDS = 1)) THEN BEGIN 
        --    /*ДОБАВЯМЕ НОВ ЗАПИС, ЗА ДА СЕ КАЖЕ, ЧЕ ИМА ЗА ПЛАЩАНЕ*/ 
        --    IF (L_OPR_TIP = 13) THEN BEGIN 
        --        FOR SELECT 
        --          FAK_IN_SUMI.VAT_PERCENT, 
        --          FAK_IN_SUMI.VAT_SUM 
        --        FROM 
        --          FAK_IN_SUMI 
        --        WHERE 
        --          FAK_IN_SUMI.OPR_ID = NEW.OPR_ID 
        --        INTO :L_VAT_PERCENT, :L_DDS_SUMA 
        --        DO BEGIN 
        --            IF (L_DDS_SUMA > 0.00) THEN BEGIN 
        --                INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
        --                VALUES (NEW.OPR_ID, :L_DDS_SUMA, :L_DDS_SUMA, :L_VAT_PERCENT); 
        --            END 
        --        END 
        --    END 
        --END 
        --ELSE IF ((OLD.PAY_TIP_DDS IN (1,3)) AND (NEW.PAY_TIP_DDS IN (0,2))) THEN BEGIN 
        --    /*СМЕНЯ СИ СТАТУСА НА ПЛАТЕНО ВЕДНАГА - РАЗКАЧАМЕ ВРЪЗКИТЕ С ПЛАЩАНИЯ, НО ПЪРВО НАМАЛЯМ ИЗПОЛЗВАНАТА СУМА 
        --    НА ОПЕРАЦИЙТЕ СВЪРЗАНИ С ТАЗИ*/ 
        --    DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
        --END 
    END 
END
^


/* Trigger: TR_FAK_IN_EL_NODE_BI */
CREATE TRIGGER TR_FAK_IN_EL_NODE_BI FOR FAK_IN_EL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_FAK_IN_EL_NODE_ID,1);
END
^


/* Trigger: TR_FAK_OUT_EL_NODE_BI */
CREATE TRIGGER TR_FAK_OUT_EL_NODE_BI FOR FAK_OUT_EL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
DECLARE VARIABLE L_KOL DOUBLE PRECISION;
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_FAK_OUT_EL_NODE_ID,1);
  IF (NEW.KOL = 0) THEN BEGIN
      SELECT OUT_EL.KOL FROM OUT_eL WHERE OUT_EL.ID = NEW.OUT_EL_ID INTO :L_KOL;
      NEW.KOL = L_KOL;
  END
END
^


/* Trigger: TR_FAK_PROD_REAL_PROD_NODE_BI */
CREATE TRIGGER TR_FAK_PROD_REAL_PROD_NODE_BI FOR FAK_PROD_REAL_PROD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_FAK_PROD_REAL_PROD_NODE_ID,1); 
END
^


/* Trigger: TR_FIRMI_BI */
CREATE TRIGGER TR_FIRMI_BI FOR FIRMI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_FIRMI_ID,1); 
 
  IF (NEW.IS_SYSTEM IS NULL) THEN 
    NEW.IS_SYSTEM = 0; 
 
  IF (NEW.REG_DDS IS NULL AND NEW.IDNOMDDS IS NULL) THEN 
    NEW.REG_DDS = '0'; 
 
  if (NEW.IDNOMDDS IS NOT NULL) then 
    NEW.REG_DDS = '1'; 
END
^


/* Trigger: TR_FIRMI_BIU5 */
CREATE TRIGGER TR_FIRMI_BIU5 FOR FIRMI
ACTIVE BEFORE INSERT OR UPDATE POSITION 5
AS 
BEGIN 
    IF (NEW.E_FAK = 1 AND COALESCE(OLD.E_FAK, 0) = 0) THEN 
        NEW.FLAG_SYNC = 1; 
END
^


/* Trigger: TR_FISKAL_BONS_BI0 */
CREATE TRIGGER TR_FISKAL_BONS_BI0 FOR FISKAL_BONS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_FISKAL_BONS_ID; 
 
    NEW.DT = COALESCE(NEW.DT, CURRENT_TIMESTAMP); 
END
^


/* Trigger: TR_FISKAL_BONS_BUD0 */
CREATE TRIGGER TR_FISKAL_BONS_BUD0 FOR FISKAL_BONS
ACTIVE BEFORE UPDATE OR DELETE POSITION 0
AS 
BEGIN 
    IF (UPDATING) THEN 
        EXCEPTION EXC_UPDATE; 
    ELSE 
        EXCEPTION EXC_DELETE; 
END
^


/* Trigger: TR_FP_BD0 */
CREATE TRIGGER TR_FP_BD0 FOR FP
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN 
    EXCEPTION EXC_DELETE; 
END
^


/* Trigger: TR_FP_BI0 */
CREATE TRIGGER TR_FP_BI0 FOR FP
ACTIVE BEFORE INSERT POSITION 0
AS 
declare variable val integer; 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_FP_ID; 
 
    NEW.FP_NUMBER = UPPER(NEW.FP_NUMBER); 
    NEW.GEN_NAME = 'GEN_FP_NUMBER_' || NEW.FP_NUMBER; 
    NEW.GEN_NAME_ACTIVE = 'GEN_FP_ACTIVE_' || NEW.FP_NUMBER; 
 
    EXECUTE STATEMENT 'CREATE SEQUENCE ' || NEW.GEN_NAME; 
    EXECUTE STATEMENT 'CREATE SEQUENCE ' || NEW.GEN_NAME_ACTIVE; 
 
    VAL = NEW.INIT_VAL - 1; 
 
    EXECUTE STATEMENT 'ALTER SEQUENCE ' || NEW.GEN_NAME || ' RESTART WITH ' || VAL; 
    EXECUTE STATEMENT 'ALTER SEQUENCE ' || NEW.GEN_NAME_ACTIVE || ' RESTART WITH ' || VAL; 
END
^


/* Trigger: TR_FP_BU0 */
CREATE TRIGGER TR_FP_BU0 FOR FP
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    EXCEPTION EXC_UPDATE; 
END
^


/* Trigger: TR_INSTALLATIONS_BI0 */
CREATE TRIGGER TR_INSTALLATIONS_BI0 FOR INSTALLATIONS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_INSTALLATIONS_ID; 
 
    IF (NEW.BONUS_SUMA IS NULL) THEN 
          NEW.BONUS_SUMA = 0.00; 
END
^


/* Trigger: TR_INSTALLATION_PICTURES_BI0 */
CREATE TRIGGER TR_INSTALLATION_PICTURES_BI0 FOR INSTALLATION_PICTURES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_INSTALLATION_PICTURES_ID; 
END
^


/* Trigger: TR_INSTALLATION_USERS_BI0 */
CREATE TRIGGER TR_INSTALLATION_USERS_BI0 FOR INSTALLATION_USERS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_INSTALLATION_USERS_ID; 
 
     IF (NEW.BONUS_SUMA IS NULL) THEN 
          NEW.BONUS_SUMA = 0.00; 
END
^


/* Trigger: TR_INSTALLERS_BI0 */
CREATE TRIGGER TR_INSTALLERS_BI0 FOR INSTALLERS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_INSTALLERS_ID; 
END
^


/* Trigger: TR_INV_AI0 */
CREATE TRIGGER TR_INV_AI0 FOR INV
ACTIVE AFTER INSERT POSITION 0
AS
DECLARE VARIABLE L_OPR_TIP SMALLINT;
BEGIN
    SELECT
        OPR.OPR_TIP
    FROM
        OPR
    WHERE
        OPR.ID = NEW.OPR_ID
    INTO
        :L_OPR_TIP;
    IF (L_OPR_TIP = 3) THEN
        EXECUTE PROCEDURE SET_IZL_FROM_INV(NEW.OPR_ID);
END
^


/* Trigger: TR_INV_IZL_BI */
CREATE TRIGGER TR_INV_IZL_BI FOR INV_IZL
ACTIVE BEFORE INSERT POSITION 0
AS
    BEGIN
        IF (NEW.ID IS NULL) THEN
            NEW.ID = GEN_ID(GEN_INV_IZL_ID,1);

        NEW.KOL_IZL = NEW.KOL;
    END
^


/* Trigger: TR_INV_NACH_INI_BI */
CREATE TRIGGER TR_INV_NACH_INI_BI FOR INV_NACH_INI
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_INV_NACH_INI_ID,1);
END
^


/* Trigger: TR_INV_OPIS_BI */
CREATE TRIGGER TR_INV_OPIS_BI FOR INV_OPIS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_INV_OPIS_ID,1);
END
^


/* Trigger: TR_IN_BIU10 */
CREATE TRIGGER TR_IN_BIU10 FOR "IN"
ACTIVE BEFORE INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_IN_EL_CNT INTEGER; 
BEGIN 
    IF (INSERTING) THEN BEGIN 
        IF (NEW.PAY_TIP = 1) THEN BEGIN 
            SELECT 
                COUNT(IN_EL.ID) 
            FROM 
                IN_EL 
            WHERE 
                IN_EL.OPR_ID = NEW.OPR_ID 
            INTO :L_IN_EL_CNT; 
 
            IF (L_IN_EL_CNT = 0) THEN BEGIN 
                INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
                SELECT 
                    OPR.ID, 
                    OPR.SUMA, 
                    OPR.SUMA, 
                    20.0 
                FROM 
                    OPR 
                WHERE 
                    ID = NEW.OPR_ID; 
            END 
            ELSE BEGIN 
                INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
                SELECT 
                    IN_EL.OPR_ID, 
                    SUM(IN_EL.SUMA_SR), 
                    SUM(IN_EL.SUMA_SR), 
                    IN_EL.VAT_PERCENT 
                FROM 
                    IN_EL 
                WHERE 
                    IN_EL.OPR_ID = NEW.OPR_ID 
                GROUP BY 1, 4; 
 
                IF (NEW.RF = 1) THEN BEGIN 
                  INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
                  SELECT 
                      IN_EL.OPR_ID, 
                      SUM(IN_EL.SUMA_SR * IN_EL.VAT_PERCENT / 100), 
                      SUM(IN_EL.SUMA_SR * IN_EL.VAT_PERCENT / 100), 
                      IN_EL.VAT_PERCENT 
                  FROM 
                      IN_EL 
                  WHERE 
                      IN_EL.OPR_ID = NEW.OPR_ID 
                  GROUP BY 1, 4; 
                END 
            END 
        END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        IF ((OLD.PAY_TIP IN (0,2) AND NEW.PAY_TIP = 1) OR (COALESCE(OLD.RF, 0) <> COALESCE(NEW.RF, 0))) THEN BEGIN 
            /*ДОБАВЯМЕ НОВ ЗАПИС, ЗА ДА СЕ КАЖЕ, ЧЕ ИМА ЗА ПЛАЩАНЕ*/ 
            SELECT 
                COUNT(IN_EL.ID) 
            FROM 
                IN_EL 
            WHERE 
                IN_EL.OPR_ID = NEW.OPR_ID 
            INTO :L_IN_EL_CNT; 
 
            DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
 
            IF (L_IN_EL_CNT = 0) THEN BEGIN 
                INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
                SELECT 
                    OPR.ID, 
                    OPR.SUMA, 
                    OPR.SUMA, 
                    20.0 
                FROM 
                    OPR 
                WHERE 
                    ID = NEW.OPR_ID; 
            END 
            ELSE BEGIN 
                INSERT INTO SUMI (OPR_ID,SUMA, SUMA_OST, VAT_PERCENT) 
                SELECT 
                    IN_EL.OPR_ID, 
                    SUM(IN_EL.SUMA_SR), 
                    SUM(IN_EL.SUMA_SR), 
                    IN_EL.VAT_PERCENT 
                FROM 
                    IN_EL 
                WHERE 
                    IN_EL.OPR_ID = NEW.OPR_ID 
                GROUP BY 1, 4; 
 
                IF (NEW.RF = 1) THEN BEGIN 
                  INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
                  SELECT 
                      IN_EL.OPR_ID, 
                      SUM(IN_EL.SUMA_SR * IN_EL.VAT_PERCENT / 100), 
                      SUM(IN_EL.SUMA_SR * IN_EL.VAT_PERCENT / 100), 
                      IN_EL.VAT_PERCENT 
                  FROM 
                      IN_EL 
                  WHERE 
                      IN_EL.OPR_ID = NEW.OPR_ID 
                  GROUP BY 1, 4; 
                END 
            END 
        END 
        ELSE IF ((OLD.PAY_TIP IN (1,3)) AND (NEW.PAY_TIP IN (0,2))) THEN BEGIN 
            /*СМЕНЯ СИ СТАТУСА НА ПЛАТЕНО ВЕДНАГА - РАЗКАЧАМЕ ВРЪЗКИТЕ С ПЛАЩАНИЯ, НО ПЪРВО НАМАЛЯМ ИЗПОЛЗВАНАТА СУМА 
            НА ОПЕРАЦИЙТЕ СВЪРЗАНИ С ТАЗИ*/ 
 
            DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
        END 
    END 
END
^


/* Trigger: TR_IN_EL_AI1 */
CREATE TRIGGER TR_IN_EL_AI1 FOR IN_EL
ACTIVE AFTER INSERT POSITION 1
AS 
DECLARE VARIABLE L_BONUS TYPE OF DOM_FLAG; 
DECLARE VARIABLE L_PRICE TYPE OF DOM_CENA; 
DECLARE VARIABLE L_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_SMAL_INT; 
BEGIN 
    IF (ROUND(NEW.SUMA_FR,2) <> 0.00) THEN 
        EXIT; 
 
    SELECT 
        OPR.ID, 
        OPR.SKLAD_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = NEW.OPR_ID 
        AND OPR.OPR_TIP IN (1,12) 
    INTO 
        :L_OPR_ID, :L_SKLAD_ID; 
 
    IF (L_OPR_ID IS NULL) THEN 
        EXIT; 
 
    SELECT 
        SIMPLE.IS_BONUS 
    FROM 
        SIMPLE 
    WHERE 
        SIMPLE.ID = NEW.SIMPLE_ID 
    INTO 
        :L_BONUS; 
 
    IF (L_BONUS = 1) THEN BEGIN 
        SELECT FIRST 1 
            ROUND(IN_EL.SUMA_FR / IN_EL.KOL,5) 
        FROM 
            IN_EL 
        WHERE 
            IN_EL.OPR_ID = NEW.OPR_ID 
            AND IN_EL.SIMPLE_ID = NEW.SIMPLE_ID 
            AND IN_EL.SUMA_FR > 0.00 
        ORDER BY IN_EL.ID DESC 
        INTO 
            :L_PRICE; 
 
        IF (L_PRICE IS NULL) THEN 
            SELECT 
                COALESCE(NAL.LAST_CENA, 0.00) 
            FROM 
                NAL 
            WHERE 
                NAL.SIMPLE_ID = NEW.SIMPLE_ID 
                AND NAL.SKLAD_ID = :L_SKLAD_ID 
            INTO 
                :L_PRICE; 
 
        UPDATE OR INSERT INTO BONUSI_ZA_RAZCHET(IN_EL_ID,SUMA, KOL) 
        VALUES (NEW.ID,  ROUND(NEW.KOL * :L_PRICE, 2), NEW.KOL) 
        MATCHING(IN_EL_ID); 
    END 
END
^


/* Trigger: TR_IN_EL_AI2 */
CREATE TRIGGER TR_IN_EL_AI2 FOR IN_EL
ACTIVE AFTER INSERT POSITION 2
AS 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_KLI_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_AMB_ID TYPE OF DOM_KEY; 
BEGIN 
    SELECT 
        OPR.OPR_TIP, 
        OPR.KLI_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = NEW.OPR_ID 
    INTO 
        :L_OPR_TIP, :L_KLI_ID; 
 
    IF ((L_OPR_TIP IN (55,58)) AND (L_KLI_ID IS NOT NULL)) THEN BEGIN 
        SELECT 
            AMBALAJ.ID 
        FROM 
            AMBALAJ 
        WHERE 
            AMBALAJ.KLI_ID = :L_KLI_ID 
            AND AMBALAJ.SIMPLE_ID = NEW.SIMPLE_ID 
        INTO 
            :L_AMB_ID; 
 
        IF (L_AMB_ID IS NULL) THEN 
            INSERT INTO AMBALAJ(KLI_ID, SIMPLE_ID, KOL) 
            VALUES (:L_KLI_ID, NEW.SIMPLE_ID, 0.00); 
 
 
        UPDATE AMBALAJ SET 
            KOL = KOL + NEW.KOL 
        WHERE 
            AMBALAJ.KLI_ID = :L_KLI_ID 
            AND AMBALAJ.SIMPLE_ID = NEW.SIMPLE_ID; 
    END 
END
^


/* Trigger: TR_IN_EL_AU0 */
CREATE TRIGGER TR_IN_EL_AU0 FOR IN_EL
ACTIVE AFTER UPDATE POSITION 0
AS 
DECLARE VARIABLE L_BR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_SMAL_INT; 
BEGIN 
    IF (((NEW.SUMA_FR > 0.00) AND (OLD.SUMA_FR > 0.00)) 
    AND ((ROUND(NEW.KOL,5) = ROUND(OLD.KOL,5)))) THEN 
        EXIT; 
 
    SELECT 
        OPR.ID, 
        OPR.SKLAD_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = NEW.OPR_ID 
        AND OPR.OPR_TIP IN (1,12) 
    INTO 
        :L_BR_ID, :L_SKLAD_ID; 
 
    IF (L_BR_ID IS NULL) THEN 
        EXIT; 
 
    L_BR_ID = NULL; 
 
    SELECT 
        BZR.ID 
    FROM 
        BONUSI_ZA_RAZCHET BZR 
    WHERE 
        BZR.IN_EL_ID = NEW.ID 
    INTO 
        :L_BR_ID; 
 
    IF (L_BR_ID IS NULL) THEN BEGIN 
        IF (NEW.SUMA_FR = 0.00) THEN BEGIN 
        --НЯМАЛО Е БОНУС, НО СЕГА СУМАТА Е 0.00 КАТО БОНУС - ДОБАВЯМ ГО 
            INSERT INTO BONUSI_ZA_RAZCHET (IN_EL_ID, SUMA, KOL) 
            VALUES(NEW.ID, ROUND(COALESCE((SELECT NAL.LAST_CENA FROM NAL WHERE NAL.SIMPLE_ID = NEW.SIMPLE_ID AND NAL.SKLAD_ID = :L_SKLAD_ID), 0.00) * NEW.KOL, 2), NEW.KOL); 
        END 
    END 
    ELSE BEGIN 
        IF (NEW.SUMA_FR > 0.00) THEN 
            DELETE FROM BONUSI_ZA_RAZCHET 
            WHERE 
                IN_EL_ID = NEW.ID; 
        ELSE BEGIN 
            IF (ROUND(OLD.KOL, 5) <> ROUND(NEW.KOL, 5)) THEN BEGIN 
 
                DELETE FROM BONUS_RAZCHET_NODE 
                WHERE 
                    IN_ID = :L_BR_ID; 
 
                UPDATE BONUSI_ZA_RAZCHET SET 
                    SUMA = ROUND(ROUND(SUMA / OLD.KOL, 5) * NEW.KOL, 2), 
                    SUMA_OST = ROUND(ROUND(SUMA / OLD.KOL, 5) * NEW.KOL, 2), 
                    KOL = NEW.KOL 
                WHERE 
                    IN_EL_ID = NEW.ID; 
            END 
        END 
    END 
END
^


/* Trigger: TR_IN_EL_BD1 */
CREATE TRIGGER TR_IN_EL_BD1 FOR IN_EL
ACTIVE BEFORE DELETE POSITION 1
AS
DECLARE VARIABLE L_IN_EL2_ID INTEGER;
DECLARE VARIABLE L_IN_EL2_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_NAL_ID INTEGER;
BEGIN
    L_IN_EL2_ID = NULL;
    SELECT
        IN_EL2.ID,
        IN_EL2.KOL
    FROM
        IN_EL2
    WHERE
        IN_EL2.IN_EL_ID = OLD.ID
    INTO
        :L_IN_EL2_ID,:L_IN_EL2_KOL;
    IF (L_IN_EL2_ID IS NOT NULL) THEN BEGIN
        UPDATE NAL2 SET
        NAL2.KOL = ROUND5(NAL2.KOL - :L_IN_EL2_KOL)
        WHERE NAL2.NAL_ID = (SELECT NAL.ID FROM NAL INNER JOIN OPR ON OPR.SKLAD_ID = NAL.SKLAD_ID AND OPR.ID = OLD.OPR_ID AND NAL.SIMPLE_ID = OLD.SIMPLE_ID);
    END
END
^


/* Trigger: TR_IN_EL_BD2 */
CREATE TRIGGER TR_IN_EL_BD2 FOR IN_EL
ACTIVE BEFORE DELETE POSITION 2
AS 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_KLI_ID TYPE OF DOM_KEY; 
BEGIN 
    SELECT 
        OPR.OPR_TIP, 
        OPR.KLI_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = OLD.OPR_ID 
    INTO 
        :L_OPR_TIP, :L_KLI_ID; 
 
    IF ((L_OPR_TIP IN (55,58)) AND (L_KLI_ID IS NOT NULL)) THEN BEGIN 
        UPDATE AMBALAJ SET 
            KOL = KOL - OLD.KOL 
        WHERE 
            AMBALAJ.KLI_ID = :L_KLI_ID 
            AND AMBALAJ.SIMPLE_ID = OLD.SIMPLE_ID; 
    END 
END
^


/* Trigger: TR_IN_EL_RAZ_NODE_BI */
CREATE TRIGGER TR_IN_EL_RAZ_NODE_BI FOR IN_EL_RAZ_NODE
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN 
          IF (NEW.ID IS NULL) THEN 
             NEW.ID = GEN_ID("GEN_IN_EL_RAZ_NODE_ID",1);
           END
^


/* Trigger: TR_IN_TO_FAK_EL_BI */
CREATE TRIGGER TR_IN_TO_FAK_EL_BI FOR IN_TO_FAK_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_IN_TO_FAK_EL_ID,1);
END
^


/* Trigger: TR_IZL_BD0 */
CREATE TRIGGER TR_IZL_BD0 FOR IZL
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN 
    IF (OLD.FLAG_LOCK_KOR = 0) THEN 
        UPDATE NAL SET 
            KOL_IZL = ROUND(KOL_IZL - OLD.KOL_IZL,5) 
        WHERE 
            NAL.SKLAD_ID = OLD.SKLAD_ID 
            AND NAL.SIMPLE_ID = OLD.SIMPLE_ID; 
END
^


/* Trigger: TR_IZL_BI0 */
CREATE TRIGGER TR_IZL_BI0 FOR IZL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_IZL_ID,1); 
 
    NEW.KOL_IZL = NEW.KOL; 
 
    IF (NEW.LAST_CENA IS NULL) THEN 
        NEW.LAST_CENA = 0; 
    IF ((NEW.SKLAD_ID IS NULL) OR (NEW.SIMPLE_ID IS NULL)) THEN 
        SELECT 
            OPR.SKLAD_ID, 
            OUT_EL.SIMPLE_ID 
        FROM 
            OPR INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OPR.ID 
        WHERE 
            OUT_EL.ID = NEW.OUT_EL_ID 
        INTO 
            NEW.SKLAD_ID,NEW.SIMPLE_ID; 
 
    UPDATE NAL SET 
        KOL_IZL = ROUND(KOL_IZL + NEW.KOL_IZL, 5) 
    WHERE 
        NAL.SKLAD_ID = NEW.SKLAD_ID 
        AND NAL.SIMPLE_ID = NEW.SIMPLE_ID; 
END
^


/* Trigger: TR_IZL_BU0 */
CREATE TRIGGER TR_IZL_BU0 FOR IZL
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    IF (NEW.FLAG_LOCK_KOR <> OLD.FLAG_LOCK_KOR) THEN BEGIN 
        IF (OLD.FLAG_LOCK_KOR = 0) THEN BEGIN 
            UPDATE NAL SET 
                KOL_IZL = ROUND(KOL_IZL - OLD.KOL_IZL,5) 
            WHERE 
                NAL.SIMPLE_ID = OLD.SIMPLE_ID 
                AND NAL.SKLAD_ID = OLD.SKLAD_ID; 
        END 
        ELSE IF (NEW.FLAG_LOCK_KOR = 0) THEN BEGIN 
            UPDATE NAL SET 
                KOL_IZL = ROUND(KOL_IZL + NEW.KOL_IZL,5) 
            WHERE 
                NAL.SIMPLE_ID = NEW.SIMPLE_ID 
                AND NAL.SKLAD_ID = NEW.SKLAD_ID; 
        END 
    END 
    ELSE BEGIN 
        IF (NEW.FLAG_LOCK_KOR = 0) THEN BEGIN 
            UPDATE NAL SET 
                KOL_IZL = ROUND(KOL_IZL + ROUND(NEW.KOL_IZL - OLD.KOL_IZL,5),5) 
            WHERE 
                NAL.SIMPLE_ID = NEW.SIMPLE_ID 
                AND NAL.SKLAD_ID = NEW.SKLAD_ID; 
        END 
    END 
END
^


/* Trigger: TR_KI_DOST_NODE_BI */
CREATE TRIGGER TR_KI_DOST_NODE_BI FOR KI_DOST_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_KI_DOST_NODE_ID,1); 
END
^


/* Trigger: TR_KI_DOST_SUMA_BI0 */
CREATE TRIGGER TR_KI_DOST_SUMA_BI0 FOR KI_DOST_SUMA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_KI_DOST_SUMA_ID; 
END
^


/* Trigger: TR_KI_DOST_SUMA_BIU10 */
CREATE TRIGGER TR_KI_DOST_SUMA_BIU10 FOR KI_DOST_SUMA
ACTIVE BEFORE INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_VAT_PERCENT DOUBLE PRECISION; 
BEGIN 
    IF (INSERTING) THEN BEGIN 
        IF (NEW.PAY_TIP = 1) THEN BEGIN 
            SELECT 
                OPR.SUMA 
            FROM 
                OPR 
            WHERE 
                ID = NEW.KI_OPR_ID 
            INTO 
                :L_SUMA; 
 
            INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
            VALUES (NEW.KI_OPR_ID, :L_SUMA, :L_SUMA, NEW.VAT_PERCENT); 
        END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        IF ((OLD.PAY_TIP IN (0,2)) AND (NEW.PAY_TIP = 1)) THEN BEGIN 
            SELECT 
                OPR.SUMA 
            FROM 
                OPR 
            WHERE 
                ID = NEW.KI_OPR_ID 
            INTO 
                :L_SUMA; 
 
            INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
            VALUES (OLD.KI_OPR_ID, :L_SUMA, :L_SUMA, OLD.VAT_PERCENT); 
        END 
        ELSE IF ((OLD.PAY_TIP IN (1,3)) AND (NEW.PAY_TIP IN (0,2))) THEN BEGIN 
            DELETE FROM SUMI WHERE OPR_ID = NEW.KI_OPR_ID; 
        END 
    END 
END
^


/* Trigger: TR_KI_DOST_SUMA_FAK_BI0 */
CREATE TRIGGER TR_KI_DOST_SUMA_FAK_BI0 FOR KI_DOST_SUMA_FAK
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_KI_DOST_SUMA_FAK_ID; 
END
^


/* Trigger: TR_KLI_BU0 */
CREATE TRIGGER TR_KLI_BU0 FOR KLI
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
    IF (((OLD.KLI_GROUP_ID IS NULL) AND (NEW.KLI_GROUP_ID IS NOT NULL))
    OR ((OLD.KLI_GROUP_ID IS NOT NULL) AND (NEW.KLI_GROUP_ID IS NULL))
    OR(OLD.KLI_GROUP_ID <> NEW.KLI_GROUP_ID)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.CODE IS NULL) AND (NEW.CODE IS NOT NULL))
    OR ((OLD.CODE IS NOT NULL) AND (NEW.CODE IS NULL))
    OR(OLD.CODE <> NEW.CODE)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.NAME IS NULL) AND (NEW.NAME IS NOT NULL))
    OR ((OLD.NAME IS NOT NULL) AND (NEW.NAME IS NULL))
    OR(OLD.NAME <> NEW.NAME)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.KLIENT IS NULL) AND (NEW.KLIENT IS NOT NULL))
    OR ((OLD.KLIENT IS NOT NULL) AND (NEW.KLIENT IS NULL))
    OR(OLD.KLIENT <> NEW.KLIENT)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.DOSTAV IS NULL) AND (NEW.DOSTAV IS NOT NULL))
    OR ((OLD.DOSTAV IS NOT NULL) AND (NEW.DOSTAV IS NULL))
    OR(OLD.DOSTAV <> NEW.DOSTAV)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.PROIZV IS NULL) AND (NEW.PROIZV IS NOT NULL))
    OR ((OLD.PROIZV IS NOT NULL) AND (NEW.PROIZV IS NULL))
    OR(OLD.PROIZV <> NEW.PROIZV)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.PERCENT IS NULL) AND (NEW.PERCENT IS NOT NULL))
    OR ((OLD.PERCENT IS NOT NULL) AND (NEW.PERCENT IS NULL))
    OR(OLD.PERCENT <> NEW.PERCENT)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.COMMENT IS NULL) AND (NEW.COMMENT IS NOT NULL))
    OR ((OLD.COMMENT IS NOT NULL) AND (NEW.COMMENT IS NULL))
    OR(OLD.COMMENT <> NEW.COMMENT)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.ADRES IS NULL) AND (NEW.ADRES IS NOT NULL))
    OR ((OLD.ADRES IS NOT NULL) AND (NEW.ADRES IS NULL))
    OR(OLD.ADRES <> NEW.ADRES)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.TEL IS NULL) AND (NEW.TEL IS NOT NULL))
    OR ((OLD.TEL IS NOT NULL) AND (NEW.TEL IS NULL))
    OR(OLD.TEL <> NEW.TEL)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.FIRMA_ID IS NULL) AND (NEW.FIRMA_ID IS NOT NULL))
    OR ((OLD.FIRMA_ID IS NOT NULL) AND (NEW.FIRMA_ID IS NULL))
    OR(OLD.FIRMA_ID <> NEW.FIRMA_ID)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.DIST IS NULL) AND (NEW.DIST IS NOT NULL))
    OR ((OLD.DIST IS NOT NULL) AND (NEW.DIST IS NULL))
    OR(OLD.DIST <> NEW.DIST)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.ZA_KASA IS NULL) AND (NEW.ZA_KASA IS NOT NULL))
    OR ((OLD.ZA_KASA IS NOT NULL) AND (NEW.ZA_KASA IS NULL))
    OR(OLD.ZA_KASA <> NEW.ZA_KASA)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.FOLDER IS NULL) AND (NEW.FOLDER IS NOT NULL))
    OR ((OLD.FOLDER IS NOT NULL) AND (NEW.FOLDER IS NULL))
    OR(OLD.FOLDER <> NEW.FOLDER)) THEN
        NEW.FLAG_CHECK = 0;
END
^


/* Trigger: TR_KLI_DEF_SEL_AU */
CREATE TRIGGER TR_KLI_DEF_SEL_AU FOR KLI
ACTIVE AFTER UPDATE POSITION 0
AS 
DECLARE VARIABLE L_KLI_ID INTEGER; 
BEGIN 
  IF (NEW.DEF_SEL_ID IS NULL) THEN EXIT; 
  SELECT 
    SELEKCIQ_KLI_EL.KLI_ID 
  FROM 
    KLI INNER JOIN SELEKCIQ_KLI_EL ON KLI.ID = SELEKCIQ_KLI_EL.KLI_ID 
  WHERE 
    SELEKCIQ_KLI_EL.SELEKCIQ_ID = NEW.DEF_SEL_ID AND 
    SELEKCIQ_KLI_EL.KLI_ID = NEW.ID 
  INTO: 
    L_KLI_ID; 
  IF (L_KLI_ID IS NULL) THEN BEGIN 
    INSERT INTO SELEKCIQ_KLI_EL (KLI_ID, SELEKCIQ_ID) VALUES(NEW.ID, NEW.DEF_SEL_ID); 
  END 
END
^


/* Trigger: TR_KLI_DIST_NODE_BI */
CREATE TRIGGER TR_KLI_DIST_NODE_BI FOR KLI_DIST_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
  NEW.ID = GEN_ID(GEN_KLI_DIST_NODE_ID,1);
END
^


/* Trigger: TR_KLI_EXTENDED_VARANTY_BI0 */
CREATE TRIGGER TR_KLI_EXTENDED_VARANTY_BI0 FOR KLI_EXTENDED_VARANTY
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_KLI_EXTENDED_VARANTY_ID; 
END
^


/* Trigger: TR_KLI_KASA_MAIL_NODE_BI */
CREATE TRIGGER TR_KLI_KASA_MAIL_NODE_BI FOR KLI_KASA_MAIL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_KLI_KASA_MAIL_NODE_ID; 
END
^


/* Trigger: TR_KONSIGNACIA_BI */
CREATE TRIGGER TR_KONSIGNACIA_BI FOR KONSIGNACIA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KONSIGNACIA_ID,1); 
END
^


/* Trigger: TR_LICENZ_PROD_NODE_BI0 */
CREATE TRIGGER TR_LICENZ_PROD_NODE_BI0 FOR LICENZ_PROD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_LICENZ_PROD_NODE_ID; 
END
^


/* Trigger: TR_LOG_CENI_DDS_BI0 */
CREATE TRIGGER TR_LOG_CENI_DDS_BI0 FOR LOG_CENI_DDS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_LOG_CENI_DDS_ID,1); 
    NEW.DATETIME = CURRENT_TIMESTAMP;
END
^


/* Trigger: TR_MESA_BI0 */
CREATE TRIGGER TR_MESA_BI0 FOR MESA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_MESA_ID, 1); 
END
^


/* Trigger: TR_MESA_TIP_BI0 */
CREATE TRIGGER TR_MESA_TIP_BI0 FOR MESA_TIP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_MESA_TIP_ID,1);
END
^


/* Trigger: TR_MESSAGES_AI0 */
CREATE TRIGGER TR_MESSAGES_AI0 FOR MESSAGES
ACTIVE AFTER INSERT POSITION 0
AS
BEGIN
    POST_EVENT 'SYSTEM_MESSAGE';
END
^


/* Trigger: TR_MESSAGES_BI */
CREATE TRIGGER TR_MESSAGES_BI FOR MESSAGES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_MESSAGES_ID,1); 
 
  NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: TR_NAL_BI0 */
CREATE TRIGGER TR_NAL_BI0 FOR NAL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_NAL_ID,1); 
 
    NEW.KOL_IZL = 0.00; 
 
END
^


/* Trigger: TR_OFFERS_BI0 */
CREATE TRIGGER TR_OFFERS_BI0 FOR OFFERS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OFFERS_ID; 
 
    IF (NEW.OFFER_TYPE IS NULL) THEN 
        NEW.OFFER_TYPE = 0; 
END
^


/* Trigger: TR_OFFER_EL_BI0 */
CREATE TRIGGER TR_OFFER_EL_BI0 FOR OFFER_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OFFER_EL_ID; 
END
^


/* Trigger: TR_OFFER_POR_NODE_AI0 */
CREATE TRIGGER TR_OFFER_POR_NODE_AI0 FOR OFFER_POR_NODE
ACTIVE AFTER INSERT POSITION 0
AS 
DECLARE VARIABLE L_USER_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_POR_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_STATUS TYPE OF DOM_SMAL_INT; 
BEGIN 
    SELECT 
        OFFERS.STATUS 
    FROM 
        OFFERS 
    WHERE 
        OFFERS.ID = NEW.OFFER_ID 
    INTO 
        :L_STATUS; 
 
    IF (:L_STATUS IN (1, 4)) THEN 
        EXIT; 
 
    SELECT 
        COUNT(OFFER_USER_NODE.ID) 
    FROM 
        OFFER_USER_NODE 
    WHERE 
        OFFER_USER_NODE.OFFER_ID = NEW.OFFER_ID 
    INTO 
        :L_USER_COUNT; 
 
    SELECT 
        COUNT(OFFER_POR_NODE.ID) 
    FROM 
        OFFER_POR_NODE 
    WHERE 
        OFFER_POR_NODE.OFFER_ID = NEW.OFFER_ID 
    INTO 
        :L_POR_COUNT; 
 
    L_USER_COUNT = COALESCE(L_USER_COUNT, 0); 
    L_POR_COUNT = L_POR_COUNT; 
 
    UPDATE OFFERS SET 
        STATUS = IIF (:L_USER_COUNT = 0, 3, IIF(:L_POR_COUNT < :L_USER_COUNT, 2, 3)) 
    WHERE 
        ID = NEW.OFFER_ID; 
END
^


/* Trigger: TR_OFFER_POR_NODE_BD0 */
CREATE TRIGGER TR_OFFER_POR_NODE_BD0 FOR OFFER_POR_NODE
ACTIVE BEFORE DELETE POSITION 0
AS 
DECLARE VARIABLE L_USER_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_POR_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_STATUS TYPE OF DOM_SMAL_INT; 
BEGIN 
    SELECT 
        OFFERS.STATUS 
    FROM 
        OFFERS 
    WHERE 
        OFFERS.ID = OLD.OFFER_ID 
    INTO 
        :L_STATUS; 
 
    IF (:L_STATUS IN (1, 4)) THEN 
        EXIT; 
 
    SELECT 
        COUNT(OFFER_USER_NODE.ID) 
    FROM 
        OFFER_USER_NODE 
    WHERE 
        OFFER_USER_NODE.OFFER_ID = OLD.OFFER_ID 
    INTO 
        :L_USER_COUNT; 
 
    SELECT 
        COUNT(OFFER_POR_NODE.ID) 
    FROM 
        OFFER_POR_NODE 
    WHERE 
        OFFER_POR_NODE.OFFER_ID = OLD.OFFER_ID 
    INTO 
        :L_POR_COUNT; 
 
    L_USER_COUNT = COALESCE(L_USER_COUNT, 0); 
    L_POR_COUNT = L_POR_COUNT - 1; 
 
    UPDATE OFFERS SET 
        STATUS = IIF (:L_POR_COUNT = 0, 0, IIF(:L_USER_COUNT = 0, 3, IIF(:L_POR_COUNT < :L_USER_COUNT, 2, 3))) 
    WHERE 
        ID = OLD.OFFER_ID; 
END
^


/* Trigger: TR_OFFER_POR_NODE_BI0 */
CREATE TRIGGER TR_OFFER_POR_NODE_BI0 FOR OFFER_POR_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OFFER_POR_NODE_ID; 
END
^


/* Trigger: TR_OFFER_TERMS_BI0 */
CREATE TRIGGER TR_OFFER_TERMS_BI0 FOR OFFER_TERMS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OFFER_TERMS_ID; 
END
^


/* Trigger: TR_OFFER_USER_NODE_AI0 */
CREATE TRIGGER TR_OFFER_USER_NODE_AI0 FOR OFFER_USER_NODE
ACTIVE AFTER INSERT POSITION 0
AS 
DECLARE VARIABLE L_USER_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_POR_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_STATUS TYPE OF DOM_SMAL_INT; 
BEGIN 
    SELECT 
        OFFERS.STATUS 
    FROM 
        OFFERS 
    WHERE 
        OFFERS.ID = NEW.OFFER_ID 
    INTO 
        :L_STATUS; 
 
    IF (:L_STATUS IN (1, 4)) THEN 
        EXIT; 
 
    SELECT 
        COUNT(OFFER_USER_NODE.ID) 
    FROM 
        OFFER_USER_NODE 
    WHERE 
        OFFER_USER_NODE.OFFER_ID = NEW.OFFER_ID 
    INTO 
        :L_USER_COUNT; 
 
    SELECT 
        COUNT(OFFER_POR_NODE.ID) 
    FROM 
        OFFER_POR_NODE 
    WHERE 
        OFFER_POR_NODE.OFFER_ID = NEW.OFFER_ID 
    INTO 
        :L_POR_COUNT; 
 
    L_USER_COUNT = L_USER_COUNT; 
    L_POR_COUNT = COALESCE(L_POR_COUNT, 0); 
 
 
 
    UPDATE OFFERS SET 
        STATUS = IIF (:L_POR_COUNT = 0, 0, IIF(:L_POR_COUNT < :L_USER_COUNT, 2, 3)) 
    WHERE 
        ID = NEW.OFFER_ID; 
END
^


/* Trigger: TR_OFFER_USER_NODE_BD0 */
CREATE TRIGGER TR_OFFER_USER_NODE_BD0 FOR OFFER_USER_NODE
ACTIVE BEFORE DELETE POSITION 0
AS 
DECLARE VARIABLE L_USER_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_POR_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_STATUS TYPE OF DOM_SMAL_INT; 
BEGIN 
    SELECT 
        OFFERS.STATUS 
    FROM 
        OFFERS 
    WHERE 
        OFFERS.ID = OLD.OFFER_ID 
    INTO 
        :L_STATUS; 
 
    IF (:L_STATUS IN (1, 4)) THEN 
        EXIT; 
 
    SELECT 
        COUNT(OFFER_USER_NODE.ID) 
    FROM 
        OFFER_USER_NODE 
    WHERE 
        OFFER_USER_NODE.OFFER_ID = OLD.OFFER_ID 
    INTO 
        :L_USER_COUNT; 
 
    SELECT 
        COUNT(OFFER_POR_NODE.ID) 
    FROM 
        OFFER_POR_NODE 
    WHERE 
        OFFER_POR_NODE.OFFER_ID = OLD.OFFER_ID 
    INTO 
        :L_POR_COUNT; 
 
    L_USER_COUNT = L_USER_COUNT - 1; 
    L_POR_COUNT = COALESCE(L_POR_COUNT, 0); 
 
    UPDATE OFFERS SET 
        STATUS = IIF (:L_USER_COUNT = 0, IIF (:L_POR_COUNT = 0, 0, 3), IIF(:L_POR_COUNT = 0, 0, IIF(:L_POR_COUNT < :L_USER_COUNT, 2, 3))) 
    WHERE 
        ID = OLD.OFFER_ID; 
END
^


/* Trigger: TR_OFFER_USER_NODE_BI0 */
CREATE TRIGGER TR_OFFER_USER_NODE_BI0 FOR OFFER_USER_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OFFER_USER_NODE_ID; 
END
^


/* Trigger: TR_OLD_IN_EL_BI */
CREATE TRIGGER TR_OLD_IN_EL_BI FOR OLD_IN_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_OLD_IN_EL_ID,1); 
END
^


/* Trigger: TR_OLD_OFFERS_BI0 */
CREATE TRIGGER TR_OLD_OFFERS_BI0 FOR OLD_OFFERS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OLD_OFFERS_ID; 
END
^


/* Trigger: TR_OLD_OFFER_EL_BI0 */
CREATE TRIGGER TR_OLD_OFFER_EL_BI0 FOR OLD_OFFER_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OLD_OFFER_EL_ID; 
END
^


/* Trigger: TR_OLD_OFFER_USER_NODE_BI0 */
CREATE TRIGGER TR_OLD_OFFER_USER_NODE_BI0 FOR OLD_OFFER_USER_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OLD_OFFER_USER_NODE_ID; 
END
^


/* Trigger: TR_OLD_OUT_EL_BI */
CREATE TRIGGER TR_OLD_OUT_EL_BI FOR OLD_OUT_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_OLD_OUT_EL_ID,1); 
 
    IF (NEW.VAT_PERCENT IS NULL) THEN 
        NEW.VAT_PERCENT = (SELECT SIMPLE.DDS FROM SIMPLE WHERE SIMPLE.ID 
= NEW.SIMPLE_ID); 
END
^


/* Trigger: TR_OLD_OUT_EL_PE_NODE_BI0 */
CREATE TRIGGER TR_OLD_OUT_EL_PE_NODE_BI0 FOR OLD_OUT_EL_PE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_OLD_OUT_EL_PE_ID,1); 
END
^


/* Trigger: TR_OLD_PARI_EL_BI */
CREATE TRIGGER TR_OLD_PARI_EL_BI FOR OLD_PARI_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OLD_PARI_EL_ID,1); 
END
^


/* Trigger: TR_OLD_POR_EL_PARAMS_BI0 */
CREATE TRIGGER TR_OLD_POR_EL_PARAMS_BI0 FOR OLD_POR_EL_PARAMS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OLD_POR_EL_PARAMS_ID; 
END
^


/* Trigger: TR_OLD_POR_EL_PRICE_COEF_BI0 */
CREATE TRIGGER TR_OLD_POR_EL_PRICE_COEF_BI0 FOR OLD_POR_EL_PRICE_COEF
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OLD_POR_EL_PRICE_COEF_ID; 
END
^


/* Trigger: TR_ONLINE_ROLES_BI0 */
CREATE TRIGGER TR_ONLINE_ROLES_BI0 FOR ONLINE_ROLES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_ONLINE_ROLES_ID; 
END
^


/* Trigger: TR_ONLINE_USERS_BI0 */
CREATE TRIGGER TR_ONLINE_USERS_BI0 FOR ONLINE_USERS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_ONLINE_USERS_ID; 
 
    IF (NEW.IS_ACTIVE IS NULL) THEN 
        NEW.IS_ACTIVE = 1; 
 
    NEW.EMAIL = LOWER(TRIM(NEW.EMAIL)); 
END
^


/* Trigger: TR_ONLINE_USERS_BU0 */
CREATE TRIGGER TR_ONLINE_USERS_BU0 FOR ONLINE_USERS
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    NEW.EMAIL = LOWER(TRIM(NEW.EMAIL)); 
END
^


/* Trigger: TR_ON_OFF_LINE_LOG_AU0 */
CREATE TRIGGER TR_ON_OFF_LINE_LOG_AU0 FOR ON_OFF_LINE_LOG
ACTIVE AFTER UPDATE POSITION 0
AS  
BEGIN  
  IF (NEW.RECIPIENTS = 0 OR NEW.RECIPIENTS IS NULL) THEN 
    DELETE FROM ON_OFF_LINE_LOG WHERE ON_OFF_LINE_LOG.ID = NEW.ID;  
END
^


/* Trigger: TR_OPR_AI1 */
CREATE TRIGGER TR_OPR_AI1 FOR OPR
ACTIVE AFTER INSERT POSITION 1
AS 
DECLARE VARIABLE L_OLD_IS_WORKED SMALLINT; 
BEGIN 
    SELECT 
        "USER".IS_WORKED 
    FROM 
        "USER" 
    WHERE 
        "USER".ID = NEW.USER_ID 
    INTO 
        :L_OLD_IS_WORKED; 
 
    IF ((NEW.OPR_TIP IN (1,2,4,6,7,11,16,26,27,35,37,39,40,50,79, 101, 102, 104, 106, 111,137,140,150,179, 201, 202, 204, 206, 211)) AND (BIN_AND(L_OLD_IS_WORKED,1) = 0)) THEN BEGIN 
        UPDATE "USER" SET "USER".IS_WORKED = BIN_OR("USER".IS_WORKED, 1) 
        WHERE "USER".ID = NEW.USER_ID; 
    END 
END
^


/* Trigger: TR_OPR_AMBALAJ_NODE_BI */
CREATE TRIGGER TR_OPR_AMBALAJ_NODE_BI FOR OPR_AMBALAJ_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_OPR_AMBALAJ_NODE_ID,1);
END
^


/* Trigger: TR_OPR_BU0 */
CREATE TRIGGER TR_OPR_BU0 FOR OPR
ACTIVE BEFORE UPDATE POSITION 0
AS 
DECLARE VARIABLE L_IN_EL_ID TYPE OF DOM_KEY; 
BEGIN 
    IF ((OLD.SKLAD_ID IS NOT NULL) AND (NEW.SKLAD_ID IS NOT NULL) AND (OLD.SKLAD_ID <> NEW.SKLAD_ID)) THEN BEGIN 
        FOR SELECT 
            IN_EL.ID 
        FROM 
            IN_EL 
        WHERE 
            IN_EL.OPR_ID = NEW.ID 
        INTO 
            :L_IN_EL_ID 
        DO 
            UPDATE PARTIDA_NAL SET SKLAD_ID = NEW.SKLAD_ID 
            WHERE IN_EL_ID = :L_IN_EL_ID; 
    END 
END
^


/* Trigger: TR_OPR_PADEJ_BI */
CREATE TRIGGER TR_OPR_PADEJ_BI FOR OPR_PADEJ
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OPR_PADEJ_ID,1);
END
^


/* Trigger: TR_OPR_PAYMENT_NODE_AI0 */
CREATE TRIGGER TR_OPR_PAYMENT_NODE_AI0 FOR OPR_PAYMENT_NODE
ACTIVE AFTER INSERT POSITION 0
AS 
BEGIN 
    INSERT INTO PAYMENT_NODE (OPR_ID,NODE_ID) 
    VALUES (NEW.OPR_ID,NEW.ID); 
 
    INSERT INTO PAYMENT_NODE (OPR_ID,NODE_ID) 
    VALUES (NEW.PAYMENT_ID,NEW.ID); 
END
^


/* Trigger: TR_OPR_PAYMENT_NODE_BD10 */
CREATE TRIGGER TR_OPR_PAYMENT_NODE_BD10 FOR OPR_PAYMENT_NODE
ACTIVE BEFORE DELETE POSITION 10
AS 
BEGIN 
    UPDATE SUMI SET SUMA_OST = ROUNDD(SUMA_OST + OLD.SUMA) WHERE ID IN (OLD.OPR_ID,OLD.PAYMENT_ID); 
END
^


/* Trigger: TR_OPR_PAYMENT_NODE_BI */
CREATE TRIGGER TR_OPR_PAYMENT_NODE_BI FOR OPR_PAYMENT_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_OPR_PAYMENT_NODE_ID,1);
END
^


/* Trigger: TR_OPR_RECEPIES_BI0 */
CREATE TRIGGER TR_OPR_RECEPIES_BI0 FOR OPR_RECEPIES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OPR_RECEPIES_ID; 
END
^


/* Trigger: TR_OPR_RECEPIES_EL_BI0 */
CREATE TRIGGER TR_OPR_RECEPIES_EL_BI0 FOR OPR_RECEPIES_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OPR_RECEPIES_EL_ID; 
END
^


/* Trigger: TR_OPR_SUMI_BI */
CREATE TRIGGER TR_OPR_SUMI_BI FOR OPR_SUMI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPR_SUMI_ID,1); 
END
^


/* Trigger: TR_ORDER_ACTIONS_BI0 */
CREATE TRIGGER TR_ORDER_ACTIONS_BI0 FOR ORDER_ACTIONS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_ORDER_ACTIONS_ID; 
 
    NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: TR_OTCS_OPR_NODE_BI0 */
CREATE TRIGGER TR_OTCS_OPR_NODE_BI0 FOR OTCS_OPR_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OTCS_OPR_NODE_ID; 
END
^


/* Trigger: TR_OTC_EL_EDIT_BI */
CREATE TRIGGER TR_OTC_EL_EDIT_BI FOR OTC_EL_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OTC_EL_EDIT_ID,1);
END
^


/* Trigger: TR_OTC_PER_BI */
CREATE TRIGGER TR_OTC_PER_BI FOR OTC_PER
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OTC_PER_ID,1);
END
^


/* Trigger: TR_OUT_BIU10 */
CREATE TRIGGER TR_OUT_BIU10 FOR OUT
ACTIVE BEFORE INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_SUMA TYPE OF DOM_SUMA; 
BEGIN 
    SELECT 
        SUM(EL.SUMA) 
    FROM 
        OUT_EL EL 
    WHERE 
        EL.OPR_ID = NEW.OPR_ID 
    INTO 
        :L_SUMA; 
 
    IF (INSERTING) THEN BEGIN 
        IF (NEW.PAY_TIP <> 1) THEN 
            EXIT; 
 
        IF (L_SUMA IS NULL) THEN BEGIN 
            INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST) 
            SELECT 
                OPR.ID, 
                OPR.SUMA, 
                OPR.SUMA 
            FROM 
                OPR 
            WHERE 
                ID = NEW.OPR_ID; 
        END 
        ELSE BEGIN 
            INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST, VAT_PERCENT) 
            SELECT 
                OUT_EL.OPR_ID, 
                SUM(OUT_EL.SUMA), 
                SUM(OUT_EL.SUMA), 
                PROD_CENI_EL.VAT_PERCENT 
            FROM 
                OUT_EL INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID AND OUT_EL.OPR_ID = NEW.OPR_ID 
            GROUP BY 1, 4; 
        END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        IF ((OLD.PAY_TIP IN (0,2,4)) AND (NEW.PAY_TIP = 1)) THEN BEGIN 
            /*ДОБАВЯМЕ НОВ ЗАПИС, ЗА ДА СЕ КАЖЕ, ЧЕ ИМА ЗА ПЛАЩАНЕ*/ 
            IF (L_SUMA IS NULL) THEN BEGIN 
                INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST) 
                SELECT 
                    OPR.ID, 
                    OPR.SUMA, 
                    OPR.SUMA 
                FROM 
                    OPR 
                WHERE 
                    ID = NEW.OPR_ID; 
            END 
            ELSE BEGIN 
                INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST, VAT_PERCENT) 
                SELECT 
                    OUT_EL.OPR_ID, 
                    SUM(OUT_EL.SUMA), 
                    SUM(OUT_EL.SUMA), 
                    PROD_CENI_EL.VAT_PERCENT 
                FROM 
                    OUT_EL INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID AND OUT_EL.OPR_ID = NEW.OPR_ID 
                GROUP BY 1, 4; 
            END 
        END 
        ELSE IF ((OLD.PAY_TIP IN (1,3)) AND (NEW.PAY_TIP IN (0,2))) THEN BEGIN 
            /*СМЕНЯ СИ СТАТУСА НА ПЛАТЕНО ВЕДНАГА - РАЗКАЧАМЕ ВРЪЗКИТЕ С ПЛАЩАНИЯ, НО ПЪРВО НАМАЛЯМ ИЗПОЛЗВАНАТА СУМА 
            НА ОПЕРАЦИЙТЕ СВЪРЗАНИ С ТАЗИ*/ 
            DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
        END 
    END 
END;
^


/* Trigger: TR_OUT_BU5 */
CREATE TRIGGER TR_OUT_BU5 FOR OUT
ACTIVE BEFORE UPDATE POSITION 5
AS 
DECLARE VARIABLE IS_UNREAL SMALLINT; 
BEGIN 
    SELECT FIRST 1 
        SYSTEM.UNREALSOFT 
    FROM 
        SYSTEM 
    INTO 
        :IS_UNREAL; 
    IF (IS_UNREAL = 1) THEN BEGIN 
        IF ((OLD.PAY_TIP = 1) AND (NEW.PAY_TIP = 3))THEN BEGIN 

            EXECUTE PROCEDURE CHANGE_LICENZ(NEW.OPR_ID) 
            RETURNING_VALUES :IS_UNREAL; 
 
            EXECUTE PROCEDURE SLEDI_LICENZ_UPDATE(NEW.OPR_ID);
        END 
        ELSE IF ((OLD.PAY_TIP = 3) AND (NEW.PAY_TIP = 1))THEN 
            EXECUTE PROCEDURE DECREASE_LICENZ(NEW.OPR_ID) 
            RETURNING_VALUES :IS_UNREAL; 
 
    END 
END
^


/* Trigger: TR_OUT_EL_AI2 */
CREATE TRIGGER TR_OUT_EL_AI2 FOR OUT_EL
ACTIVE AFTER INSERT POSITION 2
AS 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_KLI_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_AMB_ID TYPE OF DOM_KEY; 
BEGIN 
    SELECT 
        OPR.OPR_TIP, 
        OPR.KLI_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = NEW.OPR_ID 
    INTO 
        :L_OPR_TIP, :L_KLI_ID; 
 
    IF ((L_OPR_TIP IN (56,57)) AND (L_KLI_ID IS NOT NULL)) THEN BEGIN 
        SELECT 
            AMBALAJ.ID 
        FROM 
            AMBALAJ 
        WHERE 
            AMBALAJ.SIMPLE_ID = NEW.SIMPLE_ID 
            AND AMBALAJ.KLI_ID = :L_KLI_ID 
        INTO 
            :L_AMB_ID; 
 
        IF (L_AMB_ID IS NULL) THEN 
            INSERT INTO AMBALAJ (KLI_ID,SIMPLE_ID, KOL) 
            VALUES (:L_KLI_ID, NEW.SIMPLE_ID, 0.00); 
 
        UPDATE AMBALAJ SET 
            KOL = KOL - NEW.KOL 
        WHERE 
            AMBALAJ.KLI_ID = :L_KLI_ID 
            AND AMBALAJ.SIMPLE_ID = NEW.SIMPLE_ID; 
    END 
END
^


/* Trigger: TR_OUT_EL_AU0 */
CREATE TRIGGER TR_OUT_EL_AU0 FOR OUT_EL
ACTIVE AFTER UPDATE POSITION 0
AS 
DECLARE VARIABLE L_BR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_SMAL_INT; 
BEGIN 
    IF (((NEW.SUMA > 0.00) AND (OLD.SUMA > 0.00)) 
    AND ((ROUND(NEW.KOL,5) = ROUND(OLD.KOL,5)))) THEN 
        EXIT; 
 
    SELECT 
        OPR.ID, 
        OPR.SKLAD_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = NEW.OPR_ID 
        AND OPR.OPR_TIP IN (2,34) 
    INTO 
        :L_BR_ID, :L_SKLAD_ID; 
 
    IF (L_BR_ID IS NULL) THEN 
        EXIT; 
 
    L_BR_ID = NULL; 
 
    SELECT 
        BZR.ID 
    FROM 
        BONUSI_ZA_RAZCHET BZR 
    WHERE 
        BZR.OUT_EL_ID = NEW.ID 
    INTO 
        :L_BR_ID; 
 
    IF (L_BR_ID IS NULL) THEN BEGIN 
        IF (NEW.SUMA = 0.00) THEN BEGIN 
        --НЯМАЛО Е БОНУС, НО СЕГА СУМАТА Е 0.00 КАТО БОНУС - ДОБАВЯМ ГО 
            INSERT INTO BONUSI_ZA_RAZCHET (OUT_EL_ID, SUMA, KOL) 
            VALUES(NEW.ID, ROUND(COALESCE((SELECT NAL.LAST_CENA FROM NAL WHERE NAL.SIMPLE_ID = NEW.SIMPLE_ID AND NAL.SKLAD_ID = :L_SKLAD_ID), 0.00) * NEW.KOL, 2), NEW.KOL); 
        END 
    END 
    ELSE BEGIN 
        IF (NEW.SUMA > 0.00) THEN 
            DELETE FROM BONUSI_ZA_RAZCHET 
            WHERE 
                OUT_EL_ID = NEW.ID; 
        ELSE BEGIN 
            IF (ROUND(OLD.KOL, 5) <> ROUND(NEW.KOL, 5)) THEN BEGIN 
                DELETE FROM BONUS_RAZCHET_NODE 
                WHERE 
                    OUT_ID = :L_BR_ID; 
 
                UPDATE BONUSI_ZA_RAZCHET SET 
                    SUMA = ROUND(ROUND(SUMA / OLD.KOL,5) * NEW.KOL,2), 
                    SUMA_OST = ROUND(ROUND(SUMA / OLD.KOL,5) * NEW.KOL,2), 
                    KOL = NEW.KOL 
                WHERE 
                    OUT_EL_ID = NEW.ID; 
            END 
        END 
    END 
END
^


/* Trigger: TR_OUT_EL_AU1 */
CREATE TRIGGER TR_OUT_EL_AU1 FOR OUT_EL
ACTIVE AFTER UPDATE POSITION 1
AS 
DECLARE VARIABLE L_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_KOL TYPE OF DOM_KOL; 
BEGIN 
    IF (ROUND(NEW.KOL,5) = ROUND(OLD.KOL,5)) THEN 
        EXIT; 
 
    SELECT 
        OUT_EL_RAZ_NODE.ID, 
        RAZFASOVKA.KOL 
    FROM 
        OUT_EL_RAZ_NODE INNER JOIN RAZFASOVKA ON RAZFASOVKA.ID = OUT_EL_RAZ_NODE.RAZFASOVKA_ID 
    WHERE 
        OUT_EL_RAZ_NODE.OUT_EL_ID = NEW.ID 
    INTO 
        :L_ID,:L_KOL; 
 
    IF (L_ID IS NULL) THEN 
        EXIT; 
 
    UPDATE OUT_EL_RAZ_NODE SET 
        KOL = ROUND(NEW.KOL / :L_KOL,5) 
    WHERE 
        OUT_EL_ID = NEW.ID; 
 
 
END
^


/* Trigger: TR_OUT_EL_BD1 */
CREATE TRIGGER TR_OUT_EL_BD1 FOR OUT_EL
ACTIVE BEFORE DELETE POSITION 1
AS 
DECLARE VARIABLE L_OUT_EL2_ID INTEGER; 
DECLARE VARIABLE L_OUT_EL2_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_NAL_ID INTEGER; 
DECLARE VARIABLE L_BONUS_TOCHKI INTEGER; 
DECLARE VARIABLE L_KLI_ID INTEGER; 
BEGIN 
    L_OUT_EL2_ID = NULL; 
    SELECT 
        OUT_EL2.ID, 
        OUT_EL2.KOL 
    FROM 
        OUT_EL2 
    WHERE 
        OUT_EL2.OUT_EL_ID = OLD.ID 
    INTO 
        :L_OUT_EL2_ID,:L_OUT_EL2_KOL; 
    IF (L_OUT_EL2_ID IS NOT NULL) THEN BEGIN 
        UPDATE NAL2 SET 
        NAL2.KOL = ROUND5(NAL2.KOL + :L_OUT_EL2_KOL) 
        WHERE NAL2.NAL_ID = (SELECT NAL.ID FROM NAL INNER JOIN OPR ON OPR.SKLAD_ID = NAL.SKLAD_ID AND OPR.ID = OLD.OPR_ID AND NAL.SIMPLE_ID = OLD.SIMPLE_ID); 
    END 
 
    L_BONUS_TOCHKI = 0; 
    SELECT 
      PROD_CENI_EL.BONUS_TOCHKI 
    FROM 
      PROD_CENI_EL 
    WHERE 
      PROD_CENI_EL.OUT_EL_ID = OLD.ID 
    INTO 
      :L_BONUS_TOCHKI; 
 
    IF (L_BONUS_TOCHKI > 0 AND L_BONUS_TOCHKI IS NOT NULL) THEN BEGIN 
      L_KLI_ID = NULL; 
      SELECT FIRST 1 
        OPR.KLI_ID 
      FROM 
        OUT_EL INNER JOIN OPR ON OPR.ID = OLD.OPR_ID 
      INTO 
        :L_KLI_ID; 
 
      IF (L_KLI_ID IS NOT NULL) THEN BEGIN 
        UPDATE KLI SET 
          BONUS_TOCHKI = BONUS_TOCHKI - :L_BONUS_TOCHKI 
        WHERE KLI.ID = :L_KLI_ID; 
      END 
    END 
END
^


/* Trigger: TR_OUT_EL_BD2 */
CREATE TRIGGER TR_OUT_EL_BD2 FOR OUT_EL
ACTIVE BEFORE DELETE POSITION 2
AS 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_KLI_ID TYPE OF DOM_KEY; 
BEGIN 
    SELECT 
        OPR.OPR_TIP, 
        OPR.KLI_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = OLD.OPR_ID 
    INTO 
        :L_OPR_TIP, :L_KLI_ID; 
 
    IF ((L_OPR_TIP IN (56,57)) AND (L_KLI_ID IS NOT NULL)) THEN BEGIN 
        UPDATE AMBALAJ SET 
            KOL = KOL + OLD.KOL 
        WHERE 
            AMBALAJ.KLI_ID = :L_KLI_ID 
            AND AMBALAJ.SIMPLE_ID = OLD.SIMPLE_ID; 
    END 
END
^


/* Trigger: TR_OUT_EL_FAK_OUT_EL_BI0 */
CREATE TRIGGER TR_OUT_EL_FAK_OUT_EL_BI0 FOR OUT_EL_FAK_OUT_EL
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_OUT_EL_FAK_OUT_EL_ID,1); 
END
^


/* Trigger: TR_OUT_EL_RAZ_NODE_BI */
CREATE TRIGGER TR_OUT_EL_RAZ_NODE_BI FOR OUT_EL_RAZ_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
 IF (NEW.ID IS NULL) THEN
   NEW.ID = GEN_ID(GEN_OUT_EL_RAZ_NODE_ID,1);
END
^


/* Trigger: TR_PARI_CRYPT_BI */
CREATE TRIGGER TR_PARI_CRYPT_BI FOR PARI_CRYPT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_ID,1);
END
^


/* Trigger: TR_PARI_DIST_BI */
CREATE TRIGGER TR_PARI_DIST_BI FOR PARI_DIST
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_DIST_ID,1);
END
^


/* Trigger: TR_PARI_DIST_BIU10 */
CREATE TRIGGER TR_PARI_DIST_BIU10 FOR PARI_DIST
ACTIVE BEFORE INSERT POSITION 10
AS 
BEGIN
    INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST)
    SELECT
        OPR.ID,
        ROUND(OPR.SUMA, 2),
        ROUND(OPR.SUMA, 2)
    FROM 
        OPR 
    WHERE 
        ID = NEW.OPR_ID;
END
^


/* Trigger: TR_PARI_EL_ANUL_BI */
CREATE TRIGGER TR_PARI_EL_ANUL_BI FOR PARI_EL_ANUL
ACTIVE BEFORE INSERT POSITION 0
AS
  BEGIN
    IF (NEW.ID IS NULL) THEN
      NEW.ID = GEN_ID(GEN_PARI_EL_ANUL_ID,1);
  END
^


/* Trigger: TR_PARI_EL_EDIT_BI */
CREATE TRIGGER TR_PARI_EL_EDIT_BI FOR PARI_EL_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_EL_EDIT_ID,1);
END
^


/* Trigger: TR_PARI_FAKINUSLUGA_NODE_BI */
CREATE TRIGGER TR_PARI_FAKINUSLUGA_NODE_BI FOR PARI_FAKINUSLUGA_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
IF (NEW.ID IS NULL) THEN
NEW.ID = GEN_ID(GEN_PARI_FAKINUSLUGA_NODE_ID,1);
END
^


/* Trigger: TR_PARI_FAK_NODE_BI0 */
CREATE TRIGGER TR_PARI_FAK_NODE_BI0 FOR PARI_FAK_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_PARI_FAK_NODE_ID; 
END
^


/* Trigger: TR_PARI_SKLOPR_NODE_BI */
CREATE TRIGGER TR_PARI_SKLOPR_NODE_BI FOR PARI_SKLOPR_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_SKLOPR_NODE_ID,1);
END
^


/* Trigger: TR_PARI_TMP_BI */
CREATE TRIGGER TR_PARI_TMP_BI FOR PARI_TMP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_TMP_ID,1);
END
^


/* Trigger: TR_PARTIDA_EL_BI */
CREATE TRIGGER TR_PARTIDA_EL_BI FOR PARTIDA_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARTIDA_EL_ID,1);
END
^


/* Trigger: TR_PARTIDA_EL_NODE_BD0 */
CREATE TRIGGER TR_PARTIDA_EL_NODE_BD0 FOR PARTIDA_EL_NODE
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN 
    UPDATE IZL SET 
    IZL.KOL_IZL = ROUND5(IZL.KOL_IZL + OLD.KOL) 
    WHERE IZL.ID = ( 
    SELECT 
       PARTIDA_IZL_NODE.IZL_ID 
    FROM 
        PARTIDA_IZL_NODE 
    WHERE 
        PARTIDA_IZL_NODE.PARTIDA_EL_ID = OLD.ID); 
END
^


/* Trigger: TR_PARTIDA_EL_NODE_BI */
CREATE TRIGGER TR_PARTIDA_EL_NODE_BI FOR PARTIDA_EL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARTIDA_EL_NODE_ID,1);
END
^


/* Trigger: TR_PARTIDA_IN_EL_NODE_BI */
CREATE TRIGGER TR_PARTIDA_IN_EL_NODE_BI FOR PARTIDA_IN_EL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = NEXT VALUE FOR GEN_PARTIDA_IN_EL_NODE_ID;
END
^


/* Trigger: TR_PARTIDA_IZL_NODE_AI0 */
CREATE TRIGGER TR_PARTIDA_IZL_NODE_AI0 FOR PARTIDA_IZL_NODE
ACTIVE AFTER INSERT POSITION 0
AS
BEGIN
    /*КОМПЕНСИРАНОТО КОЛИЧЕСТВО СЕ МАХА ОТ ОСТАВАЩО ЗА КОМПЕНСЦИЯ*/
    UPDATE IZL SET
    IZL.KOL_IZL = ROUND5(IZL.KOL_IZL - (
        SELECT
            PARTIDA_EL_NODE.KOL
        FROM
            PARTIDA_EL_NODE
        WHERE
            PARTIDA_EL_NODE.ID = NEW.PARTIDA_EL_ID))
    WHERE IZL.ID = NEW.IZL_ID;
END
^


/* Trigger: TR_PARTIDA_IZL_NODE_BI */
CREATE TRIGGER TR_PARTIDA_IZL_NODE_BI FOR PARTIDA_IZL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARTIDA_IZL_NODE_ID,1);
END
^


/* Trigger: TR_PARTIDA_NAL_BI */
CREATE TRIGGER TR_PARTIDA_NAL_BI FOR PARTIDA_NAL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_PARTIDA_NAL_ID,1); 
 
    IF ((NEW.SIMPLE_ID IS NULL) OR (NEW.SKLAD_ID IS NULL))THEN BEGIN 
        SELECT 
            OPR.SKLAD_ID, 
            IN_EL.SIMPLE_ID 
        FROM 
            IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
        WHERE 
            IN_EL.ID = NEW.IN_EL_ID 
        INTO 
            NEW.SKLAD_ID, NEW.SIMPLE_ID; 
    END 
END
^


/* Trigger: TR_PARTIDA_OUT_EL_NODE_BI */
CREATE TRIGGER TR_PARTIDA_OUT_EL_NODE_BI FOR PARTIDA_OUT_EL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARTIDA_OUT_EL_NODE_ID,1);
END
^


/* Trigger: TR_PARTIDA_PROP_NODE */
CREATE TRIGGER TR_PARTIDA_PROP_NODE FOR PARTIDA_PROP_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_PARTIDA_PROP_NODE_ID,1); 
END
^


/* Trigger: TR_PARTIDA_RETURN_NODE_BI0 */
CREATE TRIGGER TR_PARTIDA_RETURN_NODE_BI0 FOR PARTIDA_RETURN_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = NEXT VALUE FOR GEN_PARTIDA_RETURN_NODE_ID;
END
^


/* Trigger: TR_PAYMENTS_EL_BI */
CREATE TRIGGER TR_PAYMENTS_EL_BI FOR PAYMENTS_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PAYMENTS_EL_ID,1);
END
^


/* Trigger: TR_PAYMENT_AI10 */
CREATE TRIGGER TR_PAYMENT_AI10 FOR PAYMENT
ACTIVE AFTER INSERT POSITION 10
AS 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_OPR_TIP INTEGER; 
BEGIN 
    SELECT 
        OPR.SUMA, 
        OPR_TIP.ID 
    FROM 
        OPR 
        INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
    WHERE 
        OPR.ID = NEW.OPR_ID 
    INTO 
        :L_SUMA, L_OPR_TIP; 
 
    IF (L_OPR_TIP = 6 AND NEW.VAT_PERCENT  IS NULL)  THEN 
        UPDATE PAYMENT SET VAT_PERCENT = 20.0 WHERE OPR_ID = NEW.OPR_ID; 
 
    INSERT INTO SUMI(OPR_ID,SUMA,SUMA_OST,VAT_PERCENT) 
    VALUES (NEW.OPR_ID,:L_SUMA,:L_SUMA, NEW.VAT_PERCENT); 
END
^


/* Trigger: TR_PAYMENT_NODE_BI0 */
CREATE TRIGGER TR_PAYMENT_NODE_BI0 FOR PAYMENT_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_PAYMENT_NODE_ID,1); 
END
^


/* Trigger: TR_PLACE_BI */
CREATE TRIGGER TR_PLACE_BI FOR PLACE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
 IF (NEW.ID IS NULL) THEN 
   NEW.ID = GEN_ID(GEN_PLACE_ID,1); 
END
^


/* Trigger: TR_POR_AI0 */
CREATE TRIGGER TR_POR_AI0 FOR POR
ACTIVE AFTER INSERT POSITION 0
AS 
BEGIN 
    POST_EVENT 'ADD_NEW_ORDER'; 
END
^


/* Trigger: TR_POR_BI */
CREATE TRIGGER TR_POR_BI FOR POR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_POR_ID,1); 
 
    IF (NEW.STATUS IN (-7, -6)) THEN 
        NEW.CONTRACT_DATE = CURRENT_DATE; 
 
    IF (NEW.STATUS IN (-6)) THEN 
        NEW.PRODUCTION_STATUS_DT = CURRENT_TIMESTAMP; 
 
    IF (NEW.FLAG_DEFERRED_PAYMENT IS NULL) THEN 
        NEW.FLAG_DEFERRED_PAYMENT = 0; 
END
^


/* Trigger: TR_POR_BU0 */
CREATE TRIGGER TR_POR_BU0 FOR POR
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    IF (OLD.STATUS <> NEW.STATUS) THEN 
        NEW.STATUS_DATE = CURRENT_TIMESTAMP; 
 
    IF ((NEW.STATUS = -7) AND (OLD.STATUS <> -7)) THEN 
        NEW.CONTRACT_DATE = CURRENT_DATE; 
 
    IF ((NEW.STATUS = -6) AND (OLD.STATUS <> -6)) THEN 
        NEW.PRODUCTION_STATUS_DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: TR_POR_EDIT_BI0 */
CREATE TRIGGER TR_POR_EDIT_BI0 FOR POR_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_POR_EDIT_ID; 
END
^


/* Trigger: TR_POR_EL_AI0 */
CREATE TRIGGER TR_POR_EL_AI0 FOR POR_EL
ACTIVE AFTER INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.FLAG_LINE = 0) THEN 
        EXIT; 
 
    -- УПДЕЙТВАМ ПОРЪЧКАТА СЪС СТАТУСА НА РЕДА. САМО АКО ВСЕ ОЩЕ НЯМА ТОЗИ СТАТУС. ДА НЕ ЪПДЕЙТВАМ ЗАПИСА ЗА ЕДНО И СЪЩО ПОСТОЯННО. 
    UPDATE POR SET 
        POR.FLAG_LINES = BIN_OR(POR.FLAG_LINES, NEW.FLAG_LINE) 
    WHERE 
        POR.OPR_ID = NEW.OPR_ID 
        AND BIN_AND(POR.FLAG_LINES, NEW.FLAG_LINE) = 0; 
END
^


/* Trigger: TR_POR_EL_BD0 */
CREATE TRIGGER TR_POR_EL_BD0 FOR POR_EL
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN 
    IF (EXISTS( 
        SELECT 
            POR_EL.ID 
        FROM 
            POR_EL 
        WHERE 
            POR_EL.OPR_ID = OLD.OPR_ID 
            AND POR_EL.ID <> OLD.ID 
            AND POR_EL.FLAG_LINE = OLD.FLAG_LINE)) 
    THEN 
        EXIT; 
 
    UPDATE POR SET 
        POR.FLAG_LINES = BIN_XOR(POR.FLAG_LINES, OLD.FLAG_LINE) 
    WHERE 
        POR.OPR_ID = OLD.OPR_ID; 
END
^


/* Trigger: TR_POR_EL_BI */
CREATE TRIGGER TR_POR_EL_BI FOR POR_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
DECLARE VARIABLE L_STATUS_BIT TYPE OF DOM_SMAL_INT; 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_POR_EL_ID, 1); 
 
    /*IF (NEW.KOL > 0) THEN 
        NEW.PRICE = NEW.SUMA / NEW.KOL;*/ 
 
 
    NEW.FLAG_LINE = 0; 
 
    L_STATUS_BIT = -1; 
 
    IF (NEW.KOL = 0.00) THEN 
        L_STATUS_BIT = 2; 
    ELSE IF (NEW.KOL < NEW.KOL_POR) THEN 
        L_STATUS_BIT = 1; 
    ELSE IF (NEW.KOL > NEW.KOL_POR) THEN 
        L_STATUS_BIT = 0; 
 
    IF (L_STATUS_BIT >= 0) THEN BEGIN 
        NEW.FLAG_LINE = POWER(2, :L_STATUS_BIT); 
    END 
END
^


/* Trigger: TR_POR_EL_BU0 */
CREATE TRIGGER TR_POR_EL_BU0 FOR POR_EL
ACTIVE BEFORE UPDATE POSITION 0
AS 
DECLARE VARIABLE L_STATUS_BIT TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_NEW_POR_FLAG_LINES TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_OLD_POR_FLAG_LINES TYPE OF DOM_SMAL_INT; 
BEGIN 
    NEW.FLAG_LINE = 0; 
    L_STATUS_BIT = -1; 
 
    IF (NEW.KOL = 0.00) THEN 
        L_STATUS_BIT = 2; 
    ELSE IF (NEW.KOL < NEW.KOL_POR) THEN 
        L_STATUS_BIT = 1; 
    ELSE IF (NEW.KOL > NEW.KOL_POR) THEN 
        L_STATUS_BIT = 0; 
 
    IF (L_STATUS_BIT >= 0) THEN BEGIN 
        NEW.FLAG_LINE = POWER(2, :L_STATUS_BIT); 
    END 
 
 
    IF (OLD.FLAG_LINE = NEW.FLAG_LINE) THEN 
        -- НЯМА ПРОМЯНА В СТАТУСА НА РЕДА. НЯМА ДА ПРАВЯ ПОВЕЧЕ ПРОМЕНИ, ЗАЩОТО НЕ ВЛИЯЯТ НА ЦЯЛОСТНИЯ СТАТУС НА ПОРЪЧКАТА. 
        EXIT; 
 
    SELECT 
        POR.FLAG_LINES 
    FROM 
        POR 
    WHERE 
        POR.OPR_ID = OLD.OPR_ID 
    INTO 
        :L_OLD_POR_FLAG_LINES; 
 
    L_NEW_POR_FLAG_LINES = L_OLD_POR_FLAG_LINES; 
 
    IF (NOT EXISTS( 
        SELECT 
            POR_EL.ID 
        FROM 
            POR_EL 
        WHERE 
            POR_EL.OPR_ID = OLD.OPR_ID 
            AND POR_EL.ID <> OLD.ID 
            AND POR_EL.FLAG_LINE = OLD.FLAG_LINE)) 
    THEN 
        -- ПРЕМАХВАМ СТАРИЯ СТАТУС, ЗАЩОТО НЯМА ДРУГИ РЕДОВЕ С НЕГО 
        L_NEW_POR_FLAG_LINES = BIN_XOR(L_OLD_POR_FLAG_LINES, OLD.FLAG_LINE); 
 
    IF (NOT EXISTS( 
        SELECT 
            POR_EL.ID 
        FROM 
            POR_EL 
        WHERE 
            POR_EL.OPR_ID = OLD.OPR_ID 
            AND POR_EL.ID <> OLD.ID 
            AND POR_EL.FLAG_LINE = NEW.FLAG_LINE)) 
    THEN 
        -- ДОБАВЯМ НОВИЯ СТАТУС ЗАЩОТО ДО СЕГА НЯМА ДРУГИ РЕДОВЕ С НЕГО 
        L_NEW_POR_FLAG_LINES = BIN_OR(L_NEW_POR_FLAG_LINES, NEW.FLAG_LINE); 
 
    UPDATE POR SET 
        POR.FLAG_LINES = :L_NEW_POR_FLAG_LINES 
    WHERE 
        POR.OPR_ID = NEW.OPR_ID; 
END
^


/* Trigger: TR_POR_EL_PICTURES_NODE_BI0 */
CREATE TRIGGER TR_POR_EL_PICTURES_NODE_BI0 FOR POR_EL_PICTURES_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_POR_EL_PICTURES_NODE_ID; 
END
^


/* Trigger: TR_POR_EL_PRICE_COEFICIENT_BI0 */
CREATE TRIGGER TR_POR_EL_PRICE_COEFICIENT_BI0 FOR POR_EL_PRICE_COEFICIENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_POR_EL_PRICE_COEFICIENT_ID; 
END
^


/* Trigger: TR_POR_EL_RAZ_NODE_BI */
CREATE TRIGGER TR_POR_EL_RAZ_NODE_BI FOR POR_EL_RAZ_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_POR_EL_RAZ_NODE_ID,1);
END
^


/* Trigger: TR_POR_EL_REQUEST_NODE_BI0 */
CREATE TRIGGER TR_POR_EL_REQUEST_NODE_BI0 FOR POR_EL_REQUEST_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_POR_EL_REQUEST_NODE_ID; 
END
^


/* Trigger: TR_POR_FAK_PROD_NODE_BI0 */
CREATE TRIGGER TR_POR_FAK_PROD_NODE_BI0 FOR POR_FAK_PROD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_POR_FAK_PROD_NODE_ID,1); 
END
^


/* Trigger: TR_POR_OFFER_TERMS_NODE_BI0 */
CREATE TRIGGER TR_POR_OFFER_TERMS_NODE_BI0 FOR POR_OFFER_TERMS_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_POR_OFFER_TERMS_NODE_ID; 
END
^


/* Trigger: TR_POR_OUT_NODE_AI0 */
CREATE TRIGGER TR_POR_OUT_NODE_AI0 FOR POR_OUT_NODE
ACTIVE AFTER INSERT POSITION 0
AS
BEGIN
    UPDATE POR SET
    POR.STATUS  = 4/*ИЗПЪЛНЕНА*/
    WHERE POR.ID = NEW.POR_ID;
END
^


/* Trigger: TR_POR_OUT_NODE_BI */
CREATE TRIGGER TR_POR_OUT_NODE_BI FOR POR_OUT_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_POR_OUT_NODE_ID,1);
END
^


/* Trigger: TR_PRODUCTION_BI */
CREATE TRIGGER TR_PRODUCTION_BI FOR PRODUCTION
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PRODUCTION_ID,1);
END
^


/* Trigger: TR_PRODUCT_WAREHOUSE_NODE_BI0 */
CREATE TRIGGER TR_PRODUCT_WAREHOUSE_NODE_BI0 FOR PRODUCT_WAREHOUSE_MAP_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_PRODUCT_WAREHOUSE_ID; 
END
^


/* Trigger: TR_PROD_CENI_EL_AI0 */
CREATE TRIGGER TR_PROD_CENI_EL_AI0 FOR PROD_CENI_EL
ACTIVE AFTER INSERT POSITION 0
AS 
DECLARE VARIABLE L_KLI_ID INTEGER; 
DECLARE VARIABLE L_USER_ID INTEGER; 
DECLARE VARIABLE L_IP INTEGER; 
BEGIN 
    if (NEW.CENA_VALUTA = 0) THEN UPDATE PROD_CENI_EL SET PROD_CENI_EL.CENA_VALUTA = NULL WHERE PROD_CENI_EL.ID = NEW.ID; 
 
    IF ((NEW.BONUS_TOCHKI IS NULL) or (NEW.BONUS_TOCHKI = 0))  THEN 
        EXIT; 
 
    SELECT 
        OPR.KLI_ID 
    FROM 
        OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OUT_EL.ID = NEW.OUT_EL_ID 
    INTO 
        :L_KLI_ID; 
 
    IF (L_KLI_ID IS NULL) THEN 
        EXIT; 
 
    UPDATE KLI SET 
    BONUS_TOCHKI = BONUS_TOCHKI + NEW.BONUS_TOCHKI 
    WHERE KLI.ID = :L_KLI_ID; 
 
    SELECT 
      OPR.USER_ID, 
      OPR.IP 
    FROM 
      OPR 
      INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OPR.ID 
      INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID 
    WHERE 
      PROD_CENI_EL.ID = NEW.ID 
    INTO 
      :L_USER_ID, :L_IP; 
 
    INSERT INTO CFG_LOG (USER_ID, IP, TABLE_CODE, OBJ_ID, OPR_TIP) 
    VALUES (:L_USER_ID, :L_IP, 3, :L_KLI_ID, 'E'); 
END
^


/* Trigger: TR_PROD_CENI_EL_AI1 */
CREATE TRIGGER TR_PROD_CENI_EL_AI1 FOR PROD_CENI_EL
ACTIVE AFTER INSERT POSITION 1
AS 
DECLARE VARIABLE L_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PRICE TYPE OF DOM_CENA; 
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_SMAL_INT; 
BEGIN 
    --ЩЕ ПРОВЕРЯВА ДАЛИ OUT_EL-A Е НА НУЛЕВА ЦЕНА И АКО Е НА 0.00 И НЕ Е ОТ КОНФИГУРИРАН БОНУС, А Е ПРОДАДЕН НА 0.00 
    --ОТ БОНУСИТЕ ЗА РАЗДАВАНЕ ЩЕ ДОБАВЯ ИНФОРМАЦИЯТА КЪМ ТАБЛИЦАТА С БОНУСТЕ. 
    --ПРАВЯ ТРИГЕРА В ТАЗИ ТАБЛИЦА, ЗАЩОТО В OUT_EL НЕ Е ЯСНО ДАЛИ Е БОНУС ИЛИ НЕ, КОГАТО СЕ ПРОДАДЕ НА 0.00 
    --ПОНЕЖЕ ТАЗИ ИНФОРМАЦИЯ СЕ ДОБАВЯ КЪМ ТАЗИ ТАБЛИЦА СЛЕД ЗАПИСА В OUT-EL 
 
    L_KOL = NULL; 
 
    SELECT 
        OUT_EL.KOL , 
        OUT_EL.SIMPLE_ID, 
        OPR.SKLAD_ID 
    FROM 
        OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
    WHERE 
        OUT_EL.ID = NEW.OUT_EL_ID 
        AND ROUND(OUT_EL.SUMA,2) = 0.00 
        AND NEW.BONUS_ID IS NULL 
        AND OPR.OPR_TIP IN (2,34) 
        AND SIMPLE.USLUGA = '0' 
    INTO 
        :L_KOL, :L_SIMPLE_ID, :L_SKLAD_ID; 
 
    IF (L_KOL IS NULL) THEN 
        EXIT; 
 
    SELECT 
        COALESCE(NAL.LAST_CENA, 0.00) 
    FROM 
        NAL 
    WHERE 
        NAL.SKLAD_ID = :L_SKLAD_ID 
        AND NAL.SIMPLE_ID = :L_SIMPLE_ID 
    INTO 
        :L_PRICE; 
 
    UPDATE OR INSERT INTO BONUSI_ZA_RAZCHET(OUT_EL_ID,SUMA, KOL) 
    VALUES (NEW.OUT_EL_ID, ROUND(:L_KOL * :L_PRICE,2), :L_KOL) 
    MATCHING(OUT_EL_ID); 
END
^


/* Trigger: TR_PROD_CENI_EL_BI0 */
CREATE TRIGGER TR_PROD_CENI_EL_BI0 FOR PROD_CENI_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_PROD_CENI_EL_ID,1); 
 
    IF (NEW.VAT_PERCENT IS NULL) THEN 
        NEW.VAT_PERCENT = COALESCE((SELECT SIMPLE.DDS FROM SIMPLE INNER JOIN OUT_EL ON OUT_EL.SIMPLE_ID = SIMPLE.ID AND OUT_EL.ID = NEW.OUT_EL_ID), 20); 
 
    IF (NEW.VAT_GROUP IS NULL) THEN 
        NEW.VAT_GROUP = COALESCE((SELECT SIMPLE.VAT_GROUP FROM SIMPLE INNER JOIN OUT_EL ON OUT_EL.SIMPLE_ID = SIMPLE.ID AND OUT_EL.ID = NEW.OUT_EL_ID), 2); 
END
^


/* Trigger: TR_PROD_NODE_BI */
CREATE TRIGGER TR_PROD_NODE_BI FOR PROD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_PROD_NODE_ID,1);
END
^


/* Trigger: TR_PROFORMA_TO_FAK_BI0 */
CREATE TRIGGER TR_PROFORMA_TO_FAK_BI0 FOR PROFORMA_TO_FAK
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_PROFORMA_TO_FAK_ID,1); 
END
^


/* Trigger: TR_PROP_NODE_BI0 */
CREATE TRIGGER TR_PROP_NODE_BI0 FOR PROP_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_PROP_NODE_ID,1); 
END
^


/* Trigger: TR_PR_REQ_EL_PRICE_COEF_BI0 */
CREATE TRIGGER TR_PR_REQ_EL_PRICE_COEF_BI0 FOR PR_REQ_EL_PRICE_COEFICIENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_PR_REQ_EL_PRICE_COEF_ID; 
END
^


/* Trigger: TR_RAZPAD_BI */
CREATE TRIGGER TR_RAZPAD_BI FOR RAZPAD
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_RAZPAD_ID,1);
END
^


/* Trigger: TR_RAZPAD_BI0 */
CREATE TRIGGER TR_RAZPAD_BI0 FOR RAZPAD
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_RAZPAD_ID, 1); 
 
    NEW.R_TYPE = COALESCE(NEW.R_TYPE, 0); 
END
^


/* Trigger: TR_RDB$PARTIDA_NAL_AU0 */
CREATE TRIGGER TR_RDB$PARTIDA_NAL_AU0 FOR RDB$PARTIDA_NAL
ACTIVE AFTER UPDATE POSITION 0
AS
BEGIN
  IF (ROUND5(NEW.KOL_NAL) < 0.00001) THEN
    DELETE FROM RDB$PARTIDA_NAL WHERE RDB$PARTIDA_NAL.ID = NEW.ID;
END
^


/* Trigger: TR_RDB$PARTIDA_NAL_BI */
CREATE TRIGGER TR_RDB$PARTIDA_NAL_BI FOR RDB$PARTIDA_NAL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_RDB$PARTIDA_NAL_ID,1);
END
^


/* Trigger: TR_REAL_IZP_FAKT_IZP_NODE_BI0 */
CREATE TRIGGER TR_REAL_IZP_FAKT_IZP_NODE_BI0 FOR REAL_IZP_FAKT_IZP_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_REAL_IZP_FAKT_IZP_NODE_ID,1);
END
^


/* Trigger: TR_RETURN_DOST_KOL_BI0 */
CREATE TRIGGER TR_RETURN_DOST_KOL_BI0 FOR RETURN_DOST_KOL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = NEXT VALUE FOR GEN_RETURN_DOST_KOL_ID;
END
^


/* Trigger: TR_RET_DOST_KI_DOST_NODE_BI0 */
CREATE TRIGGER TR_RET_DOST_KI_DOST_NODE_BI0 FOR RET_DOST_KI_DOST_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_RET_DOST_KI_DOST_NODE_ID,1); 
END
^


/* Trigger: TR_RET_DOST_MOVE_BI0 */
CREATE TRIGGER TR_RET_DOST_MOVE_BI0 FOR RET_DOST_MOVE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = NEXT VALUE FOR GEN_RET_DOST_MOVE_NODE_ID;
END
^


/* Trigger: TR_RET_STOKA_DOST_BI */
CREATE TRIGGER TR_RET_STOKA_DOST_BI FOR RET_STOKA_DOST
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_RET_STOKA_DOST_ID,1);
END
^


/* Trigger: TR_RET_STOKA_DOST_BIU10 */
CREATE TRIGGER TR_RET_STOKA_DOST_BIU10 FOR RET_STOKA_DOST
ACTIVE AFTER INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_VAT_PERCENT DOUBLE PRECISION; 
BEGIN 
    IF (INSERTING) THEN BEGIN 
        IF (NEW.PAY_TIP = 1) THEN BEGIN 
            FOR SELECT 
              SUM(OUT_EL.SUMA), 
              IN_EL.VAT_PERCENT 
            FROM 
              OUT_EL 
              INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID 
              INNER JOIN IN_EL ON IN_EL.ID = OPR_RAZPAD_NODE.IN_EL_ID 
              INNER JOIN RET_STOKA_DOST ON RET_STOKA_DOST.OPR_ID = OUT_EL.OPR_ID 
            WHERE 
              RET_STOKA_DOST.OPR_ID = NEW.OPR_ID 
            GROUP BY 2 
            INTO 
              :L_SUMA, :L_VAT_PERCENT 
            DO BEGIN 
              INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
              VALUES (NEW.OPR_ID, :L_SUMA, :L_SUMA, :L_VAT_PERCENT); 
            END 
        END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        IF ((OLD.PAY_TIP IN (0,2)) AND (NEW.PAY_TIP = 1)) THEN BEGIN 
            /*ДОБАВЯМЕ НОВ ЗАПИС, ЗА ДА СЕ КАЖЕ, ЧЕ ИМА ЗА ПЛАЩАНЕ*/ 
            FOR SELECT 
              SUM(OUT_EL.SUMA), 
              IN_EL.VAT_PERCENT 
            FROM 
              OUT_EL 
              INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID 
              INNER JOIN IN_EL ON IN_EL.ID = OPR_RAZPAD_NODE.IN_EL_ID 
              INNER JOIN RET_STOKA_DOST ON RET_STOKA_DOST.OPR_ID = OUT_EL.OPR_ID 
            WHERE 
              RET_STOKA_DOST.OPR_ID = NEW.OPR_ID 
            GROUP BY 2 
            INTO 
              :L_SUMA, :L_VAT_PERCENT 
            DO BEGIN 
              INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
              VALUES (OLD.OPR_ID, :L_SUMA, :L_SUMA, :L_VAT_PERCENT); 
            END 
        END 
        ELSE IF ((OLD.PAY_TIP IN (1,3)) AND (NEW.PAY_TIP IN (0,2))) THEN BEGIN 
            /*СМЕНЯ СИ СТАТУСА НА ПЛАТЕНО ВЕДНАГА - РАЗКАЧАМЕ ВРЪЗКИТЕ С ПЛАЩАНИЯ, НО ПЪРВО НАМАЛЯМ ИЗПОЛЗВАНАТА СУМА 
            НА ОПЕРАЦИЙТЕ СВЪРЗАНИ С ТАЗИ*/ 
            DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
        END 
    END 
END
^


/* Trigger: TR_RET_STOKA_DOST_KI_AIU10 */
CREATE TRIGGER TR_RET_STOKA_DOST_KI_AIU10 FOR RET_STOKA_DOST_KI
ACTIVE AFTER INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_VAT_PERCENT DOUBLE PRECISION; 
DECLARE VARIABLE L_DDS_SUMA DOUBLE PRECISION; 
BEGIN 
    IF (INSERTING) THEN BEGIN 
        IF (NEW.PAY_TIP = 1) THEN BEGIN 
            FOR SELECT 
              SUM(OUT_EL.SUMA), 
              COALESCE(IN_EL.VAT_PERCENT, 20.0) 
            FROM 
              OUT_EL 
              INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID 
              INNER JOIN IN_EL ON IN_EL.ID = OPR_RAZPAD_NODE.IN_EL_ID 
              INNER JOIN KI_DOST_NODE ON KI_DOST_NODE.SUB_KI_OPR_ID = OUT_EL.OPR_ID 
            WHERE 
              KI_DOST_NODE.KI_OPR_ID = NEW.OPR_ID 
            GROUP BY 2 
            INTO 
              :L_SUMA, :L_VAT_PERCENT 
            DO BEGIN 
              L_DDS_SUMA = 0.00; 
              IF ((SELECT FIRST 1 LOG.TIP_CENI FROM LOG_CENI_DDS LOG WHERE LOG.TIP_DDS = 0 AND LOG.OPR_ID < NEW.OPR_ID ORDER BY LOG.OPR_ID DESC, LOG.ID DESC) = 0) THEN 
                L_DDS_SUMA = ROUND(L_SUMA * L_VAT_PERCENT / 100, 2); 
 
              L_SUMA = L_SUMA + L_DDS_SUMA; 
 
              INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
              VALUES (NEW.OPR_ID, :L_SUMA, :L_SUMA, :L_VAT_PERCENT); 
            END 
        END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        IF ((OLD.PAY_TIP IN (0,2)) AND (NEW.PAY_TIP = 1)) THEN BEGIN 
            /*ДОБАВЯМЕ НОВ ЗАПИС, ЗА ДА СЕ КАЖЕ, ЧЕ ИМА ЗА ПЛАЩАНЕ*/ 
 
            FOR SELECT 
              SUM(OUT_EL.SUMA), 
              COALESCE(IN_EL.VAT_PERCENT, 20) 
            FROM 
              OUT_EL 
              INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID 
              INNER JOIN IN_EL ON IN_EL.ID = OPR_RAZPAD_NODE.IN_EL_ID 
              INNER JOIN KI_DOST_NODE ON KI_DOST_NODE.SUB_KI_OPR_ID = OUT_EL.OPR_ID 
            WHERE 
              KI_DOST_NODE.KI_OPR_ID = NEW.OPR_ID 
            GROUP BY 2 
            INTO 
              :L_SUMA, :L_VAT_PERCENT 
            DO BEGIN 
              L_DDS_SUMA = 0.00; 
              IF ((SELECT FIRST 1 LOG.TIP_CENI FROM LOG_CENI_DDS LOG WHERE LOG.TIP_DDS = 0 AND LOG.OPR_ID < NEW.OPR_ID ORDER BY LOG.OPR_ID DESC, LOG.ID DESC) = 0) THEN 
                L_DDS_SUMA = ROUND(L_SUMA * L_VAT_PERCENT / 100, 2); 
 
              L_SUMA = L_SUMA + L_DDS_SUMA; 
 
              INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
              VALUES (OLD.OPR_ID, :L_SUMA, :L_SUMA, :L_VAT_PERCENT); 
            END 
 
        END 
        ELSE IF ((OLD.PAY_TIP IN (1,3)) AND (NEW.PAY_TIP IN (0,2))) THEN BEGIN 
            /*СМЕНЯ СИ СТАТУСА НА ПЛАТЕНО ВЕДНАГА - РАЗКАЧАМЕ ВРЪЗКИТЕ С ПЛАЩАНИЯ, НО ПЪРВО НАМАЛЯМ ИЗПОЛЗВАНАТА СУМА 
            НА ОПЕРАЦИЙТЕ СВЪРЗАНИ С ТАЗИ*/ 
 
            DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
        END 
    END 
END
^


/* Trigger: TR_RET_STOKA_DOST_KI_BI0 */
CREATE TRIGGER TR_RET_STOKA_DOST_KI_BI0 FOR RET_STOKA_DOST_KI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_RET_STOKA_DOST_KI_ID,1); 
END
^


/* Trigger: TR_RET_STOKA_PROD_BI */
CREATE TRIGGER TR_RET_STOKA_PROD_BI FOR RET_STOKA_PROD
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_RET_STOKA_PROD_ID,1);
END
^


/* Trigger: TR_RET_STOKA_PROD_BIU10 */
CREATE TRIGGER TR_RET_STOKA_PROD_BIU10 FOR RET_STOKA_PROD
ACTIVE BEFORE INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
BEGIN 
    SELECT 
        OPR.OPR_TIP 
    FROM 
        OPR 
    WHERE 
        OPR.ID = NEW.OPR_ID 
    INTO 
        :L_OPR_TIP; 
 
    IF (L_OPR_TIP = 41) THEN 
        EXIT; 
 
    SELECT 
      SUM(OPR_RAZPAD_NODE.SUMA_SR) 
    FROM 
      IN_EL 
      INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
    WHERE 
      IN_EL.OPR_ID = NEW.OPR_ID 
    INTO 
        :L_SUMA; 
 
    IF (INSERTING) THEN BEGIN 
        IF (NEW.PAY_TIP = 1) THEN BEGIN 
          IF (L_SUMA IS NULL) THEN BEGIN 
            SELECT 
              OPR.SUMA 
            FROM 
              OPR 
            WHERE 
              ID = NEW.OPR_ID 
            INTO 
              :L_SUMA; 
 
            INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST) 
            VALUES (NEW.OPR_ID,:L_SUMA,:L_SUMA); 
          END 
          ELSE BEGIN 
            INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
            SELECT 
              IN_EL.OPR_ID, 
              SUM(OPR_RAZPAD_NODE.SUMA_SR), 
              SUM(OPR_RAZPAD_NODE.SUMA_SR), 
              IN_EL.VAT_PERCENT 
            FROM 
              IN_EL 
              INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
            WHERE 
              IN_EL.OPR_ID = NEW.OPR_ID 
            GROUP BY 1, 4; 
          END 
        END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        IF ((OLD.PAY_TIP IN (0,2)) AND (NEW.PAY_TIP = 1)) THEN BEGIN 
        /*ДОБАВЯМЕ НОВ ЗАПИС, ЗА ДА СЕ КАЖЕ, ЧЕ ИМА ЗА ПЛАЩАНЕ*/ 
          IF (L_SUMA IS NULL) THEN BEGIN 
            SELECT 
              OPR.SUMA 
            FROM 
             OPR 
            WHERE 
              ID = NEW.OPR_ID 
            INTO 
              :L_SUMA; 
 
              INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST) 
              VALUES (OLD.OPR_ID,:L_SUMA,:L_SUMA); 
          END 
          ELSE BEGIN 
            INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
            SELECT 
              IN_EL.OPR_ID, 
              SUM(OPR_RAZPAD_NODE.SUMA_SR), 
              SUM(OPR_RAZPAD_NODE.SUMA_SR), 
              IN_EL.VAT_PERCENT 
            FROM 
              IN_EL 
              INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
            WHERE 
              IN_EL.OPR_ID = NEW.OPR_ID 
            GROUP BY 1, 4; 
          END 
        END 
        ELSE IF ((OLD.PAY_TIP IN (1,3)) AND (NEW.PAY_TIP IN (0,2))) THEN BEGIN 
            /*СМЕНЯ СИ СТАТУСА НА ПЛАТЕНО ВЕДНАГА - РАЗКАЧАМЕ ВРЪЗКИТЕ С ПЛАЩАНИЯ, НО ПЪРВО НАМАЛЯМ ИЗПОЛЗВАНАТА СУМА 
            НА ОПЕРАЦИЙТЕ СВЪРЗАНИ С ТАЗИ*/ 
 
            DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
        END 
    END 
END
^


/* Trigger: TR_RET_STOKA_PROD_KI_BIU10 */
CREATE TRIGGER TR_RET_STOKA_PROD_KI_BIU10 FOR RET_STOKA_PROD_KI
ACTIVE BEFORE INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_OPR_NODE_ID INTEGER; 
DECLARE VARIABLE L_NODE_ID INTEGER; 
BEGIN 
    SELECT 
      SUM(KI_PROD_SUMA_EL.SUMA) 
    FROM 
      KI_PROD_SUMA_EL 
    WHERE 
      KI_PROD_SUMA_EL.OPR_ID = NEW.OPR_ID 
    INTO 
      :L_SUMA; 
 
    IF (INSERTING) THEN BEGIN 
        IF (NEW.PAY_TIP = 1) THEN BEGIN 
          IF (L_SUMA IS NULL) THEN BEGIN 
            SELECT 
                OPR.SUMA 
            FROM 
                OPR 
            WHERE 
                ID = NEW.OPR_ID 
            INTO 
                :L_SUMA; 
 
            INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST, VAT_PERCENT) 
            VALUES (NEW.OPR_ID,:L_SUMA,:L_SUMA, NEW.VAT_PERCENT); 
          END 
          ELSE BEGIN 
            INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
            SELECT 
              KI_PROD_SUMA_EL.OPR_ID, 
              SUM(KI_PROD_SUMA_EL.SUMA), 
              SUM(KI_PROD_SUMA_EL.SUMA), 
              PROD_CENI_EL.VAT_PERCENT 
            FROM 
              KI_PROD_SUMA_EL 
              INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = KI_PROD_SUMA_EL.OUT_EL_ID 
            WHERE 
              KI_PROD_SUMA_EL.OPR_ID = NEW.OPR_ID 
            GROUP BY 1, 4; 
          END 
        END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        IF ((OLD.PAY_TIP IN (0,2)) AND (NEW.PAY_TIP = 1)) THEN BEGIN 
        /*ДОБАВЯМЕ НОВ ЗАПИС, ЗА ДА СЕ КАЖЕ, ЧЕ ИМА ЗА ПЛАЩАНЕ*/ 
          IF (L_SUMA IS NULL) THEN BEGIN 
            SELECT 
                OPR.SUMA 
            FROM 
                OPR 
            WHERE 
                ID = NEW.OPR_ID 
            INTO 
                :L_SUMA; 
 
            INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST, VAT_PERCENT) 
            VALUES (OLD.OPR_ID,:L_SUMA,:L_SUMA, NEW.VAT_PERCENT); 
          END 
          ELSE BEGIN 
            INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
            SELECT 
              KI_PROD_SUMA_EL.OPR_ID, 
              SUM(KI_PROD_SUMA_EL.SUMA), 
              SUM(KI_PROD_SUMA_EL.SUMA), 
              PROD_CENI_EL.VAT_PERCENT 
            FROM 
              KI_PROD_SUMA_EL 
              INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = KI_PROD_SUMA_EL.OUT_EL_ID 
            WHERE 
              KI_PROD_SUMA_EL.OPR_ID = NEW.OPR_ID 
            GROUP BY 1, 4; 
          END 
        END 
        ELSE IF ((OLD.PAY_TIP IN (1,3)) AND (NEW.PAY_TIP IN (0,2))) THEN BEGIN 
            /*СМЕНЯ СИ СТАТУСА НА ПЛАТЕНО ВЕДНАГА - РАЗКАЧАМЕ ВРЪЗКИТЕ С ПЛАЩАНИЯ, НО ПЪРВО НАМАЛЯМ ИЗПОЛЗВАНАТА СУМА 
            НА ОПЕРАЦИЙТЕ СВЪРЗАНИ С ТАЗИ*/ 
 
            DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
        END 
    END 
END
^


/* Trigger: TR_SELEKCIQ_BI */
CREATE TRIGGER TR_SELEKCIQ_BI FOR SELEKCIQ
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SELEKCIQ_ID,1);
  IF (NEW.DATETIME IS NULL) THEN
    NEW.DATETIME = CURRENT_TIMESTAMP;
END
^


/* Trigger: TR_SELEKCIQ_KLI_EL_BI */
CREATE TRIGGER TR_SELEKCIQ_KLI_EL_BI FOR SELEKCIQ_KLI_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
  NEW.ID = GEN_ID(GEN_SELEKCIQ_KLI_EL_ID,1);
END
^


/* Trigger: TR_SELEKCIQ_SIM_EL_BI */
CREATE TRIGGER TR_SELEKCIQ_SIM_EL_BI FOR SELEKCIQ_SIM_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SELEKCIQ_SIM_EL_ID,1);
END
^


/* Trigger: TR_SERIAL_NUM_BI */
CREATE TRIGGER TR_SERIAL_NUM_BI FOR SERIAL_NUM
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_SERIAL_NUM_ID,1); 
 
    SELECT FIRST 1 
        IN_EL.SIMPLE_ID 
    FROM 
        PARTIDA_NAL PN INNER JOIN IN_EL ON IN_EL.ID = PN.IN_EL_ID 
    WHERE 
        PN.ELEMENT_ID = NEW.PARTIDA_EL_ID 
    INTO 
        NEW.SIMPLE_ID; 
END
^


/* Trigger: TR_SIMPLE_AU */
CREATE TRIGGER TR_SIMPLE_AU FOR SIMPLE
ACTIVE AFTER UPDATE POSITION 0
AS 
DECLARE VARIABLE L_SIM_ID INTEGER; 
BEGIN 
    IF (NEW.DEF_SEL_ID IS NOT NULL)  THEN BEGIN 
        SELECT 
            SELEKCIQ_SIM_EL.SIMPLE_ID 
        FROM 
            SIMPLE INNER JOIN SELEKCIQ_SIM_EL ON SIMPLE.ID = SELEKCIQ_SIM_EL.SIMPLE_ID 
        WHERE 
            SELEKCIQ_SIM_EL.SELEKCIQ_ID = NEW.DEF_SEL_ID 
            AND SELEKCIQ_SIM_EL.SIMPLE_ID = NEW.ID 
        INTO 
            :L_SIM_ID; 
 
        IF (L_SIM_ID IS NULL) THEN BEGIN 
            INSERT INTO SELEKCIQ_SIM_EL (SIMPLE_ID, SELEKCIQ_ID) VALUES(NEW.ID, NEW.DEF_SEL_ID); 
        END 
    END 
 
    L_SIM_ID = NULL; 
    IF (NEW.DEF_SEL_CALC IS NOT NULL) THEN BEGIN 
        SELECT 
            SELEKCIQ_KALK_EL.SIMPLE_ID 
        FROM 
            SIMPLE INNER JOIN SELEKCIQ_KALK_EL ON SIMPLE.ID = SELEKCIQ_KALK_EL.SIMPLE_ID 
        WHERE 
            SELEKCIQ_KALK_EL.SELEKCIQ_ID = NEW.DEF_SEL_CALC AND 
            SELEKCIQ_KALK_EL.SIMPLE_ID = NEW.ID 
        INTO 
            :L_SIM_ID; 
        IF (L_SIM_ID IS NULL) THEN BEGIN 
            INSERT INTO SELEKCIQ_KALK_EL (SIMPLE_ID, SELEKCIQ_ID) VALUES(NEW.ID, NEW.DEF_SEL_CALC); 
        END 
    END 
END
^


/* Trigger: TR_SIMPLE_BU0 */
CREATE TRIGGER TR_SIMPLE_BU0 FOR SIMPLE
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    IF (((OLD.NAME IS NULL) AND (NEW.NAME IS NOT NULL)) 
    OR ((OLD.NAME IS NOT NULL) AND (NEW.NAME IS NULL)) 
    OR(OLD.NAME <> NEW.NAME)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.NAME_SHORT IS NULL) AND (NEW.NAME_SHORT IS NOT NULL)) 
    OR ((OLD.NAME_SHORT IS NOT NULL) AND (NEW.NAME_SHORT IS NULL)) 
    OR(OLD.NAME_SHORT <> NEW.NAME_SHORT)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.CODE IS NULL) AND (NEW.CODE IS NOT NULL)) 
    OR ((OLD.CODE IS NOT NULL) AND (NEW.CODE IS NULL)) 
    OR(OLD.CODE <> NEW.CODE)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.ME_ID IS NULL) AND (NEW.ME_ID IS NOT NULL)) 
    OR ((OLD.ME_ID IS NOT NULL) AND (NEW.ME_ID IS NULL)) 
    OR(OLD.ME_ID <> NEW.ME_ID)) THEN 
        NEW.FLAG_CHECK = 0; 
   ELSE 
   IF (((OLD.SIMPLE_GROUP_ID IS NULL) AND (NEW.SIMPLE_GROUP_ID IS NOT NULL)) 
   OR ((OLD.SIMPLE_GROUP_ID IS NOT NULL) AND (NEW.SIMPLE_GROUP_ID IS NULL)) 
   OR(OLD.SIMPLE_GROUP_ID <> NEW.SIMPLE_GROUP_ID)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD."ACTIVE" IS NULL) AND (NEW."ACTIVE" IS NOT NULL)) 
    OR ((OLD."ACTIVE" IS NOT NULL) AND (NEW."ACTIVE" IS NULL)) 
    OR(OLD."ACTIVE" <> NEW."ACTIVE")) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.ACTIVE_FAK IS NULL) AND (NEW.ACTIVE_FAK IS NOT NULL)) 
    OR ((OLD.ACTIVE_FAK IS NOT NULL) AND (NEW.ACTIVE_FAK IS NULL)) 
    OR(OLD.ACTIVE_FAK <> NEW.ACTIVE_FAK)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.LOCK_CENA_PROD IS NULL) AND (NEW.LOCK_CENA_PROD IS NOT NULL)) 
    OR ((OLD.LOCK_CENA_PROD IS NOT NULL) AND (NEW.LOCK_CENA_PROD IS NULL)) 
    OR(OLD.LOCK_CENA_PROD <> NEW.LOCK_CENA_PROD)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.CENA_PROD IS NULL) AND (NEW.CENA_PROD IS NOT NULL)) 
    OR ((OLD.CENA_PROD IS NOT NULL) AND (NEW.CENA_PROD IS NULL)) 
    OR(OLD.CENA_PROD <> NEW.CENA_PROD)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.CENA_EDRO IS NULL) AND (NEW.CENA_EDRO IS NOT NULL)) 
    OR ((OLD.CENA_EDRO IS NOT NULL) AND (NEW.CENA_EDRO IS NULL)) 
    OR(OLD.CENA_EDRO <> NEW.CENA_EDRO)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.CENA_OFERTA IS NULL) AND (NEW.CENA_OFERTA IS NOT NULL)) 
    OR ((OLD.CENA_OFERTA IS NOT NULL) AND (NEW.CENA_OFERTA IS NULL)) 
    OR(OLD.CENA_OFERTA <> NEW.CENA_OFERTA)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.CENA_PROD_FAK IS NULL) AND (NEW.CENA_PROD_FAK IS NOT NULL)) 
    OR ((OLD.CENA_PROD_FAK IS NOT NULL) AND (NEW.CENA_PROD_FAK IS NULL)) 
    OR(OLD.CENA_PROD_FAK <> NEW.CENA_PROD_FAK)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.CENA_POCKET IS NULL) AND (NEW.CENA_POCKET IS NOT NULL)) 
    OR ((OLD.CENA_POCKET IS NOT NULL) AND (NEW.CENA_POCKET IS NULL)) 
    OR(OLD.CENA_POCKET <> NEW.CENA_POCKET)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.DDS IS NULL) AND (NEW.DDS IS NOT NULL)) 
    OR ((OLD.DDS IS NOT NULL) AND (NEW.DDS IS NULL)) 
    OR(OLD.DDS <> NEW.DDS)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.KOL_KRI_MIN IS NULL) AND (NEW.KOL_KRI_MIN IS NOT NULL)) 
    OR ((OLD.KOL_KRI_MIN IS NOT NULL) AND (NEW.KOL_KRI_MIN IS NULL)) 
    OR(OLD.KOL_KRI_MIN <> NEW.KOL_KRI_MIN)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.KOL_KRI_MAX IS NULL) AND (NEW.KOL_KRI_MAX IS NOT NULL)) 
    OR ((OLD.KOL_KRI_MAX IS NOT NULL) AND (NEW.KOL_KRI_MAX IS NULL)) 
    OR(OLD.KOL_KRI_MAX <> NEW.KOL_KRI_MAX)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.DEFAULT_RAZ_ID IS NULL) AND (NEW.DEFAULT_RAZ_ID IS NOT NULL)) 
    OR ((OLD.DEFAULT_RAZ_ID IS NOT NULL) AND (NEW.DEFAULT_RAZ_ID IS NULL)) 
    OR(OLD.DEFAULT_RAZ_ID <> NEW.DEFAULT_RAZ_ID)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.RSN IS NULL) AND (NEW.RSN IS NOT NULL)) 
    OR ((OLD.RSN IS NOT NULL) AND (NEW.RSN IS NULL)) 
    OR(OLD.RSN <> NEW.RSN)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.USLUGA IS NULL) AND (NEW.USLUGA IS NOT NULL)) 
    OR ((OLD.USLUGA IS NOT NULL) AND (NEW.USLUGA IS NULL)) 
    OR(OLD.USLUGA <> NEW.USLUGA)) THEN 
        NEW.FLAG_CHECK = 0; 
 
    IF (NEW.RAZ_TIP_ID <> OLD.RAZ_TIP_ID) THEN 
      DELETE FROM DEF_RAZ_SIMPLE WHERE DEF_RAZ_SIMPLE.SIMPLE_ID = NEW.ID; 
END
^


/* Trigger: TR_SIMPLE_MONTAGE_BI */
CREATE TRIGGER TR_SIMPLE_MONTAGE_BI FOR SIMPLE_MONTAGE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_MONTAGE_ID, 1); 
END
^


/* Trigger: TR_SIMPLE_PROP_BI0 */
CREATE TRIGGER TR_SIMPLE_PROP_BI0 FOR SIMPLE_PROP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_SIMPLE_PROP_ID,1); 
END
^


/* Trigger: TR_SIMPLE_PROP_MINOR_BI0 */
CREATE TRIGGER TR_SIMPLE_PROP_MINOR_BI0 FOR SIMPLE_PROP_MINOR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_SIMPLE_PROP_MINOR_ID,1); 
END
^


/* Trigger: TR_SIMPLE_PROP_NODE_BI0 */
CREATE TRIGGER TR_SIMPLE_PROP_NODE_BI0 FOR SIMPLE_PROP_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_SIMPLE_PROP_NODE_ID,1); 
END
^


/* Trigger: TR_SIMPLE_TABLE_PRICES_AD0 */
CREATE TRIGGER TR_SIMPLE_TABLE_PRICES_AD0 FOR SIMPLE_TABLE_PRICES
ACTIVE AFTER DELETE POSITION 0
AS 
DECLARE VARIABLE L_COUNT DOM_INT; 
BEGIN 
    SELECT 
        COUNT(SIMPLE_TABLE_PRICES.ID) 
    FROM 
        SIMPLE_TABLE_PRICES 
    WHERE 
        SIMPLE_ID = OLD.SIMPLE_ID 
    INTO 
        :L_COUNT; 
 
    IF(COALESCE(L_COUNT, 0) = 0) THEN 
        UPDATE SIMPLE SET 
            SIMPLE.FLAG_TBL_PRICE = 0 
       WHERE 
            SIMPLE.ID = OLD.SIMPLE_ID; 
END
^


/* Trigger: TR_SIMPLE_TABLE_PRICES_AI0 */
CREATE TRIGGER TR_SIMPLE_TABLE_PRICES_AI0 FOR SIMPLE_TABLE_PRICES
ACTIVE AFTER INSERT POSITION 0
AS 
BEGIN 
    UPDATE SIMPLE SET 
        SIMPLE.FLAG_TBL_PRICE = 1 
    WHERE 
        SIMPLE.ID = NEW.SIMPLE_ID 
        AND COALESCE(SIMPLE.FLAG_TBL_PRICE, 0) = 0; 
END
^


/* Trigger: TR_SIMPLE_TABLE_PRICES_BI0 */
CREATE TRIGGER TR_SIMPLE_TABLE_PRICES_BI0 FOR SIMPLE_TABLE_PRICES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_SIMPLE_TABLE_PRICES_ID; 
END
^


/* Trigger: TR_STORE_OBJ_BI0 */
CREATE TRIGGER TR_STORE_OBJ_BI0 FOR STORE_OBJ
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_STORE_OBJ_ID; 
END
^


/* Trigger: TR_STORE_OTC_BI0 */
CREATE TRIGGER TR_STORE_OTC_BI0 FOR STORE_OTC
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_STORE_OTC_ID; 
END
^


/* Trigger: TR_STORNO_BI0 */
CREATE TRIGGER TR_STORNO_BI0 FOR STORNO
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_STORNO_ID; 
END
^


/* Trigger: TR_SUMI_BI0 */
CREATE TRIGGER TR_SUMI_BI0 FOR SUMI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_SUMI_ID,1); 
END
^


/* Trigger: TR_SYSTEM2_BI0 */
CREATE TRIGGER TR_SYSTEM2_BI0 FOR SYSTEM2
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_SYSTEM2_ID; 
 
    NEW.VAR_NAME = UPPER(NEW.VAR_NAME); 
END
^


/* Trigger: TR_SYSTEM2_BU0 */
CREATE TRIGGER TR_SYSTEM2_BU0 FOR SYSTEM2
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    NEW.VAR_NAME = UPPER(NEW.VAR_NAME); 
END
^


/* Trigger: TR_TABLE_PRICES_DISCOUNTS_BI0 */
CREATE TRIGGER TR_TABLE_PRICES_DISCOUNTS_BI0 FOR TABLE_PRICES_DISCOUNTS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_TABLE_PRICES_DISCOUNTS_ID; 
END
^


/* Trigger: TR_TABLE_PRICE_COEFICIENT_BI0 */
CREATE TRIGGER TR_TABLE_PRICE_COEFICIENT_BI0 FOR TABLE_PRICE_COEFICIENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_TABLE_PRICE_COEFICIENT_ID; 
END
^


/* Trigger: TR_TABLE_PRICE_SIMPLE_NODE_BI0 */
CREATE TRIGGER TR_TABLE_PRICE_SIMPLE_NODE_BI0 FOR TABLE_PRICE_SIMPLE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_TABLE_PRICE_SIMPLE_NODE_ID; 
END
^


/* Trigger: TR_TEMP_IMPORT_NAME_BI0 */
CREATE TRIGGER TR_TEMP_IMPORT_NAME_BI0 FOR TEMP_IMPORT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_TEMP_IMPORT_ID,1); 
END
^


/* Trigger: TR_TMP_ELTRADE_IMPORT_BI0 */
CREATE TRIGGER TR_TMP_ELTRADE_IMPORT_BI0 FOR TMP_ELTRADE_IMPORT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_TMP_ELTRADE_IMPORT_ID; 
END
^


/* Trigger: TR_TS_OTC_FILES_BI0 */
CREATE TRIGGER TR_TS_OTC_FILES_BI0 FOR TS_OTC_FILES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_TS_OTC_FILES_ID; 
 
    IF (NEW.STATUS IS NULL) THEN 
        NEW.STATUS = 0; 
 
    SELECT 
        CURRENT_TIMESTAMP, 
        MON$ATTACHMENTS.MON$REMOTE_ADDRESS, 
        MON$ATTACHMENTS.MON$REMOTE_PROCESS 
    FROM 
        MON$ATTACHMENTS INNER JOIN MON$TRANSACTIONS ON MON$ATTACHMENTS.MON$ATTACHMENT_ID = MON$TRANSACTIONS.MON$ATTACHMENT_ID 
    WHERE 
        MON$TRANSACTIONS.MON$TRANSACTION_ID = CURRENT_TRANSACTION 
    INTO 
        NEW.DT_IMPORT,NEW.IP_IMPORT,NEW.APP_IMPORT; 
 
END
^


/* Trigger: TR_UNFINISHED_SALES_BI0 */
CREATE TRIGGER TR_UNFINISHED_SALES_BI0 FOR UNFINISHED_SALES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_UNFINISHED_SALES_ID; 
 
    NEW.MAX_KOL = NEW.KOL; 
 
    NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: TR_UNFINISHED_SALES_BU0 */
CREATE TRIGGER TR_UNFINISHED_SALES_BU0 FOR UNFINISHED_SALES
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    NEW.MAX_KOL = MAXVALUE(OLD.MAX_KOL, NEW.KOL); 
 
    NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: TR_UNP_BI0 */
CREATE TRIGGER TR_UNP_BI0 FOR UNP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_UNP_ID; 
END
^


/* Trigger: TR_USER_KASA_NODE_BI */
CREATE TRIGGER TR_USER_KASA_NODE_BI FOR USER_KASA_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_USER_KASA_NODE_ID,1);
END
^


/* Trigger: TR_USER_ROLES_EL_BI0 */
CREATE TRIGGER TR_USER_ROLES_EL_BI0 FOR USER_ROLES_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_USER_ROLES_EL_ID; 
END
^


/* Trigger: TR_USER_SCHEMAS_BI0 */
CREATE TRIGGER TR_USER_SCHEMAS_BI0 FOR USER_SCHEMAS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_USER_SCHEMAS_ID; 
END
^


/* Trigger: TR_USER_SKLAD_NAL_NODE_BI0 */
CREATE TRIGGER TR_USER_SKLAD_NAL_NODE_BI0 FOR USER_SKLAD_NAL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_USER_SKLAD_NAL_NODE_ID,1); 
END
^


/* Trigger: TR_VISIT_BI */
CREATE TRIGGER TR_VISIT_BI FOR VISIT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_VISIT_ID, 1); 
END
^


/* Trigger: TR_VISIT_EL_BI */
CREATE TRIGGER TR_VISIT_EL_BI FOR VISIT_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_VISIT_EL_ID,1); 
END
^


/* Trigger: TR_VISIT_TYPE_BI */
CREATE TRIGGER TR_VISIT_TYPE_BI FOR VISIT_TYPE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_VISIT_TYPE_ID, 1); 
END
^


/* Trigger: TR_WAREHOUSE_BASE_MAP_BI0 */
CREATE TRIGGER TR_WAREHOUSE_BASE_MAP_BI0 FOR WAREHOUSE_BASE_MAP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_WAREHOUSE_BASE_MAP_ID; 
END
^


/* Trigger: TR_WHOKNA_CONNECTION_BI0 */
CREATE TRIGGER TR_WHOKNA_CONNECTION_BI0 FOR WHOKNA_CONNECTION
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_WHOKNA_CONNECTION_ID; 
END
^


/* Trigger: TR_WUERTH_COMMIS_BI */
CREATE TRIGGER TR_WUERTH_COMMIS_BI FOR WUERTH_COMMIS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_WUERTH_COMMIS_ID, 1); 
END
^


/* Trigger: UNR_AGENT_ANALYSES_BI */
CREATE TRIGGER UNR_AGENT_ANALYSES_BI FOR UNR_AGENT_ANALYSES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_AGENT_ANALYSES_ID,1); 
END
^


/* Trigger: UNR_AGENT_BI */
CREATE TRIGGER UNR_AGENT_BI FOR UNR_AGENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_AGENT_ID,1); 
END
^


/* Trigger: UNR_ANALYSES_BI */
CREATE TRIGGER UNR_ANALYSES_BI FOR UNR_ANALYSES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_ANALYSES_ID, 1);
END
^


/* Trigger: UNR_ANALYSES_BU0 */
CREATE TRIGGER UNR_ANALYSES_BU0 FOR UNR_ANALYSES
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE L_KOEF DOUBLE PRECISION;
BEGIN
  SELECT
    T.KOEF
  FROM
  (
  SELECT
    UNR_ANALYSES.ID,
    COALESCE(UNR_KOEF_NODE.KOEF, IIF(UNR_ANALYSES.AGENT_ID IS NOT NULL, 0.5, NULL)) AS KOEF
  FROM
    UNR_ANALYSES
    LEFT JOIN UNR_AGENT ON UNR_AGENT.ID = NEW.AGENT_ID
    LEFT JOIN UNR_GROUP_SIMPLE ON UNR_GROUP_SIMPLE.SIMPLE_ID = UNR_ANALYSES.SIMPLE_ID
    LEFT JOIN UNR_GROUP ON UNR_GROUP.ID = COALESCE(NEW.GROUP_ID, UNR_GROUP_SIMPLE.GROUP_ID)
    LEFT JOIN UNR_KOEF_NODE ON UNR_KOEF_NODE.AGENT_ID = UNR_AGENT.ID AND COALESCE(UNR_KOEF_NODE.GROUP_ID, 0) = COALESCE(NEW.GROUP_ID, COALESCE(UNR_GROUP.ID, 0))
  ) T
  WHERE
    T.ID = OLD.ID AND
    T.KOEF IS NOT NULL
  INTO
    :L_KOEF;

  IF (L_KOEF IS NOT NULL) THEN
    NEW.KOEF = :L_KOEF;
end
^


/* Trigger: UNR_GROUP_BI */
CREATE TRIGGER UNR_GROUP_BI FOR UNR_GROUP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_GROUP_ID,1); 
END
^


/* Trigger: UNR_GROUP_SIMPLE_BI */
CREATE TRIGGER UNR_GROUP_SIMPLE_BI FOR UNR_GROUP_SIMPLE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_GROUP_SIMPLE_ID,1); 
END
^


/* Trigger: UNR_KLI_AGENT_2_BI */
CREATE TRIGGER UNR_KLI_AGENT_2_BI FOR UNR_KLI_AGENT_2
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_KLI_AGENT_2_ID,1);
END
^


/* Trigger: UNR_KLI_AGENT_BI */
CREATE TRIGGER UNR_KLI_AGENT_BI FOR UNR_KLI_AGENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_KLI_AGENT_ID,1); 
END
^


/* Trigger: UNR_KOEF_NODE_BI */
CREATE TRIGGER UNR_KOEF_NODE_BI FOR UNR_KOEF_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_KOEF_NODE_ID,1); 
END
^


/* Trigger: USER_BI */
CREATE TRIGGER USER_BI FOR "USER"
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_USER_ID,1);
END
^


/* Trigger: USER_LOG_AD103 */
CREATE TRIGGER USER_LOG_AD103 FOR "USER"
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'EGN', 'D', CAST(OLD."EGN" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'PASS', 'D', CAST(OLD."PASS" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS', 'D', CAST(OLD."RIGHTS" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'TEL', 'D', CAST(OLD."TEL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'IS_WORKED', 'D', CAST(OLD."IS_WORKED" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'DEF_KASA_ID', 'D', CAST(OLD."DEF_KASA_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS2', 'D', CAST(OLD."RIGHTS2" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'PASS2', 'D', CAST(OLD."PASS2" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'IS_ACTIVE', 'D', CAST(OLD."IS_ACTIVE" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'OBEKT_ID', 'D', CAST(OLD."OBEKT_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'SELLER', 'D', CAST(OLD."SELLER" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'KBD', 'D', CAST(OLD."KBD" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS3', 'D', CAST(OLD."RIGHTS3" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'LIMITEDUSER', 'D', CAST(OLD."LIMITEDUSER" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS4', 'D', CAST(OLD."RIGHTS4" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'USER_RIGHTS_ID', 'D', CAST(OLD."USER_RIGHTS_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'NAME_LAT', 'D', CAST(OLD."NAME_LAT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'SERV', 'D', CAST(OLD."SERV" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'LANGUAGE', 'D', CAST(OLD."LANGUAGE" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS5', 'D', CAST(OLD."RIGHTS5" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS6', 'D', CAST(OLD."RIGHTS6" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'EMAIL', 'D', CAST(OLD."EMAIL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'KASA_H', 'D', CAST(OLD."KASA_H" AS DOM_CHAR_300), null);
 END
^


/* Trigger: USER_LOG_AI103 */
CREATE TRIGGER USER_LOG_AI103 FOR "USER"
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'EGN', 'I', null, CAST(NEW."EGN" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'PASS', 'I', null, CAST(NEW."PASS" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'RIGHTS', 'I', null, CAST(NEW."RIGHTS" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'TEL', 'I', null, CAST(NEW."TEL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'IS_WORKED', 'I', null, CAST(NEW."IS_WORKED" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'DEF_KASA_ID', 'I', null, CAST(NEW."DEF_KASA_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'RIGHTS2', 'I', null, CAST(NEW."RIGHTS2" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'PASS2', 'I', null, CAST(NEW."PASS2" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'IS_ACTIVE', 'I', null, CAST(NEW."IS_ACTIVE" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'OBEKT_ID', 'I', null, CAST(NEW."OBEKT_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'SELLER', 'I', null, CAST(NEW."SELLER" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'KBD', 'I', null, CAST(NEW."KBD" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'RIGHTS3', 'I', null, CAST(NEW."RIGHTS3" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'LIMITEDUSER', 'I', null, CAST(NEW."LIMITEDUSER" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'RIGHTS4', 'I', null, CAST(NEW."RIGHTS4" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'USER_RIGHTS_ID', 'I', null, CAST(NEW."USER_RIGHTS_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'NAME_LAT', 'I', null, CAST(NEW."NAME_LAT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'SERV', 'I', null, CAST(NEW."SERV" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'LANGUAGE', 'I', null, CAST(NEW."LANGUAGE" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'RIGHTS5', 'I', null, CAST(NEW."RIGHTS5" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'RIGHTS6', 'I', null, CAST(NEW."RIGHTS6" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'EMAIL', 'I', null, CAST(NEW."EMAIL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'KASA_H', 'I', null, CAST(NEW."KASA_H" AS DOM_CHAR_300));
 END
^


/* Trigger: USER_LOG_AU103 */
CREATE TRIGGER USER_LOG_AU103 FOR "USER"
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'EGN', 'U', CAST(OLD."EGN" AS DOM_CHAR_300), CAST(NEW.EGN AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'PASS', 'U', CAST(OLD."PASS" AS DOM_CHAR_300), CAST(NEW.PASS AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS', 'U', CAST(OLD."RIGHTS" AS DOM_CHAR_300), CAST(NEW.RIGHTS AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'TEL', 'U', CAST(OLD."TEL" AS DOM_CHAR_300), CAST(NEW.TEL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'IS_WORKED', 'U', CAST(OLD."IS_WORKED" AS DOM_CHAR_300), CAST(NEW.IS_WORKED AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'DEF_KASA_ID', 'U', CAST(OLD."DEF_KASA_ID" AS DOM_CHAR_300), CAST(NEW.DEF_KASA_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS2', 'U', CAST(OLD."RIGHTS2" AS DOM_CHAR_300), CAST(NEW.RIGHTS2 AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'PASS2', 'U', CAST(OLD."PASS2" AS DOM_CHAR_300), CAST(NEW.PASS2 AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'IS_ACTIVE', 'U', CAST(OLD."IS_ACTIVE" AS DOM_CHAR_300), CAST(NEW.IS_ACTIVE AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'OBEKT_ID', 'U', CAST(OLD."OBEKT_ID" AS DOM_CHAR_300), CAST(NEW.OBEKT_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'SELLER', 'U', CAST(OLD."SELLER" AS DOM_CHAR_300), CAST(NEW.SELLER AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'KBD', 'U', CAST(OLD."KBD" AS DOM_CHAR_300), CAST(NEW.KBD AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS3', 'U', CAST(OLD."RIGHTS3" AS DOM_CHAR_300), CAST(NEW.RIGHTS3 AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'LIMITEDUSER', 'U', CAST(OLD."LIMITEDUSER" AS DOM_CHAR_300), CAST(NEW.LIMITEDUSER AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS4', 'U', CAST(OLD."RIGHTS4" AS DOM_CHAR_300), CAST(NEW.RIGHTS4 AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'USER_RIGHTS_ID', 'U', CAST(OLD."USER_RIGHTS_ID" AS DOM_CHAR_300), CAST(NEW.USER_RIGHTS_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'NAME_LAT', 'U', CAST(OLD."NAME_LAT" AS DOM_CHAR_300), CAST(NEW.NAME_LAT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'SERV', 'U', CAST(OLD."SERV" AS DOM_CHAR_300), CAST(NEW.SERV AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'LANGUAGE', 'U', CAST(OLD."LANGUAGE" AS DOM_CHAR_300), CAST(NEW.LANGUAGE AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS5', 'U', CAST(OLD."RIGHTS5" AS DOM_CHAR_300), CAST(NEW.RIGHTS5 AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS6', 'U', CAST(OLD."RIGHTS6" AS DOM_CHAR_300), CAST(NEW.RIGHTS6 AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'EMAIL', 'U', CAST(OLD."EMAIL" AS DOM_CHAR_300), CAST(NEW.EMAIL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'KASA_H', 'U', CAST(OLD."KASA_H" AS DOM_CHAR_300), CAST(NEW.KASA_H AS DOM_CHAR_300));
 END
^


/* Trigger: USER_OBEKT_NODE_BI */
CREATE TRIGGER USER_OBEKT_NODE_BI FOR USER_OBEKT_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
  NEW.ID = GEN_ID(GEN_USER_OBEKT_NODE_ID,1); 
END
^


/* Trigger: USER_SEL_NODE_BI */
CREATE TRIGGER USER_SEL_NODE_BI FOR USER_SEL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_USER_SEL_NODE_ID,1); 
END
^


/* Trigger: USER_SKLAD_NODE_BI */
CREATE TRIGGER USER_SKLAD_NODE_BI FOR USER_SKLAD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
  NEW.ID = GEN_ID(GEN_USER_SKLAD_NODE_ID,1);
END
^


/* Trigger: VALUTA_BI */
CREATE TRIGGER VALUTA_BI FOR VALUTA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_VALUTA_ID,1);
END
^


/* Trigger: WUERTH_SIMPLE_BI */
CREATE TRIGGER WUERTH_SIMPLE_BI FOR WUERTH_SIMPLE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_WUERTH_SIMPLE_ID,1); 
END
^


/* Trigger: ZAIAVKA_DOSTAVKA_BI */
CREATE TRIGGER ZAIAVKA_DOSTAVKA_BI FOR ZAIAVKA_DOSTAVKA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_ZAIAVKA_DOSTAVKA_ID,1); 
END
^


/* Trigger: ZAIAVKA_DOSTAVKA_NODE_BI */
CREATE TRIGGER ZAIAVKA_DOSTAVKA_NODE_BI FOR ZAIAVKA_DOSTAVKA_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_ZAIAVKA_DOSTAVKA_NODE_ID,1); 
 
  IF (EXISTS 
    (SELECT 
        ZAIAVKA_DOSTAVKA_NODE.ID 
    FROM 
        ZAIAVKA_DOSTAVKA_NODE 
    WHERE 
        ZAIAVKA_DOSTAVKA_NODE.OPR_ID = NEW.OPR_ID 
        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = ZAIAVKA_DOSTAVKA_NODE.OPR_ID_OB))) THEN 
    EXCEPTION EXC_DUPLICATE_OBOB_ZD; 
END
^


/* Trigger: ZD_DOST_MOVE_NODE_BI */
CREATE TRIGGER ZD_DOST_MOVE_NODE_BI FOR ZD_DOST_MOVE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_ZD_DOST_MOVE_NODE_ID,1); 
END
^


/* Trigger: ZD_POR_NODE_BI */
CREATE TRIGGER ZD_POR_NODE_BI FOR ZD_POR_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_ZD_POR_NODE_ID,1); 
END
^

SET TERM ; ^



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE ADD_ADDRESS (
    P_PLACE_ID TYPE OF COLUMN ADDRESSES.PLACE_ID,
    P_ADDRESS TYPE OF COLUMN ADDRESSES.ADDRESS)
RETURNS (
    R_ID TYPE OF COLUMN ADDRESSES.ID)
AS
BEGIN 
    R_ID = NULL; 
    SELECT 
        ADDRESSES.ID 
    FROM 
        ADDRESSES 
    WHERE 
        ADDRESSES.PLACE_ID = :P_PLACE_ID 
        AND UPPER(ADDRESSES.ADDRESS) = UPPER(:P_ADDRESS) 
    INTO 
        :R_ID; 
 
    IF (R_ID IS NULL) THEN 
        INSERT INTO ADDRESSES(PLACE_ID, ADDRESS) 
        VALUES(:P_PLACE_ID, :P_ADDRESS) 
        RETURNING ID INTO :R_ID; 
END^


ALTER PROCEDURE ADD_BARCODE (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_BARCODE VARCHAR(13),
    P_KOL TYPE OF DOM_KEY,
    P_NAME TYPE OF DOM_CHAR_50)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN
    INSERT INTO BARCODE(SIMPLE_ID,BARCODE,KOL,NAME)
    VALUES(:P_SIMPLE_ID,:P_BARCODE,:P_KOL,:P_NAME)
    RETURNING(ID) INTO :R_ID;
END^


ALTER PROCEDURE ADD_BONUS_RAZCHET_NODE (
    P_IN_ID TYPE OF DOM_KEY,
    P_OUT_ID TYPE OF DOM_KEY,
    P_SUMA TYPE OF DOM_SUMA)
AS
DECLARE VARIABLE L_ID INTEGER; 
BEGIN 
/*V.2*/ 
    SELECT 
        BONUS_RAZCHET_NODE.ID 
    FROM 
        BONUS_RAZCHET_NODE 
    WHERE 
        IN_ID = :P_IN_ID 
        AND OUT_ID = :P_OUT_ID 
    INTO 
        :L_ID; 
 
    IF (L_ID IS NULL) THEN 
        INSERT INTO BONUS_RAZCHET_NODE (IN_ID,OUT_ID,SUMA) 
        VALUES (:P_IN_ID,:P_OUT_ID,:P_SUMA); 
    ELSE 
        UPDATE BONUS_RAZCHET_NODE SET 
        SUMA = ROUND(SUMA + :P_SUMA,2) 
        WHERE ID = :L_ID; 
 
    UPDATE BONUSI_ZA_RAZCHET SET 
        SUMA_OST = ROUND(SUMA_OST - :P_SUMA,2) 
    WHERE 
        ID IN (:P_OUT_ID, :P_IN_ID); 
END^


ALTER PROCEDURE ADD_BROENE (
    P_OPR_ID TYPE OF DOM_KEY,
    P_DISTRID TYPE OF DOM_KEY,
    P_AGENTDID TYPE OF DOM_KEY,
    P_TIP TYPE OF DOM_SMAL_INT = 0,
    P_STATUS TYPE OF DOM_SMAL_INT = 0)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN 
    INSERT INTO BROENE(OPR_ID,TIP,STATUS,DISTRID,AGENTDID) 
    VALUES(:P_OPR_ID,:P_TIP,:P_STATUS,:P_DISTRID,:P_AGENTDID) 
    RETURNING(ID) INTO :R_ID; 
END^


ALTER PROCEDURE ADD_BROENE_EL (
    P_BROENE_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL,
    P_KOL2 TYPE OF DOM_KOL)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN 
    INSERT INTO BROENE_EL(BROENE_ID, SIMPLE_ID, KOL, kol2) 
    VALUES(:P_BROENE_ID, :P_SIMPLE_ID, :P_KOL, :P_KOL2) 
    RETURNING(ID) INTO :R_ID; 
END^


ALTER PROCEDURE ADD_COMMENT (
    NOTE BLOB SUB_TYPE 1 SEGMENT SIZE 2048,
    TABLE_NODE_NAME VARCHAR(30),
    TABLE_NODE_OBJECT_NAME VARCHAR(30),
    TABLE_NODE_OBJECT_ID INTEGER,
    USER_ID INTEGER,
    HEADER VARCHAR(50))
RETURNS (
    R_ID INTEGER)
AS
declare variable I integer;
begin   
  /* Procedure Text */   
  IF (USER_ID = 0) then USER_ID = NULL;   
   
  INSERT INTO COMMENTS(NOTE, "USER_ID", HEADER) VALUES (:NOTE,:USER_ID,:HEADER) 
  RETURNING ID INTO :i;   
   
  EXECUTE STATEMENT  
    'SELECT GEN_ID(GEN_'||TABLE_NODE_NAME||'_ID, 1) FROM RDB$DATABASE'  
    INTO :R_ID;  
  
  EXECUTE STATEMENT   
    'INSERT INTO '||TABLE_NODE_NAME||'(ID, COMMENT_ID, '||TABLE_NODE_OBJECT_NAME||')  
     VALUES ('||R_ID||', '||i||','||TABLE_NODE_OBJECT_ID||');';  
end^


ALTER PROCEDURE ADD_COURSE (
    P_DATE TYPE OF DOM_DATE,
    P_NOTE TYPE OF DOM_CHAR_20)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN 
    INSERT INTO COURSES(COURSE_DATE, NOTE) 
    VALUES (:P_DATE, :P_NOTE) 
    RETURNING ID INTO :R_ID; 
END^


ALTER PROCEDURE ADD_CRYPT_PARI (
    P_OPR_ID INTEGER,
    P_PARI_IO_ID INTEGER,
    P_KASA_ID INTEGER,
    P_OBEKT_ID INTEGER,
    P_SUMA DOUBLE PRECISION,
    P_VALUTA_ID INTEGER,
    P_KURS DOUBLE PRECISION,
    P_PROWERKA SMALLINT,
    P_ALLOW_FAK SMALLINT,
    P_TIP SMALLINT,
    P_PASS VARCHAR(25),
    P_PARI_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN
    IF (P_PARI_ID = 0) THEN
        R_ID = GEN_ID(GEN_PARI_ID,1);
    ELSE
        R_ID = P_PARI_ID;

    INSERT INTO PARI_CRYPT
    VALUES (:R_ID,:P_OPR_ID, :P_PARI_IO_ID, :P_KASA_ID, :P_OBEKT_ID,
    CRYPT_DOUBLE(:P_SUMA,:P_PASS), :P_VALUTA_ID, :P_KURS,:P_PROWERKA,
    :P_ALLOW_FAK, :P_TIP);
END^


ALTER PROCEDURE ADD_EDIT_DEL_DEF_RAZ_EL (
    P_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_RAZFASOVKA_ID INTEGER,
    P_ACTION INTEGER)
RETURNS (
    ID INTEGER,
    SIMPLE_ID INTEGER,
    RAZFASOVKA_ID INTEGER)
AS
BEGIN 
  if (p_action = 0) then 
    insert into def_raz_simple (simple_id, razfasovka_id) 
    values (:p_simple_id, :p_razfasovka_id); 
  else 
  if (p_action = 1) then 
    update def_raz_simple 
    set simple_id = :p_simple_id, 
        razfasovka_id = :p_razfasovka_id 
    where (simple_id = :p_simple_id and 
           razfasovka_id = :p_id); 
   else 
  if (p_action = 2) then 
    delete from def_raz_simple 
    where (simple_id = :p_simple_id and 
           razfasovka_id = :p_id); 
 
END^


ALTER PROCEDURE ADD_EDIT_NAL_KOL_RZV (
    R_OPR_ID_POR INTEGER,
    R_OPR_ID_EDIT_POR INTEGER)
AS
declare variable L_SKLAD_ID integer; 
declare variable L_SIMPLE_ID integer; 
declare variable L_KOL_RZV double precision; 
declare variable L_NAL_ID integer; 
declare variable L_NAL_KOL double precision; 
declare variable L_NAL_KOL_RZV double precision; 
declare variable L_OPR_EDIT_ID integer; 
declare variable LL_KOL_RZV double precision; 
BEGIN 
    /* Намирам склада на опр */ 
    SELECT opr.sklad_id FROM opr WHERE  opr.id = :r_opr_id_por INTO :l_sklad_id; 
 
    /* Ако има редактираща операция изваждаме количествата от NAl.Kol_RZV */ 
    IF (r_opr_id_edit_por > 0) THEN BEGIN 
        SELECT opr_edit.id FROM opr_edit 
        WHERE opr_edit.opr_id = :r_opr_id_edit_por AND opr_edit.ed_opr_id = :r_opr_id_por 
        INTO :l_opr_edit_id; 
 
        FOR SELECT 
            por_el_edit.simple_id, 
            COALESCE(por_el_edit.kol_rzv,0) 
        FROM por_el_edit 
        WHERE 
            por_el_edit.edit_id = :l_opr_edit_id 
        INTO :l_simple_id,:l_kol_rzv 
        DO BEGIN 
          SELECT nal.kol_rzv FROM nal 
          WHERE nal.sklad_id = :l_sklad_id AND nal.simple_id = :l_simple_id 
          INTO :ll_kol_rzv; 
 
          IF (ll_kol_rzv >= l_kol_rzv) THEN 
            ll_kol_rzv =  round5(ll_kol_rzv - l_kol_rzv); 
          ELSE 
            ll_kol_rzv = 0; 
 
          UPDATE nal SET nal.kol_rzv = :ll_kol_rzv 
          WHERE nal.sklad_id = :l_sklad_id AND nal.simple_id = :l_simple_id; 
        END 
    END 
 
    /* Добавяме количествата в NAl.Kol_RZV */ 
 
    FOR SELECT 
        por_el.simple_id, 
        por_el.kol_rzv 
    FROM por_el 
    WHERE por_el.opr_id = :r_opr_id_por 
    INTO :l_simple_id, :l_kol_rzv 
    DO BEGIN 
        l_nal_id = 0; 
        SELECT 
            nal.id, 
            nal.kol_nal, 
            COALESCE(nal.kol_rzv,0) 
        FROM nal 
        WHERE 
            nal.simple_id = :l_simple_id AND 
            nal.sklad_id = :l_sklad_id 
        INTO :l_nal_id, :l_nal_kol,:l_nal_kol_rzv; 
 
        IF (l_nal_id > 0) THEN 
          --IF (round5(l_nal_kol_rzv + l_kol_rzv) <= l_nal_kol) THEN 
            UPDATE nal SET nal.kol_rzv = round5(:l_nal_kol_rzv + :l_kol_rzv) WHERE nal.id = :l_nal_id; 
          --ELSE 
          --  UPDATE nal SET nal.kol_rzv = :l_nal_kol_rzv 
          --  WHERE nal.id = :l_nal_id; 
 
    END 
END^


ALTER PROCEDURE ADD_EDIT_PRODUCTION_REQUEST (
    P_OPR_REQUEST_ID TYPE OF DOM_KEY,
    P_OPR_TIP TYPE OF DOM_KEY,
    P_DATE TYPE OF DOM_DATE,
    P_IP TYPE OF DOM_KEY,
    P_USER_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY,
    P_KLI_ID TYPE OF DOM_KEY,
    P_SUMA TYPE OF CURRENCY,
    P_POR_NUM TYPE OF DOM_CHAR_30,
    P_VSKLAD_ID TYPE OF DOM_KEY,
    P_SUMA_KAPARO TYPE OF CURRENCY,
    P_DATE_MONTAJ TYPE OF DOM_DATE,
    P_COMMENT_TEXT DOM_CHAR_300,
    P_FLAG_COMPLETE TYPE OF DOM_BOOLEAN)
AS
DECLARE VARIABLE L_OPR_EDIT TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_USER_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_KLI_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SUMA TYPE OF CURRENCY; 
DECLARE VARIABLE L_DATE_OLD TYPE OF DOM_DATE; 
DECLARE VARIABLE L_EDIT_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_COMMENT_NOTE DOM_CHAR_300; 
DECLARE VARIABLE L_COMMENT_ID TYPE OF DOM_INT; 
DECLARE VARIABLE L_COMMENT_ID_OLD TYPE OF DOM_INT; 
DECLARE VARIABLE L_NOMER TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_INT; 
DECLARE VARIABLE L_MASTER_SIMPLE_ID TYPE OF DOM_INT; 
DECLARE VARIABLE L_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_CENA TYPE OF DOM_CENA; 
DECLARE VARIABLE L_SIMPLE_CALC_ID TYPE OF DOM_INT; 
begin 
    FOR 
        SELECT 
            OPR.SKLAD_ID, 
            OPR.USER_ID, 
            OPR.KLI_ID, 
            OPR.SUMA, 
            OPR.OPR_DATE 
        FROM 
            OPR_PRODUCTION_REQUEST INNER JOIN OPR ON OPR.ID = OPR_PRODUCTION_REQUEST.OPR_ID 
        WHERE 
            OPR_PRODUCTION_REQUEST.OPR_ID =:P_OPR_REQUEST_ID 
        INTO :L_SKLAD_ID, :L_USER_ID, :L_KLI_ID, :L_SUMA, :L_DATE_OLD 
 
    DO 
    BEGIN 
        EXECUTE PROCEDURE ADD_OPR(:P_OPR_TIP, :P_DATE, :P_IP, :P_USER_ID, :P_SKLAD_ID, :P_KLI_ID, :P_SUMA) RETURNING_VALUES :L_OPR_EDIT; 
        EXECUTE PROCEDURE ADD_OPR_EDIT(:L_OPR_EDIT, :P_OPR_REQUEST_ID, :L_SKLAD_ID, :L_USER_ID, :L_KLI_ID, :L_SUMA, : L_DATE_OLD) RETURNING_VALUES :L_EDIT_ID; 
 
        UPDATE 
            OPR_PRODUCTION_REQUEST 
        SET 
            OPR_PRODUCTION_REQUEST.SUMA_KAPARO   =:P_SUMA_KAPARO, 
            OPR_PRODUCTION_REQUEST.OT_SKLAD      =:P_SKLAD_ID, 
            OPR_PRODUCTION_REQUEST.V_SKLAD       =:P_VSKLAD_ID, 
            OPR_PRODUCTION_REQUEST.POR_NUM       =:P_POR_NUM, 
            OPR_PRODUCTION_REQUEST.DT_MONTAJ     =:P_DATE_MONTAJ, 
            OPR_PRODUCTION_REQUEST.FLAG_COMPLETE =:P_FLAG_COMPLETE 
        WHERE 
            OPR_PRODUCTION_REQUEST.OPR_ID =:P_OPR_REQUEST_ID; 
 
        update 
            OPR 
        SET 
            OPR.KLI_ID   =:P_KLI_ID, 
            OPR.OPR_DATE =:P_DATE, 
            OPR.SKLAD_ID =:P_SKLAD_ID, 
            opr.USER_ID  =:P_USER_ID 
        WHERE 
            OPR.ID =:P_OPR_REQUEST_ID; 
 
        SELECT FIRST 1 
            COMMENTS.ID, 
            CAST(SUBSTRING (COMMENTS.NOTE FROM 1 FOR 300) AS DOM_CHAR_300) 
        FROM 
            COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID AND COMMENT_OPR_NODE.OPR_ID =:P_OPR_REQUEST_ID 
        ORDER BY COMMENTS.ID DESC 
 
        INTO :L_COMMENT_ID_OLD, :L_COMMENT_NOTE; 
 
        IF (:L_COMMENT_NOTE <> :P_COMMENT_TEXT) THEN BEGIN 
            INSERT INTO COMMENTS(NOTE, DATE_MODIFIED, USER_ID) VALUES(:P_COMMENT_TEXT, CURRENT_TIMESTAMP, :P_USER_ID) RETURNING ID INTO :L_COMMENT_ID; 
            INSERT INTO COMMENT_OPR_NODE(COMMENT_ID, OPR_ID) VALUES(:L_COMMENT_ID, :P_OPR_REQUEST_ID); 
            UPDATE COMMENT_OPR_NODE SET COMMENT_OPR_NODE.OPR_ID =:L_OPR_EDIT WHERE COMMENT_OPR_NODE.COMMENT_ID =:L_COMMENT_ID; 
        END 
 
        FOR 
            SELECT 
                PRODUCTION_REQUEST_EL.NOMER, 
                PRODUCTION_REQUEST_EL.SIMPLE_ID, 
                PRODUCTION_REQUEST_EL.MASTER_SIMPLE_ID, 
                PRODUCTION_REQUEST_EL.KOL, 
                PRODUCTION_REQUEST_EL.CENA_CL, 
                production_request_el.SIMPLE_CALC_ID 
            FROM 
                PRODUCTION_REQUEST_EL 
            WHERE 
                PRODUCTION_REQUEST_EL.OPR_REQUEST_ID =:P_OPR_REQUEST_ID 
            INTO :L_NOMER, :L_SIMPLE_ID, :L_MASTER_SIMPLE_ID, :L_KOL, :L_CENA, :L_SIMPLE_CALC_ID 
        DO 
        BEGIN 
            INSERT INTO OLD_REQUEST_EL (OPR_REQUEST_ID, NOMER, SIMPLE_ID, MASTER_SIMPLE_ID, KOL, CENA_CL, SIMPLE_CALC_ID) 
            VALUES(:L_OPR_EDIT, :L_NOMER, :L_SIMPLE_ID, :L_MASTER_SIMPLE_ID, :L_KOL,:L_CENA, :L_SIMPLE_CALC_ID); 
        END 
 
        DELETE FROM PRODUCTION_REQUEST_EL WHERE PRODUCTION_REQUEST_EL.OPR_REQUEST_ID =:P_OPR_REQUEST_ID; 
    END 
 
end;^


ALTER PROCEDURE ADD_FAK (
    P_OPR_ID INTEGER,
    P_NUMBER VARCHAR(10),
    P_TIP SMALLINT,
    P_SUMA DOUBLE PRECISION,
    P_NEOBLAGAEMA DOUBLE PRECISION,
    P_DDS DOUBLE PRECISION,
    P_TOTAL DOUBLE PRECISION,
    P_VBROI VARCHAR(1),
    P_MOL VARCHAR(30),
    P_POLUCHENA_OT VARCHAR(30),
    P_POLUCHENA_DATE DATE,
    P_POLUCHENA_EGN VARCHAR(10),
    P_PALNOM INTEGER,
    P_PALNOM_DATE DATE,
    P_PASP_NUMBER INTEGER,
    P_PASP_PU VARCHAR(15),
    P_PASP_DATE DATE,
    P_OWNER_ID SMALLINT,
    P_OBEKT_ID SMALLINT,
    P_DATE_SDELKA DATE,
    P_SUMA_TO DOUBLE PRECISION,
    P_VALUTA_ID INTEGER,
    P_KURS_VALUTA DOUBLE PRECISION,
    P_POR_NUM TYPE OF DOM_CHAR_30,
    P_PAY_TYPE TYPE OF DOM_SMAL_INT,
    P_AKCIZ DOUBLE PRECISION,
    P_FAK_ACCOUNTING INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN 
  R_ID = GEN_ID(GEN_FAK_ID, 1); 
 
  INSERT INTO FAK (ID, OPR_ID, NUMBER, TIP, SUMA, NEOBLAGAEMA, DDS, TOTAL, V_BROI, MOL, POLUCHENA_OT, POLUCHENA_DATE, POLUCHENA_EGN, PALNOM, PALNOM_DATE, PASP_NUMBER, PASP_PU, PASP_DATE, OWNER_ID, 
    OBEKT_ID, DATE_SDELKA, SUMA_TO, VALUTA_ID, KURS_VALUTA, POR_NUM, PAY_TYPE, SUMA_AKCIZ, FAK_ACCOUNTING) 
  VALUES (:R_ID, :P_OPR_ID, :P_NUMBER, :P_TIP, :P_SUMA, :P_NEOBLAGAEMA, :P_DDS, 
      :P_TOTAL, :P_VBROI, :P_MOL, :P_POLUCHENA_OT, :P_POLUCHENA_DATE, :P_POLUCHENA_EGN, 
      :P_PALNOM, :P_PALNOM_DATE, :P_PASP_NUMBER, :P_PASP_PU, :P_PASP_DATE, :P_OWNER_ID, :P_OBEKT_ID, :P_DATE_SDELKA, :P_SUMA_TO, :P_VALUTA_ID, :P_KURS_VALUTA, :P_POR_NUM, :P_PAY_TYPE, :P_AKCIZ, :P_FAK_ACCOUNTING); 
END^


ALTER PROCEDURE ADD_FAK_EL (
    P_OPR_ID TYPE OF DOM_KEY,
    P_TEXT TYPE OF DOM_CHAR_1000,
    P_ME_ID TYPE OF DOM_KEY_SMALL,
    P_KOL TYPE OF DOM_KOL,
    P_CENA TYPE OF DOM_CENA,
    P_DDS TYPE OF DOM_SUMA,
    P_SUMA_DDS TYPE OF DOM_SUMA,
    P_SUMA_TOTAL TYPE OF DOM_SUMA,
    P_TOST TYPE OF DOM_SUMA,
    P_CENA_FIX TYPE OF DOM_CENA,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_RAZ_ID TYPE OF DOM_KEY,
    P_RAZ_KOL TYPE OF DOM_KOL,
    P_TEXT_LAT TYPE OF DOM_CHAR_100,
    P_AVANS_OPR_ID TYPE OF DOM_KEY,
    P_VAT_REASON_ID TYPE OF DOM_KEY)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN 
  R_ID = GEN_ID(GEN_FAK_EL_ID, 1); 
 
  INSERT INTO FAK_EL (ID, OPR_ID, TEXT, ME_ID, KOL, CENA, DDS, SUMA_DDS, SUMA_TOTAL, CENA_FIX, TOST, SIMPLE_ID, 
  RAZ_ID, RAZ_KOL, TEXT_LAT, AVANS_OPR_ID, VAT_REASON_ID) 
  VALUES (:R_ID, :P_OPR_ID, :P_TEXT, :P_ME_ID, :P_KOL, :P_CENA, :P_DDS, :P_SUMA_DDS, :P_SUMA_TOTAL, :P_CENA_FIX, 
  :P_TOST, :P_SIMPLE_ID, :P_RAZ_ID, :P_RAZ_KOL, :P_TEXT_LAT, :P_AVANS_OPR_ID, :P_VAT_REASON_ID); 
END^


ALTER PROCEDURE ADD_FIRMA_FROM_MOBILE (
    P_NAME TYPE OF DOM_CHAR_100,
    P_DDSNUMBER TYPE OF DOM_CHAR_15,
    P_PLACE_ID TYPE OF DOM_KEY,
    P_MOL TYPE OF DOM_CHAR_30,
    P_ADDRESS TYPE OF DOM_CHAR_100,
    P_BULSTAT TYPE OF DOM_CHAR_15,
    P_PHONE_NUMBER TYPE OF DOM_CHAR_30)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN 
    INSERT INTO FIRMI(NAME_FAK, IDNOMDDS, MOL, ADRES, PLACE_ID, REG_DDS, BULSTAT, TEL) 
    VALUES (:P_NAME, :P_DDSNUMBER, :P_MOL, :P_ADDRESS, :P_PLACE_ID, '1', SUBSTRING(:P_BULSTAT FROM 1 FOR 13), :P_PHONE_NUMBER) 
    RETURNING ID INTO :R_ID; 
END^


ALTER PROCEDURE ADD_FIRMI_FAK_DATA
AS
DECLARE VARIABLE L_FAK_ID INTEGER; 
DECLARE VARIABLE L_NAME_FAK VARCHAR(50); 
DECLARE VARIABLE L_FIRMI_ADDRES VARCHAR(50); 
DECLARE VARIABLE L_MOL VARCHAR(30); 
DECLARE VARIABLE L_ID_NOM VARCHAR(13); 
DECLARE VARIABLE L_REG_DDS CHAR(1); 
DECLARE VARIABLE L_IDNOMDDS VARCHAR(15); 
DECLARE VARIABLE L_PLACE_NAME VARCHAR(30); 
DECLARE VARIABLE L_KLI_NAME VARCHAR(100); 
DECLARE VARIABLE L_DEF_OWNER_BANKA INTEGER; 
BEGIN 
    FOR SELECT 
            FAK.ID, 
            FIRMI.NAME_FAK, 
            FIRMI.ADRES, 
            FAK.MOL, 
            FIRMI.BULSTAT, 
            FIRMI.REG_DDS, 
            FIRMI.IDNOMDDS, 
            PLACE.NAME AS PLASE_NAME, 
            KLI.NAME, 
            FIRMI.DEF_OWNERBANKA 
        FROM 
            FAK 
            INNER JOIN OPR ON OPR.ID = FAK.OPR_ID 
            INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            INNER JOIN FIRMI ON FIRMI.ID = KLI.FIRMA_ID 
            LEFT JOIN PLACE ON PLACE.ID = FIRMI.PLACE_ID 
        WHERE 
            NOT EXISTS (SELECT FIRMI_FAK_DATA.FAK_ID FROM FIRMI_FAK_DATA WHERE FIRMI_FAK_DATA.FAK_ID = FAK.ID) 
        INTO :L_FAK_ID,:L_NAME_FAK,:L_FIRMI_ADDRES,:L_MOL,:L_ID_NOM,:L_REG_DDS,:L_IDNOMDDS,:L_PLACE_NAME,:L_KLI_NAME,:L_DEF_OWNER_BANKA 
 
        DO 
        BEGIN 
            INSERT INTO FIRMI_FAK_DATA (NAME_FAK,ADDRES,MOL,IDNOM,REG_DDS,IDNOMDDS,PLACE_NAME,KLI_NAME,FAK_ID,DEF_BANKA) 
            VALUES (:L_NAME_FAK,:L_FIRMI_ADDRES,:L_MOL,:L_ID_NOM,:L_REG_DDS,:L_IDNOMDDS,:L_PLACE_NAME,:L_KLI_NAME,:L_FAK_ID,:L_DEF_OWNER_BANKA); 
        END 
END^


ALTER PROCEDURE ADD_GROUP (
    P_TIP TYPE OF DOM_INT,
    P_NAME TYPE OF DOM_CHAR_50)
RETURNS (
    R_ID TYPE OF DOM_INT)
AS
BEGIN 
    SELECT 
        SELEKCIQ.ID 
    FROM 
        SELEKCIQ 
    WHERE 
        SELEKCIQ.NAME = :P_NAME AND 
        SELEKCIQ.TIP = :P_TIP 
    INTO 
        :R_ID; 
 
    IF (R_ID IS NULL) THEN BEGIN 
        INSERT INTO SELEKCIQ (NAME, TIP, ACTIVEN, USER_ID, DATETIME) 
            VALUES ( :P_NAME, :P_TIP, 1, NULL, NULL) 
            RETURNING ID INTO :R_ID; 
    END 
END^


ALTER PROCEDURE ADD_GROUP_ESHOP (
    P_GROUP_NAME VARCHAR(50),
    P_PARENT_ID INTEGER,
    P_SEL_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
declare variable L_ID integer; 
begin 
  L_ID = GEN_ID(GEN_EGROUPS_ID, 1); 
 
  INSERT INTO EGROUPS(ID, NAME, PARENT_ID, SEL_ID) VALUES (:L_ID, :P_GROUP_NAME, :P_PARENT_ID, :P_SEL_ID); 
 
  R_ID = L_ID; 
end^


ALTER PROCEDURE ADD_IN (
    P_OPRID INTEGER,
    P_PAYTIP INTEGER,
    P_PSHOP SMALLINT,
    P_GAR_NOM VARCHAR(30),
    P_RF SMALLINT = 0)
RETURNS (
    R_ID INTEGER)
AS
BEGIN 
  R_ID = GEN_ID(GEN_IN_ID,1); 
  INSERT INTO "IN" (ID, OPR_ID, PAY_TIP, PSHOP, NOM_GAR, RF) 
  VALUES (:R_ID, :P_OPRID, :P_PAYTIP, :P_PSHOP, :P_GAR_NOM, :P_RF); 
  SUSPEND; 
END^


ALTER PROCEDURE ADD_IN_EL (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_SUMA_FR DOUBLE PRECISION,
    P_SUMA_SR DOUBLE PRECISION,
    P_IS_F SMALLINT,
    P_VAT_PERCENT DOUBLE PRECISION,
    P_VAT_REASON_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN 
    INSERT INTO IN_EL(OPR_ID, SIMPLE_ID, KOL, SUMA_FR,SUMA_SR, IS_F, VAT_PERCENT, VAT_REASON_ID) 
    VALUES(:P_OPR_ID, :P_SIMPLE_ID, :P_KOL, :P_SUMA_FR, :P_SUMA_SR, :P_IS_F, :P_VAT_PERCENT, :P_VAT_REASON_ID) 
    RETURNING ID INTO :R_ID; 
END^


ALTER PROCEDURE ADD_IN_EL2 (
    P_IN_EL_ID INTEGER,
    P_KOL DOUBLE PRECISION)
AS
DECLARE VARIABLE L_SKLAD_ID SMALLINT;
DECLARE VARIABLE L_NAL_ID INTEGER;
DECLARE VARIABLE L_SIMPLE_ID INTEGER;
BEGIN
    INSERT INTO IN_EL2 (IN_EL_ID, KOL) VALUES (:P_IN_EL_ID,:P_KOL);

    SELECT
        IN_EL.SIMPLE_ID,
        OPR.SKLAD_ID
    FROM
        IN_EL INNER JOIN OPR ON (IN_EL.ID = :P_IN_EL_ID AND OPR.ID = IN_EL.OPR_ID)
    INTO
        :L_SIMPLE_ID, :L_SKLAD_ID;

    SELECT
        NAL.ID
    FROM
        NAL
    WHERE
        NAL.SIMPLE_ID = :L_SIMPLE_ID
        AND NAL.SKLAD_ID = :L_SKLAD_ID
    INTO
        :L_NAL_ID;

    P_IN_EL_ID = NULL;
    SELECT
        NAL2.ID
    FROM
        NAL2
    WHERE
        NAL2.NAL_ID = :L_NAL_ID
    INTO
        :P_IN_EL_ID;

    IF (P_IN_EL_ID IS NULL) THEN
        INSERT INTO NAL2(NAL_ID,KOL) VALUES (:L_NAL_ID,:P_KOL);
    ELSE
        UPDATE NAL2 SET
        NAL2.KOL = ROUND5(NAL2.KOL + :P_KOL)
        WHERE NAL2.ID = :P_IN_EL_ID;
END^


ALTER PROCEDURE ADD_INFO_MESA (
    P_IN_EL_ID INTEGER,
    P_MARKA VARCHAR(30),
    P_STRANA_R SMALLINT,
    P_STRANA_G SMALLINT,
    P_STRANA_K SMALLINT,
    P_MESO_TIP SMALLINT,
    P_AGE VARCHAR(20),
    P_CATEGORY TYPE OF DOM_CHAR_10,
    P_ZALOENOST TYPE OF DOM_CHAR_10,
    P_TEGLO TYPE OF DOM_KOL)
AS
BEGIN 
    INSERT INTO MESA(MARKA,STRANA_R,STRANA_G,STRANA_K,ELEMENT_ID,TIP,AGE,CATEGORY,STEPEN_ZALOENOST,TEGLO) 
    SELECT 
        CAST(:P_MARKA AS VARCHAR(30)), 
        CAST(:P_STRANA_R AS SMALLINT), 
        CAST(:P_STRANA_G AS SMALLINT), 
        CAST(:P_STRANA_K AS SMALLINT), 
        PN.ELEMENT_ID, 
        CAST(:P_MESO_TIP AS SMALLINT), 
        CAST(:P_AGE AS VARCHAR(20)), 
        CAST(:P_CATEGORY as DOM_CHAR_10), 
        CAST(:P_ZALOENOST as DOM_CHAR_10), 
        CAST(:P_TEGLO AS DOM_KOL) 
    FROM 
        PARTIDA_IN_EL_NODE PIN INNER JOIN PARTIDA_EL_NODE PEN ON PIN.PARTIDA_NODE_ID = PEN.ID 
        AND PIN.IN_EL_ID = :P_IN_EL_ID 
        INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID; 
 
END^


ALTER PROCEDURE ADD_KI_DOST_SUMA (
    P_OPR_ID TYPE OF DOM_KEY,
    P_PAY_TIP TYPE OF DOM_FLAG,
    P_VAT_PERCENT TYPE OF DOM_PERCENT)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN 
    INSERT INTO KI_DOST_SUMA(KI_OPR_ID, PAY_TIP, VAT_PERCENT) 
    VALUES (:P_OPR_ID, :P_PAY_TIP, :P_VAT_PERCENT) 
    RETURNING(ID) INTO :R_ID; 
END^


ALTER PROCEDURE ADD_KI_DOST_SUMA_EL (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_CENA DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_KOL DOUBLE PRECISION,
    P_IN_EL_ID INTEGER)
AS
BEGIN 
  INSERT INTO KI_DOST_SUMA_EL(OPR_ID, SIMPLE_ID, CENA, SUMA, KOL, IN_EL_ID) 
         VALUES (:P_OPR_ID, :P_SIMPLE_ID, :P_CENA, :P_SUMA, :P_KOL, :P_IN_EL_ID); 
END^


ALTER PROCEDURE ADD_KLI_FROM_FIRMA (
    P_FIRM_ID TYPE OF DOM_KEY,
    P_PERCENT NUMERIC(8,4))
RETURNS (
    R_KLI_ID TYPE OF DOM_KEY)
AS
BEGIN 
 
    INSERT INTO KLI (NAME, KLIENT, DOSTAV, PROIZV, ADRES, TEL, FIRMA_ID, DIST, 
    ZA_KASA, FLAG_CHECK, PLACE_ID, PADEJ, PADEJ_DDS, FLAG_PAY, BONUS_TOCHKI, SLEDI, FLAG_PAY_FAKT,PERCENT, EMAIL) 
    SELECT 
        FIRMI.NAME_FAK,'1', '0','0', 
        FIRMI.ADRES, 
        FIRMI.TEL, 
        FIRMI.ID, 
        '0','0', 0, 
        FIRMI.PLACE_ID, 
        0, 0, 0, 0, 0, 0 , :P_PERCENT, 
        FIRMI.EMAIL 
    FROM 
        FIRMI 
    WHERE 
        FIRMI.ID = :P_FIRM_ID 
    RETURNING ID INTO :R_KLI_ID; 
END^


ALTER PROCEDURE ADD_KLI_FROM_MOBILE (
    P_NAME TYPE OF DOM_CHAR_100,
    P_NAME_ENGL TYPE OF DOM_CHAR_100,
    P_CODE TYPE OF DOM_CHAR_15,
    P_ADDRESS TYPE OF DOM_CHAR_100,
    P_FIRMA_ID TYPE OF DOM_KEY,
    P_PLACE_ID TYPE OF DOM_KEY,
    P_DUE_DAYS TYPE OF DOM_SMAL_INT,
    P_PHONE_NUMBER TYPE OF DOM_CHAR_100,
    P_SEL_ID TYPE OF DOM_KEY,
    P_VOP TYPE OF DOM_SMAL_INT)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN 
    INSERT INTO KLI(NAME, CODE, NAME_ENGL, FIRMA_ID, ADRES, PLACE_ID, KLIENT, DOSTAV, PROIZV, DIST, ZA_KASA, FLAG_CHECK, 
        PADEJ, PADEJ_DDS, FLAG_PAY, BONUS_TOCHKI, SLEDI, FLAG_PAY_FAKT, DNI_FAK_PADEJ, VOP, DNI_DO_PADEJ, TEL, DEF_SEL_ID) 
    VALUES (:P_NAME, :P_CODE, :P_NAME_ENGL, :P_FIRMA_ID, :P_ADDRESS, :P_PLACE_ID, '1', '0', '0', '0', '0', 0, 0, 0, 0, 0, 0, 0, 0, :P_VOP, :P_DUE_DAYS, :P_PHONE_NUMBER, :P_SEL_ID) 
    RETURNING ID INTO :R_ID; 
END^


ALTER PROCEDURE ADD_KLI_POCKET_NODE (
    P_KLI_ID INTEGER)
AS
DECLARE VARIABLE L_POCKET_SHOP_ID INTEGER; 
BEGIN 
  FOR SELECT DISTINCT 
    POCKET_SHOP.ID 
  FROM 
    POCKET_SHOP 
  INTO 
    :L_POCKET_SHOP_ID 
  DO BEGIN 
    INSERT INTO KLI_POCKET_NODE(KLI_ID, POCKET_ID) VALUES (:P_KLI_ID, :L_POCKET_SHOP_ID); 
  END 
END^


ALTER PROCEDURE ADD_KLI_SELEKCIQ (
    P_BULSTAT VARCHAR(13),
    P_DAN_NUM TYPE OF DOM_CHAR_15,
    P_KLI_ADRES TYPE OF DOM_CHAR_100,
    P_SELEKCIQ_ID TYPE OF DOM_KEY,
    P_KLI_PLACE_ID TYPE OF DOM_KEY,
    P_KLI_ID TYPE OF DOM_INT,
    P_KLI_NAME TYPE OF DOM_CHAR_100,
    P_MOL TYPE OF DOM_CHAR_100,
    P_CODE TYPE OF DOM_CHAR_30)
RETURNS (
    R_KLI_ID INTEGER)
AS
declare variable L_FIRMI_ID type of DOM_KEY; 
BEGIN 
    IF (P_KLI_ID IS NULL) THEN BEGIN 
 
        L_FIRMI_ID = GEN_ID(GEN_FIRMI_ID, 1); 
        INSERT INTO FIRMI(ID, NAME_FAK, ADRES, MOL, PLACE_ID, IDNOMDDS, BULSTAT) 
               VALUES (:L_FIRMI_ID, :P_KLI_NAME, :P_KLI_ADRES, :P_MOL, :P_KLI_PLACE_ID, :P_DAN_NUM, :P_BULSTAT); 
 
        R_KLI_ID = GEN_ID(GEN_KLI_ID,1); 
        INSERT INTO KLI(ID, CODE, NAME, KLIENT, ADRES, PLACE_ID, FIRMA_ID) 
               VALUES(:R_KLI_ID, :P_CODE, :P_KLI_NAME, '1', :P_KLI_ADRES, :P_KLI_PLACE_ID, :L_FIRMI_ID); 
 
        IF (P_SELEKCIQ_ID IS NOT NULL) THEN 
            INSERT INTO SELEKCIQ_KLI_EL(KLI_ID, SELEKCIQ_ID) VALUES (:R_KLI_ID, :P_SELEKCIQ_ID); 
    END ELSE BEGIN 
        R_KLI_ID = :P_KLI_ID; 
 
        SELECT FIRMA_ID FROM KLI WHERE ID = :P_KLI_ID INTO :L_FIRMI_ID; 
        IF (L_FIRMI_ID IS NOT NULL) THEN BEGIN 
            UPDATE FIRMI SET IDNOMDDS = :P_DAN_NUM, BULSTAT = :P_BULSTAT 
            WHERE ID = :L_FIRMI_ID; 
        END ELSE BEGIN 
            L_FIRMI_ID = GEN_ID(GEN_FIRMI_ID, 1); 
            INSERT INTO FIRMI(ID, NAME_FAK, ADRES, MOL, PLACE_ID, IDNOMDDS, BULSTAT) 
                VALUES (:L_FIRMI_ID, :P_KLI_NAME, :P_KLI_ADRES, :P_MOL,  :P_KLI_PLACE_ID, :P_DAN_NUM, :P_BULSTAT); 
        END 
 
        UPDATE KLI SET NAME = :P_KLI_NAME, ADRES = :P_KLI_ADRES, PLACE_ID = :P_KLI_PLACE_ID, FIRMA_ID = :L_FIRMI_ID 
        WHERE ID = :P_KLI_ID; 
 
        IF (P_SELEKCIQ_ID IS NOT NULL) THEN 
            UPDATE SELEKCIQ_KLI_EL SET SELEKCIQ_ID = :P_SELEKCIQ_ID 
            WHERE KLI_ID = :P_KLI_ID; 
    END 
END^


ALTER PROCEDURE ADD_KLI_SKLAD_NODE (
    P_KLI_ID INTEGER)
AS
DECLARE VARIABLE L_SKLAD_ID INTEGER; 
BEGIN 
  FOR SELECT DISTINCT 
    SKLAD.ID 
  FROM 
    SKLAD 
  WHERE 
    SKLAD.POCKET = '1' 
  INTO 
    :L_SKLAD_ID 
  DO BEGIN 
    INSERT INTO KLI_SKLAD_NODE(KLI_ID, SKLAD_ID) VALUES (:P_KLI_ID, :L_SKLAD_ID); 
  END 
END^


ALTER PROCEDURE ADD_LOG (
    P_TABLE_NAME VARCHAR(50),
    P_TABLE_ID INTEGER,
    P_TABLE_FIELD VARCHAR(50),
    P_TIP_OPR CHAR(1),
    P_OLD_VALUE DOM_CHAR_300,
    P_NEW_VALUE DOM_CHAR_300)
AS
begin 
  IF ((:P_OLD_VALUE IS NULL) AND (:P_NEW_VALUE IS NULL)) THEN EXIT; 
  IF ((:P_OLD_VALUE <> :P_NEW_VALUE) OR (:P_OLD_VALUE IS NULL) OR (:P_NEW_VALUE IS NULL)) THEN 
 
  INSERT INTO TBL_LOG (TABLE_NAME, TABLE_ID, TABLE_FIELD, TIP_OPR, OLD_VALUE, NEW_VALUE, DATETIME, USER_ID, PC_ID) 
  VALUES (:P_TABLE_NAME, :P_TABLE_ID, :P_TABLE_FIELD, :P_TIP_OPR, :P_OLD_VALUE, :P_NEW_VALUE, CURRENT_TIMESTAMP, 
     (SELECT FIRST 1 USER_ID FROM TBL_USER_PC), (SELECT FIRST 1 PC_ID FROM TBL_USER_PC)); 
end^


ALTER PROCEDURE ADD_LOG_CENI_DDS_MANUAL (
    P_TIP_DDS SMALLINT,
    P_USER_ID SMALLINT,
    P_OPR_ID INTEGER,
    P_TIP_CENI SMALLINT)
AS
BEGIN 
    INSERT INTO LOG_CENI_DDS(TIP_DDS,TIP_CENI,OPR_ID,USER_ID) 
    VALUES (:P_TIP_DDS,:P_TIP_CENI,:P_OPR_ID,:P_USER_ID); 
END^


ALTER PROCEDURE ADD_METRO_EXPORTS (
    P_EXPORT_SYNC_ID TYPE OF DOM_SMAL_INT)
AS
declare variable L_OPR_ID type of DOM_INT; 
declare variable L_EXPORT_ID type of DOM_INT; 
BEGIN 
    INSERT INTO EXPORTS(EXPORT_DATE, EXPORT_SYNC_ID, SYNC_DATE_TIME) 
    VALUES(CURRENT_DATE, :P_EXPORT_SYNC_ID, CURRENT_TIMESTAMP) 
    RETURNING ID INTO :L_EXPORT_ID; 
 
    FOR SELECT 
        TMP_METRO_EXPORT_OPR.OPR_ID 
    FROM 
        TMP_METRO_EXPORT_OPR 
    INTO :L_OPR_ID 
    DO 
        INSERT INTO METRO_EXPORT_OPR(EXPORT_ID, OPR_ID) VALUES(:L_EXPORT_ID, :L_OPR_ID); 
 
    DELETE FROM TMP_METRO_EXPORT_OPR; 
END^


ALTER PROCEDURE ADD_NAL_KOL_RZV (
    R_SKLAD_ID INTEGER,
    R_OPR_ID INTEGER)
AS
declare variable l_simple_id integer; 
declare variable l_kol_rzv double precision; 
declare variable l_nal_id integer; 
BEGIN 
 FOR SELECT 
        por_el.simple_id, 
        por_el.kol_rzv 
    FROM por_el 
    WHERE por_el.opr_id = :r_opr_id 
    INTO :l_simple_id, :l_kol_rzv 
    DO BEGIN 
        l_nal_id = 0; 
        SELECT 
            nal.id 
        FROM nal 
        WHERE 
            nal.simple_id = :l_simple_id AND 
            nal.sklad_id = :r_sklad_id 
        INTO :l_nal_id; 
 
        IF (l_nal_id = 0) THEN BEGIN 
            INSERT INTO nal(simple_id, sklad_id, kol_nal, suma, last_cena, suma_fr, kol_rzv) 
            VALUES (:l_simple_id, :r_sklad_id, 0, 0, 0, 0, :l_kol_rzv); 
        END 
        ELSE BEGIN 
            UPDATE nal 
            SET nal.kol_rzv = round5(COALESCE(nal.kol_rzv,0) + :l_kol_rzv) 
            WHERE 
                nal.id = :l_nal_id; 
        END 
    END 
END^


ALTER PROCEDURE ADD_NEPOTV_OPR (
    P_OPR_ID INTEGER,
    P_OPR_TIP_NAME VARCHAR(3000))
AS
declare variable L_USER_ID integer; 
declare variable L_OPR_TIP integer; 
declare variable L_SKLAD_ID integer; 
declare variable L_SKLAD_MOL integer; 
declare variable L_OPR_TIP_NAME varchar(50); 
declare variable L_CH_OPR integer; 
declare variable L_FLAG integer; 
BEGIN 
  /* ZAPISVA OPERACIQTA KATO NEPROVERENA AKO E SKLADOVA I E IZVAR6ENA OT */ 
  /* POTREBITEL RAZLI4EN OT TOZI, KOITO E MOL NA SKLADA                   */ 
 
  P_OPR_TIP_NAME = ','||P_OPR_TIP_NAME||','; 
 
  SELECT 
    OPR.OPR_TIP, 
    OPR.USER_ID, 
    OPR.SKLAD_ID, 
    SKLAD.USER_ID, 
    OPR_TIP.NAME 
  FROM 
    OPR 
    INNER JOIN SKLAD ON OPR.SKLAD_ID = SKLAD.ID 
    INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
  WHERE 
    OPR.ID = :P_OPR_ID 
  INTO :L_OPR_TIP, :L_USER_ID, :L_SKLAD_ID, :L_SKLAD_MOL, L_OPR_TIP_NAME; 
 
    L_FLAG = 1; 
    IF (:L_OPR_TIP BETWEEN 101 AND 200) THEN BEGIN 
      SELECT FIRST 1 
        OPR_ANUL.AN_OPR_ID 
      FROM 
        OPR_ANUL 
      WHERE 
        OPR_ANUL.OPR_ID = :P_OPR_ID 
      INTO 
        :L_CH_OPR; 
 
      DELETE FROM POTV_EL WHERE POTV_EL.POTV_ID IS NULL AND POTV_EL.OPR_POTV_ID = :L_CH_OPR; 
      IF (ROW_COUNT > 0) THEN BEGIN 
        DELETE FROM POTV_EL WHERE POTV_EL.OPR_POTV_ID = :P_OPR_ID; 
        L_FLAG = 0; 
      END 
    END 
 
 
  /* SKLADOVI OPERACII */ 
  --IF (((:L_OPR_TIP IN (1, 2, 3, 6, 7, 9, 11, 12, 14, 26, 27, 28, 29, 30, 32, 33, 34, 48, 
  --                   101, 102, 103, 104, 109, 111, 112, 122, 123, 126, 127, 134, 
  --                   201, 202, 203, 204, 209, 211, 212, 222, 223, 226, 227, 234) AND :L_SKLAD_ID IS NOT NULL AND :L_USER_ID <> :L_SKLAD_MOL )) OR 
  --   (:L_OPR_TIP IN (4) AND :L_SKLAD_ID IS NOT NULL))  THEN 
  --BEGIN 
  --  INSERT INTO POTV_EL (POTV_EL.OPR_POTV_ID, POTV_EL.MOL_USER_ID) VALUES(:P_OPR_ID, :L_SKLAD_MOL); 
  --END 
 
  IF (L_FLAG = 1) THEN BEGIN 
    IF (((:P_OPR_TIP_NAME LIKE '%,'||:L_OPR_TIP_NAME||',%' AND :L_SKLAD_ID IS NOT NULL AND :L_USER_ID <> :L_SKLAD_MOL )) OR 
       (:L_OPR_TIP IN (4) AND ',Прехвърляне към,' LIKE '%,'||:L_OPR_TIP_NAME||',%' AND :L_SKLAD_ID IS NOT NULL))  THEN 
    BEGIN 
      INSERT INTO POTV_EL (POTV_EL.OPR_POTV_ID, POTV_EL.MOL_USER_ID) VALUES(:P_OPR_ID, :L_SKLAD_MOL); 
    END 
  END 
END^


ALTER PROCEDURE ADD_OPR (
    P_OPR_TIP TYPE OF DOM_KEY_SMALL,
    P_DATE TYPE OF DOM_DATE,
    P_IP TYPE OF DOM_INT,
    P_USER_ID TYPE OF DOM_KEY_SMALL,
    P_SKLAD_ID TYPE OF DOM_KEY_SMALL,
    P_KLI_ID TYPE OF DOM_KEY,
    P_SUMA TYPE OF DOM_SUMA,
    P_PC_ID TYPE OF DOM_KEY = NULL)
RETURNS (
    R_OPR_ID INTEGER)
AS
BEGIN 
/*V.4*/ 
    INSERT INTO OPR (OPR_TIP, OPR_DATE, IP, USER_ID, SKLAD_ID, KLI_ID, SUMA, PC_ID) 
    VALUES(:P_OPR_TIP, :P_DATE, :P_IP, :P_USER_ID, :P_SKLAD_ID, :P_KLI_ID, :P_SUMA, :P_PC_ID) 
    RETURNING ID INTO :R_OPR_ID; 
END^


ALTER PROCEDURE ADD_OPR_ANUL (
    P_OPR_ID INTEGER,
    P_ANUL_ID INTEGER)
RETURNS (
    R_OPR_ANUL_ID INTEGER)
AS
BEGIN 
    R_OPR_ANUL_ID = GEN_ID(GEN_OPR_ANUL_ID, 1); 
    INSERT INTO OPR_ANUL(ID,OPR_ID,AN_OPR_ID) 
    VALUES(:R_OPR_ANUL_ID,:P_OPR_ID,:P_ANUL_ID); 
END^


ALTER PROCEDURE ADD_OPR_EDIT (
    P_OPR_ID INTEGER,
    P_EDITED_OPR_ID INTEGER,
    P_SKLAD_ID SMALLINT,
    P_USER_ID SMALLINT,
    P_KLI_ID INTEGER,
    P_SUMA DOUBLE PRECISION,
    P_OPR_DATE DATE)
RETURNS (
    R_OPR_EDIT_ID INTEGER)
AS
BEGIN 
    R_OPR_EDIT_ID = GEN_ID(GEN_OPR_EDIT_ID, 1); 
    INSERT INTO OPR_EDIT(ID,OPR_ID,ED_OPR_ID,SKLAD_ID,USER_ID,KLI_ID,SUMA,OPR_DATE) 
    VALUES(:R_OPR_EDIT_ID,:P_OPR_ID,:P_EDITED_OPR_ID,:P_SKLAD_ID,:P_USER_ID,:P_KLI_ID,:P_SUMA,:P_OPR_DATE); 
END^


ALTER PROCEDURE ADD_OPR_PAYMENT_NODE (
    P_PAYMENT_ID INTEGER,
    P_OPR_ID INTEGER,
    P_SUMA DOUBLE PRECISION)
AS
declare variable L_ID integer;
BEGIN 
-- V.4 
-- ДОБАВЯ ДАННИ ЗА ТОВА КОЕ ПЛАЩАНЕ, В ПЛАЩАНЕТО НА КОЯ OПЕРАЦИЯ УЧАСТВА 
-- И С КАКВА СУМА 
-- ОТ ВЕРСИЯ 3 ПОДАВАНИТЕ ПАРАМЕТРИ СА ID-ТА ОТ ТАБЛИЦА SUMI, КОЯТО Е СЛОЖЕНА ЗА ДА СЕ 
-- РАБОТИ С ПОГАСИТЕЛНИ,ЛИЗИНГОВИ ПЛАНОВЕ, А НЕ КАКТО БЕШЕ ДОТОГАВА ID-ТА НА ОПЕРАЦИИ 
 
    SELECT 
        OPR_PAYMENT_NODE.ID 
    FROM 
        OPR_PAYMENT_NODE 
    WHERE 
        OPR_ID = :P_OPR_ID 
        AND PAYMENT_ID = :P_PAYMENT_ID 
    INTO 
        :L_ID; 
 
    IF (L_ID IS NULL) THEN 
        INSERT INTO OPR_PAYMENT_NODE (PAYMENT_ID,OPR_ID,SUMA, DATE_OF_PAYMENT) 
        VALUES (:P_PAYMENT_ID,:P_OPR_ID,:P_SUMA, CURRENT_TIMESTAMP); 
    ELSE 
        UPDATE OPR_PAYMENT_NODE SET 
            SUMA = ROUNDD(SUMA + :P_SUMA), 
            DATE_OF_PAYMENT = CURRENT_TIMESTAMP 
        WHERE 
            ID = :L_ID; 
 
    UPDATE SUMI SET 
        SUMA_OST = ROUND(SUMA_OST - :P_SUMA, 2) 
    WHERE 
        ID IN (:P_OPR_ID,:P_PAYMENT_ID); 
END^


ALTER PROCEDURE ADD_OPR_PC (
    P_OPR_TIP SMALLINT,
    P_DATETIME VARCHAR(30),
    P_DATE DATE,
    P_IP INTEGER,
    P_USER_ID SMALLINT,
    P_SKLAD_ID SMALLINT,
    P_KLI_ID INTEGER,
    P_PC_ID INTEGER,
    P_SUMA DOUBLE PRECISION)
RETURNS (
    R_OPR_ID INTEGER)
AS
BEGIN 
    INSERT INTO OPR (OPR_TIP, DATETIME, OPR_DATE, IP, USER_ID, SKLAD_ID, KLI_ID, PC_ID, SUMA) 
    VALUES(:P_OPR_TIP, CAST(:P_DATETIME AS VARCHAR(30)), :P_DATE, :P_IP, :P_USER_ID, :P_SKLAD_ID, :P_KLI_ID, :P_PC_ID, :P_SUMA) 
    RETURNING ID INTO :R_OPR_ID; 
END^


ALTER PROCEDURE ADD_OPR_SUMI (
    P_OPR_ID INTEGER,
    P_SUMA_FR DOUBLE PRECISION,
    P_SUMA_SR DOUBLE PRECISION)
AS
 BEGIN 
    INSERT INTO OPR_SUMI(OPR_ID, SUMA_FR, SUMA_SR) 
    VALUES(:P_OPR_ID,ROUNDD(:P_SUMA_FR),ROUNDD(:P_SUMA_SR)); 
END^


ALTER PROCEDURE ADD_OUT (
    P_OPR_ID INTEGER,
    P_PAY_TIP SMALLINT,
    P_SUMA_BASE DOUBLE PRECISION,
    P_FP SMALLINT,
    P_SUMA_KLI_PAY DOUBLE PRECISION,
    P_OBEKT_ID SMALLINT,
    P_REQUIRE_FAKT SMALLINT,
    P_KLI_AGENT_ID INTEGER,
    P_POR_NUM TYPE OF DOM_CHAR_30,
    P_CODE TYPE OF DOM_CHAR_15 = NULL)
RETURNS (
    R_OUT_ID INTEGER)
AS
BEGIN 
    INSERT INTO OUT (OPR_ID, PAY_TIP, SUMA_BASE, FP,SUMA_KLI_PAY,OBEKT_ID, REQUIRE_FAKT, KLI_AGENT_ID, POR_NUM, CODE) 
    VALUES(:P_OPR_ID, :P_PAY_TIP,:P_SUMA_BASE,:P_FP,:P_SUMA_KLI_PAY,:P_OBEKT_ID,:P_REQUIRE_FAKT,:P_KLI_AGENT_ID, :P_POR_NUM, :P_CODE) 
    RETURNING ID INTO :R_OUT_ID; 
END^


ALTER PROCEDURE ADD_OUT_EL (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_SUMA_SR DOUBLE PRECISION,
    P_SUMA_FR DOUBLE PRECISION,
    P_IS_F SMALLINT,
    P_POR_EL_ID INTEGER)
RETURNS (
    R_OUT_EL_ID INTEGER)
AS
BEGIN 
    INSERT INTO OUT_EL (KOL, OPR_ID, SIMPLE_ID, SUMA, SUMA_SR, SUMA_FR, IS_F)
    VALUES (:P_KOL, :P_OPR_ID, :P_SIMPLE_ID, :P_SUMA, :P_SUMA_SR, :P_SUMA_FR, :P_IS_F)
    RETURNING ID
    INTO :R_OUT_EL_ID;
 
    IF (P_POR_EL_ID IS NOT NULL) THEN BEGIN 
         UPDATE POR_EL SET OUT_EL_ID = :R_OUT_EL_ID WHERE ID = :P_POR_EL_ID; 
    END
END^


ALTER PROCEDURE ADD_OUT_EL_FAK_OUT_EL (
    P_OUT_EL_ID INTEGER,
    P_FAK_OUT_EL_ID INTEGER,
    P_KOL DOUBLE PRECISION)
AS
BEGIN 
    INSERT INTO OUT_EL_FAK_OUT_EL(OUT_EL_ID,FAK_OUT_EL_ID,KOL) 
    VALUES(:P_OUT_EL_ID,:P_FAK_OUT_EL_ID,:P_KOL); 
END^


ALTER PROCEDURE ADD_OUT_EL_SR_A (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_IS_F SMALLINT,
    P_POR_EL_ID INTEGER,
    P_SKLAD_ID INTEGER)
RETURNS (
    R_OUT_EL_ID INTEGER)
AS
declare variable L_SUMA_SR double precision;
declare variable L_SUMA_FR double precision;
BEGIN 
  l_suma_sr = 0.00;
  L_SUMA_FR = 0.00;

  INSERT INTO OUT_EL (KOL, OPR_ID, SIMPLE_ID, SUMA, SUMA_SR, SUMA_FR, IS_F)
  VALUES (:P_KOL, :P_OPR_ID, :P_SIMPLE_ID, :P_SUMA, :l_suma_sr, :l_suma_fr, :P_IS_F)
  RETURNING ID
  INTO :R_OUT_EL_ID;

  if (p_por_el_id is not null) then
    update por_el set out_el_id = :r_out_el_id where id = :p_por_el_id;
 
  SUSPEND; 
END^


ALTER PROCEDURE ADD_OUT_EL2 (
    P_OUT_EL_ID INTEGER,
    P_KOL DOUBLE PRECISION)
AS
DECLARE VARIABLE L_SKLAD_ID SMALLINT;
DECLARE VARIABLE L_NAL_ID INTEGER;
DECLARE VARIABLE L_SIMPLE_ID INTEGER;
BEGIN
    INSERT INTO OUT_EL2 (OUT_EL_ID, KOL) VALUES (:P_OUT_EL_ID,:P_KOL);

    SELECT
        OUT_EL.SIMPLE_ID,
        OPR.SKLAD_ID
    FROM
        OUT_EL INNER JOIN OPR ON (OUT_EL.ID = :P_OUT_EL_ID AND OPR.ID = OUT_EL.OPR_ID)
    INTO
        :L_SIMPLE_ID, :L_SKLAD_ID;

    SELECT
        NAL.ID
    FROM
        NAL
    WHERE
        NAL.SIMPLE_ID = :L_SIMPLE_ID
        AND NAL.SKLAD_ID = :L_SKLAD_ID
    INTO
        :L_NAL_ID;

    P_OUT_EL_ID = NULL;
    SELECT
        NAL2.ID
    FROM
        NAL2
    WHERE
        NAL2.NAL_ID = :L_NAL_ID
    INTO
        :P_OUT_EL_ID;

    IF (P_OUT_EL_ID IS NULL) THEN
        INSERT INTO NAL2(NAL_ID,KOL) VALUES (:L_NAL_ID,:P_KOL);
    ELSE
        UPDATE NAL2 SET
        NAL2.KOL = ROUND5(NAL2.KOL - :P_KOL)
        WHERE NAL2.ID = :P_OUT_EL_ID;
END^


ALTER PROCEDURE ADD_PARI (
    P_OPR_ID INTEGER,
    P_PARI_IO_ID INTEGER,
    P_KASA_ID INTEGER,
    P_OBEKT_ID INTEGER,
    P_SUMA NUMERIC(10,2),
    P_VALUTA_ID INTEGER,
    P_KURS DOUBLE PRECISION,
    P_PROWERKA SMALLINT,
    P_ALLOW_FAK SMALLINT,
    P_TIP SMALLINT)
RETURNS (
    R_ID INTEGER)
AS
 BEGIN 
/*V.2*/ 
    R_ID = GEN_ID(GEN_PARI_ID,1); 
 
    INSERT INTO PARI(ID, OPR_ID, PARI_IO_ID, KASA_ID, OBEKT_ID, SUMA, VALUTA_ID, KURS, PROWERKA, ALLOW_FAK, TIP) 
    VALUES(:R_ID,:P_OPR_ID,:P_PARI_IO_ID,:P_KASA_ID,:P_OBEKT_ID,:P_SUMA, :P_VALUTA_ID,:P_KURS,:P_PROWERKA,:P_ALLOW_FAK,:P_TIP); 
END^


ALTER PROCEDURE ADD_PARTIDA_PROP_EL (
    P_PARTIDA_EL_ID INTEGER,
    P_MAJOR_PROP_ID INTEGER,
    P_MINOR_PROP_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN 
    INSERT INTO PARTIDA_PROP_NODE(PARTIDA_EL_ID,MAJOR_PROP_ID,MINOR_PROP_ID) 
    VALUES (:P_PARTIDA_EL_ID,:P_MAJOR_PROP_ID,:P_MINOR_PROP_ID) 
    RETURNING ID INTO :R_ID; 
END^


ALTER PROCEDURE ADD_PAYMENT (
    P_OPR_ID TYPE OF DOM_KEY,
    P_IS_BANK TYPE OF DOM_FLAG,
    P_FLAG_BONUS TYPE OF DOM_SMAL_INT,
    P_FLAG_AVANS TYPE OF DOM_SMAL_INT,
    P_UNP_ID TYPE OF DOM_INT64,
    P_FAK_ID TYPE OF DOM_KEY,
    P_IDX TYPE OF DOM_INT,
    P_NUMBER TYPE OF DOM_CHAR_50,
    P_BRANCH_ID TYPE OF DOM_KEY)
RETURNS (
    R_PAYMENT_ID TYPE OF DOM_KEY)
AS
BEGIN 
    INSERT INTO PAYMENT (OPR_ID, FLAG_BONUS, FLAG_AVANS, UNP_ID, FAK_ID, IS_BANK, IDX, NUMBER, BRANCH_ID) 
    VALUES (:P_OPR_ID, :P_FLAG_BONUS, :P_FLAG_AVANS, :P_UNP_ID, :P_FAK_ID, :P_IS_BANK, :P_IDX, :P_NUMBER, :P_BRANCH_ID); 
 
    SELECT 
        SUMI.ID 
    FROM 
        SUMI 
    WHERE 
        SUMI.OPR_ID =:P_OPR_ID 
    INTO :R_PAYMENT_ID; 
END^


ALTER PROCEDURE ADD_PAYMENT_2 (
    P_OPR_ID TYPE OF DOM_KEY,
    P_IS_BANK TYPE OF DOM_FLAG,
    P_FLAG_BONUS TYPE OF DOM_SMAL_INT,
    P_FLAG_AVANS TYPE OF DOM_SMAL_INT,
    P_UNP_ID TYPE OF DOM_INT64,
    P_FAK_ID TYPE OF DOM_KEY,
    P_IDX TYPE OF DOM_INT,
    P_NUMBER TYPE OF DOM_CHAR_50,
    P_BRANCH_ID TYPE OF DOM_KEY,
    P_VAT_PERCENT DOM_PERCENT)
RETURNS (
    R_PAYMENT_ID TYPE OF DOM_KEY)
AS
BEGIN 
    INSERT INTO PAYMENT (OPR_ID, FLAG_BONUS, FLAG_AVANS, UNP_ID, FAK_ID, IS_BANK, IDX, NUMBER, BRANCH_ID, VAT_PERCENT) 
    VALUES (:P_OPR_ID, :P_FLAG_BONUS, :P_FLAG_AVANS, :P_UNP_ID, :P_FAK_ID, :P_IS_BANK, :P_IDX, :P_NUMBER, :P_BRANCH_ID, :P_VAT_PERCENT); 
 
    SELECT 
        SUMI.ID 
    FROM 
        SUMI 
    WHERE 
        SUMI.OPR_ID =:P_OPR_ID 
    INTO :R_PAYMENT_ID; 
END^


ALTER PROCEDURE ADD_PAYMENT_EL (
    P_BANKA TYPE OF DOM_CHAR_50,
    P_NOMER TYPE OF DOM_CHAR_50,
    P_KLI_ID TYPE OF DOM_INT,
    P_PAYMENT_ID TYPE OF DOM_INT,
    P_PAYMENT_TIP_ID TYPE OF DOM_INT,
    P_SUMA TYPE OF DOM_SUMA,
    P_VAUCHER_ID TYPE OF DOM_INT)
RETURNS (
    R_ID INTEGER)
AS
begin 
  /* VERSION 1 */ 
  /* Created from AtonPOS */ 
  insert into PAYMENTS_EL 
    (BANKA, KLI_ID, NOMER, PAYMENT_ID, PAYMENT_TIP_ID, SUMA) 
  values 
    (:P_BANKA, :P_KLI_ID, :P_NOMER, :P_PAYMENT_ID, :P_PAYMENT_TIP_ID, :P_SUMA) 
  returning(ID) into :R_ID; 
 
  if (P_VAUCHER_ID is not null) then 
    update PROD_VAUCHER 
    set PAYMENT_EL_ID = :R_ID 
    where ID = :P_VAUCHER_ID; 
 
end^


ALTER PROCEDURE ADD_PAYMENT_EXT (
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_PAYMENT_ID TYPE OF DOM_KEY,
    R_SUMI_ID TYPE OF DOM_KEY)
AS
BEGIN 
    SELECT 
      GEN_ID(GEN_PAYMENT_ID, 1) 
    FROM 
      RDB$DATABASE 
    INTO :R_PAYMENT_ID; 
 
    INSERT INTO PAYMENT (ID, OPR_ID) VALUES (:R_PAYMENT_ID, :P_OPR_ID); 
 
    SELECT 
        SUMI.ID 
    FROM 
        SUMI 
    WHERE 
        SUMI.OPR_ID =:P_OPR_ID 
    INTO :R_SUMI_ID; 
END^


ALTER PROCEDURE ADD_PLACE (
    P_NAME TYPE OF DOM_CHAR_30)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN 
    SELECT 
      ID 
    FROM 
      PLACE 
    WHERE 
      UPPER(NAME) = UPPER(:P_NAME) 
    INTO :R_ID; 
 
    IF (R_ID IS NULL) THEN BEGIN 
        INSERT INTO PLACE(NAME) 
        VALUES(:P_NAME) 
        RETURNING(ID) INTO :R_ID; 
    END 
END^


ALTER PROCEDURE ADD_POR_EDIT (
    OPR_ID INTEGER,
    ED_OPR_ID INTEGER,
    SKLAD_ID INTEGER,
    USER_ID INTEGER,
    KLI_ID INTEGER,
    SUMA DOUBLE PRECISION,
    OPR_DATE DATE)
RETURNS (
    R_ID INTEGER)
AS
begin
  r_id = GEN_ID(GEN_OPR_EDIT_ID,1);
  insert into opr_edit (ID,OPR_ID, ED_OPR_ID, SKLAD_ID, USER_ID, KLI_ID, SUMA, OPR_DATE)
  values(:r_id,:OPR_ID, :ED_OPR_ID, :SKLAD_ID, :USER_ID, :KLI_ID, :SUMA, :OPR_DATE);
  suspend;
end^


ALTER PROCEDURE ADD_POR_EL (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_RAZFASOVKA_ID INTEGER,
    P_RAZFASOVKA_KOL DOUBLE PRECISION,
    P_COMMENT VARCHAR(100),
    P_FLAG_MOVE INTEGER,
    P_KOL_RZV DOUBLE PRECISION)
RETURNS (
    R_POR_EL_ID INTEGER)
AS
BEGIN 
  R_POR_EL_ID = GEN_ID(GEN_POR_EL_ID,1); 
  INSERT INTO POR_EL (ID, SIMPLE_ID, KOL, OPR_ID, SUMA, KOL_POR, FLAG_MOVE, KOL_RZV) 
  VALUES (:R_POR_EL_ID, :P_SIMPLE_ID, :P_KOL, :P_OPR_ID, :P_SUMA, :P_KOL, :P_FLAG_MOVE,:P_KOL_RZV); 
 
  IF (P_RAZFASOVKA_ID IS NOT NULL) THEN 
    INSERT INTO POR_EL_RAZ_NODE (POR_EL_ID, RAZFASOVKA_ID, KOL) 
    VALUES (:R_POR_EL_ID, :P_RAZFASOVKA_ID, :P_RAZFASOVKA_KOL); 
 
  IF (P_COMMENT IS NOT NULL) THEN 
   INSERT INTO POR_EL_COMMENT(POR_EL_ID, COMMENT) 
   VALUES (:R_POR_EL_ID,  :P_COMMENT); 
END^


ALTER PROCEDURE ADD_POR_EL_2 (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_KOL_2 DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_RAZFASOVKA_ID INTEGER,
    P_RAZFASOVKA_KOL DOUBLE PRECISION,
    P_COMMENT VARCHAR(100),
    P_FLAG_MOVE INTEGER,
    P_KOL_RZV DOUBLE PRECISION,
    P_KOL_POR TYPE OF DOM_KOL = 0,
    P_PRICE TYPE OF DOM_CENA = 0)
RETURNS (
    R_POR_EL_ID INTEGER)
AS
BEGIN 
  if (:P_KOL_POR = 0) then 
    p_kol_por = :P_KOL; 
 
  if (:p_price = 0) then 
    if (P_KOL > 0) then 
        P_PRICE = ROUND(P_SUMA/P_KOL, 5); 
 
  R_POR_EL_ID = GEN_ID(GEN_POR_EL_ID,1); 
  INSERT INTO POR_EL (ID, SIMPLE_ID, KOL, KOL2, OPR_ID, SUMA, KOL_POR, FLAG_MOVE, KOL_RZV, PRICE) 
  VALUES (:R_POR_EL_ID, :P_SIMPLE_ID, :P_KOL, :P_KOL_2, :P_OPR_ID, :P_SUMA, :P_KOL_POR, :P_FLAG_MOVE,:P_KOL_RZV, :P_PRICE); 
 
  IF (P_RAZFASOVKA_ID IS NOT NULL) THEN 
    INSERT INTO POR_EL_RAZ_NODE (POR_EL_ID, RAZFASOVKA_ID, KOL) 
    VALUES (:R_POR_EL_ID, :P_RAZFASOVKA_ID, :P_RAZFASOVKA_KOL); 
 
  IF (P_COMMENT IS NOT NULL) THEN 
   INSERT INTO POR_EL_COMMENT(POR_EL_ID, COMMENT) 
   VALUES (:R_POR_EL_ID,  :P_COMMENT); 
END^


ALTER PROCEDURE ADD_POR_EL_API (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_KOL_2 DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_RAZFASOVKA_ID INTEGER,
    P_RAZFASOVKA_KOL DOUBLE PRECISION,
    P_COMMENT VARCHAR(100),
    P_FLAG_MOVE INTEGER,
    P_KOL_RZV DOUBLE PRECISION,
    P_KOL_POR TYPE OF DOM_KOL = 0,
    P_PRICE TYPE OF DOM_CENA = 0,
    P_IS_BONUS TYPE OF DOM_SMAL_INT = 0)
RETURNS (
    R_POR_EL_ID INTEGER)
AS
BEGIN 
  if (:P_KOL_POR = 0) then 
    p_kol_por = :P_KOL; 
 
  if (:p_price = 0) then 
    if (P_KOL > 0) then 
        P_PRICE = ROUND(P_SUMA/P_KOL, 5); 
 
  R_POR_EL_ID = GEN_ID(GEN_POR_EL_ID,1); 
  INSERT INTO POR_EL (ID, SIMPLE_ID, KOL, KOL2, OPR_ID, SUMA, KOL_POR, FLAG_MOVE, KOL_RZV, PRICE, IS_BONUS) 
  VALUES (:R_POR_EL_ID, :P_SIMPLE_ID, :P_KOL, :P_KOL_2, :P_OPR_ID, :P_SUMA, :P_KOL_POR, :P_FLAG_MOVE,:P_KOL_RZV, :P_PRICE, :P_IS_BONUS); 
 
  IF (P_RAZFASOVKA_ID IS NOT NULL) THEN 
    INSERT INTO POR_EL_RAZ_NODE (POR_EL_ID, RAZFASOVKA_ID, KOL) 
    VALUES (:R_POR_EL_ID, :P_RAZFASOVKA_ID, :P_RAZFASOVKA_KOL); 
 
  IF (P_COMMENT IS NOT NULL) THEN 
   INSERT INTO POR_EL_COMMENT(POR_EL_ID, COMMENT) 
   VALUES (:R_POR_EL_ID,  :P_COMMENT); 
END^


ALTER PROCEDURE ADD_POR_EL_EDIT (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID_EDIT INTEGER,
    P_KOL DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_RAZFASOVKA_ID INTEGER,
    P_RAZFASOVKA_KOL DOUBLE PRECISION,
    P_KOL_RZV DOUBLE PRECISION)
AS
declare variable l_por_el_id_edit integer; 
begin 
  l_por_el_id_edit = GEN_ID(GEN_POR_EL_EDIT_ID,1);  
  insert into por_el_edit (id, edit_id, simple_id, kol, suma, kol_rzv) 
  values (:l_por_el_id_edit, :p_opr_id_edit, :p_simple_id, :p_kol, :p_suma, :p_kol_rzv); 
 
  if (p_razfasovka_id is not null) then  
    insert into por_raz_edit (edit_id, razfasovka_id, kol) 
    values (:l_por_el_id_edit, :p_razfasovka_id, :p_razfasovka_kol); 
end^


ALTER PROCEDURE ADD_POR_EL_EDIT_2 (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID_EDIT INTEGER,
    P_KOL DOUBLE PRECISION,
    P_KOL_2 DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_RAZFASOVKA_ID INTEGER,
    P_RAZFASOVKA_KOL DOUBLE PRECISION,
    P_KOL_RZV DOUBLE PRECISION,
    P_PRICE TYPE OF DOM_CENA = 0)
AS
declare variable L_POR_EL_ID_EDIT integer; 
BEGIN 
  L_POR_EL_ID_EDIT = GEN_ID(GEN_POR_EL_EDIT_ID,1); 
  INSERT INTO POR_EL_EDIT (ID, EDIT_ID, SIMPLE_ID, KOL, KOL2, SUMA, KOL_RZV, PRICE) 
  VALUES (:L_POR_EL_ID_EDIT, :P_OPR_ID_EDIT, :P_SIMPLE_ID, :P_KOL, :P_KOL_2,  :P_SUMA, :P_KOL_RZV, :P_PRICE); 
 
  IF (P_RAZFASOVKA_ID IS NOT NULL) THEN 
    INSERT INTO POR_RAZ_EDIT (EDIT_ID, RAZFASOVKA_ID, KOL) 
    VALUES (:L_POR_EL_ID_EDIT, :P_RAZFASOVKA_ID, :P_RAZFASOVKA_KOL); 
END^


ALTER PROCEDURE ADD_POTV_OPR (
    P_OPR_ID INTEGER,
    P_POTV_ID INTEGER,
    P_POTV_OPR_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
DECLARE VARIABLE L_ID INTEGER; 
BEGIN 
  IF (P_OPR_ID > 0) THEN BEGIN 
    L_ID = GEN_ID(GEN_POTV_ID, 1); 
    INSERT INTO POTV(ID, OPR_ID) VALUES (:L_ID,  :P_OPR_ID); 
    R_ID = L_ID; 
  END 
  ELSE BEGIN 
    UPDATE POTV_EL 
    SET POTV_EL.POTV_ID = :P_POTV_ID 
    WHERE POTV_EL.OPR_POTV_ID = :P_POTV_OPR_ID; 
    R_ID = 0; 
  END 
 
  SUSPEND; 
END^


ALTER PROCEDURE ADD_PRIORITET (
    P_STEPEN SMALLINT)
AS
DECLARE VARIABLE L_CL_ID INTEGER;
DECLARE VARIABLE L_CL_PRIORITET INTEGER;
BEGIN
  IF (p_stepen = 0 ) THEN BEGIN
    FOR SELECT
        cenova_lista.id, 
        cenova_lista.prioritet
    FROM cenova_lista
    WHERE
        cenova_lista.prioritet < 5001 AND
        cenova_lista.prioritet IS NOT NULL
    ORDER BY 2
    INTO :l_cl_id,:l_cl_prioritet
    DO BEGIN
        UPDATE cenova_lista
        SET cenova_lista.prioritet = :l_cl_prioritet + 1
        WHERE cenova_lista.id = :l_cl_id;
    END
  END
  IF (p_stepen = 1 ) THEN BEGIN
    FOR SELECT
        cenova_lista.id, 
        cenova_lista.prioritet
    FROM cenova_lista
    WHERE
        cenova_lista.prioritet > 5000 AND
        cenova_lista.prioritet < 10001 AND
        cenova_lista.prioritet IS NOT NULL
    ORDER BY 2
    INTO :l_cl_id,:l_cl_prioritet
    DO BEGIN
        UPDATE cenova_lista
        SET cenova_lista.prioritet = :l_cl_prioritet + 1
        WHERE cenova_lista.id = :l_cl_id;
    END
  END
  IF (p_stepen = 2 ) THEN BEGIN
    FOR SELECT
        cenova_lista.id, 
        cenova_lista.prioritet
    FROM cenova_lista
    WHERE
        cenova_lista.prioritet > 10000 AND
        cenova_lista.prioritet IS NOT NULL
    ORDER BY 2
    INTO :l_cl_id,:l_cl_prioritet
    DO BEGIN
        UPDATE cenova_lista
        SET cenova_lista.prioritet = :l_cl_prioritet + 1
        WHERE cenova_lista.id = :l_cl_id;
    END
  END
END^


ALTER PROCEDURE ADD_PROFORMA_TO_FAK (
    P_FAK_ID INTEGER,
    P_PROFORMA_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN 
    INSERT INTO PROFORMA_TO_FAK(FAK_ID,PROFORMA_ID) 
    VALUES(:P_FAK_ID,:P_PROFORMA_ID) 
    RETURNING (ID) 
    INTO :R_ID; 
END^


ALTER PROCEDURE ADD_PROP_NODE (
    P_MAJOR_ID INTEGER,
    P_MINOR_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN 
    INSERT INTO PROP_NODE(MAJOR_PROP_ID,MINOR_PROP_ID) 
    VALUES (:P_MAJOR_ID,:P_MINOR_ID) 
    RETURNING ID INTO :R_ID; 
END^


ALTER PROCEDURE ADD_REQUEST_EL (
    OPR_REQUEST_ID TYPE OF DOM_INT,
    NOMER TYPE OF DOM_SMAL_INT,
    SIMPLE_ID TYPE OF DOM_INT,
    MASTER_SIMPLE_ID TYPE OF DOM_INT,
    SIMPLE_CALC_ID TYPE OF DOM_INT,
    KOL TYPE OF DOM_KOL,
    TOT_SUM TYPE OF DOM_SUMA,
    CENA_CL TYPE OF DOM_CENA)
RETURNS (
    ID TYPE OF DOM_INT)
AS
begin 
    INSERT INTO PRODUCTION_REQUEST_EL(OPR_REQUEST_ID, NOMER, SIMPLE_ID, MASTER_SIMPLE_ID, SIMPLE_CALC_ID, KOL, TOT_SUM, CENA_CL) 
    VALUES(:OPR_REQUEST_ID, :NOMER, :SIMPLE_ID, :MASTER_SIMPLE_ID, :SIMPLE_CALC_ID, :KOL, :TOT_SUM, :CENA_CL) 
    RETURNING(ID) INTO :ID; 
end^


ALTER PROCEDURE ADD_RET_DOST_NODE (
    P_RET_OPR_ID INTEGER,
    P_OUT_SKLAD_ID SMALLINT)
RETURNS (
    R_OUT_OPR_ID INTEGER,
    R_IN_OPR_ID INTEGER)
AS
BEGIN
    INSERT INTO OPR (OPR_TIP, DATETIME, IP, USER_ID, SKLAD_ID, KLI_ID,SUMA, OPR_DATE, OTC_ID, IS_LOCK)
    SELECT
        47,
        OPR.DATETIME,
        OPR.IP,
        OPR.USER_ID,
        :P_OUT_SKLAD_ID,
        OPR.KLI_ID,
        0.00,
        OPR.OPR_DATE,
        OPR.OTC_ID,
        0
    FROM
        OPR
    WHERE
        OPR.ID = :P_RET_OPR_ID
    RETURNING ID
    INTO
        :R_OUT_OPR_ID;

    INSERT INTO OPR (OPR_TIP, DATETIME, IP, USER_ID, SKLAD_ID, KLI_ID,SUMA, OPR_DATE, OTC_ID, IS_LOCK)
    SELECT
        47,
        OPR.DATETIME,
        OPR.IP,
        OPR.USER_ID,
        OPR.SKLAD_ID,
        OPR.KLI_ID,
        0.00,
        OPR.OPR_DATE,
        OPR.OTC_ID,
        0
    FROM
        OPR
    WHERE
        OPR.ID = :P_RET_OPR_ID
    RETURNING ID
    INTO
        :R_IN_OPR_ID;

    INSERT INTO RET_DOST_MOVE_NODE(RET_OPR_ID,OUT_OPR_ID,IN_OPR_ID)
    VALUES (:P_RET_OPR_ID,:R_OUT_OPR_ID,:R_IN_OPR_ID);

    INSERT INTO OPR_SUMI(OPR_ID,SUMA_FR,SUMA_SR)
    VALUES(:R_OUT_OPR_ID,0.00,0.00);
END^


ALTER PROCEDURE ADD_SIMPLE_PROP_NODE (
    P_MAJOR_ID INTEGER,
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN 
    INSERT INTO SIMPLE_PROP_NODE(MAJOR_PROP_ID,SIMPLE_ID) 
    VALUES (:P_MAJOR_ID,:P_SIMPLE_ID) 
    RETURNING ID INTO :R_ID; 
END^


ALTER PROCEDURE ADD_SIMPLE_TABLE_PRICE (
    P_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_HEIGHT TYPE OF DOM_KOL,
    P_WIDTH TYPE OF DOM_KOL,
    P_PRICE TYPE OF DOM_CENA)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN 
    IF (P_ID > 0) THEN BEGIN 
        UPDATE OR INSERT INTO SIMPLE_TABLE_PRICES (ID, SIMPLE_ID, HEIGHT, WIDTH, PRICE) 
        VALUES (:P_ID, :P_SIMPLE_ID, :P_HEIGHT, :P_WIDTH, :P_PRICE) 
        MATCHING (ID); 
        R_ID = P_ID; 
    END 
    ELSE 
        INSERT INTO SIMPLE_TABLE_PRICES (SIMPLE_ID, HEIGHT, WIDTH, PRICE) 
        VALUES (:P_SIMPLE_ID, :P_HEIGHT, :P_WIDTH, :P_PRICE) 
        RETURNING(ID) INTO :R_ID; 
END^


ALTER PROCEDURE ADD_TABLE_PRICE_COEFICIENT (
    P_ID TYPE OF DOM_KEY,
    P_MASTER_SIMPLE_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_COEFICIENT TYPE OF DOM_PERCENT)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN 
    IF (P_ID > 0) THEN BEGIN 
        UPDATE OR INSERT INTO TABLE_PRICE_COEFICIENT(ID, MASTER_SIMPLE_ID, SIMPLE_ID, COEFICIENT) 
        VALUES (:P_ID, :P_MASTER_SIMPLE_ID, :P_SIMPLE_ID, :P_COEFICIENT) 
        MATCHING (ID); 
        R_ID = P_ID; 
    END 
    ELSE 
        INSERT INTO TABLE_PRICE_COEFICIENT(MASTER_SIMPLE_ID, SIMPLE_ID, COEFICIENT) 
        VALUES (:P_MASTER_SIMPLE_ID, :P_SIMPLE_ID, :P_COEFICIENT) 
        RETURNING(ID) INTO :R_ID; 
END^


ALTER PROCEDURE ADD_TEMP_IMPORT (
    P_VER SMALLINT,
    P_SIMPLE_ID INTEGER,
    P_NAME VARCHAR(100),
    P_NAME2 VARCHAR(100),
    P_CODE VARCHAR(15),
    P_KOL DOUBLE PRECISION,
    P_KOL2 DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_CENA DOUBLE PRECISION,
    P_RSN SMALLINT,
    P_OPIS VARCHAR(30))
RETURNS (
    R_ID INTEGER)
AS
BEGIN 
    INSERT INTO TEMP_IMPORT (VER, SIMPLE_ID, NAME, NAME2, CODE, KOL, KOL2, SUMA, CENA, RSN, OPIS) 
    VALUES (:P_VER, :P_SIMPLE_ID, :P_NAME, :P_NAME2, :P_CODE, :P_KOL, :P_KOL2, :P_SUMA, :P_CENA, :P_RSN, :P_OPIS) 
    RETURNING ID INTO :R_ID; 
END^


ALTER PROCEDURE ADD_TMP_MARK_EL (
    P_TMP_OPR_ID INTEGER,
    P_NUM INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_CENA DOUBLE PRECISION,
    P_SUMA DOUBLE PRECISION,
    P_RAZ_KOL DOUBLE PRECISION,
    P_RAZ_ID INTEGER,
    P_RSN CHAR(1),
    P_SKLAD_ID SMALLINT,
    P_VAT_PERCENT TYPE OF DOM_PERCENT,
    P_VAT_GROUP TYPE OF DOM_SMAL_INT)
AS
BEGIN 
  INSERT INTO TMP_MARK_EL (TMP_OPR_ID, NUM, SIMPLE_ID, KOL, CENA, SUMA, RAZ_KOL, RAZ_ID, RSN, SKLAD_ID, VAT_PERCENT, VAT_GROUP) VALUES 
     (:P_TMP_OPR_ID, :P_NUM, :P_SIMPLE_ID, :P_KOL, :P_CENA, :P_SUMA, :P_RAZ_KOL, :P_RAZ_ID, :P_RSN, :P_SKLAD_ID, :P_VAT_PERCENT, :P_VAT_GROUP); 
END^


ALTER PROCEDURE ADD_TMP_OPR (
    P_ID INTEGER,
    P_KLI_NOM INTEGER,
    P_KLI_ID INTEGER,
    P_SKLAD_ID INTEGER,
    P_SUMA DOUBLE PRECISION,
    P_COMMENT VARCHAR(1000),
    P_UNP_ID TYPE OF DOM_INT64)
RETURNS (
    R_ID INTEGER)
AS
BEGIN 
    IF (P_ID = 0) THEN 
        R_ID = GEN_ID(GEN_TMP_OPR_ID, 1); 
    ELSE 
        R_ID = P_ID; 
 
    INSERT INTO TMP_OPR (ID, KLI_NOM, KLI_ID, SKLAD_ID, SUMA, ERASED, "COMMENT", UNP_ID) 
    VALUES (:R_ID, :P_KLI_NOM, :P_KLI_ID, :P_SKLAD_ID, :P_SUMA, 0, :P_COMMENT, :P_UNP_ID); 
END^


ALTER PROCEDURE ADD_TMP_OPR_SN (
    P_TMP_OPR_ID INTEGER,
    P_ELEMENT_ID INTEGER,
    P_NUM INTEGER,
    P_SN VARCHAR(30),
    P_SIMPLE_ID INTEGER,
    P_IN_EL_ID INTEGER)
AS
BEGIN 
  INSERT INTO TMP_OPR_SN (TMP_OPR_ID, ELEMENT_ID, NUM, SN, SIMPLE_ID, IN_EL_ID) VALUES 
        (:P_TMP_OPR_ID, :P_ELEMENT_ID, :P_NUM, :P_SN, :P_SIMPLE_ID, :P_IN_EL_ID); 
END^


ALTER PROCEDURE ADD_TO_CFG_LOG (
    P_TABLE_CODE TYPE OF DOM_KEY_SMALL,
    P_USER_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_TABLE_NAME TYPE OF DOM_CHAR_300;
BEGIN
    DELETE FROM TMP_SEL_1;
    INSERT INTO TMP_SEL_1
    SELECT DISTINCT
        CFG_LOG.OBJ_ID
    FROM
        CFG_LOG
    WHERE
        CFG_LOG.TABLE_CODE = :P_TABLE_CODE;

    L_TABLE_NAME = TRIM(DECODE(P_TABLE_CODE,  3, 'KLI', 5, 'ME', 15, 'FIRMI', 20, 'SELEKCIQ', 9, 'SIMPLE', 16, 'PLACE', 13, 'VALUTA'));

     EXECUTE STATEMENT
    'INSERT INTO CFG_LOG(DATETIME, USER_ID, IP, TABLE_CODE, OBJ_ID, OPR_TIP)
    SELECT
        CURRENT_TIMESTAMP, ' ||
        :P_USER_ID || ',
        -1, '||
        :P_TABLE_CODE || ', ' ||
        :L_TABLE_NAME || '.ID,
        ''A''
    FROM ' ||
        :L_TABLE_NAME || ' LEFT JOIN TMP_SEL_1 TMP ON TMP.ID = ' || :L_TABLE_NAME || '.ID
    WHERE
        TMP.ID IS NULL';
END^


ALTER PROCEDURE ADD_UNFINISHED_SALE_ROW (
    P_OPR_ID TYPE OF DOM_KEY,
    P_NUM TYPE OF DOM_INT,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL,
    P_SUMA TYPE OF DOM_SUMA)
AS
 BEGIN 
    UPDATE OR INSERT INTO UNFINISHED_SALES(OPR_ID, NUM, SIMPLE_ID, KOL, SUMA) 
    VALUES (:P_OPR_ID, :P_NUM, :P_SIMPLE_ID, :P_KOL, :P_SUMA) 
    MATCHING(OPR_ID, NUM); 
END^


ALTER PROCEDURE ADD_UPDATE_BONUS_SKLAD (
    P_BONUS_ID TYPE OF DOM_KEY,
    P_SEL_SKLAD TYPE OF DOM_CHAR_100)
AS
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_KEY; 
BEGIN 
     FOR EXECUTE STATEMENT 
         'SELECT SKLAD.ID 
         FROM sklad 
         WHERE SKLAD.ID IN ('||:P_SEL_SKLAD||')' 
     INTO :L_SKLAD_ID 
 
     DO 
     BEGIN 
          UPDATE OR INSERT INTO BONUS_CONFIG_SKLAD(BONUS_ID, SKLAD_ID) 
          VALUES(:P_BONUS_ID, :L_SKLAD_ID) 
          MATCHING(BONUS_ID, SKLAD_ID); 
     END 
END^


ALTER PROCEDURE ADD_UPDATE_FAK_FIRMI_DATA (
    FAK_ID INTEGER,
    NAME_FAK TYPE OF DOM_CHAR_100,
    ADDRES DOM_CHAR_100,
    MOL VARCHAR(30),
    IDNOM VARCHAR(13),
    REG_DDS CHAR(1),
    IDNOMDDS VARCHAR(15),
    PLACE_NAME VARCHAR(30),
    KLI_NAME VARCHAR(100),
    DEF_BANKA INTEGER,
    EO_ID_TPD VARCHAR(20),
    GLN DOM_CHAR_20)
AS
declare variable L_FIRMI_FAK_ID integer; 
BEGIN 
    SELECT 
        FIRMI_FAK_DATA.FAK_ID 
    FROM 
        FIRMI_FAK_DATA 
    WHERE 
        FIRMI_FAK_DATA.FAK_ID =:FAK_ID 
    INTO :L_FIRMI_FAK_ID; 
 
    IF (L_FIRMI_FAK_ID IS NULL ) THEN 
    BEGIN 
        INSERT INTO FIRMI_FAK_DATA(NAME_FAK,ADDRES,MOL,IDNOM,REG_DDS,IDNOMDDS,PLACE_NAME,FAK_ID,KLI_NAME,DEF_BANKA, EO_ID_TPD, GLN) 
        VALUES(:NAME_FAK,:ADDRES,:MOL,:IDNOM,:REG_DDS,:IDNOMDDS,:PLACE_NAME,:FAK_ID,:KLI_NAME,:DEF_BANKA, :EO_ID_TPD, :GLN); 
    END 
    ELSE 
    BEGIN 
        UPDATE FIRMI_FAK_DATA 
        SET NAME_FAK=:NAME_FAK, 
        ADDRES=:ADDRES, 
        MOL=:MOL, 
        IDNOM=:IDNOM, 
        REG_DDS=:REG_DDS, 
        IDNOMDDS=:IDNOMDDS, 
        PLACE_NAME=:PLACE_NAME, 
        FAK_ID=:FAK_ID, 
        KLI_NAME=:KLI_NAME, 
        DEF_BANKA=:DEF_BANKA, 
        EO_ID_TPD=:EO_ID_TPD, 
        GLN = :GLN 
    WHERE 
        FIRMI_FAK_DATA.FAK_ID=:FAK_ID; 
    END 
 
END^


ALTER PROCEDURE ADD_UPDATE_FAK_PADEJ (
    OPR_ID INTEGER,
    DATA_PADEJ DATE)
AS
DECLARE VARIABLE L_PADEJ_ID INTEGER; 
BEGIN 
    L_PADEJ_ID = 0; 
    SELECT 
        OPR_PADEJ.ID 
    FROM OPR_PADEJ 
    WHERE OPR_PADEJ.OPR_ID =:OPR_ID 
    INTO :L_PADEJ_ID; 
 
    if (L_PADEJ_ID <> 0) then 
        UPDATE OPR_PADEJ SET OPR_PADEJ.DATA_PADEJ =:DATA_PADEJ 
        WHERE OPR_PADEJ.OPR_ID=:OPR_ID; 
    ELSE 
        INSERT INTO OPR_PADEJ (OPR_ID,DATA_PADEJ) 
        VALUES (:OPR_ID,:DATA_PADEJ); 
END^


ALTER PROCEDURE ADD_UPDATE_KLI_FIRMA_NODE (
    P_KLI_ID INTEGER,
    P_FIRMA_ID INTEGER,
    P_INVOICE SMALLINT,
    P_INVOICE_ENGL SMALLINT)
AS
DECLARE VARIABLE L_NODE_ID INTEGER; 
BEGIN 
    SELECT 
        KLI_FIRMA_NODE.ID 
    FROM 
        KLI_FIRMA_NODE 
    WHERE 
        KLI_FIRMA_NODE.KLI_ID =:P_KLI_ID AND KLI_FIRMA_NODE.FIRMA_ID =:P_FIRMA_ID 
    INTO :L_NODE_ID; 
 
    IF (L_NODE_ID IS NULL) THEN 
    BEGIN 
        INSERT INTO KLI_FIRMA_NODE(KLI_ID,FIRMA_ID,INVOICE,INVOICE_ENGL) 
        VALUES (:P_KLI_ID,:P_FIRMA_ID,:P_INVOICE,:P_INVOICE_ENGL); 
    END 
    ELSE 
    BEGIN 
        UPDATE 
            KLI_FIRMA_NODE 
        SET 
            KLI_FIRMA_NODE.INVOICE      =:P_INVOICE, 
            KLI_FIRMA_NODE.INVOICE_ENGL =:P_INVOICE_ENGL 
        WHERE 
            KLI_FIRMA_NODE.ID =:L_NODE_ID; 
 
    END 
 
END^


ALTER PROCEDURE ADD_UPDATE_KLI_PRAGOVE (
    SUMA DOUBLE PRECISION,
    NOM_PROD INTEGER,
    KLI_ID INTEGER,
    UPDATE_SUMA INTEGER,
    UPDATE_BR_PROD INTEGER)
AS
declare variable l_kli_pragove integer; 
BEGIN 
 l_kli_pragove = 0; 
 select kli_pragove.id 
  from kli_pragove 
  WHERE KLI_PRAGOVE.kli_id =: kli_id 
 
 into :l_kli_pragove; 
 
if (l_kli_pragove <> 0) then 
 BEGIN 
 if (update_suma = 1) then 
  BEGIN 
  update kli_pragove set 
   SUMA =:SUMA 
  WHERE kli_pragove.kli_id =:kli_id; 
  END 
 if (update_br_prod = 1) then 
  BEGIN 
  update kli_pragove set 
   nom_prod =:nom_prod 
  WHERE kli_pragove.kli_id =:kli_id; 
  END 
END 
ELSE 
 begin 
   insert into kli_pragove (kli_id,nom_prod,suma) 
   values (:kli_id,:nom_prod,:suma); 
 end 
end^


ALTER PROCEDURE ADD_VISIT_EL (
    P_VISIT_OPR_ID TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY,
    P_VISIT_TYPE_ID TYPE OF DOM_KEY,
    P_SYNCH_TIME TYPE OF DOM_DATE_TIME)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN 
    INSERT INTO VISIT_EL(VISIT_OPR_ID, OPR_ID, VISIT_TYPE_ID, SYNCH_TIME) 
    VALUES(:P_VISIT_OPR_ID, :P_OPR_ID, :P_VISIT_TYPE_ID, :P_SYNCH_TIME) 
    RETURNING(ID) INTO :R_ID; 
END^


ALTER PROCEDURE ANNUL_IN_EL_PRODUCTION (
    P_SIMPLE_ID INTEGER,
    P_OUT_OPR_ID INTEGER)
AS
DECLARE VARIABLE L_IN_OPR_ID INTEGER;
BEGIN  
/*    SELECT
        PRODUCTION.OPR_IN_ID 
    FROM  
        PRODUCTION  
    WHERE  
        PRODUCTION.OPR_OUT_ID = :P_OUT_OPR_ID  
    INTO  
        :L_IN_OPR_ID;  
  
    DELETE FROM OPR_RAZPAD_NODE 
    WHERE  
    IN_EL_ID IN  (  
        SELECT  
            IN_EL.ID  
        FROM  
            IN_EL  
        WHERE  
            IN_EL.SIMPLE_ID = :P_SIMPLE_ID  
            AND IN_EL.OPR_ID = :L_IN_OPR_ID);  
  
    DELETE FROM PARTIDA_EL_NODE  
    WHERE  
    IN_EL_ID IN  (  
        SELECT  
            IN_EL.ID  
        FROM  
            IN_EL  
        WHERE  
            IN_EL.SIMPLE_ID = :P_SIMPLE_ID  
            AND IN_EL.OPR_ID = :L_IN_OPR_ID);  
  
    DELETE FROM PARTIDA_NAL  
    WHERE  
    IN_EL_ID IN  (  
        SELECT  
            IN_EL.ID  
        FROM  
            IN_EL  
        WHERE  
            IN_EL.SIMPLE_ID = :P_SIMPLE_ID  
            AND IN_EL.OPR_ID = :L_IN_OPR_ID);  
  
    DELETE FROM IN_EL_RAZ_NODE 
    WHERE  
    IN_EL_ID IN  (  
        SELECT  
            IN_EL.ID  
        FROM  
            IN_EL  
        WHERE  
            IN_EL.SIMPLE_ID = :P_SIMPLE_ID  
            AND IN_EL.OPR_ID = :L_IN_OPR_ID);  
  
    DELETE FROM IN_EL  
    WHERE  
    IN_EL.SIMPLE_ID = :P_SIMPLE_ID  
    AND IN_EL.OPR_ID = :L_IN_OPR_ID;  
*/
END^


ALTER PROCEDURE ANNUL_KI (
    P_OPR_KI_ID INTEGER,
    P_IP INTEGER,
    P_USER_ID INTEGER,
    P_FLAG_FKT SMALLINT)
AS
declare variable L_OPR_KI_SKLAD_ID integer; 
declare variable L_IN_EL_ID integer; 
declare variable L_SKLAD_ID integer; 
declare variable L_ANNUL_KI_SKLAD_OPR_ID integer; 
declare variable L_KLI_ID integer; 
declare variable L_SUMA double precision; 
declare variable L_NOMEANING integer; 
declare variable L_PROD_OPR_ID integer; 
declare variable L_ANNUL_OPR_TIP smallint; 
BEGIN 
    FOR SELECT 
        KI_NODE.SUB_KI_OPR_ID, 
        OPR.SKLAD_ID, 
        OPR.KLI_ID, 
        OPR.SUMA, 
        OPR.OPR_TIP + 100 
 
    FROM 
        KI_NODE INNER JOIN OPR ON OPR.ID = KI_NODE.SUB_KI_OPR_ID AND KI_NODE.KI_OPR_ID = :P_OPR_KI_ID 
    WHERE 
        EXISTS (SELECT IN_EL.ID FROM IN_EL WHERE IN_EL.OPR_ID = KI_NODE.SUB_KI_OPR_ID 
        AND IN_EL.IS_F = :P_FLAG_FKT) 
 
    UNION 
 
    SELECT 
        RPR.OPR_RET_PROD_ID, 
        OPR.SKLAD_ID, 
        OPR.KLI_ID, 
        OPR.SUMA, 
        OPR.OPR_TIP + 100 
    FROM 
        RET_PROD_RET_FAK_PROD_KI_NODE RPR INNER JOIN OPR ON OPR.ID = RPR.OPR_RET_PROD_ID 
        AND RPR.OPR_RET_FAK_PROD_KI_ID = :P_OPR_KI_ID 
    WHERE 
        EXISTS (SELECT IN_EL.ID FROM IN_EL WHERE IN_EL.OPR_ID = RPR.OPR_RET_PROD_ID 
        AND IN_EL.IS_F = :P_FLAG_FKT) 
    INTO 
        :L_OPR_KI_SKLAD_ID,:L_SKLAD_ID,:L_KLI_ID,:L_SUMA,:L_ANNUL_OPR_TIP 
    DO BEGIN 
 
        EXECUTE PROCEDURE  ADD_OPR(:L_ANNUL_OPR_TIP,CURRENT_DATE,:P_IP,:P_USER_ID,:L_SKLAD_ID,:L_KLI_ID,:L_SUMA) 
        RETURNING_VALUES :L_ANNUL_KI_SKLAD_OPR_ID; 
 
        EXECUTE PROCEDURE ADD_OPR_ANUL(:L_ANNUL_KI_SKLAD_OPR_ID, :L_OPR_KI_SKLAD_ID) 
        RETURNING_VALUES :L_NOMEANING; 
 
        FOR SELECT 
            S2.OPR_ID 
        FROM 
            OPR_PAYMENT_NODE INNER JOIN SUMI S1 ON S1.ID = OPR_PAYMENT_NODE.PAYMENT_ID 
            INNER JOIN SUMI S2 ON S2.ID = OPR_PAYMENT_NODE.OPR_ID 
            INNER JOIN OUT ON OUT.OPR_ID = S2.OPR_ID 
        WHERE 
            S1.OPR_ID = :P_OPR_KI_ID 
        INTO 
            :L_PROD_OPR_ID 
        DO BEGIN 
            UPDATE OUT SET OUT.PAY_TIP = 1 WHERE OUT.OPR_ID = :L_PROD_OPR_ID; 
        END 
 
        DELETE FROM OPR_SUMI WHERE OPR_SUMI.OPR_ID = :L_OPR_KI_SKLAD_ID; 
 
        DELETE FROM SUMI WHERE SUMI.OPR_ID = :P_OPR_KI_ID; 
 
        --DELETE FROM KI_NODE WHERE KI_OPR_ID = :P_OPR_KI_ID; 
        --DELETE FROM RET_PROD_RET_FAK_PROD_KI_NODE WHERE OPR_RET_FAK_PROD_KI_ID = :P_OPR_KI_ID; 
 
        FOR SELECT 
            IN_EL.ID 
        FROM 
            IN_EL 
        WHERE 
            IN_EL.OPR_ID = :L_OPR_KI_SKLAD_ID 
        INTO 
            :L_IN_EL_ID 
        DO BEGIN 
            INSERT INTO OLD_IN_EL(OPR_ID,SIMPLE_ID,SUMA_FR,SUMA_SR,KOL) 
            SELECT 
                CAST(:L_ANNUL_KI_SKLAD_OPR_ID AS INTEGER), 
                IN_EL.SIMPLE_ID, 
                IN_EL.SUMA_FR, 
                IN_EL.SUMA_SR, 
                IN_EL.KOL 
            FROM 
                IN_EL 
            WHERE 
                IN_EL.ID = :L_IN_EL_ID; 
 
            EXECUTE PROCEDURE DEL_IN_EL_FROM_INV(L_IN_EL_ID); 
        END 
    END 
END^


ALTER PROCEDURE ANNUL_OPR_RETURN_KI_DOST_SUMA (
    P_OPR_RET_KI_DOST_SUMA_ID INTEGER,
    P_IS_FKT INTEGER)
AS
DECLARE VARIABLE L_IN_EL_ID INTEGER; 
DECLARE VARIABLE L_IN_EL_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
DECLARE VARIABLE L_SKLAD_ID INTEGER; 
DECLARE VARIABLE L_PARTIDA_ID INTEGER; 
DECLARE VARIABLE L_FKT_SKLAD_ID INTEGER; 
DECLARE VARIABLE L_FKT_IN_EL_ID INTEGER; 
DECLARE VARIABLE L_RSN CHAR(1); 
BEGIN 
    FOR SELECT 
        KI_DOST_SUMA_EL.IN_EL_ID, 
        KI_DOST_SUMA_EL.SUMA, 
        KI_DOST_SUMA_EL.SIMPLE_ID , 
        SIMPLE.RSN 
    FROM 
        KI_DOST_SUMA_EL INNER JOIN IN_EL ON IN_EL.ID = KI_DOST_SUMA_EL.IN_EL_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
    WHERE 
        KI_DOST_SUMA_EL.OPR_ID = :P_OPR_RET_KI_DOST_SUMA_ID 
        AND IN_EL.IS_F = :P_IS_FKT 
    INTO 
        :L_IN_EL_ID, :L_IN_EL_SUMA, :L_SIMPLE_ID, :L_RSN 
    DO BEGIN 
 
        IF (L_RSN = '1') THEN BEGIN 
            EXECUTE PROCEDURE INC_SUMA_KI_DOST(L_IN_EL_ID,L_IN_EL_SUMA); 
        END 
        ELSE BEGIN 
 
            SELECT 
                PIN.PARTIDA_NODE_ID AS PARTIDA_ID 
            FROM 
                PARTIDA_IN_EL_NODE PIN INNER JOIN PARTIDA_EL_NODE PEN ON PIN.PARTIDA_NODE_ID = PEN.ID 
            WHERE 
                PIN.IN_EL_ID = :L_IN_EL_ID 
            INTO 
                :L_PARTIDA_ID; 
 
            UPDATE PARTIDA_EL_NODE SET 
            PARTIDA_EL_NODE.SUMA_FR = PARTIDA_EL_NODE.SUMA_FR + :L_IN_EL_SUMA, 
            PARTIDA_EL_NODE.SUMA_SR = PARTIDA_EL_NODE.SUMA_SR + :L_IN_EL_SUMA 
            WHERE 
            PARTIDA_EL_NODE.ID = :L_PARTIDA_ID; 
        END 
    END 
END^


ALTER PROCEDURE ANNUL_OUT_EL_PRODUCTION (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER)
AS
BEGIN  
  
    DELETE FROM OPR_RAZPAD_NODE  
    WHERE OPR_RAZPAD_NODE.OUT_EL_ID IN (  
        SELECT  
            OUT_EL.ID  
        FROM  
            OUT_EL  
        WHERE  
            OUT_EL.OPR_ID = :P_OPR_ID  
            AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID);  
  
    DELETE FROM OUT_EL_RAZ_NODE  
    WHERE OUT_EL_RAZ_NODE.OUT_EL_ID IN (  
        SELECT  
            OUT_EL.ID  
        FROM  
            OUT_EL  
        WHERE  
            OUT_EL.OPR_ID = :P_OPR_ID  
            AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID);  
  
    DELETE FROM PARTIDA_OUT_EL_NODE  
    WHERE PARTIDA_OUT_EL_NODE.OUT_EL_ID IN (  
        SELECT  
            OUT_EL.ID  
        FROM  
            OUT_EL  
        WHERE  
            OUT_EL.OPR_ID = :P_OPR_ID  
            AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID);  
  
  
    DELETE FROM IZL  
    WHERE IZL.OUT_EL_ID IN (  
        SELECT  
            OUT_EL.ID  
        FROM  
            OUT_EL  
        WHERE  
            OUT_EL.OPR_ID = :P_OPR_ID  
            AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID);  
  
    DELETE FROM OUT_EL  
    WHERE  
    OUT_EL.OPR_ID = :P_OPR_ID  
    AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID;  
END^


ALTER PROCEDURE ANNUL_OUT_SN_MOVE (
    P_OPR_OUT_ID INTEGER,
    P_SIMPLE_ID INTEGER)
AS
DECLARE VARIABLE L_OPR_IN_ID INTEGER;
DECLARE VARIABLE L_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_SKLAD_OUT_ID SMALLINT;
DECLARE VARIABLE L_SKLAD_IN_ID SMALLINT;
DECLARE VARIABLE L_OLD_IN_EL_ID INTEGER;
DECLARE VARIABLE L_ELEMENT_ID INTEGER;
DECLARE VARIABLE L_NEW_IN_EL_ID INTEGER;
BEGIN 
/*
    SELECT 
        OPR1.SKLAD_ID, 
        OPR2.SKLAD_ID, 
        OPR2.ID 
    FROM 
        OPR OPR1 INNER JOIN MOVE ON OPR1.ID = :P_OPR_OUT_ID AND MOVE.OPR_OUT_ID = OPR1.ID 
        INNER JOIN OPR OPR2 ON OPR2.ID = MOVE.OPR_IN_ID 
    INTO 
        :L_SKLAD_OUT_ID,:L_SKLAD_IN_ID,:L_OPR_IN_ID; 
 
    SELECT 
        SUM(OUT_EL.KOL), 
        SUM(OUT_EL.SUMA_SR), 
        SUM(OUT_EL.SUMA_FR) 
    FROM 
        OUT_EL 
    WHERE 
        OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
        AND OUT_EL.OPR_ID = :P_OPR_OUT_ID 
    INTO 
        :L_KOL,:L_SUMA_SR,:L_SUMA_FR; 
 
    UPDATE NAL SET 
    KOL_NAL = ROUND5(KOL_NAL - :L_KOL), 
    SUMA = ROUNDD(SUMA - :L_SUMA_SR), 
    SUMA_FR = ROUNDD(SUMA_FR - :L_SUMA_FR) 
    WHERE SKLAD_ID = :L_SKLAD_IN_ID AND SIMPLE_ID = :P_SIMPLE_ID; 
 
    UPDATE NAL SET 
    KOL_NAL = ROUND5(KOL_NAL + :L_KOL), 
    SUMA = ROUNDD(SUMA + :L_SUMA_SR), 
    SUMA_FR = ROUNDD(SUMA_FR + :L_SUMA_FR) 
    WHERE SKLAD_ID = :L_SKLAD_OUT_ID AND SIMPLE_ID = :P_SIMPLE_ID; 
 
    FOR SELECT 
        PEN.IN_EL_ID, 
        PEN.ELEMENT_ID 
    FROM 
        PARTIDA_EL_NODE PEN INNER JOIN IN_EL ON PEN.OPR_ID = :L_OPR_IN_ID AND IN_EL.ID = PEN.IN_EL_ID AND 
        IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
    INTO 
        :L_OLD_IN_EL_ID,:L_ELEMENT_ID 
    DO BEGIN 
        SELECT 
            PARTIDA_EL_NODE.IN_EL_ID 
        FROM 
            PARTIDA_EL_NODE 
        WHERE 
            PARTIDA_EL_NODE.ELEMENT_ID = :L_ELEMENT_ID 
            AND PARTIDA_EL_NODE.OPR_ID  = :P_OPR_OUT_ID 
        INTO 
            :L_NEW_IN_EL_ID; 
 
        UPDATE PARTIDA_NAL SET IN_EL_ID = :L_NEW_IN_EL_ID 
        WHERE ELEMENT_ID = :L_ELEMENT_ID 
        AND IN_EL_ID =:L_OLD_IN_EL_ID; 
 
        DELETE FROM PARTIDA_EL_NODE 
        WHERE IN_EL_ID = :L_OLD_IN_EL_ID 
        AND ELEMENT_ID = :L_ELEMENT_ID; 
 
        DELETE FROM PARTIDA_EL_NODE 
        WHERE IN_EL_ID = :L_NEW_IN_EL_ID 
        AND ELEMENT_ID = :L_ELEMENT_ID 
        AND OPR_ID = :P_OPR_OUT_ID; 
    END 
 
    UPDATE OUT_EL SET 
    KOL = 0.00, 
    SUMA_SR = 0.00, 
    SUMA_FR = 0.00 
    WHERE 
    SIMPLE_ID = :P_SIMPLE_ID 
    AND OPR_ID = :P_OPR_OUT_ID; 
 
    UPDATE IN_EL SET 
    KOL = 0.00, 
    SUMA = 0.00 
    WHERE 
    SIMPLE_ID = :P_SIMPLE_ID 
    AND OPR_ID = :L_OPR_IN_ID; 
 
    DELETE FROM OUT_EL WHERE 
    SIMPLE_ID = :P_SIMPLE_ID 
    AND OPR_ID = :P_OPR_OUT_ID; 
 
    DELETE FROM IN_EL WHERE 
    SIMPLE_ID = :P_SIMPLE_ID 
    AND OPR_ID = :L_OPR_IN_ID; */
END^


ALTER PROCEDURE ANNUL_WAITING_OPR (
    P_TASK_ID INTEGER,
    P_ANNUL_OPR_ID INTEGER)
AS
declare variable L_DATE date; 
declare variable L_TEMPLATE_ID integer; 
declare variable L_EL_ID integer; 
BEGIN 
  INSERT INTO OLD_TASKS(TASK_ID, OPR_ID) VALUES (:P_TASK_ID, :P_ANNUL_OPR_ID); 
 
  UPDATE TASKS SET TASKS.STATUS_TASKS = -1 WHERE TASKS.ID = :P_TASK_ID; 
 
  SELECT 
    OPR_TEMPLATE_TASK_NODE.TEMPLATE_ID 
  FROM 
    OPR_TEMPLATE_TASK_NODE 
  WHERE 
    OPR_TEMPLATE_TASK_NODE.TASK_ID = :P_TASK_ID 
  INTO :L_TEMPLATE_ID; 
 
 
  IF ((SELECT FIRST 1 TASKS.ID FROM TASKS INNER JOIN TASKS_EL ON TASKS_EL.TASKS_ID = TASKS.ID WHERE TASKS.ID = :P_TASK_ID) IS NULL) THEN 
  BEGIN 
    SELECT 
      TASKS.DT 
    FROM 
      TASKS 
    WHERE 
      TASKS.STATUS_TASKS > -1 AND 
      TASKS.ID = ( 
         SELECT 
           MAX(OPR_TEMPLATE_TASK_NODE.TASK_ID) 
         FROM 
           OPR_TEMPLATE_TASK_NODE 
           INNER JOIN TASKS ON OPR_TEMPLATE_TASK_NODE.TASK_ID = TASKS.ID 
         WHERE 
           TASKS.STATUS_TASKS > -1 AND 
           OPR_TEMPLATE_TASK_NODE.TEMPLATE_ID = :L_TEMPLATE_ID) 
    INTO :L_DATE; 
 
    IF (L_DATE IS NULL) THEN 
      L_DATE = '31.01.2000'; 
 
    UPDATE OPR_TEMPLATE SET OPR_TEMPLATE.LAST_GEN_DATE = :L_DATE WHERE OPR_TEMPLATE.ID = :L_TEMPLATE_ID; 
  END 
  ELSE BEGIN 
    /* NAMIRANE NA LAST_GEN_DATE ZA TRAKERI */ 
    /*--------*/ 
    FOR SELECT 
      TASKS_EL.EL_ID 
    FROM 
      TASKS_EL 
    WHERE 
      TASKS_EL.TASKS_ID = :P_TASK_ID 
    INTO 
      :L_EL_ID 
    DO BEGIN 
      SELECT FIRST 1 
        TASKS_EL.LAST_GEN_DATE 
      FROM 
        TASKS_EL 
        INNER JOIN TASKS ON TASKS.ID = TASKS_EL.TASKS_ID 
      WHERE 
        TASKS.STATUS_TASKS > -1 AND 
        TASKS_EL.EL_ID = :L_EL_ID 
      ORDER BY TASKS_EL.ID DESC 
      INTO :L_DATE; 
 
      IF (L_DATE IS NULL) THEN 
        L_DATE = '31.01.2000'; 
 
      UPDATE SLEDI_TEMPLATE_EL SET SLEDI_TEMPLATE_EL.LAST_GEN_DATE = :L_DATE WHERE SLEDI_TEMPLATE_EL.ID = :L_EL_ID; 
    END 
  END 
END^


ALTER PROCEDURE ANUL_AMBALAJ (
    P_OPR_ID INTEGER,
    P_IP INTEGER,
    P_EDITING_USER INTEGER)
AS
DECLARE VARIABLE L_OPR_ID INTEGER; 
DECLARE VARIABLE L_KLI_ID INTEGER; 
DECLARE VARIABLE L_SKLAD_ID INTEGER; 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_OPR_TIP SMALLINT; 
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
BEGIN 
    FOR SELECT 
        OPR.KLI_ID, 
        OPR.SKLAD_ID, 
        OPR.ID, 
        OPR.OPR_TIP 
    FROM 
        OPR INNER JOIN OPR_AMBALAJ_NODE ON OPR.ID = OPR_AMBALAJ_NODE.OPR_AMBALAJ_ID 
    WHERE 
        OPR_AMBALAJ_NODE.OPR_PROD_ID = :P_OPR_ID 
        AND OPR.OPR_TIP IN (20,21) 
    INTO 
        :L_KLI_ID,:L_SKLAD_ID,:L_OPR_ID,:L_OPR_TIP 
    DO BEGIN 
        EXECUTE PROCEDURE ADD_OPR(100 + :L_OPR_TIP,CURRENT_DATE,:P_IP,:P_EDITING_USER,:L_SKLAD_ID,:L_KLI_ID,0.00) 
        RETURNING_VALUES :L_SKLAD_ID; 
 
        EXECUTE PROCEDURE ADD_OPR_ANUL(:L_SKLAD_ID,:L_OPR_ID) 
        RETURNING_VALUES :L_SKLAD_ID; 
 
        FOR SELECT 
            AMBALAJ_HISTORY.SIMPLE_ID, 
            AMBALAJ_HISTORY.KOL 
        FROM 
            AMBALAJ_HISTORY 
        WHERE 
            AMBALAJ_HISTORY.OPR_ID = :L_OPR_ID 
        INTO 
            :L_SIMPLE_ID,:L_KOL 
        DO BEGIN 
            IF (L_OPR_TIP = 20) THEN 
                UPDATE AMBALAJ SET 
                AMBALAJ.KOL = ROUND5(AMBALAJ.KOL - :L_KOL) 
                WHERE AMBALAJ.KLI_ID = :L_KLI_ID 
                AND AMBALAJ.SIMPLE_ID = :L_SIMPLE_ID; 
            ELSE IF (L_OPR_TIP = 21) THEN 
                UPDATE AMBALAJ SET 
                AMBALAJ.KOL = ROUND5(AMBALAJ.KOL + :L_KOL) 
                WHERE AMBALAJ.KLI_ID = :L_KLI_ID 
                AND AMBALAJ.SIMPLE_ID = :L_SIMPLE_ID; 
        END 
    END 
END^


ALTER PROCEDURE ANUL_PARI (
    P_PARI_ID INTEGER,
    P_EDITING_USER_ID INTEGER,
    P_IP INTEGER)
AS
DECLARE VARIABLE L_KASA_ID SMALLINT; 
DECLARE VARIABLE L_OBEKT_ID SMALLINT; 
DECLARE VARIABLE L_SUMA NUMERIC(10,2); 
DECLARE VARIABLE L_VALUTA_ID SMALLINT; 
DECLARE VARIABLE L_KURS DOUBLE PRECISION; 
DECLARE VARIABLE L_TIP SMALLINT; 
DECLARE VARIABLE L_GEN_OLD_PARI_EL_ID INTEGER; 
DECLARE VARIABLE L_ANUL_OPR_ID INTEGER; 
BEGIN 
/*V.4 ЗАПАЗВА СТАРИТЕ СТОЙНОСТИ НА КАСАТА В АРХИВНА ТАБЛИЦА 
P_PARI_ID - КОЙ РЕД ОТ ТАБЛИЦА PARI СЕ АНУЛИРА (P_PARI_ID = PARI.OPR_ID)*/ 
 
    FOR SELECT 
        PARI.KASA_ID, 
        PARI.OBEKT_ID, 
        PARI.SUMA, 
        PARI.VALUTA_ID, 
        PARI.KURS, 
        PARI.TIP 
    FROM 
        PARI 
    WHERE 
        PARI.OPR_ID = :P_PARI_ID 
    INTO 
        :L_KASA_ID, :L_OBEKT_ID, :L_SUMA, :L_VALUTA_ID,:L_KURS,:L_TIP 
    DO BEGIN 
        EXECUTE PROCEDURE ADD_OPR(110,CURRENT_DATE,P_IP,P_EDITING_USER_ID,NULL,NULL,L_SUMA) 
        RETURNING_VALUES :L_ANUL_OPR_ID; 
 
        EXECUTE PROCEDURE ADD_OPR_ANUL(L_ANUL_OPR_ID,P_PARI_ID) 
        RETURNING_VALUES :P_PARI_ID;/*ПОЛЗВАМ ТАЗИ ПРОМЕНЛИВА, ЗА ДА НЕ ДЕКЛАРИРАМ НОВА*/ 
 
        L_GEN_OLD_PARI_EL_ID = GEN_ID(GEN_OLD_PARI_EL_ID,1); 
   
        INSERT INTO OLD_PARI_EL (ID, OPR_ID, KASA_ID, OBEKT_ID, SUMA, VALUTA_ID, KURS, TIP) 
        VALUES(:L_GEN_OLD_PARI_EL_ID,:L_ANUL_OPR_ID,:L_KASA_ID,:L_OBEKT_ID,:L_SUMA,:L_VALUTA_ID,:L_KURS, :L_TIP); 
    END 
END^


ALTER PROCEDURE ANUL_PER_OTC (
    P_OPR_ID INTEGER,
    P_USER_ID INTEGER,
    P_IP INTEGER,
    P_EDITING_USER INTEGER,
    P_OBOB_KASI INTEGER)
AS
DECLARE VARIABLE L_PARI_ID INTEGER; 
DECLARE VARIABLE L_ANUL_OPR_ID INTEGER; 
DECLARE VARIABLE L_OPR_PER_OTC_ID INTEGER; 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_PREV_OTC INTEGER; 
BEGIN 
    /*V.2 ТАЗИ ПРОЦЕДУРА СЕ ВИКА САМО КОГАТО СЕ РЕДАКТИРА ОПЕРАЦИЯ, ЗА КОЯТО 
    ДАДЕНИЯ ОПЕРАТОР Е НАПРАВИЛ ПЕРСОНАЛЕН ОТЧЕТ И ВСЕ ОЩЕ НЕ Е МИНАТА ГЛОБАЛЕН ОТЧЕТ. 
    ОПЕРАТОРА МОЖЕ ДА Е СТАРИЯ ИЛИ НОВИЯ ЗА РЕДАКТИРАНАТА ОПЕРАЦИЯ. И В ДВАТА СЛУЧАЯ 
    ЩЕ МУ СЕ ВЪЗСТАНОВЯТ КАСИТЕ И ЩЕ СЕ АНУЛИРА НЕГОВИЯ ПЕРСОНАЛЕН ОТЧЕТ. СЪЩО ТАКА 
    СТАТУСА МУ В "USER".IS_WORKED ЩЕ СТАНЕ 1. */ 
SELECT 
        COALESCE(MAX(OPR.ID),0) 
    FROM 
        OPR 
    WHERE 
        OPR.OPR_TIP = 17 
        AND OPR.USER_ID = :P_USER_ID 
        AND OPR.ID < :P_OPR_ID 
        AND NOT EXISTS(SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
    INTO 
        :L_PREV_OTC; 
 
    FOR SELECT 
        OPR.ID 
    FROM 
        OPR 
    WHERE 
        OPR.OPR_TIP = 17 
        AND OPR.ID > :P_OPR_ID 
        AND OPR.USER_ID = :P_USER_ID 
        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
    INTO 
        :L_OPR_PER_OTC_ID 
    DO BEGIN 
        /*АНУЛИРАМ ВСИЧКИ ОТЧЕТИ ЗА ТОЗИ ОПЕРАТОР, НАПРАВЕНИ СЛЕД РЕДАКТИРАНАТА ОПЕРАЦИЯ*/ 
        EXECUTE PROCEDURE ADD_OPR(117,CURRENT_DATE,P_IP,P_EDITING_USER,NULL,NULL,NULL) 
        RETURNING_VALUES :L_ANUL_OPR_ID; 
 
        EXECUTE PROCEDURE ADD_OPR_ANUL(L_ANUL_OPR_ID,L_OPR_PER_OTC_ID) 
        RETURNING_VALUES :L_ANUL_OPR_ID; 
 
        /*ОПЕРАТОРА, ЧИЙТО ОТЧЕТ СЕ НУЛИРА СЕ КАЗВА, ЧЕ Е С НЕАНУЛИРАН ОТЧЕТ И ИМА ИЗВЪРШЕНИ ОПЕРАЦИИ*/ 
        SELECT 
            COUNT(PARI_SKLOPR_NODE.ID) 
        FROM 
            PARI_SKLOPR_NODE INNER JOIN OPR ON (OPR.USER_ID = :P_USER_ID AND OPR.ID = PARI_SKLOPR_NODE.OPR_ID) 
        WHERE 
            PARI_SKLOPR_NODE.OPR_ID > :L_PREV_OTC 
            AND PARI_SKLOPR_NODE.OPR_OTC_ID IS NULL 
        INTO 
            :L_PARI_ID; 
 
        IF ( L_PARI_ID > 1) THEN 
            UPDATE "USER" SET "USER".IS_WORKED = 1 WHERE "USER".ID = :P_USER_ID; 
        ELSE 
            UPDATE "USER" SET "USER".IS_WORKED = 0 WHERE "USER".ID = :P_USER_ID; 
 
            /*НАМИРАМ ОПЕРАЦИЙТЕ КАСА ВЪРЗАНИ С ОПЕРАЦИИ ЗА ТОЗИ ОПЕРАТОР В ТАБЛИЦА PARI_SKLOPR_NODE. 
            ЩЕ ТЪРСЯ В ТЕЗИ РЕДОВЕ, ЗА КОЙТО ПОЛЕТО OPR_OTC_ID E NULL - ЗАЩОТО ТО СЕ ЗАПЪЛВА ПРИ ОТЧЕТ 
            ПЕРСОНАЛНИТЕ ОТЧЕТИ ГО ОСТАВЯТ ПРАЗНО - ТЕЗИ ОПЕРАЦИИ КАСА ЩЕ ГИ АНУЛИРАМ*/ 
 
        IF (1 = :P_OBOB_KASI) THEN BEGIN 
 
          FOR SELECT 
              PARI_SKLOPR_NODE.OPR_PARI_ID, 
              SUM(PARI_SKLOPR_NODE.SUMA) 
          FROM 
              PARI_SKLOPR_NODE INNER JOIN OPR ON (OPR.ID = PARI_SKLOPR_NODE.OPR_ID AND OPR.USER_ID = :P_USER_ID) 
          WHERE 
              PARI_SKLOPR_NODE.OPR_ID > :L_PREV_OTC 
              AND PARI_SKLOPR_NODE.OPR_OTC_ID IS NULL 
          GROUP BY 
              PARI_SKLOPR_NODE.OPR_PARI_ID 
          INTO 
              :L_PARI_ID,:L_SUMA 
          DO BEGIN 
 
            /*АНУЛИРАМ ОПЕРАЦИЯТА КАСА*/ 
            EXECUTE PROCEDURE ANUL_PARI(L_PARI_ID,P_EDITING_USER,P_IP); 
 
            /*ИЗТРИВАМ ЗАПИСА ОТ ПАРИ СЛЕД КАТО Е БИЛ ПРЕХВЪРЛЕН В ТАБЛИЦАТА С 
            АНУЛИРАНИ КАСИ*/ 
            DELETE FROM PARI WHERE PARI.OPR_ID = :L_PARI_ID; 
 
            /*И КАЗВАМ НА СЪОТВЕТНИТЕ ЗАПИСИ В ТЕМПОРАЛНАТА КАСА, КОИТО СА ИЗПОЛЗВАНИ ЗА АНУЛИРАНАТА КАСА, 
            ЧЕ ВСЕ ОЩЕ НЕ СА ОТЧЕТЕНИ*/ 
            UPDATE PARI_TMP SET PARI_TMP.IS_USED = 0 WHERE PARI_TMP.OPR_ID IN 
            (SELECT PARI_SKLOPR_NODE.OPR_ID FROM PARI_SKLOPR_NODE WHERE PARI_SKLOPR_NODE.OPR_PARI_ID = :L_PARI_ID); 
 
            /*НАКРАЯ ИЗТРИВАМ ВРЪЗКА МЕЖДУ КАСА И ОПЕРАЦИЯ*/ 
            DELETE FROM PARI_SKLOPR_NODE WHERE PARI_SKLOPR_NODE.OPR_PARI_ID = :L_PARI_ID; 
          END 
        END 
    END 
END^


ALTER PROCEDURE ANUL_PER_OTC_FROM_OPR (
    P_USER_ID INTEGER,
    P_IP INTEGER,
    P_OBOB_KASI INTEGER)
AS
declare variable L_PARI_ID integer; 
declare variable L_ANUL_OPR_ID integer; 
declare variable L_OPR_PER_OTC_ID integer; 
declare variable L_SUMA double precision; 
declare variable L_PREV_OTC_ID integer; 
BEGIN 
 
    /*V.2 
    ТАЗИ ПРОЦЕДУРА СЕ ВИКА, КОГАТО ОПЕРАТОР С ПЕРСОНАЛЕН ОТЧЕТ Е ИЗВЪРШИЛ 
    НОВА ОПЕРАЦИЯ И ТРЯБВА ОТЧЕТА МУ ДА СЕ АНУЛИРА. ЩЕ НАМЕРЯ ПОСЛЕДНИЯ ОТЧЕТ ЗА 
    ОПЕРАТОРА - ЩЕ ГО АНУЛИРАМ, ЩЕ АНУЛИРАМ И ОПЕРАЦИЙТЕ КАСА ГЕНЕРИРАНИ С НЕГО, 
    СЪОТВЕТНИТЕ ЗАПИСИ В PARI_TMP ЩЕ СЕ ОБОЗНАЧАТ ЗА НЕИЗПОЛЗВАНИ 
    */ 
 
    FOR SELECT 
        MAX(OPR.ID) /*ПОСЛЕДНИЯ НЕАНУЛИРАН ОТЧЕТ ЗА ОПЕРАТОРА*/ 
    FROM 
        OPR 
    WHERE 
        OPR.OPR_TIP = 17 
        AND OPR.USER_ID = :P_USER_ID 
        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
    INTO 
        :L_OPR_PER_OTC_ID 
    DO BEGIN 
        /*НАМИРАМ ПРЕДПОСЛЕДНИЯ ПЕРСОНАЛЕН ОТЧЕТ. САМО ЗА ОПЕРАЦИИ СЛЕД НЕГО 
        ЩЕ МАХНА ВРЪЗКАТА С КАСИ. ПО СТАРИ ОТЧЕТИ И ОПЕРАЦИИ, ВСЕ ОЩЕ НЕ ВЛЕЗЛИ В ГЛОБАЛАИЯ ОТЧЕТ НЯМА 
        ДА СЕ ПИПАТ*/ 
        SELECT 
            COALESCE(MAX(OPR.ID),0) 
        FROM 
            OPR 
        WHERE 
            OPR.OPR_TIP = 17 
            AND OPR.USER_ID = :P_USER_ID 
            AND OPR.ID < :L_OPR_PER_OTC_ID 
            AND NOT EXISTS(SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        INTO 
            :L_PREV_OTC_ID; 
 
        /*АНУЛИРАМ ОТЧЕТA ЗА ТОЗИ ОПЕРАТОР, НАПРАВЕН ПРЕДИ НОВАТА ОПЕРАЦИЯ*/ 
        EXECUTE PROCEDURE ADD_OPR(117,CURRENT_DATE,P_IP,P_USER_ID,NULL,NULL,NULL) 
        RETURNING_VALUES :L_ANUL_OPR_ID; 
 
        EXECUTE PROCEDURE ADD_OPR_ANUL(L_ANUL_OPR_ID,L_OPR_PER_OTC_ID) 
        RETURNING_VALUES :L_ANUL_OPR_ID; 
 
        /*ОПЕРАТОРА, ЧИЙТО ОТЧЕТ СЕ НУЛИРА СЕ КАЗВА, ЧЕ Е С НЕАНУЛИРАН ОТЧЕТ И ИМА ИЗВЪРШЕНИ ОПЕРАЦИИ*/ 
        SELECT 
            COUNT(PARI_SKLOPR_NODE.ID) 
        FROM 
            PARI_SKLOPR_NODE INNER JOIN OPR ON (OPR.USER_ID = :P_USER_ID AND OPR.ID = PARI_SKLOPR_NODE.OPR_ID 
            AND PARI_SKLOPR_NODE.OPR_ID > :L_PREV_OTC_ID) 
        WHERE 
            PARI_SKLOPR_NODE.OPR_OTC_ID IS NULL 
        INTO 
            :L_PARI_ID; 
 
        IF ( L_PARI_ID > 1) THEN 
            UPDATE "USER" SET "USER".IS_WORKED = 1 WHERE "USER".ID = :P_USER_ID; 
        ELSE 
            UPDATE "USER" SET "USER".IS_WORKED = 0 WHERE "USER".ID = :P_USER_ID; 
 
        /*НАМИРАМ ОПЕРАЦИЙТЕ КАСА ВЪРЗАНИ С ОПЕРАЦИИ ЗА ТОЗИ ОПЕРАТОР В ТАБЛИЦА PARI_SKLOPR_NODE. 
        ЩЕ ТЪРСЯ В ТЕЗИ РЕДОВЕ, ЗА КОЙТО ПОЛЕТО OPR_OTC_ID E NULL - ЗАЩОТО ТО СЕ ЗАПЪЛВА ПРИ ОТЧЕТ 
        ПЕРСОНАЛНИТЕ ОТЧЕТИ ГО ОСТАВЯТ ПРАЗНО - ТЕЗИ ОПЕРАЦИИ КАСА ЩЕ ГИ АНУЛИРАМ*/ 
 
        IF (1 = :P_OBOB_KASI) THEN BEGIN 
 
        FOR SELECT 
            PARI_SKLOPR_NODE.OPR_PARI_ID, 
            SUM(PARI_SKLOPR_NODE.SUMA) 
        FROM 
            PARI_SKLOPR_NODE INNER JOIN OPR ON (OPR.ID = PARI_SKLOPR_NODE.OPR_ID AND OPR.USER_ID = :P_USER_ID) 
        WHERE 
            PARI_SKLOPR_NODE.OPR_ID > :L_PREV_OTC_ID 
            AND PARI_SKLOPR_NODE.OPR_OTC_ID IS NULL 
        GROUP BY 
            PARI_SKLOPR_NODE.OPR_PARI_ID 
        INTO 
            :L_PARI_ID,:L_SUMA 
        DO BEGIN 
 
            /*АНУЛИРАМ ОПЕРАЦИЯТА КАСА*/ 
            EXECUTE PROCEDURE ANUL_PARI(L_PARI_ID,P_USER_ID,P_IP); 
 
            /*ИЗТРИВАМ ЗАПИСА ОТ ПАРИ СЛЕД КАТО Е БИЛ ПРЕХВЪРЛЕН В ТАБЛИЦАТА С 
            АНУЛИРАНИ КАСИ*/ 
            DELETE FROM PARI WHERE PARI.OPR_ID = :L_PARI_ID; 
 
            /*И КАЗВАМ НА СЪОТВЕТНИТЕ ЗАПИСИ В ТЕМПОРАЛНАТА КАСА, КОИТО СА ИЗПОЛЗВАНИ ЗА АНУЛИРАНАТА КАСА, 
            ЧЕ ВСЕ ОЩЕ НЕ СА ОТЧЕТЕНИ*/ 
            UPDATE PARI_TMP SET PARI_TMP.IS_USED = 0 WHERE PARI_TMP.OPR_ID IN 
            (SELECT PARI_SKLOPR_NODE.OPR_ID FROM PARI_SKLOPR_NODE WHERE PARI_SKLOPR_NODE.OPR_PARI_ID = :L_PARI_ID); 
 
            /*НАКРАЯ ИЗТРИВАМ ВРЪЗКА МЕЖДУ КАСА И ОПЕРАЦИЯ*/ 
            DELETE FROM PARI_SKLOPR_NODE WHERE PARI_SKLOPR_NODE.OPR_PARI_ID = :L_PARI_ID; 
 
            UPDATE "USER" SET "USER".IS_WORKED = 1 WHERE "USER".ID = :P_USER_ID; 
        END 
        END 
    END 
END^


ALTER PROCEDURE ANUL_PROD_DEL_OUTEL (
    P_OUT_EL_ID INTEGER)
AS
BEGIN
  UPDATE por_el
  SET out_el_id = NULL
  WHERE out_el_id = :p_out_el_id;

  DELETE FROM OUT_EL WHERE OUT_EL.ID = :p_out_el_id;
END^


ALTER PROCEDURE ANUL_PROD_SN (
    P_OUT_EL_ID INTEGER,
    P_FLAG_FKT SMALLINT,
    P_OLD_OUT_EL_ID INTEGER)
AS
DECLARE VARIABLE L_ELEMENT_ID INTEGER;
DECLARE VARIABLE L_IN_EL_ID INTEGER;
BEGIN 
    /*V.5*/

    FOR SELECT
        PN.ELEMENT_ID,
        PN.IN_EL_ID
    FROM 
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.PARTIDA_NODE_ID = PEN.ID
        INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID
    WHERE 
        PON.OUT_EL_ID = :P_OUT_EL_ID
    INTO 
        :L_ELEMENT_ID,:L_IN_EL_ID
    DO BEGIN 
        IF ((P_FLAG_FKT = 1) AND (P_OLD_OUT_EL_ID IS NOT NULL)) THEN BEGIN
            INSERT INTO OLD_OUT_EL_PE_NODE(OLD_OUT_EL_ID,PARTIDA_EL_ID,IN_EL_ID)
            VALUES (:P_OLD_OUT_EL_ID,:L_ELEMENT_ID,:L_IN_EL_ID);
        END 
    END 
END^


ALTER PROCEDURE BAUHAUS_IMPORT (
    P_SIMPLE_CODE DOM_CHAR_50,
    P_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    P_SIMPLE_NAME_SHORT TYPE OF DOM_CHAR_100,
    P_SIMPLE_NAME2 TYPE OF DOM_CHAR_100,
    P_BARCODE TYPE OF DOM_CHAR_15,
    P_BARCODE_KOL TYPE OF DOM_KOL,
    P_PRICE TYPE OF DOM_CENA,
    P_GRUPA_NAME TYPE OF DOM_CHAR_50,
    P_ME_NAME_LONG TYPE OF DOM_CHAR_15,
    P_ME_SHORT VARCHAR(2),
    P_FLAG_FIX_PRICE TYPE OF DOM_SMAL_INT)
AS
declare variable L_SIMPLE_ID type of DOM_KEY; 
declare variable L_SIMPLE_NAME type of DOM_CHAR_100; 
declare variable L_SIMPLE_NAME_SHORT type of DOM_CHAR_100; 
declare variable L_SIMPLE_NAME_2 type of DOM_CHAR_100; 
declare variable L_ME_ID type of DOM_KEY; 
declare variable L_SIMPLE_ME_ID type of DOM_KEY; 
declare variable L_BARCODE_ID type of DOM_KEY; 
declare variable L_BARCODE_KOL type of DOM_KEY; 
declare variable L_SEL_ID type of DOM_KEY; 
declare variable L_SIMPLE_SEL_ID type of DOM_KEY; 
declare variable L_PRICE_ID type of DOM_KEY; 
declare variable L_PRICE_PRICE type of DOM_CENA; 
BEGIN 
    SELECT 
        SIMPLE.ID, 
        SIMPLE.NAME, 
        SIMPLE.ME_ID, 
        SIMPLE.NAME_2, 
        SIMPLE.EXT1, 
        SIMPLE.DEF_SEL_ID, 
        CL.ID, 
        CL.CENA 
    FROM 
        SIMPLE LEFT JOIN CENOVA_LISTA_EL CL ON CL.SIMPLE_ID = SIMPLE.ID 
    WHERE 
        SIMPLE.CODE = :P_SIMPLE_CODE 
        AND CL.OPR_ID = 1 
    INTO 
        :L_SIMPLE_ID, :L_SIMPLE_NAME, :L_SIMPLE_ME_ID, :L_SIMPLE_NAME_2, :L_SIMPLE_NAME_SHORT, 
        :L_SIMPLE_SEL_ID, :L_PRICE_ID, :L_PRICE_PRICE; 
 
    SELECT 
        ME.ID 
    FROM 
        ME 
    WHERE 
        ME.NAME_LONG = :P_ME_NAME_LONG 
    INTO 
        :L_ME_ID; 
 
    IF (L_ME_ID IS NULL) THEN 
        INSERT INTO ME (NAME, NAME_LONG) 
        VALUES (:P_ME_SHORT, :P_ME_NAME_LONG) 
        RETURNING ID INTO :L_ME_ID; 
 
 
    SELECT 
        SELEKCIQ.ID 
    FROM 
        SELEKCIQ 
    WHERE 
        SELEKCIQ.NAME = :P_GRUPA_NAME 
    INTO 
        :L_SEL_ID; 
 
    IF (:L_SEL_ID IS NULL) THEN 
        INSERT INTO SELEKCIQ (NAME, TIP, ACTIVEN) 
        VALUES (:P_GRUPA_NAME,1,1) 
        RETURNING ID INTO :L_SEL_ID; 
 
 
    IF (L_SIMPLE_ID IS NULL) THEN BEGIN 
 
        INSERT INTO SIMPLE (NAME, NAME_2, CODE, ME_ID, "ACTIVE", ACTIVE_FAK, LOCK_CENA_PROD, DDS, USLUGA, 
                            RSN, FLAG_CHECK, AMBALAJ, ACTIVE_SCALE, GODNOST, DEF_SEL_ID, RAZPAD, FLAF_AMBALAJ, EXT1) 
        VALUES (:P_SIMPLE_NAME, :P_SIMPLE_NAME2, :P_SIMPLE_CODE, :L_ME_ID, '1', '1', IIF(:P_FLAG_FIX_PRICE = 1,0,1), 
                20, 0, 0, 1, 0, 0, 0, :L_SEL_ID, 0, '0', :P_SIMPLE_NAME_SHORT) 
        RETURNING ID INTO :L_SIMPLE_ID; 
 
        INSERT INTO BARCODE (SIMPLE_ID, BARCODE, KOL) 
        VALUES (:L_SIMPLE_ID, :P_BARCODE, :P_BARCODE_KOL); 
 
        INSERT INTO CENOVA_LISTA_EL (OPR_ID, SIMPLE_ID, TIP, PROCENT, CENA, TIP_OT_CENA) 
        VALUES (1, :L_SIMPLE_ID, 0, 0, :P_PRICE, 1); 
 
    END 
    ELSE BEGIN 
        IF ( (COALESCE(:L_SIMPLE_ME_ID,0) <> :L_ME_ID) 
            OR (COALESCE(:L_SIMPLE_SEL_ID, 0) <> :L_SEL_ID) 
            OR (:L_SIMPLE_NAME <> :P_SIMPLE_NAME) 
            OR (:L_SIMPLE_NAME_2 <> :P_SIMPLE_NAME2) 
            OR (:L_SIMPLE_NAME_SHORT <> :P_SIMPLE_NAME_SHORT)) 
        THEN 
            UPDATE SIMPLE SET 
                NAME = :P_SIMPLE_NAME, 
                NAME_2 = :P_SIMPLE_NAME2, 
                EXT1 = :P_SIMPLE_NAME_SHORT, 
                ME_ID = :L_ME_ID, 
                DEF_SEL_ID = :L_SEL_ID 
            WHERE 
                SIMPLE.ID = :L_SIMPLE_ID; 
 
        SELECT 
            BARCODE.ID, 
            BARCODE.KOL 
        FROM 
            BARCODE 
        WHERE 
            BARCODE.SIMPLE_ID = :L_SIMPLE_ID 
            AND BARCODE.BARCODE = :P_BARCODE 
        INTO 
            :L_BARCODE_ID,:L_BARCODE_KOL; 
 
        IF (:L_BARCODE_ID IS NULL) THEN 
            INSERT INTO BARCODE (SIMPLE_ID, BARCODE, KOL) 
            VALUES (:L_SIMPLE_ID, :P_BARCODE, :P_BARCODE_KOL); 
        ELSE IF (:L_BARCODE_KOL <> :P_BARCODE_KOL) THEN 
            UPDATE BARCODE SET 
                KOL = :P_BARCODE_KOL 
            WHERE 
                ID = :L_BARCODE_ID; 
 
        IF (:L_PRICE_ID IS NULL) THEN 
            INSERT INTO CENOVA_LISTA_EL (OPR_ID, SIMPLE_ID, TIP, PROCENT, CENA, TIP_OT_CENA) 
            VALUES (1, :L_SIMPLE_ID, 0, 0, :P_PRICE, 1); 
        ELSE IF (:L_PRICE_PRICE <> :P_PRICE) THEN 
            UPDATE CENOVA_LISTA_EL SET 
                CENA = :P_PRICE 
            WHERE 
                CENOVA_LISTA_EL.ID = :L_PRICE_ID; 
    END 
END^


ALTER PROCEDURE BOND_FAK_EL_OUT_EL (
    P_FAK_EL_ID INTEGER,
    P_OUT_EL_ID INTEGER)
AS
DECLARE VARIABLE L_OUT_EL_ID INTEGER; 
BEGIN 
/*V2*/ 
    INSERT INTO FAK_OUT_EL_NODE(FAK_EL_ID, OUT_EL_ID) 
    VALUES(:P_FAK_EL_ID,:P_OUT_EL_ID); 
END^


ALTER PROCEDURE CENOVA_LISTA_ACTIV (
    P_CL_ID INTEGER)
AS
declare variable l_activ integer; 
begin  
  l_activ = 0; 
  select  
    cenova_lista.activna 
  from cenova_lista  
  where 
    cenova_lista.id = :p_cl_id 
  into :l_activ; 
 
  if (l_activ = 0) then 
    l_activ = 1; 
  else 
    l_activ = 0; 
 
  update cenova_lista 
  set activna = :l_activ 
  where (id =:p_cl_id);  
 
end^


ALTER PROCEDURE CENOVA_LISTA_COPY (
    R_ID TYPE OF DOM_KEY,
    R_OPR_ID TYPE OF DOM_KEY,
    R_NAME TYPE OF DOM_CHAR_30)
AS
DECLARE VARIABLE L_OPR_ID TYPE OF DOM_KEY; 
BEGIN 
    SELECT 
        OPR_ID 
    FROM 
        CENOVA_LISTA 
    WHERE 
        ID = :R_ID 
    INTO 
        :L_OPR_ID; 
 
    INSERT INTO CENOVA_LISTA (NAME, OPR_ID, TIP, OT_DATE, DO_DATE, OT_TIME, DO_TIME, WEEK, ACTIVNA, PRIORITET, DEF, DEF_FIKS, BASE_PERCENT) 
    SELECT 
        :R_NAME, 
        :R_OPR_ID, 
        CENOVA_LISTA.TIP, 
        CENOVA_LISTA.OT_DATE, 
        CENOVA_LISTA.DO_DATE, 
        CENOVA_LISTA.OT_TIME, 
        CENOVA_LISTA.DO_TIME, 
        CENOVA_LISTA.WEEK, 
        CENOVA_LISTA.ACTIVNA, 
        0, 
        0, 
        CENOVA_LISTA.DEF_FIKS, 
        CENOVA_LISTA.BASE_PERCENT 
    FROM 
        CENOVA_LISTA 
    WHERE 
        CENOVA_LISTA.ID = :R_ID; 
 
    EXECUTE PROCEDURE ADD_PRIORITET(0); 
 
    INSERT INTO CENOVA_LISTA_EL (OPR_ID, OT_OPR_ID, SIMPLE_ID, TIP, PROCENT, CENA, TIP_OT_CENA, ROUND_TIP_ID) 
    SELECT 
        :R_OPR_ID, 
        CENOVA_LISTA_EL.OT_OPR_ID, 
        CENOVA_LISTA_EL.SIMPLE_ID, 
        CENOVA_LISTA_EL.TIP, 
        CENOVA_LISTA_EL.PROCENT, 
        CENOVA_LISTA_EL.CENA, 
        CENOVA_LISTA_EL.TIP_OT_CENA, 
        CENOVA_LISTA_EL.ROUND_TIP_ID 
    FROM 
        CENOVA_LISTA_EL 
    WHERE 
        OPR_ID = :L_OPR_ID; 
 
 
    INSERT INTO CENOVA_LISTA_KLI (OPR_ID, KLI_ID) 
    SELECT 
        :R_OPR_ID, 
        CENOVA_LISTA_KLI.KLI_ID 
    FROM 
        CENOVA_LISTA_KLI 
    WHERE 
        CENOVA_LISTA_KLI.OPR_ID = :L_OPR_ID; 
 
    INSERT INTO CENOVA_LISTA_SKLAD (OPR_ID, SKLAD_ID) 
    SELECT 
        :R_OPR_ID, 
        CENOVA_LISTA_SKLAD.SKLAD_ID 
    FROM 
        CENOVA_LISTA_SKLAD 
    WHERE 
        CENOVA_LISTA_SKLAD.OPR_ID = :L_OPR_ID; 
END^


ALTER PROCEDURE CENOVA_LISTA_DEF (
    P_ID_CL INTEGER)
AS
begin
  update cenova_lista
  set def = 0;

  update cenova_lista
  set def = 1
  where (id = :p_id_cl);
end^


ALTER PROCEDURE CENOVA_LISTA_DEF_FIKS (
    P_CL_ID INTEGER)
AS
declare variable l_id integer; 
begin 
l_id = 0; 
select 
cenova_lista.id 
from cenova_lista 
where 
cenova_lista.def_fiks = 1 
into :l_id; 
 
update cenova_lista 
set def_fiks = 0; 
 
if (l_id <> p_cl_id) then begin 
update cenova_lista 
set def_fiks = 1 
where (id =:p_cl_id); 
end 
end^


ALTER PROCEDURE CENOVA_LISTA_SET_FAKTURNA (
    P_CL_ID INTEGER)
AS
DECLARE VARIABLE L_ID INTEGER; 
BEGIN 
  L_ID = 0; 
 
  SELECT 
    CENOVA_LISTA.ID 
  FROM 
    CENOVA_LISTA 
  WHERE 
    CENOVA_LISTA.FAKTURNA = 1 
  INTO :L_ID; 
 
  UPDATE CENOVA_LISTA 
  SET FAKTURNA = 0; 
 
  IF (L_ID <> P_CL_ID) THEN BEGIN 
    UPDATE CENOVA_LISTA 
    SET FAKTURNA = 1 
    WHERE ID  = :P_CL_ID; 
  END 
END^


ALTER PROCEDURE CENOVA_LISTA_UPDATE (
    P_OPR TYPE OF DOM_KEY,
    P_ID TYPE OF DOM_KEY,
    P_CENA TYPE OF DOM_CENA,
    P_USER_ID TYPE OF DOM_KEY,
    OPR_ID_E TYPE OF DOM_KEY)
AS
declare variable L_OPR_ID type of DOM_KEY; 
declare variable L_CENA type of DOM_CENA; 
declare variable L_PROCENT type of DOM_PERCENT; 
declare variable L_CL_EL_ID type of DOM_KEY; 
declare variable L_ROUND_TIP type of DOM_KEY; 
declare variable L_CENA_OLD type of DOM_CENA; 
declare variable L_BASE_PERCENT type of DOM_PERCENT; 
BEGIN 
    FOR SELECT 
        CENOVA_LISTA_EL.ID, 
        CENOVA_LISTA_EL.OPR_ID, 
        CENOVA_LISTA_EL.PROCENT, 
        CENOVA_LISTA_EL.ROUND_TIP_ID, 
        CENOVA_LISTA_EL.CENA , 
        COALESCE(CENOVA_LISTA.BASE_PERCENT, 0.00) 
    FROM 
        CENOVA_LISTA_EL INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA_EL.OPR_ID) 
        AND CENOVA_LISTA_EL.OT_OPR_ID IS NOT NULL 
        AND CENOVA_LISTA_EL.OT_OPR_ID = :P_OPR 
        AND CENOVA_LISTA_EL.SIMPLE_ID = :P_ID 
        AND CENOVA_LISTA_EL.TIP_OT_CENA = 0 
    INTO 
        :L_CL_EL_ID, :L_OPR_ID, :L_PROCENT, :L_ROUND_TIP, :L_CENA_OLD, :L_BASE_PERCENT 
    DO BEGIN 
 
        -- ПЪРВО СЕ ПРИЛАГА БАЗОВИЯ ПРОЦЕНТ ЗА ЦЕНОВАТА ЛИСТА 
        L_CENA = ROUND(:P_CENA + :P_CENA * (:L_BASE_PERCENT / 100), 5); 
 
        -- А СЛЕД НЕГО И ВЕЧЕ ПРОЦЕНТА НА ЦЕНАТА КАКТО Е КОНФ В ЦЕНОВИТЕ ЛИСТИ 
        L_CENA = ROUND(:L_CENA + :L_CENA * (:L_PROCENT / 100), 5); 
 
        IF ((L_ROUND_TIP IS NOT NULL) AND (L_ROUND_TIP > 0) AND (L_CENA > 0)) THEN 
            EXECUTE PROCEDURE ZAKRAGLQVANE(:L_CL_EL_ID,:L_CENA,:L_ROUND_TIP,:P_CENA) 
            RETURNING_VALUES :L_CENA, :L_PROCENT; 
 
        UPDATE CENOVA_LISTA_EL SET 
            CENOVA_LISTA_EL.CENA = :L_CENA --, 
            --CENOVA_LISTA_EL.PROCENT = :L_PROCENT 
        WHERE 
            CENOVA_LISTA_EL.ID = :L_CL_EL_ID; 
 
        EXECUTE PROCEDURE SAVE_CL_HISTORY(:L_OPR_ID, :P_ID, :P_USER_ID, :L_CENA_OLD, :L_CENA, :OPR_ID_E); 
        EXECUTE PROCEDURE CENOVA_LISTA_UPDATE(:L_OPR_ID, :P_ID, :L_CENA, :P_USER_ID, :OPR_ID_E); 
    END 
END^


ALTER PROCEDURE CENOVA_LISTA_UPDATE_DOSTAVNA (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_CENA TYPE OF DOM_CENA,
    P_USER_ID TYPE OF DOM_KEY,
    OPR_ID_E TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_ID TYPE OF DOM_INT; 
DECLARE VARIABLE L_OPR_ID TYPE OF DOM_INT; 
DECLARE VARIABLE L_CENA TYPE OF DOM_CENA; 
DECLARE VARIABLE L_PROCENT TYPE OF DOM_PERCENT; 
DECLARE VARIABLE L_BASE_PERCENT TYPE OF DOM_PERCENT; 
BEGIN 
    FOR SELECT 
        CENOVA_LISTA_EL.ID, 
        CENOVA_LISTA_EL.OPR_ID, 
        CENOVA_LISTA_EL.PROCENT, 
        COALESCE(CENOVA_LISTA.BASE_PERCENT, 0.00) 
    FROM 
        CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
    WHERE 
        CENOVA_LISTA_EL.OT_OPR_ID IS NULL 
        AND CENOVA_LISTA_EL.TIP_OT_CENA = 1 
        AND CENOVA_LISTA_EL.SIMPLE_ID = :P_SIMPLE_ID 
        AND CENOVA_LISTA_EL.TIP = 0 
    ORDER BY 1 
    INTO 
        :L_ID, :L_OPR_ID, :L_PROCENT, :L_BASE_PERCENT 
    DO BEGIN 
        L_CENA = :P_CENA + :P_CENA * (:L_BASE_PERCENT / 100); 
        L_CENA = :L_CENA + :L_CENA * :L_PROCENT/100; 
 
        UPDATE CENOVA_LISTA_EL SET 
            CENOVA_LISTA_EL.CENA = :L_CENA 
        WHERE 
            CENOVA_LISTA_EL.ID = :L_ID; 
 
        EXECUTE PROCEDURE SAVE_CL_HISTORY(:L_OPR_ID, :P_SIMPLE_ID, :P_USER_ID, :P_CENA, :L_CENA,:OPR_ID_E); 
 
        EXECUTE PROCEDURE CENOVA_LISTA_UPDATE(:L_OPR_ID,:P_SIMPLE_ID,:L_CENA,:P_USER_ID,:OPR_ID_E); 
    END 
END^


ALTER PROCEDURE CHANGE_AMBALAJ_KLI (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OLD_KLI_ID TYPE OF DOM_KEY,
    P_NEW_KLI_ID TYPE OF DOM_KEY,
    P_OLD_DATE TYPE OF DOM_DATE,
    P_NEW_DATE TYPE OF DOM_DATE)
RETURNS (
    R_RESULT TYPE OF DOM_INT)
AS
declare variable L_OPR_TIP type of DOM_KEY; 
declare variable L_AMB_OPR_ID type of DOM_KEY; 
declare variable L_SIMPLE_ID type of DOM_KEY; 
declare variable L_KOL type of DOM_KOL; 
declare variable L_AMB_ID type of DOM_KEY; 
BEGIN 
    R_RESULT = 0; 
 
    SELECT 
        OPR.OPR_TIP, 
        OPR.ID 
    FROM 
        OPR INNER JOIN OPR_AMBALAJ_NODE AN ON AN.OPR_PROD_ID = :P_OPR_ID AND AN.OPR_AMBALAJ_ID = OPR.ID 
    INTO 
        :L_OPR_TIP, :L_AMB_OPR_ID; 
 
    DELETE FROM OPR_PAYMENT_NODE 
    WHERE 
        ID IN ( 
            SELECT 
                PAYMENT_NODE.NODE_ID 
            FROM 
                PAYMENT_NODE INNER JOIN SUMI ON SUMI.ID = PAYMENT_NODE.OPR_ID 
            WHERE SUMI.OPR_ID = :L_AMB_OPR_ID); 
 
    FOR SELECT 
        IN_EL.SIMPLE_ID, 
        IN_EL.KOL 
    FROM 
        IN_EL 
    WHERE 
        IN_EL.OPR_ID = :L_AMB_OPR_ID 
 
    UNION 
 
    SELECT 
        OUT_EL.SIMPLE_ID, 
        OUT_EL.KOL 
    FROM 
        OUT_EL 
    WHERE 
        OUT_EL.OPR_ID = :L_AMB_OPR_ID 
    INTO 
        :L_SIMPLE_ID,:L_KOL 
    DO BEGIN 
        EXECUTE PROCEDURE PARTIDA_HISTORY_OLD_PARTIDA(:L_AMB_OPR_ID,:L_SIMPLE_ID,:P_OLD_DATE,:P_NEW_DATE); 
 
        L_AMB_ID = NULL; 
        SELECT 
            AMBALAJ.ID 
        FROM 
            AMBALAJ 
        WHERE 
            AMBALAJ.KLI_ID = :P_NEW_KLI_ID 
            AND AMBALAJ.SIMPLE_ID = :L_SIMPLE_ID 
        INTO 
            :L_AMB_ID; 
 
        IF (L_AMB_ID > 0) THEN 
            UPDATE AMBALAJ SET 
                KOL = KOL + IIF(:L_OPR_TIP IN (56,57), -:L_KOL, :L_KOL) 
            WHERE 
                AMBALAJ.ID = :L_AMB_ID; 
        ELSE 
            INSERT INTO AMBALAJ (KLI_ID, SIMPLE_ID, KOL) 
            VALUES (:P_NEW_KLI_ID, :L_SIMPLE_ID, IIF(:L_OPR_TIP IN (56,57), -:L_KOL, :L_KOL)); 
 
        UPDATE AMBALAJ SET 
            KOL = KOL + IIF(:L_OPR_TIP IN (56,57), :L_KOL, -:L_KOL) 
        WHERE 
            AMBALAJ.KLI_ID = :P_OLD_KLI_ID 
            AND AMBALAJ.SIMPLE_ID = :L_SIMPLE_ID; 
    END 
 
    UPDATE OPR SET 
        KLI_ID = :P_NEW_KLI_ID, 
        OPR_DATE = :P_NEW_DATE 
    WHERE 
        OPR.ID = :L_AMB_OPR_ID; 
 
 
    FOR SELECT 
        IN_EL.SIMPLE_ID 
    FROM 
        IN_EL 
    WHERE 
        IN_EL.OPR_ID = :L_AMB_OPR_ID 
 
    UNION 
 
    SELECT 
        OUT_EL.SIMPLE_ID 
    FROM 
        OUT_EL 
    WHERE 
        OUT_EL.OPR_ID = :L_AMB_OPR_ID 
    INTO 
        :L_SIMPLE_ID 
    DO BEGIN 
        EXECUTE PROCEDURE PARTIDA_HISTORY_NEW_PARTIDA(:L_AMB_OPR_ID,:L_SIMPLE_ID,:P_OLD_DATE,:P_NEW_DATE,0) 
        RETURNING_VALUES :R_RESULT; 
 
        IF (R_RESULT > 0) THEN 
            EXIT; 
    END 
END^


ALTER PROCEDURE CHANGE_KASA_REKVIZITI (
    P_ID INTEGER,
    P_REKVIZIT INTEGER,
    P_VALUE_INT SMALLINT,
    P_VALUE_DOUBLE DOUBLE PRECISION,
    P_CRYPT INTEGER)
AS
DECLARE VARIABLE ID_2 INTEGER; 
BEGIN 
   
 
  IF (P_CRYPT = 0) THEN BEGIN 
    SELECT  
      PARI.ID  
    FROM  
      PARI_NODE INNER JOIN PARI ON PARI_NODE.FROM_ID = PARI.OPR_ID  
    WHERE  
      PARI_NODE.TO_ID = (SELECT PARI.OPR_ID FROM PARI WHERE PARI.ID = :P_ID)  
    INTO  
      :ID_2;  
  
    IF (ID_2 IS NULL ) THEN BEGIN  
      SELECT  
        PARI.ID  
      FROM  
        PARI_NODE INNER JOIN PARI ON PARI_NODE.TO_ID = PARI.OPR_ID  
      WHERE  
        PARI_NODE.FROM_ID = (SELECT PARI.OPR_ID FROM PARI WHERE PARI.ID = :P_ID)  
      INTO  
        :ID_2;  
    END  
  END 
  ELSE BEGIN 
    SELECT  
      PARI_CRYPT.ID 
    FROM  
      PARI_NODE INNER JOIN PARI_CRYPT ON PARI_NODE.FROM_ID = PARI_CRYPT.OPR_ID 
    WHERE  
      PARI_NODE.TO_ID = (SELECT PARI_CRYPT.OPR_ID FROM PARI_CRYPT WHERE PARI_CRYPT.ID = :P_ID) 
    INTO  
      :ID_2;  
  
    IF (ID_2 IS NULL ) THEN BEGIN  
      SELECT  
        PARI_CRYPT.ID 
      FROM  
        PARI_NODE INNER JOIN PARI_CRYPT ON PARI_NODE.TO_ID = PARI_CRYPT.OPR_ID 
      WHERE  
        PARI_NODE.FROM_ID = (SELECT PARI_CRYPT.OPR_ID FROM PARI_CRYPT WHERE PARI_CRYPT.ID = :P_ID) 
      INTO  
        :ID_2;  
    END  
  END 
  
  IF (P_REKVIZIT = 1) THEN BEGIN 
 
    IF (P_CRYPT = 0) THEN 
      UPDATE PARI SET PARI.PARI_IO_ID = :P_VALUE_INT WHERE PARI.ID = :P_ID; 
    ELSE 
      UPDATE PARI_CRYPT SET PARI_CRYPT.PARI_IO_ID = :P_VALUE_INT WHERE PARI_CRYPT.ID = :P_ID; 
       
    IF (ID_2 IS NOT NULL) THEN 
      IF (P_CRYPT = 0) THEN 
        UPDATE PARI SET PARI.PARI_IO_ID = :P_VALUE_INT WHERE PARI.ID = :ID_2; 
      ELSE 
        UPDATE PARI_CRYPT SET PARI_CRYPT.PARI_IO_ID = :P_VALUE_INT WHERE PARI_CRYPT.ID = :ID_2; 
  END  
  ELSE IF (P_REKVIZIT = 2) THEN BEGIN  
    IF (P_CRYPT = 0) THEN 
      UPDATE PARI SET PARI.KASA_ID = :P_VALUE_INT WHERE PARI.ID = :P_ID; 
    ELSE 
      UPDATE PARI_CRYPT SET PARI_CRYPT.KASA_ID = :P_VALUE_INT WHERE PARI_CRYPT.ID = :P_ID; 
 
    IF (ID_2 IS NOT NULL) THEN  
      IF (P_CRYPT = 0) THEN 
        UPDATE PARI SET PARI.KASA_ID = :P_VALUE_INT WHERE PARI.ID = :ID_2; 
      ELSE 
        UPDATE PARI_CRYPT SET PARI_CRYPT.KASA_ID = :P_VALUE_INT WHERE PARI_CRYPT.ID = :ID_2; 
  END  
  ELSE IF (P_REKVIZIT = 3) THEN BEGIN  
    IF (P_CRYPT = 0) THEN 
      UPDATE PARI SET PARI.OBEKT_ID = :P_VALUE_INT WHERE PARI.ID = :P_ID; 
    ELSE 
      UPDATE PARI_CRYPT SET PARI_CRYPT.OBEKT_ID = :P_VALUE_INT WHERE PARI_CRYPT.ID = :P_ID; 
 
    IF (ID_2 IS NOT NULL) THEN  
      IF (P_CRYPT = 0) THEN 
        UPDATE PARI SET PARI.OBEKT_ID = :P_VALUE_INT WHERE PARI.ID = :ID_2; 
      ELSE 
        UPDATE PARI_CRYPT SET PARI_CRYPT.OBEKT_ID = :P_VALUE_INT WHERE PARI_CRYPT.ID = :ID_2; 
  END  
  ELSE IF (P_REKVIZIT = 4) THEN BEGIN  
    IF (P_CRYPT = 0) THEN 
      UPDATE PARI SET PARI.KURS = :P_VALUE_DOUBLE WHERE PARI.ID = :P_ID; 
    ELSE 
      UPDATE PARI_CRYPT SET PARI_CRYPT.KURS = :P_VALUE_DOUBLE WHERE PARI_CRYPT.ID = :P_ID; 
 
    IF (ID_2 IS NOT NULL) THEN  
      IF (P_CRYPT = 0) THEN 
        UPDATE PARI SET PARI.KURS = :P_VALUE_DOUBLE WHERE PARI.ID = :ID_2; 
      ELSE 
        UPDATE PARI_CRYPT SET PARI_CRYPT.KURS = :P_VALUE_DOUBLE WHERE PARI_CRYPT.ID = :ID_2; 
  END  
  ELSE IF (P_REKVIZIT = 5) THEN BEGIN  
    IF (P_CRYPT = 0) THEN 
      UPDATE PARI SET PARI.ALLOW_FAK = :P_VALUE_INT WHERE PARI.ID = :P_ID; 
    ELSE 
      UPDATE PARI_CRYPT SET PARI_CRYPT.ALLOW_FAK = :P_VALUE_INT WHERE PARI_CRYPT.ID = :P_ID; 
 
    IF (ID_2 IS NOT NULL) THEN  
      IF (P_CRYPT = 0) THEN 
        UPDATE PARI SET PARI.ALLOW_FAK = :P_VALUE_INT WHERE PARI.ID = :ID_2; 
      ELSE 
        UPDATE PARI_CRYPT SET PARI_CRYPT.ALLOW_FAK = :P_VALUE_INT WHERE PARI_CRYPT.ID = :ID_2; 
  END  
  ELSE IF (P_REKVIZIT = 6) THEN BEGIN  
    IF (P_CRYPT = 0) THEN 
      UPDATE OPR SET OPR.KLI_ID = :P_VALUE_INT WHERE OPR.ID = (SELECT PARI.OPR_ID FROM PARI WHERE PARI.ID = :P_ID);  
    ELSE 
      UPDATE OPR SET OPR.KLI_ID = :P_VALUE_INT WHERE OPR.ID = (SELECT PARI_CRYPT.OPR_ID FROM PARI_CRYPT WHERE PARI_CRYPT.ID = :P_ID); 
 
    IF (ID_2 IS NOT NULL) THEN  
      IF (P_CRYPT = 0) THEN 
        UPDATE OPR SET OPR.KLI_ID = :P_VALUE_INT WHERE OPR.ID = (SELECT PARI.OPR_ID FROM PARI WHERE PARI.ID = :ID_2);  
      ELSE 
        UPDATE OPR SET OPR.KLI_ID = :P_VALUE_INT WHERE OPR.ID = (SELECT PARI_CRYPT.OPR_ID FROM PARI_CRYPT WHERE PARI_CRYPT.ID = :ID_2); 
  END 
  ELSE IF (P_REKVIZIT = 7) THEN BEGIN 
    IF (P_CRYPT = 0) THEN 
      UPDATE PARI SET PARI.PROWERKA = :P_VALUE_INT WHERE PARI.ID = :P_ID; 
    ELSE 
      UPDATE PARI_CRYPT SET PARI_CRYPT.PROWERKA = :P_VALUE_INT WHERE PARI_CRYPT.ID = :P_ID; 
  END 
  
  SUSPEND;  
END^


ALTER PROCEDURE CHANGE_LICENZ (
    P_OPR_ID INTEGER)
RETURNS (
    R_STATUS SMALLINT)
AS
DECLARE VARIABLE L_NODE_ID INTEGER;
DECLARE VARIABLE L_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_OPR_DATE DATE;
DECLARE VARIABLE L_KLI_ID INTEGER;
DECLARE VARIABLE L_CRM_ID INTEGER;
DECLARE VARIABLE L_CRM_DATE DATE;
DECLARE VARIABLE L_LDM DATE;
DECLARE VARIABLE L_TEMP_ID INTEGER;
DECLARE VARIABLE L_TEMP_DAY SMALLINT;
DECLARE VARIABLE L_TEMP_FLAG INTEGER;
BEGIN 
/*V.1 
STATUS = 0 - OK, 
STATUS = 1 - ОПЕРАЦИЯТА Е БЕЗ КЛИЕНТ 
STATUS = 2 - НЕ СА НАПРАВЕНИ ПРОМЕНИ - ОПЕРАЦИЯТА Е ПО-СТАРА С 1 И ПОВЕЧЕ МЕСЕЦА ОТ МЕСЕЦА НА ИЗТИЧАНЕ НА ЛИЦЕНЗА*/ 
 
    R_STATUS = 0; 
 
    SELECT 
        OPR.OPR_DATE, 
        COALESCE(OPR.KLI_ID,0) 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :L_OPR_DATE,:L_KLI_ID; 
 
    IF (L_KLI_ID = 0) THEN BEGIN 
        R_STATUS = 1; 
        EXIT; 
    END 
 
    /*ПОЛУЧАВАМЕ ПОСЛЕДНИЯ ДЕН НА МЕСЕЦA ОТ ДАТАТА НА ОПЕРАЦИЯТА*/ 
    L_LDM =  L_OPR_DATE - EXTRACT(DAY FROM L_OPR_DATE) + 32 - EXTRACT(DAY FROM L_OPR_DATE - EXTRACT(DAY FROM L_OPR_DATE) + 32); 
 
    L_TEMP_ID = NULL; 
 
    SELECT 
        OT.ID, 
        OT.DAY_REG, 
        OT.FLAG_MONTH 
    FROM 
        TASKS INNER JOIN OPR_TEMPLATE_TASK_NODE TN ON TN.TASK_ID = TASKS.ID AND TASKS.OPR_ID = :P_OPR_ID 
        INNER JOIN OPR_TEMPLATE OT ON OT.ID = TN.TEMPLATE_ID 
    INTO 
        :L_TEMP_ID,:L_TEMP_DAY,:L_TEMP_FLAG; 
 
    IF ((L_TEMP_ID IS NULL) OR (L_TEMP_DAY IS NULL)) THEN BEGIN 
        SELECT 
            EXTRACT(DAY FROM OPR_PADEJ.DATA_PADEJ) 
        FROM 
            OPR_PADEJ 
        WHERE 
            OPR_PADEJ.OPR_ID = :P_OPR_ID 
        INTO 
            :L_TEMP_DAY; 
    END 
 
    FOR SELECT 
        CRM_ATON_PRODUKT.CRM_PRODUKT, 
        SUM(OUT_EL.KOL) - COALESCE(SUM(IN_EL.KOL), 0.00)
    FROM 
        CRM_ATON_PRODUKT INNER JOIN OUT_EL ON OUT_EL.OPR_ID = :P_OPR_ID AND OUT_EL.SIMPLE_ID = CRM_ATON_PRODUKT.SIMPLE_ID
        LEFT JOIN OPR_RAZPAD_NODE ORN ON ORN.OUT_EL_ID = OUT_EL.ID
        LEFT JOIN IN_EL ON IN_EL.ID = ORN.IN_EL_ID
    GROUP BY 1
    HAVING SUM(OUT_EL.KOL) - COALESCE(SUM(IN_EL.KOL), 0.00) > 0.00
    ORDER BY 1
    INTO 
        :L_NODE_ID,:L_KOL 
    DO BEGIN 
        L_CRM_ID = NULL; 
 
        SELECT 
            CRM_INFO_LICENZIA.ID, 
            CRM_INFO_LICENZIA.DT1 
        FROM 
            CRM_INFO_LICENZIA 
        WHERE 
            CRM_INFO_LICENZIA.KLI_ID = :L_KLI_ID 
            AND CRM_INFO_LICENZIA.PRODUCT_CRM = :L_NODE_ID 
        INTO 
            :L_CRM_ID,:L_CRM_DATE; 
 
        IF (L_CRM_ID IS NULL) THEN BEGIN 
            --ЩЕ СЕ ДОБАВЯ НОВ РЕД С МЕСЕЦА НА ПРОДАЖБАТА И ПАДЕЖА И AKO КРАЯ НА МЕСЕЦА Е СЛЕД ТЕКУЩАТА ДАТА 
            IF (L_LDM > CURRENT_DATE) THEN 
                INSERT INTO CRM_INFO_LICENZIA (KLI_ID, PRODUCT_CRM, KOL1, DT1, DAY_REG, FLAG_MONTH,L_TYPE, DT_UPDATE,FL_CHECK) 
                VALUES (:L_KLI_ID, :L_NODE_ID, :L_KOL, :L_LDM,COALESCE(:L_TEMP_DAY,0), COALESCE(:L_TEMP_FLAG,0),0, CURRENT_TIMESTAMP,0) 
                RETURNING ID INTO :L_CRM_ID; 
        END 
        ELSE BEGIN 
        /*ВЕЧЕ ИМА РЕД, ЩЕ ТРЯБВА ДА СЕ ПРОВЕРИ ДАЛИ ДА СЕ СМЕНИ ЗА СЛЕДВАЩ МЕСЕЦ ИЛИ ДА СЕ ЪПДЕЙТНЕ САМО 
        КОЛ НА ЛИЦЕНЗА*/ 
            /*L_LDM ПОКАЗВА ПОСЛЕДНИЯ ДЕН ОТ МЕСЕЦА ЗА ОПЕРАЦИЯТА. 
            L_CRM_DATE ПОКАЗВА ПОСЛЕДНИЯ ДЕН ОТ МЕСЕЦА, В КОЙТО ИЗТИЧА ЛИЦЕНЗА. ЗАТОВА СРАВНЯВАМ ДВЕТЕ ДАТИ. 
            3 ВАРИАНТА: 
            1. ДВЕТЕ ДАТИ СА РАВНИ - ОПЕРАЦИЯТА Е В МЕСЕЦА НА ИЗТИЧАНЕ НА ЛИЦЕНЗА - САМО УВЕЛИЧАВАМ КОЛИЧЕСТВОТО 
            2. L_LDM > L_CRM_DATE - ДАТА НА ОПЕРАЦИЯТА Е ПО-ГОЛЯМА - ПРОМЕНЯ СЕ КОЛИЧЕСТВТО НА ТОВА 
            ОТ ОПЕРАЦИЯТА И СМЕНЯМ ДАТАТА 
            3. L_LDM < L_CRM_DATE - ОПЕРАЦИЯТА Е ПО-СТАРА ОТ МЕСЕЦА НА ИЗТИЧАНЕ НА ЛИЦЕНЗА - НЯМА 
            ДА ПИПА НИЩО.*/ 
 
            IF (L_LDM = L_CRM_DATE) THEN BEGIN 
                UPDATE CRM_INFO_LICENZIA SET 
                OLD_KOL = KOL1, 
                KOL1 = KOL1 + CAST (:L_KOL AS SMALLINT), 
                DT_UPDATE = CURRENT_TIMESTAMP, 
                L_TYPE = 0, 
                FL_CHECK = 0 
                WHERE ID = :L_CRM_ID; 
            END 
            ELSE IF (L_LDM > L_CRM_DATE) THEN BEGIN 
                UPDATE CRM_INFO_LICENZIA SET 
                OLD_KOL = KOL1, 
                OLD_DT = DATEADD(DAY, COALESCE(CRM_INFO_LICENZIA.DAY_REG,0), CRM_INFO_LICENZIA.DT1), 
                DT1 = :L_LDM, 
                KOL1 = CAST (:L_KOL AS SMALLINT), 
                DT_UPDATE = CURRENT_TIMESTAMP, 
                L_TYPE = 0 , 
                FL_CHECK = 0 
                WHERE ID = :L_CRM_ID; 
            END 
            ELSE 
                R_STATUS = 2; 
        END 
 
        IF (L_CRM_ID IS NOT NULL) THEN BEGIN 
            UPDATE CRM_INFO_LICENZIA SET 
            DAY_REG = MINVALUE(COALESCE(:L_TEMP_DAY,0), EXTRACT(DAY FROM :L_LDM)), 
            FLAG_MONTH = COALESCE(:L_TEMP_FLAG,0), 
            L_TYPE = 0, 
            FL_CHECK = 0 
            WHERE ID = :L_CRM_ID; 
 
            UPDATE OR INSERT INTO LICENZ_PROD_NODE (OPR_PROD_ID,LICENZ_ID) 
            VALUES (:P_OPR_ID,:L_CRM_ID) 
            MATCHING (OPR_PROD_ID,LICENZ_ID); 
        END 
    END 
END^


ALTER PROCEDURE CHANGE_OPR_PAY_TYPE (
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_PAY_TYPE TYPE OF DOM_FLAG)
AS
declare variable L_OPR_TIP type of DOM_KEY; 
declare variable L_SUMA type of DOM_SUMA; 
declare variable L_OPR_SUMA type of DOM_SUMA; 
BEGIN 
/*V.1 
    ЗА ПОДАДЕНАТА ОПЕРАЦИЯ ТЪРСИ ДАЛИ ОСТАВА СУМА ЗА РАЗПРЕДЕЛЯНЕ. АКО НЕ МАРКИРА ОПЕРАЦИЯТА ЗА ПЛАТЕНА, 
    В ПРОТИВЕН СЛУЧАЙ Я СЛАГА ЗА НЕПЛАТЕНА*/ 
 
    SELECT 
        OPR.OPR_TIP 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :L_OPR_TIP; 
 
 
    SELECT 
        ROUND(SUM(SUMI.SUMA_OST),2) 
    FROM 
        SUMI 
    WHERE 
        SUMI.OPR_ID = :P_OPR_ID 
    INTO 
        :L_SUMA; 
 
    IF (L_SUMA = 0.00) THEN 
        R_PAY_TYPE = 3; 
    ELSE 
        R_PAY_TYPE = 1; 
 
    IF (L_OPR_TIP = 1) THEN  BEGIN 
    /*ДОСТАВКА*/ 
        UPDATE "IN" SET PAY_TIP = :R_PAY_TYPE WHERE OPR_ID = :P_OPR_ID; 
    END 
    ELSE IF (L_OPR_TIP = 2) THEN BEGIN 
    /*ПРОДАЖБА*/ 
        UPDATE OUT SET PAY_TIP = :R_PAY_TYPE WHERE OPR_ID = :P_OPR_ID; 
    END 
    ELSE IF (L_OPR_TIP = 13) THEN BEGIN 
    /*ДДС ОТ ВХОДЯЩА ФАКТУРА*/ 
        UPDATE FAK_IN SET PAY_TIP_DDS = IIF(FAK_IN.PAY_TIP = 0, IIF(:R_PAY_TYPE = 1, 10, :R_PAY_TYPE), :R_PAY_TYPE) WHERE OPR_ID = :P_OPR_ID; 
    END 
    ELSE IF (L_OPR_TIP = 15) THEN BEGIN 
    /*ЗАДЪЛЖЕНИЕ КЪМ ДИСТРИБУТОР*/ 
        IF (R_PAY_TYPE = 3) THEN 
            R_PAY_TYPE = 1; 
        ELSE 
            R_PAY_TYPE = 0; 
        UPDATE PARI_DIST SET PAY_TIP = :R_PAY_TYPE WHERE OPR_ID = :P_OPR_ID; 
    END 
    ELSE IF (L_OPR_TIP = 26) THEN BEGIN 
    /*ВРЪЩАНЕ ОТ КЛИЕНТ*/ 
        UPDATE RET_STOKA_PROD SET PAY_TIP = :R_PAY_TYPE WHERE OPR_ID = :P_OPR_ID; 
    END 
    ELSE IF (L_OPR_TIP = 27) THEN BEGIN 
    /*ВРЪЩАНЕ КЪМ ДОСТАВЧИК*/ 
        UPDATE RET_STOKA_DOST SET PAY_TIP = :R_PAY_TYPE WHERE OPR_ID = :P_OPR_ID; 
    END 
    ELSE IF (L_OPR_TIP = 37) THEN BEGIN 
    /*КРЕДИТНО ИЗВЕСТИЕ ОТ ДОСТАВЧИК*/ 
        UPDATE RET_STOKA_DOST_KI SET PAY_TIP = :R_PAY_TYPE WHERE OPR_ID = :P_OPR_ID; 
    END 
    ELSE IF (L_OPR_TIP IN (40, 79)) THEN BEGIN 
    /*КРЕДИТНО ИЗВЕСТИЕ КЪМ КЛИЕНТ*/ 
        UPDATE RET_STOKA_PROD_KI SET PAY_TIP = :R_PAY_TYPE WHERE OPR_ID = :P_OPR_ID; 
    END 
    ELSE IF (L_OPR_TIP = 50) THEN BEGIN 
    /*КРЕДИТНО ИЗВЕСТИЕ ОТ ДОСТАВЧИК ЗА СУМА*/ 
        UPDATE KI_DOST_SUMA SET PAY_TIP = :R_PAY_TYPE WHERE KI_OPR_ID = :P_OPR_ID; 
    END 
END^


ALTER PROCEDURE CHANGE_RECEPIE_LAST_CENA (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_DEPTH TYPE OF DOM_SMAL_INT,
    P_SKLAD_ID TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY = 0)
RETURNS (
    R_STATUS TYPE OF DOM_SMAL_INT)
AS
declare variable L_SIMPLE_ID type of DOM_KEY; 
declare variable L_SUMA type of DOM_CENA; 
declare variable L_SKLAD_ID type of DOM_KEY; 
BEGIN 
    --R_STATUS = 0 - OK, 1 - ПРЕКАЛЕНО ДЪЛБОКА РЕКУРСИЯ - НА 20 ОПИТ ЩЕ СПИРАМ. 
 
    IF (P_DEPTH = 20) THEN BEGIN 
        R_STATUS = 1; 
        EXIT; 
    END 
    ELSE 
        R_STATUS = 0; 
 
    SELECT 
        SIMPLE.RAZPAD 
    FROM 
        SIMPLE 
    WHERE 
        SIMPLE.ID = :P_SIMPLE_ID 
    INTO 
        :L_SIMPLE_ID; 
 
    IF (COALESCE(L_SIMPLE_ID,0) <> 2) THEN 
        EXIT; 
 
    L_SIMPLE_ID = NULL; 
 
    SELECT 
        SUM(ROUND(SIMPLE_CALC.KOL * COALESCE(( 
            SELECT FIRST 1 
                NAL.LAST_CENA 
            FROM 
                NAL INNER JOIN SYSTEM ON 1=1 
            WHERE 
                NAL.SIMPLE_ID = SIMPLE_CALC.CHILD_SIMPLE_ID 
                AND NAL.SKLAD_ID <> SYSTEM.H_SKLAD 
            ORDER BY NAL.DATETIME_LASTCENA DESC),0.00), 2)) 
    FROM 
        SIMPLE_CALC 
    WHERE 
        SIMPLE_CALC.SIMPLE_ID = :P_SIMPLE_ID 
    INTO 
        :L_SUMA; 
 
    FOR SELECT 
        SKLAD.ID 
    FROM 
        SKLAD 
    INTO 
        :L_SKLAD_ID 
    DO BEGIN 
        IF (NOT EXISTS ( 
            SELECT 
                NAL.ID 
            FROM 
                NAL 
            WHERE 
                NAL.SIMPLE_ID = :P_SIMPLE_ID 
                AND NAL.SKLAD_ID = :L_SKLAD_ID)) 
        THEN BEGIN 
            INSERT INTO NAL(SIMPLE_ID,SKLAD_ID,KOL_NAL,SUMA,SUMA_FR) 
            VALUES(:P_SIMPLE_ID,:L_SKLAD_ID,0.00,0.00,0.00); 
        END 
    END 
 
 IF (P_OPR_ID <> 0) THEN 
    IF (:P_SKLAD_ID = 0) THEN 
        UPDATE NAL SET 
            LAST_CENA = :L_SUMA, 
            DATETIME_LASTCENA = CURRENT_TIMESTAMP, 
            LAST_DOST_OPR_ID = :P_OPR_ID 
        WHERE 
            NAL.SIMPLE_ID = :P_SIMPLE_ID; 
    ELSE 
        UPDATE NAL SET 
            LAST_CENA = :L_SUMA, 
            DATETIME_LASTCENA = CURRENT_TIMESTAMP, 
            LAST_DOST_OPR_ID = :P_OPR_ID 
        WHERE 
            NAL.SIMPLE_ID = :P_SIMPLE_ID 
            AND NAL.SKLAD_ID = :P_SKLAD_ID; 
    ELSE 
        UPDATE NAL SET 
            LAST_CENA = :L_SUMA, 
            DATETIME_LASTCENA = CURRENT_TIMESTAMP, 
            LAST_DOST_OPR_ID = (SELECT FIRST 1 NAL.LAST_DOST_OPR_ID FROM NAL WHERE NAL.SIMPLE_ID =:P_SIMPLE_ID AND (NAL.SKLAD_ID =:P_SKLAD_ID OR (:P_SKLAD_ID = 0)) ORDER BY NAL.LAST_DOST_OPR_ID DESC) 
        WHERE 
            NAL.SIMPLE_ID = :P_SIMPLE_ID 
            AND ((NAL.SKLAD_ID = :P_SKLAD_ID) OR (:P_SKLAD_ID = 0)); 
 
    FOR SELECT 
        SIMPLE_CALC.SIMPLE_ID 
    FROM 
        SIMPLE_CALC INNER JOIN SIMPLE ON SIMPLE_CALC.SIMPLE_ID = SIMPLE.ID 
    WHERE 
        SIMPLE_CALC.CHILD_SIMPLE_ID = :P_SIMPLE_ID 
        AND SIMPLE.RAZPAD in (2,3) 
 
    INTO 
        :L_SIMPLE_ID 
    DO BEGIN 
        EXECUTE PROCEDURE CHANGE_RECEPIE_LAST_CENA(:L_SIMPLE_ID,:P_DEPTH + 1,:P_SKLAD_ID, :P_OPR_ID) 
        RETURNING_VALUES :R_STATUS; 
 
        IF (R_STATUS = 1) THEN 
            EXIT; 
    END 
END^


ALTER PROCEDURE CHECK_ANUL_KONS (
    P_KONS_OPR_ID INTEGER)
RETURNS (
    R_STATUS INTEGER)
AS
declare variable l_kol double precision; 
declare variable l_kol_out double precision; 
declare variable l_kol_in double precision; 
declare variable l_simple_id integer; 
declare variable l_kli_id integer; 
declare variable l_k_sklad_id integer; 
BEGIN 
  r_status = 0; 
  select k_sklad from system  into :l_k_sklad_id; 
 
  select kli_id from opr 
  where 
    id = :p_kons_opr_id 
  into :l_kli_id; 
 
  for 
    select 
      sum(out_el.kol) as kol, 
      out_el.simple_id 
    from out_el 
    where 
      out_el.opr_id =:p_kons_opr_id 
    group by 2 
    into :l_kol,:l_simple_id 
  do begin 
    select sum(coalesce(kol,0)) from out_el 
    join opr on opr.id = out_el.opr_id and opr.kli_id = :l_kli_id and opr.sklad_id = :l_k_sklad_id 
    where 
      simple_id = :l_simple_id 
    into :l_kol_out; 
 
    select sum(coalesce(kol,0)) from in_el 
    join opr on opr.id = in_el.opr_id and opr.kli_id = :l_kli_id and opr.sklad_id = :l_k_sklad_id 
    where 
      simple_id = :l_simple_id 
    into :l_kol_in; 
 
    if ((l_kol_in - l_kol_out - l_kol) < 0) then begin 
      r_status = 1; 
      leave; 
    end 
  end  
  suspend; 
END^


ALTER PROCEDURE CHECK_FOR_KRIT_KOL (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY)
RETURNS (
    R_FLAG TYPE OF DOM_FLAG)
AS
declare variable L_KOL_KRI_MIN type of DOM_KOL; 
declare variable L_KOL_KRI_MAX type of DOM_KOL; 
declare variable L_KOL_NAL type of DOM_KOL; 
BEGIN 
    SELECT 
        SIMPLE.KOL_KRI_MIN, 
        SIMPLE.KOL_KRI_MAX 
    FROM 
        SIMPLE 
    WHERE 
        SIMPLE.ID =:P_SIMPLE_ID 
    INTO 
        :L_KOL_KRI_MIN, :L_KOL_KRI_MAX; 
 
    SELECT 
        NAL.KOL_NAL , 
        COALESCE(NAL.MIN_QTY, :L_KOL_KRI_MIN), 
        COALESCE(NAL.MAX_QTY, :L_KOL_KRI_MAX) 
    FROM 
        NAL 
    WHERE 
        NAL.SIMPLE_ID =:P_SIMPLE_ID 
        AND NAL.SKLAD_ID =:P_SKLAD_ID 
    INTO 
        :L_KOL_NAL, :L_KOL_KRI_MIN, :L_KOL_KRI_MAX; 
 
    R_FLAG = -1; 
 
    IF ((L_KOL_NAL >=L_KOL_KRI_MAX) AND (L_KOL_NAL <=L_KOL_KRI_MIN)) THEN 
        R_FLAG = 2; 
 
    IF ((L_KOL_NAL >= L_KOL_KRI_MAX)) THEN 
        R_FLAG = 0;   --НАЛИЧНОТО ЗА СКЛАДА Е ПО-ГОЛЯМО ОТ КРИТИЧНОТО МАКСИМАЛНО 
 
    IF ((L_KOL_NAL <= L_KOL_KRI_MIN)) THEN 
        R_FLAG = 1; --НАЛИЧНОТО ЗА СКЛАДА Е ПО-ГОЛЯМО ОТ КРИТИЧНОТО МИНИМАЛНО 
 
    SUSPEND; 
END^


ALTER PROCEDURE CHECK_OTR_KOL (
    P_KOL DOUBLE PRECISION)
AS
DECLARE VARIABLE FLAG SMALLINT; 
BEGIN 
  SELECT 
    TBL_WORK_OTR_KOL.FLAG 
  FROM 
    TBL_WORK_OTR_KOL 
  INTO 
    :FLAG; 
 
  IF (FLAG = 1) THEN 
    IF (P_KOL < 0.00) THEN 
      EXCEPTION EXC_OTR_KOL; 
END^


ALTER PROCEDURE CL_GET_INFO_UPDATE (
    P_OPR TYPE OF DOM_KEY,
    P_SIM TYPE OF DOM_KEY,
    P_CENA TYPE OF DOM_CENA)
RETURNS (
    ID TYPE OF DOM_KEY,
    OT_OPR_ID TYPE OF DOM_KEY,
    OPR_ID TYPE OF DOM_KEY,
    NAME_CL TYPE OF DOM_CHAR_30,
    CENA TYPE OF DOM_CENA,
    PROCENT TYPE OF DOM_PERCENT,
    ROUND_TIP_ID TYPE OF DOM_KEY,
    NAME_ROUNT TYPE OF DOM_CHAR_20,
    UP_DOWN TYPE OF DOM_SMAL_INT,
    COEFFICIENT TYPE OF DOM_PERCENT,
    PRODUCE TYPE OF DOM_CENA,
    NEW_CENA TYPE OF DOM_CENA,
    NEW_PROCENT TYPE OF DOM_PERCENT)
AS
DECLARE VARIABLE L_BASE_PERCENT TYPE OF DOM_PERCENT; 
BEGIN 
    FOR SELECT 
        CENOVA_LISTA_EL.ID, 
        CENOVA_LISTA_EL.OT_OPR_ID, 
        CENOVA_LISTA_EL.OPR_ID, 
        CENOVA_LISTA.NAME NAME_CL, 
        CENOVA_LISTA_EL.CENA, 
        CENOVA_LISTA_EL.PROCENT, 
        CENOVA_LISTA_EL.ROUND_TIP_ID, 
        ROUND_TIP.NAME NAME_ROUNT, 
        ROUND_TIP.UP_DOWN, 
        ROUND_TIP.COEFFICIENT, 
        ROUND_TIP.PRODUCE, 
        CAST(0.00 AS DOUBLE PRECISION), 
        CENOVA_LISTA_EL.PROCENT, 
        COALESCE(CENOVA_LISTA.BASE_PERCENT, 0.00) 
    FROM 
        CENOVA_LISTA_EL INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
        LEFT JOIN ROUND_TIP ON ROUND_TIP.ID = CENOVA_LISTA_EL.ROUND_TIP_ID 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA_EL.OPR_ID) 
        AND CENOVA_LISTA_EL.TIP_OT_CENA = 0 
        AND CENOVA_LISTA_EL.OT_OPR_ID IS NOT NULL 
        AND CENOVA_LISTA_EL.OT_OPR_ID = :P_OPR 
        AND CENOVA_LISTA_EL.SIMPLE_ID = :P_SIM 
        AND CENOVA_LISTA_EL.OPR_ID <> :P_OPR 
    INTO 
        :ID,:OT_OPR_ID,:OPR_ID,:NAME_CL,:CENA,:PROCENT,:ROUND_TIP_ID,:NAME_ROUNT, 
        :UP_DOWN,:COEFFICIENT,:PRODUCE,:NEW_CENA,:NEW_PROCENT, :L_BASE_PERCENT 
    DO BEGIN 
        NEW_CENA = ROUND(:P_CENA + :P_CENA * (:L_BASE_PERCENT/100), 5); 
        NEW_CENA = ROUND(:NEW_CENA + :NEW_CENA * (:PROCENT / 100), 5); 
 
        IF ((ROUND_TIP_ID IS NOT NULL) AND (ROUND_TIP_ID > 0) AND (NEW_CENA > 0)) THEN 
            EXECUTE PROCEDURE ZAKRAGLQVANE(:ID,:NEW_CENA,:ROUND_TIP_ID,:P_CENA) 
            RETURNING_VALUES :NEW_CENA, :NEW_PROCENT; 
 
        IF (NEW_CENA <> CENA) THEN BEGIN 
            SUSPEND; 
 
            EXECUTE PROCEDURE CL_GET_INFO_UPDATE(:OPR_ID,:P_SIM,:NEW_CENA) 
            RETURNING_VALUES :ID,:OT_OPR_ID,:OPR_ID,:NAME_CL,:CENA,:PROCENT,:ROUND_TIP_ID,:NAME_ROUNT, 
            :UP_DOWN,:COEFFICIENT,:PRODUCE,:NEW_CENA,:NEW_PROCENT; 
 
            -- НЯМАМ ИДЕЯ ЗАЩО ПАК СЕ СМЯТА ПРОЦЕНТА ОТ РЕЗУЛТАТИТЕ НА СЛЕДВАЩИТЕ ЛИСТИ?!?!?!? 
            -- ОСТАВЯМ ГО КАКТО Е, САМО ДОБАВЯМ БАЗОВИЯ ПРОЦЕНТ, ДАНО ДА Е ВЕРНО 
            NEW_CENA = ROUND(:NEW_CENA + :NEW_CENA * (:L_BASE_PERCENT / 100), 5); 
            NEW_CENA = ROUND(:NEW_CENA + :NEW_CENA*:PROCENT/100, 5); 
            NEW_PROCENT = PROCENT; 
 
            IF ((ROUND_TIP_ID IS NOT NULL) AND (ROUND_TIP_ID > 0)) THEN 
                EXECUTE PROCEDURE ZAKRAGLQVANE(:ID,:NEW_CENA,:ROUND_TIP_ID,:P_CENA) 
                RETURNING_VALUES :NEW_CENA, :NEW_PROCENT; 
 
            IF ((:ID IS NOT NULL) AND (NEW_CENA <> CENA)) THEN 
                SUSPEND; 
        END 
 
    END 
END^


ALTER PROCEDURE CL_GET_INFO_UPDATE1 (
    P_OPR TYPE OF DOM_KEY,
    P_SIM TYPE OF DOM_KEY,
    P_CENA TYPE OF DOM_CENA)
RETURNS (
    ID TYPE OF DOM_KEY,
    OT_OPR_ID TYPE OF DOM_KEY,
    OPR_ID TYPE OF DOM_KEY,
    NAME_CL TYPE OF DOM_CHAR_30,
    CENA TYPE OF DOM_CENA,
    PROCENT TYPE OF DOM_PERCENT,
    ROUND_TIP_ID TYPE OF DOM_KEY,
    NAME_ROUNT TYPE OF DOM_CHAR_20,
    UP_DOWN TYPE OF DOM_SMAL_INT,
    COEFFICIENT DOUBLE PRECISION,
    PRODUCE DOUBLE PRECISION,
    NEW_CENA TYPE OF DOM_CENA,
    NEW_PROCENT TYPE OF DOM_PERCENT)
AS
DECLARE VARIABLE L_BASE_PERCENT TYPE OF DOM_PERCENT; 
BEGIN 
    FOR SELECT 
        CENOVA_LISTA_EL.ID, 
        CENOVA_LISTA_EL.OT_OPR_ID, 
        CENOVA_LISTA_EL.OPR_ID, 
        CENOVA_LISTA.NAME NAME_CL, 
        CENOVA_LISTA_EL.CENA, 
        CENOVA_LISTA_EL.PROCENT, 
        CENOVA_LISTA_EL.ROUND_TIP_ID, 
        ROUND_TIP.NAME NAME_ROUNT, 
        ROUND_TIP.UP_DOWN, 
        ROUND_TIP.COEFFICIENT, 
        ROUND_TIP.PRODUCE, 
        CAST(0.00 AS DOUBLE PRECISION), 
        CAST(0.00 AS DOUBLE PRECISION), 
        COALESCE(CENOVA_LISTA.BASE_PERCENT, 0.00) 
    FROM 
        CENOVA_LISTA_EL INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
        LEFT JOIN ROUND_TIP ON ROUND_TIP.ID = CENOVA_LISTA_EL.ROUND_TIP_ID 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA_EL.OPR_ID) 
        AND CENOVA_LISTA_EL.TIP_OT_CENA = 0 
        AND CENOVA_LISTA_EL.OT_OPR_ID IS NOT NULL 
        AND CENOVA_LISTA_EL.OT_OPR_ID = :P_OPR 
        AND CENOVA_LISTA_EL.SIMPLE_ID = :P_SIM 
    INTO 
        :ID,:OT_OPR_ID,:OPR_ID,:NAME_CL,:CENA,:PROCENT,:ROUND_TIP_ID,:NAME_ROUNT, 
        :UP_DOWN,:COEFFICIENT,:PRODUCE,:NEW_CENA,:NEW_PROCENT, :L_BASE_PERCENT 
    DO BEGIN 
        NEW_CENA = ROUND(:P_CENA + :P_CENA * (:L_BASE_PERCENT/100), 5); 
        NEW_CENA = ROUND(:NEW_CENA + :NEW_CENA * (:PROCENT / 100), 5); 
 
        IF ((ROUND_TIP_ID IS NOT NULL) AND (ROUND_TIP_ID > 0) AND (NEW_CENA > 0)) THEN 
            EXECUTE PROCEDURE ZAKRAGLQVANE(:ID,:NEW_CENA,:ROUND_TIP_ID,:P_CENA) RETURNING_VALUES :NEW_CENA, :NEW_PROCENT; 
 
 
        SUSPEND; 
 
        EXECUTE PROCEDURE CL_GET_INFO_UPDATE(:OPR_ID,:P_SIM,:NEW_CENA) 
        RETURNING_VALUES :ID,:OT_OPR_ID,:OPR_ID,:NAME_CL,:CENA,:PROCENT,:ROUND_TIP_ID,:NAME_ROUNT, 
        :UP_DOWN,:COEFFICIENT,:PRODUCE,:NEW_CENA,:NEW_PROCENT; 
 
        NEW_CENA = ROUND(:NEW_CENA + :NEW_CENA * (:L_BASE_PERCENT / 100), 5); 
        NEW_CENA = ROUND(:NEW_CENA + :NEW_CENA * (:PROCENT / 100), 5); 
 
        IF ((ROUND_TIP_ID IS NOT NULL) AND (ROUND_TIP_ID > 0)) THEN 
            EXECUTE PROCEDURE ZAKRAGLQVANE(:ID,:NEW_CENA,:ROUND_TIP_ID,:P_CENA) 
            RETURNING_VALUES :NEW_CENA, :NEW_PROCENT; 
 
        IF ((:ID IS NOT NULL) AND (NEW_CENA <> CENA)) THEN 
            SUSPEND; 
    END 
END^


ALTER PROCEDURE CL_HISTORY_SAVE (
    SIM_ID INTEGER,
    OPR_ID_CL INTEGER,
    CENA_NEW DOUBLE PRECISION,
    USER_ID INTEGER,
    OPR_ID_E INTEGER,
    P_FROM_OPR_ID TYPE OF DOM_INT)
AS
declare variable CL_EL_ID integer; 
declare variable CENA_OLD double precision; 
begin 
  select 
    coalesce(OPR_ID,0), 
    cena 
  from cenova_lista_el 
  where 
    simple_id = :sim_id and 
    opr_id = :opr_id_cl 
  into :cl_el_id,:cena_old; 
 
  if ((cena_old <> cena_new) and (cl_el_id > 0)) then 
   insert into cenova_lista_history (cl_el_id, simple_id, user_id, cena_old, cena_new, dt,opr_id_e, opr_id) 
   values (:cl_el_id, :sim_id, :user_id, :cena_old, :cena_new, current_timestamp,:opr_id_e, :P_FROM_OPR_ID); 
end^


ALTER PROCEDURE CL_IZB_CENOVILISTI (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID_S VARCHAR(1000),
    P_OPR_ID INTEGER,
    P_PROD INTEGER,
    P_FAKT INTEGER)
RETURNS (
    R_OPR_ID INTEGER,
    R_CENA DOUBLE PRECISION,
    R_PROCENT DOUBLE PRECISION,
    R_NAME VARCHAR(50))
AS
declare variable L_ID integer; 
declare variable L_D date; 
declare variable L_IDD integer; 
declare variable L_KOL_SR double precision; 
declare variable L_SUMA_SR double precision; 
declare variable L_SR double precision; 
declare variable L_FR double precision; 
declare variable L_LR double precision; 
declare variable L_SIMPLE_DDS double precision; 
begin 
  if (p_fakt = 0) then begin 
  if (p_prod = 1) then begin 
    for SELECT 
      CAST(0 AS INTEGER) AS opr_id, 
      CAST(simple.cena_prod AS DOUBLE PRECISION) AS cena, 
      CAST(0 AS DOUBLE PRECISION) AS procent, 
      CAST(' <Базова продажна цена>' AS VARCHAR(30)) AS name 
    FROM simple 
    WHERE simple.id = :p_simple_id 
    into :r_opr_id,:r_cena,:r_procent,:r_name 
    do begin 
      suspend; 
      r_opr_id = null; 
      r_cena = null; 
      r_name = null; 
    end 
  end 
 
  if (p_opr_id > 0) then 
    execute procedure GET_DOSTAVNA_CENA_SKLAD(:p_opr_id,:p_simple_id) returning_values :r_cena; 
  else 
    execute procedure GET_DOSTAVNA_CENA_SKLAD(0,:p_simple_id) returning_values :r_cena; 
 
  if (r_cena is null) then 
    r_cena  = 0; 
 
  r_opr_id = -1; 
  r_name = ' <Доставна-Последна>'; 
  suspend; 
 
  r_opr_id = -5; 
  r_name = ' <Доставна-Последна с ДДС>'; 
 
  suspend; 
 
  r_opr_id = null; 
  r_cena = null; 
  r_procent = 0; 
  r_name = null; 
 
  if (:p_opr_id > 0) then 
    execute procedure GET_SR_CENA(:p_simple_id,:p_opr_id,'') returning_values :r_cena,:l_kol_sr,:l_suma_sr; 
  else 
    execute procedure GET_SR_CENA(:p_simple_id,0,:p_sklad_id_s) returning_values :r_cena,:l_kol_sr,:l_suma_sr; 
 
  if (r_cena is null) then 
    r_cena  = 0; 
 
  r_opr_id = -2; 
  r_name = ' <Доставна-Середно претеглена>'; 
  suspend; 
 
  r_opr_id = null; 
  r_cena = null; 
  r_procent = null; 
  r_name = null; 
 
 
  for SELECT 
    cenova_lista.opr_id, 
    cenova_lista.name 
  FROM cenova_lista 
  WHERE 
    cenova_lista.activna = 1 and 
    not exists (select opr_anul.id from opr_anul where opr_anul.an_opr_id = cenova_lista.opr_id) 
  into :l_id,:r_name 
  do begin 
    select 
      cenova_lista_el.opr_id, 
      cenova_lista_el.cena, 
      cenova_lista_el.procent 
    from cenova_lista_el 
    where 
      cenova_lista_el.simple_id = :p_simple_id and 
      cenova_lista_el.opr_id = :l_id 
    into :r_opr_id,:r_cena,:r_procent; 
    if (r_opr_id is not null) then 
      suspend; 
    r_opr_id = null; 
    r_cena = null; 
    r_procent = null; 
    r_name = null; 
  end 
  end 
  else begin 
    execute procedure GET_SR_FR_LR(p_simple_id) returning_values :l_sr,:l_fr,:l_lr; 
 
    r_procent = 0; 
 
    r_opr_id = -3; 
    r_name = ' <Доставна-Последна фактурна>'; 
    r_cena = coalesce(l_lr,0); 
    suspend; 
 
    r_opr_id = -4; 
    r_name = ' <Доставна-Середно претеглена фактурна>'; 
    r_cena = coalesce(l_sr,0); 
    suspend; 
  end 
end^


ALTER PROCEDURE CL_RAZLIKA_DOST (
    P_OPR_ID INTEGER,
    P_SKLAD_ID_S VARCHAR(1000))
RETURNS (
    SIMPLE_ID INTEGER,
    LAST_CENA DOUBLE PRECISION)
AS
declare variable L_DT_LAST_CENA timestamp; 
BEGIN 
  FOR 
    select 
      cenova_lista_tmp.sim_id 
    from cenova_lista_tmp 
    INTO :simple_id 
  DO 
  BEGIN 
    if (p_opr_id > 0) then 
      execute procedure get_dostavna_cena(:p_opr_id,:simple_id,'') returning_values :last_cena, :L_DT_LAST_CENA; 
    else 
      execute procedure get_dostavna_cena(0,:simple_id,:p_sklad_id_s) returning_values :last_cena, :L_DT_LAST_CENA; 
 
    if (last_cena is null) then 
      last_cena = 0; 
    SUSPEND; 
  END 
END^


ALTER PROCEDURE CL_RAZLIKA_SR (
    SKLAD_ID_S VARCHAR(1000),
    P_OPR_ID INTEGER)
RETURNS (
    SIMPLE_ID INTEGER,
    CENA_SR DOUBLE PRECISION)
AS
declare variable l_kol_sr double precision; 
declare variable l_suma_sr double precision; 
 
BEGIN  
  FOR  
    select  
      cenova_lista_tmp.sim_id  
    from cenova_lista_tmp  
    INTO :simple_id  
  DO BEGIN  
    if (:p_opr_id > 0) then  
      execute procedure GET_SR_CENA(:simple_id,:p_opr_id,'') returning_values :cena_sr,:l_kol_sr,:l_suma_sr; 
    else  
      execute procedure GET_SR_CENA(:simple_id,0,:sklad_id_s)  returning_values :cena_sr,:l_kol_sr,:l_suma_sr;  
    SUSPEND;  
  END  
END^


ALTER PROCEDURE CL_UPDATE_DOSTAVNA (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_CENA TYPE OF DOM_CENA,
    P_USER_ID TYPE OF DOM_KEY,
    OPR_ID_E TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY = 0)
AS
declare variable L_ID type of DOM_KEY; 
declare variable L_OPR_ID type of DOM_KEY; 
declare variable L_CENA type of DOM_CENA; 
declare variable L_PROCENT type of DOM_PERCENT; 
declare variable L_ROUND_TIP type of DOM_KEY; 
declare variable L_CENA_OLD type of DOM_CENA; 
declare variable L_BASE_PERCENT type of DOM_PERCENT; 
declare variable L_TIP type of DOM_SMAL_INT; 
BEGIN 
    FOR SELECT 
        CENOVA_LISTA_EL.ID, 
        CENOVA_LISTA_EL.OPR_ID, 
        CENOVA_LISTA_EL.PROCENT, 
        CENOVA_LISTA_EL.ROUND_TIP_ID, 
        CENOVA_LISTA_EL.CENA, 
        COALESCE(CENOVA_LISTA.BASE_PERCENT, 0.00), 
        CENOVA_LISTA_EL.TIP 
    FROM 
        CENOVA_LISTA_EL INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
    WHERE 
        CENOVA_LISTA_EL.OT_OPR_ID IS NULL 
        AND CENOVA_LISTA_EL.TIP_OT_CENA = 0 
        AND CENOVA_LISTA_EL.SIMPLE_ID = :P_SIMPLE_ID 
        AND CENOVA_LISTA_EL.TIP in (1, 2, 5) 
        AND (:P_SKLAD_ID <> 0 AND 
        ((exists (SELECT PLDS.id from PRICE_LIST_DELIVERY_STORAGES PLDS where plds.PRICE_LIST_ID = cenova_lista_el.OPR_ID and plds.STORAGE_ID =:p_sklad_id)) 
        OR (SELECT COUNT(PLDS.ID) FROM PRICE_LIST_DELIVERY_STORAGES PLDS WHERE PLDS.PRICE_LIST_ID = CENOVA_LISTA_EL.OPR_ID) = 0)) 
    ORDER BY 1 
    INTO 
        :L_ID,:L_OPR_ID,:L_PROCENT,:L_ROUND_TIP,:L_CENA_OLD, :L_BASE_PERCENT, :L_TIP 
    DO BEGIN 
        --IF (L_TIP) THEN 
 
        L_CENA = ROUND(:P_CENA + :P_CENA * (:L_BASE_PERCENT / 100), 5); 
        L_CENA = ROUND(:L_CENA + :L_CENA * (:L_PROCENT / 100), 5); 
 
        IF ((L_ROUND_TIP IS NOT NULL) AND (L_ROUND_TIP > 0) AND (L_CENA > 0)) THEN 
        EXECUTE PROCEDURE ZAKRAGLQVANE(:L_ID,:L_CENA,:L_ROUND_TIP,:P_CENA) 
        RETURNING_VALUES :L_CENA, :L_PROCENT; 
 
        UPDATE CENOVA_LISTA_EL SET 
            CENOVA_LISTA_EL.CENA = :L_CENA, 
            CENOVA_LISTA_EL.PROCENT = :L_PROCENT 
        WHERE 
            CENOVA_LISTA_EL.ID = :L_ID; 
 
        EXECUTE PROCEDURE SAVE_CL_HISTORY(:L_OPR_ID, :P_SIMPLE_ID, :P_USER_ID, :L_CENA_OLD, :L_CENA,:OPR_ID_E); 
        EXECUTE PROCEDURE CENOVA_LISTA_UPDATE(:L_OPR_ID,:P_SIMPLE_ID,:L_CENA, :P_USER_ID,:OPR_ID_E); 
    END 
END^


ALTER PROCEDURE CL_UPDATE_DROM_DOST_EDIT (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_CENA TYPE OF DOM_CENA,
    P_USER_ID TYPE OF DOM_KEY,
    OPR_ID_E TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY = 0)
AS
declare variable L_ID type of DOM_KEY; 
declare variable L_OPR_ID type of DOM_KEY; 
declare variable L_CENA type of DOM_CENA; 
declare variable L_PROCENT type of DOM_PERCENT; 
declare variable L_ROUND_TIP type of DOM_KEY; 
declare variable L_CENA_OLD type of DOM_CENA; 
declare variable L_BASE_PERCENT type of DOM_PERCENT; 
declare variable L_TIP type of DOM_SMAL_INT; 
declare variable L_TIP_CENI type of DOM_SMAL_INT; 
declare variable L_SIMPLE_DDS type of DOM_PERCENT; 
BEGIN 
    SELECT FIRST 1 
        LOG_CENI_DDS.TIP_CENI --0 без ддс, 1 - със ддс 
    FROM 
        LOG_CENI_DDS 
    WHERE 
        LOG_CENI_DDS.TIP_DDS = 0 AND LOG_CENI_DDS.OPR_ID < :P_OPR_ID 
    ORDER BY LOG_CENI_DDS.ID DESC 
    INTO :L_TIP_CENI; 
 
    FOR SELECT 
        CENOVA_LISTA_EL.ID, 
        CENOVA_LISTA_EL.OPR_ID, 
        CENOVA_LISTA_EL.PROCENT, 
        CENOVA_LISTA_EL.ROUND_TIP_ID, 
        CENOVA_LISTA_EL.CENA, 
        COALESCE(CENOVA_LISTA.BASE_PERCENT, 0.00), 
        CENOVA_LISTA_EL.TIP, 
        SIMPLE.DDS 
    FROM 
        CENOVA_LISTA_EL INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = CENOVA_LISTA_EL.SIMPLE_ID 
    WHERE 
        CENOVA_LISTA_EL.OT_OPR_ID IS NULL 
        AND CENOVA_LISTA_EL.TIP_OT_CENA = 0 
        AND CENOVA_LISTA_EL.SIMPLE_ID = :P_SIMPLE_ID 
        AND CENOVA_LISTA_EL.TIP in (1, 2, 5) 
        AND (:P_SKLAD_ID <> 0 AND 
        ((exists (SELECT PLDS.id from PRICE_LIST_DELIVERY_STORAGES PLDS where plds.PRICE_LIST_ID = cenova_lista_el.OPR_ID and plds.STORAGE_ID =:p_sklad_id)) 
        OR (SELECT COUNT(PLDS.ID) FROM PRICE_LIST_DELIVERY_STORAGES PLDS WHERE PLDS.PRICE_LIST_ID = CENOVA_LISTA_EL.OPR_ID) = 0)) 
    ORDER BY 1 
    INTO 
        :L_ID,:L_OPR_ID,:L_PROCENT,:L_ROUND_TIP,:L_CENA_OLD, :L_BASE_PERCENT, :L_TIP, :L_SIMPLE_DDS 
    DO BEGIN 
        L_CENA =:P_CENA; 
        IF ((L_TIP = 5) AND (L_TIP_CENI = 0)) THEN 
            L_CENA = ROUND(:P_CENA + :P_CENA * (:L_SIMPLE_DDS / 100), 5); 
 
        IF ((L_TIP = 2) AND (L_TIP_CENI = 1)) THEN 
            L_CENA = ROUND(:P_CENA / (1 + :L_SIMPLE_DDS / 100)); 
 
        L_CENA = ROUND(:L_CENA + :L_CENA * (:L_BASE_PERCENT / 100), 5); 
        L_CENA = ROUND(:L_CENA + :L_CENA * (:L_PROCENT / 100), 5); 
 
        IF ((L_ROUND_TIP IS NOT NULL) AND (L_ROUND_TIP > 0) AND (L_CENA > 0)) THEN 
        EXECUTE PROCEDURE ZAKRAGLQVANE(:L_ID,:L_CENA,:L_ROUND_TIP,:P_CENA) 
        RETURNING_VALUES :L_CENA, :L_PROCENT; 
 
        UPDATE CENOVA_LISTA_EL SET 
            CENOVA_LISTA_EL.CENA = :L_CENA, 
            CENOVA_LISTA_EL.PROCENT = :L_PROCENT 
        WHERE 
            CENOVA_LISTA_EL.ID = :L_ID; 
 
        EXECUTE PROCEDURE SAVE_CL_HISTORY(:L_OPR_ID, :P_SIMPLE_ID, :P_USER_ID, :L_CENA_OLD, :L_CENA,:OPR_ID_E); 
        EXECUTE PROCEDURE CENOVA_LISTA_UPDATE(:L_OPR_ID,:P_SIMPLE_ID,:L_CENA, :P_USER_ID,:OPR_ID_E); 
    END 
END^


ALTER PROCEDURE CL_UPDATE_FAKT (
    P_SIM_ID TYPE OF DOM_KEY,
    P_USER_ID TYPE OF DOM_KEY,
    P_OPR_ID_E_CL TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_CENA_OLD TYPE OF DOM_CENA; 
DECLARE VARIABLE L_CENA_NEW TYPE OF DOM_CENA; 
DECLARE VARIABLE L_PROCENT TYPE OF DOM_PERCENT; 
DECLARE VARIABLE L_ROUND_TIP_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_TIP TYPE OF DOM_INT; 
DECLARE VARIABLE L_CENA_SR_NAL TYPE OF DOM_CENA; 
DECLARE VARIABLE L_CENA_LR_NAL TYPE OF DOM_CENA; 
DECLARE VARIABLE L_CL_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_BASE_PERCENT TYPE OF DOM_PERCENT; 
BEGIN 
    SELECT 
        CASE WHEN KOL_NAL > 0 THEN ROUND5(SUMA/KOL_NAL) ELSE 0 END, 
        COALESCE(LAST_CENA,0) 
    FROM 
        NAL 
    WHERE 
        SIMPLE_ID = :P_SIM_ID 
        AND SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
    INTO 
        :L_CENA_SR_NAL,:L_CENA_LR_NAL; 
 
    SELECT 
        CLE.ID, 
        CLE.CENA, 
        CLE.PROCENT, 
        COALESCE(CLE.ROUND_TIP_ID,0), 
        CLE.TIP, 
        CLE.OPR_ID, 
        COALESCE(CENOVA_LISTA.BASE_PERCENT, 0.00) 
    FROM 
        CENOVA_LISTA_EL CLE INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CLE.OPR_ID 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CLE.OPR_ID) 
        AND CLE.SIMPLE_ID = :P_SIM_ID 
        AND CLE.OT_OPR_ID IS NULL 
        AND CLE.TIP IN (3,4) 
        AND CLE.TIP_OT_CENA = 0 
    INTO 
        :L_ID,:L_CENA_OLD,:L_PROCENT,:L_ROUND_TIP_ID,:L_TIP,:L_CL_OPR_ID, :L_BASE_PERCENT; 
 
    IF (L_TIP = 3) THEN 
        L_CENA_NEW = ROUND(:L_CENA_LR_NAL + :L_CENA_LR_NAL * (:L_BASE_PERCENT/100), 5); 
    ELSE 
        L_CENA_NEW = ROUND(:L_CENA_SR_NAL + :L_CENA_SR_NAL * (:L_BASE_PERCENT/100), 5); 
 
    L_CENA_NEW = ROUND(:L_CENA_NEW + :L_CENA_NEW * (:L_PROCENT/100), 5); 
 
    IF (L_ROUND_TIP_ID > 0) THEN 
        EXECUTE PROCEDURE ZAKRAGLQVANE(:L_ID,:L_CENA_NEW,:L_ROUND_TIP_ID,:L_CENA_OLD) 
        RETURNING_VALUES :L_CENA_NEW, :L_PROCENT; 
 
    UPDATE CENOVA_LISTA_EL SET 
        CENA = :L_CENA_NEW, 
        PROCENT = :L_PROCENT 
    WHERE 
        ID = :L_ID; 
 
    EXECUTE PROCEDURE SAVE_CL_HISTORY(:L_CL_OPR_ID, :P_SIM_ID, :P_USER_ID, :L_CENA_OLD, :L_CENA_NEW,:P_OPR_ID_E_CL); 
END^


ALTER PROCEDURE CL_UPDATE_SR (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_UPDATE TYPE OF DOM_SMAL_INT,
    P_USER_ID TYPE OF DOM_KEY,
    OPR_ID_E TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY = 0)
AS
declare variable L_OPR_ID type of DOM_KEY; 
declare variable L_CENA_SR type of DOM_CENA; 
declare variable L_CL_EL_ID type of DOM_KEY; 
declare variable L_CENA type of DOM_CENA; 
declare variable L_ROUND_TIP type of DOM_KEY; 
declare variable L_PROCENT type of DOM_PERCENT; 
declare variable L_CENA_SS type of DOM_CENA; 
declare variable L_SR_CENA type of DOM_CENA; 
declare variable L_SR_KOL type of DOM_KOL; 
declare variable L_BASE_PERCENT type of DOM_PERCENT; 
BEGIN 
    FOR SELECT 
        CENOVA_LISTA_EL.OPR_ID, 
        CENOVA_LISTA_EL.ID, 
        CENOVA_LISTA_EL.CENA, 
        CENOVA_LISTA_EL.PROCENT, 
        CENOVA_LISTA_EL.ROUND_TIP_ID, 
        COALESCE(CENOVA_LISTA.BASE_PERCENT, 0.00) 
    FROM 
        CENOVA_LISTA_EL INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
        AND CENOVA_LISTA_EL.TIP = 2 AND CENOVA_LISTA_EL.TIP_OT_CENA = 0 
        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID) 
        and (:p_sklad_id <> 0 and 
        ((exists (SELECT PLDS.id from PRICE_LIST_DELIVERY_STORAGES PLDS where plds.PRICE_LIST_ID = cenova_lista_el.OPR_ID and plds.STORAGE_ID =:p_sklad_id)) 
        OR (SELECT COUNT(PLDS.ID) FROM PRICE_LIST_DELIVERY_STORAGES PLDS WHERE PLDS.PRICE_LIST_ID = CENOVA_LISTA_EL.OPR_ID) = 0)) 
    WHERE 
        CENOVA_LISTA_EL.SIMPLE_ID = :P_SIMPLE_ID 
    INTO 
        :L_OPR_ID, :L_CL_EL_ID, :L_CENA, :L_PROCENT, :L_ROUND_TIP, :L_BASE_PERCENT 
    DO BEGIN 
        EXECUTE PROCEDURE GET_SR_CENA(:P_SIMPLE_ID, :L_OPR_ID, '') 
        RETURNING_VALUES :L_CENA_SR, :L_SR_KOL, :L_SR_CENA; 
 
        L_CENA_SS = ROUND(:L_CENA_SR + :L_CENA_SR * (:L_BASE_PERCENT / 100), 5); 
        L_CENA_SS = ROUND(:L_CENA_SS + :L_CENA_SS * (:L_PROCENT / 100), 5); 
 
        IF ((L_ROUND_TIP IS NOT NULL) AND (L_ROUND_TIP > 0) AND (L_CENA_SS > 0)) THEN 
            EXECUTE PROCEDURE ZAKRAGLQVANE(:L_CL_EL_ID,:L_CENA_SS,:L_ROUND_TIP,:L_CENA_SR) 
            RETURNING_VALUES :L_CENA, :L_PROCENT; 
 
        UPDATE CENOVA_LISTA_EL SET 
            CENA = :L_CENA_SS, 
            PROCENT = :L_PROCENT 
        WHERE 
            ID = :L_CL_EL_ID; 
 
        EXECUTE PROCEDURE SAVE_CL_HISTORY(:L_OPR_ID, :P_SIMPLE_ID, :P_USER_ID, :L_CENA, :L_CENA_SS,:OPR_ID_E); 
 
        IF (P_UPDATE = 1) THEN 
            EXECUTE PROCEDURE CENOVA_LISTA_UPDATE(:L_OPR_ID,:P_SIMPLE_ID,:L_CENA_SS,:P_USER_ID,:OPR_ID_E); 
 
    END 
END^


ALTER PROCEDURE CLONE_SIMPLE (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_COUNT TYPE OF DOM_INT,
    P_USER_ID TYPE OF DOM_INT)
RETURNS (
    R_NEW_SIMPLE_ID TYPE OF DOM_KEY)
AS
declare variable L_OPR_ID type of DOM_INT; 
declare variable L_INDEX type of DOM_SMAL_INT; 
declare variable L_OT_OPR_ID type of DOM_INT; 
declare variable L_CL_TIP type of DOM_SMAL_INT; 
declare variable L_PROCENT type of DOM_PERCENT; 
declare variable L_CENA type of DOM_CENA; 
declare variable L_TIP_OT_CENA type of DOM_INT; 
declare variable L_ROUND_TIP_ID type of DOM_INT; 
declare variable L_FLAG_LOCK type of DOM_SMAL_INT; 
declare variable L_SEL_ID type of DOM_INT; 
declare variable L_NEW_SIMPLE_ID type of DOM_INT; 
BEGIN 
    l_index = 1; 
 
    WHILE (:L_INDEX <= P_COUNT) DO BEGIN 
        INSERT INTO SIMPLE(NAME, NAME_SHORT, CODE, ME_ID, SIMPLE_GROUP_ID, "ACTIVE", ACTIVE_FAK, DDS, KOL_KRI_MIN, KOL_KRI_MAX, 
            DEFAULT_RAZ_ID, USLUGA, RSN, FLAG_CHECK, RAZ_TIP_ID, AMBALAJ, ACTIVE_SCALE, GODNOST, BRUTO, DEF_SEL_ID, RAZPAD, 
            G_KRI_DOST, G_KRI_MIN, G_PERIOD, G_TIP, ME2_ID, FLAF_AMBALAJ, DEF_SEL_CALC, CODE2, TEMPERATURA, SUMA_DOST_CALC, 
            GR_ZAMQNA_ID, IS_BONUS, USE_PROP, NAME_2, FLAG_PROIZHOD, EXT1, USE_EXPLAN, MARK_AS_BROI, SASTAV_ID, FLAG_VAUCHER, 
            FLAG_MENU, GARANZIA_EXT, PREPARE_TIME, MENU_TEXT, COUNT_DEL, FLAG_RAZPAD_QTY, EXT2, VAT_GROUP, ADRESIRANE_ID, 
            COEFF_ME, VAT_REASON_ID, DEF_DOST_KLI_ID, CODE_SIMILAR) 
        SELECT 
            SIMPLE.NAME ||' - '||:L_INDEX, 
            SIMPLE.NAME_SHORT, 
            SIMPLE.CODE, 
            SIMPLE.ME_ID, 
            SIMPLE.SIMPLE_GROUP_ID, 
            SIMPLE."ACTIVE", 
            SIMPLE.ACTIVE_FAK, 
            SIMPLE.DDS, 
            SIMPLE.KOL_KRI_MIN, 
            SIMPLE.KOL_KRI_MAX, 
            SIMPLE.DEFAULT_RAZ_ID, 
            SIMPLE.USLUGA, 
            SIMPLE.RSN, 
            SIMPLE.FLAG_CHECK, 
            SIMPLE.RAZ_TIP_ID, 
            SIMPLE.AMBALAJ, 
            SIMPLE.ACTIVE_SCALE, 
            SIMPLE.GODNOST, 
            SIMPLE.BRUTO, 
            SIMPLE.DEF_SEL_ID, 
            SIMPLE.RAZPAD, 
            SIMPLE.G_KRI_DOST, 
            SIMPLE.G_KRI_MIN, 
            SIMPLE.G_PERIOD, 
            SIMPLE.G_TIP, 
            SIMPLE.ME2_ID, 
            SIMPLE.FLAF_AMBALAJ, 
            SIMPLE.DEF_SEL_CALC, 
            SIMPLE.CODE2, 
            SIMPLE.TEMPERATURA, 
            SIMPLE.SUMA_DOST_CALC, 
            SIMPLE.GR_ZAMQNA_ID, 
            SIMPLE.IS_BONUS, 
            SIMPLE.USE_PROP, 
            SIMPLE.NAME_2, 
            SIMPLE.FLAG_PROIZHOD, 
            SIMPLE.EXT1, 
            SIMPLE.USE_EXPLAN, 
            SIMPLE.MARK_AS_BROI, 
            SIMPLE.SASTAV_ID, 
            SIMPLE.FLAG_VAUCHER, 
            SIMPLE.FLAG_MENU, 
            SIMPLE.GARANZIA_EXT, 
            SIMPLE.PREPARE_TIME, 
            SIMPLE.MENU_TEXT, 
            SIMPLE.COUNT_DEL, 
            SIMPLE.FLAG_RAZPAD_QTY, 
            SIMPLE.EXT2, 
            SIMPLE.VAT_GROUP, 
            SIMPLE.ADRESIRANE_ID, 
            SIMPLE.COEFF_ME, 
            SIMPLE.VAT_REASON_ID, 
            SIMPLE.DEF_DOST_KLI_ID, 
            SIMPLE.CODE_SIMILAR 
        FROM 
            SIMPLE 
        WHERE 
            SIMPLE.ID =:P_SIMPLE_ID 
 
        RETURNING ID INTO :R_NEW_SIMPLE_ID; 
 
        INSERT INTO CFG_LOG(DATETIME, USER_ID, IP, TABLE_CODE, OBJ_ID, OPR_TIP) 
        VALUES (CURRENT_TIMESTAMP, :P_USER_ID, -1, 9, :R_NEW_SIMPLE_ID, 'A'); 
 
        INSERT INTO SIMPLE_CALC(SIMPLE_ID, CHILD_SIMPLE_ID, KOL, FORMULA, 
            CHILD_SEL_ID, SEL_TEXT, MIN_KOL, MAX_KOL, A_SN, 
            PERCENT_LOST, PERCENT_SUM, SORT_INDEX, FORMULA2, KOL2) 
        SELECT 
            :R_NEW_SIMPLE_ID, 
            SIMPLE_CALC.CHILD_SIMPLE_ID, 
            SIMPLE_CALC.KOL, 
            SIMPLE_CALC.FORMULA, 
            SIMPLE_CALC.CHILD_SEL_ID, 
            SIMPLE_CALC.SEL_TEXT, 
            SIMPLE_CALC.MIN_KOL, 
            SIMPLE_CALC.MAX_KOL, 
            SIMPLE_CALC.A_SN, 
            SIMPLE_CALC.PERCENT_LOST, 
            SIMPLE_CALC.PERCENT_SUM, 
            SIMPLE_CALC.SORT_INDEX, 
            SIMPLE_CALC.FORMULA2, 
            SIMPLE_CALC.KOL2 
        FROM 
            SIMPLE_CALC 
        WHERE 
            SIMPLE_CALC.SIMPLE_ID =:P_SIMPLE_ID; 
 
        INSERT INTO BARCODE(SIMPLE_ID, BARCODE, KOL, NAME) 
        SELECT 
            :R_NEW_SIMPLE_ID, 
            BARCODE.BARCODE, 
            BARCODE.KOL, 
            BARCODE.NAME 
        FROM 
            BARCODE 
        WHERE 
            BARCODE.SIMPLE_ID =:P_SIMPLE_ID; 
        FOR SELECT 
            CENOVA_LISTA_EL.OPR_ID, 
            CENOVA_LISTA_EL.OT_OPR_ID, 
            :R_NEW_SIMPLE_ID, 
            CENOVA_LISTA_EL.TIP, 
            CENOVA_LISTA_EL.PROCENT, 
            CENOVA_LISTA_EL.CENA, 
            CENOVA_LISTA_EL.TIP_OT_CENA, 
            CENOVA_LISTA_EL.ROUND_TIP_ID, 
            CENOVA_LISTA_EL.FLAG_LOCK, 
            CENOVA_LISTA_EL.SEL_ID 
        FROM 
            CENOVA_LISTA_EL 
        WHERE 
            CENOVA_LISTA_EL.SIMPLE_ID =:P_SIMPLE_ID 
        INTO :L_OPR_ID, :L_OT_OPR_ID, :R_NEW_SIMPLE_ID, :L_CL_TIP, :L_PROCENT, :L_CENA, :L_TIP_OT_CENA, 
            :L_ROUND_TIP_ID, :L_FLAG_LOCK, :L_SEL_ID 
 
        DO BEGIN 
            UPDATE OR INSERT INTO CENOVA_LISTA_EL(OPR_ID, OT_OPR_ID, SIMPLE_ID, TIP, PROCENT, CENA, TIP_OT_CENA, 
            ROUND_TIP_ID, FLAG_LOCK, SEL_ID, DT_ADD) 
            values(:L_OPR_ID, :L_OT_OPR_ID, :R_NEW_SIMPLE_ID, :L_CL_TIP, :L_PROCENT, :L_CENA, :L_TIP_OT_CENA, 
            :L_ROUND_TIP_ID, :L_FLAG_LOCK, :L_SEL_ID, CURRENT_TIMESTAMP) 
 
            MATCHING(OPR_ID, SIMPLE_ID); 
        END 
 
        INSERT INTO SIMPLE_PROP_NODE(SIMPLE_ID, MAJOR_PROP_ID) 
        SELECT 
            :R_NEW_SIMPLE_ID, 
            SIMPLE_PROP_NODE.MAJOR_PROP_ID 
        FROM 
            SIMPLE_PROP_NODE 
        WHERE 
            SIMPLE_PROP_NODE.SIMPLE_ID =:P_SIMPLE_ID; 
 
        if (l_index = 1) then 
            L_NEW_SIMPLE_ID =:R_NEW_SIMPLE_ID; 
 
        L_INDEX = L_INDEX + 1; 
 
    END 
 
    R_NEW_SIMPLE_ID =:L_NEW_SIMPLE_ID; 
    SUSPEND; 
END^


ALTER PROCEDURE COPY_TABLE_PRICES (
    P_FROM_SIMPLE_ID TYPE OF DOM_KEY,
    P_TO_SIMPLE_ID TYPE OF DOM_KEY,
    P_ROUND_TIP_ID TYPE OF DOM_KEY,
    P_COEFFICIENT TYPE OF DOM_CENA)
AS
DECLARE VARIABLE L_UPDOWN TYPE OF DOM_INT; 
DECLARE VARIABLE L_COEFFICIENT TYPE OF DOM_PERCENT; 
DECLARE VARIABLE L_PRODUCE TYPE OF DOM_CENA; 
DECLARE VARIABLE L_MULTIPLICATION TYPE OF DOM_CENA; 
DECLARE VARIABLE L_TP_PRICE TYPE OF DOM_CENA; 
DECLARE VARIABLE L_NEW_PRICE TYPE OF DOM_CENA; 
DECLARE VARIABLE L_WIDTH TYPE OF DOM_KOL; 
DECLARE VARIABLE L_HEIGHT TYPE OF DOM_KOL; 
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_KEY; 
BEGIN 
    DELETE FROM TMP_SIMPLE_TABLE_PRICES; 
 
    INSERT INTO TMP_SIMPLE_TABLE_PRICES(PRICE, WIDTH, HEIGHT, SIMPLE_ID) 
    SELECT 
        ROUND(STP.PRICE, 5), 
        STP.WIDTH, 
        STP.HEIGHT , 
        STP.SELECT_SIMPLE_ID 
    FROM 
        SIMPLE_TABLE_PRICES STP 
    WHERE 
        STP.SIMPLE_ID = :P_FROM_SIMPLE_ID; 
 
    DELETE FROM SIMPLE_TABLE_PRICES 
    WHERE 
        SIMPLE_TABLE_PRICES.SIMPLE_ID = :P_TO_SIMPLE_ID; 
 
    P_COEFFICIENT = COALESCE(P_COEFFICIENT, 1.00); 
 
    IF (P_ROUND_TIP_ID IS NOT NULL) THEN BEGIN 
        SELECT 
            ROUND_TIP.UP_DOWN, 
            ROUND_TIP.COEFFICIENT, 
            ROUND_TIP.PRODUCE 
        FROM 
            ROUND_TIP 
        WHERE 
            ROUND_TIP.ID = :P_ROUND_TIP_ID 
        INTO 
            :L_UPDOWN, :L_COEFFICIENT, :L_PRODUCE; 
 
        L_MULTIPLICATION = 1 / L_COEFFICIENT; 
 
        FOR SELECT 
            STP.HEIGHT, 
            STP.WIDTH, 
            ROUND(STP.PRICE * :P_COEFFICIENT, 5) , 
            STP.SIMPLE_ID 
        FROM 
            TMP_SIMPLE_TABLE_PRICES STP 
        INTO 
            :L_HEIGHT, :L_WIDTH, :L_TP_PRICE, :L_SIMPLE_ID 
        DO BEGIN 
 
            IF (L_UPDOWN = 0) THEN BEGIN 
                L_NEW_PRICE = CAST(L_TP_PRICE * L_MULTIPLICATION + 0.9999999999 AS INTEGER); 
 
                IF (L_NEW_PRICE > (L_TP_PRICE * L_MULTIPLICATION + 0.9999999999)) THEN 
                    L_NEW_PRICE = L_NEW_PRICE - 1.00; 
            END 
            ELSE IF (L_UPDOWN = 1) THEN BEGIN 
                L_NEW_PRICE = CAST(L_TP_PRICE * L_MULTIPLICATION AS INTEGER); 
                IF (L_NEW_PRICE > (L_TP_PRICE * L_MULTIPLICATION)) THEN 
                    L_NEW_PRICE = L_NEW_PRICE - 1.00; 
            END 
            ELSE BEGIN 
                L_NEW_PRICE = CAST(L_TP_PRICE * L_MULTIPLICATION AS INTEGER); 
            END 
 
            L_NEW_PRICE = ROUND(L_NEW_PRICE /L_MULTIPLICATION, 5); 
 
            IF (L_NEW_PRICE < 0) THEN 
                L_NEW_PRICE = ROUND(L_COEFFICIENT, 5); 
 
            IF ((L_PRODUCE IS NOT NULL) AND (L_NEW_PRICE > L_PRODUCE)) THEN 
                L_NEW_PRICE = ROUND(L_NEW_PRICE - L_PRODUCE, 5); 
 
            INSERT INTO SIMPLE_TABLE_PRICES (PRICE, SIMPLE_ID, WIDTH, HEIGHT, SELECT_SIMPLE_ID) 
            VALUES(:L_NEW_PRICE, :P_TO_SIMPLE_ID, :l_WIDTH, :L_HEIGHT, :L_SIMPLE_ID); 
 
        END 
    END 
    ELSE BEGIN 
        INSERT INTO SIMPLE_TABLE_PRICES (PRICE, SIMPLE_ID, WIDTH, HEIGHT, SELECT_SIMPLE_ID) 
        SELECT 
            ROUND(STP.PRICE * :P_COEFFICIENT, 5), 
            :P_TO_SIMPLE_ID, 
            STP.WIDTH, 
            STP.HEIGHT, 
            STP.SIMPLE_ID 
        FROM 
            TMP_SIMPLE_TABLE_PRICES STP; 
    END 
END^


ALTER PROCEDURE CRM_ADD_HEADAR (
    P_TASKS_TIP_ID INTEGER,
    P_KLI_ID INTEGER,
    P_STATUS_TASKS INTEGER,
    P_OPR_ID INTEGER,
    P_NOTE BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    P_DOSHLO INTEGER)
RETURNS (
    R_ID INTEGER)
AS
declare variable l_id integer; 
declare variable l_opr integer; 
declare variable l_kli integer; 
begin 
 
  if (:p_opr_id = 0) then 
    l_opr = null; 
  else 
    l_opr = :p_opr_id; 
 
  if (:p_kli_id = 0) then 
    l_kli = null; 
  else 
    l_kli = :p_kli_id; 
 
  insert into tasks (tasks_tip_id, kli_id, status_tasks, dt, opr_id, DOSHLO) 
  values (:p_tasks_tip_id, :l_kli, :p_status_tasks, current_timestamp, :l_opr,:p_doshlo) 
  returning id into :r_id; 
 
  if (:p_note <> '') then 
    execute procedure ADD_COMMENT(:p_note,'COMMENT_TASKS_NODE','TASKS_ID',:r_id,0,'') returning_values :l_id; 
 
end^


ALTER PROCEDURE DEC_OTC_SUMI (
    P_SUMA DOUBLE PRECISION,
    P_SKLAD_ID INTEGER,
    P_USER_ID INTEGER,
    P_OTC_OPR_ID INTEGER,
    P_OPR_TYPE SMALLINT)
AS
BEGIN
/*V.2
НАМАЛЯВАМЕ СУМИТЕ В ОТЧЕТА
P_SUMA СУМАТА, С КОЯТО СЕ НАМАЛЯВА
P_SKLAD_ID СУМАТА ЗА КОЙ СКЛАД ДА СЕ НАМАЛЛИ
P_USER_ID СУМАТА НА КОЙ ОПЕРАТОР ДА СЕ НАМАЛИ
P_OTC_OPR_ID ОПРЕДЕЛЯ КОЙ Е ОТЧЕТА, ЧИЙТО СУМИ СЕ РЕДАКТИРАТ
*/
    IF (P_OPR_TYPE = 1) THEN BEGIN
        /*НАМАЛЯВАМЕ СУМАТА ОТ ДОСТАВКИ*/
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - :P_SUMA)
        WHERE OTC_EL.TIP_SUMA = 2
        AND OTC_EL.OPR_ID = :P_OTC_OPR_ID;
    
        /*НАМАЛЯВАМ СУМАТА ОТ ПРОДАЖБИ ЗА ОПЕРАТОРА ИЗВЪРШИЛ ДОСТАВКАТА*/
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - :P_SUMA)
        WHERE OTC_EL.TIP_SUMA = 4
        AND OTC_EL.OPR_ID = :P_OTC_OPR_ID
        AND OTC_EL.SUMA_ID = :P_USER_ID;

        /*НАМАЛЯВАМ СУМАТА ОТ ДОСТАВКИ ЗА СКЛАДА, КЪМ КОЙТО Е ИЗВЪРШЕНА ДОСТАВКАТА*/
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - :P_SUMA)
        WHERE OTC_EL.TIP_SUMA = 6
        AND OTC_EL.OPR_ID = :P_OTC_OPR_ID
        AND OTC_EL.SUMA_ID = :P_SKLAD_ID;
    END
    ELSE IF (P_OPR_TYPE = 2) THEN BEGIN
        /*НАМАЛЯВАМЕ СУМАТА ОТ ПРОДАЖБИ*/
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - :P_SUMA)
        WHERE OTC_EL.TIP_SUMA = 1
        AND OTC_EL.OPR_ID = :P_OTC_OPR_ID;
    
        /*НАМАЛЯВАМ СУМАТА ОТ ПРОДАЖБИ ЗА ОПЕРАТОРА ИЗВЪРШИЛ ПРОДАЖБАТА*/
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - :P_SUMA)
        WHERE OTC_EL.TIP_SUMA = 3
        AND OTC_EL.OPR_ID = :P_OTC_OPR_ID
        AND OTC_EL.SUMA_ID = :P_USER_ID;

        /*НАМАЛЯВАМ СУМАТА ОТ ПРОДАЖБИ ЗА СКЛАДА, КЪМ КОЙТО Е ИЗВЪРШЕНА ПРОДАЖБАТА*/
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - :P_SUMA)
        WHERE OTC_EL.TIP_SUMA = 5
        AND OTC_EL.OPR_ID = :P_OTC_OPR_ID
        AND OTC_EL.SUMA_ID = :P_SKLAD_ID;
    END
END^


ALTER PROCEDURE DEC_PARI_OTC_EDIT (
    P_OPR_ID INTEGER,
    P_USER_EDIT INTEGER,
    P_IP INTEGER,
    P_SUMA DOUBLE PRECISION)
AS
DECLARE VARIABLE L_PARI_ID INTEGER; 
DECLARE VARIABLE L_DATETIME DATE; 
DECLARE VARIABLE L_ADD_OPR INTEGER; 
DECLARE VARIABLE L_USER INTEGER; 
DECLARE VARIABLE L_OPR_ID INTEGER; 
BEGIN 
/*V.5*/ 
 
    L_PARI_ID = NULL; 
    SELECT 
        PARI_SKLOPR_NODE.OPR_PARI_ID 
    FROM 
        PARI_SKLOPR_NODE 
    WHERE 
        PARI_SKLOPR_NODE.OPR_ID = :P_OPR_ID 
    INTO 
        :L_PARI_ID;/*ID НА РЕД ОТ КАСА, АКО ИМА ДОБАВЕН ЗА ОТЧЕТ*/ 
 
    IF (L_PARI_ID IS NOT NULL) THEN BEGIN 
        SELECT 
            OPR.USER_ID, 
            OPR.OPR_DATE 
        FROM     
            OPR 
        WHERE 
            OPR.ID = :L_PARI_ID 
        INTO 
            :L_USER,:L_DATETIME; 
        /*1 КОЯ Е РЕДАКТИРАНАТА ОПЕРАЦИЯ, 2. КОЕ Е IP-ТО, КОИ Е ПОТРЕБИТЕЛЯ НАПРАВИЛ 
        ТАЗИ ОПЕРАЦИЯ КАСА(ОТЧЕТ) И ДАТАТА НА ИЗВЪРШВАНЕ НА ОПЕРАЦИЯТА*/ 
 
        EXECUTE PROCEDURE ADD_OPR(210,CURRENT_DATE,P_IP,P_USER_EDIT,NULL, NULL,NULL) 
        RETURNING_VALUES :L_ADD_OPR;/*ID НА ОПЕРАЦИЯ РЕДАКЦИЯ КАСА*/ 
 
        EXECUTE PROCEDURE ADD_OPR_EDIT(L_ADD_OPR,L_PARI_ID,NULL,L_USER,NULL,NULL,L_DATETIME) 
        RETURNING_VALUES :L_OPR_ID; 
 
        /*НАМАЛЯВАМ СУМИТЕ ЗА РЕДА*/ 
        EXECUTE PROCEDURE EDIT_PARI(L_ADD_OPR,L_PARI_ID,P_SUMA,1); 
 
        UPDATE PARI_SKLOPR_NODE SET 
        PARI_SKLOPR_NODE.SUMA = ROUNDD(PARI_SKLOPR_NODE.SUMA - :P_SUMA) 
        WHERE PARI_SKLOPR_NODE.OPR_ID = :P_OPR_ID; 
    END 
END^


ALTER PROCEDURE DEC_SUMA_KI_DOST (
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_SUMA TYPE OF DOM_SUMA)
AS
DECLARE VARIABLE L_PEN_ID INTEGER; 
DECLARE VARIABLE L_PEN_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_PEN_SUMA DOUBLE PRECISION; 
 
DECLARE VARIABLE L_CENA DOUBLE PRECISION; 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
BEGIN 
    /*РАЗПРЕДЕЛЯ МЕЖДУ ПАРТИДИТЕ НА ПРОДУКТ СЪС СЕРИЙНИ НОМЕРА, СУМА ПОДАДЕНА ОТ 
    КРЕДИТНО ИЗВЕСТИЕ КЪМ ДОСТАВЧИК ЗА СУМА*/ 
 
    SELECT 
        IN_EL.KOL 
    FROM 
        IN_EL 
    WHERE 
        ID = :P_IN_EL_ID 
    INTO 
        :L_KOL; 
 
 
    L_CENA = ROUND(P_SUMA / L_KOL,5); 
 
    FOR SELECT 
        PEN.ID, 
        PEN.KOL 
    FROM 
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = :P_IN_EL_ID 
        AND PIN.PARTIDA_NODE_ID = PEN.ID 
    INTO 
        :L_PEN_ID,:L_PEN_KOL 
    DO BEGIN 
        L_KOL = ROUND(L_KOL - L_PEN_KOL,5); 
 
        IF (L_KOL > 0.00) THEN 
            L_PEN_SUMA = ROUND(L_CENA * L_PEN_KOL,2); 
        ELSE 
            L_PEN_SUMA = P_SUMA; 
 
        P_SUMA = ROUND(P_SUMA - L_PEN_SUMA,2); 
 
        UPDATE PARTIDA_EL_NODE SET 
        SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA,2), 
        SUMA_SR = ROUND(SUMA_SR - :L_PEN_SUMA,2) 
        WHERE ID = :L_PEN_ID; 
    END 
END^


ALTER PROCEDURE DECREASE_LICENZ (
    P_OPR_ID INTEGER)
RETURNS (
    R_STATUS SMALLINT)
AS
DECLARE VARIABLE L_LICENZ_DATE DATE;
DECLARE VARIABLE L_OPR_DATE DATE;
DECLARE VARIABLE L_LDM DATE;
DECLARE VARIABLE L_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_KLI_ID INTEGER;
DECLARE VARIABLE L_NODE_ID INTEGER;
DECLARE VARIABLE L_CRM_ID INTEGER;
BEGIN 
    R_STATUS = 0; 
 
    SELECT 
        OPR.OPR_DATE, 
        COALESCE(OPR.KLI_ID,0) 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :L_OPR_DATE,:L_KLI_ID; 
 
    IF (L_KLI_ID = 0) THEN BEGIN 
        R_STATUS = 1; 
        EXIT; 
    END 
 
    L_LDM =  L_OPR_DATE - EXTRACT(DAY FROM L_OPR_DATE) + 32 - EXTRACT(DAY FROM L_OPR_DATE - EXTRACT(DAY FROM L_OPR_DATE) + 32); 
 
    FOR SELECT 
        CRM_ATON_PRODUKT.CRM_PRODUKT, 
        SUM(OUT_EL.KOL) - COALESCE(SUM(IN_EL.KOL), 0.00)
    FROM 
        CRM_ATON_PRODUKT INNER JOIN OUT_EL ON OUT_EL.OPR_ID = :P_OPR_ID AND OUT_EL.SIMPLE_ID = CRM_ATON_PRODUKT.SIMPLE_ID
        LEFT JOIN OPR_RAZPAD_NODE ORN ON ORN.OUT_EL_ID = OUT_EL.ID
        LEFT JOIN IN_EL ON IN_EL.ID = ORN.IN_EL_ID
    GROUP BY 1
    HAVING SUM(OUT_EL.KOL) - COALESCE(SUM(IN_EL.KOL), 0.00) > 0.00
    ORDER BY 1 
    INTO 
        :L_NODE_ID,:L_KOL 
    DO BEGIN 
        L_CRM_ID = NULL; 
 
        SELECT 
            CRM_INFO_LICENZIA.ID, 
            CRM_INFO_LICENZIA.DT1 
        FROM 
            CRM_INFO_LICENZIA 
        WHERE 
            CRM_INFO_LICENZIA.KLI_ID = :L_KLI_ID 
            AND CRM_INFO_LICENZIA.PRODUCT_CRM = :L_NODE_ID 
        INTO 
            :L_CRM_ID,:L_LICENZ_DATE; 
 
        IF (NOT L_CRM_ID IS NULL) THEN BEGIN 
            IF (L_LICENZ_DATE = L_LDM) THEN 
                UPDATE CRM_INFO_LICENZIA SET 
                OLD_KOL = KOL1, 
                KOL1 = KOL1 - CAST(:L_KOL AS SMALLINT), 
                DT_UPDATE = CURRENT_TIMESTAMP, 
                FL_CHECK = 0 
                WHERE CRM_INFO_LICENZIA.ID = :L_CRM_ID; 
        END 
    END 
END^


ALTER PROCEDURE DEL_COMMENT (
    TABLE_NODE_NAME VARCHAR(30),
    ID INTEGER)
AS
DECLARE VARIABLE COMMENT_ID INTEGER; 
begin 
  /* Procedure Text */ 
  /*EXECUTE STATEMENT 
   'SELECT COMMENT_ID FROM '||TABLE_NODE_NAME||' WHERE ID = '||ID 
   INTO 
   :COMMENT_ID; 
 
  IF (COMMENT_ID IS NOT NULL) THEN 
    DELETE FROM COMMENTS WHERE COMMENTS.ID = :ID; */ 
 
   EXECUTE STATEMENT 
   'DELETE FROM '||TABLE_NODE_NAME||' WHERE ID = '||ID; 
end^


ALTER PROCEDURE DEL_FROM_KASA_TMP (
    P_USER_ID INTEGER)
AS
DECLARE VARIABLE L_TMP_ID INTEGER;
BEGIN
/* V.2 */
  IF (P_USER_ID = 0) THEN BEGIN
    DELETE FROM PARI_TMP; /* ГЛОБАЛЕН ОТЧЕТ. ВСИЧКО СЕ ТРИЕ */
  END
  ELSE BEGIN
    /* ПЕРСОНАЛЕН ОТЧЕТ. МАРКИРАТ СЕ КАТО ИЗПОЛЗВАНИ ЗАПИСИТЕ ЗА ИЗБРАНИЯ ПОТРЕБИТЕЛ */
    FOR SELECT
      PARI_TMP.ID
    FROM
      OPR INNER JOIN PARI_TMP ON PARI_TMP.OPR_ID = OPR.ID
    WHERE
      OPR.USER_ID = :P_USER_ID
    INTO :L_TMP_ID
    DO BEGIN
      UPDATE PARI_TMP
      SET PARI_TMP.IS_USED = 1
      WHERE PARI_TMP.ID = :L_TMP_ID;
    END
  END
END^


ALTER PROCEDURE DEL_IN_EL_FROM_INV (
    P_IN_EL_ID INTEGER)
AS
declare variable L_ID integer; 
BEGIN 
    DELETE FROM IN_EL2 
    WHERE IN_EL_ID = :P_IN_EL_ID; 
 
    DELETE FROM IN_EL_RAZ_NODE 
    WHERE IN_EL_ID = :P_IN_EL_ID; 
 
    FOR SELECT 
        PIN.PARTIDA_NODE_ID 
    FROM 
        PARTIDA_IN_EL_NODE PIN 
    WHERE 
        IN_EL_ID = :P_IN_EL_ID 
    INTO 
        :L_ID 
    DO 
        DELETE FROM PARTIDA_EL_NODE 
        WHERE PARTIDA_EL_NODE.ID = :L_ID; 
 
    DELETE FROM TMP_PARTIDA_RZV_KOL WHERE 
    PARTIDA_ID IN (SELECT PN.ID FROM PARTIDA_NAL PN WHERE PN.IN_EL_ID = :P_IN_EL_ID); 
 
    DELETE FROM PARTIDA_NAL WHERE IN_EL_ID = :P_IN_EL_ID; 
 
    DELETE FROM INV_IZL WHERE IN_EL_ID = :P_IN_EL_ID; 
 
    DELETE FROM FAK_IN_EL_NODE WHERE FAK_IN_EL_NODE.IN_EL_ID = :P_IN_EL_ID; 
 
    DELETE FROM KI_DOST_SUMA_EL WHERE KI_DOST_SUMA_EL.IN_EL_ID = :P_IN_EL_ID; 
 
    DELETE FROM IN_EL WHERE ID = :P_IN_EL_ID; 
END^


ALTER PROCEDURE DEL_OUT_EL_FROM_INV (
    P_OUT_EL_ID INTEGER)
AS
declare variable L_ID integer; 
BEGIN 
/*    DELETE FROM OUT_EL2 
    WHERE OUT_EL_ID = :P_OUT_EL_ID; 
 
    DELETE FROM OUT_EL_RAZ_NODE 
    WHERE OUT_EL_ID = :P_OUT_EL_ID; 
 
    DELETE FROM OUT_EL2 
    WHERE OUT_EL_ID = :P_OUT_EL_ID; */ 
 
    FOR SELECT 
        PON.PARTIDA_NODE_ID 
    FROM 
        PARTIDA_OUT_EL_NODE PON 
    WHERE 
        PON.OUT_EL_ID = :P_OUT_EL_ID 
    INTO 
        :L_ID 
    DO BEGIN 
        DELETE FROM PARTIDA_EL_NODE 
        WHERE PARTIDA_EL_NODE.ID = :L_ID; 
    END 
 
    DELETE FROM PARTIDA_OUT_EL_NODE 
    WHERE 
        OUT_EL_ID = :P_OUT_EL_ID; 
 
    DELETE FROM CN_DELIVERY_ELEMENTS 
    WHERE 
      OUT_EL_ID = :P_OUT_EL_ID; 
 
    DELETE FROM OUT_EL 
    WHERE 
        ID = :P_OUT_EL_ID; 
END^


ALTER PROCEDURE DELETE_DVSK_EL
AS
declare variable l_dvsk_el integer; 
declare variable l_partida_el integer; 
declare variable l_count integer; 
BEGIN 
   FOR SELECT dvsk_el.partida_el_id, 
   COUNT(dvsk_el.partida_el_id) 
   FROM dvsk_el 
   GROUP BY 1 HAVING COUNT(dvsk_el.partida_el_id) > 1 
   INTO :L_PARTIDA_EL, :l_count 
DO BEGIN 
for select first 1 SKIP(:L_COUNT - 1) dvsk_el.id from dvsk_el 
where dvsk_el.partida_el_id =:L_PARTIDA_EL 
ORDER BY DVSK_EL.id desc 
INTO :L_DVSK_EL 
do 
   begin 
    DELETE FROM dvsk_el 
    WHERE DVSK_EL.partida_el_id =:L_partida_el AND DVSK_EL.id <>: L_dvsk_el; 
   end  
 END 
END^


ALTER PROCEDURE DELETE_KLI_SKLAD_NODE
AS
declare variable l_count integer; 
declare variable l_kli_id integer; 
declare variable l_sklad_id integer; 
declare variable l_kli_sklad_node_id integer; 
BEGIN 
   FOR SELECT COUNT(KLI_SKLAD_NODE.ID), 
       KLI_SKLAD_NODE.KLI_ID, 
       KLI_SKLAD_NODE.sklad_id 
FROM KLI_SKLAD_NODE 
GROUP BY 2,3 HAVING COUNT(KLI_SKLAD_NODE.ID) > 1 
   INTO :l_count, :L_KLI_ID, :L_SKLAD_ID 
DO BEGIN 
for select first 1 SKIP(:L_COUNT - 1) KLI_SKLAD_NODE.id from KLI_SKLAD_NODE 
where KLI_SKLAD_NODE.kli_id =:l_kli_id AND KLI_SKLAD_NODE.sklad_id =:L_SKLAD_ID 
ORDER BY KLI_SKLAD_NODE.id desc 
INTO :L_KLI_SKLAD_NODE_ID 
do 
   begin 
    DELETE FROM KLI_SKLAD_NODE 
    WHERE KLI_SKLAD_NODE.KLI_ID =:l_kli_id AND KLI_SKLAD_NODE.sklad_id =:l_sklad_id AND KLI_SKLAD_NODE.id <>: L_KLI_SKLAD_NODE_ID ; 
   end 
 END 
END^


ALTER PROCEDURE DELETE_PRIORITET (
    P_PRIORITET INTEGER)
AS
DECLARE VARIABLE L_ID INTEGER;
DECLARE VARIABLE L_CL_PRIORITET INTEGER;
DECLARE VARIABLE L_CL_ID INTEGER;
BEGIN
  SELECT
    cenova_lista.id
  FROM cenova_lista
  WHERE
    cenova_lista.prioritet = :p_prioritet
  INTO :l_id;
      
  IF (:p_prioritet < 5001) THEN BEGIN
    FOR SELECT
        cenova_lista.id, 
        cenova_lista.prioritet
    FROM cenova_lista
    WHERE
        cenova_lista.prioritet > :p_prioritet AND
        cenova_lista.prioritet < 5001 AND
        cenova_lista.prioritet IS NOT NULL
    ORDER BY 2
    INTO :l_cl_id,:l_cl_prioritet
    DO BEGIN
        UPDATE cenova_lista
        SET cenova_lista.prioritet = :l_cl_prioritet - 1
        WHERE cenova_lista.id = :l_cl_id;
    END
  END

  IF ((:p_prioritet > 5000) AND (:p_prioritet < 10001)) THEN BEGIN
    FOR SELECT
        cenova_lista.id, 
        cenova_lista.prioritet
    FROM cenova_lista
    WHERE
        cenova_lista.prioritet > :p_prioritet AND
        cenova_lista.prioritet < 10001 AND
        cenova_lista.prioritet IS NOT NULL
    ORDER BY 2
    INTO :l_cl_id,:l_cl_prioritet
    DO BEGIN
        UPDATE cenova_lista
        SET cenova_lista.prioritet = :l_cl_prioritet - 1
        WHERE cenova_lista.id = :l_cl_id;
    END
  END

  IF (:p_prioritet > 10000) THEN BEGIN
    FOR SELECT
        cenova_lista.id, 
        cenova_lista.prioritet
    FROM cenova_lista
    WHERE
        cenova_lista.prioritet > :p_prioritet AND
        cenova_lista.prioritet IS NOT NULL
    ORDER BY 2
    INTO :l_cl_id,:l_cl_prioritet
    DO BEGIN
        UPDATE cenova_lista
        SET cenova_lista.prioritet = :l_cl_prioritet - 1
        WHERE cenova_lista.id = :l_cl_id;
    END
  END

  UPDATE cenova_lista
  SET cenova_lista.prioritet = -1
  WHERE cenova_lista.id = :l_id;
END^


ALTER PROCEDURE DELETE_PROP_NODE (
    P_NODE_ID INTEGER)
AS
BEGIN 
    DELETE FROM PROP_NODE WHERE ID = :P_NODE_ID; 
END^


ALTER PROCEDURE DELETE_SIMPLE_PROP_NODE (
    P_NODE_ID INTEGER)
AS
BEGIN 
    DELETE FROM SIMPLE_PROP_NODE WHERE ID = :P_NODE_ID; 
END^


ALTER PROCEDURE DO_CALCULATION (
    P_SIMPLE_ID INTEGER,
    P_FLAG_IZL SMALLINT,
    P_FLAG_FKT SMALLINT)
RETURNS (
    R_RESULT SMALLINT)
AS
DECLARE VARIABLE L_SKLAD_ID INTEGER;
DECLARE VARIABLE L_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_EL_ID INTEGER;
DECLARE VARIABLE L_OPR_ID INTEGER;
DECLARE VARIABLE L_OPR_TIP INTEGER;
DECLARE VARIABLE L_OPR_DATE DATE;
DECLARE VARIABLE L_IN_OUT INTEGER;
DECLARE VARIABLE L_RAZPR_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PN_IN_EL_ID INTEGER;
DECLARE VARIABLE L_PN_EL_ID INTEGER;
DECLARE VARIABLE L_PN_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PN_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_PN_ID INTEGER;
DECLARE VARIABLE L_GEN_ID INTEGER;
DECLARE VARIABLE L_TEMP_OUT_EL INTEGER;
DECLARE VARIABLE L_ED_CENA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_ED_CENA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_EL_ID INTEGER;
DECLARE VARIABLE L_OUT_EL_OPR_ID INTEGER;
DECLARE VARIABLE L_OUT_EL_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_EL_NAL_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_EL_NAL_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_EL_NAL_ID INTEGER;
DECLARE VARIABLE L_FIND_KOL_FOR_IZL DOUBLE PRECISION;
DECLARE VARIABLE L_DATE DATE;
DECLARE VARIABLE L_INV_ID INTEGER;
DECLARE VARIABLE L_INV_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_INV_CENA DOUBLE PRECISION;
DECLARE VARIABLE L_NAL_KOL DOUBLE PRECISION;
BEGIN 
    /*V.1*/ 
/*    L_EL_ID = NULL;
    R_RESULT = 0; 
 
    SELECT SIMPLE.ID FROM SIMPLE  WHERE SIMPLE.ID = :P_SIMPLE_ID AND SIMPLE.USLUGA = '0' INTO :L_EL_ID; 
 
    IF (L_EL_ID IS NULL) THEN 
        EXIT; 
 
    R_RESULT = 1; 
    L_EL_ID = NULL; 
 
    EXECUTE PROCEDURE INIT_RDBS(P_SIMPLE_ID); 
 
    IF (P_FLAG_FKT = 0) THEN 
        SELECT FIRST 1 
            OPR.ID, 
            OPR.OPR_DATE, 
            OPR.SKLAD_ID 
        FROM 
            OPR 
        WHERE 
            OPR.OPR_TIP < 100 
            AND OPR.OPR_TIP IN(1,2,3,4,9,11,12,14,22,23,26,27,28,39,41) 
            AND NOT OPR.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
        ORDER BY 2,1 
        INTO 
            :L_OPR_ID,:L_DATE,:L_SKLAD_ID; 
    ELSE 
        SELECT FIRST 1 
            OPR.ID, 
            OPR.OPR_DATE, 
            OPR.SKLAD_ID 
        FROM 
            OPR 
        WHERE 
            OPR.OPR_TIP < 100 
            AND OPR.OPR_TIP IN(1,2,3,4,9,11,12,14,22,23,26,27,28,39,41) 
            AND OPR.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
        ORDER BY 2,1 
        INTO 
            :L_OPR_ID,:L_DATE,:L_SKLAD_ID; 
 
    EXECUTE PROCEDURE PREPARE_CALCULATION(P_SIMPLE_ID,L_OPR_ID,L_DATE); 
 
    DELETE from RDB$PARTIDA_NAL; 
 
    UPDATE RDB$NAL SET 
    SUMA = 0, 
    SUMA_FR = 0, 
    KOL = 0; 
 
    FOR SELECT 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_KOL, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_EL_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_TIP, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_SKLAD_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_DATE, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_IN_OUT 
    FROM 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY(:P_SIMPLE_ID,:L_OPR_ID,:L_DATE) 
    ORDER BY 6 ASC,3 ASC 
    INTO 
        :L_KOL,:L_EL_ID,:L_OPR_ID,:L_OPR_TIP,:L_SKLAD_ID,:L_OPR_DATE,:L_IN_OUT 
    DO BEGIN 
        IF (L_OPR_TIP = 3) THEN BEGIN 
            L_INV_ID = NULL; 
            SELECT 
                INV_OPIS.ID, 
                INV_OPIS.KOL_F, 
                INV_OPIS.CENA_F 
             FROM 
                INV_OPIS 
             WHERE 
                INV_OPIS.OPR_ID = :L_OPR_ID 
                AND INV_OPIS.SIMPLE_ID = :P_SIMPLE_ID 
             INTO 
                 :L_INV_ID,:L_INV_KOL,:L_INV_CENA; 
 
             IF (L_INV_ID IS NOT NULL) THEN BEGIN 
                SELECT 
                    RDB$NAL.KOL 
                FROM 
                    RDB$NAL 
                WHERE 
                    SKLAD_ID = :L_SKLAD_ID 
                INTO 
                    :L_NAL_KOL; 
 
                IF (ROUND5(L_NAL_KOL) = ROUND5(L_INV_KOL)) THEN BEGIN 
                    --TRIEM ELEMENTA
                    IF (L_IN_OUT = 0) THEN 
                        EXECUTE PROCEDURE DEL_OUT_EL_FROM_INV(L_EL_ID); 
                    ELSE 
                        EXECUTE PROCEDURE DEL_IN_EL_FROM_INV(L_EL_ID); 
                    L_IN_OUT = -1;--НЯМА ДА ПРАВИМ ИЗЧИСЛЕНИЯ ЗА ТОЗИ ЕЛЕМЕНТ И СЕ ПРЕСКАЧА НА СЛЕДВАЩИЯ
                END 
                ELSE IF (L_NAL_KOL > L_INV_KOL) THEN BEGIN 
                    --OUT_EL - АКО СЕГА Е OUT_EL САМО КОРЕКЦИЯ НА КОЛИЧЕСТВОТО ПРЕДИ ДА СЕ ИЗЧИСЛИ, ИНАЧЕ ТРИЕМ
                    --IN_EL И ДОБАВЯМЕ OUT_EL
                    L_KOL = ROUND5(:L_NAL_KOL - :L_INV_KOL); 
 
                    IF (L_IN_OUT = 0) THEN BEGIN 
                        UPDATE OUT_EL SET 
                        KOL = :L_KOL 
                        WHERE ID = :L_EL_ID; 
                    END 
                    ELSE IF (L_IN_OUT IN (1,2)) THEN BEGIN 
                        EXECUTE PROCEDURE DEL_IN_EL_FROM_INV(L_EL_ID); 
                        IF (L_INV_CENA = 0.00) THEN 
                            SELECT 
                                RDB$NAL.LAST_CENA 
                            FROM 
                                RDB$NAL 
                            WHERE 
                                RDB$NAL.SKLAD_ID = :L_SKLAD_ID 
                            INTO 
                                :L_INV_CENA; 
 
                        L_EL_ID = GEN_ID(GEN_OUT_EL_ID,1); 
                        INSERT INTO OUT_EL(ID,OPR_ID,SIMPLE_ID,KOL,SUMA_SR,SUMA_FR,SUMA,IS_F) 
                        VALUES(:L_EL_ID,:L_OPR_ID,:P_SIMPLE_ID,:L_KOL,0.00,0.00,ROUNDD(:L_INV_CENA * :L_INV_KOL),:P_FLAG_FKT); 
                    END 
                    L_IN_OUT = 0; 
                END 
                ELSE BEGIN 
                    --IN_EL - АКО СЕГА Е IN_EL САМО КОРЕКЦИЯ НА КОЛИЧЕСТВОТО ПРЕДИ ДА СЕ ИЗЧИСЛИ, ИНАЧЕ ТРИЕМ
                    --OUT_EL И ДОБАВЯМЕ IN_EL
 
                    IF (L_NAL_KOL < 0.00) THEN --ПРИ IVN ОТ - КЪМ + ПИШЕМ САМО + ЧАСТТА
                        L_NAL_KOL = 0; 
                    L_KOL = ROUND5(:L_INV_KOL - :L_NAL_KOL); 
 
                    --АКО ТРЯБВА НАИСТИНА ДА ДОБАВИМ IN_EL
                    IF (L_KOL > 0.00) THEN BEGIN 
                        IF (L_NAL_KOL = 0.00) THEN 
                            UPDATE RDB$NAL SET 
                            KOL = 0.00, 
                            SUMA = 0.00, 
                            SUMA_FR = 0.00 
                            WHERE SKLAD_ID = :L_SKLAD_ID; 
 
                        IF (L_INV_CENA = 0.00) THEN 
                            SELECT 
                                RDB$NAL.LAST_CENA 
                            FROM 
                                RDB$NAL 
                            WHERE 
                                RDB$NAL.SKLAD_ID = :L_SKLAD_ID 
                            INTO 
                                :L_INV_CENA; 
 
                        IF (L_IN_OUT = 1) THEN BEGIN 
                            UPDATE IN_EL SET 
                            KOL = :L_KOL, 
                            SUMA = ROUNDD(:L_KOL * :L_INV_CENA) 
                            WHERE ID = :L_EL_ID; 
 
                            UPDATE PARTIDA_EL_NODE SET 
                            KOL = :L_KOL, 
                            SUMA = ROUNDD(:L_KOL * :L_INV_CENA) 
                            WHERE OPR_ID = :L_OPR_ID 
                            AND IN_EL_ID = :L_EL_ID; 
 
                            UPDATE INV_IZL SET 
                            KOL = :L_KOL, 
                            KOL_IZL = :L_KOL 
                            WHERE IN_EL_ID = :L_EL_ID; 
                        END 
                        ELSE IF (L_IN_OUT IN (0,2)) THEN BEGIN 
                            EXECUTE PROCEDURE DEL_OUT_EL_FROM_INV(L_EL_ID); 
 
                            L_EL_ID = GEN_ID(GEN_IN_EL_ID,1); 
                            INSERT INTO IN_EL(ID,OPR_ID,SIMPLE_ID,KOL,SUMA,IS_F) 
                            VALUES(:L_EL_ID,:L_OPR_ID,:P_SIMPLE_ID,:L_KOL, ROUNDD(:L_KOL * :L_INV_CENA),:P_FLAG_FKT); 
 
                            INSERT INTO PARTIDA_EL(ID) VALUES (NULL) 
                            RETURNING ID INTO :L_GEN_ID; 
 
                            INSERT INTO PARTIDA_EL_NODE(IN_EL_ID,OPR_ID,KOL,SUMA,ELEMENT_ID) 
                            VALUES(:L_EL_ID,:L_OPR_ID,:L_KOL,ROUNDD(:L_KOL * :L_INV_CENA),:L_GEN_ID); 
 
                            INSERT INTO INV_IZL(IN_EL_ID,KOL,ED_CENA) 
                            VALUES(:L_EL_ID,:L_KOL,:L_INV_CENA); 
                        END 
                        L_IN_OUT = 1; 
                    END 
                    ELSE BEGIN 
                        IF (L_IN_OUT = 1) THEN 
                            EXECUTE PROCEDURE DEL_IN_EL_FROM_INV(L_EL_ID); 
                        UPDATE RDB$NAL SET 
                        KOL = 0.00, 
                        SUMA = 0.00, 
                        SUMA_FR = 0.00 
                        WHERE SKLAD_ID = :L_SKLAD_ID; 
                    END 
                END 
             END 
 
             UPDATE IZL SET 
             FLAG_LOCK_KOR = 1 
             WHERE EXISTS( 
                SELECT 
                    OUT_EL.ID 
                FROM 
                    OUT_EL INNER JOIN OPR ON OPR.SKLAD_ID = :L_SKLAD_ID AND OUT_EL.OPR_ID = OPR.ID 
                    AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID AND OUT_EL.ID = IZL.OUT_EL_ID); 
 
        END 
 
        IF (L_IN_OUT = 0)  THEN BEGIN 
            L_FIND_KOL_FOR_IZL = 0.00; 

        --ИЗХОД ОТ СКЛАД НАМИРАТ СЕ НАЛИЧНИТЕ ПАРТИДИ - ИЗЧИСЛЯВАТ СЕ СУМИТЕ,
        --ИЗЛИШЪЦИТЕ(АКО ИМА ТАКИВА). ПРОМЕНЯТ СЕ СУМИТЕ В ТАБЛИЦИ MOVE,IZP,OUT,
        --OPR В ЗАВИСИМОСТ ОТ ОПЕРАЦИЯТА

            L_TEMP_OUT_EL = NULL; 
            IF (L_OPR_TIP  IN (9,11)) THEN BEGIN 
                SELECT 
                    COALESCE(SUM(ROUND5(RDB$PARTIDA_NAL.KOL_NAL)),0) 
                FROM 
                    RDB$PARTIDA_NAL INNER JOIN IN_EL ON IN_EL.ID = RDB$PARTIDA_NAL.IN_EL_ID 
                    INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
                WHERE 
                    OPR.SKLAD_ID = :L_SKLAD_ID 
                INTO 
                    :L_PN_KOL; 
 
                IF (ROUND5(L_PN_KOL) < ROUND5(L_KOL)) THEN BEGIN 
                --ГЕНЕРИРА СЕ ИЗЛИШЪК - ТЪРСЯ НАЗАД ПРОДАЖБИ, КОИТО ДА ВЪРНАТ
                --КОЛИЧЕСТВА, КОМПЕНСИРАЩИ ИЗЛИШЪКА
                    L_FIND_KOL_FOR_IZL = ROUND5(L_KOL - L_PN_KOL); 
                    EXECUTE PROCEDURE FIND_KOL_FOR_IZL(P_SIMPLE_ID,L_SKLAD_ID,L_OPR_ID, L_FIND_KOL_FOR_IZL,L_OPR_DATE) 
                    RETURNING_VALUES :L_IN_OUT; 
 
                    --АКО ВРЪЩАНЕТО НА КОЛИЧЕСТВА КЪМ НАЛИЧНОСТИТЕ ОТ ПРОДАЖБА,
                    --НЕ Е УСПЯЛО СЕ ИЗЛИЗА ОТ ПРОЦЕДУРАТА С ГРЕШКА
 
                    IF (L_IN_OUT = 1 ) THEN BEGIN 
                       EXCEPTION EXC_FIX_ALL_ERROR; 
                    END 
                END 
            END 
 
            L_RAZPR_KOL = L_KOL;--КОЛИЧЕСТВОТО ЗА РАЗПРЕДЕЛЕНИЕ, КОГАТО СТАНЕ 0 Е РАЗПРЕДЕЛЕНО
            L_SUMA_FR = 0;--НОВАТА СУМА ПВ
 
            FOR SELECT 
                RDB$PARTIDA_NAL.KOL_NAL, 
                RDB$PARTIDA_NAL.SUMA, 
                RDB$PARTIDA_NAL.IN_EL_ID, 
                RDB$PARTIDA_NAL.ELEMENT_ID, 
                RDB$PARTIDA_NAL.ID 
            FROM 
                IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
                INNER JOIN RDB$PARTIDA_NAL ON RDB$PARTIDA_NAL.IN_EL_ID = IN_EL.ID 
            WHERE 
                IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
                AND OPR.SKLAD_ID = :L_SKLAD_ID 
                AND RDB$PARTIDA_NAL.KOL_NAL > 0 
            ORDER BY 
                OPR.OPR_DATE, OPR.ID, RDB$PARTIDA_NAL.ELEMENT_ID 
            INTO 
                :L_PN_KOL,:L_PN_SUMA,:L_PN_IN_EL_ID,:L_PN_EL_ID,:L_PN_ID 
            DO IF(ROUND5(L_RAZPR_KOL) > 0) THEN BEGIN 
 
                IF (L_PN_KOL > L_RAZPR_KOL) THEN BEGIN 
                    --НАМИРАМ СУМА ПВ И КАЗВАМ КОЛКО Е КОЛИЧЕСТВОТО, УЧАСТВАЩО
                    --ОТ ПАРТИДАТА
                    L_PN_SUMA    = ROUNDD(ROUND5(L_PN_SUMA / L_PN_KOL) * L_RAZPR_KOL); 
                    L_PN_KOL     = ROUND5(L_RAZPR_KOL); 
                END 
 
                --ОЩЕ КОЛКО ОТ КОЛИЧЕСТВОТО ОСТАВА ЗА РАЗПРЕДЕЛЯНЕ
                L_RAZPR_KOL  = ROUND5(L_RAZPR_KOL - L_PN_KOL); 
 
                --КАКВА Е СУМАТА ПО ПВ ДОТУК ЗА ЕЛЕМЕНТА
                L_SUMA_FR = ROUNDD(L_SUMA_FR + L_PN_SUMA); 
 
                --ПРОМЯНА НА НАЛИЧНОСТИТЕ ЗА ТЕКУЩАТА ПАРТИДА - ПРИ ОСТАВАЩО КОЛ
                --0 САМА ЗАПИСА СЕ ИЗТРИВА АВТОМАТИЧНО
 
                UPDATE RDB$PARTIDA_NAL SET 
                RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL - :L_PN_KOL), 
                RDB$PARTIDA_NAL.SUMA    = ROUNDD(RDB$PARTIDA_NAL.SUMA - :L_PN_SUMA) 
                WHERE RDB$PARTIDA_NAL.ID = :L_PN_ID; 
 
                --ВРЪЗКАТА НА ПАРТИДАТА С ТОЗИ ЕЛЕМЕНТ НА ИЗХОДА
                --ВЗИМА СЕ ID ЗА НОВ ЗАПИС В PARTIDA_EL_NODE
                L_GEN_ID = GEN_ID(GEN_PARTIDA_EL_NODE_ID,1); 
 
                --ДОБАВЯНЕ НА НОВ ЗАПИС В PARTIDA_EL_NODE
                INSERT INTO PARTIDA_EL_NODE(ID,OPR_ID,IN_EL_ID,KOL,SUMA,ELEMENT_ID) 
                VALUES (:L_GEN_ID,:L_OPR_ID,:L_PN_IN_EL_ID,:L_PN_KOL,:L_PN_SUMA,:L_PN_EL_ID); 
 
                INSERT INTO PARTIDA_OUT_EL_NODE(OUT_EL_ID,PARTIDA_NODE_ID) 
                VALUES(:L_EL_ID, :L_GEN_ID); 
            END 
 
            --НАМИРАНЕ НА СУМА СП И КОРЕКЦИЯ НА НАЛИЧНОСТИТЕ В NAL
            IF (ROUND5(L_RAZPR_KOL) >= 0.00001) THEN BEGIN 
            --ИМА ИЗЛИШЪК - НОВАТА СУМА СП Е РАВНА НА НАЛИЧНОТО В ТАБЛИЦА NAL
                SELECT 
                    RDB$NAL.SUMA, 
                    RDB$NAL.LAST_CENA 
                FROM 
                    RDB$NAL 
                WHERE 
                    RDB$NAL.SKLAD_ID = :L_SKLAD_ID 
                INTO 
                    :L_SUMA_SR,:L_ED_CENA_SR; 
 
                --ТУК СЕ РАБОТИ ДИРЕКТНО С ТАБЛИЦАТА ЗА ИЗЛИШЪЦИ
                --ВМЪКВАМЕ КОЛИЧЕСТВО НА ИЗЛИШЪКА, ЗА КОЙ ЕЛЕМЕНТ И
                --КАКВА Е БИЛА ДОСТАВНАТА ЦЕНА ПРИ ГЕНЕРИРАНЕТО МУ
 
                INSERT INTO IZL (KOL,OUT_EL_ID,LAST_CENA) 
                VALUES (:L_RAZPR_KOL,:L_EL_ID,:L_ED_CENA_SR); 
            END 
            ELSE BEGIN 
            --КОЛИЧЕСТВОТО Е НОРМАЛНО РАЗПРЕДЕЛЕНО - ЗНАЧИ В NAL ИМА
            --ДОСТАТЪЧНО НАЛИЧНОСТ И ЩЕ ПОЛУЧА ЕД.ЦЕНА ПО СП И СУМАТА ЗА
            --ИЗХОДЯЩОТО КОЛИЧЕСТОВО
                --АКО ИМАМ ВРЪЩАНЕ НАМИРАНЕ НА КОЛИЧЕСТВА ЗА ПРЕХВЪРЛЯНЕ ИЛИ ИЗЛИШЪК
                --АКО КОЛИЧЕСТВОТО ЗА ВРЪЩАНЕ Е РАВНО НА КОЛ. НА ЕЛЕМЕНТА, ТОВА ЗНАЧИ,ЧЕ НАЛ Е С 0 ИЛИ -КОЛ
                --АКО Е ТАКА ВСИЧКО КОЕТО СЕ НАМИРА В НАЛ Е БИЛО ВЪРНАТО СЕГА И ТОВА Е СУМА СРЕДНА ЗА ЕЛЕМЕНТА
                --В ПРОТИВЕН СЛУЧАЙ В НАЛ Е ИМАЛО НЯКАКВА НАЛИЧНОСТ, И СУМАТА Е ПО СТАНДАРТНИЯ НАЧИН.
                --ПРИ СТАРИЯ НАЧИН НА РАБОТА СЕ ПОЛУЧАВАХА - СУМИ НА ЕЛЕМЕНТИТЕ И СТАВАХА ГРЕШКИ.
 
                IF (L_FIND_KOL_FOR_IZL = L_KOL) THEN BEGIN
                    SELECT 
                        RDB$NAL.SUMA 
                    FROM 
                        RDB$NAL 
                    WHERE 
                        RDB$NAL.SKLAD_ID = :L_SKLAD_ID 
                    INTO 
                        :L_SUMA_SR; 
                END 
                ELSE BEGIN 
                    SELECT 
                        ROUNDD(ROUND5(RDB$NAL.SUMA / RDB$NAL.KOL) * :L_KOL) 
                    FROM 
                        RDB$NAL 
                    WHERE 
                        RDB$NAL.SKLAD_ID = :L_SKLAD_ID 
                    INTO 
                        :L_SUMA_SR; 
                END 
            END 
 
            --ПРОМЯНА НАЛИЧНОТО В NAL
            UPDATE RDB$NAL SET 
            RDB$NAL.SUMA = ROUNDD(RDB$NAL.SUMA - :L_SUMA_SR), 
            RDB$NAL.SUMA_FR = ROUNDD(RDB$NAL.SUMA_FR - :L_SUMA_FR), 
            RDB$NAL.KOL = ROUND5(RDB$NAL.KOL - ROUND5(:L_KOL + :L_FIND_KOL_FOR_IZL)) 
            WHERE RDB$NAL.SKLAD_ID = :L_SKLAD_ID; 
 
 
            --ПРОМЯНА НА СУМА СП И ПВ НА ЕЛЕМЕНТА НА ИЗХОДА
            UPDATE OUT_EL SET 
            OUT_EL.SUMA_FR = :L_SUMA_FR, 
            OUT_EL.SUMA_SR = :L_SUMA_SR 
            WHERE OUT_EL.ID = :L_EL_ID; 
 
            --ИЗВАЖДАНЕ НА СТАРИТЕ СУМИ ОТ СЪОТВЕТНИТЕ ТАБЛИЦИ - ПРИ
            --ПРЕРАЗПРЕДЕЛЯНЕТО ЩЕ СЕ СЪБЕРАТ С НОВИТЕ И ТАКА ЩЕ ИМАМЕ НОВТЕ
            --ОБОБЩЕНИ СТОЙНОСТИ
            IF (L_OPR_TIP = 2) THEN BEGIN 
                --ПРОМЯНА НА СУМИТЕ НА OUT СЪС СУМА ПВ И СП
                UPDATE OUT SET 
                OUT.SUMA_SR = ROUNDD(OUT.SUMA_SR + :L_SUMA_SR), 
                OUT.SUMA_FR = ROUNDD(OUT.SUMA_FR + :L_SUMA_FR) 
                WHERE OUT.OPR_ID = :L_OPR_ID; 
 
                --НОВ НАЧИН
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_SR = ROUNDD(OPR_SUMI.SUMA_SR + :L_SUMA_SR), 
                OPR_SUMI.SUMA_FR = ROUNDD(OPR_SUMI.SUMA_FR + :L_SUMA_FR) 
                WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
            END 
            ELSE IF (L_OPR_TIP = 34) THEN BEGIN 
                --ПРОМЯНА НА СУМИТЕ НА OUT СЪС СУМА ПВ И СП
                UPDATE OUT SET 
                OUT.SUMA_SR = ROUNDD(OUT.SUMA_SR + :L_SUMA_SR), 
                OUT.SUMA_FR = ROUNDD(OUT.SUMA_FR + :L_SUMA_FR) 
                WHERE OUT.OPR_ID = (SELECT PROD_NODE.OPR_PROD_ID FROM PROD_NODE WHERE PROD_NODE.OPR_SUB_PROD_ID = :L_OPR_ID); 
 
                --НОВ НАЧИН
                --СУМА ЗА ЦЯЛАТА ПРОДАЖБА
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_SR = ROUNDD(OPR_SUMI.SUMA_SR + :L_SUMA_SR), 
                OPR_SUMI.SUMA_FR = ROUNDD(OPR_SUMI.SUMA_FR + :L_SUMA_FR) 
                WHERE OPR_SUMI.OPR_ID = (SELECT PROD_NODE.OPR_PROD_ID FROM PROD_NODE WHERE PROD_NODE.OPR_SUB_PROD_ID = :L_OPR_ID); 
 
                --СУМАТА ЗА ОТДЕЛНАТА ПОДПРОДАЖБА
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_SR = ROUNDD(OPR_SUMI.SUMA_SR + :L_SUMA_SR), 
                OPR_SUMI.SUMA_FR = ROUNDD(OPR_SUMI.SUMA_FR + :L_SUMA_FR) 
                WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
 
            END 
            ELSE IF (L_OPR_TIP = 3) THEN BEGIN 
            --ИНВЕНТАРИЗАЦИЯ
                UPDATE INV SET 
                INV.SUMA_LIPSA = ROUNDD(INV.SUMA_LIPSA + :L_SUMA_FR) 
                WHERE INV.OPR_ID = :L_OPR_ID; 
            END 
            ELSE IF (L_OPR_TIP = 9) THEN BEGIN 
                --АКО ОПЕРАЦИЯТА Е ПРЕХВЪРЛЯНЕ ЩЕ ТРЯБВА ДА СЪЗДАМ И ПАРТИДИТЕ
                --ЗА ВТОРИЯ СКЛАД. НО ЗА ТЯХ ТРЯБВА ДА ИМАМ ID НА IN_EL И ELEMENT_ID
                --КОЙТО ЩЕ ПОЛУЧА НА СЛЕДВАЩАТА ИТЕРАЦИЯ НА ЗАЯВКАТА - ЗАТОВА
                --ТРЯВБА ДА ИМАМ ID ОТ OUT_EL, ОТ КОЙТО ДА СГЛОБЯ НОВИТЕ ПАРТИДИ
 
                L_TEMP_OUT_EL = L_EL_ID; 
 
                UPDATE MOVE SET 
                MOVE.SUMA_SR = ROUNDD(MOVE.SUMA_SR + :L_SUMA_SR) 
                WHERE MOVE.OPR_OUT_ID = :L_OPR_ID; 
 
                UPDATE OPR SET 
                OPR.SUMA = ROUNDD(OPR.SUMA + :L_SUMA_FR) 
                WHERE OPR.ID = :L_OPR_ID; 
 
                --НОВ НАЧИН
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_FR = ROUNDD(OPR_SUMI.SUMA_FR + :L_SUMA_FR), 
                OPR_SUMI.SUMA_SR = ROUNDD(OPR_SUMI.SUMA_SR + :L_SUMA_SR) 
                WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
 
                --UPDATE OUT_EL SET
                --OUT_EL.SUMA = :L_SUMA_SR
                --WHERE OUT_EL.ID = :L_EL_ID;
            END 
            ELSE IF (L_OPR_TIP = 11) THEN BEGIN 
            --ПРОМЯНА НА СУМИТЕ НА ИЗПИСВАНЕТО СЪС СУМА ПВ И СП
                UPDATE IZP SET 
                IZP.SUMA_SR = ROUNDD(IZP.SUMA_SR + :L_SUMA_SR), 
                IZP.SUMA_FR = ROUNDD(IZP.SUMA_FR + :L_SUMA_FR) 
                WHERE IZP.OPR_ID = :L_OPR_ID; 
 
                UPDATE OPR SET 
                OPR.SUMA = ROUNDD(OPR.SUMA + :L_SUMA_FR) 
                WHERE OPR.ID = :L_OPR_ID; 
 
                --НОВ НАЧИН
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_FR = ROUNDD(OPR_SUMI.SUMA_FR + :L_SUMA_FR), 
                OPR_SUMI.SUMA_SR = ROUNDD(OPR_SUMI.SUMA_SR + :L_SUMA_SR) 
                WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
 
                UPDATE OUT_EL SET 
                SUMA = :L_SUMA_SR 
                WHERE ID = :L_EL_ID; 
            END 
 
        END 
        ELSE IF (L_IN_OUT = 1) THEN  BEGIN 
            L_SUMA_SR = 0.00; 
            IF (L_OPR_TIP  = 4) THEN BEGIN 
            --ИМАМЕ ПРЕХВЪРЛЯНЕ - ЩЕ СЕ СЪЗДАДАТ ПАРТИДИ С ДАННИТЕ ОТ OUT_EL И
            --ПАРТИДИТЕ КОИТО ГО ГЕНЕРИРАТ
                FOR SELECT 
                    PN.KOL, 
                    PN.SUMA, 
                    PN.ELEMENT_ID 
                FROM 
                    PARTIDA_OUT_EL_NODE PO LEFT JOIN PARTIDA_EL_NODE PN ON PN.ID = PO.PARTIDA_NODE_ID 
                WHERE 
                    PO.OUT_EL_ID = :L_TEMP_OUT_EL 
                INTO 
                    :L_PN_KOL,:L_PN_SUMA,:L_PN_EL_ID 
                DO BEGIN 
                    L_IN_OUT = NULL; 
 
                    SELECT 
                        RDB$PARTIDA_NAL.ID 
                    FROM 
                        RDB$PARTIDA_NAL 
                    WHERE 
                        RDB$PARTIDA_NAL.IN_EL_ID = :L_EL_ID 
                        AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_IN_OUT; 
 
                     IF (L_IN_OUT IS NULL) THEN BEGIN 
                        --И СЪЗДАВАМ ПАРТИДИТЕ, КОЙТО СА ИЗПОЛЗВАНИ ЗА ИЗХОД ОТ
                        --ДРУГИЯ СКЛАД - ИЗПOЛЗВАМ ДАННИТЕ ЗА КОЛИЧЕСТВО, СУМИ И
                        --ELEMENT_ID OT ГЕНЕРИРАНИТЕ ПРИ ПРЕХВЪРЛЯНЕТО
                        INSERT INTO RDB$PARTIDA_NAL(KOL_NAL,SUMA,IN_EL_ID,ELEMENT_ID) 
                        VALUES(:L_PN_KOL,:L_PN_SUMA,:L_EL_ID,:L_PN_EL_ID); 
                    END 
                    ELSE BEGIN 
                        UPDATE RDB$PARTIDA_NAL SET 
                        RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL + :L_PN_KOL), 
                        RDB$PARTIDA_NAL.SUMA = ROUNDD(RDB$PARTIDA_NAL.SUMA + :L_PN_SUMA) 
                        WHERE RDB$PARTIDA_NAL.ID = :L_IN_OUT; 
                    END 
 
                    UPDATE OPR SET 
                    OPR.SUMA = ROUNDD(OPR.SUMA + :L_PN_SUMA) 
                    WHERE OPR.ID = :L_OPR_ID; 
 
                    L_IN_OUT = NULL; 
                    SELECT 
                        PEN.ID 
                    FROM 
                        PARTIDA_EL_NODE PEN 
                    WHERE 
                        PEN.ELEMENT_ID = :L_PN_EL_ID 
                        AND PEN.IN_EL_ID = :L_EL_ID 
                    INTO 
                        :L_IN_OUT; 
 
                    IF (L_IN_OUT IS NULL) THEN 
                        INSERT INTO PARTIDA_EL_NODE(OPR_ID,KOL,SUMA,IN_EL_ID,ELEMENT_ID) 
                        VALUES (:L_OPR_ID,:L_PN_KOL,:L_PN_SUMA,:L_EL_ID,:L_PN_EL_ID); 
                    ELSE 
                        UPDATE PARTIDA_EL_NODE SET 
                        KOL = ROUND5(KOL + :L_PN_KOL), 
                        SUMA = ROUNDD(SUMA + :L_PN_SUMA) 
                        WHERE ID = :L_IN_OUT; 
 
                    --ПОНЕЖЕ Е ПРЕХВЪРЛЯНЕ И СУМАТА НА ВХОДА ЗАВИСИ ОТ ТОВА, КОИ
                    --ПАРТИДИ СА ИЗПОЛЗВАНИ ПРИ ГЕНЕРИРАНЕ НА ИЗХОДА - ТУК СУМАТА
                    --СЕ ПОЛУЧАВА НАНОВО
                END 
 
                --ДОАБВЯМ И КОЛИЧЕСТВОТО НА ПРЕХВЪРЛЯНЕТО, И ИЗЧИСЛЕНИТЕ СУМИ
                --СП И ПВ(ТЯ ТРЯБВА ДА Е ИЗЧИСЛЕНА НА ПРЕДИШНИЯ РЕЗУЛТАТ ОТ ЗАЯВКАТА)
                SELECT 
                    OUT_EL.SUMA_SR 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.ID = :L_TEMP_OUT_EL 
                INTO 
                    :L_SUMA_SR; --КОЛКО ЩЕ ПОДАМ И ЗА КОРЕКЦИЯ НА ИЗЛ
 
                UPDATE RDB$NAL SET 
                RDB$NAL.KOL     = ROUND5(RDB$NAL.KOL + :L_KOL), 
                RDB$NAL.SUMA_FR = ROUNDD(RDB$NAL.SUMA_FR + (SELECT OUT_EL.SUMA_FR FROM OUT_EL WHERE OUT_EL.ID = :L_TEMP_OUT_EL)), 
                RDB$NAL.SUMA    = ROUNDD(RDB$NAL.SUMA + :L_SUMA_SR -- (SELECT OUT_EL.SUMA_SR FROM OUT_EL WHERE OUT_EL.ID = :L_TEMP_OUT_EL)
                )
                WHERE RDB$NAL.SKLAD_ID  = :L_SKLAD_ID; 
 
                UPDATE IN_EL SET 
                IN_EL.SUMA = ROUNDD((SELECT OUT_EL.SUMA_FR FROM OUT_EL WHERE OUT_EL.ID = :L_TEMP_OUT_EL)) 
                WHERE IN_EL.ID = :L_EL_ID; 
 
 
            END 
            ELSE IF (L_OPR_TIP IN (26,41)) THEN BEGIN 
                EXECUTE PROCEDURE RDB_RETURN_STOKA_PROD(L_EL_ID,L_OPR_ID,L_KOL,L_SKLAD_ID,L_OPR_DATE) 
                RETURNING_VALUES :L_IN_OUT,:L_SUMA_SR; 
 
                IF (L_IN_OUT = 1) THEN BEGIN 
                    EXIT; 
                END 
            END 
            ELSE BEGIN 
            --ВХОДА НЕ Е ОТ ПРЕХВЪРЛЯНЕ - ДАННИТЕ ЗА ПАРТИДИТЕ, ЩЕ СЕ ИЗВЛЕЧАТ
            --ОТ PARTIDA_EL_NODE
                FOR SELECT 
                    PN.KOL, 
                    PN.SUMA, 
                    PN.IN_EL_ID, 
                    PN.ELEMENT_ID 
                FROM 
                    PARTIDA_EL_NODE PN 
                WHERE 
                    PN.IN_EL_ID = :L_EL_ID 
                INTO 
                    :L_PN_KOL,:L_PN_SUMA,:L_PN_IN_EL_ID,:L_PN_EL_ID 
                DO BEGIN 
                    UPDATE RDB$NAL SET 
                    RDB$NAL.KOL             = ROUND5(RDB$NAL.KOL + :L_PN_KOL), 
                    RDB$NAL.SUMA            = ROUNDD(RDB$NAL.SUMA + :L_PN_SUMA), 
                    RDB$NAL.SUMA_FR         = ROUNDD(RDB$NAL.SUMA_FR + :L_PN_SUMA), 
                    RDB$NAL.LAST_CENA       = ROUND5(:L_PN_SUMA / :L_PN_KOL) 
                    WHERE RDB$NAL.SKLAD_ID  = :L_SKLAD_ID; 
 
                    L_SUMA_SR = ROUNDD(L_SUMA_SR + L_PN_SUMA);--КОЛКО ЩЕ ПОДАМ ЗА КОРЕКЦИЯ НА ИЗЛ-ТО
 
                    L_IN_OUT = NULL; 
 
                    SELECT 
                        RDB$PARTIDA_NAL.ID 
                    FROM 
                        RDB$PARTIDA_NAL 
                    WHERE 
                        RDB$PARTIDA_NAL.IN_EL_ID = :L_EL_ID 
                        AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_IN_OUT; 
 
                    IF (L_IN_OUT IS NULL) THEN BEGIN 
                        --И СЪЗДАВАМ ПАРТИДИТЕ, КОЙТО СА ИЗПОЛЗВАНИ ЗА ИЗХОД ОТ
                        --ДРУГИЯ СКЛАД - ИЗПOЛЗВАМ ДАННИТЕ ЗА КОЛИЧЕСТВО, СУМИ И
                        --ELEMENT_ID OT ГЕНЕРИРАНИТЕ ПРИ ПРЕХВЪРЛЯНЕТО
                        INSERT INTO RDB$PARTIDA_NAL(KOL_NAL,SUMA,IN_EL_ID,ELEMENT_ID) 
                        VALUES(:L_PN_KOL,:L_PN_SUMA,:L_PN_IN_EL_ID,:L_PN_EL_ID); 
                    END 
                    ELSE BEGIN 
                        UPDATE RDB$PARTIDA_NAL SET 
                        RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL + :L_PN_KOL), 
                        RDB$PARTIDA_NAL.SUMA = ROUNDD(RDB$PARTIDA_NAL.SUMA + :L_PN_SUMA) 
                        WHERE RDB$PARTIDA_NAL.ID = :L_IN_OUT; 
                    END 
                END 
            END 
 
            IF ((L_OPR_TIP = 1)OR(L_OPR_TIP = 22)) THEN BEGIN 
                --ПРОВЕРКА ДАЛИ ТАЗИ ДОСТАВКА ИМА ВРЪЩАНЕ НА СТОКА. АКО ИМА ЩЕ
                --РАЗПРЕДЕЛЯ КОЛИЧЕСТВАТА И ЧАК ТОГАВА АКО ОСТАНЕ НЕЩО ЩЕ ГО ПОЛЗВАМ
                --ЗА ПОНАТАТЪК В РАЗПРЕДЕЛЕНИЕТО -
                --НАЧИНА НА РАБОТА БИ ТРЯБВАЛО ДА ОБХВАНЕ И СЛУЧАЙТЕ, КОГАТО ПРОЦЕДУРАТА
                --СЕ ПОЛЗВА ОТ ДОБАВЯНЕ НА НОВО ВРЪЩАНЕ НА СТОКА. ЗАЩОТО ОТ ПРОЦЕДУРАТА, КОЯТО
                --ГО ИЗВЪРШВА OUT_EL РЕДА ВЕЧЕ ЩЕ ГО ИМА И ДОЛНАТА ЗАЯВКА ТРЯБВА ДА ГО ОТРАЗИ.
                --ТАКА ЩЕ МУ ЗАПИШЕ СУМИТЕ ПРАВИЛНО.
                FOR SELECT 
                    OUT_EL.ID, 
                    OUT_EL.KOL, 
                    OPR.ID 
                FROM 
                    OPR_RAZPAD_NODE INNER JOIN OUT_EL ON (OPR_RAZPAD_NODE.IN_EL_ID = :L_EL_ID AND 
                    OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID) 
                    INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
                WHERE 
                    OPR.OPR_TIP = 27 
                    OR OPR.OPR_TIP = 39 
                ORDER BY OPR.OPR_DATE,OPR.ID 
                INTO 
                    :L_OUT_EL_ID,:L_OUT_EL_KOL,:L_OUT_EL_OPR_ID 
                DO BEGIN 
                    --НАМИРАМ ОСТАТЪКА ОТ ПАРТИДАТА, АКО ИМА ПОВЕЧЕ ОТ 1 ВРЪЩАНЕ
                    --ТЯ ЩЕ Е С НАМАЛЕНО КОЛИЧЕСТВО И СУМИ ОТ ОРИГИНАЛНАТА
                    SELECT 
                        RDB$PARTIDA_NAL.KOL_NAL, 
                        RDB$PARTIDA_NAL.SUMA, 
                        RDB$PARTIDA_NAL.ID 
                    FROM 
                        RDB$PARTIDA_NAL 
                    WHERE 
                        RDB$PARTIDA_NAL.IN_EL_ID = :L_PN_IN_EL_ID 
                        AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_OUT_EL_NAL_KOL, :L_OUT_EL_NAL_SUMA, :L_OUT_EL_NAL_ID; 
 
                    --ПРОВЕРКА ДАЛИ ТОВА Е ПОСЛЕДНОТО ОСТАНАЛО КОЛИЧЕСТВО ОТ ПАРТИДАТА
                    --ЗА ВРЪЩАНЕ - Т.Е ЦЯЛОТО КОЛИЧЕСТВО Е БИЛО ОТЧЕТЕНО, ЧЕ Е ВЪРНАТО
                    --АКО Е ОСТАТЪКА ОТ ПАРТИДАТА Е РАВЕН НА КОЛИЧЕСТВОТО ВЪРНАТА СТОКА
                    --ТО ЩЕ ОБЕРЕ РАЗЛИКИТЕ ОТ ЗАКРЪГЛЕНИЯ
                    IF (L_OUT_EL_NAL_KOL > L_OUT_EL_KOL) THEN 
                        L_OUT_SUMA_FR = ROUNDD(ROUND5(L_PN_SUMA / L_PN_KOL) * L_OUT_EL_KOL); 
                    ELSE 
                        L_OUT_SUMA_FR = :L_OUT_EL_NAL_SUMA; --ОБИРА РАЗЛИКИТЕ ОТ ЗАКРЪГЛЯВАНИЯ
 
 
                    --НАМАЛЯМ НАЛИЧНОСТИТЕ В ПАРТИДАТА И ТАБЛИЦАТА С НАЛИЧНОСТИ
                    UPDATE RDB$PARTIDA_NAL SET 
                    RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL - :L_OUT_EL_KOL), 
                    RDB$PARTIDA_NAL.SUMA = ROUNDD(RDB$PARTIDA_NAL.SUMA - :L_OUT_SUMA_FR) 
                    WHERE RDB$PARTIDA_NAL.ID = :L_OUT_EL_NAL_ID; 
 
                    UPDATE RDB$NAL SET 
                    RDB$NAL.KOL = ROUND5(RDB$NAL.KOL - :L_OUT_EL_KOL), 
                    RDB$NAL.SUMA = ROUNDD(RDB$NAL.SUMA - :L_OUT_SUMA_FR), 
                    RDB$NAL.SUMA_FR = ROUNDD(RDB$NAL.SUMA_FR - :L_OUT_SUMA_FR) 
                    WHERE RDB$NAL.SKLAD_ID = :L_SKLAD_ID; 
 
                    L_SUMA_SR = ROUNDD(L_SUMA_SR - L_OUT_SUMA_FR);--НАМАЛЯМ СУМА СРЕДНА С ВРЪЩАНОТО
 
                    UPDATE OUT_EL SET 
                    OUT_EL.SUMA     = :L_OUT_SUMA_FR, 
                    OUT_EL.SUMA_SR  = :L_OUT_SUMA_FR, 
                    OUT_EL.SUMA_FR  = :L_OUT_SUMA_FR 
                    WHERE OUT_EL.ID = :L_OUT_EL_ID; 
 
                    L_GEN_ID = GEN_ID(GEN_PARTIDA_EL_NODE_ID,1); 
 
                    --ДОБАВЯНЕ НА НОВ ЗАПИС В PARTIDA_EL_NODE
                    INSERT INTO PARTIDA_EL_NODE(ID,OPR_ID,IN_EL_ID,KOL,SUMA,ELEMENT_ID) 
                    VALUES (:L_GEN_ID,:L_OUT_EL_OPR_ID,:L_EL_ID,:L_OUT_EL_KOL,:L_OUT_SUMA_FR,:L_PN_EL_ID); 
 
                    INSERT INTO PARTIDA_OUT_EL_NODE(OUT_EL_ID,PARTIDA_NODE_ID) 
                    VALUES(:L_OUT_EL_ID, :L_GEN_ID); 
 
                    --ОПРАВЯМ И СУМАТА В ТАБЛИЦАТА С ВРЪЗКИТЕ М/У ВХОДНИТЕ И ИЗХОДНИТЕ ЕЛЕМЕНТИ
                    UPDATE OPR_RAZPAD_NODE SET 
                    OPR_RAZPAD_NODE.SUMA_SR = :L_OUT_SUMA_FR 
                    WHERE OPR_RAZPAD_NODE.OUT_EL_ID = :L_OUT_EL_ID 
                    AND OPR_RAZPAD_NODE.IN_EL_ID = :L_EL_ID; 
 
                    UPDATE OPR SET 
                    OPR.SUMA= ROUNDD(OPR.SUMA + :L_OUT_SUMA_FR) 
                    WHERE OPR.ID = :L_OUT_EL_OPR_ID; 
 
                    --НОВ НАЧИН
                    UPDATE OPR_SUMI SET 
                    SUMA_FR = ROUNDD(SUMA_FR + :L_OUT_SUMA_FR), 
                    SUMA_SR = ROUNDD(SUMA_FR + :L_OUT_SUMA_FR) 
                    WHERE OPR_ID = :L_OUT_EL_OPR_ID; 
                END 
            END 
            --ДАЛИ ДА КОМПЕНСИРА ИЗЛИШЪЦИ
            IF (P_FLAG_IZL = 1) THEN BEGIN 
                EXECUTE PROCEDURE RDB_PARTIDA_IN_IZL(:L_EL_ID,:L_SKLAD_ID,:L_SUMA_SR); 
            END 
        END 
    END 
 
    --ЗАПИС НА НОВИТЕ НАЛИЧНОСТИ ЗА ПРОДУКТА
    FOR SELECT 
        RDB$NAL.SKLAD_ID, 
        RDB$NAL.SUMA, 
        RDB$NAL.SUMA_FR, 
        RDB$NAL.KOL, 
        RDB$NAL.LAST_CENA 
    FROM 
        RDB$NAL 
    INTO 
        :L_EL_ID,:L_SUMA_SR,:L_SUMA_FR,:L_KOL,:L_ED_CENA_FR 
    DO BEGIN 
        IF (EXISTS (SELECT NAL.ID FROM NAL WHERE NAL.SKLAD_ID = :L_EL_ID AND NAL.SIMPLE_ID = :P_SIMPLE_ID)) THEN 
            UPDATE NAL SET 
            NAL.SUMA = :L_SUMA_SR, 
            NAL.SUMA_FR = :L_SUMA_FR, 
            NAL.KOL_NAL = :L_KOL, 
            NAL.LAST_CENA = :L_ED_CENA_FR 
            WHERE NAL.SKLAD_ID = :L_EL_ID 
            AND NAL.SIMPLE_ID = :P_SIMPLE_ID; 
        ELSE 
            INSERT INTO NAL(SUMA,SUMA_FR,KOL_NAL,LAST_CENA,SKLAD_ID,SIMPLE_ID) 
            VALUES(:L_SUMA_SR,:L_SUMA_FR,:L_KOL, :L_ED_CENA_FR,:L_EL_ID,:P_SIMPLE_ID); 
    END 
 
    --ИЗТРИВАНЕ НА СТАРИТЕ ПАРТИДИ
    DELETE FROM PARTIDA_NAL 
    WHERE PARTIDA_NAL.IN_EL_ID IN( 
    SELECT 
        IN_EL.ID 
    FROM 
        IN_EL 
    WHERE 
        IN_EL.SIMPLE_ID = :P_SIMPLE_ID); 
 
    --И ЗАПИС НА НОВИТЕ
    INSERT INTO PARTIDA_NAL (SUMA,KOL_NAL,IN_EL_ID, ELEMENT_ID) 
    SELECT 
        RDB$PARTIDA_NAL.SUMA, 
        RDB$PARTIDA_NAL.KOL_NAL, 
        RDB$PARTIDA_NAL.IN_EL_ID, 
        RDB$PARTIDA_NAL.ELEMENT_ID 
    FROM 
        RDB$PARTIDA_NAL; 
 
    R_RESULT = 0;--ВСИЧКО Е МИНАЛО ДОБРЕ - ИЗЛИЗА СЕ БЕЗ ГРЕШКА
    */
END^


ALTER PROCEDURE DO_EDIT_DOST_PARTIDI_SUB_QUERY (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_DATE DATE)
RETURNS (
    R_KOL DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_EL_ID INTEGER,
    R_OPR_ID INTEGER,
    R_OPR_TIP INTEGER,
    R_SKLAD_ID INTEGER,
    R_OPR_DATE DATE,
    R_IN_OUT SMALLINT)
AS
DECLARE VARIABLE L_SKLAD_FKT SMALLINT;
DECLARE VARIABLE L_SKLAD_OPR SMALLINT;
DECLARE VARIABLE L_IS_FKT SMALLINT;
BEGIN 
/*    SELECT
        OPR.SKLAD_ID, 
        SYSTEM.H_SKLAD 
    FROM 
        OPR,SYSTEM 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :L_SKLAD_OPR,:L_SKLAD_FKT; 
 
    IF (L_SKLAD_OPR = L_SKLAD_FKT) THEN 
        L_IS_FKT = 1; 
    ELSE 
        L_IS_FKT = 0; 
 
    FOR SELECT 
        OUT_EL.KOL, 
        OUT_EL.SUMA_SR, 
        OUT_EL.SUMA_FR, 
        OUT_EL.ID, 
        OPR.ID, 
        OPR.OPR_TIP, 
        OPR.SKLAD_ID, 
        OPR.OPR_DATE, 
        CAST (0 AS SMALLINT) 
    FROM 
        OUT_EL INNER JOIN OPR ON (OUT_EL.OPR_ID = OPR.ID AND (NOT ((OPR.OPR_TIP = 27) OR (OPR.OPR_TIP = 39))) ) 
    WHERE 
        OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
        AND OUT_EL.IS_F = :L_IS_FKT 
        AND ((OPR.OPR_DATE > :P_DATE)OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID >= :P_OPR_ID))) 
    UNION 
    SELECT 
        IN_EL.KOL, 
        IN_EL.SUMA, 
        IN_EL.SUMA, 
        IN_EL.ID, 
        OPR.ID, 
        OPR.OPR_TIP, 
        OPR.SKLAD_ID, 
        OPR.OPR_DATE, 
        CAST (1 AS SMALLINT) 
    FROM 
        IN_EL INNER JOIN OPR ON IN_EL.OPR_ID = OPR.ID 
    WHERE 
        IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
        AND IN_EL.IS_F = :L_IS_FKT 
        AND ((NOT OPR.OPR_TIP = 4) AND (NOT ((OPR.OPR_TIP = 26) OR (OPR.OPR_TIP = 41))) ) 
        AND ((OPR.OPR_DATE > :P_DATE)OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID >= :P_OPR_ID))) 
    UNION 
    SELECT 
        OUT_EL.KOL, 
        OUT_EL.SUMA_SR, 
        OUT_EL.SUMA_FR, 
        IN_EL.ID, 
        OPR2.ID, 
        OPR2.OPR_TIP, 
        OPR2.SKLAD_ID, 
        OPR2.OPR_DATE, 
        CAST (1 AS SMALLINT) 
    FROM 
        OUT_EL LEFT JOIN OPR OPR1 ON OPR1.ID = OUT_EL.OPR_ID 
        INNER JOIN MOVE ON MOVE.OPR_OUT_ID = OPR1.ID 
        INNER JOIN OPR OPR2 ON OPR2.ID = MOVE.OPR_IN_ID 
        INNER JOIN IN_EL ON IN_EL.OPR_ID = MOVE.OPR_IN_ID 
    WHERE 
        OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
        AND IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
        AND OPR2.OPR_TIP  = 4 
        AND OUT_EL.IS_F = :L_IS_FKT 
        AND ((OPR1.OPR_DATE > :P_DATE) OR ((OPR1.OPR_DATE = :P_DATE) AND (OPR1.ID >= :P_OPR_ID))) 
    UNION 
    SELECT 
        IN_EL.KOL, 
        OPR_RAZPAD_NODE.SUMA_SR, 
        IN_EL.SUMA, 
        IN_EL.ID, 
        IN_EL.OPR_ID, 
        OPR.OPR_TIP, 
        OPR.SKLAD_ID, 
        OPR.OPR_DATE, 
        CAST (1 AS SMALLINT) 
    FROM 
        IN_EL INNER JOIN OPR ON (OPR.OPR_TIP  IN (26,41) AND OPR.ID = IN_EL.OPR_ID) 
        INNER JOIN OPR_RAZPAD_NODE ON IN_EL.ID = OPR_RAZPAD_NODE.IN_EL_ID 
 
    WHERE 
        IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
        AND ((OPR.OPR_DATE > :P_DATE) OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID >= :P_OPR_ID))) 
        AND IN_EL.IS_F = :L_IS_FKT 
 
    UNION ALL 
    --КОЛИЧЕСТВА КОИТО СА НЯМЕРЕНИ В ИНВЕНТАРИЗАЦИЯ ВЪВ ФАКТУРЕН ИЛИ НОРМАЛНИ СЛАДОВЕ,
    --ЗА КОИТО НЯМА ЕЛЕМЕНТИ В IN_EL ИЛИ OUT_EL
    SELECT 
        0.00, 
        0.00, 
        0.00, 
        0, 
        OPR.ID, 
        OPR.OPR_TIP, 
        OPR.SKLAD_ID, 
        OPR.OPR_DATE, 
        CAST (2 AS SMALLINT) 
    FROM 
        INV_OPIS INNER JOIN OPR ON (INV_OPIS.OPR_ID = OPR.ID AND INV_OPIS.SIMPLE_ID = :P_SIMPLE_ID) 
    WHERE 
        OPR.SKLAD_ID = :L_SKLAD_FKT 
        AND :L_SKLAD_FKT = :L_SKLAD_OPR 
        AND ((OPR.OPR_DATE > :P_DATE)OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID >= :P_OPR_ID))) 
 
        AND NOT((EXISTS(SELECT OUT_EL.ID FROM OUT_EL WHERE OPR_ID = OPR.ID AND SIMPLE_ID = INV_OPIS.SIMPLE_ID)) 
        OR (EXISTS (SELECT IN_EL.ID FROM IN_EL WHERE OPR_ID = OPR.ID AND SIMPLE_ID = INV_OPIS.SIMPLE_ID))) 
 
 
    UNION ALL 
 
    SELECT 
        0.00, 
        0.00, 
        0.00, 
        0, 
        OPR.ID, 
        OPR.OPR_TIP, 
        OPR.SKLAD_ID, 
        OPR.OPR_DATE, 
        CAST (2 AS SMALLINT) 
    FROM 
        INV_OPIS INNER JOIN OPR ON (INV_OPIS.OPR_ID = OPR.ID AND INV_OPIS.SIMPLE_ID = :P_SIMPLE_ID) 
    WHERE 
        NOT (:L_SKLAD_OPR = :L_SKLAD_FKT) 
        AND NOT (OPR.SKLAD_ID = :L_SKLAD_FKT) 
        AND ((OPR.OPR_DATE > :P_DATE)OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID >= :P_OPR_ID))) 
 
        AND NOT((EXISTS(SELECT OUT_EL.ID FROM OUT_EL WHERE OPR_ID = OPR.ID AND SIMPLE_ID = INV_OPIS.SIMPLE_ID)) 
        OR (EXISTS (SELECT IN_EL.ID FROM IN_EL WHERE OPR_ID = OPR.ID AND SIMPLE_ID = INV_OPIS.SIMPLE_ID))) 
 
 
    ORDER BY 8 DESC ,5 DESC 
    INTO 
        :R_KOL,:R_SUMA_SR,:R_SUMA_FR,:R_EL_ID,:R_OPR_ID, 
        :R_OPR_TIP,:R_SKLAD_ID,:R_OPR_DATE,:R_IN_OUT 
    DO 
        SUSPEND; */
END^


ALTER PROCEDURE DOST_EDIT_GET_SN (
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_SN VARCHAR(30),
    R_ELEMENT_ID INTEGER,
    R_IS_USED SMALLINT,
    R_IN_EL_ID INTEGER)
AS
 BEGIN
    FOR SELECT
        PN.IN_EL_ID,
        PN.ELEMENT_ID,
        SERIAL_NUM.SN
    FROM
        IN_EL INNER JOIN PARTIDA_NAL PN ON PN.IN_EL_ID = IN_EL.ID
        AND IN_EL.OPR_ID = :P_OPR_ID
        INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_Id
    INTO
        :R_IN_EL_ID,:R_ELEMENT_ID,:R_SN
    DO BEGIN
        SELECT
                COUNT(PEN.ID) 
            FROM 
                PARTIDA_NAL PN INNER JOIN PARTIDA_EL_NODE PEN ON PEN.PARTIDA_ID = PN.ID
                AND PN.IN_EL_ID = :R_IN_EL_ID AND PN.ELEMENT_ID = :R_ELEMENT_ID
                INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.PARTIDA_NODE_ID = PEN.ID
        INTO
            :R_IS_USED;
        R_IS_USED = IIF(R_IS_USED > 0,1,0);
        SUSPEND;
    END
END^


ALTER PROCEDURE DOST_IMPORT_KLI_MAP_INS (
    IN_KLI_NAME VARCHAR(100),
    KLI_ID INTEGER)
RETURNS (
    L_ID INTEGER)
AS
BEGIN 
  L_ID = 0; 
 
  SELECT ID 
  FROM 
    DOST_IMPORT_KLI_MAP 
  WHERE 
    IN_KLI_NAME =:IN_KLI_NAME 
  INTO 
    :L_ID; 
 
  IF (L_ID <> 0) THEN 
    DELETE FROM DOST_IMPORT_KLI_MAP 
      WHERE ID = :L_ID; 
 
  L_ID = gen_id(GEN_DOST_IMPORT_KLI_MAP_ID,1); 
 
  INSERT INTO DOST_IMPORT_KLI_MAP ( 
    ID, 
    IN_KLI_NAME, 
    KLI_ID) 
  VALUES ( 
    :L_ID, 
    :IN_KLI_NAME, 
    :KLI_ID); 
 
  SUSPEND; 
END^


ALTER PROCEDURE DOST_IMPORT_RAZF_MAP_INS (
    IN_RAZF_ID INTEGER,
    RAZF_ID INTEGER,
    KLI_ID INTEGER)
AS
DECLARE VARIABLE L_ID INTEGER; 
BEGIN 
  SELECT ID 
  FROM 
    DOST_IMPORT_RAZF_MAP 
  WHERE 
    (IN_RAZF_ID = :IN_RAZF_ID) AND (KLI_ID = :KLI_ID) 
  INTO 
    :L_ID; 
 
  IF (L_ID IS NOT NULL) THEN 
  BEGIN 
    UPDATE DOST_IMPORT_RAZF_MAP 
    SET 
        RAZF_ID = :RAZF_ID 
    WHERE 
        ID = :L_ID; 
 
    EXIT; 
  END 
 
  INSERT INTO DOST_IMPORT_RAZF_MAP ( 
    IN_RAZF_ID, 
    RAZF_ID, 
    KLI_ID) 
  VALUES ( 
    :IN_RAZF_ID, 
    :RAZF_ID, 
    :KLI_ID); 
END^


ALTER PROCEDURE DOST_IMPORT_SIMPLE_MAP_INS (
    IN_SIMPLE_ID INTEGER,
    SIMPLE_ID INTEGER,
    KLI_ID INTEGER)
AS
DECLARE VARIABLE L_ID INTEGER; 
BEGIN 
  SELECT ID 
  FROM 
    DOST_IMPORT_SIMPLE_MAP 
  WHERE 
    (IN_SIMPLE_ID = :IN_SIMPLE_ID) AND (KLI_ID = :KLI_ID) 
  INTO 
    :L_ID; 
 
  IF (L_ID IS NOT NULL) THEN 
  BEGIN 
    UPDATE DOST_IMPORT_SIMPLE_MAP 
    SET 
        SIMPLE_ID = :SIMPLE_ID 
    WHERE 
        ID = :L_ID; 
 
    EXIT; 
  END 
 
  INSERT INTO DOST_IMPORT_SIMPLE_MAP ( 
    IN_SIMPLE_ID, 
    SIMPLE_ID, 
    KLI_ID) 
  VALUES ( 
    :IN_SIMPLE_ID, 
    :SIMPLE_ID, 
    :KLI_ID); 
END^


ALTER PROCEDURE DOST_POR_KOL_RZV (
    P_OPR_DOST INTEGER)
RETURNS (
    R_POR_ID INTEGER,
    R_ZA_DATA DATE,
    R_SIMPLE_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_SIM_NAME VARCHAR(100))
AS
declare variable l_sklad_dost integer; 
declare variable l_kol double precision; 
declare variable l_por_el_id integer; 
declare variable l_por_opr_id integer; 
declare variable l_kol_nal double precision; 
declare variable l_kol_rzv double precision; 
BEGIN 
  select sklad_id from opr where id = :p_opr_dost into :l_sklad_dost; 
 
  for select 
    in_el.simple_id, 
    sum(in_el.kol), 
    simple.name 
  from in_el 
  join simple on simple.id = in_el.simple_id 
  where 
    opr_id = :p_opr_dost 
  group by in_el.simple_id, simple.name 
  union 
  select 
    in_el.simple_id, 
    sum(in_el.kol), 
    simple.name 
  from in_el 
  join simple on simple.id = in_el.simple_id 
  join opr_edit on opr_edit.ed_opr_id = in_el.opr_id and opr_edit.opr_id = :p_opr_dost 
  group by in_el.simple_id, simple.name 
  into :r_simple_id,:l_kol,:r_sim_name 
  do begin 
    FOR 
      select 
        por.id, 
        por.opr_id, 
        por.za_data, 
        por_el.id, 
        round5(por_el.kol - por_el.kol_rzv), 
        nal.kol_nal, 
        nal.kol_rzv 
      from por_el  
      join por on por.opr_id = por_el.opr_id and por.sklad_id = :l_sklad_dost 
      join nal on nal.sklad_id = por.sklad_id and nal.simple_id = por_el.simple_id and por_el.simple_id = :r_simple_id 
      where 
        por.status in (0,1,2) and 
        por_el.kol_rzv < por_el.kol 
      order by por.za_data, por.id 
      INTO :r_por_id,:l_por_opr_id, :r_za_data,:l_por_el_id, 
           :r_kol, :l_kol_nal, :l_kol_rzv 
    DO BEGIN 
      if (l_kol_rzv < l_kol_nal ) then begin 
        if (l_kol < r_kol) then 
            r_kol = l_kol; 
 
        if ((l_kol_rzv + r_kol) > l_kol_nal) then 
          r_kol = l_kol_nal - l_kol_rzv; 
 
        if (r_kol > 0) then begin 
          update nal 
          set kol_rzv = kol_rzv + :r_kol 
          where 
            simple_id = :r_simple_id and 
            sklad_id = :l_sklad_dost; 
 
          update por_el 
          set kol_rzv = kol_rzv + :r_kol 
          where 
            id = :l_por_el_id; 
 
          insert into por_dost_kol_rzv (opr_id_dost, opr_id_por, simple_id, kol) 
          values (:p_opr_dost, :l_por_opr_id, :r_simple_id, :r_kol); 
          suspend; 
        end 
      end 
    end 
  end 
 
  post_event 'POR_REFRESH'; 
END^


ALTER PROCEDURE DVSK_EL_ADD (
    P_IN_EL INTEGER,
    P_KLI_ID_PROIZV INTEGER,
    P_TYPE_DOK INTEGER,
    P_NOM_DOK VARCHAR(20),
    P_DATE_PROIZV DATE,
    P_BG_NOMER VARCHAR(15),
    P_PROIZHOD INTEGER)
AS
declare variable L_PARTIDA_ID integer; 
BEGIN 
    FOR SELECT 
            PARTIDA_NAL.ELEMENT_ID 
        FROM 
            PARTIDA_NAL 
        WHERE 
            PARTIDA_NAL.IN_EL_ID =:P_IN_EL 
 
    INTO :L_PARTIDA_ID 
    DO BEGIN 
        INSERT INTO DVSK_EL(PARTIDA_EL_ID, KLI_ID_PROIZV, TYPE_DOK, NOM_DOK,BG_NOMER,DATE_PROIZV, PROIZHOD) 
        VALUES (:L_PARTIDA_ID, :P_KLI_ID_PROIZV, :P_TYPE_DOK, :P_NOM_DOK, :P_BG_NOMER,:P_DATE_PROIZV, :P_PROIZHOD); 
    END 
END^


ALTER PROCEDURE EDIT_ADDRESS (
    P_ID TYPE OF COLUMN ADDRESSES.ID,
    P_PLACE_ID TYPE OF COLUMN ADDRESSES.PLACE_ID,
    P_ADDRESS TYPE OF COLUMN ADDRESSES.ADDRESS)
RETURNS (
    R_STATUS TYPE OF DOM_FLAG)
AS
BEGIN 
    R_STATUS = 0; 
 
    IF (EXISTS(SELECT 
        ADDRESSES.ID 
    FROM 
        ADDRESSES 
    WHERE 
        ADDRESSES.PLACE_ID = :P_PLACE_ID 
        AND UPPER(ADDRESSES.ADDRESS) = UPPER(:P_ADDRESS) 
        AND ADDRESSES.ID <> :P_ID)) 
    THEN BEGIN 
        -- ВЕЧЕ ИМА ЗАПИС С НАСЕЛЕНОТО МЯСТО И НОВАТА СТОЙНОСТ НА АДРЕСА 
        -- НЯМА ДА СЕ ЪПДЕЙТВА НИЩО 
        R_STATUS = 1; 
    END 
    ELSE BEGIN 
        UPDATE ADDRESSES SET 
            PLACE_ID = :P_PLACE_ID, 
            ADDRESS = :P_ADDRESS 
        WHERE 
            ID = :P_ID; 
    END 
END^


ALTER PROCEDURE EDIT_ALL_SIMCALC_DOSTSUMA (
    P_SIMPLE_ID INTEGER)
AS
DECLARE VARIABLE L_LAST_CENA DOUBLE PRECISION; 
DECLARE VARIABLE L_CHILD_SIMPLE_ID INTEGER; 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_EL DOUBLE PRECISION; 
DECLARE VARIABLE SIMPLE_ID INTEGER; 
DECLARE VARIABLE L_SUMA_DOST DOUBLE PRECISION; 
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
begin 
 
    FOR EXECUTE STATEMENT 
            'SELECT 
                SIMPLE_CALC.SIMPLE_ID 
            FROM 
                SIMPLE_CALC 
                INNER JOIN SIMPLE ON SIMPLE.ID = SIMPLE_CALC.SIMPLE_ID 
            WHERE 
                SIMPLE.RAZPAD <> 0 AND SIMPLE_CALC.CHILD_SIMPLE_ID ='||:P_SIMPLE_ID 
        INTO :SIMPLE_ID 
DO 
    BEGIN 
    L_SUMA_DOST = 0; 
    FOR SELECT 
        SIMPLE_CALC.SIMPLE_ID, 
        SIMPLE_CALC.CHILD_SIMPLE_ID, 
        SIMPLE_CALC.KOL, 
        CASE WHEN SIMPLE.RAZPAD = 0 THEN 
        (select FIRST 1 COALESCE(NAL.LAST_CENA, 0) FROM NAL WHERE NAL.SIMPLE_ID = SIMPLE_CALC.CHILD_SIMPLE_ID ORDER BY NAL.DATETIME_LASTCENA DESC) 
        ELSE 
        SIMPLE.SUMA_DOST_CALC END 
    FROM SIMPLE_CALC 
        INNER JOIN SIMPLE ON SIMPLE.ID = SIMPLE_CALC.CHILD_SIMPLE_ID 
    WHERE 
        SIMPLE_CALC.SIMPLE_ID =:SIMPLE_ID 
    INTO :L_SIMPLE_ID,:L_CHILD_SIMPLE_ID, :L_KOL, :L_LAST_CENA 
 
 
    DO BEGIN 
        L_SUMA_EL =roundd(L_KOL * COALESCE(L_LAST_CENA,0)); 
        L_SUMA_DOST = L_SUMA_DOST + L_SUMA_EL; 
 
    END 
 
    UPDATE SIMPLE 
    SET SUMA_DOST_CALC =:L_SUMA_DOST 
    WHERE 
        SIMPLE.ID =:L_SIMPLE_ID; 
  END 
end^


ALTER PROCEDURE EDIT_COMMENT (
    TABLE_NODE_NAME VARCHAR(30),
    ID INTEGER,
    NOTE BLOB SUB_TYPE 1 SEGMENT SIZE 2048)
RETURNS (
    COMMENT_ID SMALLINT)
AS
begin 
  /* Procedure Text */ 
  EXECUTE STATEMENT 
    'SELECT COMMENT_ID FROM '||TABLE_NODE_NAME||' WHERE ID = '||ID 
  INTO 
    :COMMENT_ID; 
 
  IF (COMMENT_ID IS NOT NULL) THEN 
    UPDATE COMMENTS SET NOTE=:NOTE WHERE ID = :COMMENT_ID; 
end^


ALTER PROCEDURE EDIT_DOST_NEW_CENA (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_DATE DATE)
RETURNS (
    R_RESULT SMALLINT)
AS
DECLARE VARIABLE L_SKLAD_ID INTEGER;
DECLARE VARIABLE L_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_EL_ID INTEGER;
DECLARE VARIABLE L_OPR_ID INTEGER;
DECLARE VARIABLE L_OPR_TIP INTEGER;
DECLARE VARIABLE L_OPR_DATE DATE;
DECLARE VARIABLE L_IN_OUT INTEGER;
DECLARE VARIABLE L_RAZPR_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PN_IN_EL_ID INTEGER;
DECLARE VARIABLE L_PN_EL_ID INTEGER;
DECLARE VARIABLE L_PN_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PN_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_PN_ID INTEGER;
DECLARE VARIABLE L_TEMP_ID INTEGER;
DECLARE VARIABLE L_TEMP_OUT_EL INTEGER;
DECLARE VARIABLE L_OUT_EL_ID INTEGER;
DECLARE VARIABLE L_OUT_EL_OPR_ID INTEGER;
DECLARE VARIABLE L_OUT_EL_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_PZN_ID INTEGER;
DECLARE VARIABLE L_PEN_OPR_ID INTEGER;
DECLARE VARIABLE L_PON_OUT_EL_ID INTEGER;
DECLARE VARIABLE L_TOTAL_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_TEMP_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_RET_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_RET_SUMA DOUBLE PRECISION;
BEGIN 
    /*V.6*/ 
/*    L_EL_ID = NULL;
    R_RESULT = 0; 
 
    SELECT SIMPLE.ID FROM SIMPLE  WHERE SIMPLE.ID = :P_SIMPLE_ID AND SIMPLE.USLUGA = '0' INTO :L_EL_ID; 
 
    IF (L_EL_ID IS NULL) THEN 
        EXIT; 
 
    R_RESULT = 1; 
    L_EL_ID = NULL; 
    FOR SELECT 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_KOL, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_EL_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_TIP, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_SKLAD_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_DATE, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_IN_OUT 
    FROM 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY(:P_SIMPLE_ID,:P_OPR_ID,:P_DATE) 
    ORDER BY 6 ASC,3 ASC 
    INTO 
        :L_KOL,:L_EL_ID,:L_OPR_ID,:L_OPR_TIP,:L_SKLAD_ID,:L_OPR_DATE,:L_IN_OUT 
    DO BEGIN 
        select 
            RDB$NAL.KOL 
        from 
            rdb$nal where rdb$nal.SKLAD_ID = 1 
        into 
            :L_TOTAL_SUMA_SR; 
        IF (L_IN_OUT = 0) THEN BEGIN 
            IF (NOT (L_OPR_TIP = 27)) THEN BEGIN 
                L_SUMA_FR = 0;--НОВАТА СУМА ПВ
                L_SUMA_SR = 0; 
                FOR SELECT 
                    PEN.KOL, 
                    PEN.IN_EL_ID, 
                    PEN.ELEMENT_ID, 
                    PEN.ID 
                FROM 
                    PARTIDA_OUT_EL_NODE PON INNER JOIN PARTIDA_EL_NODE PEN ON 
                    (PON.OUT_EL_ID = :L_EL_ID AND PEN.ID = PON.PARTIDA_NODE_ID) 
                INTO 
                    :L_RAZPR_KOL,:L_PN_IN_EL_ID,:L_PN_EL_ID,:L_PN_ID 
                DO BEGIN 
                    SELECT 
                        RDB$PARTIDA_NAL.KOL_NAL, 
                        RDB$PARTIDA_NAL.SUMA 
                    FROM 
                        RDB$PARTIDA_NAL 
                    WHERE 
                        RDB$PARTIDA_NAL.IN_EL_ID = :L_PN_IN_EL_ID 
                        AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_PN_KOL,:L_PN_SUMA; 
 
                    IF (L_PN_KOL > L_RAZPR_KOL) THEN BEGIN 
                        L_PN_SUMA    = ROUNDD(ROUND5(L_PN_SUMA / L_PN_KOL) * L_RAZPR_KOL); 
                        L_PN_KOL     = ROUND5(L_RAZPR_KOL); 
                    END 
 
                    UPDATE RDB$PARTIDA_NAL SET 
                    RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL - :L_PN_KOL), 
                    RDB$PARTIDA_NAL.SUMA    = ROUNDD(RDB$PARTIDA_NAL.SUMA - :L_PN_SUMA) 
                    WHERE RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    AND RDB$PARTIDA_NAL.IN_EL_ID = :L_PN_IN_EL_ID; 
 
                    UPDATE PARTIDA_EL_NODE SET 
                    PARTIDA_EL_NODE.SUMA = :L_PN_SUMA 
                    WHERE PARTIDA_EL_NODE.ID = :L_PN_ID; 
 
                    L_SUMA_FR = ROUNDD(L_SUMA_FR + L_PN_SUMA); 
 
 
                    SELECT 
                        ROUNDD(ROUND5(RDB$NAL.SUMA / RDB$NAL.KOL) * :L_RAZPR_KOL) 
                    FROM 
                        RDB$NAL 
                    WHERE 
                        RDB$NAL.SKLAD_ID = :L_SKLAD_ID 
                    INTO 
                        :L_PN_SUMA; 
 
                    UPDATE PARTIDA_IZL_NODE SET 
                    PARTIDA_IZL_NODE.SUMA_SR = :L_PN_SUMA 
                    WHERE PARTIDA_IZL_NODE.PARTIDA_EL_ID = :L_PN_ID; 
 
                    L_SUMA_SR = ROUNDD(L_SUMA_SR + L_PN_SUMA); 
                END 
 
                UPDATE RDB$NAL SET 
                RDB$NAL.SUMA = ROUNDD(RDB$NAL.SUMA - :L_SUMA_SR), 
                RDB$NAL.SUMA_FR = ROUNDD(RDB$NAL.SUMA_FR - :L_SUMA_FR), 
                RDB$NAL.KOL = ROUND5(RDB$NAL.KOL - :L_KOL) 
                WHERE RDB$NAL.SKLAD_ID = :L_SKLAD_ID; 
 
                UPDATE OUT_EL SET 
                OUT_EL.SUMA_FR = :L_SUMA_FR, 
                OUT_EL.SUMA_SR = :L_SUMA_SR 
                WHERE OUT_EL.ID = :L_EL_ID; 
 
                IF (L_OPR_TIP IN (2,23)) THEN BEGIN 
                    --НОВ НАЧИН
                    SELECT 
                        SUM(OUT_EL.SUMA_SR), 
                        SUM(OUT_EL.SUMA_FR) 
                    FROM 
                        OUT_EL 
                    WHERE 
                        OUT_EL.OPR_ID = :L_OPR_ID 
                    INTO 
                        :L_SUMA_SR,:L_SUMA_FR; 
 
                    UPDATE OPR_SUMI SET 
                    OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR), 
                    OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR) 
                    WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
 
                END 
                ELSE IF (L_OPR_TIP = 34) THEN BEGIN 
 
                --НОВ НАЧИН 
                --СУМА ЗА ЦЯЛАТА ПРОДАЖБА 
                SELECT 
                    SUM(OUT_EL.SUMA_SR), 
                    SUM(OUT_EL.SUMA_FR) 
                FROM 
                    OUT_EL INNER JOIN PROD_NODE ON PROD_NODE.OPR_SUB_PROD_ID = OUT_EL.OPR_ID 
                WHERE 
                    PROD_NODE.OPR_PROD_ID = (SELECT PN.OPR_PROD_ID FROM PROD_NODE PN WHERE PN.OPR_SUB_PROD_ID = :L_OPR_ID) 
                INTO 
                    :L_SUMA_SR,:L_SUMA_FR; 
 
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR), 
                OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR) 
                WHERE OPR_SUMI.OPR_ID = (SELECT PN.OPR_PROD_ID FROM PROD_NODE PN WHERE PN.OPR_SUB_PROD_ID = :L_OPR_ID); 
 
                --СУМАТА ЗА ОТДЕЛНАТА ПОДПРОДАЖБА 
                SELECT 
                    SUM(OUT_EL.SUMA_SR), 
                    SUM(OUT_EL.SUMA_FR) 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.OPR_ID = :L_OPR_ID 
                INTO 
                    :L_SUMA_SR,:L_SUMA_FR; 
 
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR), 
                OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR) 
                WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
 
            END 
                ELSE IF (L_OPR_TIP = 3) THEN BEGIN 
                    UPDATE INV SET 
                    INV.SUMA_LIPSA = ROUNDD(INV.SUMA_LIPSA + :L_SUMA_FR) 
                    WHERE INV.OPR_ID = :L_OPR_ID; 
                END 
                ELSE IF (L_OPR_TIP = 9) THEN BEGIN 
                    L_TEMP_OUT_EL = L_EL_ID; 
 
                    SELECT 
                        SUM(OUT_EL.SUMA_SR), 
                        SUM(OUT_EL.SUMA_FR) 
                    FROM 
                        OUT_EL 
                    WHERE 
                        OUT_EL.OPR_ID = :L_OPR_ID 
                    INTO 
                        :L_SUMA_SR,:L_SUMA_FR; 
 
                    UPDATE OPR SET 
                    OPR.SUMA = ROUNDD(:L_SUMA_FR) 
                    WHERE OPR.ID = :L_OPR_ID; 
 
                    --НОВ НАЧИН
                    UPDATE OPR_SUMI SET 
                    OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR), 
                    OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR) 
                    WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
 
                   -- UPDATE OUT_EL SET
                   -- OUT_EL.SUMA = :L_SUMA_SR
                   -- WHERE OUT_EL.ID = :L_EL_ID;
                END 
                ELSE IF (L_OPR_TIP = 11) THEN BEGIN 
                    SELECT 
                        SUM(OUT_EL.SUMA_SR), 
                        SUM(OUT_EL.SUMA_FR) 
                    FROM 
                        OUT_EL 
                    WHERE 
                        OUT_EL.OPR_ID = :L_OPR_ID 
                    INTO 
                        :L_SUMA_SR,:L_SUMA_FR; 
 
                    UPDATE OPR SET 
                    OPR.SUMA = ROUNDD(:L_SUMA_FR) 
                    WHERE OPR.ID = :L_OPR_ID; 
 
                    --НОВ НАЧИН
                    UPDATE OPR_SUMI SET 
                    OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR), 
                    OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR) 
                    WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
 
                    --UPDATE OUT_EL SET
                    --OUT_EL.SUMA = :L_SUMA_SR
                    --WHERE OUT_EL.ID = :L_EL_ID;
                END 
            END 
        END 
        ELSE IF (L_IN_OUT = 1) THEN  BEGIN 
            L_TOTAL_SUMA_SR = 0.00; 
            L_TEMP_KOL = L_KOL; 
 
            IF (L_OPR_TIP  = 4) THEN BEGIN 
                FOR SELECT 
                    PN.KOL, 
                    PN.SUMA, 
                    PN.ELEMENT_ID 
                FROM 
                    PARTIDA_OUT_EL_NODE PO INNER JOIN PARTIDA_EL_NODE PN ON 
                    (PO.OUT_EL_ID = :L_TEMP_OUT_EL AND PN.ID = PO.PARTIDA_NODE_ID) 
                INTO 
                    :L_PN_KOL,:L_PN_SUMA,:L_PN_EL_ID 
                DO BEGIN 
                    SELECT 
                        PARTIDA_EL_NODE.ID 
                    FROM 
                        PARTIDA_EL_NODE INNER JOIN IN_EL ON IN_EL.ID = :L_EL_ID AND IN_EL.OPR_ID = PARTIDA_EL_NODE.OPR_ID 
                        AND PARTIDA_EL_NODE.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_TEMP_ID; 
 
 
                    L_IN_OUT = NULL; 
                    SELECT 
                        RDB$PARTIDA_NAL.ID 
                    FROM 
                        RDB$PARTIDA_NAL 
                    WHERE 
                        RDB$PARTIDA_NAL.IN_EL_ID = :L_EL_ID 
                        AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_IN_OUT; 
 
                    IF (L_IN_OUT IS NULL) THEN 
                        INSERT INTO RDB$PARTIDA_NAL(KOL_NAL,SUMA,IN_EL_ID,ELEMENT_ID) 
                        VALUES(:L_PN_KOL,:L_PN_SUMA,:L_EL_ID,:L_PN_EL_ID); 
                    ELSE 
                        UPDATE RDB$PARTIDA_NAL SET 
                        RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL + :L_PN_KOL), 
                        RDB$PARTIDA_NAL.SUMA = ROUNDD(RDB$PARTIDA_NAL.SUMA + :L_PN_SUMA) 
                        WHERE RDB$PARTIDA_NAL.ID = :L_IN_OUT; 
 
                    UPDATE OPR SET 
                    OPR.SUMA = ROUNDD(OPR.SUMA + :L_PN_SUMA) 
                    WHERE OPR.ID = :L_OPR_ID; 
 
                    UPDATE PARTIDA_EL_NODE SET 
                    SUMA = ROUNDD(SUMA + :L_PN_SUMA) 
                    WHERE ID = :L_TEMP_ID; 
 
                    UPDATE IN_EL SET 
                    IN_EL.SUMA = ROUNDD(IN_EL.SUMA + :L_PN_SUMA) 
                    WHERE IN_EL.ID = :L_EL_ID; 
 
                END 
 
                SELECT 
                    OUT_EL.SUMA_SR 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.ID = :L_TEMP_OUT_EL 
                INTO 
                    :L_TOTAL_SUMA_SR; 
 
                UPDATE RDB$NAL SET 
                RDB$NAL.KOL     = ROUND5(RDB$NAL.KOL + :L_KOL), 
                RDB$NAL.SUMA_FR = ROUNDD(RDB$NAL.SUMA_FR + (SELECT OUT_EL.SUMA_FR FROM OUT_EL WHERE OUT_EL.ID = :L_TEMP_OUT_EL)), 
                RDB$NAL.SUMA    = ROUNDD(RDB$NAL.SUMA + :L_TOTAL_SUMA_SR) 
                WHERE RDB$NAL.SKLAD_ID  = :L_SKLAD_ID; 
            END 
            ELSE BEGIN 
                IF (L_OPR_TIP = 26) THEN BEGIN 
                    FOR SELECT 
                        PEN.ID, 
                        PEN.KOL 
                    FROM 
                        PARTIDA_EL_NODE PEN INNER JOIN IN_EL ON 
                        (PEN.IN_EL_ID = :L_EL_ID AND IN_EL.OPR_ID = PEN.OPR_ID) 
                    INTO 
                        :L_PN_ID,:L_PN_KOL 
                    DO BEGIN 
                        SELECT 
                            avg(ROUNDD(ROUND5(PEN2.SUMA / PEN2.KOL) * :L_PN_KOL)) 
                        FROM 
                            OPR_RAZPAD_NODE ORN INNER JOIN PARTIDA_OUT_EL_NODE PON ON 
                            (ORN.IN_EL_ID = :L_EL_ID AND ORN.OUT_EL_ID = PON.OUT_EL_ID) 
                            INNER JOIN PARTIDA_EL_NODE PEN1 ON PEN1.ID = PON.PARTIDA_NODE_ID 
                            INNER JOIN IN_EL ON IN_EL.ID = PEN1.IN_EL_ID 
                            INNER JOIN PARTIDA_EL_NODE PEN2 ON 
                            IN_EL.ID = PEN2.IN_EL_ID AND PEN2.OPR_ID = IN_EL.OPR_ID AND PEN2.ELEMENT_ID = pen1.element_id 
                        INTO 
                            :L_PN_SUMA; 
 
                        UPDATE PARTIDA_EL_NODE SET 
                        SUMA = :L_PN_SUMA 
                        WHERE ID = :L_PN_ID; 
                    END 
 
                    SELECT 
                        SUM(OUT_EL.SUMA_SR) / SUM(PARTIDA_EL_NODE.KOL) 
                    FROM 
                        OPR_RAZPAD_NODE ORN INNER JOIN PARTIDA_OUT_EL_NODE PON ON 
                        (ORN.IN_EL_ID = :L_EL_ID AND PON.OUT_EL_ID = ORN.OUT_EL_ID) 
                        INNER JOIN PARTIDA_EL_NODE ON PARTIDA_EL_NODE.ID = PON.PARTIDA_NODE_ID 
                        INNER JOIN OUT_EL ON OUT_EL.ID = PON.OUT_EL_ID 
                    INTO 
                        :L_SUMA_SR; 
 
                    L_TOTAL_SUMA_SR = L_SUMA_SR; 
 
                    UPDATE OPR_RAZPAD_NODE SET 
                    SUMA_SR = :L_SUMA_SR 
                    WHERE IN_EL_ID = :L_EL_ID; 
 
                    SELECT 
                        SUM(PARTIDA_EL_NODE.SUMA) 
                    FROM 
                        PARTIDA_EL_NODE WHERE IN_EL_ID = :L_EL_ID 
                        AND OPR_ID = :L_OPR_ID 
                    INTO 
                        :L_SUMA_FR; 
 
                    UPDATE IN_EL SET 
                    SUMA = :L_SUMA_FR 
                    WHERE ID = :L_EL_ID; 
 
                    SELECT 
                        SUM(IN_EL.SUMA), 
                        SUM(OPR_RAZPAD_NODE.SUMA_SR) 
                    FROM 
                        IN_EL INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
                    WHERE IN_EL.OPR_ID = :L_OPR_ID 
                    INTO 
                        :L_PN_KOL,:L_PN_SUMA; 
 
                    UPDATE RET_STOKA_PROD SET 
                    SUMA_FR = :L_PN_KOL, 
                    SUMA_SR = :L_PN_SUMA 
                    WHERE OPR_ID = :L_OPR_ID; 
 
                    --НОВ НАЧИН
                    UPDATE OPR_SUMI SET 
                    OPR_SUMI.SUMA_FR = :L_PN_KOL, 
                    OPR_SUMI.SUMA_SR = :L_PN_SUMA 
                    WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
                END 
                ELSE 
                    SELECT 
                        SUM(PN.SUMA) 
                    FROM 
                        PARTIDA_EL_NODE PN INNER JOIN IN_EL ON 
                        (IN_EL.OPR_ID = PN.OPR_ID AND IN_EL.ID = :L_EL_ID and pn.IN_EL_ID = :L_EL_ID) 
                    INTO 
                        :L_TOTAL_SUMA_SR;--КОЛКОТО ВЛИЗА КАТО ПВ Е И СУМА СРЕДНО ПРЕТЕГЛЕНА
 
                UPDATE RDB$NAL SET 
                SUMA = ROUNDD(SUMA + :L_TOTAL_SUMA_SR) 
                WHERE SKLAD_ID = :L_SKLAD_ID; 
 
                FOR SELECT 
                    PN.KOL, 
                    PN.SUMA, 
                    PN.IN_EL_ID, 
                    PN.ELEMENT_ID 
                FROM 
                    PARTIDA_EL_NODE PN INNER JOIN IN_EL ON 
                    (IN_EL.OPR_ID = PN.OPR_ID AND IN_EL.ID = :L_EL_ID AND PN.IN_EL_ID = :L_EL_ID) 
                INTO 
                    :L_PN_KOL,:L_PN_SUMA,:L_PN_IN_EL_ID,:L_PN_EL_ID 
                DO BEGIN 
                    UPDATE RDB$NAL SET 
                    RDB$NAL.KOL             = ROUND5(RDB$NAL.KOL + :L_PN_KOL), 
                    RDB$NAL.SUMA_FR         = ROUNDD(RDB$NAL.SUMA_FR + :L_PN_SUMA), 
                    RDB$NAL.LAST_CENA       = ROUND5(:L_PN_SUMA / :L_PN_KOL) 
                    WHERE RDB$NAL.SKLAD_ID  = :L_SKLAD_ID; 
 
                    L_IN_OUT = NULL; 
 
                    SELECT 
                        RDB$PARTIDA_NAL.ID 
                    FROM 
                        RDB$PARTIDA_NAL 
                    WHERE 
                        RDB$PARTIDA_NAL.IN_EL_ID = :L_EL_ID 
                        AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_IN_OUT; 
 
                    IF (L_IN_OUT IS NULL) THEN 
                        INSERT INTO RDB$PARTIDA_NAL(KOL_NAL,SUMA,IN_EL_ID,ELEMENT_ID) 
                        VALUES(:L_PN_KOL,:L_PN_SUMA,:L_PN_IN_EL_ID,:L_PN_EL_ID); 
                    ELSE 
                        UPDATE RDB$PARTIDA_NAL SET 
                        RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL + :L_PN_KOL), 
                        RDB$PARTIDA_NAL.SUMA = ROUNDD(RDB$PARTIDA_NAL.SUMA + :L_PN_SUMA) 
                        WHERE RDB$PARTIDA_NAL.ID = :L_IN_OUT; 
                END 
            END 
 
            IF (L_OPR_TIP = 1) THEN BEGIN 
                FOR SELECT 
                    OUT_EL.ID, 
                    OUT_EL.OPR_ID, 
                    OUT_EL.SUMA_FR, 
                    OUT_EL.SUMA 
                FROM 
                    OPR_RAZPAD_NODE INNER JOIN OUT_EL ON 
                    (OPR_RAZPAD_NODE.IN_EL_ID = :L_EL_ID AND OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID) 
                    INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
                WHERE 
                    OPR.OPR_TIP = 27 
                    OR OPR.OPR_TIP = 39 
                ORDER BY OPR.OPR_DATE,OPR.ID 
                INTO 
                    :L_OUT_EL_ID,:L_OUT_EL_OPR_ID,:L_RET_SUMA_FR,:L_RET_SUMA 
                DO BEGIN 
                    SELECT 
                        PEN.ELEMENT_ID, 
                        PEN.IN_EL_ID, 
                        PEN.KOL, 
                        PEN.ID 
                    FROM 
                        PARTIDA_OUT_EL_NODE PON INNER JOIN PARTIDA_EL_NODE PEN ON 
                        (PON.OUT_EL_ID = :L_OUT_EL_ID AND PEN.ID = PON.PARTIDA_NODE_ID) 
                    INTO 
                        :L_PN_EL_ID,:L_PN_IN_EL_ID,:L_OUT_EL_KOL,:L_PN_ID; 
 
                    SELECT 
                        RDB$PARTIDA_NAL.KOL_NAL, 
                        RDB$PARTIDA_NAL.SUMA 
                    FROM 
                        RDB$PARTIDA_NAL 
                    WHERE 
                        RDB$PARTIDA_NAL.IN_EL_ID = :L_PN_IN_EL_ID 
                        AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_PN_KOL,:L_PN_SUMA; 
 
                    IF (L_PN_KOL > L_OUT_EL_KOL) THEN 
                        L_OUT_SUMA_FR = ROUNDD(ROUND5(L_PN_SUMA / L_PN_KOL) * L_OUT_EL_KOL); 
                    ELSE 
                        L_OUT_SUMA_FR = :L_PN_SUMA; 
 
                    UPDATE RDB$PARTIDA_NAL SET 
                    RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL - :L_OUT_EL_KOL), 
                    RDB$PARTIDA_NAL.SUMA = ROUNDD(RDB$PARTIDA_NAL.SUMA - :L_OUT_SUMA_FR) 
                    WHERE RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    AND RDB$PARTIDA_NAL.IN_EL_ID = :L_PN_IN_EL_ID; 
 
                    UPDATE RDB$NAL SET 
                    RDB$NAL.KOL = ROUND5(RDB$NAL.KOL - :L_OUT_EL_KOL), 
                    RDB$NAL.SUMA = ROUNDD(RDB$NAL.SUMA - :L_OUT_SUMA_FR), 
                    RDB$NAL.SUMA_FR = ROUNDD(RDB$NAL.SUMA_FR - :L_OUT_SUMA_FR) 
                    WHERE RDB$NAL.SKLAD_ID = :L_SKLAD_ID; 
 
                    L_TEMP_KOL = ROUND5(L_TEMP_KOL - L_OUT_EL_KOL); 
                    L_TOTAL_SUMA_SR = ROUNDD(L_TOTAL_SUMA_SR - L_OUT_SUMA_FR); 
 
                    UPDATE OUT_EL SET 
                    OUT_EL.SUMA_SR  = :L_OUT_SUMA_FR, 
                    OUT_EL.SUMA_FR  = :L_OUT_SUMA_FR 
                    WHERE OUT_EL.ID = :L_OUT_EL_ID; 
                    IF (ROUNDD(L_RET_SUMA) = ROUNDD(L_RET_SUMA_FR)) THEN --СУМИТЕ СА ЕДНАКВИ - НЕ СА
                    --ВЪВЕЖДАНИ ОТ ОПЕРАТОР ДРУГИ ЗАОВА И ТРЕТАТА СУМА Е = НА ПВ
                        UPDATE OUT_EL SET 
                        OUT_EL.SUMA = :L_OUT_SUMA_FR 
                        WHERE OUT_EL.ID = :L_OUT_EL_ID; 
 
                    UPDATE PARTIDA_EL_NODE 
                    SET SUMA = :L_OUT_SUMA_FR 
                    WHERE ID = :L_PN_ID; 
 
                    UPDATE OPR_RAZPAD_NODE SET 
                    OPR_RAZPAD_NODE.SUMA_SR = :L_OUT_SUMA_FR 
                    WHERE OPR_RAZPAD_NODE.OUT_EL_ID = :L_OUT_EL_ID 
                    AND OPR_RAZPAD_NODE.IN_EL_ID = :L_EL_ID; 
 
                    SELECT 
                        SUM(OUT_EL.SUMA) 
                    FROM 
                        OUT_EL 
                    WHERE 
                        OUT_EL.OPR_ID = :L_OUT_EL_OPR_ID 
                    INTO 
                        :L_OUT_SUMA_FR; 
 
                    UPDATE OPR SET 
                    OPR.SUMA = ROUNDD(:L_OUT_SUMA_FR) 
                    WHERE OPR.ID = :L_OUT_EL_OPR_ID; 
 
                    SELECT 
                        SUM(OUT_EL.SUMA_FR) 
                    FROM 
                        OUT_EL 
                    WHERE 
                        OUT_EL.OPR_ID = :L_OUT_EL_OPR_ID 
                    INTO 
                        :L_OUT_SUMA_FR; 
 
                    UPDATE OPR_SUMI SET 
                    SUMA_FR = ROUNDD(:L_OUT_SUMA_FR), 
                    SUMA_SR = ROUNDD(:L_OUT_SUMA_FR) 
                    WHERE OPR_ID = :L_OUT_EL_OPR_ID; 
                END 
            END 
 
            FOR SELECT 
                PON.OUT_EL_ID, 
                PEN.OPR_ID, 
                PZN.ID 
            FROM 
                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IZL_NODE PZN ON (PEN.IN_EL_ID = :L_EL_ID AND PZN.PARTIDA_EL_ID = PEN.ID) 
                INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.PARTIDA_NODE_ID = PEN.ID 
            INTO 
                :L_PON_OUT_EL_ID,:L_PEN_OPR_ID,:L_PZN_ID 
            DO BEGIN 
 
                L_SUMA_FR = 0;--НОВАТА СУМА ПВ
                L_SUMA_SR = 0; 
 
                FOR SELECT 
                    PEN.KOL, 
                    PEN.IN_EL_ID, 
                    PEN.ELEMENT_ID, 
                    PEN.ID 
                FROM 
                    PARTIDA_OUT_EL_NODE PON INNER JOIN PARTIDA_EL_NODE PEN ON 
                    (PON.OUT_EL_ID = :L_PON_OUT_EL_ID AND PEN.ID = PON.PARTIDA_NODE_ID) 
                    INNER JOIN PARTIDA_IZL_NODE PZN ON PZN.PARTIDA_EL_ID = PEN.ID 
                INTO 
                    :L_RAZPR_KOL,:L_PN_IN_EL_ID,:L_PN_EL_ID,:L_PN_ID 
                DO BEGIN 
                    SELECT 
                        RDB$PARTIDA_NAL.KOL_NAL, 
                        RDB$PARTIDA_NAL.SUMA 
                    FROM 
                        RDB$PARTIDA_NAL 
                    WHERE 
                        RDB$PARTIDA_NAL.IN_EL_ID = :L_PN_IN_EL_ID 
                        AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_PN_KOL,:L_PN_SUMA; 
 
                    IF (L_PN_KOL > L_RAZPR_KOL) THEN BEGIN 
                        L_PN_SUMA    = ROUNDD(ROUND5(L_PN_SUMA / L_PN_KOL) * L_RAZPR_KOL); 
                        L_PN_KOL     = ROUND5(L_RAZPR_KOL); 
                    END 
 
                    UPDATE RDB$PARTIDA_NAL SET 
                    RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL - :L_PN_KOL), 
                    RDB$PARTIDA_NAL.SUMA    = ROUNDD(RDB$PARTIDA_NAL.SUMA - :L_PN_SUMA) 
                    WHERE RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    AND RDB$PARTIDA_NAL.IN_EL_ID = :L_PN_IN_EL_ID; 
 
                    UPDATE PARTIDA_EL_NODE SET 
                    PARTIDA_EL_NODE.SUMA = :L_PN_SUMA 
                    WHERE PARTIDA_EL_NODE.ID = :L_PN_ID; 
 
                    L_SUMA_FR = ROUNDD(L_SUMA_FR + L_PN_SUMA); 
 
                    --SELECT
                    --    ROUNDD(ROUND5(RDB$NAL.SUMA / :L_KOL) * :L_RAZPR_KOL)
                    --FROM
                    --    RDB$NAL
                    --WHERE
                    --    RDB$NAL.SKLAD_ID = :L_SKLAD_ID
                    --INTO
                    --    :L_PN_SUMA;
                    L_PN_SUMA = ROUNDD(ROUND5(L_TOTAL_SUMA_SR / L_TEMP_KOL) * L_RAZPR_KOL); 
 
                    UPDATE PARTIDA_IZL_NODE SET 
                    PARTIDA_IZL_NODE.SUMA_SR = :L_PN_SUMA 
                    WHERE PARTIDA_IZL_NODE.PARTIDA_EL_ID = :L_PN_ID; 
 
                    L_SUMA_SR = ROUNDD(L_SUMA_SR + L_PN_SUMA); 
                END 
 
                UPDATE RDB$NAL SET 
                RDB$NAL.SUMA = ROUNDD(RDB$NAL.SUMA - :L_SUMA_SR), 
                RDB$NAL.SUMA_FR = ROUNDD(RDB$NAL.SUMA_FR - :L_SUMA_FR) 
                WHERE RDB$NAL.SKLAD_ID = :L_SKLAD_ID; 
 
                UPDATE OUT_EL SET 
                OUT_EL.SUMA_FR = ROUNDD(OUT_EL.SUMA_FR + :L_SUMA_FR), 
                OUT_EL.SUMA_SR = ROUNDD(OUT_EL.SUMA_SR + :L_SUMA_SR) 
                WHERE OUT_EL.ID = :L_PON_OUT_EL_ID; 
 
                UPDATE PARTIDA_IZL_NODE SET 
                SUMA_SR = :L_SUMA_SR 
                WHERE ID = :L_PZN_ID; 
 
                SELECT 
                    SUM(OUT_EL.SUMA_FR), 
                    SUM(OUT_EL.SUMA_SR) 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.OPR_ID = :L_PEN_OPR_ID 
                INTO 
                    :L_SUMA_FR,:L_SUMA_SR; 
 
                    UPDATE OPR_SUMI SET 
                    OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR), 
                    OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR) 
                    WHERE OPR_SUMI.OPR_ID = :L_PEN_OPR_ID; 
            END 
 
        END 
    END 
 
    FOR SELECT 
        RDB$NAL.SKLAD_ID, 
        RDB$NAL.SUMA, 
        RDB$NAL.SUMA_FR, 
        RDB$NAL.LAST_CENA 
    FROM 
        RDB$NAL 
    INTO 
        :L_EL_ID,:L_SUMA_SR,:L_SUMA_FR,:L_OUT_SUMA_FR 
    DO BEGIN 
        UPDATE NAL SET 
        NAL.SUMA = :L_SUMA_SR, 
        NAL.SUMA_FR = :L_SUMA_FR, 
        NAL.LAST_CENA = :L_OUT_SUMA_FR, 
        NAL.DATETIME_LASTCENA = CURRENT_TIMESTAMP 
        WHERE NAL.SKLAD_ID = :L_EL_ID 
        AND NAL.SIMPLE_ID = :P_SIMPLE_ID; 
    END 
 
    FOR SELECT 
        RDB$PARTIDA_NAL.SUMA, 
        RDB$PARTIDA_NAL.IN_EL_ID, 
        RDB$PARTIDA_NAL.ELEMENT_ID 
    FROM 
        RDB$PARTIDA_NAL 
    INTO 
        :L_PN_SUMA,:L_PN_IN_EL_ID,:L_PN_EL_ID 
    DO 
        UPDATE PARTIDA_NAL SET 
        SUMA = :L_PN_SUMA 
        WHERE IN_EL_ID = :L_PN_IN_EL_ID 
        AND ELEMENT_ID = :L_PN_EL_ID; 
 
    R_RESULT = 0;     */
END^


ALTER PROCEDURE EDIT_DOST_NEW_NAL (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_FLAG_IZL SMALLINT,
    P_DATE DATE)
RETURNS (
    R_RESULT SMALLINT)
AS
DECLARE VARIABLE L_SKLAD_ID INTEGER;
DECLARE VARIABLE L_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_EL_ID INTEGER;
DECLARE VARIABLE L_OPR_ID INTEGER;
DECLARE VARIABLE L_OPR_TIP INTEGER;
DECLARE VARIABLE L_OPR_DATE DATE;
DECLARE VARIABLE L_IN_OUT INTEGER;
DECLARE VARIABLE L_RAZPR_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PN_IN_EL_ID INTEGER;
DECLARE VARIABLE L_PN_EL_ID INTEGER;
DECLARE VARIABLE L_PN_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PN_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_PN_ID INTEGER;
DECLARE VARIABLE L_GEN_ID INTEGER;
DECLARE VARIABLE L_TEMP_OUT_EL INTEGER;
DECLARE VARIABLE L_ED_CENA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_ED_CENA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_EL_ID INTEGER;
DECLARE VARIABLE L_OUT_EL_OPR_ID INTEGER;
DECLARE VARIABLE L_OUT_EL_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_EL_NAL_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_EL_NAL_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_EL_NAL_ID INTEGER;
DECLARE VARIABLE L_FIND_KOL_FOR_IZL DOUBLE PRECISION;
DECLARE VARIABLE L_INV_ID INTEGER;
DECLARE VARIABLE L_INV_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_INV_CENA DOUBLE PRECISION;
DECLARE VARIABLE L_NAL_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_FLAG_FKT SMALLINT;
DECLARE VARIABLE L_RET_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_RET_SUMA_FR DOUBLE PRECISION;
BEGIN 
    /*V.11*/ 
/*    L_EL_ID = NULL;
    R_RESULT = 0; 
 
    SELECT SIMPLE.ID FROM SIMPLE  WHERE SIMPLE.ID = :P_SIMPLE_ID AND SIMPLE.USLUGA = '0' INTO :L_EL_ID; 
 
    IF (L_EL_ID IS NULL) THEN 
        EXIT; 
 
    R_RESULT = 1; 
    L_EL_ID = NULL; 
 
    SELECT 
        OPR.SKLAD_ID, 
        SYSTEM.H_SKLAD 
    FROM 
        OPR,SYSTEM 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :L_SKLAD_ID,:L_FLAG_FKT; 
 
    IF (L_SKLAD_ID = L_FLAG_FKT) THEN 
        L_FLAG_FKT = 1; 
    ELSE 
        L_FLAG_FKT = 0; 
 
    L_SKLAD_ID = NULL; 
 
    FOR SELECT 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_KOL, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_EL_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_TIP, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_SKLAD_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_DATE, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_IN_OUT 
    FROM 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY(:P_SIMPLE_ID,:P_OPR_ID,:P_DATE) 
    ORDER BY 6 ASC,3 ASC 
    INTO 
        :L_KOL,:L_EL_ID,:L_OPR_ID,:L_OPR_TIP,:L_SKLAD_ID,:L_OPR_DATE,:L_IN_OUT 
    DO BEGIN 
        IF (L_OPR_TIP = 3) THEN BEGIN 
            L_INV_ID = NULL; 
            SELECT 
                INV_OPIS.ID, 
                INV_OPIS.KOL_F, 
                INV_OPIS.CENA_F 
             FROM 
                INV_OPIS 
             WHERE 
                INV_OPIS.OPR_ID = :L_OPR_ID 
                AND INV_OPIS.SIMPLE_ID = :P_SIMPLE_ID 
             INTO 
                 :L_INV_ID,:L_INV_KOL,:L_INV_CENA; 
 
             IF (L_INV_ID IS NOT NULL) THEN BEGIN 
                SELECT 
                    RDB$NAL.KOL 
                FROM 
                    RDB$NAL 
                WHERE 
                    SKLAD_ID = :L_SKLAD_ID 
                INTO 
                    :L_NAL_KOL; 
 
                UPDATE INV_OPIS SET KOL_S = COALESCE(:L_NAL_KOL,0.00) 
                WHERE ID = :L_INV_ID; 
 
                IF (ROUND5(L_NAL_KOL) = ROUND5(L_INV_KOL)) THEN BEGIN 
                    --TRIEM ELEMENTA 
                    IF (L_IN_OUT = 0) THEN 
                        EXECUTE PROCEDURE DEL_OUT_EL_FROM_INV(L_EL_ID); 
                    ELSE 
                        EXECUTE PROCEDURE DEL_IN_EL_FROM_INV(L_EL_ID); 
                    L_IN_OUT = -1;--НЯМА ДА ПРАВИМ ИЗЧИСЛЕНИЯ ЗА ТОЗИ ЕЛЕМЕНТ И СЕ ПРЕСКАЧА НА СЛЕДВАЩИЯ 
                END 
                ELSE IF (L_NAL_KOL > L_INV_KOL) THEN BEGIN 
                    --OUT_EL - АКО СЕГА Е OUT_EL САМО КОРЕКЦИЯ НА КОЛИЧЕСТВОТО ПРЕДИ ДА СЕ ИЗЧИСЛИ, ИНАЧЕ ТРИЕМ 
                    --IN_EL И ДОБАВЯМЕ OUT_EL 
                    L_KOL = ROUND5(:L_NAL_KOL - :L_INV_KOL); 
 
                    IF (L_IN_OUT = 0) THEN BEGIN 
                        UPDATE OUT_EL SET 
                        KOL = :L_KOL 
                        WHERE ID = :L_EL_ID; 
                    END 
                    ELSE IF (L_IN_OUT IN (1,2)) THEN BEGIN 
                        EXECUTE PROCEDURE DEL_IN_EL_FROM_INV(L_EL_ID); 
                        IF (L_INV_CENA = 0.00) THEN 
                            SELECT 
                                RDB$NAL.LAST_CENA 
                            FROM 
                                RDB$NAL 
                            WHERE 
                                RDB$NAL.SKLAD_ID = :L_SKLAD_ID 
                            INTO 
                                :L_INV_CENA; 
 
                        L_EL_ID = GEN_ID(GEN_OUT_EL_ID,1); 
                        INSERT INTO OUT_EL(ID,OPR_ID,SIMPLE_ID,KOL,SUMA_SR,SUMA_FR,SUMA,IS_F) 
                        VALUES(:L_EL_ID,:L_OPR_ID,:P_SIMPLE_ID,:L_KOL,0.00,0.00,ROUNDD(:L_INV_CENA * :L_INV_KOL),:L_FLAG_FKT); 
                    END 
                    L_IN_OUT = 0; 
                END 
                ELSE BEGIN 
                    --IN_EL - АКО СЕГА Е IN_EL САМО КОРЕКЦИЯ НА КОЛИЧЕСТВОТО ПРЕДИ ДА СЕ ИЗЧИСЛИ, ИНАЧЕ ТРИЕМ 
                    --OUT_EL И ДОБАВЯМЕ IN_EL 
 
                    IF (L_NAL_KOL < 0.00) THEN --ПРИ IVN ОТ - КЪМ + ПИШЕМ САМО + ЧАСТТА 
                        L_NAL_KOL = 0; 
                    L_KOL = ROUND5(:L_INV_KOL - :L_NAL_KOL); 
 
                    --АКО ТРЯБВА НАИСТИНА ДА ДОБАВИМ IN_EL 
                    IF (L_KOL > 0.00) THEN BEGIN 
                        IF (L_NAL_KOL = 0.00) THEN 
                            UPDATE RDB$NAL SET 
                            KOL = 0.00, 
                            SUMA = 0.00, 
                            SUMA_FR = 0.00 
                            WHERE SKLAD_ID = :L_SKLAD_ID; 
 
                        IF (L_INV_CENA = 0.00) THEN 
                            SELECT 
                                RDB$NAL.LAST_CENA 
                            FROM 
                                RDB$NAL 
                            WHERE 
                                RDB$NAL.SKLAD_ID = :L_SKLAD_ID 
                            INTO 
                                :L_INV_CENA; 
 
                        IF (L_IN_OUT = 1) THEN BEGIN 
                            UPDATE IN_EL SET 
                            KOL = :L_KOL, 
                            SUMA = ROUNDD(:L_KOL * :L_INV_CENA) 
                            WHERE ID = :L_EL_ID; 
 
                            UPDATE PARTIDA_EL_NODE SET 
                            KOL = :L_KOL, 
                            SUMA = ROUNDD(:L_KOL * :L_INV_CENA) 
                            WHERE OPR_ID = :L_OPR_ID 
                            AND IN_EL_ID = :L_EL_ID; 
 
                            UPDATE INV_IZL SET 
                            KOL = :L_KOL, 
                            KOL_IZL = :L_KOL 
                            WHERE IN_EL_ID = :L_EL_ID; 
                        END 
                        ELSE IF (L_IN_OUT IN (0,2)) THEN BEGIN 
                            EXECUTE PROCEDURE DEL_OUT_EL_FROM_INV(L_EL_ID); 
 
                            L_EL_ID = GEN_ID(GEN_IN_EL_ID,1); 
                            INSERT INTO IN_EL(ID,OPR_ID,SIMPLE_ID,KOL,SUMA,IS_F) 
                            VALUES(:L_EL_ID,:L_OPR_ID,:P_SIMPLE_ID,:L_KOL, ROUNDD(:L_KOL * :L_INV_CENA),:L_FLAG_FKT); 
 
                            INSERT INTO PARTIDA_EL(ID) VALUES (NULL) 
                            RETURNING ID INTO :L_GEN_ID; 
 
                            INSERT INTO PARTIDA_EL_NODE(IN_EL_ID,OPR_ID,KOL,SUMA,ELEMENT_ID) 
                            VALUES(:L_EL_ID,:L_OPR_ID,:L_KOL,ROUNDD(:L_KOL * :L_INV_CENA),:L_GEN_ID); 
 
                            INSERT INTO INV_IZL(IN_EL_ID,KOL,ED_CENA) 
                            VALUES(:L_EL_ID,:L_KOL,:L_INV_CENA); 
                        END 
                        L_IN_OUT = 1; 
                    END 
                    ELSE BEGIN 
                        IF (L_IN_OUT = 1) THEN 
                            EXECUTE PROCEDURE DEL_IN_EL_FROM_INV(L_EL_ID); 
                        ELSE IF (L_IN_OUT = 0) THEN 
                            EXECUTE PROCEDURE DEL_OUT_EL_FROM_INV(L_EL_ID); 
 
                        UPDATE RDB$NAL SET 
                        KOL = 0.00, 
                        SUMA = 0.00, 
                        SUMA_FR = 0.00 
                        WHERE SKLAD_ID = :L_SKLAD_ID; 
                    END 
                END 
             END 
 
             UPDATE IZL SET 
             FLAG_LOCK_KOR = 1 
             WHERE EXISTS( 
                SELECT 
                    OUT_EL.ID 
                FROM 
                    OUT_EL INNER JOIN OPR ON OPR.SKLAD_ID = :L_SKLAD_ID AND OUT_EL.OPR_ID = OPR.ID 
                    AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID AND OUT_EL.ID = IZL.OUT_EL_ID); 
 
        END 
 
        IF (L_IN_OUT = 0)  THEN BEGIN 
            L_FIND_KOL_FOR_IZL = 0.00; 
 
        --ИЗХОД ОТ СКЛАД НАМИРАТ СЕ НАЛИЧНИТЕ ПАРТИДИ - ИЗЧИСЛЯВАТ СЕ СУМИТЕ, 
        --ИЗЛИШЪЦИТЕ(АКО ИМА ТАКИВА). ПРОМЕНЯТ СЕ СУМИТЕ В ТАБЛИЦИ MOVE,IZP,OUT, 
        --OPR В ЗАВИСИМОСТ ОТ ОПЕРАЦИЯТА 
 
            L_TEMP_OUT_EL = NULL; 
            IF (L_OPR_TIP  IN (9,11)) THEN BEGIN 
 
 
                SELECT 
                    COALESCE(SUM(ROUND5(RDB$PARTIDA_NAL.KOL_NAL)),0) 
                FROM 
                    RDB$PARTIDA_NAL INNER JOIN IN_EL ON IN_EL.ID = RDB$PARTIDA_NAL.IN_EL_ID 
                    INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
                WHERE 
                    OPR.SKLAD_ID = :L_SKLAD_ID 
                INTO 
                    :L_PN_KOL; 
 
                IF (ROUND5(L_PN_KOL) < ROUND5(L_KOL)) THEN BEGIN 
                --ГЕНЕРИРА СЕ ИЗЛИШЪК - ТЪРСЯ НАЗАД ПРОДАЖБИ, КОИТО ДА ВЪРНАТ 
                --КОЛИЧЕСТВА, КОМПЕНСИРАЩИ ИЗЛИШЪКА 
                    L_FIND_KOL_FOR_IZL = ROUND5(L_KOL - L_PN_KOL); 
                    EXECUTE PROCEDURE FIND_KOL_FOR_IZL(P_SIMPLE_ID,L_SKLAD_ID,L_OPR_ID, L_FIND_KOL_FOR_IZL,L_OPR_DATE) 
                    RETURNING_VALUES :L_IN_OUT; 
 
                    --АКО ВРЪЩАНЕТО НА КОЛИЧЕСТВА КЪМ НАЛИЧНОСТИТЕ ОТ ПРОДАЖБА, 
                    --НЕ Е УСПЯЛО СЕ ИЗЛИЗА ОТ ПРОЦЕДУРАТА С ГРЕШКА 
 
                    IF (L_IN_OUT = 1 ) THEN BEGIN 
                        EXIT; 
                    END 
                END 
            END 
 
            L_RAZPR_KOL = L_KOL;--КОЛИЧЕСТВОТО ЗА РАЗПРЕДЕЛЕНИЕ, КОГАТО СТАНЕ 0 Е РАЗПРЕДЕЛЕНО 
            L_SUMA_FR = 0;--НОВАТА СУМА ПВ 
 
            FOR SELECT 
                RDB$PARTIDA_NAL.KOL_NAL, 
                RDB$PARTIDA_NAL.SUMA, 
                RDB$PARTIDA_NAL.IN_EL_ID, 
                RDB$PARTIDA_NAL.ELEMENT_ID, 
                RDB$PARTIDA_NAL.ID 
            FROM 
                IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
                INNER JOIN RDB$PARTIDA_NAL ON RDB$PARTIDA_NAL.IN_EL_ID = IN_EL.ID 
            WHERE 
                IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
                AND OPR.SKLAD_ID = :L_SKLAD_ID 
                AND RDB$PARTIDA_NAL.KOL_NAL > 0 
            ORDER BY 
                OPR.OPR_DATE, OPR.ID, RDB$PARTIDA_NAL.ELEMENT_ID 
            INTO 
                :L_PN_KOL,:L_PN_SUMA,:L_PN_IN_EL_ID,:L_PN_EL_ID,:L_PN_ID 
            DO IF(ROUND5(L_RAZPR_KOL) > 0) THEN BEGIN 
 
                IF (L_PN_KOL > L_RAZPR_KOL) THEN BEGIN 
                    --НАМИРАМ СУМА ПВ И КАЗВАМ КОЛКО Е КОЛИЧЕСТВОТО, УЧАСТВАЩО 
                    --ОТ ПАРТИДАТА 
                    L_PN_SUMA    = ROUNDD(ROUND5(L_PN_SUMA / L_PN_KOL) * L_RAZPR_KOL); 
                    L_PN_KOL     = ROUND5(L_RAZPR_KOL); 
                END 
 
                --ОЩЕ КОЛКО ОТ КОЛИЧЕСТВОТО ОСТАВА ЗА РАЗПРЕДЕЛЯНЕ 
                L_RAZPR_KOL  = ROUND5(L_RAZPR_KOL - L_PN_KOL); 
 
                --КАКВА Е СУМАТА ПО ПВ ДОТУК ЗА ЕЛЕМЕНТА 
                L_SUMA_FR = ROUNDD(L_SUMA_FR + L_PN_SUMA); 
 
                --ПРОМЯНА НА НАЛИЧНОСТИТЕ ЗА ТЕКУЩАТА ПАРТИДА - ПРИ ОСТАВАЩО КОЛ 
                --0 САМА ЗАПИСА СЕ ИЗТРИВА АВТОМАТИЧНО 
 
                UPDATE RDB$PARTIDA_NAL SET 
                RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL - :L_PN_KOL), 
                RDB$PARTIDA_NAL.SUMA    = ROUNDD(RDB$PARTIDA_NAL.SUMA - :L_PN_SUMA) 
                WHERE RDB$PARTIDA_NAL.ID = :L_PN_ID; 
 
                --ВРЪЗКАТА НА ПАРТИДАТА С ТОЗИ ЕЛЕМЕНТ НА ИЗХОДА 
                --ВЗИМА СЕ ID ЗА НОВ ЗАПИС В PARTIDA_EL_NODE 
                L_GEN_ID = GEN_ID(GEN_PARTIDA_EL_NODE_ID,1); 
 
                --ДОБАВЯНЕ НА НОВ ЗАПИС В PARTIDA_EL_NODE
                INSERT INTO PARTIDA_EL_NODE(ID,OPR_ID,IN_EL_ID,KOL,SUMA,ELEMENT_ID) 
                VALUES (:L_GEN_ID,:L_OPR_ID,:L_PN_IN_EL_ID,:L_PN_KOL,:L_PN_SUMA,:L_PN_EL_ID); 
 
                INSERT INTO PARTIDA_OUT_EL_NODE(OUT_EL_ID,PARTIDA_NODE_ID) 
                VALUES(:L_EL_ID, :L_GEN_ID); 
            END 
 
            --НАМИРАНЕ НА СУМА СП И КОРЕКЦИЯ НА НАЛИЧНОСТИТЕ В NAL 
            IF (ROUND5(L_RAZPR_KOL) >= 0.00001) THEN BEGIN 
            --ИМА ИЗЛИШЪК - НОВАТА СУМА СП Е РАВНА НА НАЛИЧНОТО В ТАБЛИЦА NAL 
                SELECT 
                    RDB$NAL.SUMA, 
                    RDB$NAL.LAST_CENA 
                FROM 
                    RDB$NAL 
                WHERE 
                    RDB$NAL.SKLAD_ID = :L_SKLAD_ID 
                INTO 
                    :L_SUMA_SR,:L_ED_CENA_SR; 
 
                --ТУК СЕ РАБОТИ ДИРЕКТНО С ТАБЛИЦАТА ЗА ИЗЛИШЪЦИ 
                --ВМЪКВАМЕ КОЛИЧЕСТВО НА ИЗЛИШЪКА, ЗА КОЙ ЕЛЕМЕНТ И 
                --КАКВА Е БИЛА ДОСТАВНАТА ЦЕНА ПРИ ГЕНЕРИРАНЕТО МУ 
 
                INSERT INTO IZL (KOL,OUT_EL_ID,LAST_CENA) 
                VALUES (:L_RAZPR_KOL,:L_EL_ID,:L_ED_CENA_SR); 
            END 
            ELSE BEGIN 
            --КОЛИЧЕСТВОТО Е НОРМАЛНО РАЗПРЕДЕЛЕНО - ЗНАЧИ В NAL ИМА 
            --ДОСТАТЪЧНО НАЛИЧНОСТ И ЩЕ ПОЛУЧА ЕД.ЦЕНА ПО СП И СУМАТА ЗА 
            --ИЗХОДЯЩОТО КОЛИЧЕСТОВО 
                --АКО ИМАМ ВРЪЩАНЕ НАМИРАНЕ НА КОЛИЧЕСТВА ЗА ПРЕХВЪРЛЯНЕ ИЛИ ИЗЛИШЪК 
                --АКО КОЛИЧЕСТВОТО ЗА ВРЪЩАНЕ Е РАВНО НА КОЛ. НА ЕЛЕМЕНТА, ТОВА ЗНАЧИ,ЧЕ НАЛ Е С 0 ИЛИ -КОЛ 
                --АКО Е ТАКА ВСИЧКО КОЕТО СЕ НАМИРА В НАЛ Е БИЛО ВЪРНАТО СЕГА И ТОВА Е СУМА СРЕДНА ЗА ЕЛЕМЕНТА 
                --В ПРОТИВЕН СЛУЧАЙ В НАЛ Е ИМАЛО НЯКАКВА НАЛИЧНОСТ, И СУМАТА Е ПО СТАНДАРТНИЯ НАЧИН. 
                --ПРИ СТАРИЯ НАЧИН НА РАБОТА СЕ ПОЛУЧАВАХА - СУМИ НА ЕЛЕМЕНТИТЕ И СТАВАХА ГРЕШКИ. 
 
                IF (L_FIND_KOL_FOR_IZL = L_KOL) THEN BEGIN 
                    SELECT 
                        RDB$NAL.SUMA 
                    FROM 
                        RDB$NAL 
                    WHERE 
                        RDB$NAL.SKLAD_ID = :L_SKLAD_ID 
                    INTO 
                        :L_SUMA_SR; 
                END 
                ELSE BEGIN 
                    SELECT 
                        ROUNDD(ROUND5(RDB$NAL.SUMA / RDB$NAL.KOL) * :L_KOL) 
                    FROM 
                        RDB$NAL 
                    WHERE 
                        RDB$NAL.SKLAD_ID = :L_SKLAD_ID 
                    INTO 
                        :L_SUMA_SR; 
                END 
            END 
 
            --ПРОМЯНА НАЛИЧНОТО В NAL 
            UPDATE RDB$NAL SET 
            RDB$NAL.SUMA = ROUNDD(RDB$NAL.SUMA - :L_SUMA_SR), 
            RDB$NAL.SUMA_FR = ROUNDD(RDB$NAL.SUMA_FR - :L_SUMA_FR), 
            RDB$NAL.KOL = ROUND5(RDB$NAL.KOL - ROUND5(:L_KOL + :L_FIND_KOL_FOR_IZL)) 
            WHERE RDB$NAL.SKLAD_ID = :L_SKLAD_ID; 
 
 
            --ПРОМЯНА НА СУМА СП И ПВ НА ЕЛЕМЕНТА НА ИЗХОДА 
            UPDATE OUT_EL SET 
            OUT_EL.SUMA_FR = :L_SUMA_FR, 
            OUT_EL.SUMA_SR = :L_SUMA_SR 
            WHERE OUT_EL.ID = :L_EL_ID; 
 
            --ИЗВАЖДАНЕ НА СТАРИТЕ СУМИ ОТ СЪОТВЕТНИТЕ ТАБЛИЦИ - ПРИ 
            --ПРЕРАЗПРЕДЕЛЯНЕТО ЩЕ СЕ СЪБЕРАТ С НОВИТЕ И ТАКА ЩЕ ИМАМЕ НОВТЕ 
            --ОБОБЩЕНИ СТОЙНОСТИ 
            IF (L_OPR_TIP IN (2,23)) THEN BEGIN 
 
                --НОВ НАЧИН 
                SELECT 
                    SUM(OUT_EL.SUMA_SR), 
                    SUM(OUT_EL.SUMA_FR) 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.OPR_ID = :L_OPR_ID 
                INTO 
                    :L_SUMA_SR,:L_SUMA_FR; 
 
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR), 
                OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR) 
                WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
 
            END 
            ELSE IF (L_OPR_TIP = 34) THEN BEGIN 
 
                --НОВ НАЧИН 
                --СУМА ЗА ЦЯЛАТА ПРОДАЖБА 
                SELECT 
                    SUM(OUT_EL.SUMA_SR), 
                    SUM(OUT_EL.SUMA_FR) 
                FROM 
                    OUT_EL INNER JOIN PROD_NODE ON PROD_NODE.OPR_SUB_PROD_ID = OUT_EL.OPR_ID 
                WHERE 
                    PROD_NODE.OPR_PROD_ID = (SELECT PN.OPR_PROD_ID FROM PROD_NODE PN WHERE PN.OPR_SUB_PROD_ID = :L_OPR_ID) 
                INTO 
                    :L_SUMA_SR,:L_SUMA_FR; 
 
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR), 
                OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR) 
                WHERE OPR_SUMI.OPR_ID = (SELECT PN.OPR_PROD_ID FROM PROD_NODE PN WHERE PN.OPR_SUB_PROD_ID = :L_OPR_ID); 
 
                --СУМАТА ЗА ОТДЕЛНАТА ПОДПРОДАЖБА 
                SELECT 
                    SUM(OUT_EL.SUMA_SR), 
                    SUM(OUT_EL.SUMA_FR) 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.OPR_ID = :L_OPR_ID 
                INTO 
                    :L_SUMA_SR,:L_SUMA_FR; 
 
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR), 
                OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR) 
                WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
 
            END 
            ELSE IF (L_OPR_TIP = 3) THEN BEGIN 
            --ИНВЕНТАРИЗАЦИЯ 
                SELECT 
                    SUM(OUT_EL.SUMA_FR) 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.OPR_ID = :L_OPR_ID 
                INTO 
                    :L_SUMA_FR; 
 
                UPDATE INV SET 
                INV.SUMA_LIPSA = ROUNDD(:L_SUMA_FR) 
                WHERE INV.OPR_ID = :L_OPR_ID; 
            END 
            ELSE IF (L_OPR_TIP = 9) THEN BEGIN 
                --АКО ОПЕРАЦИЯТА Е ПРЕХВЪРЛЯНЕ ЩЕ ТРЯБВА ДА СЪЗДАМ И ПАРТИДИТЕ 
                --ЗА ВТОРИЯ СКЛАД. НО ЗА ТЯХ ТРЯБВА ДА ИМАМ ID НА IN_EL И ELEMENT_ID 
                --КОЙТО ЩЕ ПОЛУЧА НА СЛЕДВАЩАТА ИТЕРАЦИЯ НА ЗАЯВКАТА - ЗАТОВА 
                --ТРЯВБА ДА ИМАМ ID ОТ OUT_EL, ОТ КОЙТО ДА СГЛОБЯ НОВИТЕ ПАРТИДИ 
 
                L_TEMP_OUT_EL = L_EL_ID; 
                SELECT 
                    SUM(OUT_EL.SUMA_SR), 
                    SUM(OUT_EL.SUMA_FR) 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.OPR_ID = :L_OPR_ID 
                INTO 
                    :L_SUMA_SR,:L_SUMA_FR; 
 
                UPDATE OPR SET 
                OPR.SUMA = ROUNDD(:L_SUMA_FR) 
                WHERE OPR.ID = :L_OPR_ID; 
 
                --НОВ НАЧИН 
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR), 
                OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR) 
                WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
 
            END 
            ELSE IF (L_OPR_TIP = 11) THEN BEGIN 
            --ПРОМЯНА НА СУМИТЕ НА ИЗПИСВАНЕТО СЪС СУМА ПВ И СП 
                SELECT 
                    SUM(OUT_EL.SUMA_SR), 
                    SUM(OUT_EL.SUMA_FR) 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.OPR_ID = :L_OPR_ID 
                INTO 
                    :L_SUMA_SR,:L_SUMA_FR; 
 
                UPDATE OPR SET 
                OPR.SUMA = ROUNDD(:L_SUMA_FR) 
                WHERE OPR.ID = :L_OPR_ID; 
 
                --НОВ НАЧИН 
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR), 
                OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR) 
                WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
 
                --UPDATE OUT_EL SET 
                --SUMA = :L_SUMA_SR 
                --WHERE ID = :L_EL_ID; 
            END 
        END 
        ELSE IF (L_IN_OUT = 1) THEN  BEGIN 
            L_SUMA_SR = 0.00; 
            IF (L_OPR_TIP  = 4) THEN BEGIN 
            --ИМАМЕ ПРЕХВЪРЛЯНЕ - ЩЕ СЕ СЪЗДАДАТ ПАРТИДИ С ДАННИТЕ ОТ OUT_EL И 
            --ПАРТИДИТЕ КОИТО ГО ГЕНЕРИРАТ 
                FOR SELECT 
                    PN.KOL, 
                    PN.SUMA, 
                    PN.ELEMENT_ID 
                FROM 
                    PARTIDA_OUT_EL_NODE PO LEFT JOIN PARTIDA_EL_NODE PN ON PN.ID = PO.PARTIDA_NODE_ID 
                WHERE 
                    PO.OUT_EL_ID = :L_TEMP_OUT_EL 
                INTO 
                    :L_PN_KOL,:L_PN_SUMA,:L_PN_EL_ID 
                DO BEGIN 
                    L_IN_OUT = NULL; 
 
                    SELECT 
                        RDB$PARTIDA_NAL.ID 
                    FROM 
                        RDB$PARTIDA_NAL 
                    WHERE 
                        RDB$PARTIDA_NAL.IN_EL_ID = :L_EL_ID 
                        AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_IN_OUT; 
 
                     IF (L_IN_OUT IS NULL) THEN BEGIN 
                        --И СЪЗДАВАМ ПАРТИДИТЕ, КОЙТО СА ИЗПОЛЗВАНИ ЗА ИЗХОД ОТ 
                        --ДРУГИЯ СКЛАД - ИЗПOЛЗВАМ ДАННИТЕ ЗА КОЛИЧЕСТВО, СУМИ И 
                        --ELEMENT_ID OT ГЕНЕРИРАНИТЕ ПРИ ПРЕХВЪРЛЯНЕТО 
                        INSERT INTO RDB$PARTIDA_NAL(KOL_NAL,SUMA,IN_EL_ID,ELEMENT_ID) 
                        VALUES(:L_PN_KOL,:L_PN_SUMA,:L_EL_ID,:L_PN_EL_ID); 
                    END 
                    ELSE BEGIN 
                        UPDATE RDB$PARTIDA_NAL SET 
                        RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL + :L_PN_KOL), 
                        RDB$PARTIDA_NAL.SUMA = ROUNDD(RDB$PARTIDA_NAL.SUMA + :L_PN_SUMA) 
                        WHERE RDB$PARTIDA_NAL.ID = :L_IN_OUT; 
                    END 
 
                    UPDATE OPR SET 
                    OPR.SUMA = ROUNDD(OPR.SUMA + :L_PN_SUMA) 
                    WHERE OPR.ID = :L_OPR_ID; 
 
                    L_IN_OUT = NULL; 
                    SELECT 
                        PEN.ID 
                    FROM 
                        PARTIDA_EL_NODE PEN 
                    WHERE 
                        PEN.ELEMENT_ID = :L_PN_EL_ID 
                        AND PEN.IN_EL_ID = :L_EL_ID 
                    INTO 
                        :L_IN_OUT; 
 
                    IF (L_IN_OUT IS NULL) THEN 
                        INSERT INTO PARTIDA_EL_NODE(OPR_ID,KOL,SUMA,IN_EL_ID,ELEMENT_ID) 
                        VALUES (:L_OPR_ID,:L_PN_KOL,:L_PN_SUMA,:L_EL_ID,:L_PN_EL_ID); 
                    ELSE 
                        UPDATE PARTIDA_EL_NODE SET 
                        KOL = ROUND5(KOL + :L_PN_KOL), 
                        SUMA = ROUNDD(SUMA + :L_PN_SUMA) 
                        WHERE ID = :L_IN_OUT; 
 
                    --ПОНЕЖЕ Е ПРЕХВЪРЛЯНЕ И СУМАТА НА ВХОДА ЗАВИСИ ОТ ТОВА, КОИ 
                    --ПАРТИДИ СА ИЗПОЛЗВАНИ ПРИ ГЕНЕРИРАНЕ НА ИЗХОДА - ТУК СУМАТА 
                    --СЕ ПОЛУЧАВА НАНОВО 
                    UPDATE IN_EL SET 
                    IN_EL.SUMA = ROUNDD(IN_EL.SUMA + :L_PN_SUMA) 
                    WHERE IN_EL.ID = :L_EL_ID; 
                END 
 
                --ДОАБВЯМ И КОЛИЧЕСТВОТО НА ПРЕХВЪРЛЯНЕТО, И ИЗЧИСЛЕНИТЕ СУМИ 
                --СП И ПВ(ТЯ ТРЯБВА ДА Е ИЗЧИСЛЕНА НА ПРЕДИШНИЯ РЕЗУЛТАТ ОТ ЗАЯВКАТА) 
                SELECT 
                    OUT_EL.SUMA_SR 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.ID = :L_TEMP_OUT_EL 
                INTO 
                    :L_SUMA_SR; --КОЛКО ЩЕ ПОДАМ И ЗА КОРЕКЦИЯ НА ИЗЛ 
 
                UPDATE RDB$NAL SET 
                RDB$NAL.KOL     = ROUND5(RDB$NAL.KOL + :L_KOL), 
                RDB$NAL.SUMA_FR = ROUNDD(RDB$NAL.SUMA_FR + (SELECT OUT_EL.SUMA_FR FROM OUT_EL WHERE OUT_EL.ID = :L_TEMP_OUT_EL)), 
                RDB$NAL.SUMA    = ROUNDD(RDB$NAL.SUMA + :L_SUMA_SR) --RDB$NAL.SUMA + (SELECT OUT_EL.SUMA_SR FROM OUT_EL WHERE OUT_EL.ID = :L_TEMP_OUT_EL)) 
                WHERE RDB$NAL.SKLAD_ID  = :L_SKLAD_ID; 
 
            END 
            ELSE IF (L_OPR_TIP IN (26,41)) THEN BEGIN 
                EXECUTE PROCEDURE RDB_RETURN_STOKA_PROD(L_EL_ID,L_OPR_ID,L_KOL,L_SKLAD_ID,L_OPR_DATE) 
                RETURNING_VALUES :L_IN_OUT, :L_SUMA_SR; 
 
                IF (L_IN_OUT = 1) THEN BEGIN 
                    EXIT; 
                END 
            END 
            ELSE BEGIN 
            --ВХОДА НЕ Е ОТ ПРЕХВЪРЛЯНЕ - ДАННИТЕ ЗА ПАРТИДИТЕ, ЩЕ СЕ ИЗВЛЕЧАТ 
            --ОТ PARTIDA_EL_NODE 
                FOR SELECT 
                    PN.KOL, 
                    PN.SUMA, 
                    PN.IN_EL_ID, 
                    PN.ELEMENT_ID 
                FROM 
                    PARTIDA_EL_NODE PN 
                WHERE 
                    PN.IN_EL_ID = :L_EL_ID 
                INTO 
                    :L_PN_KOL,:L_PN_SUMA,:L_PN_IN_EL_ID,:L_PN_EL_ID 
                DO BEGIN 
                    UPDATE RDB$NAL SET 
                    RDB$NAL.KOL             = ROUND5(RDB$NAL.KOL + :L_PN_KOL), 
                    RDB$NAL.SUMA            = ROUNDD(RDB$NAL.SUMA + :L_PN_SUMA), 
                    RDB$NAL.SUMA_FR         = ROUNDD(RDB$NAL.SUMA_FR + :L_PN_SUMA), 
                    RDB$NAL.LAST_CENA       = ROUND5(:L_PN_SUMA / :L_PN_KOL) 
                    WHERE RDB$NAL.SKLAD_ID  = :L_SKLAD_ID; 
 
                    L_SUMA_SR = ROUNDD(L_SUMA_SR + L_PN_SUMA);--КОЛКО ЩЕ ПОДАМ ЗА КОРЕКЦИЯ НА ИЗЛ-ТО 
 
                    L_IN_OUT = NULL; 
 
                    SELECT 
                        RDB$PARTIDA_NAL.ID 
                    FROM 
                        RDB$PARTIDA_NAL 
                    WHERE 
                        RDB$PARTIDA_NAL.IN_EL_ID = :L_EL_ID 
                        AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_IN_OUT; 
 
                    IF (L_IN_OUT IS NULL) THEN BEGIN 
                        --И СЪЗДАВАМ ПАРТИДИТЕ, КОЙТО СА ИЗПОЛЗВАНИ ЗА ИЗХОД ОТ 
                        --ДРУГИЯ СКЛАД - ИЗПOЛЗВАМ ДАННИТЕ ЗА КОЛИЧЕСТВО, СУМИ И 
                        --ELEMENT_ID OT ГЕНЕРИРАНИТЕ ПРИ ПРЕХВЪРЛЯНЕТО 
                        INSERT INTO RDB$PARTIDA_NAL(KOL_NAL,SUMA,IN_EL_ID,ELEMENT_ID) 
                        VALUES(:L_PN_KOL,:L_PN_SUMA,:L_PN_IN_EL_ID,:L_PN_EL_ID); 
                    END 
                    ELSE BEGIN 
                        UPDATE RDB$PARTIDA_NAL SET 
                        RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL + :L_PN_KOL), 
                        RDB$PARTIDA_NAL.SUMA = ROUNDD(RDB$PARTIDA_NAL.SUMA + :L_PN_SUMA) 
                        WHERE RDB$PARTIDA_NAL.ID = :L_IN_OUT; 
                    END 
                END 
            END 
 
            IF ((L_OPR_TIP = 1)OR(L_OPR_TIP = 22)) THEN BEGIN 
                --ПРОВЕРКА ДАЛИ ТАЗИ ДОСТАВКА ИМА ВРЪЩАНЕ НА СТОКА. АКО ИМА ЩЕ 
                --РАЗПРЕДЕЛЯ КОЛИЧЕСТВАТА И ЧАК ТОГАВА АКО ОСТАНЕ НЕЩО ЩЕ ГО ПОЛЗВАМ 
                --ЗА ПОНАТАТЪК В РАЗПРЕДЕЛЕНИЕТО - 
                --НАЧИНА НА РАБОТА БИ ТРЯБВАЛО ДА ОБХВАНЕ И СЛУЧАЙТЕ, КОГАТО ПРОЦЕДУРАТА 
                --СЕ ПОЛЗВА ОТ ДОБАВЯНЕ НА НОВО ВРЪЩАНЕ НА СТОКА. ЗАЩОТО ОТ ПРОЦЕДУРАТА, КОЯТО 
                --ГО ИЗВЪРШВА OUT_EL РЕДА ВЕЧЕ ЩЕ ГО ИМА И ДОЛНАТА ЗАЯВКА ТРЯБВА ДА ГО ОТРАЗИ. 
                --ТАКА ЩЕ МУ ЗАПИШЕ СУМИТЕ ПРАВИЛНО. 
                FOR SELECT 
                    OUT_EL.ID, 
                    OUT_EL.KOL, 
                    OPR.ID, 
                    OUT_EL.SUMA_FR, 
                    OUT_EL.SUMA 
                FROM 
                    OPR_RAZPAD_NODE INNER JOIN OUT_EL ON (OPR_RAZPAD_NODE.IN_EL_ID = :L_EL_ID AND 
                    OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID) 
                    INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
                WHERE 
                    OPR.OPR_TIP = 27 
                    OR OPR.OPR_TIP = 39 
                ORDER BY OPR.OPR_DATE,OPR.ID 
                INTO 
                    :L_OUT_EL_ID,:L_OUT_EL_KOL,:L_OUT_EL_OPR_ID,:L_RET_SUMA_FR,:L_RET_SUMA 
                DO BEGIN 
                    --НАМИРАМ ОСТАТЪКА ОТ ПАРТИДАТА, АКО ИМА ПОВЕЧЕ ОТ 1 ВРЪЩАНЕ 
                    --ТЯ ЩЕ Е С НАМАЛЕНО КОЛИЧЕСТВО И СУМИ ОТ ОРИГИНАЛНАТА 
                    SELECT 
                        RDB$PARTIDA_NAL.KOL_NAL, 
                        RDB$PARTIDA_NAL.SUMA, 
                        RDB$PARTIDA_NAL.ID 
                    FROM 
                        RDB$PARTIDA_NAL 
                    WHERE 
                        RDB$PARTIDA_NAL.IN_EL_ID = :L_PN_IN_EL_ID 
                        AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_OUT_EL_NAL_KOL, :L_OUT_EL_NAL_SUMA, :L_OUT_EL_NAL_ID; 
 
                    --ПРОВЕРКА ДАЛИ ТОВА Е ПОСЛЕДНОТО ОСТАНАЛО КОЛИЧЕСТВО ОТ ПАРТИДАТА 
                    --ЗА ВРЪЩАНЕ - Т.Е ЦЯЛОТО КОЛИЧЕСТВО Е БИЛО ОТЧЕТЕНО, ЧЕ Е ВЪРНАТО 
                    --АКО Е ОСТАТЪКА ОТ ПАРТИДАТА Е РАВЕН НА КОЛИЧЕСТВОТО ВЪРНАТА СТОКА 
                    --ТО ЩЕ ОБЕРЕ РАЗЛИКИТЕ ОТ ЗАКРЪГЛЕНИЯ 
                    IF (L_OUT_EL_NAL_KOL > L_OUT_EL_KOL) THEN 
                        L_OUT_SUMA_FR = ROUNDD(ROUND5(L_PN_SUMA / L_PN_KOL) * L_OUT_EL_KOL); 
                    ELSE 
                        L_OUT_SUMA_FR = :L_OUT_EL_NAL_SUMA; --ОБИРА РАЗЛИКИТЕ ОТ ЗАКРЪГЛЯВАНИЯ 
 
 
                    --НАМАЛЯМ НАЛИЧНОСТИТЕ В ПАРТИДАТА И ТАБЛИЦАТА С НАЛИЧНОСТИ 
                    UPDATE RDB$PARTIDA_NAL SET 
                    RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL - :L_OUT_EL_KOL), 
                    RDB$PARTIDA_NAL.SUMA = ROUNDD(RDB$PARTIDA_NAL.SUMA - :L_OUT_SUMA_FR) 
                    WHERE RDB$PARTIDA_NAL.ID = :L_OUT_EL_NAL_ID; 
 
                    UPDATE RDB$NAL SET 
                    RDB$NAL.KOL = ROUND5(RDB$NAL.KOL - :L_OUT_EL_KOL), 
                    RDB$NAL.SUMA = ROUNDD(RDB$NAL.SUMA - :L_OUT_SUMA_FR), 
                    RDB$NAL.SUMA_FR = ROUNDD(RDB$NAL.SUMA_FR - :L_OUT_SUMA_FR) 
                    WHERE RDB$NAL.SKLAD_ID = :L_SKLAD_ID; 
 
                    L_SUMA_SR = ROUNDD(L_SUMA_SR - L_OUT_SUMA_FR);--НАМАЛЯМ СУМА СРЕДНА С ВРЪЩАНОТО 
 
                    UPDATE OUT_EL SET 
                    OUT_EL.SUMA_SR  = :L_OUT_SUMA_FR, 
                    OUT_EL.SUMA_FR  = :L_OUT_SUMA_FR 
                    WHERE OUT_EL.ID = :L_OUT_EL_ID; 
 
                    IF (ROUNDD(L_RET_SUMA) = ROUNDD(L_RET_SUMA_FR)) THEN --СУМИТЕ СА ЕДНАКВИ - НЕ СА 
                    --ВЪВЕЖДАНИ ОТ ОПЕРАТОР ДРУГИ ЗАОВА И ТРЕТАТА СУМА Е = НА ПВ 
                        UPDATE OUT_EL SET 
                        OUT_EL.SUMA = :L_OUT_SUMA_FR 
                        WHERE OUT_EL.ID = :L_OUT_EL_ID; 
 
 
                    L_GEN_ID = GEN_ID(GEN_PARTIDA_EL_NODE_ID,1); 
 
                    --ДОБАВЯНЕ НА НОВ ЗАПИС В PARTIDA_EL_NODE 
                    INSERT INTO PARTIDA_EL_NODE(ID,OPR_ID,IN_EL_ID,KOL,SUMA,ELEMENT_ID) 
                    VALUES (:L_GEN_ID,:L_OUT_EL_OPR_ID,:L_EL_ID,:L_OUT_EL_KOL,:L_OUT_SUMA_FR,:L_PN_EL_ID); 
 
                    INSERT INTO PARTIDA_OUT_EL_NODE(OUT_EL_ID,PARTIDA_NODE_ID) 
                    VALUES(:L_OUT_EL_ID, :L_GEN_ID); 
 
                    --ОПРАВЯМ И СУМАТА В ТАБЛИЦАТА С ВРЪЗКИТЕ М/У ВХОДНИТЕ И ИЗХОДНИТЕ ЕЛЕМЕНТИ 
                    UPDATE OPR_RAZPAD_NODE SET 
                    OPR_RAZPAD_NODE.SUMA_SR = :L_OUT_SUMA_FR 
                    WHERE OPR_RAZPAD_NODE.OUT_EL_ID = :L_OUT_EL_ID 
                    AND OPR_RAZPAD_NODE.IN_EL_ID = :L_EL_ID; 
 
                    SELECT 
                        SUM(OUT_EL.SUMA) 
                    FROM 
                        OUT_EL 
                    WHERE 
                        OUT_EL.OPR_ID = :L_OUT_EL_OPR_ID 
                    INTO 
                        :L_OUT_SUMA_FR; 
 
                    UPDATE OPR SET 
                    OPR.SUMA = ROUNDD(:L_OUT_SUMA_FR) 
                    WHERE OPR.ID = :L_OUT_EL_OPR_ID; 
 
                    SELECT 
                        SUM(OUT_EL.SUMA_FR) 
                    FROM 
                        OUT_EL 
                    WHERE 
                        OUT_EL.OPR_ID = :L_OUT_EL_OPR_ID 
                    INTO 
                        :L_OUT_SUMA_FR; 
 
                    --НОВ НАЧИН 
                    UPDATE OPR_SUMI SET 
                    SUMA_FR = ROUNDD(:L_OUT_SUMA_FR), 
                    SUMA_SR = ROUNDD(:L_OUT_SUMA_FR) 
                    WHERE OPR_ID = :L_OUT_EL_OPR_ID; 
                END 
            END 
            --ДАЛИ ДА КОМПЕНСИРА ИЗЛИШЪЦИ 
            IF (P_FLAG_IZL = 1) THEN BEGIN 
                EXECUTE PROCEDURE RDB_PARTIDA_IN_IZL(:L_EL_ID,:L_SKLAD_ID,:L_SUMA_SR); 
            END 
        END 
    END 
 
    --ЗАПИС НА НОВИТЕ НАЛИЧНОСТИ ЗА ПРОДУКТА 
    FOR SELECT 
        RDB$NAL.SKLAD_ID, 
        RDB$NAL.SUMA, 
        RDB$NAL.SUMA_FR, 
        RDB$NAL.KOL, 
        RDB$NAL.LAST_CENA 
    FROM 
        RDB$NAL 
    INTO 
        :L_EL_ID,:L_SUMA_SR,:L_SUMA_FR,:L_KOL,:L_ED_CENA_FR 
    DO BEGIN 
        IF (EXISTS (SELECT NAL.ID FROM NAL WHERE NAL.SKLAD_ID = :L_EL_ID AND NAL.SIMPLE_ID = :P_SIMPLE_ID)) THEN 
            UPDATE NAL SET 
            NAL.SUMA = :L_SUMA_SR, 
            NAL.SUMA_FR = :L_SUMA_FR, 
            NAL.KOL_NAL = :L_KOL, 
            NAL.LAST_CENA = :L_ED_CENA_FR 
            WHERE NAL.SKLAD_ID = :L_EL_ID 
            AND NAL.SIMPLE_ID = :P_SIMPLE_ID; 
        ELSE 
            INSERT INTO NAL(SUMA,SUMA_FR,KOL_NAL,LAST_CENA,SKLAD_ID,SIMPLE_ID) 
            VALUES(:L_SUMA_SR,:L_SUMA_FR,:L_KOL, :L_ED_CENA_FR,:L_EL_ID,:P_SIMPLE_ID); 
    END 
 
    --ИЗТРИВАНЕ НА СТАРИТЕ ПАРТИДИ 
    DELETE FROM PARTIDA_NAL 
    WHERE PARTIDA_NAL.IN_EL_ID IN( 
    SELECT 
        IN_EL.ID 
    FROM 
        IN_EL 
    WHERE 
        IN_EL.SIMPLE_ID = :P_SIMPLE_ID); 
 
    --И ЗАПИС НА НОВИТЕ 
    INSERT INTO PARTIDA_NAL (SUMA,KOL_NAL,IN_EL_ID, ELEMENT_ID) 
    SELECT 
        RDB$PARTIDA_NAL.SUMA, 
        RDB$PARTIDA_NAL.KOL_NAL, 
        RDB$PARTIDA_NAL.IN_EL_ID, 
        RDB$PARTIDA_NAL.ELEMENT_ID 
    FROM 
        RDB$PARTIDA_NAL; 
 
    R_RESULT = 0;--ВСИЧКО Е МИНАЛО ДОБРЕ - ИЗЛИЗА СЕ БЕЗ ГРЕШКА */
END^


ALTER PROCEDURE EDIT_DOST_OLD_CENA (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_DATE DATE)
RETURNS (
    R_RESULT SMALLINT)
AS
DECLARE VARIABLE L_SKLAD_ID INTEGER;
DECLARE VARIABLE L_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_EL_ID INTEGER;
DECLARE VARIABLE L_OPR_ID INTEGER;
DECLARE VARIABLE L_OPR_TIP INTEGER;
DECLARE VARIABLE L_OPR_DATE DATE;
DECLARE VARIABLE L_IN_OUT INTEGER;
DECLARE VARIABLE L_PN_IN_EL_ID INTEGER;
DECLARE VARIABLE L_PN_EL_ID INTEGER;
DECLARE VARIABLE L_PN_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PN_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_PN_ID INTEGER;
DECLARE VARIABLE L_OUT_EL_ID INTEGER;
DECLARE VARIABLE L_OUT_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_IZL_LAST_ID INTEGER;
BEGIN 
/*V.2*/ 
/*    R_RESULT = 0;
 
    L_EL_ID = NULL; 
 
    SELECT SIMPLE.ID FROM SIMPLE  WHERE SIMPLE.ID = :P_SIMPLE_ID AND SIMPLE.USLUGA = '0' INTO :L_EL_ID; 
 
    IF (L_EL_ID IS NULL) THEN 
        EXIT; 
 
    SELECT 
        MAX(IZL.ID) 
    FROM 
        IZL 
    INTO 
        :L_IZL_LAST_ID; 
 
    R_RESULT = 1; 
    L_EL_ID = NULL; 
 
    EXECUTE PROCEDURE INIT_RDBS(P_SIMPLE_ID); 
 
    FOR SELECT 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_KOL, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_SUMA_SR, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_SUMA_FR, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_EL_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_TIP, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_SKLAD_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_DATE, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_IN_OUT 
    FROM 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY(:P_SIMPLE_ID,:P_OPR_ID,:P_DATE) 
    ORDER BY R_IN_OUT ASC 
    INTO 
        :L_KOL,:L_SUMA_SR,:L_SUMA_FR,:L_EL_ID,:L_OPR_ID, 
        :L_OPR_TIP,:L_SKLAD_ID,:L_OPR_DATE,:L_IN_OUT 
    DO BEGIN 
        IF (L_IN_OUT = 0) THEN BEGIN 
            FOR SELECT 
                P1.ID, 
                P1.IN_EL_ID, 
                P1.ELEMENT_ID, 
                P1.KOL, 
                P1.SUMA 
            FROM 
                PARTIDA_EL_NODE P1 INNER JOIN PARTIDA_OUT_EL_NODE PO1 
                ON P1.ID = PO1.PARTIDA_NODE_ID 
            WHERE 
                PO1.OUT_EL_ID = :L_EL_ID 
            INTO 
                :L_PN_ID,:L_PN_IN_EL_ID,:L_PN_EL_ID,:L_PN_KOL,:L_PN_SUMA 
            DO BEGIN 
                L_IN_OUT = NULL; 
                SELECT 
                    RDB$PARTIDA_NAL.ID 
                FROM 
                    RDB$PARTIDA_NAL 
                WHERE 
                    RDB$PARTIDA_NAL.IN_EL_ID = :L_PN_IN_EL_ID 
                    AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                INTO 
                    :L_IN_OUT; 
 
                IF (L_IN_OUT IS NULL) THEN BEGIN 
                    INSERT INTO RDB$PARTIDA_NAL (KOL_NAL,SUMA,IN_EL_ID,ELEMENT_ID) 
                    VALUES (:L_PN_KOL,:L_PN_SUMA,:L_PN_IN_EL_ID,:L_PN_EL_ID); 
                END 
                ELSE BEGIN 
                    UPDATE RDB$PARTIDA_NAL SET 
                    RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL + :L_PN_KOL), 
                    RDB$PARTIDA_NAL.SUMA    = ROUNDD(RDB$PARTIDA_NAL.SUMA + :L_PN_SUMA) 
                    WHERE 
                    RDB$PARTIDA_NAL.ID = :L_IN_OUT; 
                END 
            END 
 
            L_IN_OUT = NULL; 
            SELECT 
                RDB$NAL.SKLAD_ID 
            FROM 
                RDB$NAL 
            WHERE 
                RDB$NAL.SKLAD_ID = :L_SKLAD_ID 
            INTO 
                :L_IN_OUT; 
 
            IF (L_IN_OUT IS NULL) THEN 
                INSERT INTO RDB$NAL(SUMA,SUMA_FR,LAST_CENA,SKLAD_ID,KOL) 
                VALUES (:L_SUMA_SR,:L_SUMA_FR,ROUND5(:L_SUMA_FR / :L_KOL),:L_SKLAD_ID,:L_KOL); 
            ELSE 
                UPDATE RDB$NAL SET 
                RDB$NAL.SUMA    = ROUNDD(RDB$NAL.SUMA + :L_SUMA_SR), 
                RDB$NAL.SUMA_FR = ROUNDD(RDB$NAL.SUMA_FR + :L_SUMA_FR), 
                RDB$NAL.KOL     = ROUND5(RDB$NAL.KOL  + :L_KOL) 
                WHERE 
                RDB$NAL.SKLAD_ID = :L_SKLAD_ID; 
 
            UPDATE OUT_EL SET 
            OUT_EL.SUMA_SR = ROUNDD(0.00), 
            OUT_EL.SUMA_FR = ROUNDD(0.00) 
            WHERE OUT_EL.ID = :L_EL_ID; 
 
            IF (L_OPR_TIP IN (2,23)) THEN BEGIN 
                SELECT 
                        SUM(OUT_EL.SUMA_SR), 
                        SUM(OUT_EL.SUMA_FR) 
                    FROM 
                        OUT_EL 
                    WHERE 
                        OUT_EL.OPR_ID = :L_OPR_ID 
                    INTO 
                        :L_SUMA_SR,:L_SUMA_FR; 
 
                    UPDATE OPR_SUMI SET 
                    OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR), 
                    OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR) 
                    WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
            END 
            ELSE IF (L_OPR_TIP = 34) THEN BEGIN 
 
                --НОВ НАЧИН 
                --СУМА ЗА ЦЯЛАТА ПРОДАЖБА 
                SELECT 
                    SUM(OUT_EL.SUMA_SR), 
                    SUM(OUT_EL.SUMA_FR) 
                FROM 
                    OUT_EL INNER JOIN PROD_NODE ON PROD_NODE.OPR_SUB_PROD_ID = OUT_EL.OPR_ID 
                WHERE 
                    PROD_NODE.OPR_PROD_ID = (SELECT PN.OPR_PROD_ID FROM PROD_NODE PN WHERE PN.OPR_SUB_PROD_ID = :L_OPR_ID) 
                INTO 
                    :L_SUMA_SR,:L_SUMA_FR; 
 
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR), 
                OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR) 
                WHERE OPR_SUMI.OPR_ID = (SELECT PN.OPR_PROD_ID FROM PROD_NODE PN WHERE PN.OPR_SUB_PROD_ID = :L_OPR_ID); 
 
                --СУМАТА ЗА ОТДЕЛНАТА ПОДПРОДАЖБА 
                SELECT 
                    SUM(OUT_EL.SUMA_SR), 
                    SUM(OUT_EL.SUMA_FR) 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.OPR_ID = :L_OPR_ID 
                INTO 
                    :L_SUMA_SR,:L_SUMA_FR; 
 
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR), 
                OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR) 
                WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
 
            END 
            ELSE IF (L_OPR_TIP = 3) THEN BEGIN 
                UPDATE INV SET 
                INV.SUMA_LIPSA = ROUNDD(INV.SUMA_LIPSA - :L_SUMA_FR) 
                WHERE INV.OPR_ID = :L_OPR_ID; 
            END 
            ELSE IF (L_OPR_TIP = 9) THEN BEGIN 
                    SELECT 
                        SUM(OUT_EL.SUMA_SR), 
                        SUM(OUT_EL.SUMA_FR) 
                    FROM 
                        OUT_EL 
                    WHERE 
                        OUT_EL.OPR_ID = :L_OPR_ID 
                    INTO 
                        :L_SUMA_SR,:L_SUMA_FR; 
 
                    UPDATE OPR SET 
                    OPR.SUMA = ROUNDD(:L_SUMA_FR) 
                    WHERE OPR.ID = :L_OPR_ID; 
 
                    --НОВ НАЧИН
                    UPDATE OPR_SUMI SET 
                    OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR), 
                    OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR) 
                    WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
 
                --UPDATE OUT_EL SET
                --OUT_EL.SUMA = ROUNDD(0.00)
                --WHERE OUT_EL.ID = :L_EL_ID;
            END 
            ELSE IF (L_OPR_TIP IN (11,27)) THEN BEGIN 
                SELECT 
                        SUM(OUT_EL.SUMA_SR), 
                        SUM(OUT_EL.SUMA_FR) 
                    FROM 
                        OUT_EL 
                    WHERE 
                        OUT_EL.OPR_ID = :L_OPR_ID 
                    INTO 
                        :L_SUMA_SR,:L_SUMA_FR; 
 
                    UPDATE OPR SET 
                    OPR.SUMA = ROUNDD(:L_SUMA_FR) 
                    WHERE OPR.ID = :L_OPR_ID; 
 
                    --НОВ НАЧИН
                    UPDATE OPR_SUMI SET 
                    OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR), 
                    OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR) 
                    WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
 
            END 
        END 
        ELSE IF (L_IN_OUT = 1) THEN BEGIN 
            IF ((L_OPR_TIP = 1)OR(L_OPR_TIP = 22)) THEN BEGIN 
                --ВРЪЩАМ СУМИТЕ ОТ ВРЪЩАНЕ НА СТОКА КЪМ ДОСТ. ПРЕДИ ДА ГИ МАХНА КАТО ВХОД
                SELECT 
                    COALESCE(SUM(ORN.SUMA_SR),0) 
                FROM 
                    OPR_RAZPAD_NODE ORN 
                WHERE 
                    ORN.IN_EL_ID = :L_EL_ID 
                INTO 
                   :L_PN_SUMA; 
 
                UPDATE RDB$NAL SET 
                RDB$NAL.SUMA = ROUNDD(RDB$NAL.SUMA + :L_PN_SUMA) 
                WHERE SKLAD_ID = :L_SKLAD_ID; 
 
                FOR SELECT 
                    PEN.ID, 
                    PEN.KOL, 
                    PEN.SUMA, 
                    PEN.ELEMENT_ID 
                FROM 
                    OPR_RAZPAD_NODE ORN INNER JOIN PARTIDA_OUT_EL_NODE PON ON 
                    (ORN.IN_EL_ID = :L_EL_ID AND ORN.OUT_EL_ID = PON.OUT_EL_ID) 
                    INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID 
                INTO 
                    :L_PN_ID,:L_PN_KOL,:L_PN_SUMA,:L_PN_EL_ID 
                DO BEGIN 
                    UPDATE RDB$NAL SET 
                    SUMA_FR = ROUNDD(SUMA_FR + :L_PN_SUMA), 
                    KOL = ROUND5(KOL + :L_PN_KOL) 
                    WHERE SKLAD_ID = :L_SKLAD_ID; 
 
                    UPDATE OPR SET 
                    SUMA = ROUNDD(SUMA - :L_PN_SUMA) 
                    WHERE ID = (SELECT PARTIDA_EL_NODE.OPR_ID FROM PARTIDA_EL_NODE WHERE PARTIDA_EL_NODE.ID = :L_PN_ID); 
 
                    --НОВ НАЧИН
                    UPDATE OPR_SUMI SET 
                    SUMA_FR = ROUNDD(SUMA_FR - :L_PN_SUMA), 
                    SUMA_SR = ROUNDD(SUMA_FR - :L_PN_SUMA) 
                    WHERE OPR_ID = (SELECT PARTIDA_EL_NODE.OPR_ID FROM PARTIDA_EL_NODE WHERE PARTIDA_EL_NODE.ID = :L_PN_ID); 
 
                    L_IN_OUT = NULL; 
                    SELECT 
                        RDB$PARTIDA_NAL.ID 
                    FROM 
                        RDB$PARTIDA_NAL 
                    WHERE 
                        RDB$PARTIDA_NAL.IN_EL_ID = :L_EL_ID 
                        AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_IN_OUT; 
 
                    IF (L_IN_OUT IS NULL) THEN BEGIN 
                        --СЪЗДАВАМ ПАРТИДАТА НАНОВО
                        INSERT INTO RDB$PARTIDA_NAL (KOL_NAL,SUMA,IN_EL_ID,ELEMENT_ID) 
                        VALUES (:L_PN_KOL,:L_PN_SUMA,:L_EL_ID,:L_PN_EL_ID); 
                    END 
                    ELSE BEGIN 
                    --ПАРТИДАТА Я ИМА - ПРОСТО ДОБАВЯМ НОВИТЕ КОЛИЧЕСТВА
                        UPDATE RDB$PARTIDA_NAL SET 
                        RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL + :L_PN_KOL), 
                        RDB$PARTIDA_NAL.SUMA    = ROUNDD(RDB$PARTIDA_NAL.SUMA + :L_PN_SUMA) 
                        WHERE 
                        RDB$PARTIDA_NAL.ID = :L_IN_OUT; 
                    END 
                END 
            END 
 
            FOR SELECT 
                OUT_EL.ID, 
                OUT_EL.SUMA_SR 
            FROM 
                PARTIDA_EL_NODE INNER JOIN PARTIDA_OUT_EL_NODE ON 
                (PARTIDA_EL_NODE.IN_EL_ID = :L_EL_ID AND PARTIDA_EL_NODE.ID = PARTIDA_OUT_EL_NODE.PARTIDA_NODE_ID) 
                INNER JOIN OPR ON ( ((OPR.OPR_DATE < :P_DATE) OR ((OPR.OPR_DATE = :P_DATE) AND OPR.ID < :P_OPR_ID)) AND OPR.ID = PARTIDA_EL_NODE.OPR_ID) 
                INNER JOIN OUT_EL ON OUT_EL.ID = PARTIDA_OUT_EL_NODE.OUT_EL_ID 
            ORDER BY 1 
            INTO 
                :L_OUT_EL_ID,:L_OUT_SUMA_SR 
            DO BEGIN 
                --NAMIRAM KOLKO E SUMATA ZA WSEKI OUT_EL KOITO U4ASTWA I NEGOWOTO KOL OT PARTIDI
                SELECT 
                    SUM(PEN.KOL) 
                FROM 
                    PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON 
                    (PON.OUT_EL_ID = :L_OUT_EL_ID AND PON.PARTIDA_NODE_ID = PEN.ID) 
                INTO 
                    :L_OUT_KOL; 
 
                --NAMIRAM EDINI4NATA SUMA SREDNA
                L_OUT_SUMA_SR = ROUND5(L_OUT_SUMA_SR / L_OUT_KOL); 
 
                FOR SELECT 
                    PEN.ID, 
                    PEN.ELEMENT_ID, 
                    PEN.KOL, 
                    PEN.SUMA 
                FROM 
                    PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON 
                    (PON.OUT_EL_ID = :L_OUT_EL_ID AND PEN.ID = PON.PARTIDA_NODE_ID AND PEN.IN_EL_ID = :L_EL_ID) 
                    INNER JOIN OPR ON OPR.ID = PEN.OPR_ID 
                WHERE 
                    ((OPR.OPR_DATE < :P_DATE)OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID < :P_OPR_ID))) 
                INTO 
                    :L_PN_ID,:L_PN_EL_ID,:L_PN_KOL,:L_PN_SUMA 
                DO BEGIN 
                    L_IN_OUT = NULL; 
                    SELECT 
                        RDB$PARTIDA_NAL.ID 
                    FROM 
                        RDB$PARTIDA_NAL 
                    WHERE 
                        RDB$PARTIDA_NAL.IN_EL_ID = :L_EL_ID 
                        AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_IN_OUT; 
                    IF (L_IN_OUT IS NULL) THEN BEGIN 
                        --СЪЗДАВАМ ПАРТИДАТА НАНОВО
                        INSERT INTO RDB$PARTIDA_NAL (KOL_NAL,SUMA,IN_EL_ID,ELEMENT_ID) 
                        VALUES (:L_PN_KOL,:L_PN_SUMA,:L_EL_ID,:L_PN_EL_ID); 
                    END 
                    ELSE BEGIN 
                        --ПАРТИДАТА Я ИМА - ПРОСТО ДОБАВЯМ НОВИТЕ КОЛИЧЕСТВА
                        UPDATE RDB$PARTIDA_NAL SET 
                        RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL + :L_PN_KOL), 
                        RDB$PARTIDA_NAL.SUMA    = ROUNDD(RDB$PARTIDA_NAL.SUMA + :L_PN_SUMA) 
                        WHERE 
                        RDB$PARTIDA_NAL.ID = :L_IN_OUT; 
                     END 
                    --КОГАТО ЕЛЕМЕНТА ЗА ИЗХОД Е КОРЕГИРАН ИЗЛИШЪК
                    --ЩЕ ЪПДЕЙТНА СУМИТЕ, ЗАРАДИ НАЧИН ИМ НА РАБОТА.
                    --АКО ИЗХОДА Е ОТ НОРМАЛНО РАЗПРЕДЕЛЕНИЕ,НО Е ПРЕДИ РЕДАКТИРАНАТА
                    --ОПЕРАЦИЯ - НЯМА ДА ЪПДЕЙТВАМ СУМИ. ЗА ДА РАБОТИ ПРАВИЛНО В ТАЗИ СИТУАЦИЯ, ЩЕ ГЕНЕРИРАМ ИЗЛИШЪК
                    --ЗА ТОЗИ ИЗХОД, КОЙТО ТРЯБВА ДА СЕ КОМПЕНСИРА ПОСЛЕ!!!ТОВА НЕ ЗНАМ ДАЛИ Е ПРАВИЛНО
 
                    L_IN_OUT = NULL; 
                    SELECT 
                        IZL.ID 
                    FROM 
                        IZL 
                    WHERE 
                        IZL.OUT_EL_ID = :L_OUT_EL_ID 
                    INTO 
                        :L_IN_OUT; 
 
                    IF (L_IN_OUT IS NOT NULL) THEN BEGIN 
                        IF (L_IN_OUT < L_IZL_LAST_ID) THEN BEGIN 
                            UPDATE RDB$NAL SET 
                            SUMA = ROUNDD(SUMA + ROUNDD(:L_OUT_SUMA_SR * :L_PN_KOL)), 
                            SUMA_FR = ROUNDD(SUMA_FR + :L_PN_SUMA) 
                            WHERE SKLAD_ID = :L_SKLAD_ID; 
                        END 
                    END 
                    ELSE BEGIN 
                        UPDATE RDB$NAL SET 
                        SUMA = ROUNDD(SUMA + ROUNDD(:L_OUT_SUMA_SR * :L_PN_KOL)), 
                        SUMA_FR = ROUNDD(SUMA_FR + :L_PN_SUMA) 
                        WHERE SKLAD_ID = :L_SKLAD_ID; 
 
                    END 
 
                    UPDATE OUT_EL SET 
                    OUT_EL.SUMA_FR = ROUNDD(OUT_EL.SUMA_FR - :L_PN_SUMA), 
                    OUT_EL.SUMA_SR = ROUNDD(OUT_EL.SUMA_SR - ROUNDD(:L_OUT_SUMA_SR * :L_PN_KOL)) 
                    WHERE OUT_EL.ID = :L_OUT_EL_ID; 
 
                END 
            END 
 
 
            L_IN_OUT = NULL; 
            SELECT 
                RDB$NAL.SKLAD_ID 
            FROM 
                RDB$NAL 
            WHERE 
                RDB$NAL.SKLAD_ID = :L_SKLAD_ID 
            INTO 
                :L_IN_OUT; 
 
            IF (L_IN_OUT IS NULL) THEN 
                INSERT INTO RDB$NAL(SUMA,SUMA_FR,LAST_CENA,SKLAD_ID,KOL) 
                VALUES (:L_SUMA_SR,:L_SUMA_FR,ROUND5(:L_SUMA_FR / :L_KOL),:L_SKLAD_ID,:L_KOL); 
            ELSE 
                UPDATE RDB$NAL SET 
                RDB$NAL.SUMA    = ROUNDD(RDB$NAL.SUMA - :L_SUMA_SR), 
                RDB$NAL.SUMA_FR = ROUNDD(RDB$NAL.SUMA_FR - :L_SUMA_FR), 
                RDB$NAL.KOL     = ROUND5(RDB$NAL.KOL  - :L_KOL) 
                WHERE 
                RDB$NAL.SKLAD_ID = :L_SKLAD_ID; 
 
            DELETE FROM RDB$PARTIDA_NAL 
            WHERE RDB$PARTIDA_NAL.IN_EL_ID = :L_EL_ID; 
 
            IF (:L_OPR_TIP = 4) THEN BEGIN 
                UPDATE OPR SET 
                OPR.SUMA = ROUNDD(OPR.SUMA - :L_SUMA_FR) 
                WHERE OPR.ID = :L_OPR_ID; 
 
                UPDATE PARTIDA_EL_NODE SET SUMA = 0.00 WHERE IN_EL_ID = :L_EL_ID AND 
                OPR_ID = :L_OPR_ID; 
 
                UPDATE IN_EL SET 
                IN_EL.SUMA = ROUNDD(0.00) 
                WHERE IN_EL. ID = :L_EL_ID; 
            END 
        END 
    END 
 
    UPDATE RDB$NAL SET 
    SUMA = 0.00, 
    SUMA_FR = 0.00 
    WHERE KOL < 0.00; 
 
    R_RESULT = 0; */
END^


ALTER PROCEDURE EDIT_DOST_OLD_NAL (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_OLD_DATE DATE,
    P_NEW_DATE DATE,
    P_NEW_SKLAD INTEGER)
RETURNS (
    R_RESULT SMALLINT)
AS
DECLARE VARIABLE L_SKLAD_ID INTEGER;
DECLARE VARIABLE L_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_EL_ID INTEGER;
DECLARE VARIABLE L_OPR_ID INTEGER;
DECLARE VARIABLE L_OPR_TIP INTEGER;
DECLARE VARIABLE L_OPR_DATE DATE;
DECLARE VARIABLE L_IN_OUT INTEGER;
DECLARE VARIABLE L_PN_IN_EL_ID INTEGER;
DECLARE VARIABLE L_PN_EL_ID INTEGER;
DECLARE VARIABLE L_PN_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PN_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_PN_ID INTEGER;
DECLARE VARIABLE L_DATE DATE;
DECLARE VARIABLE L_OUT_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_EL_ID INTEGER;
DECLARE VARIABLE L_IZL_LAST_ID INTEGER;
BEGIN 
    /*V.13 
    ЗА РАБОТАТА НА ПРОЦЕДУРАТА СЕ ПРЕДПОЛАГА, ЧЕ ДАННИТЕ ЗА ЕЛЕМЕНТИТЕ НА 
    ДОСТАВКАТА ВЕЧЕ СА БИЛИ ЪПДЕЙТНАТИ ОТ ПРОГРАМАТА(СУМИ И КОЛИЧЕСТВА). 
    ТОВА СЕ ИЗИСКВА, ЗАЩОТО Е ВЪЗМОЖНО В ЕДНА ДОСТАВКА ДА ИМА ДАДЕН ПРОДУКТ НА 
    2 И ПОВЕЧЕ РЕДА. А ТУК ЩЕ СЕ ПОДАДЕ ПРОДУКТА И ОПЕРАЦИЯТА. 
    В ОБРАТЕН РЕД ЩЕ СЕ ПОВТОРЯТ ВСИЧКИ ОПЕРАЦИИ И ЩЕ СЕ НАМЕРИ СЪСТОЯНИЕТО НА 
    ПАРТИДИТЕ И НАЛИЧНОСТИТЕ В МОМЕНТА ПРЕДИ ИЗВЪРШВАНЕ НА ДОСТАВКАТА 
    ТАКА С ЕДНО ИВИКВАНЕ НА ТАЗИ ПРОЦЕДУРА ЩЕ СЕ ОБХВАНАТ ПРОМЕНИТЕ НА ВСИЧКИ 
    ЕЛЕМЕНТИ ОТ РЕДАКТИРАНАТА ДОСТАВКА, ОТГОВАРЯЩИ НА ID НА ПРОДУКТА */ 
 
/*    R_RESULT = 0;
 
    SELECT 
        MAX(IZL.ID) 
    FROM 
        IZL 
    INTO 
        :L_IZL_LAST_ID; 
 
    L_EL_ID = NULL; 
 
    SELECT SIMPLE.ID FROM SIMPLE  WHERE SIMPLE.ID = :P_SIMPLE_ID AND SIMPLE.USLUGA = '0' INTO :L_EL_ID; 
 
    IF (L_EL_ID IS NULL) THEN 
        EXIT; 
 
    R_RESULT = 1; 
    L_EL_ID = NULL; 
 
    EXECUTE PROCEDURE INIT_RDBS(P_SIMPLE_ID); 
 
    --НАМИРАНЕ НА СЪСТОЯНИТО НА НАЛИЧНОСТИТЕ КЪМ МОМЕНТА НА ДОСТАВКА.
    --АКО НОВАТА ДАТА Е ПО-РАННА ОТ ТЕКУЩАТА ЗА ОПЕРАЦИЯТА,ПЪРВО СМЕНЯМ ДАТАТА
    --НА ОПЕРАЦИЯТА И ТОГАВА НАМИРАН СЪСТОЯНИЕТО НА НАЛИЧНОСТИТЕ. АКО Е ПО-КЪСНА
    --ОТ ТЕКУЩАТА ТОГАВА ПЪРВО НАМИРАМ СЪСТОЯНИЕТО И ТОГАВА СМЕНЯМ ДАТАТА
 
    IF (P_OLD_DATE > P_NEW_DATE) THEN 
        L_DATE = P_NEW_DATE; 
    ELSE 
        L_DATE = P_OLD_DATE; 
 
    FOR SELECT 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_KOL, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_SUMA_SR, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_SUMA_FR, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_EL_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_TIP, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_SKLAD_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_DATE, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_IN_OUT 
    FROM 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY(:P_SIMPLE_ID,:P_OPR_ID,:L_DATE) 
    ORDER BY R_IN_OUT ASC,R_OPR_DATE DESC 
    INTO 
        :L_KOL,:L_SUMA_SR,:L_SUMA_FR,:L_EL_ID,:L_OPR_ID, 
        :L_OPR_TIP,:L_SKLAD_ID,:L_OPR_DATE,:L_IN_OUT 
    DO BEGIN 
 
        IF (L_IN_OUT = 0) THEN BEGIN 
        --ИЗХОД ОТ СКЛАДА - ЩЕ ВЪЗСТАНОВЯВАМ ПАРТИДИ
        --1. НАМИРАМ ЗА ТЕКУЩИЯ OUT_EL КОИ ПАРТИДИ ГО ОБРАЗУВАТ
        --2. ВСЯКО КОЛИЧЕСТВО И СУМА УЧАСТВАЩИ В НЕГО СЕ ВРЪЩАТ В NAL
        --(САМО КОЛИЧЕСТВО И СУМА ПВ. СУМА СП ЩЕ СЕ ДОБАВИ НАКРАЯ - ТЯ Я ИМА
        --В СУМАТА НА ЕЛЕМЕНТА ОТ OUT_EL)
        --3.НАМИРАМ ИЛИ СЪЗДАВАМ ПАРТИДАТА И ВРЪЩАМ КОЛИЧЕСТВО И СУМА
            FOR SELECT 
                P1.ID, 
                P1.IN_EL_ID, 
                P1.ELEMENT_ID, 
                P1.KOL, 
                P1.SUMA 
            FROM 
                PARTIDA_EL_NODE P1 INNER JOIN PARTIDA_OUT_EL_NODE PO1 
                ON P1.ID = PO1.PARTIDA_NODE_ID 
            WHERE 
                PO1.OUT_EL_ID = :L_EL_ID 
            INTO 
                :L_PN_ID,:L_PN_IN_EL_ID,:L_PN_EL_ID,:L_PN_KOL,:L_PN_SUMA 
            DO BEGIN 
                --ПРОВЕРКА ДАЛИ ПАРТИДАТА Я ИМА
                L_IN_OUT = NULL; 
                SELECT 
                    RDB$PARTIDA_NAL.ID 
                FROM 
                    RDB$PARTIDA_NAL 
                WHERE 
                    RDB$PARTIDA_NAL.IN_EL_ID = :L_PN_IN_EL_ID 
                    AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                INTO 
                    :L_IN_OUT; 
 
                IF (L_IN_OUT IS NULL) THEN BEGIN 
                    --СЪЗДАВАМ ПАРТИДАТА НАНОВО
                    INSERT INTO RDB$PARTIDA_NAL (KOL_NAL,SUMA,IN_EL_ID,ELEMENT_ID) 
                    VALUES (:L_PN_KOL,:L_PN_SUMA,:L_PN_IN_EL_ID,:L_PN_EL_ID); 
                END 
                ELSE BEGIN 
                --ПАРТИДАТА Я ИМА - ПРОСТО ДОБАВЯМ НОВИТЕ КОЛИЧЕСТВА
                    UPDATE RDB$PARTIDA_NAL SET 
                    RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL + :L_PN_KOL), 
                    RDB$PARTIDA_NAL.SUMA    = ROUNDD(RDB$PARTIDA_NAL.SUMA + :L_PN_SUMA) 
                    WHERE 
                    RDB$PARTIDA_NAL.ID = :L_IN_OUT; 
                END 
 
                --ИЗТРИВАМЕ ЗАПИСИТЕ ОТ PARTIDA_EL_NODE. ТОВА ЩЕ ИЗТРИE И
                --ЗАПИСИТЕ В PARTIDA_OUT_EL_NODE СВЪРЗАНИ ПО ВЪНШЕН КЛЮЧ
                --КЪМ ИЗТРИТИЕ ЗАПИСИ В PARTIDA_EL_NODE
                DELETE FROM PARTIDA_EL_NODE WHERE 
                PARTIDA_EL_NODE.ID = :L_PN_ID; 
            END 
            --МАХАМЕ ИЗЛИЗШЪЦИ ЗА ТОЗИ ЕЛЕМЕНТ АКО ИМА ТАКИВА
            DELETE FROM IZL 
            WHERE IZL.OUT_EL_ID = :L_EL_ID; 
 
            L_IN_OUT = NULL; 
            SELECT 
                RDB$NAL.SKLAD_ID 
            FROM 
                RDB$NAL 
            WHERE 
                RDB$NAL.SKLAD_ID = :L_SKLAD_ID 
            INTO 
                :L_IN_OUT; 
 
            IF (L_IN_OUT IS NULL) THEN 
                INSERT INTO RDB$NAL(SUMA,SUMA_FR,LAST_CENA,SKLAD_ID,KOL) 
                VALUES (:L_SUMA_SR,:L_SUMA_FR,ROUND5(:L_SUMA_FR / :L_KOL),:L_SKLAD_ID,:L_KOL); 
            ELSE 
                UPDATE RDB$NAL SET 
                RDB$NAL.SUMA    = ROUNDD(RDB$NAL.SUMA + :L_SUMA_SR), 
                RDB$NAL.SUMA_FR = ROUNDD(RDB$NAL.SUMA_FR + :L_SUMA_FR), 
                RDB$NAL.KOL     = ROUND5(RDB$NAL.KOL  + :L_KOL) 
                WHERE 
                RDB$NAL.SKLAD_ID = :L_SKLAD_ID; 
 
            UPDATE OUT_EL SET 
            OUT_EL.SUMA_SR = ROUNDD(0.00), 
            OUT_EL.SUMA_FR = ROUNDD(0.00) 
            WHERE OUT_EL.ID = :L_EL_ID; 
 
            --ИЗВАЖДАНЕ НА СТАРИТЕ СУМИ ОТ СЪОТВЕТНИТЕ ТАБЛИЦИ - ПРИ
            --ПРЕРАЗПРЕДЕЛЯНЕТО ЩЕ СЕ СЪБЕРАТ С НОВИТЕ И ТАКА ЩЕ ИМАМЕ НОВИТЕ
            --ОБОБЩЕНИ СТОЙНОСТИ
 
            IF (L_OPR_TIP IN (2,23)) THEN BEGIN 
            --ПРОМЯНА НА СУМИТЕ НА OUT СЪС СУМА ПВ И СП
                UPDATE OUT SET 
                OUT.SUMA_SR = ROUNDD(OUT.SUMA_SR - :L_SUMA_SR), 
                OUT.SUMA_FR = ROUNDD(OUT.SUMA_FR - :L_SUMA_FR) 
                WHERE OUT.OPR_ID = :L_OPR_ID; 
 
                SELECT 
                    SUM(OUT_EL.SUMA_SR), 
                    SUM(OUT_EL.SUMA_FR) 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.OPR_ID = :L_OPR_ID 
                INTO 
                    :L_SUMA_SR,:L_SUMA_FR; 
 
                --НОВ НАЧИН
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR), 
                OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR) 
                WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
            END 
            ELSE IF (L_OPR_TIP = 34) THEN BEGIN 
            --ПРОМЯНА НА СУМИТЕ НА OUT СЪС СУМА ПВ И СП
                SELECT 
                    SUM(OUT_EL.SUMA_SR), 
                    SUM(OUT_EL.SUMA_FR) 
                FROM 
                    OUT_EL INNER JOIN PROD_NODE ON PROD_NODE.OPR_SUB_PROD_ID = OUT_EL.OPR_ID 
                WHERE 
                    PROD_NODE.OPR_PROD_ID = (SELECT PN.OPR_PROD_ID FROM PROD_NODE PN WHERE PN.OPR_SUB_PROD_ID = :L_OPR_ID) 
                INTO 
                    :L_SUMA_SR,:L_SUMA_FR; 
 
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR), 
                OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR) 
                WHERE OPR_SUMI.OPR_ID = (SELECT PN.OPR_PROD_ID FROM PROD_NODE PN WHERE PN.OPR_SUB_PROD_ID = :L_OPR_ID); 
 
                --СУМАТА ЗА ОТДЕЛНАТА ПОДПРОДАЖБА 
                SELECT 
                    SUM(OUT_EL.SUMA_SR), 
                    SUM(OUT_EL.SUMA_FR) 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.OPR_ID = :L_OPR_ID 
                INTO 
                    :L_SUMA_SR,:L_SUMA_FR; 
 
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR), 
                OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR) 
                WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
            END 
            ELSE IF (L_OPR_TIP = 3) THEN BEGIN 
                UPDATE INV SET 
                INV.SUMA_LIPSA = ROUNDD(INV.SUMA_LIPSA - :L_SUMA_FR) 
                WHERE INV.OPR_ID = :L_OPR_ID; 
            END 
            ELSE IF (L_OPR_TIP = 9) THEN BEGIN 
            --ПРОМЯНА НА СУМИТЕ В MOVE SUMA SR И НА ОПЕРАЦИЯТА SUMA СЪС СУМА ПВ
                SELECT 
                    SUM(OUT_EL.SUMA_SR), 
                    SUM(OUT_EL.SUMA_FR) 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.OPR_ID = :L_OPR_ID 
                INTO 
                    :L_SUMA_SR,:L_SUMA_FR; 
 
                UPDATE OPR SET 
                OPR.SUMA = ROUNDD(:L_SUMA_FR) 
                WHERE OPR.ID = :L_OPR_ID; 
 
                --НОВ НАЧИН 
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR), 
                OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR) 
                WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
 
                --UPDATE OUT_EL SET
                --OUT_EL.SUMA = ROUNDD(0.00)
                --WHERE OUT_EL.ID = :L_EL_ID;
            END 
            ELSE IF (L_OPR_TIP = 11) THEN BEGIN 
            --ПРОМЯНА НА СУМИТЕ НА ИЗПИСВАНЕТО СЪС СУМА ПВ И СП
                SELECT 
                    SUM(OUT_EL.SUMA_SR), 
                    SUM(OUT_EL.SUMA_FR) 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.OPR_ID = :L_OPR_ID 
                INTO 
                    :L_SUMA_SR,:L_SUMA_FR; 
 
                UPDATE OPR SET 
                OPR.SUMA = ROUNDD(:L_SUMA_FR) 
                WHERE OPR.ID = :L_OPR_ID; 
 
                --НОВ НАЧИН 
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_FR = ROUNDD(:L_SUMA_FR), 
                OPR_SUMI.SUMA_SR = ROUNDD(:L_SUMA_SR) 
                WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
            END 
        END 
        ELSE IF (L_IN_OUT = 1) THEN BEGIN 
            --ОПЕРАЦИЯТА Е ВХОД - ЩЕ МАХНА СЪОТВЕТНИТЕ КОЛИЧЕСТВА И СУМИ ОТ B NAL
            --И ЩЕ ИЗТРИЯ ПАРТИДИТЕ ГЕНЕРИРАНИ ТО ТОЗИ ВХОД
            IF ((L_OPR_TIP = 1)OR(L_OPR_TIP = 22)) THEN BEGIN 
                --ВРЪЩАМ СУМИТЕ ОТ ВРЪЩАНЕ НА СТОКА КЪМ ДОСТ. ПРЕДИ ДА ГИ МАХНА КАТО ВХОД
                SELECT 
                    COALESCE(SUM(ORN.SUMA_SR),0) 
                FROM 
                    OPR_RAZPAD_NODE ORN 
                WHERE 
                    ORN.IN_EL_ID = :L_EL_ID 
                INTO 
                   :L_PN_SUMA; 
 
                UPDATE RDB$NAL SET 
                RDB$NAL.SUMA = ROUNDD(RDB$NAL.SUMA + :L_PN_SUMA) 
                WHERE SKLAD_ID = :L_SKLAD_ID; 
 
                FOR SELECT 
                    PEN.ID, 
                    PEN.KOL, 
                    PEN.SUMA, 
                    PEN.ELEMENT_ID 
                FROM 
                    OPR_RAZPAD_NODE ORN INNER JOIN PARTIDA_OUT_EL_NODE PON ON 
                    (ORN.IN_EL_ID = :L_EL_ID AND ORN.OUT_EL_ID = PON.OUT_EL_ID) 
                    INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID 
                INTO 
                    :L_PN_ID,:L_PN_KOL,:L_PN_SUMA,:L_PN_EL_ID 
                DO BEGIN 
                    UPDATE RDB$NAL SET 
                    SUMA_FR = ROUNDD(SUMA_FR + :L_PN_SUMA), 
                    KOL = ROUND5(KOL + :L_PN_KOL) 
                    WHERE SKLAD_ID = :L_SKLAD_ID; 
 
                    UPDATE OPR SET 
                    SUMA = ROUNDD(SUMA - :L_PN_SUMA) 
                    WHERE ID = (SELECT PARTIDA_EL_NODE.OPR_ID FROM PARTIDA_EL_NODE WHERE PARTIDA_EL_NODE.ID = :L_PN_ID); 
 
                    --НОВ НАЧИН
                    UPDATE OPR_SUMI SET 
                    SUMA_FR = ROUNDD(SUMA_FR - :L_PN_SUMA), 
                    SUMA_SR = ROUNDD(SUMA_FR - :L_PN_SUMA) 
                    WHERE OPR_ID = (SELECT PARTIDA_EL_NODE.OPR_ID FROM PARTIDA_EL_NODE WHERE PARTIDA_EL_NODE.ID = :L_PN_ID); 
 
                    L_IN_OUT = NULL; 
                    SELECT 
                        RDB$PARTIDA_NAL.ID 
                    FROM 
                        RDB$PARTIDA_NAL 
                    WHERE 
                        RDB$PARTIDA_NAL.IN_EL_ID = :L_EL_ID 
                        AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_IN_OUT; 
 
                    IF (L_IN_OUT IS NULL) THEN BEGIN 
                        --СЪЗДАВАМ ПАРТИДАТА НАНОВО
                        INSERT INTO RDB$PARTIDA_NAL (KOL_NAL,SUMA,IN_EL_ID,ELEMENT_ID) 
                        VALUES (:L_PN_KOL,:L_PN_SUMA,:L_EL_ID,:L_PN_EL_ID); 
                    END 
                    ELSE BEGIN 
                    --ПАРТИДАТА Я ИМА - ПРОСТО ДОБАВЯМ НОВИТЕ КОЛИЧЕСТВА
                        UPDATE RDB$PARTIDA_NAL SET 
                        RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL + :L_PN_KOL), 
                        RDB$PARTIDA_NAL.SUMA    = ROUNDD(RDB$PARTIDA_NAL.SUMA + :L_PN_SUMA) 
                        WHERE 
                        RDB$PARTIDA_NAL.ID = :L_IN_OUT; 
                    END 
                    --ИЗТРИВАМЕ ЗАПИСИТЕ ОТ PARTIDA_EL_NODE. ТОВА ЩЕ ИЗТРИE И
                    --ЗАПИСИТЕ В PARTIDA_OUT_EL_NODE СВЪРЗАНИ ПО ВЪНШЕН КЛЮЧ
                    --КЪМ ИЗТРИТИЕ ЗАПИСИ В PARTIDA_EL_NODE
                    DELETE FROM PARTIDA_EL_NODE WHERE 
                    PARTIDA_EL_NODE.ID = :L_PN_ID; 
                END 
            END 
 
            --НАМИРАНЕ НА ПАРТИДИ ОТ ПРЕДИ РЕДАКТИРАНАТА ОПЕРАЦИЯ - КОРЕКЦИЯ НА ИЗЛИШЪЦИ
            FOR SELECT 
                OUT_EL.ID, 
                OUT_EL.SUMA_SR 
            FROM 
                PARTIDA_EL_NODE INNER JOIN PARTIDA_OUT_EL_NODE ON 
                (PARTIDA_EL_NODE.IN_EL_ID = :L_EL_ID AND PARTIDA_EL_NODE.ID = PARTIDA_OUT_EL_NODE.PARTIDA_NODE_ID) 
                INNER JOIN OPR ON ( ((OPR.OPR_DATE < :L_DATE) OR ((OPR.OPR_DATE = :L_DATE) AND OPR.ID < :P_OPR_ID)) AND OPR.ID = PARTIDA_EL_NODE.OPR_ID) 
                INNER JOIN OUT_EL ON OUT_EL.ID = PARTIDA_OUT_EL_NODE.OUT_EL_ID 
            ORDER BY 1 
            INTO 
                :L_OUT_EL_ID,:L_OUT_SUMA_SR 
            DO BEGIN 
                --NAMIRAM KOLKO E SUMATA ZA WSEKI OUT_EL KOITO U4ASTWA I NEGOWOTO KOL OT PARTIDI
                SELECT 
                    SUM(PEN.KOL) 
                FROM 
                    PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON 
                    (PON.OUT_EL_ID = :L_OUT_EL_ID AND PON.PARTIDA_NODE_ID = PEN.ID) 
                INTO 
                    :L_OUT_KOL; 
 
                --NAMIRAM EDINI4NATA SUMA SREDNA
                L_OUT_SUMA_SR = ROUND5(L_OUT_SUMA_SR / L_OUT_KOL); 
 
                FOR SELECT 
                    PEN.ID, 
                    PEN.ELEMENT_ID, 
                    PEN.KOL, 
                    PEN.SUMA 
                FROM 
                    PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON 
                    (PON.OUT_EL_ID = :L_OUT_EL_ID AND PEN.ID = PON.PARTIDA_NODE_ID AND PEN.IN_EL_ID = :L_EL_ID) 
                    INNER JOIN OPR ON OPR.ID = PEN.OPR_ID 
                WHERE 
                    ((OPR.OPR_DATE < :L_DATE)OR ((OPR.OPR_DATE = :L_DATE) AND (OPR.ID < :P_OPR_ID))) 
                INTO 
                    :L_PN_ID,:L_PN_EL_ID,:L_PN_KOL,:L_PN_SUMA 
                DO BEGIN 
                    L_IN_OUT = NULL; 
                    SELECT 
                        RDB$PARTIDA_NAL.ID 
                    FROM 
                        RDB$PARTIDA_NAL 
                    WHERE 
                        RDB$PARTIDA_NAL.IN_EL_ID = :L_EL_ID 
                        AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID 
                    INTO 
                        :L_IN_OUT; 
                    IF (L_IN_OUT IS NULL) THEN BEGIN 
                        --СЪЗДАВАМ ПАРТИДАТА НАНОВО
                        INSERT INTO RDB$PARTIDA_NAL (KOL_NAL,SUMA,IN_EL_ID,ELEMENT_ID) 
                        VALUES (:L_PN_KOL,:L_PN_SUMA,:L_EL_ID,:L_PN_EL_ID); 
                    END 
                    ELSE BEGIN 
                        --ПАРТИДАТА Я ИМА - ПРОСТО ДОБАВЯМ НОВИТЕ КОЛИЧЕСТВА
                        UPDATE RDB$PARTIDA_NAL SET 
                        RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL + :L_PN_KOL), 
                        RDB$PARTIDA_NAL.SUMA    = ROUNDD(RDB$PARTIDA_NAL.SUMA + :L_PN_SUMA) 
                        WHERE 
                        RDB$PARTIDA_NAL.ID = :L_IN_OUT; 
                     END 
                    --КОГАТО ЕЛЕМЕНТА ЗА ИЗХОД Е КОРЕГИРАН ИЗЛИШЪК
                    --ЩЕ ЪПДЕЙТНА СУМИТЕ, ЗАРАДИ НАЧИН ИМ НА РАБОТА.
                    --АКО ИЗХОДА Е ОТ НОРМАЛНО РАЗПРЕДЕЛЕНИЕ,НО Е ПРЕДИ РЕДАКТИРАНАТА
                    --ОПЕРАЦИЯ - НЯМА ДА ЪПДЕЙТВАМ СУМИ. ЗА ДА РАБОТИ ПРАВИЛНО В ТАЗИ СИТУАЦИЯ, ЩЕ ГЕНЕРИРАМ ИЗЛИШЪК
                    --ЗА ТОЗИ ИЗХОД, КОЙТО ТРЯБВА ДА СЕ КОМПЕНСИРА ПОСЛЕ!!!ТОВА НЕ ЗНАМ ДАЛИ Е ПРАВИЛНО
 
                    L_IN_OUT = NULL; 
                    SELECT 
                        IZL.ID 
                    FROM 
                        IZL 
                    WHERE 
                        IZL.OUT_EL_ID = :L_OUT_EL_ID 
                    INTO 
                        :L_IN_OUT; 
 
                    IF (L_IN_OUT IS NOT NULL) THEN BEGIN 
                        IF (L_IN_OUT < L_IZL_LAST_ID) THEN BEGIN 
                            UPDATE RDB$NAL SET 
                            SUMA = ROUNDD(SUMA + ROUNDD(:L_OUT_SUMA_SR * :L_PN_KOL)), 
                            SUMA_FR = ROUNDD(SUMA_FR + :L_PN_SUMA) 
                            WHERE SKLAD_ID = :L_SKLAD_ID; 
 
                            UPDATE IZL SET FLAG_LOCK_KOR = 0 WHERE ID = :L_IN_OUT; 
                        END 
                    END 
                    ELSE BEGIN 
                        UPDATE RDB$NAL SET 
                        SUMA = ROUNDD(SUMA + ROUNDD(:L_OUT_SUMA_SR * :L_PN_KOL)), 
                        SUMA_FR = ROUNDD(SUMA_FR + :L_PN_SUMA) 
                        WHERE SKLAD_ID = :L_SKLAD_ID; 
 
                        INSERT INTO IZL(KOL,OUT_EL_ID,LAST_CENA) 
                        VALUES(:L_PN_KOL,:L_OUT_EL_ID,:L_OUT_SUMA_SR); 
                    END 
 
                    UPDATE OUT_EL SET 
                    OUT_EL.SUMA_FR = ROUNDD(OUT_EL.SUMA_FR - :L_PN_SUMA), 
                    OUT_EL.SUMA_SR = ROUNDD(OUT_EL.SUMA_SR - ROUNDD(:L_OUT_SUMA_SR * :L_PN_KOL)) 
                    WHERE OUT_EL.ID = :L_OUT_EL_ID; 
 
                    --ИЗТРИВАНЕ НА ВРЪЗКИТЕ М/У ИЗЛИШЪК И ПАРТИДАТА
                    DELETE FROM PARTIDA_EL_NODE 
                    WHERE ID = :L_PN_ID; 
                END 
            END 
 
            UPDATE RDB$NAL SET 
            RDB$NAL.SUMA    = ROUNDD(RDB$NAL.SUMA - :L_SUMA_SR), 
            RDB$NAL.SUMA_FR = ROUNDD(RDB$NAL.SUMA_FR - :L_SUMA_FR), 
            RDB$NAL.KOL     = ROUND5(RDB$NAL.KOL  - :L_KOL) 
            WHERE 
            RDB$NAL.SKLAD_ID = :L_SKLAD_ID; 
 
            --ПАРТИДИТЕ ЗА ТОЗИ ЕЛЕМЕНТ НА ВХОДА СЕ ИЗТРИВАТ
            DELETE FROM RDB$PARTIDA_NAL 
            WHERE RDB$PARTIDA_NAL.IN_EL_ID = :L_EL_ID; 
 
            --АКО ОПЕРАЦИЯТА Е ВХОД ОТ ПРЕХВЪРЛЯНЕ ИЛИ ВРЪЩАНЕ А СТОКА ОТ КЛИЕНТ
            --СЕ ИЗТРИВАТ И ЗАПИСИТЕ В PARTIDA_EL_NODE, ЗАЩОТО ЗА ОПЕРАЦИЯТА ТЕ
            --МОЖЕ ДА СА СЪВСЕМ РАЗЛИЧНИ, ПРИ ПРЕПОДРЕЖДАНЕТО НА ПАРТИДИТЕ. САМО
            --ЗАПИСИ СЪЗДАДЕНИ ОТ ВХОД В СКЛАДА, ДОШЪЛ ОТ ДОСТАВКА ИЛИ ИНВЕНТАРИЗАЦИЯ
             --НЯМА ДА СЕ ТРИЯТ. ТЕ ГЕНЕРИРАТ НОВИ ПАРТИДНИ ЕЛЕМЕНТИ И ТАЗИ
             --ИНФОРМАЦИЯ Е НЕОБХОДИМА
            IF (:L_OPR_TIP IN (4,26,41)) THEN BEGIN 
                DELETE FROM PARTIDA_EL_NODE WHERE 
                PARTIDA_EL_NODE.IN_EL_ID = :L_EL_ID; 
 
                --ПОНЕЖЕ ТОВА Е ПРЕХВЪРЛЯНЕ И СУМАТА НА ОПЕРАЦИЯТА Е ПО ПВ И ЗА
                --ДВЕТЕ ОПЕРАЦИЙ - ИЗХОД И ВХОД, ТАЗИ ОПЕРАЦИЯ СЪЩО ТРБАВА ДА И СЕ
                --НАМАЛИ СУМАТА. ПРИ ПРЕНАРЕЖДАНЕТО НА СУМИТЕ ЩЕ СЛОЖИМ.
                IF (L_OPR_TIP = 4) THEN 
                    UPDATE OPR SET 
                    OPR.SUMA = ROUNDD(OPR.SUMA - :L_SUMA_FR) 
                    WHERE OPR.ID = :L_OPR_ID; 
 
                UPDATE IN_EL SET 
                IN_EL.SUMA = ROUNDD(0.00) 
                WHERE IN_EL. ID = :L_EL_ID; 
            END 
        END 
    END 
 
    --ПРОМЯНА НА ДАТАТА НА ОСЛЕД НАМИРАНЕ НА СЪСТОЯНИЕТО НА ПАРТИДИТЕ
    --И НАЛИЧНОСТИТЕ
    UPDATE OPR SET 
    OPR.OPR_DATE = :P_NEW_DATE 
    WHERE OPR.ID = :P_OPR_ID; 
 
    UPDATE OPR SET OPR.SKLAD_ID = :P_NEW_SKLAD 
    WHERE OPR.ID = :P_OPR_ID; 
 
    IF (NOT EXISTS (SELECT RDB$NAL.SKLAD_ID FROM RDB$NAL WHERE RDB$NAL.SKLAD_ID = :P_NEW_SKLAD)) THEN 
        INSERT INTO RDB$NAL(SKLAD_ID,SUMA,SUMA_FR,KOL,LAST_CENA) VALUES(:P_NEW_SKLAD,0,0,0,0); 
 
    R_RESULT = 0; 
*/
END^


ALTER PROCEDURE EDIT_DOST_SN_CHANGE_SKLAD (
    P_IN_EL_ID INTEGER,
    P_OLD_SKLAD_ID SMALLINT,
    P_NEW_SKLAD_ID SMALLINT)
AS
DECLARE VARIABLE L_IN_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_IN_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_SIMPLE_ID INTEGER;
DECLARE VARIABLE L_NAL_ID INTEGER;
BEGIN 
/*    SELECT
        IN_EL.KOL, 
        IN_EL.SUMA, 
        IN_EL.SIMPLE_ID 
    FROM 
        IN_EL 
    WHERE 
        IN_EL.ID = :P_IN_EL_ID 
    INTO 
        :L_IN_KOL,:L_IN_SUMA, :L_SIMPLE_ID; 
     
    UPDATE NAL SET 
    SUMA = ROUNDD(SUMA - :L_IN_SUMA), 
    SUMA_FR = ROUNDD(SUMA_FR - :L_IN_SUMA), 
    KOL_NAL  = ROUND5(KOL_NAL - :L_IN_KOL) 
    WHERE 
    SKLAD_ID = :P_OLD_SKLAD_ID 
    AND SIMPLE_ID = :L_SIMPLE_ID; 
 
    SELECT 
        NAL.ID 
    FROM 
        NAL 
    WHERE 
        NAL.SIMPLE_ID = :L_SIMPLE_ID 
        AND NAL.SKLAD_ID = :P_NEW_SKLAD_ID 
    INTO 
        :L_NAL_ID; 
    IF (L_NAL_ID IS NOT NULL) THEN BEGIN 
        UPDATE NAL SET 
        SUMA = ROUNDD(SUMA + :L_IN_SUMA), 
        SUMA_FR = ROUNDD(SUMA_FR + :L_IN_SUMA), 
        KOL_NAL  = ROUND5(KOL_NAL + :L_IN_KOL) 
        WHERE 
        ID = :L_NAL_ID; 
    END 
    ELSE BEGIN 
        INSERT INTO NAL (SIMPLE_ID, SKLAD_ID, KOL_NAL, SUMA, LAST_CENA, SUMA_FR, KOL_RZV, DATETIME_LASTCENA) 
        VALUES ( :L_SIMPLE_ID, :P_NEW_SKLAD_ID, :L_IN_KOL, :L_IN_SUMA, ROUND5(:L_IN_SUMA / :L_IN_KOL), :L_IN_SUMA, 0, CURRENT_TIMESTAMP); 
    END */
END^


ALTER PROCEDURE EDIT_FIRMA_FAK_DATA
AS
DECLARE VARIABLE L_FAK_ID INTEGER; 
DECLARE VARIABLE L_PLACE_NAME VARCHAR(30); 
DECLARE VARIABLE L_REG_DDS CHAR(1); 
BEGIN 
    FOR SELECT 
            FAK.ID, 
            PLACE.NAME AS PLASE_NAME, 
            FIRMI.REG_DDS 
        FROM 
            FAK 
            INNER JOIN OPR ON OPR.ID = FAK.OPR_ID 
            INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            INNER JOIN FIRMI ON FIRMI.ID = KLI.FIRMA_ID 
            LEFT JOIN PLACE ON PLACE.ID = FIRMI.PLACE_ID 
        WHERE 
            EXISTS (SELECT FIRMI_FAK_DATA.FAK_ID FROM FIRMI_FAK_DATA WHERE FIRMI_FAK_DATA.FAK_ID = FAK.ID) 
        INTO :L_FAK_ID,:L_PLACE_NAME,:L_REG_DDS 
 
        DO 
        BEGIN 
            UPDATE 
            FIRMI_FAK_DATA 
            SET PLACE_NAME =:L_PLACE_NAME, 
                  REG_DDS = :L_REG_DDS 
            WHERE 
                FIRMI_FAK_DATA.FAK_ID =:L_FAK_ID; 
        END 
END^


ALTER PROCEDURE EDIT_IN_DEC_KOL (
    P_EL_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_IN_EL_ID INTEGER,
    P_OPR_ID INTEGER,
    P_FLAG_SN CHAR(1))
AS
DECLARE VARIABLE L_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_SIMPLE_ID INTEGER;
BEGIN 
/* 
V.2 
НАМАЛЯВА КОЛИЧЕСТВОТО ЗА ДАДЕН ЕЛЕМЕНТ НА ДОСТАВКА ПРИ РЕДАКЦИЯТА, КАТО НАМАЛЯВА 
СЪОТВЕТНИТЕ КОЛИЧЕСТВА И СУМИ. АКО ЕЛЕМЕНТА РАБОТИ СЪС СЕРИЕН НОМЕР, ЩЕ СЕ ИЗТРИВАТ 
ЗАПИСИ ПО СЪОТВЕТНИТЕ ТАБЛИЦИ 
ВХ ПАРАМЕТРИ: 
P_EL_ID - ЕЛЕМЕНТ НА ПАРТИДАТА. 
P_KOL - КОЛИЧЕСТВОТО, СКОЕТО СЕ НАМАЛЯВА, 
P_IN_EL_ID ЗА КОЙ ЕЛЕМЕНТ НА ДОСТАВКАТА, 
P_OPR_ID РЕДАКТИРАНАТА ОПЕРАЦИЯ 
P_FLAG_SN BOOLEAN - ДАЛИ ПРОДУКТА Е СЪС СЕРИЕН НОМЕР 
*/ 
    --С КАКВА СУМА ЩЕ СЕ НАМАЛЯВАТ СУМИТЕ ОТ СЪОТВЕТНИТЕ ЗАПИСИ
    --И КОЙ Е ПРОДУКТА - ТОЙ СЕ ПОЛЗВА ЗА NAL
/*    SELECT
        ROUND5(IN_EL.SUMA / IN_EL.KOL), 
        IN_EL.SIMPLE_ID 
    FROM     
        IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
    WHERE 
        IN_EL.ID = :P_IN_EL_ID 
    INTO 
        :L_SUMA,:L_SIMPLE_ID; 
 
    --НАМЕРИЛ СЪМ ЕДИНИЧНАТА ЦЕНА - СЕГА ДА НАМЕРЯ СУМАТА НА МАХАНОТО КОЛИЧЕСТВО
 
    L_SUMA = ROUNDD(L_SUMA * P_KOL); 
 
    UPDATE IN_EL SET 
    IN_EL.SUMA = ROUNDD(IN_EL.SUMA - :L_SUMA), 
    IN_EL.KOL  = ROUND5(IN_EL.KOL - :P_KOL) 
    WHERE IN_EL.ID = :P_IN_EL_ID; 
 
    UPDATE NAL SET 
    NAL.SUMA = ROUNDD(NAL.SUMA - :L_SUMA), 
    NAL.SUMA_FR = ROUNDD(NAL.SUMA_FR - :L_SUMA), 
    NAL.KOL_NAL = ROUND5(NAL.KOL_NAL - :P_KOL) 
    WHERE NAL.SIMPLE_ID = :L_SIMPLE_ID 
    AND NAL.SKLAD_ID = (SELECT OPR.SKLAD_ID FROM OPR WHERE OPR.ID = :P_OPR_ID); 
 
    UPDATE OPR SET 
    OPR.SUMA = ROUNDD(OPR.SUMA - :L_SUMA) 
    WHERE OPR.ID = :P_OPR_ID; 
 
    UPDATE OPR_SUMI SET 
    OPR_SUMI.SUMA_FR = ROUNDD(OPR_SUMI.SUMA_FR - :L_SUMA), 
    OPR_SUMI.SUMA_SR = ROUNDD(OPR_SUMI.SUMA_SR - :L_SUMA) 
    WHERE OPR_SUMI.OPR_ID = :P_OPR_ID; 
 
    IF (P_FLAG_SN = '1') THEN BEGIN 
        DELETE FROM SERIAL_NUM WHERE SERIAL_NUM.PARTIDA_EL_ID = :P_EL_ID; 
        DELETE FROM PARTIDA_EL_NODE WHERE PARTIDA_EL_NODE.ELEMENT_ID = :P_EL_ID; 
        DELETE FROM PARTIDA_NAL WHERE PARTIDA_NAL.ELEMENT_ID = :P_EL_ID; 
        DELETE FROM PARTIDA_EL WHERE PARTIDA_EL.ID = :P_EL_ID; 
    END 
    ELSE BEGIN 
        UPDATE PARTIDA_EL_NODE SET 
        PARTIDA_EL_NODE.SUMA = ROUNDD(PARTIDA_EL_NODE.SUMA - :L_SUMA), 
        PARTIDA_EL_NODE.KOL  = ROUND5(PARTIDA_EL_NODE.KOL - :P_KOL) 
        WHERE PARTIDA_EL_NODE.IN_EL_ID = :P_IN_EL_ID; 
 
        UPDATE PARTIDA_NAL SET 
        PARTIDA_NAL.KOL_NAL = ROUND5(PARTIDA_NAL.KOL_NAL - :P_KOL), 
        PARTIDA_NAL.SUMA = ROUNDD(PARTIDA_NAL.SUMA - :L_SUMA) 
        WHERE PARTIDA_NAL.IN_EL_ID = :P_IN_EL_ID; 
    END */
END^


ALTER PROCEDURE EDIT_IN_EL_KOL2 (
    P_IN_EL_ID INTEGER,
    P_NEW_KOL DOUBLE PRECISION)
AS
DECLARE VARIABLE L_IN_EL2_KOL DOUBLE PRECISION;
BEGIN
    SELECT
        IN_EL2.KOL
    FROM
        IN_EL2
    WHERE
        IN_EL2.IN_EL_ID = :P_IN_EL_ID
    INTO
        :L_IN_EL2_KOL;

    L_IN_EL2_KOL = ROUND5 (P_NEW_KOL - L_IN_EL2_KOL);

    UPDATE IN_EL2 SET
    KOL = :P_NEW_KOL
    WHERE IN_EL_ID = :P_IN_EL_ID;

    UPDATE NAL2 SET
    NAL2.KOL = ROUND5(NAL2.KOL + :L_IN_EL2_KOL)
    WHERE NAL2.NAL_ID = (SELECT NAL.ID FROM NAL INNER JOIN IN_EL ON (IN_EL.ID = :P_IN_EL_ID
    AND  IN_EL.SIMPLE_ID = NAL.SIMPLE_ID)
    INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID AND OPR.SKLAD_ID = NAL.SKLAD_ID);
END^


ALTER PROCEDURE EDIT_KLI (
    P_KLI_ID INTEGER,
    P_KLI_NAME VARCHAR(100),
    P_KLI_CODE VARCHAR(15),
    P_KLI_TEL VARCHAR(30),
    P_KLI_ADRES VARCHAR(50),
    P_KLI_COMMENT VARCHAR(30),
    P_FIRMA_NAME VARCHAR(100),
    P_FIRMA_MOL VARCHAR(30),
    P_FIRMA_ADRES VARCHAR(50),
    P_FIRMA_BULSTAT VARCHAR(13),
    P_FIRMA_IDNOMDDS VARCHAR(15),
    P_T INTEGER,
    P_FIRMA_PLACE_ID INTEGER = null,
    P_KLI_PLACE_ID INTEGER = null)
RETURNS (
    R_KLI_ID INTEGER,
    R_FIRMA_ID INTEGER)
AS
declare variable L_REG_DDS integer; 
begin 
  /* ZA ATONPOS */ 
 
  R_KLI_ID = :P_KLI_ID; 
  R_FIRMA_ID = null; 
 
  IF (P_T = 1) THEN BEGIN 
    UPDATE KLI SET 
      KLI.NAME = :P_KLI_NAME, 
      KLI.CODE = :P_KLI_CODE, 
      KLI.TEL = :P_KLI_TEL, 
      KLI.ADRES = :P_KLI_ADRES, 
      KLI."COMMENT" = :P_KLI_COMMENT, 
      KLI.PLACE_ID = :P_KLI_PLACE_ID 
    WHERE 
      KLI.ID = :R_KLI_ID; 
  END 
  ELSE BEGIN 
    R_KLI_ID = GEN_ID(GEN_KLI_ID, 1); 
    INSERT INTO KLI (ID, CODE, NAME, ADRES, TEL, "COMMENT", KLIENT, PLACE_ID) 
    VALUES (:R_KLI_ID, :P_KLI_CODE, :P_KLI_NAME, :P_KLI_ADRES, :P_KLI_TEL, :P_KLI_COMMENT, 1, :P_KLI_PLACE_ID); 
  END 
 
  IF (COALESCE(:P_FIRMA_NAME,'')<>'' OR COALESCE(P_FIRMA_BULSTAT,'')<>'' OR COALESCE(P_FIRMA_IDNOMDDS,'')<>'') THEN BEGIN 
    SELECT 
      KLI.FIRMA_ID 
    FROM 
      KLI 
    WHERE 
      KLI.ID = :R_KLI_ID 
    INTO :R_FIRMA_ID; 
 
    IF (R_FIRMA_ID IS NULL) THEN BEGIN 
      R_FIRMA_ID = GEN_ID(GEN_FIRMI_ID, 1); 
 
      L_REG_DDS = 0; 
      if (P_FIRMA_IDNOMDDS IS NOT NULL) then 
        L_REG_DDS = 1; 
 
      INSERT INTO FIRMI(ID, NAME_FAK, MOL, ADRES, BULSTAT, IDNOMDDS, PLACE_ID, REG_DDS) 
      VALUES(:R_FIRMA_ID, :P_FIRMA_NAME, :P_FIRMA_MOL, :P_FIRMA_ADRES, :P_FIRMA_BULSTAT, :P_FIRMA_IDNOMDDS, :P_FIRMA_PLACE_ID, :L_REG_DDS); 
      UPDATE KLI SET FIRMA_ID = :R_FIRMA_ID WHERE ID = :R_KLI_ID; 
    END 
    ELSE BEGIN 
      UPDATE FIRMI SET 
        NAME_FAK = :P_FIRMA_NAME, 
        MOL = :P_FIRMA_MOL, 
        ADRES = :P_FIRMA_ADRES, 
        BULSTAT = :P_FIRMA_BULSTAT, 
        IDNOMDDS = :P_FIRMA_IDNOMDDS, 
        PLACE_ID = :P_FIRMA_PLACE_ID, 
        REG_DDS = :L_REG_DDS 
     WHERE ID = :R_FIRMA_ID; 
    END 
 
    UPDATE OR INSERT INTO KLI_FIRMA_NODE (KLI_ID, FIRMA_ID, INVOICE, INVOICE_ENGL) 
    VALUES (:R_KLI_ID, :R_FIRMA_ID, 0, 0) 
    MATCHING (KLI_ID, FIRMA_ID); 
  END 
end^


ALTER PROCEDURE EDIT_OTC_AFTER_OPR_ANUL (
    P_OPR_ID INTEGER,
    P_USER_ID INTEGER,
    P_IP INTEGER,
    P_OPR_TIP SMALLINT,
    P_OBOB_PARI_TMP INTEGER)
AS
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_SKLAD_ID INTEGER; 
DECLARE VARIABLE L_USER_ID INTEGER; 
DECLARE VARIABLE L_ADD_OPR_ID INTEGER; 
DECLARE VARIABLE L_OTC_OPR_ID INTEGER; 
DECLARE VARIABLE L_DATETIME TIMESTAMP; 
BEGIN 
/*V.2 
РЕДАКТИРА СУМИТЕ ПО ОТЧЕТА, АКО НЯКОЯ ПРОДАЖБА ИЛИ ДОСТАВКА, ВЕЧЕ ОТЧЕТЕНА 
БЪДЕ АНУЛИРАНА 
1. НАМИРАМ ОТЧЕТА, КОЙТО Е СЛЕД АНУЛИРАНАТА ОПЕРАЦИЯ 
2. СЛЕД ТОВА ПРЕХВЪРЛЯМ СУМИТЕ ЗА ТОЗИ ОТЧЕТ В АРХИВНА ТАБЛИЦА 
3. НАМИРАМ ОСНОВНИТЕ ДАННИ ЗА ПРОМЯНА - СКЛАД, ОПЕРАТОР И СУМА 
4. НАМАЛЯВАМ СЪОТВЕТНИТЕ СУМИ ЗА СКЛАДА, ЗА ОПЕРАТОРА И НА ПРОД/ДОСТ СЪС СУМАТА 
НА ОПЕРАЦИЯТА 
5. АКО ЗА ДАДЕНИЯ ОТЧЕТ И ОПЕРАТОР ИМА ОПЕРАЦИЯ КАСА ТО ТОЙ СЕ РЕДАКТИРА 
*/ 
 
    /*1.НАМИРАМ НА КОЙ ОТЧЕТ СУМИТЕ ТРЯБВА ДА СЕ РЕДАКТИРАТ И 2. ГИ ПРЕХВЪРЛЯМ 
    В АРХИВНАТА ТАБЛИЦА*/ 
    EXECUTE PROCEDURE OTC_ARHIVE(P_OPR_ID) 
    RETURNING_VALUES :L_OTC_OPR_ID; 
 
    /*3.НАМИРАМ ДАНИТЕ, ПО КОИТО ЩЕ ПРОМЕНЯМ СУМИТЕ В ОТЧЕТА - ЗА КОЙ ОПЕРАТОР, 
    СКЛАД И С КАКВА СУМА ЩЕ СЕ НАМАЛЯТ - ТУК СЕ МАХА ЦЯЛАТА СУМА ЗАЩОТО 
    ОПЕРАЦИЯТА Е АНУЛИРАНЕ */ 
 
    SELECT 
        OPR.SUMA, 
        OPR.SKLAD_ID, 
        OPR.USER_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :L_SUMA, :L_SKLAD_ID, :L_USER_ID; 
 
    /*4.НАМАЛЯВАМЕ СУМИТЕ В ОТЧЕТА*/ 
 
    EXECUTE PROCEDURE DEC_OTC_SUMI(L_SUMA,L_SKLAD_ID,L_USER_ID,L_OTC_OPR_ID,P_OPR_TIP); 
 
    /*5.АКО ЗА ДАДЕНИЯ ОТЧЕТ Е ИМАЛО ОПЕРАЦИЯ КАСА, ТЯ ТРЯБВА ДА СЕ ПРОМЕНИ. 
    ЗА ЦЕЛТА ЩЕ НАМЕРЯ РЕДА В КАСАТА ЗА ТОЗИ ОПЕРАТОР ЗА ТОЗИ ОТЧЕТ ПО ТАБЛИЦА 
    OTC_PARI_NODE.*/ 
 
    --IF (P_OBOB_PARI_TMP = 1) THEN BEGIN 
    --  /* РАБОТИ С ОБОБЩЕНА КАСА */ 
    --  EXECUTE PROCEDURE DEC_PARI_OTC_EDIT(P_OPR_ID,P_USER_ID,P_IP,L_SUMA); 
    --  /*СЛЕД НАМАЛЯВАНЕТО НА ПАРИТЕ ИЗТРИВАМ ВРЪЗКАТА С ПАРИ АКО ИМА ТАКАВА*/ 
    --  DELETE FROM PARI_SKLOPR_NODE WHERE PARI_SKLOPR_NODE.OPR_ID = :P_OPR_ID; 
    --END 
    --ELSE 
    --BEGIN 
    --  /* РАБОТИ С НЕОБОБЩЕНА КАСА */ 
    --  DELETE FROM PARI WHERE PARI.OPR_ID = :P_OPR_ID; 
    --END 
END^


ALTER PROCEDURE EDIT_OTC_AFTER_OPR_EDIT (
    P_OPR_ID INTEGER,
    P_OPR_TIP SMALLINT,
    P_OLD_SKLAD INTEGER,
    P_NEW_SKLAD INTEGER,
    P_OLD_USER INTEGER,
    P_NEW_USER INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION,
    P_IP INTEGER,
    P_EDITING_USER INTEGER,
    P_FLAG_TOTAL INTEGER,
    P_NEW_KASA INTEGER,
    P_OLD_KASA INTEGER,
    P_FLAG_SKLOPR SMALLINT)
AS
DECLARE VARIABLE L_OTC_ID INTEGER; 
BEGIN 
    /*V.2 
    СЛЕД КОРЕКЦИЯ НА ОПЕРАЦИЯ, ВЛЯЗЛА В ОТЧЕТ НАМИРА И КОРИГИРА СЪОТВЕТНИТЕ 
    СУМИ В ОТЧЕТА, АКО ИМА РАЗЛИКА В СУМАТА, СКЛАДА ИЛИ ПОТРЕБИТЕЛЯ ПРЕДИ И 
    СЛЕД РЕДАКЦИЯТА НА ОПЕРАЦИЯТА 
    P_FLAG_TOTAL - AKO E 1, С РАЛИКАТА ОТ ДВЕТЕ СУМИ, ЩЕ ПРОМЕНЯ СУМАТА ЗА ОБЩО ПЛАТЕНИ ДОСТАВКИ/ПРОДАЖБИ В БРОЙ*/ 
 
    /*ПРЕХВЪРЛЯМ ДАННИТЕ ОТ СУМИТЕ В ОТЧЕТА КЪМ АРХИВНАТА ТАБЛИЦА, И ВРЪЩАМ 
    ID ОПЕРАЦИЯТА, КОЯТО Е НА ОТЧЕТА*/ 
    EXECUTE PROCEDURE OTC_ARHIVE(P_OPR_ID) 
    RETURNING_VALUES :L_OTC_ID; 
 
    IF (P_OPR_TIP = 1) THEN BEGIN 
        EXECUTE PROCEDURE EDIT_OTC_SUMA_DOST(L_OTC_ID,P_OLD_SUMA,P_NEW_SUMA); 
 
        EXECUTE PROCEDURE EDIT_OTC_SUMA_SKLAD_DOST(L_OTC_ID,P_OLD_SKLAD,P_NEW_SKLAD, 
                          P_OLD_SUMA,P_NEW_SUMA); 
 
        EXECUTE PROCEDURE EDIT_OTC_SUMA_USER_DOST(L_OTC_ID,P_OLD_USER,P_NEW_USER, 
                          P_OLD_SUMA,P_NEW_SUMA,P_IP,P_EDITING_USER,P_OPR_ID,P_OLD_KASA, 
                          P_NEW_KASA,P_FLAG_SKLOPR); 
 
        IF (P_FLAG_TOTAL = 1) THEN/*ЩЕ СЕ ПРОМЕНЯ СУМАТА НА ОБЩО ПОЛУЧЕНИ ЗА ДОСТАВКИ-ПЛАТЕНИ ВЕДНАГА И ПЛАЩАНИЯ*/ 
            EXECUTE PROCEDURE EDIT_OTC_SUMA_TOTAL(L_OTC_ID,1,ROUNDD(P_NEW_SUMA - P_OLD_SUMA)); 
 
    END 
    ELSE IF (P_OPR_TIP = 2) THEN BEGIN 
        EXECUTE PROCEDURE EDIT_OTC_SUMA_PROD(L_OTC_ID,P_OLD_SUMA,P_NEW_SUMA); 
 
        EXECUTE PROCEDURE EDIT_OTC_SUMA_SKLAD_PROD(L_OTC_ID,P_OLD_SKLAD,P_NEW_SKLAD, 
                          P_OLD_SUMA,P_NEW_SUMA); 
 
        EXECUTE PROCEDURE EDIT_OTC_SUMA_USER_PROD(L_OTC_ID,P_OLD_USER,P_NEW_USER, 
                          P_OLD_SUMA,P_NEW_SUMA,P_IP,P_EDITING_USER,P_OPR_ID,P_OLD_KASA, 
                          P_NEW_KASA,P_FLAG_SKLOPR); 
 
        IF (P_FLAG_TOTAL = 1) THEN/*ЩЕ СЕ ПРОМЕНЯ СУМАТА НА ОБЩО ПОЛУЧЕНИ ЗА ПРОДАЖБИ-ПЛАТЕНИ ВЕДНАГА И ПЛАЩАНИЯ*/ 
            EXECUTE PROCEDURE EDIT_OTC_SUMA_TOTAL(L_OTC_ID,2,ROUNDD(P_NEW_SUMA - P_OLD_SUMA)); 
    END 
END^


ALTER PROCEDURE EDIT_OTC_AFTER_OPR_FAK_IN_ANUL (
    P_OPR_ID INTEGER,
    P_USER_ID INTEGER,
    P_IP INTEGER,
    P_OBOB_PARI_TMP INTEGER)
AS
DECLARE VARIABLE L_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_ADD_OPR_ID INTEGER;
DECLARE VARIABLE L_OTC_OPR_ID INTEGER;
DECLARE VARIABLE L_DATETIME TIMESTAMP;
BEGIN
    EXECUTE PROCEDURE OTC_ARHIVE(P_OPR_ID)
    RETURNING_VALUES :L_OTC_OPR_ID;
    SELECT
        PARI_SKLOPR_NODE.SUMA
    FROM    
        PARI_SKLOPR_NODE
    WHERE
        PARI_SKLOPR_NODE.OPR_ID = :P_OPR_ID
    INTO
        :L_SUMA;

    UPDATE OTC_EL SET
    OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - :L_SUMA)
    WHERE OTC_EL.TIP_SUMA = 2
    AND OTC_EL.OPR_ID = :L_OTC_OPR_ID;
    
    /*НАМАЛЯВАМ СУМАТА ОТ ПРОДАЖБИ ЗА ОПЕРАТОРА ИЗВЪРШИЛ ДОСТАВКАТА*/
    UPDATE OTC_EL SET
    OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - :L_SUMA)
    WHERE OTC_EL.TIP_SUMA = 4
    AND OTC_EL.OPR_ID = :L_OTC_OPR_ID
    AND OTC_EL.SUMA_ID = 0;

    /*НАМАЛЯВАМ СУМАТА ОТ ДОСТАВКИ ЗА СКЛАДА, КЪМ КОЙТО Е ИЗВЪРШЕНА ДОСТАВКАТА*/
    UPDATE OTC_EL SET
    OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - :L_SUMA)
    WHERE OTC_EL.TIP_SUMA = 6
    AND OTC_EL.OPR_ID = :L_OTC_OPR_ID
    AND OTC_EL.SUMA_ID = 0;

    IF (P_OBOB_PARI_TMP = 1) THEN BEGIN
        /* РАБОТИ С ОБОБЩЕНА КАСА */
        EXECUTE PROCEDURE DEC_PARI_OTC_EDIT(P_OPR_ID,P_USER_ID,P_IP,L_SUMA);
        /*СЛЕД НАМАЛЯВАНЕТО НА ПАРИТЕ ИЗТРИВАМ ВРЪЗКАТА С ПАРИ АКО ИМА ТАКАВА*/
        DELETE FROM PARI_SKLOPR_NODE WHERE PARI_SKLOPR_NODE.OPR_ID = :P_OPR_ID;
    END
    ELSE
    BEGIN
        /* РАБОТИ С НЕОБОБЩЕНА КАСА */
        DELETE FROM PARI WHERE PARI.OPR_ID = :P_OPR_ID;
    END
END^


ALTER PROCEDURE EDIT_OTC_AFTER_PAY_ANUL (
    P_OPR_ID INTEGER,
    P_USER_ID INTEGER,
    P_IP INTEGER,
    P_OTC_TIP SMALLINT)
AS
declare variable L_SUMA double precision; 
declare variable L_USER_ID integer; 
declare variable L_OTC_OPR_ID integer; 
declare variable L_OBOB_KASA integer; 
BEGIN 
/*V.2 
РЕДАКТИРА СУМИТЕ ПО ОТЧЕТА, АКО НЯКОЕ ПЛАЩАНЕ, ВЕЧЕ ОТЧЕТЕНО 
БЪДЕ АНУЛИРАНО 
1. НАМИРАМ ОТЧЕТА, КОЙТО Е СЛЕД АНУЛИРАНАТА ОПЕРАЦИЯ 
2. СЛЕД ТОВА ПРЕХВЪРЛЯМ СУМИТЕ ЗА ТОЗИ ОТЧЕТ В АРХИВНА ТАБЛИЦА 
3. НАМИРАМ ОСНОВНИТЕ ДАННИ ЗА ПРОМЯНА - ОПЕРАТОР И СУМА 
4. НАМАЛЯВАМ СЪОТВЕТНИТЕ СУМИ ЗА ОПЕРАТОРА 
5. АКО ЗА ДАДЕНИЯ ОТЧЕТ И ОПЕРАТОР ИМА ОПЕРАЦИЯ КАСА ТО ТОЙ СЕ РЕДАКТИРА 
*/ 
    /*1.НАМИРАМ НА КОЙ ОТЧЕТ СУМИТЕ ТРЯБВА ДА СЕ РЕДАКТИРАТ И 2. ГИ ПРЕХВЪРЛЯМ 
    В АРХИВНАТА ТАБЛИЦА*/ 
    EXECUTE PROCEDURE OTC_ARHIVE(P_OPR_ID) 
    RETURNING_VALUES :L_OTC_OPR_ID; 
 
    /*3.НАМИРАМ ДАНИТЕ, ПО КОИТО ЩЕ ПРОМЕНЯМ СУМИТЕ В ОТЧЕТА - ЗА КОЙ ОПЕРАТОР, 
    И С КАКВА СУМА ЩЕ СЕ НАМАЛЯТ - ТУК СЕ МАХА ЦЯЛАТА СУМА ЗАЩОТО 
    ОПЕРАЦИЯТА Е АНУЛИРАНЕ */ 
 
    SELECT 
        OPR.SUMA, 
        OPR.USER_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :L_SUMA, :L_USER_ID; 
 
 
    /* ПРИ НУЛИРАНЕ НА ОТЧЕТА, КАСАТА ОБОБЩАВАЛА ЛИ СЕ ИЛИ НЕ */ 
    /* 0 - КАСАТА СЕ Е ОБОБЩАВАЛА */ 
    /* 1 - КАСАТА НЕ СЕ Е ОБОБЩАВАЛА */ 
    SELECT 
      OTC.OTC_KASA 
    FROM 
      OTC 
    WHERE 
      OTC.OPR_ID = :L_OTC_OPR_ID 
    INTO 
      :L_OBOB_KASA; 
 
    /*4.НАМАЛЯВАМЕ СЪОТВЕТНАТА СУМА В ОТЧЕТА*/ 
    UPDATE OTC_EL SET 
    OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - :L_SUMA) 
    WHERE OTC_EL.OPR_ID = :L_OTC_OPR_ID 
    AND OTC_EL.TIP_SUMA = :P_OTC_TIP; 
 
    --IF (L_OBOB_KASA =  0) THEN BEGIN 
    --  /*АКО ТAЗИ ОПЕРАЦИЯ ИМА ОПЕРАЦИЯ КАСА Е ПРЕМАХВАМ*/ 
    --  EXECUTE PROCEDURE DEC_PARI_OTC_EDIT(P_OPR_ID,P_USER_ID,P_IP,L_SUMA); 
    --  /*СЛЕД НАМАЛЯВАНЕТО НА ПАРИТЕ ИЗТРИВАМ ВРЪЗКАТА С ПАРИ АКО ИМА ТАКАВА*/ 
    --  DELETE FROM PARI_SKLOPR_NODE WHERE PARI_SKLOPR_NODE.OPR_ID = :P_OPR_ID; 
    --END 
    /*ELSE BEGIN 
      DELETE FROM PARI WHERE PARI.OPR_ID = :P_OPR_ID; 
    END*/ 
END^


ALTER PROCEDURE EDIT_OTC_AFTER_PAY_EDIT (
    P_OPR_ID INTEGER,
    P_USER_EDIT INTEGER,
    P_IP INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION,
    P_OTC_TIP_SUMA SMALLINT)
AS
DECLARE VARIABLE L_OTC_ID INTEGER;
DECLARE VARIABLE L_OBOB_KASA INTEGER;
BEGIN
    /*ЗАПАЗВАМ СТАРИТЕ СУМИ НА ОТЧЕТА И ВРЪЩАМ  ID НА ОПЕРАЦИЯТА МУ*/
    EXECUTE PROCEDURE OTC_ARHIVE(P_OPR_ID)
    RETURNING_VALUES :L_OTC_ID;
    
    /* ПРИ НУЛИРАНЕ НА ОТЧЕТА, КАСАТА ОБОБЩАВАЛА ЛИ СЕ ИЛИ НЕ */
    /* 0 - КАСАТА СЕ Е ОБОБЩАВАЛА */
    /* 1 - КАСАТА НЕ СЕ Е ОБОБЩАВАЛА */
    SELECT
      OTC.OTC_KASA
    FROM
      OTC
    WHERE
      OTC.OPR_ID = :L_OTC_ID
    INTO
      :L_OBOB_KASA;

    /*ПРОМЕНЯМ СЪОТВЕТНАТА СУМА В СУМИТЕ ЗА ОТЧЕТА*/
    UPDATE OTC_EL SET
    OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA  + ROUNDD(:P_NEW_SUMA - :P_OLD_SUMA))
    WHERE OTC_EL.OPR_ID = :L_OTC_ID AND
    OTC_EL.TIP_SUMA = :P_OTC_TIP_SUMA;
    
    if (L_OBOB_KASA = 0) then begin
      /*АКО ИМА ГЕНЕРИРАНА ОПЕРАЦИЯ КАСА ЗА ТОВА ПЛАЩАНЕ ЩЕ СЕ ПРОМЕНИ*/
      IF (P_NEW_SUMA > P_OLD_SUMA) THEN BEGIN
          EXECUTE PROCEDURE INC_PARI_OTC_EDIT(P_OPR_ID,P_USER_EDIT,P_IP,ROUNDD(P_NEW_SUMA - P_OLD_SUMA));
      END
      ELSE IF (P_NEW_SUMA < P_OLD_SUMA) THEN BEGIN
          EXECUTE PROCEDURE DEC_PARI_OTC_EDIT(P_OPR_ID,P_USER_EDIT,P_IP,ROUNDD(P_OLD_SUMA - P_NEW_SUMA));
      END
    END
    ELSE BEGIN
      UPDATE PARI 
      SET PARI.SUMA = :P_NEW_SUMA
      WHERE PARI.OPR_ID = :P_OPR_ID;
    END
END^


ALTER PROCEDURE EDIT_OTC_SUMA_DOST (
    P_OTC_ID INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION)
AS
BEGIN
    IF (P_NEW_SUMA > P_OLD_SUMA ) THEN BEGIN
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + ROUNDD(:P_NEW_SUMA - :P_OLD_SUMA))
        WHERE OTC_EL.OPR_ID = :P_OTC_ID
        AND OTC_EL.TIP_SUMA = 2;
    END
    ELSE IF(P_NEW_SUMA < P_OLD_SUMA) THEN BEGIN
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - ROUNDD(:P_OLD_SUMA - :P_NEW_SUMA))
        WHERE OTC_EL.OPR_ID = :P_OTC_ID
        AND OTC_EL.TIP_SUMA = 2;
    END
END^


ALTER PROCEDURE EDIT_OTC_SUMA_PROD (
    P_OTC_ID INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION)
AS
BEGIN
    IF (P_NEW_SUMA > P_OLD_SUMA ) THEN BEGIN
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + ROUNDD(:P_NEW_SUMA - :P_OLD_SUMA))
        WHERE OTC_EL.OPR_ID = :P_OTC_ID
        AND OTC_EL.TIP_SUMA = 1;
    END
    ELSE IF(P_NEW_SUMA < P_OLD_SUMA) THEN BEGIN
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - ROUNDD(:P_OLD_SUMA - :P_NEW_SUMA))
        WHERE OTC_EL.OPR_ID = :P_OTC_ID
        AND OTC_EL.TIP_SUMA = 1;
    END
END^


ALTER PROCEDURE EDIT_OTC_SUMA_SKLAD_DOST (
    P_OTC_ID INTEGER,
    P_OLD_SKLAD INTEGER,
    P_NEW_SKLAD INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION)
AS
DECLARE VARIABLE L_OTC_EL_ID INTEGER;
BEGIN
/*V.2*/
    IF (P_OLD_SKLAD <> P_NEW_SKLAD) THEN BEGIN
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - :P_OLD_SUMA)
        WHERE OTC_EL.OPR_ID = :P_OTC_ID
        AND OTC_EL.TIP_SUMA = 6
        AND OTC_EL.SUMA_ID = :P_OLD_SKLAD;

        L_OTC_EL_ID = NULL;

        SELECT
            OTC_EL.ID
        FROM
            OTC_EL
        WHERE
            OTC_EL.OPR_ID = :P_OTC_ID
            AND OTC_EL.TIP_SUMA = 6
            AND OTC_EL.SUMA_ID = :P_NEW_SKLAD
        INTO
            :L_OTC_EL_ID;

        IF (L_OTC_EL_ID IS NOT NULL) THEN
            UPDATE OTC_EL SET
            OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + :P_NEW_SUMA)
            WHERE OTC_EL.OPR_ID = :P_OTC_ID
            AND OTC_EL.TIP_SUMA = 6
            AND OTC_EL.SUMA_ID = :P_NEW_SKLAD;
        ELSE
            INSERT INTO OTC_EL (OPR_ID,TIP_SUMA,SUMA_ID,SUMA)
            VALUES(:P_OTC_ID,6,:P_NEW_SKLAD,:P_NEW_SUMA);
    END
    ELSE BEGIN
        IF (P_NEW_SUMA > P_OLD_SUMA ) THEN BEGIN
            UPDATE OTC_EL SET
            OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + ROUNDD(:P_NEW_SUMA - :P_OLD_SUMA))
            WHERE OTC_EL.OPR_ID = :P_OTC_ID
            AND OTC_EL.TIP_SUMA = 6
            AND OTC_EL.SUMA_ID = :P_OLD_SKLAD;
        END
        ELSE IF(P_NEW_SUMA < P_OLD_SUMA) THEN BEGIN
            UPDATE OTC_EL SET
            OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - ROUNDD(:P_OLD_SUMA - :P_NEW_SUMA))
            WHERE OTC_EL.OPR_ID = :P_OTC_ID
            AND OTC_EL.TIP_SUMA = 6
            AND OTC_EL.SUMA_ID = :P_OLD_SKLAD;
        END
    END
END^


ALTER PROCEDURE EDIT_OTC_SUMA_SKLAD_PROD (
    P_OTC_ID INTEGER,
    P_OLD_SKLAD INTEGER,
    P_NEW_SKLAD INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION)
AS
DECLARE VARIABLE L_OTC_EL_ID INTEGER;
BEGIN
/*V.2*/
    IF (P_OLD_SKLAD <> P_NEW_SKLAD) THEN BEGIN
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - :P_OLD_SUMA)
        WHERE OTC_EL.OPR_ID = :P_OTC_ID
        AND OTC_EL.TIP_SUMA = 5
        AND OTC_EL.SUMA_ID = :P_OLD_SKLAD;

        L_OTC_EL_ID = NULL;
        SELECT
            OTC_EL.ID
        FROM
            OTC_EL
        WHERE
            OTC_EL.TIP_SUMA = 5
            AND OTC_EL.OPR_ID = :P_OTC_ID
            AND OTC_EL.SUMA_ID = :P_NEW_SKLAD
        INTO 
            :L_OTC_EL_ID;

        IF (L_OTC_EL_ID IS NOT NULL) THEN
            UPDATE OTC_EL SET
            OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + :P_NEW_SUMA)
            WHERE OTC_EL.OPR_ID = :P_OTC_ID
            AND OTC_EL.TIP_SUMA = 5
            AND OTC_EL.SUMA_ID = :P_NEW_SKLAD;
        ELSE
            INSERT INTO OTC_EL (OPR_ID,TIP_SUMA,SUMA_ID,SUMA)
            VALUES(:P_OTC_ID,5,:P_NEW_SKLAD,:P_NEW_SUMA);
    END
    ELSE BEGIN
        IF (P_NEW_SUMA > P_OLD_SUMA ) THEN BEGIN
            UPDATE OTC_EL SET
            OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + ROUNDD(:P_NEW_SUMA - :P_OLD_SUMA))
            WHERE OTC_EL.OPR_ID = :P_OTC_ID
            AND OTC_EL.TIP_SUMA = 5
            AND OTC_EL.SUMA_ID = :P_OLD_SKLAD;
        END
        ELSE IF(P_NEW_SUMA < P_OLD_SUMA) THEN BEGIN
            UPDATE OTC_EL SET
            OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - ROUNDD(:P_OLD_SUMA - :P_NEW_SUMA))
            WHERE OTC_EL.OPR_ID = :P_OTC_ID
            AND OTC_EL.TIP_SUMA = 5
            AND OTC_EL.SUMA_ID = :P_OLD_SKLAD;
        END
    END
END^


ALTER PROCEDURE EDIT_OTC_SUMA_TOTAL (
    P_OPR_ID INTEGER,
    P_TIP SMALLINT,
    P_SUMA DOUBLE PRECISION)
AS
BEGIN
/*V.1  "УВЕЛИЧАВА" СУМИ ЗА ДАДЕН ОТЧЕТ, С ПОДАДЕНАТА СУМА.СУМАТА МОЖЕ ДА Е ОТРИЦАТЕЛНА-
ЗАВИСИ ОТ РАЗЛИКАТА М/У НОВАТА И СТАРАТА СУМА НА РЕДАКТИРАНАТА ОПЕРАЦИЯ*/
    IF (P_TIP = 1) THEN BEGIN
        /*ОБЩА СУМА ОТ ДОСТАВКИ*/
        UPDATE OTC_EL SET OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + :P_SUMA)
        WHERE OTC_EL.OPR_ID = :P_OPR_ID
        AND OTC_EL.TIP_SUMA = 10;
    END
    ELSE IF (P_TIP = 2) THEN BEGIN
        /*ОБЩА СУМА ОТ ПРОДАЖБИ*/
        UPDATE OTC_EL SET OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + :P_SUMA)
        WHERE OTC_EL.OPR_ID = :P_OPR_ID
        AND OTC_EL.TIP_SUMA = 9;
    END
END^


ALTER PROCEDURE EDIT_OTC_SUMA_USER_DOST (
    P_OTC_ID INTEGER,
    P_OLD_USER INTEGER,
    P_NEW_USER INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION,
    P_IP INTEGER,
    P_EDITING_USER INTEGER,
    P_OPR_ID INTEGER,
    P_OLD_KASA INTEGER,
    P_NEW_KASA INTEGER,
    P_FLAG_SKLOPR SMALLINT)
AS
DECLARE VARIABLE L_OTC_EL_ID INTEGER;
BEGIN
/*V.2*/
    IF ((P_OLD_USER <> P_NEW_USER) OR (P_OLD_KASA <> P_NEW_KASA)) THEN BEGIN
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - :P_OLD_SUMA)
        WHERE OTC_EL.OPR_ID = :P_OTC_ID
        AND OTC_EL.TIP_SUMA = 4
        AND OTC_EL.SUMA_ID = :P_OLD_USER;

        /*АКО ЗА ТОЗИ ОПЕРАТОР ИМА РЕД В КАСА СЕ НАМИРА И СЕ КОРИГИРА*/
        EXECUTE PROCEDURE DEC_PARI_OTC_EDIT(P_OPR_ID,P_EDITING_USER,P_IP,P_OLD_SUMA);
            
        IF (P_FLAG_SKLOPR = 1) THEN
            EXECUTE PROCEDURE EDIT_PARI_SKLOPR_NODE(P_OPR_ID,P_OTC_ID,1,P_OLD_USER,P_NEW_USER,P_NEW_KASA,
                              P_NEW_SUMA,P_IP,P_EDITING_USER);

        L_OTC_EL_ID = NULL;

        SELECT
            OTC_EL.ID
        FROM
            OTC_EL
        WHERE
            OTC_EL.OPR_ID = :P_OTC_ID
            AND OTC_EL.TIP_SUMA = 4
            AND OTC_EL.SUMA_ID = :P_NEW_USER
        INTO
            :L_OTC_EL_ID;

        IF (L_OTC_EL_ID IS NOT NULL) THEN
            UPDATE OTC_EL SET
            OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + :P_NEW_SUMA)
            WHERE OTC_EL.OPR_ID = :P_OTC_ID
            AND OTC_EL.TIP_SUMA = 4
            AND OTC_EL.SUMA_ID = :P_NEW_USER;
        ELSE
            INSERT INTO OTC_EL (OPR_ID,TIP_SUMA,SUMA_ID,SUMA)
            VALUES(:P_OTC_ID,4,:P_NEW_USER,:P_NEW_SUMA);

        /*АКО ЗА ТОЗИ ОПЕРАТОР ИМА РЕД В КАСА СЕ НАМИРА И СЕ КОРИГИРА*/
        EXECUTE PROCEDURE INC_PARI_OTC_EDIT(P_OPR_ID,P_EDITING_USER,P_IP,P_NEW_SUMA);
    END
    ELSE BEGIN
        IF (P_NEW_SUMA > P_OLD_SUMA ) THEN BEGIN
            UPDATE OTC_EL SET
            OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + ROUNDD(:P_NEW_SUMA - :P_OLD_SUMA))
            WHERE OTC_EL.OPR_ID = :P_OTC_ID
            AND OTC_EL.TIP_SUMA = 4
            AND OTC_EL.SUMA_ID = :P_OLD_USER;

            EXECUTE PROCEDURE INC_PARI_OTC_EDIT(P_OPR_ID,P_EDITING_USER,P_IP,ROUNDD(P_NEW_SUMA-P_OLD_SUMA));
        END
        ELSE IF(P_NEW_SUMA < P_OLD_SUMA) THEN BEGIN
            UPDATE OTC_EL SET
            OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - ROUNDD(:P_OLD_SUMA - :P_NEW_SUMA))
            WHERE OTC_EL.OPR_ID = :P_OTC_ID
            AND OTC_EL.TIP_SUMA = 4
            AND OTC_EL.SUMA_ID = :P_OLD_USER;

            EXECUTE PROCEDURE DEC_PARI_OTC_EDIT(P_OPR_ID,P_EDITING_USER,P_IP,ROUNDD(P_OLD_SUMA-P_NEW_SUMA));
        END

        UPDATE PARI_SKLOPR_NODE SET
        PARI_SKLOPR_NODE.SUMA = :P_NEW_SUMA
        WHERE PARI_SKLOPR_NODE.OPR_ID = :P_OPR_ID;
    END
END^


ALTER PROCEDURE EDIT_OTC_SUMA_USER_PROD (
    P_OTC_ID INTEGER,
    P_OLD_USER INTEGER,
    P_NEW_USER INTEGER,
    P_OLD_SUMA DOUBLE PRECISION,
    P_NEW_SUMA DOUBLE PRECISION,
    P_IP INTEGER,
    P_EDITING_USER INTEGER,
    P_OPR_ID INTEGER,
    P_OLD_KASA INTEGER,
    P_NEW_KASA INTEGER,
    P_FLAG_SKLOPR SMALLINT)
AS
DECLARE VARIABLE L_OTC_EL_ID INTEGER; 
BEGIN 
/*V.2*/ 
    IF ((P_OLD_USER <> P_NEW_USER) OR (P_OLD_KASA <> P_NEW_KASA))  THEN BEGIN 
        UPDATE OTC_EL SET 
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - :P_OLD_SUMA) 
        WHERE OTC_EL.OPR_ID = :P_OTC_ID 
        AND OTC_EL.TIP_SUMA = 3 
        AND OTC_EL.SUMA_ID = :P_OLD_USER; 
 
        /*АКО ЗА ТОЗИ ОПЕРАТОР ИМА РЕД В КАСА СЕ НАМИРА И СЕ КОРИГИРА*/ 
        --EXECUTE PROCEDURE DEC_PARI_OTC_EDIT(P_OPR_ID,P_EDITING_USER,P_IP,P_OLD_SUMA); 
        -- 
        --IF (P_FLAG_SKLOPR = 1) THEN 
        --    EXECUTE PROCEDURE EDIT_PARI_SKLOPR_NODE(P_OPR_ID,P_OTC_ID,2,P_OLD_USER,P_NEW_USER,P_NEW_KASA, 
        --                      P_NEW_SUMA,P_IP,P_EDITING_USER); 
 
        L_OTC_EL_ID = NULL; 
 
        SELECT 
            OTC_EL.ID 
        FROM 
            OTC_EL 
        WHERE 
            OTC_EL.OPR_ID = :P_OTC_ID 
            AND OTC_EL.TIP_SUMA = 3 
            AND OTC_EL.SUMA_ID = :P_NEW_USER 
        INTO 
            :L_OTC_EL_ID; 
 
        IF (L_OTC_EL_ID IS NOT NULL) THEN 
            UPDATE OTC_EL SET 
            OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + :P_NEW_SUMA) 
            WHERE OTC_EL.OPR_ID = :P_OTC_ID 
            AND OTC_EL.TIP_SUMA = 3 
            AND OTC_EL.SUMA_ID = :P_NEW_USER; 
        ELSE 
            INSERT INTO OTC_EL (OPR_ID,TIP_SUMA,SUMA_ID,SUMA) 
            VALUES(:P_OTC_ID,3,:P_NEW_USER,:P_NEW_SUMA); 
        /*АКО ЗА ТОЗИ ОПЕРАТОР ИМА РЕД В КАСА СЕ НАМИРА И СЕ КОРИГИРА*/ 
        --EXECUTE PROCEDURE INC_PARI_OTC_EDIT(P_OPR_ID,P_EDITING_USER,P_IP,P_NEW_SUMA); 
    END 
    ELSE BEGIN 
        IF (P_NEW_SUMA > P_OLD_SUMA ) THEN BEGIN 
            UPDATE OTC_EL SET 
            OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + ROUNDD(:P_NEW_SUMA - :P_OLD_SUMA)) 
            WHERE OTC_EL.OPR_ID = :P_OTC_ID 
            AND OTC_EL.TIP_SUMA = 3 
            AND OTC_EL.SUMA_ID = :P_OLD_USER; 
 
            --EXECUTE PROCEDURE INC_PARI_OTC_EDIT(P_OPR_ID,P_EDITING_USER,P_IP,ROUNDD(P_NEW_SUMA-P_OLD_SUMA)); 
        END 
        ELSE IF(P_NEW_SUMA < P_OLD_SUMA) THEN BEGIN 
            UPDATE OTC_EL SET 
            OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA - ROUNDD(:P_OLD_SUMA - :P_NEW_SUMA)) 
            WHERE OTC_EL.OPR_ID = :P_OTC_ID 
            AND OTC_EL.TIP_SUMA = 3 
            AND OTC_EL.SUMA_ID = :P_OLD_USER; 
 
            --EXECUTE PROCEDURE DEC_PARI_OTC_EDIT(P_OPR_ID,P_EDITING_USER,P_IP,ROUNDD(P_OLD_SUMA-P_NEW_SUMA)); 
        END 
 
        --UPDATE PARI_SKLOPR_NODE SET 
        --PARI_SKLOPR_NODE.SUMA = :P_NEW_SUMA 
        --WHERE PARI_SKLOPR_NODE.OPR_ID = :P_OPR_ID; 
    END 
END^


ALTER PROCEDURE EDIT_OUT_CENA (
    P_SUMA DOUBLE PRECISION,
    P_OUT_EL_ID INTEGER,
    P_OPR_ID INTEGER)
AS
DECLARE VARIABLE L_SUMA DOUBLE PRECISION;
BEGIN
/*
V.2
ИЗВИКАВА СЕ ПРИ РЕДАКЦИЯ НА ПРОДАЖБА, КОГАТО СЕ ПРОЕМНИ ПРОДАЖНАТА ЦЕНА НА
ПРОДУКТА

ВХ.ПАРАМЕТРИ
P_SUMA НОВАТА СУМА ЗА ПРОДИКТА - ПОЛУЧЕНА ОТ КОЛИЧЕСТВОТО МУ * НОВАТА ЦЕНА,
P_OUT_EL_ID - КОЙ Е ЕЛЕМЕНТА НА ПРОДАЖБА, КОЙТО СЕ РЕДАКТИРА
P_OPR_ID - КОЯ Е РЕДАКТИРАНТА ОПЕРАЦИЯ

РАБОТА:
1.НАМИРАМЕ СТАРАТА СУМА ЗА ТОЗИ ЕЛЕМЕНТ НА ПРОДАЖБА
2.ИЗВАЖДАМЕ НОВАТА СУМА ОТ СТАРАТА - ТАКА СЕ ПОЛУЧАВА РАЗЛИКАТА В СУМИТЕ
ОТ НОВАТА И СТАРАТА ПРОДАЖНА ЦЕНА
3.ПОЛУЧЕНАТА РАЗЛИКА СЕ СЪБИРА СЪС СУМИТЕ В OPR И OUT_EL (АКО НОВАТА СУМА Е < ОТ
СТАРАТА РЕАЛНО ЩЕ СЕ ИЗВАДИ СУМА ОТ СТАРАТА)
*/

    /* ИЗВЛИЧА ПРОДАЖНАТА СУМАТА ЗА ЕЛЕМЕНТА ОТ OUT_EL */

    SELECT
        OUT_EL.SUMA
    FROM
        OUT_EL
    WHERE
        OUT_EL.ID = :P_OUT_EL_ID
    INTO :L_SUMA;

    /*
    РАЗЛИКАТА ОТ ИЗВЛЕЧЕНАТА И ПОДАДЕНАТА СУМИ
    ТАЗИ РАЗЛИКА ЩЕ СЕ ОТРАЗИ В СУМАТА НА ТАБЛИЦА OPR
    */

    L_SUMA = ROUNDD(P_SUMA - L_SUMA);

    /* ОБНОВЯВА СУМАТА НА ЕЛЕМЕНТА НА ПРОДАЖБАТА В OUT_EL */

    UPDATE OUT_EL SET
    OUT_EL.SUMA = :P_SUMA
    WHERE OUT_EL.ID = :P_OUT_EL_ID;

    /* ОБНОВЯВА СУМАТА НА ПРОДАЖБАТА В OPR */

    UPDATE OPR SET
    OPR.SUMA = ROUNDD(OPR.SUMA + :L_SUMA)
    WHERE OPR.ID = :P_OPR_ID;
END^


ALTER PROCEDURE EDIT_OUT_DEC_KOL (
    P_OUT_EL INTEGER,
    P_KOL DOUBLE PRECISION,
    P_OPR_ID INTEGER,
    P_USLUGA CHAR(1),
    P_SKLAD_ID INTEGER,
    P_FLAG INTEGER,
    P_AUTO_IZL SMALLINT)
RETURNS (
    R_SUMA_UPDATE DOUBLE PRECISION)
AS
DECLARE VARIABLE L_NODE_ID INTEGER; /* СЪХРАНЯВАТ ИНФ ЗА ТЕКУЩИЯ ВЪЗЕЛ ОТ */
DECLARE VARIABLE L_IN_EL_ID INTEGER; /* PARTIDA_EL_NODE С КОЙТО СЕ РАБОТИ */
DECLARE VARIABLE L_EL_ID INTEGER;
DECLARE VARIABLE L_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_KOL_TEMP DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_TEMP DOUBLE PRECISION; /* KAKВА СУМА ЩЕ СЕ ДОБАВИ В ПАРТИДАТА */
DECLARE VARIABLE L_P_ID INTEGER;
DECLARE VARIABLE L_ORG_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_OST_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_SR_ALL DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_EL_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_SKLAD_ID INTEGER;
BEGIN 
 
/* V.6 
ГРИЖИ СЕ ЗА ПРОМЕНИТЕ НА КОЛИЧЕСТВАТА И СУМИТЕ В ПАРТИДИТЕ И СЪОТВЕТНИТЕ 
ЗАПИСИ В OUT,OPR,OUT_EL ПРИ РЕДАКЦИЯ НА ПРОДАЖБА, КОГАТО ЗА ДАДЕН ЕЛЕМЕНТ НА 
ПРОДАЖБА НАМАЛЯМЕ КОЛИЧЕСТВОТО МУ В ПРОДАЖБАТА 
 
ВХ.ПАРАМЕТРИ 
 
P_OUT_EL  ЕЛЕМЕНТА НА ПРОДАЖБА, КОЙТО Е РЕДАКТИРАН 
P_KOL  РАЗЛИКАТА В КОЛИЧЕСТВАТА, КОЯТО ТРЯБВА ДА СЕ РАЗПРЕДЕЛИ 
P_OPR_ID КОЯ Е ОПЕРАЦИЯТА, КОЯТО СЕ РЕДАКТИРА 
 
РАБОТА 
 
1.ПРОВЕРЯВАМЕ ДАЛИ ТОЗИ ЕЛЕМЕНТ НЕ Е ГЕНЕРИРАЛ ИЗЛИШЪЦИ. 
АКО ЗАЯВКАТА ВЪРНЕ СТОЙНОСТ ЗА ID - ЗНАЧИ ИМАМЕ ИЗЛИШЪК ЗА ТОЗИ ПРОДУКТ 
ТОГВА АКО IZL.KOL > ОТ МАХАНОТО, ТО СЕ НУЛИРА, А КОЛИЧЕСТВОТО И СУМИТЕ ЗА 
IZL СЕ НАМАЛЯВАТ СЪС СЪОТВЕТНИТЕ СТОЙНОСТИ 
АКО КОЛИЧЕСТВОТО, КОЕТО СЕ ОТНЕМА Е > ОТ IZL.KOL ТО ЗАПИСА В IZL СЕ ИЗТРИВА, 
А ОТНЕМАНОТО КОЛИЧЕСТВО СЕ НАМАЛЯВА СЪС КОЛИЧЕСТВОТО ОТ IZL 
 
AKO ВСЕ ОЩЕ ИМА КОЛИЧЕСТВО ЗА ОТНЕМАНЕ 
 
2.ИЗБИРАМЕ ОТ PARTIDA_EL_NODE ТЕЗИ ЗАПИСИ, КОИТО УЧАСТВАТ ВЪВ ФОРМИРАНЕТО НА 
КОЛИЧЕСТВОТО И СУМИТЕ ЗА ПОДАДЕНИЯ ЕЛЕМЕНТ, ПОДРЕДЕНИ В ОБРАТЕН РЕД 
3.ПРОВЕРЯВА СЕ ДАЛИ ОСТАВАЩОТО ЗА ОТНЕМАНЕ КОЛИЧЕСТВО Е > ОТ ТЕКУВАЩО ИЗБРАНИЯ 
РЕД. АКО Е > КОЛИЧЕСТВОТО ЗА ОТНЕМАНЕ СЕ НАМАЛЯ С КОЛ. НА ТЕК.ЗАПИС, 
СУМАТА ПО ПВ СЕ СЪБИРА СЪС СУМАТА НА ЗАПИСА И СЕ ИЗТРИВАТ ЗАПИСИТЕ В 
PARTIDA_OUT_EL_NODE И PARTIDA_EL_NODE 
АКО КОЛИЧЕСТВОТО Е < ОТ КОЛИЧЕСТВОТО НА ТЕКУЩИЯ ЗАПИС - 
НАМАЛЯМЕ КОЛИЧЕСТВОТО ЗА ЗАПИСА СЪС ОСТАВАЩОТО ЗА РАЗПРЕДЕЛЕНИЕ, СУМАТА 
СЕ НАМАЛЯ СЪС СОТВЕТНАТА СТОЙНОСТ 
4.НАМИРАМЕ ПАРТИДАТА, ОТ КОЯТО Е ВЗЕТО КОЛИЧЕСТВОТО НА ТЕКУШИЯ РЕД ОТ 
PARTIDA_EL_NODE - АКО Я НЯМА СЕ СЪЗДАВА СЪС СЪОТВЕТНОТО КОЛИЧЕСТВО И СУМА 
А АКО ВСЕ ОЩЕ НЕ Е ИЗЧЕРПАНА ПРИБАВЯМЕ КЪМ КОЛИЧЕСТВОТО И СУМАТА СЪОТВЕТНИТЕ 
СТОЙНОСТИ 
 
5. СЛЕД КАТО КОЛИЧЕСТВОТО ЗА ОТНЕМАНЕ Е СТАНАЛО 0 - СЕ ПРОМЕНЯТ КОЛИЧЕСТВАТА И 
СУМИТЕ НА OUT,OUT_EL И OPR 
*/ 
 
/*    L_SUMA_TEMP = 0;
    L_SUMA_SR_ALL = 0; 
    L_ORG_KOL = P_KOL; 
    L_OST_KOL = 0;--АКО ЦЯЛОТО КОЛИЧЕСТВО ОТИДЕ ЗА КОРЕКЦИЯ НА ИЗЛИШЪК
    --СУМИТЕ ЩЕ СА 0 ПРИ ОТНЕМАНЕ НА OUT,OUT_EL,OPR

    R_SUMA_UPDATE = 0; 
    IF (P_USLUGA = '0') THEN BEGIN--АКО Е УСЛУГА НЯМА ДА СЕ ПРОМЕНЯТ ПАРТИДИ
        SELECT 
            IZL.ID, 
            IZL.KOL, 
            IZL.KOL_IZL 
        FROM 
            IZL 
        WHERE 
            IZL.OUT_EL_ID = :P_OUT_EL 
        INTO 
            :L_EL_ID,:L_KOL,:L_KOL_TEMP; 
 
        IF (L_EL_ID IS NOT NULL) THEN BEGIN 
            P_KOL = ROUND5(P_KOL - L_KOL_TEMP); 
            IF (P_KOL > L_KOL) THEN BEGIN 
                UPDATE IZL SET 
                IZL.KOL = 0 
                WHERE IZL.ID = :L_EL_ID; 
            END 
            ELSE BEGIN 
                UPDATE IZL SET 
                IZL.KOL = ROUND5(IZL.KOL - :P_KOL), 
                IZL.KOL_IZL = ROUND5(IZL.KOL_IZL - :P_KOL) 
                WHERE IZL.ID = :L_EL_ID; 
            END 
        END 
 
        IF (P_KOL > 0) THEN BEGIN 
        --ИЗВЛИЧАНЕ НА ЕЛЕМЕНТИТЕ И ПАРТИДИТЕ ОБРАЗУВАЩИ КОЛИЧЕСТВОТО НА ТОЗИ
        --ЕЛЕМЕНТ В ОБРАТЕН РЕД
 
        --ТОВА Е КОЛИЧЕСТВОТО ОСТАНАЛО СЛЕД ИЗЧИСТВАНЕ НА ИЗЛИШЪКА - ТО ИМА СУМА СР,
        --ДОКАТО ТОВА НА ИЗЛИШЪКА НЯМА ТАКАВА
 
        L_OST_KOL = P_KOL; 
 
        FOR SELECT 
            PARTIDA_EL_NODE.ID, 
            PARTIDA_EL_NODE.IN_EL_ID, 
            PARTIDA_EL_NODE.ELEMENT_ID, 
            PARTIDA_EL_NODE.KOL, 
            PARTIDA_EL_NODE.SUMA, 
            OUT_EL.SUMA_SR, 
            OUT_EL.KOL 
        FROM 
            PARTIDA_EL_NODE INNER JOIN PARTIDA_OUT_EL_NODE ON PARTIDA_EL_NODE.ID = PARTIDA_OUT_EL_NODE.PARTIDA_NODE_ID 
            INNER JOIN OUT_EL ON OUT_EL.ID = PARTIDA_OUT_EL_NODE.OUT_EL_ID 
        WHERE 
            OUT_EL.ID = :P_OUT_EL 
        ORDER BY PARTIDA_EL_NODE.ID DESC 
        INTO 
            :L_NODE_ID,:L_IN_EL_ID,:L_EL_ID,:L_KOL,:L_SUMA,:L_SUMA_SR,:L_OUT_EL_KOL 
        DO BEGIN 
            IF (ROUND5(P_KOL) = 0) THEN 
                LEAVE; 
            IF (P_KOL < L_KOL) THEN BEGIN 
            --КОЛИЧЕСТВОТО С КОЕТО УЧАСТВА ТАЗИ ПАРТИДА Е ПО-ГОЛЯМО ОТ ОСТАНАЛОТО
            --ЗА РАЗПРЕДЕЛЕНИЕ - ТРЯБВА ДА СЕ КОРИГИРА СУМАТА НА PARTIDA_EL_NODE И КОЛ
                --СУМАТА ЗА ДОБАЯНЕ КЪМ ПАРТИДА Е ОСТАВАЩОТО КОЛИЧЕСТВО ПО ЕД_ЦЕНА
                L_SUMA_TEMP = ROUNDD(ROUND5(L_SUMA / L_KOL) * P_KOL); 
 
                --R_SUMA_UPDATE = R_SUMA_UPDATE + L_SUMA_TEMP;
 
                --НОВАТА СУМА Е РАВНА НА ЕД_ЦЕНА * ОСТАВАЩОТО КОЛИЧЕСТВО
                L_SUMA = ROUNDD(ROUND5(L_SUMA / L_KOL) * ROUND5(L_KOL - P_KOL)); 
                L_KOL = ROUND5(L_KOL - P_KOL);--НОВОТО ОСТАВАЩО КОЛИЧЕСТВО
                L_KOL_TEMP = P_KOL; 
 
                P_KOL = 0;--ЦЯЛОТО КОЛИЧЕСТВО Е РАЗПРЕДЕЛЕНО
                --ПРОМЯНА НА КОЛИЧЕСТВОТО И СУМАТА ЗА ТОЗИ ЗАПИС В PARTIDA_EL_NODE
                UPDATE PARTIDA_EL_NODE SET 
                PARTIDA_EL_NODE.SUMA = :L_SUMA, 
                PARTIDA_EL_NODE.KOL = :L_KOL 
                WHERE 
                PARTIDA_EL_NODE.ID = :L_NODE_ID; 
            END 
            ELSE BEGIN 
            --ОСТАВАЩОТО КОЛИЧЕСТВО Е > ОТ ПАРТИДАТА - ТОЗИ ЕЛЕМЕНТ ОТ PARTIDA_EL_NODE
            --И СВЪРЗВАЩИЯ ГО ОТ PARTIDA_OUT_EL_NODE СЕ ИЗТРИВАТ, СУМИТЕ СЕ ЗАПАЗВАТ
                P_KOL = ROUND5(P_KOL - L_KOL); 
                --R_SUMA_UPDATE = R_SUMA_UPDATE + L_SUMA;
 
                L_SUMA_TEMP = L_SUMA; 
                L_KOL_TEMP = L_KOL; 
                --ИЗТРИВАТ СЕ ЕЛЕМЕНТИТЕ ОТ PARTIDA_OUT_EL_NODE PARTIDA_EL_NODE
                DELETE FROM PARTIDA_OUT_EL_NODE 
                WHERE PARTIDA_OUT_EL_NODE.PARTIDA_NODE_ID = :L_NODE_ID; 
 
                DELETE FROM PARTIDA_EL_NODE 
                WHERE PARTIDA_EL_NODE.ID = :L_NODE_ID; 
            END 
 
            L_P_ID = NULL; 
            --НАМИРАНЕ ИЛИ СЪЗДАВАНЕ НА ПАРИДАТА
            SELECT 
                PARTIDA_NAL.ID 
            FROM 
                PARTIDA_NAL 
            WHERE 
                PARTIDA_NAL.IN_EL_ID = :L_IN_EL_ID 
                AND PARTIDA_NAL.ELEMENT_ID = :L_EL_ID 
            INTO 
                :L_P_ID; 
            --АКО ПАРТИДАТА Е ИЗТРИРА ГОРНАТА ЗАЯВКА ЩЕ ВЪРНЕ РЕЗУЛТАТ 0
            --ТОГАВА СЕ ВМЪКВА НОВАПАРТИДА, АКО ВЪРНЕ > 0 ЗНАЧИ ПАРТИДАТА
            --СЪЩЕСТВУВА И ТЯ ЩЕ СЕ ЪПДЕЙТНЕ
            IF(L_P_ID IS NOT NULL) THEN BEGIN 
                SELECT 
                    PARTIDA_NAL.ID 
                FROM 
                    PARTIDA_NAL 
                WHERE 
                    PARTIDA_NAL.IN_EL_ID = :L_IN_EL_ID 
                    AND PARTIDA_NAL.ELEMENT_ID = :L_EL_ID 
                INTO 
                    :L_P_ID; 
                --ПАРТИДАТА Я ИМА САМО ЩЕ СЕ ЪПДЕЙТНЕ
                UPDATE PARTIDA_NAL SET 
                PARTIDA_NAL.SUMA = ROUNDD(PARTIDA_NAL.SUMA + :L_SUMA_TEMP), 
                PARTIDA_NAL.KOL_NAL = ROUND5(PARTIDA_NAL.KOL_NAL + :L_KOL_TEMP) 
                WHERE PARTIDA_NAL.ID = :L_P_ID; 
            END 
            ELSE BEGIN 
            --ПАРТИДАТА Я НЯМА - ЩЕ Я СЪЗДАВАМ НОВА
                L_P_ID = GEN_ID(GEN_PARTIDA_NAL_ID,1); 
                INSERT INTO PARTIDA_NAL 
                VALUES (:L_P_ID, :L_KOL_TEMP,:L_SUMA_TEMP,:L_IN_EL_ID,:L_EL_ID); 
            END 
 
            SELECT 
                OPR.SKLAD_ID 
            FROM 
                OPR 
            WHERE 
                OPR.ID = :P_OPR_ID 
            INTO 
                :L_SKLAD_ID; 
 
            --СУМА СР / РЕАЛНОТО КОЛИЧЕСТВО НА ЕЛЕМЕНТА,ТУК СА МАХНАТИ ИЗЛИШЪЦИТЕ,
            --УМНОЖЕНА ПО КОЛИЧЕСТВОТО,С КОЕТО УЧАСТВА ПАРТИДАТА Е СУМА СР ЗА ТАЗИ
            --ПАРТИДА, ЗА ТОЗИ ЕЛЕМЕНТ НА ИЗХОДА
            L_SUMA_SR = ROUNDD(ROUND5(L_SUMA_SR / ROUND5(L_OUT_EL_KOL - ROUND5(L_ORG_KOL - L_OST_KOL))) * L_KOL_TEMP); 
 
            --НАМАЛЯМ OUT_EL ЕЛЕМЕНТА СЪС СЪОТВЕТНИТЕ СЪМИ.ТАКА АКО СЕ ВИКА ОТ ТРИЕНЕ НА
            --ЕЛЕМЕНТ ТОЗИ ЩЕ ИМА СУМИ 0. ЗАЩОТО ПРИ КОРЕКЦИЯ НА ИЗЛИШЪК МОЖЕ ДА ДАДЕ, ЧЕ
            --ВСИЧКО Е РАЗПРЕДЕЛЕНО И ОТ НЕГО НЯМА ДА СЕ ИЗВАДИ НИШО. ТАКА ПРИ ИЗТРИВАНЕ,
            --В NAL ЩЕ ИМА ГРЕШНИ СУМИ
            UPDATE OUT_EL SET 
            OUT_EL.SUMA_SR = ROUNDD(OUT_EL.SUMA_SR - :L_SUMA_SR), 
            OUT_EL.SUMA_FR = ROUNDD(OUT_EL.SUMA_FR - :L_SUMA_TEMP) 
            WHERE OUT_EL.ID = :P_OUT_EL; 
 
            IF (P_AUTO_IZL = 1)  THEN BEGIN 
                EXECUTE PROCEDURE PARTIDA_IN_IZL(L_KOL_TEMP,L_SUMA_TEMP,L_IN_EL_ID, L_SKLAD_ID,L_EL_ID,L_SUMA_SR,P_OPR_ID,L_P_ID) 
                RETURNING_VALUES :L_SUMA_SR,:L_SUMA; 
                L_SUMA_SR_ALL = ROUNDD(L_SUMA_SR_ALL + L_SUMA_SR); 
                R_SUMA_UPDATE = ROUNDD(R_SUMA_UPDATE + L_SUMA); 
            END 
            ELSE BEGIN 
                L_SUMA_SR_ALL = ROUNDD(L_SUMA_SR_ALL + L_SUMA_SR); 
                R_SUMA_UPDATE = ROUNDD(R_SUMA_UPDATE + L_SUMA_TEMP); 
            END 
        END 
        END--> 0 СЛЕД КОРЕКЦИЯ НА ИЗЛИШЪЦИ
    END--AKO НЕ Е УСЛУГА
 
    --КОЛИЧСТВОТО Е РАЗПРЕДЕЛЕНО - ЩЕ СЕ ЪПДЕЙТНАТ СУМИТЕ НА OPR,OUT,OUT_EL
    --И ПОСЛЕ СЕ ИЗЛИЗА ОТ ПРОЦЕДУРАТА
 
    --ИЗВЛИЧАМ ПРОДАЖНАТА ЦЕНА ЗА ТОЗИ ПРОДУКТ - ТАКА, КАТО Я
    --УМНОЖА ПО КОЛИЧЕСТВОТО, КОЕТО СЕ ОТНЕМА ЩЕ ПОЛУЧА SUMA_BASE,КОЯТО ТРЯБВА
    --ДА ИЗВАДЯ ОТ OUT
    SELECT 
        SIMPLE.CENA_PROD 
    FROM 
        SIMPLE INNER JOIN OUT_EL ON OUT_EL.SIMPLE_ID = SIMPLE.ID 
    WHERE 
        OUT_EL.ID = :P_OUT_EL 
    INTO 
        :L_SUMA_TEMP; 
 
    L_SUMA_TEMP = ROUNDD(L_SUMA_TEMP * L_ORG_KOL); 
 
    IF (P_FLAG = 0) THEN BEGIN 
        UPDATE OUT SET 
        OUT.SUMA_FR   = ROUNDD(OUT.SUMA_FR   - :R_SUMA_UPDATE),--АКО Е УСЛУГА ТОВА Е 0
        OUT.SUMA_BASE = ROUNDD(OUT.SUMA_BASE - :L_SUMA_TEMP), 
        OUT.SUMA_SR   = ROUNDD(OUT.SUMA_SR   - :L_SUMA_SR_ALL) 
        WHERE OUT.OPR_ID = :P_OPR_ID; 
 
        --НОВ НАЧИН - ДА СЕ ПОМНИ ЧЕ СЕ ЪПДЕЙТВА И БАЗОВАТА СУМА
        UPDATE OPR_SUMI SET 
        OPR_SUMI.SUMA_FR   = ROUNDD(OPR_SUMI.SUMA_FR   - :R_SUMA_UPDATE),--АКО Е УСЛУГА ТОВА Е 0
        OPR_SUMI.SUMA_SR   = ROUNDD(OPR_SUMI.SUMA_SR   - :L_SUMA_SR_ALL) 
        WHERE OPR_SUMI.OPR_ID = :P_OPR_ID; 
 
        SELECT 
            ROUND5(OUT_EL.SUMA / OUT_EL.KOL) 
        FROM 
            OUT_EL 
        WHERE 
            OUT_EL.ID = :P_OUT_EL 
        INTO 
            :L_SUMA_TEMP;--ЕД_ПРОДАЖНА ЦЕНА
 
        --ПОЛУЧАВАМ ПРОДАЖНА СУМА НА ВРЪЩАНОТО КОЛИЧЕСТВО
        L_SUMA_TEMP = ROUNDD(L_SUMA_TEMP * L_ORG_KOL); 
 
        UPDATE OPR SET 
        OPR.SUMA = ROUNDD(OPR.SUMA - :L_SUMA_TEMP) 
        WHERE OPR.ID = :P_OPR_ID; 
    END 
    ELSE IF (P_FLAG = 2)  THEN BEGIN 
        UPDATE IZP SET 
        IZP.SUMA_SR = ROUNDD(IZP.SUMA_SR - :L_SUMA_SR_ALL), 
        IZP.SUMA_FR = ROUNDD(IZP.SUMA_FR - :R_SUMA_UPDATE) 
        WHERE IZP.OPR_ID = :P_OPR_ID; 
 
        UPDATE OPR SET 
        OPR.SUMA = ROUNDD(OPR.SUMA - ( 
            SELECT 
                ROUNDD(ROUND5(OUT_EL.SUMA / OUT_EL.KOL) * :L_ORG_KOL) 
            FROM 
                OUT_EL 
            WHERE ID = :P_OUT_EL)) 
        WHERE OPR.ID = :P_OPR_ID; 
 
        --нОВ НАЧИН
        UPDATE OPR_SUMI SET 
        OPR_SUMI.SUMA_SR = ROUNDD(OPR_SUMI.SUMA_SR - :L_SUMA_SR_ALL), 
        OPR_SUMI.SUMA_FR = ROUNDD(OPR_SUMI.SUMA_FR - :R_SUMA_UPDATE) 
        WHERE OPR_SUMI.OPR_ID = :P_OPR_ID; 
    END 
 
    --ИЗВЛИЧАМ ЕД.ПРОД ЦЕНА ЗА ПРОДУКТА И С НЕЯ ПРОМЕНЯМ OPR.SUMA
 
    IF (P_USLUGA = '0') THEN BEGIN--АКО НЕ Е УСЛУГА,ТОГАВА СЕ ПРОМЕНЯ NAL
        SELECT 
            OUT_EL.SIMPLE_ID 
        FROM 
            OUT_EL 
        WHERE 
            OUT_EL.ID = :P_OUT_EL 
        INTO 
            :L_IN_EL_ID; 
 
        --ПРОМЯНА НА СУМИТЕ В NAL - ТЕ СЕ УВЕЛИЧАВАТ СЪС СЪОТВЕТНИТЕ СТОЙНОСТИ
        --ЗАЩОТО СЕ ВРЪЩАТ КОЛИЧЕСТВА И СУМИ В СКЛАДА
        UPDATE NAL SET 
        NAL.SUMA    = ROUNDD(NAL.SUMA + :L_SUMA_SR_ALL), 
        NAL.SUMA_FR = ROUNDD(NAL.SUMA_FR + :R_SUMA_UPDATE), 
        NAL.KOL_NAL = ROUND5(NAL.KOL_NAL + :L_ORG_KOL) 
        WHERE 
        NAL.SIMPLE_ID = :L_IN_EL_ID --ПОЛЗВАМ ТЕЗИ ПРОМЕНЛИВИ ЗА ДА НЕ
        AND NAL.SKLAD_ID = :P_SKLAD_ID;--ДЕКЛАРИРАМ НОВИ САМО ЗА ТУК
    END--АКО Е УСЛУГА
 
    --НАКРАЯ ПРОМЕНЯМ СУМАТА В САМИЯ OUT_EL,КАКТО И КОЛИЧЕСТВОТО МУ
    UPDATE OUT_EL SET 
    OUT_EL.SUMA = ROUNDD(OUT_EL.SUMA - ROUNDD(ROUND5(OUT_EL.SUMA / OUT_EL.KOL) * :L_ORG_KOL)), 
    OUT_EL.KOL = ROUND5(OUT_EL.KOL - :L_ORG_KOL) 
    WHERE OUT_EL.ID = :P_OUT_EL; 
 
    SELECT 
        OUT_EL.KOL 
    FROM 
        OUT_EL 
    WHERE 
        OUT_EL.ID = :P_OUT_EL 
    INTO 
       :L_KOL; 
       */
END^


ALTER PROCEDURE EDIT_OUT_DEC_SN (
    P_OUT_EL_ID INTEGER,
    P_ELEMENT_ID INTEGER)
AS
DECLARE VARIABLE L_PEN_ID INTEGER;
BEGIN 
/*V.1
    ИЗХОД ОТ СЕРИЕН НОМЕР СЕ ВРЪЩА В СКАЛДА*/

    SELECT
        PEN.ID
    FROM
        PARTIDA_OUT_EL_NODE PON INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID
        AND PON.OUT_EL_ID = :P_OUT_EL_ID
        INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID AND PN.ELEMENT_ID = :P_ELEMENT_ID
    INTO
        :L_PEN_ID;

    DELETE FROM PARTIDA_EL_NODE WHERE ID = :L_PEN_ID;

    UPDATE OUT_EL SET KOL = ROUND(KOL - 1.00,5) WHERE ID = :P_OUT_EL_ID;
END^


ALTER PROCEDURE EDIT_OUT_DEC_SN_IZP (
    P_OUT_EL_ID INTEGER,
    P_ELEMENT_ID INTEGER)
AS
BEGIN 
/*V.5 ПРОДУКТ С ДАДЕН СЕРИЕН НОМЕР СЕ ВРЪЩА В СКЛАДА
*/
    EXECUTE PROCEDURE EDIT_OUT_DEC_SN(P_OUT_EL_ID,P_ELEMENT_ID);
END^


ALTER PROCEDURE EDIT_OUT_DEC_SN_MOVE (
    P_ELEMENT_ID INTEGER,
    P_OUT_EL_ID INTEGER)
AS
DECLARE VARIABLE L_IN_EL_TO_ID INTEGER;
DECLARE VARIABLE L_PEN_ID INTEGER;
DECLARE VARIABLE L_PN_ID INTEGER;
BEGIN 
    SELECT
        ORN.IN_EL_ID
    FROM
        OPR_RAZPAD_NODE ORN
    WHERE
        ORN.OUT_EL_ID = :P_OUT_EL_ID
    INTO
        :L_IN_EL_TO_ID;
    
    SELECT
        PEN.ID,
        PN.ID
    FROM
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.PARTIDA_NODE_ID = PEN.ID
        AND PIN.IN_EL_ID = :L_IN_EL_TO_ID
        INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID AND PN.ELEMENT_ID = :P_ELEMENT_ID
    INTO
        :L_PEN_ID,:L_PN_ID;

    DELETE FROM PARTIDA_EL_NODE WHERE ID = :L_PEN_ID;
    DELETE FROM PARTIDA_NAL WHERE ID = :L_PN_ID;
    UPDATE IN_EL SET KOL = ROUND(KOL - 1.00,5) WHERE ID = :L_IN_EL_TO_ID;

    EXECUTE PROCEDURE EDIT_OUT_DEC_SN(P_OUT_EL_ID,P_ELEMENT_ID);
END^


ALTER PROCEDURE EDIT_OUT_DEC_SN_PROD (
    P_OUT_EL_ID INTEGER,
    P_ELEMENT_ID INTEGER)
AS
BEGIN 
/*V.7*/
    EXECUTE PROCEDURE EDIT_OUT_DEC_SN(P_OUT_EL_ID,P_ELEMENT_ID);
END^


ALTER PROCEDURE EDIT_OUT_DEL_EL (
    P_KOL DOUBLE PRECISION,
    P_OUT_EL_ID INTEGER,
    P_OPR_ID INTEGER,
    P_USLUGA CHAR(1),
    P_SKLAD_ID INTEGER,
    P_FLAG INTEGER,
    P_AUTO_IZL SMALLINT)
AS
BEGIN
/*V.2
ВХ.ПАРАМЕТРИ

P_KOL - КОЛИЧЕСТВО КОЕТО ТРЯБВА ДА СЕ ВЪРНЕ ПО ПАРТИДИТЕ = НА ЦЯЛОТО КОЛИЧЕСТВО
НА ЕЛЕМЕНТА НА ПРОДАЖБА
P_OUT_EL - КОЙ Е РЕДАКТИРАНИЯ ЕЛЕМЕНТ
P_OPR_ID - КОЯ Е РЕДАКТИРАНАТА ОПЕРАЦИЯ
*/
    /*ПЪРВО СЕ ВИКА ПРОЦЕДУРА, КОЯТО ВРЪЩА КОЛИЧЕСТВАТА ПО ПАРТИДИТЕ ИМ*/
    EXECUTE PROCEDURE EDIT_OUT_DEC_KOL(P_OUT_EL_ID, P_KOL, P_OPR_ID,P_USLUGA,
                      P_SKLAD_ID,P_FLAG,P_AUTO_IZL)
    RETURNING_VALUES :P_KOL;

    /*ИЗТРИВАМЕ ЕЛЕМЕНТА НА ПРОДАЖБАТА*/
    DELETE FROM OUT_EL WHERE OUT_EL.ID = :P_OUT_EL_ID;
END^


ALTER PROCEDURE EDIT_OUT_EL_KOL2 (
    P_OUT_EL_ID INTEGER,
    P_NEW_KOL DOUBLE PRECISION)
AS
DECLARE VARIABLE L_OUT_EL2_KOL DOUBLE PRECISION;
BEGIN
    SELECT
        OUT_EL2.KOL
    FROM
        OUT_EL2
    WHERE
        OUT_EL2.OUT_EL_ID = :P_OUT_EL_ID
    INTO
        :L_OUT_EL2_KOL;

    L_OUT_EL2_KOL = ROUND5 (P_NEW_KOL - L_OUT_EL2_KOL);

    UPDATE OUT_EL2 SET
    KOL = :P_NEW_KOL
    WHERE OUT_EL_ID = :P_OUT_EL_ID;

    UPDATE NAL2 SET
    NAL2.KOL = ROUND5(NAL2.KOL - :L_OUT_EL2_KOL)
    WHERE NAL2.NAL_ID = (SELECT NAL.ID FROM NAL INNER JOIN OUT_EL ON (OUT_EL.ID = :P_OUT_EL_ID
    AND  OUT_EL.SIMPLE_ID = NAL.SIMPLE_ID)
    INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.SKLAD_ID = NAL.SKLAD_ID);
END^


ALTER PROCEDURE EDIT_OUT_INC_SN_IZP (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY)
AS
BEGIN 
--V.7 
    EXECUTE PROCEDURE PARTIDA_OUT_SN_IZP(:P_OPR_ID, :P_OUT_EL_ID, :P_ELEMENT_ID, :P_IN_EL_ID, 1.00); 
 
    UPDATE OUT_EL SET 
        KOL = ROUND(KOL + 1.00, 5) 
    WHERE 
        ID = :P_OUT_EL_ID; 
END^


ALTER PROCEDURE EDIT_OUT_INC_SN_MOVE (
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_OUT_IN_EL_ID TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_IN_EL_TO_ID TYPE OF DOM_KEY; 
BEGIN 
    SELECT 
        ORN.IN_EL_ID 
    FROM 
        OPR_RAZPAD_NODE ORN 
    WHERE 
        ORN.OUT_EL_ID = :P_OUT_EL_ID 
    INTO 
        :L_IN_EL_TO_ID; 
 
    EXECUTE PROCEDURE PARTIDA_OUT_SN_MOVE(P_OPR_ID,P_OUT_EL_ID,L_IN_EL_TO_ID,P_ELEMENT_ID, 
    P_OUT_IN_EL_ID, 1.00); 
 
    UPDATE OUT_EL SET KOL = ROUND(KOL + 1.00,5) WHERE ID = :P_OUT_EL_ID; 
 
    UPDATE IN_EL SET KOL = ROUND(KOL + 1.00,5) WHERE ID = :L_IN_EL_TO_ID; 
END^


ALTER PROCEDURE EDIT_OUT_INC_SN_PROD (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY)
AS
BEGIN 
-- V.6 
-- ТАЗИ ПРОЦЕДУРА СЕ ВИКА ОТ РЕДАКЦИЯ ПРОДАЖБА, КОГАТО ДАДЕН НЕИЗПОЛЗВАН СЕР.НОМЕР 
-- Е ОТБЕЛЯЗАН КАТО ИЗПОЛЗВАН. ТУК СЕ ИЗВИКВА СЪЩАТА ПРОЦЕДУРА, КОЯТО СЕ ВИКА И 
-- ПРИ ДОБАВЯНЕ НА СЕРИЕН НОМЕР В ПРОДАБАТА. ПРОСТО ПРЕДАВАМ  ПАРАМЕТРИТЕ КЪМ НЕЯ. 
    EXECUTE PROCEDURE PARTIDA_OUT_SN_PROD(:P_OPR_ID, :P_OUT_EL_ID, :P_ELEMENT_ID, :P_IN_EL_ID, 1.00); 
 
    UPDATE OUT_EL SET 
        KOL = ROUND(KOL + 1.00, 5) 
    WHERE 
        ID = :P_OUT_EL_ID; 
END^


ALTER PROCEDURE EDIT_PARI (
    P_EDIT_OPR_ID INTEGER,
    P_PARI_ID INTEGER,
    P_SUMA DOUBLE PRECISION,
    P_ACTION_TYPE SMALLINT)
AS
DECLARE VARIABLE L_KASA_ID SMALLINT; 
DECLARE VARIABLE L_OBEKT_ID SMALLINT; 
DECLARE VARIABLE L_SUMA NUMERIC(10,2); 
DECLARE VARIABLE L_VALUTA_ID SMALLINT; 
DECLARE VARIABLE L_KURS DOUBLE PRECISION; 
DECLARE VARIABLE L_TIP SMALLINT; 
DECLARE VARIABLE L_GEN_PARI_EL_ID INTEGER; 
BEGIN 
/*V.3 ПРОМЕНЯ СУМАТА ЗА ОПЕРАЦИЯ КАСА,КАТО ПРЕДИ ТОВА ЗАПАЗВА СТАРИТЕ СТОЙНОСТИ НА 
КАСАТА В АРХИВНА ТАБЛИЦА 
P_EDIT_OPR_ID - СОЧИ КОЯ ОПРЕРАЦИЯ КАСА С КОЯ Е РЕДАКТИРАНА 
P_PARI_ID - КОЙ РЕД ОТ ТАБЛИЦА PARI СЕ РЕДАКТИРА 
P_SUMA - СУМА, С КОЯТО ЩЕ СЕ ПРОМЕНЯ 
P_ACTION_TYPE ПОКАЗВА ДАЛИ ЩЕ СЕ СЪБИРА ИЛИ ЩЕ СЕ ВАДИ СУМА 0 СЪБИРА, 1 ВАДИ 
*/ 
    SELECT 
        PARI.KASA_ID, 
        PARI.OBEKT_ID, 
        PARI.SUMA, 
        PARI.VALUTA_ID, 
        PARI.KURS, 
        PARI.TIP 
    FROM 
        PARI 
    WHERE 
        PARI.OPR_ID = :P_PARI_ID 
    INTO 
        :L_KASA_ID, :L_OBEKT_ID, :L_SUMA, :L_VALUTA_ID,:L_KURS,:L_TIP; 
 
    L_GEN_PARI_EL_ID = GEN_ID(GEN_OLD_PARI_EL_ID,1); 
 
    INSERT INTO OLD_PARI_EL(ID, OPR_ID, KASA_ID, OBEKT_ID, SUMA, VALUTA_ID, KURS, TIP) 
    VALUES(:L_GEN_PARI_EL_ID,:P_EDIT_OPR_ID,:L_KASA_ID,:L_OBEKT_ID,:L_SUMA,:L_VALUTA_ID,:L_KURS, :L_TIP); 
    IF (P_ACTION_TYPE = 0) THEN BEGIN 
        UPDATE PARI  SET 
        PARI.SUMA = ROUNDD(PARI.SUMA + :P_SUMA) 
        WHERE PARI.OPR_ID = :P_PARI_ID; 
 
        UPDATE OPR SET OPR.SUMA = ROUNDD(OPR.SUMA + :P_SUMA) 
        WHERE OPR.ID = :P_PARI_ID; 
    END 
    ELSE BEGIN 
        UPDATE PARI  SET 
        PARI.SUMA = ROUNDD(PARI.SUMA - :P_SUMA) 
        WHERE PARI.OPR_ID = :P_PARI_ID; 
 
        UPDATE OPR SET OPR.SUMA = ROUNDD(OPR.SUMA - :P_SUMA) 
        WHERE OPR.ID = :P_PARI_ID; 
    END 
END^


ALTER PROCEDURE EDIT_PARI_SKLOPR_NODE (
    P_OPR_ID INTEGER,
    P_OTC_ID INTEGER,
    P_OPR_TIP SMALLINT,
    P_OLD_USER INTEGER,
    P_NEW_USER INTEGER,
    P_NEW_KASA_ID INTEGER,
    P_NEW_SUMA DOUBLE PRECISION,
    P_IP INTEGER,
    P_EDITING_USER INTEGER)
AS
DECLARE VARIABLE L_OTC_EL_ID INTEGER; 
DECLARE VARIABLE L_PARI_ID INTEGER; 
DECLARE VARIABLE L_DATE DATE; 
DECLARE VARIABLE L_PARI_IO_ID SMALLINT; 
BEGIN 
    L_OTC_EL_ID = NULL; 
 
    IF (P_OPR_TIP = 1) THEN BEGIN 
        IF (P_OLD_USER <> P_NEW_USER) THEN BEGIN 
            /*ПЪРВО ПРАВЯ ПРОВЕРКА ДАЛИ ЗА НОВИЯ ОПЕРАТОР ИМА СУМА ЗА ДОСТАВКИ КЪМ ТОЗИ ОТЧЕТ*/ 
            SELECT 
                OTC_EL.ID 
            FROM 
                OTC_EL 
            WHERE 
                OTC_EL.TIP_SUMA = 4 
                AND OTC_EL.SUMA_ID = :P_NEW_USER 
                AND OTC_EL.OPR_ID = :P_OTC_ID 
            INTO 
                :L_OTC_EL_ID; 
 
            IF (L_OTC_EL_ID IS NULL) THEN 
            /*НЯМА СУМА ЗА ТОЗИ ОПЕРАТОР В ТОЗИ ОТЧЕТ - ЩЕ ДОБАВЯ ЕДИН ЗАПИС СЪС СУМА 0. 
            ОТ ПРОЦЕДУРАТА КЪДЕТО СЕ ВИКА ТАЗАИ С.П.(EDIT_OTC_AFTER_OPR_EDIT), СЛЕДВАЩАТА С.П. ЩЕ ПРОМЕНИ 
            НОВИЯ ЗАПИС ЗА СУМА НА ОТЧЕТ С ПОДАДЕНИТА СУМА - ЗАТОВА НОВИЯ ЗАПИС Е СЪС СУМА 0.*/ 
                INSERT INTO OTC_EL (OPR_ID,TIP_SUMA,SUMA_ID,SUMA) 
                VALUES (:P_OTC_ID,4,:P_NEW_USER,ROUNDD(0.00)); 
        END 
    END 
    ELSE IF (P_OPR_TIP = 2) THEN BEGIN 
        IF (P_OLD_USER <> P_NEW_USER) THEN BEGIN 
            /*ПЪРВО ПРАВЯ ПРОВЕРКА ДАЛИ ЗА НОВИЯ ОПЕРАТОР ИМА СУМА ЗА ПРОДАЖБИ КЪМ ТОЗИ ОТЧЕТ*/ 
            SELECT 
                OTC_EL.ID 
            FROM 
                OTC_EL 
            WHERE 
                OTC_EL.TIP_SUMA = 3 
                AND OTC_EL.SUMA_ID = :P_NEW_USER 
                AND OTC_EL.OPR_ID = :P_OTC_ID 
            INTO 
                :L_OTC_EL_ID; 
 
            IF (L_OTC_EL_ID IS NULL) THEN 
            /*НЯМА СУМА ЗА ТОЗИ ОПЕРАТОР В ТОЗИ ОТЧЕТ - ЩЕ ДОБАВЯ ЕДИН ЗАПИС СЪС СУМА 0. 
            ОТ ПРОЦЕДУРАТА КЪДЕТО СЕ ВИКА ТАЗАИ СП(EDIT_OTC_AFTER_OPR_EDIT), СЛЕДВАЩАТА СП ЩЕ ПРОМЕНИ 
            НОВИЯ ЗАПИС ЗА СУМА НА ОТЧЕТ С ПОДАДЕНИТА СУМА - ЗАТОВА НОВИЯ ЗАПИС Е СЪС СУМА 0.*/ 
                INSERT INTO OTC_EL (OPR_ID,TIP_SUMA,SUMA_ID,SUMA) 
                VALUES (:P_OTC_ID,3,:P_NEW_USER,ROUNDD(0.00)); 
        END 
        /*ЗА ОПЕРАТОРА ВЕЧЕ ИМА СУМА ЗА ОТЧЕТА. ЩЕ ПРОВЕРЯ ДАЛИ ЗА РЕДАКТИРАНАТА 
        ОПЕРАЦИЯ ИМА ОПЕРАЦИЯ КАСА - АКО ИМА, ЗА ИЗБРАНАТА КАСА ЩЕ ТЪРСЯ 
        ДАЛИ НОВИЯ ОПЕРАТОР ИМА ЗАПИС В PARI ЗА ТОЗИ ОТЧЕТ*/ 
    END 
 
    IF (EXISTS (SELECT PARI_SKLOPR_NODE.ID FROM PARI_SKLOPR_NODE 
                WHERE PARI_SKLOPR_NODE.OPR_ID = :P_OPR_ID)) 
    THEN BEGIN 
 
        L_PARI_ID = NULL; 
        SELECT 
            PARI.PARI_IO_ID 
        FROM 
            PARI 
        WHERE 
            PARI.OPR_ID = (SELECT PARI_SKLOPR_NODE.OPR_PARI_ID FROM PARI_SKLOPR_NODE 
                WHERE PARI_SKLOPR_NODE.OPR_ID = :P_OPR_ID) 
        INTO 
            :L_PARI_IO_ID; 
 
        IF (P_OPR_TIP = 1) THEN 
            SELECT 
                PARI.OPR_ID 
            FROM 
                PARI_SKLOPR_NODE INNER JOIN PARI ON PARI.OPR_ID = PARI_SKLOPR_NODE.OPR_PARI_ID 
                INNER JOIN OPR ON OPR.ID = PARI.OPR_ID 
            WHERE 
                PARI_SKLOPR_NODE.OPR_OTC_ID = :P_OTC_ID 
                AND PARI.KASA_ID = :P_NEW_KASA_ID 
                AND PARI.PARI_IO_ID = :L_PARI_IO_ID 
                AND PARI.TIP = 1 
                AND OPR.USER_ID = :P_NEW_USER 
            GROUP BY 1 
            INTO 
                :L_PARI_ID; 
        ELSE 
            SELECT 
                PARI.OPR_ID 
            FROM 
                PARI_SKLOPR_NODE INNER JOIN PARI ON PARI.OPR_ID = PARI_SKLOPR_NODE.OPR_PARI_ID 
                INNER JOIN OPR ON OPR.ID = PARI.OPR_ID 
            WHERE 
                PARI_SKLOPR_NODE.OPR_OTC_ID = :P_OTC_ID 
                AND PARI.KASA_ID = :P_NEW_KASA_ID 
                AND PARI.PARI_IO_ID = :L_PARI_IO_ID 
                AND PARI.TIP = 0 
                AND OPR.USER_ID = :P_NEW_USER 
            GROUP BY 1 
            INTO 
                :L_PARI_ID; 
        IF (L_PARI_ID IS NULL) THEN BEGIN 
        /*НЯМА ОПЕРАЦИЯ КАСА ЗА НОВИЯ ОПЕРАТОР ЗА ТАЗИ КАСА И ОТЧЕТ - ЩЕ ДОБАВЯ ЕДИН НОВ ЗАПИС В OPR И 
        КАСА СЪС СУМА 0 - ЛОГИКАТА Е СЪЩАТА КАТО ЗАПИСА С 0 СУМА В OTC_EL ПО-ГОРЕ 
        ЗА OPR  СУМАТА ЩЕ Е РАВНА НА НОВАТА СУМА. ТАЗИ СУМА ЩЕ Е Е ИВ PARI_OPR_NODE, СЛЕД КАТО ВЪРНА 
        ID НА НОВИЯ ЗАПИС В PARI*/ 
            SELECT 
                OPR.OPR_DATE 
            FROM 
                OPR 
            WHERE 
                OPR.ID = (SELECT PARI_SKLOPR_NODE.OPR_PARI_ID FROM PARI_SKLOPR_NODE 
                          WHERE PARI_SKLOPR_NODE.OPR_ID = :P_OPR_ID) 
            INTO 
                :L_DATE; 
 
            EXECUTE PROCEDURE ADD_OPR(10,L_DATE,P_IP,P_NEW_USER,NULL, NULL, 0.00) 
            RETURNING_VALUES :L_PARI_ID; 
 
            EXECUTE PROCEDURE GET_OTC_PARI_DATA(P_OPR_ID,L_PARI_ID,P_NEW_KASA_ID) 
            RETURNING_VALUES :L_OTC_EL_ID;/*ЗА ДА НЕ ДЕКЛАРИРАМ ДРУГА ПРОМЕНЛИВА*/ 
        END 
        /*СЕГА ВЕЧЕ ЩЕ ПРЕНАСОЧА ВРЪЗКАТА В PARI_SKLOPR_NODE ЗА ТАЗИ ОПЕРАЦИЯ ДА СОЧИ НОВАТА ОПЕРАЦИЯ 
        КАСА, КАТО ЕДНОВРЕМЕННО С ТОВА ЩЕ СМЕНЯ И СУМАТА НА НОВАТА*/ 
 
        UPDATE PARI_SKLOPR_NODE SET 
        OPR_PARI_ID = :L_PARI_ID, 
        SUMA = ROUNDD(:P_NEW_SUMA) 
        WHERE OPR_ID = :P_OPR_ID; 
    END 
END^


ALTER PROCEDURE EDIT_RZV_NAL (
    OPR_ID INTEGER,
    OPR_ID_EDIT INTEGER)
AS
declare variable l_id_nal integer; 
declare variable l_kol_rzv double precision; 
declare variable l_kol_nal double precision; 
declare variable l_sklad_id integer; 
declare variable l_t integer; 
begin 
  select opr_tip 
  from opr 
  where 
    id = :opr_id_edit 
  into :l_t; 
 
  if (l_t >= 200) then begin 
    select first 1 sklad_id 
    from opr_edit 
    where 
      ed_opr_id = :opr_id 
    order by id desc 
    into :l_sklad_id; 
 
    for select 
      nal.id,  
      nal.kol_nal, 
      nal.kol_rzv 
    from in_el 
    join nal on nal.simple_id = in_el.simple_id and nal.sklad_id = :l_sklad_id 
    where 
      in_el.is_f = 0 and 
      in_el.opr_id = :opr_id and 
      nal.kol_nal < nal.kol_rzv and 
      nal.kol_rzv > 0 
    into :l_id_nal,:l_kol_nal,:l_kol_rzv 
    do 
      execute procedure EDIT_RZV_POR(:l_id_nal,:l_kol_nal,:l_kol_rzv); 
 
    for select 
      nal.id,  
      nal.kol_nal, 
      nal.kol_rzv 
    from old_in_el 
    join nal on nal.simple_id = old_in_el.simple_id and nal.sklad_id = :l_sklad_id 
    where 
      old_in_el.opr_id = :opr_id_edit and 
      nal.kol_nal < nal.kol_rzv and 
      nal.kol_rzv > 0 
    into :l_id_nal,:l_kol_nal,:l_kol_rzv 
    do 
      execute procedure EDIT_RZV_POR(:l_id_nal,:l_kol_nal,:l_kol_rzv); 
  end 
  else begin 
    for select 
      nal.id,  
      nal.kol_nal, 
      nal.kol_rzv 
    from old_in_el 
    join nal on nal.simple_id = old_in_el.simple_id 
    join opr on old_in_el.opr_id = opr.id and nal.sklad_id = opr.sklad_id and opr.id = :opr_id_edit 
    where 
      nal.kol_nal < nal.kol_rzv and 
      nal.kol_rzv > 0 
    into :l_id_nal,:l_kol_nal,:l_kol_rzv 
    do 
      execute procedure EDIT_RZV_POR(:l_id_nal,:l_kol_nal,:l_kol_rzv); 
  end 
 
  post_event 'POR_REFRESH'; 
end^


ALTER PROCEDURE EDIT_RZV_POR (
    P_NAL_ID INTEGER,
    P_KOL_NAL DOUBLE PRECISION,
    P_KOL_RZV DOUBLE PRECISION)
AS
declare variable l_por_el_id integer; 
declare variable l_kol_rzv double precision; 
declare variable l_kol_raznasiane double precision; 
declare variable l_sim_id integer; 
declare variable l_sklad_id integer; 
begin 
  select 
    simple_id, 
    sklad_id 
  from nal 
  where 
    id = :p_nal_id 
  into :l_sim_id,:l_sklad_id; 
 
  if (p_kol_nal > 0) then begin 
    l_kol_raznasiane = :p_kol_rzv - :p_kol_nal; 
    update nal 
    set kol_rzv = kol_nal 
    where id = :p_nal_id; 
  end 
  else begin 
    l_kol_raznasiane = :p_kol_rzv; 
    update nal 
    set kol_rzv = 0 
    where id = :p_nal_id; 
  end 
 
  for select 
    por_el.id, 
    por_el.kol_rzv 
  from por_el 
  join por on por.opr_id = por_el.opr_id and por.status in (0,1,2) 
  where 
    simple_id = :l_sim_id 
  order by por.za_data desc 
  into :l_por_el_id,:l_kol_rzv 
  do begin 
    if (l_kol_rzv >= l_kol_raznasiane) then begin 
      update por_el 
      set kol_rzv = :l_kol_rzv - :l_kol_raznasiane 
      where id = :l_por_el_id; 
      leave; 
    end 
    else begin 
      update por_el 
      set kol_rzv = 0 
      where id = :l_por_el_id; 
      l_kol_raznasiane = l_kol_raznasiane - l_kol_rzv; 
    end 
  end 
end^


ALTER PROCEDURE EDIT_SERIAL_NUM (
    P_EL_ID INTEGER,
    P_SN VARCHAR(30))
AS
DECLARE VARIABLE L_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_SIMPLE_ID INTEGER;
BEGIN
/*
V.1
РЕДАКТИРА СЕРИЕН НОМЕР НА ДАДЕН ЕЛЕМЕНТ ОТ ЕЛЕМЕНТ ОТ ДОСТАВКА
ВХ. ПАРАМЕТРИ
P_EL_ID РЕДАКТИРАНИЯ ЕЛЕМЕНТ
P_SN - НОВИЯТ СЕРИЕН НОМЕР
*/
    UPDATE SERIAL_NUM SET
    SERIAL_NUM.SN = :P_SN
    WHERE   SERIAL_NUM.PARTIDA_EL_ID = :P_EL_ID;
END^


ALTER PROCEDURE EDIT_SIMCALC_DOSTSUMA (
    P_SIMPLE_ID INTEGER)
AS
DECLARE VARIABLE L_LAST_CENA DOUBLE PRECISION; 
DECLARE VARIABLE L_CHILD_SIMPLE_ID INTEGER; 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_EL DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_DOST DOUBLE PRECISION; 
begin 
    L_SUMA_DOST = 0; 
    FOR SELECT 
            SIMPLE_CALC.CHILD_SIMPLE_ID, 
            SIMPLE_CALC.KOL, 
            CASE WHEN SIMPLE.RAZPAD = 0 THEN 
            (select FIRST 1 COALESCE(NAL.LAST_CENA, 0) FROM NAL WHERE NAL.SIMPLE_ID = SIMPLE_CALC.CHILD_SIMPLE_ID ORDER BY NAL.DATETIME_LASTCENA DESC) 
            ELSE SIMPLE.SUMA_DOST_CALC END 
    FROM 
            SIMPLE_CALC 
            INNER JOIN SIMPLE ON SIMPLE.ID = SIMPLE_CALC.CHILD_SIMPLE_ID 
    WHERE 
            SIMPLE_CALC.SIMPLE_ID =:P_SIMPLE_ID 
    INTO :L_CHILD_SIMPLE_ID, :L_KOL, :L_LAST_CENA 
 
 
    DO BEGIN 
        L_SUMA_EL = ROUNDD(L_KOL * COALESCE(L_LAST_CENA,0)); 
        L_SUMA_DOST = L_SUMA_DOST + L_SUMA_EL; 
 
    END 
 
    UPDATE SIMPLE 
    SET SUMA_DOST_CALC =:L_SUMA_DOST 
    where simple.ID =:P_SIMPLE_ID; 
 
end^


ALTER PROCEDURE EDIT_TS_OTC (
    P_ID TYPE OF DOM_KEY,
    P_OTC_FILE TYPE OF DOM_BLOB_TEXT)
RETURNS (
    R_ID INTEGER)
AS
BEGIN 
    UPDATE TS_OTC_FILES SET STATUS = 2 WHERE ID = :P_ID; 
    INSERT INTO TS_OTC_FILES (FOR_DATE, DATETIME, SUMA, OTC_DATA, OTC_TEXT, STATUS, OTC_NUMBER) 
    SELECT 
        FOR_DATE, 
        DATETIME, 
        SUMA, 
        :P_OTC_FILE, 
        OTC_TEXT, 
        0, 
        OTC_NUMBER 
    FROM 
        TS_OTC_FILES 
    WHERE 
        TS_OTC_FILES.ID = :P_ID 
    RETURNING ID INTO :R_ID; 
END^


ALTER PROCEDURE FAST_PARTIDA_HISTORY_OLD (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT = NULL)
AS
DECLARE VARIABLE L_OPR_DATE DATE; 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_EL_ID INTEGER; 
DECLARE VARIABLE L_OPR_ID INTEGER; 
DECLARE VARIABLE L_OPR_TIP SMALLINT; 
DECLARE VARIABLE L_SKLAD_ID SMALLINT; 
DECLARE VARIABLE L_IN_OUT SMALLINT; 
DECLARE VARIABLE L_PEN_ID INTEGER; 
DECLARE VARIABLE L_PEN_SUMA_FR DOUBLE PRECISION; 
DECLARE VARIABLE L_PEN_SUMA_SR DOUBLE PRECISION; 
DECLARE VARIABLE L_DATE DATE; 
BEGIN 
    MERGE INTO NAL 
    USING 
        SKLAD 
    ON 
        SKLAD.ID = NAL.SKLAD_ID 
        AND NAL.SIMPLE_ID = :P_SIMPLE_ID 
    WHEN NOT MATCHED THEN INSERT 
        (SIMPLE_ID,SKLAD_ID,KOL_NAL,SUMA,SUMA_FR) 
         VALUES(:P_SIMPLE_ID, SKLAD.ID, 0.00, 0.00, 0.00); 
 
    INSERT INTO TMP_NAL(SKLAD_ID, KOL, SUMA_SR, SUMA_FR, LAST_CENA, SIMPLE_ID) 
    SELECT 
        NAL.SKLAD_ID, 
        NAL.KOL_NAL, 
        NAL.SUMA, 
        NAL.SUMA_FR, 
        COALESCE(NAL.LAST_CENA,0.00), 
        :P_SIMPLE_ID 
    FROM 
        NAL 
    WHERE 
        NAL.SIMPLE_ID = :P_SIMPLE_ID; 
 
    P_NEW_OPR_DATE = COALESCE(P_NEW_OPR_DATE, CURRENT_DATE); 
    P_OLD_OPR_DATE = COALESCE(P_OLD_OPR_DATE, CURRENT_DATE); 
 
    --ПРИ РЕДАКЦИЯ ТРЯБВА ДА СЕ ВЪРНА ДО МОМЕНТА НА ПО-РАННАТА ОТ ДВЕТЕ ДАТИ, ЗА ДА ПРЕНАРЕДЯ ОТ ТАМ ДО КРАЯ 
    L_DATE = IIF(P_OLD_OPR_DATE < P_NEW_OPR_DATE,P_OLD_OPR_DATE,P_NEW_OPR_DATE); 
 
    FOR SELECT 
        PH.R_KOL, 
        PH.R_EL_ID, 
        PH.R_OPR_ID, 
        PH.R_OPR_TIP, 
        PH.R_SKLAD_ID, 
        PH.R_OPR_DATE, 
        PH.R_IN_OUT 
    FROM 
        PARTIDA_HISTORY_SUB_QUERY(:P_SIMPLE_ID,:P_OPR_ID,:L_DATE,:P_SKLAD_ID) PH 
    ORDER BY R_OPR_DATE DESC, R_OPR_ID DESC 
    INTO 
        :L_KOL,:L_EL_ID,:L_OPR_ID,:L_OPR_TIP,:L_SKLAD_ID,:L_OPR_DATE,:L_IN_OUT 
    DO BEGIN 
        IF (L_IN_OUT = 0) THEN BEGIN --ИЗХОД ОТ СКЛАДА 
            SELECT 
                SUM(PEN.SUMA_FR), 
                SUM(PEN.SUMA_SR) 
            FROM 
                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PEN.ID = PON.PARTIDA_NODE_ID AND 
                PON.OUT_EL_ID = :L_EL_ID 
            INTO 
                :L_PEN_SUMA_FR,:L_PEN_SUMA_SR; 
 
            L_PEN_SUMA_FR = ROUND(COALESCE(L_PEN_SUMA_FR,0.00),2); 
            L_PEN_SUMA_SR = ROUND(COALESCE(L_PEN_SUMA_SR,0.00),2); 
 
            UPDATE OPR_SUMI SET 
                SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR,2), 
                SUMA_SR = ROUND(SUMA_SR - :L_PEN_SUMA_SR,2) 
            WHERE 
                OPR_ID = :L_OPR_ID; 
 
            IF(L_OPR_TIP IN (56,57)) THEN BEGIN 
                UPDATE SUMI SET 
                    SUMI.SUMA = ROUND(SUMI.SUMA - :L_PEN_SUMA_FR,2), 
                    SUMI.SUMA_OST = ROUND(SUMI.SUMA_OST - :L_PEN_SUMA_FR,2) 
                WHERE 
                    SUMI.OPR_ID = :L_OPR_ID; 
            END 
 
            UPDATE OUT_EL SET 
                SUMA_SR = 0.00, 
                SUMA_FR = 0.00 
            WHERE 
                ID = :L_EL_ID; 
 
            FOR SELECT 
                PON.PARTIDA_NODE_ID 
            FROM 
                PARTIDA_OUT_EL_NODE PON 
            WHERE 
                PON.OUT_EL_ID = :L_EL_ID 
            INTO 
                :L_PEN_ID 
            DO BEGIN 
                DELETE FROM PARTIDA_EL_NODE 
                WHERE ID = :L_PEN_ID; 
            END 
 
            DELETE FROM IZL WHERE OUT_EL_ID = :L_EL_ID; 
 
            IF (L_OPR_TIP IN (27,39)) THEN BEGIN 
                --ЩЕ СЕ МАХНАТ СЛУЖЕБНИТЕ ПРЕХВЪРЛЯНИЯ ЗА ВРЪЩАНЕТО. ЩЕ СЕ ДОБАВЯТ СЪОТВЕТНИ КОЛИЧЕСТВА 
                --В ИЗХОДНИТЕ СКЛАДОВЕ И ЩЕ СЕ НАМАЛИ ОТ ТУК 
                EXECUTE PROCEDURE FAST_RETURN_AUTO_MOVE(L_OPR_ID,P_SIMPLE_ID); 
            END 
        END 
        ELSE IF (L_IN_OUT = 1) THEN BEGIN --ВХОД ОТ СКЛАДА 
 
            --НАМАЛЯВАМЕ СУМИТЕ И КОЛИЧЕСТВАТА В NAL 
            SELECT 
                SUM(PEN.SUMA_FR), 
                SUM(PEN.SUMA_SR) 
            FROM 
                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PEN.ID = PIN.PARTIDA_NODE_ID AND 
                PIN.IN_EL_ID = :L_EL_ID 
            INTO 
                :L_PEN_SUMA_FR,:L_PEN_SUMA_SR; 
 
            L_PEN_SUMA_FR = ROUND(COALESCE(L_PEN_SUMA_FR,0.00),2); 
            L_PEN_SUMA_SR = ROUND(COALESCE(L_PEN_SUMA_SR,0.00),2); 
 
            UPDATE OPR_SUMI SET 
                SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR,2), 
                SUMA_SR = ROUND(SUMA_SR - :L_PEN_SUMA_SR,2) 
            WHERE 
                OPR_ID = :L_OPR_ID; 
 
            IF (L_OPR_TIP IN (4,26,41,46,48,58)) THEN BEGIN 
                --ЗА ТОЗИ ВХОД ПАРТИДИТЕ ЩЕ СЕ ИЗЧИСЛЯТ НАНОВО, ЗАТОВА ГО ТРИЕМ КАТО ИСТОРИЯ 
                FOR SELECT 
                    PEN.ID 
                FROM 
                    PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PEN.ID = PIN.PARTIDA_NODE_ID AND 
                    PIN.IN_EL_ID = :L_EL_ID 
                INTO 
                    :L_PEN_ID 
                DO 
                    DELETE FROM PARTIDA_EL_NODE WHERE ID = :L_PEN_ID; 
            END 
 
            IF(L_OPR_TIP IN (55,58)) THEN BEGIN 
                UPDATE SUMI SET 
                    SUMI.SUMA = ROUND(SUMI.SUMA - :L_PEN_SUMA_FR,2), 
                    SUMI.SUMA_OST = ROUND(SUMI.SUMA_OST - :L_PEN_SUMA_FR,2) 
                WHERE 
                    SUMI.OPR_ID = :L_OPR_ID; 
 
                IF (L_OPR_TIP = 58) THEN 
                    DELETE FROM OPR_RAZPAD_NODE 
                    WHERE 
                        IN_EL_ID = :L_EL_ID; 
            END 
        END 
    END 
END^


ALTER PROCEDURE FAST_RETURN_AUTO_MOVE (
    P_RET_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER)
AS
DECLARE VARIABLE L_RET_OPR_ID INTEGER; 
DECLARE VARIABLE L_MOVE_OPR_ID INTEGER; 
DECLARE VARIABLE L_PN_ID INTEGER; 
DECLARE VARIABLE L_PEN_ID INTEGER; 
DECLARE VARIABLE L_PEN_SUMA_FR DOUBLE PRECISION; 
DECLARE VARIABLE L_PEN_SUMA_SR DOUBLE PRECISION; 
BEGIN 
    --ИЗХОДИТЕ ОТ СКЛАДОВЕТЕ, КЪМ ТОЗИ НА ВРЪЩАНЕТО. УВЕЛИЧАВАМ НАЛИЧНОСТИТЕ И ЗАПАЗЕНИТЕ КОЛИЧЕСТВА 
 
    FOR SELECT 
        OPR_OUT.ID, 
        OPR_IN.ID 
    FROM 
        RET_DOST_MOVE_NODE RDM INNER JOIN OPR OPR_OUT ON RDM.OUT_OPR_ID = OPR_OUT.ID AND RDM.RET_OPR_ID = :P_RET_OPR_ID 
        INNER JOIN OPR OPR_IN ON RDM.IN_OPR_ID = OPR_IN.ID AND RDM.RET_OPR_ID = :P_RET_OPR_ID 
    INTO 
        :L_MOVE_OPR_ID,:L_RET_OPR_ID 
    DO BEGIN 
        SELECT 
            SUM(PEN.SUMA_FR), 
            SUM(PEN.SUMA_SR) 
        FROM 
            PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PEN.ID = PON.PARTIDA_NODE_ID 
            INNER JOIN OUT_EL ON OUT_EL.OPR_ID = :L_MOVE_OPR_ID AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
            AND OUT_EL.ID = PON.OUT_EL_ID 
        INTO 
            :L_PEN_SUMA_FR,:L_PEN_SUMA_SR; 
 
        L_PEN_SUMA_FR = COALESCE(L_PEN_SUMA_FR,0.00); 
        L_PEN_SUMA_SR = COALESCE(L_PEN_SUMA_SR,0.00); 
 
        UPDATE OPR_SUMI SET 
        SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR,2), 
        SUMA_SR = ROUND(SUMA_SR - :L_PEN_SUMA_SR,2) 
        WHERE OPR_ID = :L_MOVE_OPR_ID; 
 
        FOR SELECT 
            PEN.ID 
        FROM 
            PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.PARTIDA_NODE_ID = PEN.ID 
            INNER JOIN OUT_EL ON OUT_EL.OPR_ID = :L_MOVE_OPR_ID AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
            AND OUT_EL.ID = PON.OUT_EL_ID 
        INTO 
            :L_PEN_ID 
        DO BEGIN 
            DELETE FROM PARTIDA_EL_NODE WHERE ID = :L_PEN_ID; 
        END 
 
        DELETE FROM OUT_EL 
        WHERE OUT_EL.OPR_ID = :L_MOVE_OPR_ID 
        AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID; 
 
        --ВХОДЯЩИТЕ ЕЛЕМЕНТИ - НАМАЛЯВАМ НАЛИЧНОСТИТЕ ВЪВ СКЛАДА НА ВРЪЩАНЕТО 
 
        SELECT 
            SUM(PEN.SUMA_FR), 
            SUM(PEN.SUMA_SR) 
        FROM 
            PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PEN.ID = PIN.PARTIDA_NODE_ID 
            INNER JOIN IN_EL ON IN_EL.OPR_ID = :L_RET_OPR_ID AND IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
            AND IN_EL.ID = PIN.IN_EL_ID 
        INTO 
            :L_PEN_SUMA_FR,:L_PEN_SUMA_SR; 
 
        L_PEN_SUMA_FR = COALESCE(L_PEN_SUMA_FR,0.00); 
        L_PEN_SUMA_SR = COALESCE(L_PEN_SUMA_SR,0.00); 
 
 
        FOR SELECT DISTINCT 
            PEN.PARTIDA_ID 
        FROM 
            PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.PARTIDA_NODE_ID = PEN.ID 
            INNER JOIN IN_EL ON IN_EL.OPR_ID = :L_RET_OPR_ID AND IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
            AND IN_EL.ID = PIN.IN_EL_ID 
        INTO 
            :L_PN_ID 
        DO BEGIN 
            FOR SELECT 
                PEN.ID 
            FROM 
                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.PARTIDA_NODE_ID = PEN.ID 
                INNER JOIN IN_EL ON IN_EL.OPR_ID = :L_RET_OPR_ID AND IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
                AND IN_EL.ID = PIN.IN_EL_ID 
                AND PEN.PARTIDA_ID = :L_PN_ID 
            INTO 
                :L_PEN_ID 
            DO BEGIN 
                DELETE FROM PARTIDA_EL_NODE WHERE ID = :L_PEN_ID; 
            END 
 
            DELETE FROM PARTIDA_NAL WHERE ID = :L_PN_ID; 
        END 
 
        DELETE FROM IN_EL 
        WHERE IN_EL.OPR_ID = :L_RET_OPR_ID 
        AND IN_EL.SIMPLE_ID = :P_SIMPLE_ID; 
    END 
END^


ALTER PROCEDURE FIND_KOL_FOR_IZL (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID INTEGER,
    P_OPR_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_DATE DATE)
RETURNS (
    R_RESULT SMALLINT)
AS
DECLARE VARIABLE L_OPR_ID INTEGER;
DECLARE VARIABLE L_OUT_EL_ID INTEGER;
DECLARE VARIABLE L_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_SUM_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_PN_IN_EL_ID INTEGER;
DECLARE VARIABLE L_PN_EL_ID INTEGER;
DECLARE VARIABLE L_PN_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PN_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_PN_ID INTEGER;
DECLARE VARIABLE L_KOL_IZL DOUBLE PRECISION;
DECLARE VARIABLE L_RZP_KOL_TOTAL DOUBLE PRECISION;
DECLARE VARIABLE L_RZP_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_RZP_KOL_PN DOUBLE PRECISION;
DECLARE VARIABLE L_FLAG_DEL SMALLINT;
DECLARE VARIABLE L_IZL_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_IZL_ID INTEGER;
DECLARE VARIABLE L_SUMA_SR_PARTIDA DOUBLE PRECISION;
DECLARE VARIABLE L_PARTIDA_IZL_NODE_ID INTEGER;
BEGIN  
    /*V.3*/  
/*    R_RESULT = 1;
  
    FOR SELECT  
        OUT_EL.ID,  
        OUT_EL.KOL,  
        OUT_EL.SUMA_SR,  
        OUT_EL.OPR_ID  
    FROM  
        OUT_EL INNER JOIN OPR ON OUT_EL.OPR_ID = OPR.ID  
    WHERE  
        OUT_EL.SIMPLE_ID = :P_SIMPLE_ID  
        AND OPR.OPR_TIP = 2  
        AND OPR.SKLAD_ID = :P_SKLAD_ID  
        AND ((OPR.OPR_DATE < :P_DATE) OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID < :P_OPR_ID)))  
    ORDER BY  
        OPR.OPR_DATE DESC, OPR.ID DESC  
    INTO  
        :L_OUT_EL_ID,:L_KOL,:L_SUMA_SR,:L_OPR_ID  
    DO BEGIN  

        --    1. НАМЕРЯ КОЛКО Е ВРЪЩАНО ОБЩО
        --    2. ДА НАМЕРЯ КОЛКО КОЛ ОТ ПАРТИДИ СА ПОЛЗВАНИ
        --    3. КОЛКО МОГА ДА ВЪРНА ОТ ТОЗИ ОУТ_ЕЛ
        --    4. ЗА ВСЯКА ПАРТИДА ДА ВИДЯ КОЛКО Е ПОЛЗВАНО ЗА ВРЪЩАНЕ
        --    5. ДА ОПРЕДЕЛЯ КОЛКО МОГА ДА ВЪРНА ОТ ТАЗИ ПАРТИДА
        --    6. ДА ИЗВЪРША СAМОТО ВРЪЩАНЕ ПО НЯКАКЪВ НАЧИН

        SELECT  
            COALESCE(SUM(IN_EL.KOL),0)  
        FROM  
            OPR_RAZPAD_NODE INNER JOIN IN_EL ON (OPR_RAZPAD_NODE.OUT_EL_ID = :L_OUT_EL_ID AND  OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID)  
        INTO  
            :L_RZP_KOL;--ОБЩОТО ВЪРНАТО ЗА ТОЗИ ОУТ_ЕЛ
  
        SELECT  
            COALESCE(SUM(PN.KOL),0)  
        FROM  
            PARTIDA_EL_NODE PN INNER JOIN PARTIDA_OUT_EL_NODE PON ON (PON.OUT_EL_ID = :L_OUT_EL_ID AND PN.ID = PON.PARTIDA_NODE_ID)  
        INTO  
            :L_RZP_KOL_TOTAL;--ОБЩОТО КОЛИЧЕСТВО ПО ПАРТИДИ ЗА ТОЗИ ОУТ_ЕЛ - ТРЯБВА ДА Е >= ОТ ВРЪЩАНОТО.
            --НЕ МОЖЕ ПРОДАЖБА ДА ВРЪЩА ПОВЕЧЕ ОТКОЛКОТО СА ПАРТИДИТЕ
          
  
        L_RZP_KOL = ROUND5(L_RZP_KOL_TOTAL - L_RZP_KOL);--КОЛКО МОГА ДА ВРЪЩАМ ОТ ТОЗИ ОУТ_ЕЛ - ОБЩО ПОЛЗВАНОТО
        --ОТ ПАРТИДИ - ТОВА, КОЕТО ТРЯБВА ДА ОСТАНЕ ЗА ВРЪЩАНЕ
  
        L_SUM_SUMA_SR = 0;  
        FOR SELECT  
            P1.ID,  
            P1.IN_EL_ID,  
            P1.ELEMENT_ID,  
            P1.KOL,  
            P1.SUMA,  
            COALESCE(PARTIDA_IZL_NODE.ID,0)  
        FROM  
            PARTIDA_EL_NODE P1 INNER JOIN PARTIDA_OUT_EL_NODE PO1 ON (PO1.OUT_EL_ID = :L_OUT_EL_ID AND  
            P1.ID = PO1.PARTIDA_NODE_ID)  
            LEFT JOIN PARTIDA_IZL_NODE ON PARTIDA_IZL_NODE.PARTIDA_EL_ID = P1.ID  
        ORDER BY 6 DESC  
        INTO  
            :L_PN_ID,:L_PN_IN_EL_ID,:L_PN_EL_ID,:L_PN_KOL,:L_PN_SUMA,:L_PARTIDA_IZL_NODE_ID  
        DO IF (L_RZP_KOL > 0) THEN BEGIN --ВСЕ ОЩЕ МОЖЕ ДА СЕ ОТНЕМА ОТ ТОЗИ ОУТ_ЕЛ
            SELECT  
                COALESCE(SUM(PEN.KOL),0)  
            FROM  
                OPR_RAZPAD_NODE ORN INNER JOIN IN_EL ON (IN_EL.ID = ORN.IN_EL_ID AND ORN.OUT_EL_ID = :L_OUT_EL_ID)  
                INNER JOIN PARTIDA_EL_NODE PEN ON (PEN.IN_EL_ID = IN_EL.ID AND PEN.OPR_ID = IN_EL.OPR_ID AND PEN.ELEMENT_ID = :L_PN_EL_ID)  
            INTO  
                :L_RZP_KOL_PN;--КОЛКО ОТ ПАРТИДАТА ВЕЧЕ Е ИЗПОЛЗВАНА ЗА ВРЪЩАНЕ
  
            L_RZP_KOL_PN = ROUND5(L_PN_KOL - L_RZP_KOL_PN);--КОЛКО МОГА ДА ВРЪЩАМ ОТ ТАЗИ ПАРТИДА
  
            IF (L_RZP_KOL_PN > 0) THEN BEGIN --МОЖЕ ДА СЕ ОТНЕМА ОТ ТАЗИ ПАРТИДА
                L_FLAG_DEL = 0;  
                IF (L_RZP_KOL_PN > P_KOL) THEN BEGIN  
                    --АКО КОЛИЧЕСТВОТО, С КОЕТО МОЖЕ ДА СЕ ОТНЕМА Е ПО-ГОЛЯМО ОТ
                    --ОТСТАНАЛОТО ЗА РАЗПРЕДЕЛЕНИЕ ИЗЧИСЛЯВАМ КАКВА ТОЧНО СУМА
                    --И КОЛИЧЕСТВО ЩЕ ВЪРНА КЪМ ПАРТИДАТА
                    L_PN_SUMA = ROUNDD(ROUND5(L_PN_SUMA / L_PN_KOL) * P_KOL);  
                    L_PN_KOL = P_KOL;  
                END  
                ELSE BEGIN  
                    IF (L_RZP_KOL_PN = L_PN_KOL) THEN  
                        L_FLAG_DEL = 1;--ЩЕ ИЗПОЛЗВАМ ЦЯЛОТО КОЛИЧЕСТВО ОТ ПАРТИДАТА И ВРЪЗКАТА В PARTIDA_EL_NODE ТРАБВА ДА СЕ ИЗТРИЕ
  
                    L_PN_SUMA = ROUNDD(ROUND5(L_PN_SUMA / L_PN_KOL) * L_RZP_KOL_PN);  
                    L_PN_KOL = L_RZP_KOL_PN;  
                END  
  
                L_IZL_ID = NULL;  
  
                SELECT  
                    PARTIDA_IZL_NODE.IZL_ID  
                FROM  
                    PARTIDA_IZL_NODE  
                WHERE  
                    PARTIDA_IZL_NODE.PARTIDA_EL_ID = :L_PN_ID  
                INTO  
                    :L_IZL_ID;  
  
                IF (L_FLAG_DEL = 0) THEN BEGIN  
                    --ИЗЧИСЛЕНИТЕ КОЛИЧЕСТВО И СУМА СЕ ОТНЕМАТ ОТ "УЧАСТИЕ" КЪМ ЕЛЕМЕНТА
                    UPDATE PARTIDA_EL_NODE SET  
                    PARTIDA_EL_NODE.KOL = ROUND5(PARTIDA_EL_NODE.KOL - :L_PN_KOL),  
                    PARTIDA_EL_NODE.SUMA = ROUNDD(PARTIDA_EL_NODE.SUMA - :L_PN_SUMA)  
                    WHERE PARTIDA_EL_NODE.ID = :L_PN_ID;  
                      
                    --ИМА ИЗЛИШЪК ЗА ТАЗИ ПАРТИДА, НО НЯМА ДА Я ТРИЯ - ЗАТОВА УВЕЛИЧАВАМ
                    --КОЛИЧЕСТВОТО ОСТАВАЩО ЗА КОРЕКЦИЯ
                    IF (L_IZL_ID IS NOT NULL) THEN BEGIN  
  
                        UPDATE IZL SET  
                        KOL_IZL = ROUND5(KOL_IZL + :L_PN_KOL)  
                        WHERE ID = :L_IZL_ID;  
                    END  
                END  
                ELSE BEGIN  
                    --ИЗТРИВАМ ВРЪЗКАТА НА ПАРТИДАТА С OUT_EL. НЯМА ДА ЪПДЕЙТВАМ
                    --ИЗЛ - ТРИГЕРА ПРЕДИ ИСТРИВАНЕ СЕ ГРИЖИ ЗА ТОВА
                    DELETE FROM PARTIDA_EL_NODE  
                    WHERE PARTIDA_EL_NODE.ID = :L_PN_ID;  
                END  
  
                L_IZL_KOL = L_PN_KOL;--ЩЕ ПОМНЯ КАКВО КОЛИЧЕСТВО СЪМ ПОДГОТВИЛ ЗА ИЗЛИШЪК,
                --АКО ДОБАВЯМ КЪМ СЪЩЕСТВУВАЩ - ДА ГО ПРЕГЛЕДАМ ИМА ЛИ НУЖДА ОТ НЕГО!!!
  
                L_RZP_KOL = ROUND5(L_RZP_KOL - L_PN_KOL);--ОСТАТЪК, КОЙТО МОЖЕ ДА СЕ ОТНЕМА ОТ ТОЗИ ОУТ_ЕЛ
  
                --ТЪРСЯ ДАЛИ ПАРТИДАТА ИМА ВСЕ ОЩЕ НАЛИЧНО ИЛИ Е ИЗЧЕРПАНА
                L_PN_ID = NULL;  
                SELECT  
                    RDB$PARTIDA_NAL.ID  
                FROM  
                    RDB$PARTIDA_NAL  
                WHERE  
                    RDB$PARTIDA_NAL.IN_EL_ID = :L_PN_IN_EL_ID  
                    AND RDB$PARTIDA_NAL.ELEMENT_ID = :L_PN_EL_ID  
                INTO  
                    :L_PN_ID;  
  
                IF (L_PN_ID IS NULL) THEN BEGIN  
                --ПАРТИДАТА Е ИЗЧЕРПАНА ЩЕ ГЕНЕРИРАМ НОВА
                    INSERT INTO RDB$PARTIDA_NAL (KOL_NAL,SUMA, ELEMENT_ID, IN_EL_ID)  
                    VALUES (:L_PN_KOL, :L_PN_SUMA,:L_PN_EL_ID,:L_PN_IN_EL_ID);  
                END  
                ELSE BEGIN  
                --ПАРТИДАТА Я ИМА - ЩЕ ДОБАВЯ КОЛИЧЕСТВО КЪМ НЕЯ
                    UPDATE RDB$PARTIDA_NAL SET  
                    RDB$PARTIDA_NAL.KOL_NAL = ROUND5(RDB$PARTIDA_NAL.KOL_NAL + :L_PN_KOL),  
                    RDB$PARTIDA_NAL.SUMA = ROUNDD(RDB$PARTIDA_NAL.SUMA + :L_PN_SUMA)  
                    WHERE RDB$PARTIDA_NAL.ID = :L_PN_ID;  
                END  
  
                --ПРОВЕРКА ДАЛИ ЗА ТОЗИ ЕЛЕМЕНТ ИМА ИЗЛИШЪК - АКО ДА ЩЕ ДОБАВИМ КЪМ
                --НЕГО, АКО НЕ ЩЕ СЪЗДАМ НОВ ИЛИЗШЪК
                L_PN_ID = NULL;  
                SELECT  
                    IZL.ID,  
                    COALESCE(IZL.KOL,0)  
                FROM  
                    IZL  
                WHERE  
                    IZL.OUT_EL_ID = :L_OUT_EL_ID  
                INTO  
                    :L_PN_ID,:L_KOL_IZL;  
              
                IF (L_PN_ID IS NULL) THEN BEGIN  
                    INSERT INTO IZL (KOL,OUT_EL_ID,LAST_CENA)  
                    VALUES (:L_PN_KOL,:L_OUT_EL_ID,ROUND5(:L_SUMA_SR / :L_RZP_KOL_TOTAL));  
                END  
                ELSE BEGIN  
                    --ЗА ТОЗИ ЕЛЕМЕНТ ИМАМ ВЕЧЕ ИЗЛИШЪК - САМО КАЗВАМ, ЧЕ КОЛИЧЕСТВОТО
                    --СЕ УВЕЛИЧАВА. СЪЩО И КОЛИЧЕСТВОТО ОСТАВАЩО ЗА КОМПЕНСАЦИЯ
  
                    --СУМА СП ЗА ОТНЕМАНЕ Е = НА ЕД.ЦЕНА, КОЯТО ПОЛУЧАВАМЕ КАТО СУМА СП ЗА
                    --ЕЛЕМЕНТА РАЗДЕЛИМ НА РАЗЛИКАТА ОТ КОЛИЧЕСТВОТО НА ЕЛЕМЕНТА И
                    --КОЛИЧЕСТВОТО, КОЕТО МУ Е КАТО ИЗЛИШЪК. ПОЛУЧЕНАТА ЕД.ЦЕНА СЕ
                    --УМНОЖАВА ПО КОЛИЧЕСТОВОТО ОТ ПАРТИДАТА
--                    L_SUMA_SR = ROUNDD(ROUND5(L_SUMA_SR / L_RZP_KOL_TOTAL) * L_PN_KOL);  
  
                    IF (L_IZL_ID IS NULL) THEN BEGIN  
                    --ИМАМЕ ИЗЛИШЪК ЗА ТОЗИ ЕЛЕМЕНТ, НО ПАРТИДАТА НЕ УЧАСТВА В НЕГО
                    --ТЯ Е ОТ НОРМАЛНО РАЗПРЕДЕЛЕНОТО КОЛИЧЕСТВО
                        UPDATE IZL SET  
                        IZL.KOL     = ROUND5(IZL.KOL + :L_PN_KOL),  
                        IZL.KOL_IZL = ROUND5(IZL.KOL_IZL + :L_PN_KOL)  
                        WHERE  
                        IZL.OUT_EL_ID = :L_OUT_EL_ID;  
                    END  
                END  
  
                L_SUMA_SR_PARTIDA = ROUNDD(ROUND5(L_SUMA_SR / L_RZP_KOL_TOTAL) * L_PN_KOL);  
                --ЕД.ЦЕНА ПО СРЕДНО ПРЕТЕГЛЕНА * КОЛИЧЕСТВОТО, КОЕТО СЕ ВРЪЩА ОТ ПАРТИДАТА
  
                --НАТРУПВАМЕ СУМА СП КАТО ОТ СУМА СП ЗА ЕЛЕМЕНЕТА НА ИЗХОДА ПОЛУЧАВАМЕ,
                --ЕД.ЦЕНА ПО СП И УМНОЖАВАМЕ ТАЗИ ЦЕНА ПО КОЛИЧЕСТВОТО, КОЕТО ЩЕ ИЗПОЛЗВАМЕ
                --ПО СЪЩИЯ НАЧИН ДОБАВЯМЕ И В ТАБЛИЦА NAL СУМА СП
  
--                L_SUM_SUMA_SR = ROUNDD(L_SUM_SUMA_SR + L_SUMA_SR);  
                L_SUM_SUMA_SR = ROUNDD(L_SUM_SUMA_SR + L_SUMA_SR_PARTIDA);  
  
                UPDATE RDB$NAL SET  
                RDB$NAL.SUMA_FR = ROUNDD(RDB$NAL.SUMA_FR + :L_PN_SUMA),  
--                RDB$NAL.SUMA = ROUNDD(RDB$NAL.SUMA + :L_SUMA_SR),  
                RDB$NAL.SUMA = ROUNDD(RDB$NAL.SUMA + :L_SUMA_SR_PARTIDA),  
                RDB$NAL.KOL = ROUND5(RDB$NAL.KOL + :L_PN_KOL)  
                WHERE RDB$NAL.SKLAD_ID = :P_SKLAD_ID;  
  
                --ОТНЕМАМЕ ОТ СУМА ПВ ЗА ЕЛЕМЕНТА НА ПРОДАЖБАТА И ОТ САМАТА ПРОДАЖБА
                UPDATE OUT_EL SET  
                OUT_EL.SUMA_FR = ROUNDD(OUT_EL.SUMA_FR - :L_PN_SUMA)  
                WHERE OUT_EL.ID = :L_OUT_EL_ID;  
  
                UPDATE OUT SET  
                OUT.SUMA_FR = ROUNDD(OUT.SUMA_FR - :L_PN_SUMA)  
                WHERE OUT.OPR_ID = :L_OPR_ID;  
 
                --НОВ НАЧИН
                UPDATE OPR_SUMI SET 
                OPR_SUMI.SUMA_FR = ROUNDD(OPR_SUMI.SUMA_FR - :L_PN_SUMA) 
                WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
  
                P_KOL = ROUND5(P_KOL - L_PN_KOL);  
  
                --АКО ЦЯЛОТО КОЛИЧЕСТВО Е РАЗПРЕДЕЛЕНО СЕ ИЗЛИЗА УСПЕШНО ОТ
                --ПРОЦЕДУРАТА, КАТО СМЕНЯМЕ СУМАТА ПО ПВ ЗА ТОЗИ
                IF (ROUND5(P_KOL) = 0) THEN BEGIN  
                    R_RESULT = 0;  
                    UPDATE OUT SET  
                    OUT.SUMA_SR = ROUNDD(OUT.SUMA_SR - :L_SUM_SUMA_SR)  
                    WHERE OUT.OPR_ID = :L_OPR_ID;  
 
                    --НОВ НАЧИН
                    UPDATE OPR_SUMI SET 
                    OPR_SUMI.SUMA_SR = ROUNDD(OPR_SUMI.SUMA_SR - :L_SUM_SUMA_SR) 
                    WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
                  
                    UPDATE OUT_EL SET  
                    OUT_EL.SUMA_SR = ROUNDD(OUT_EL.SUMA_SR - :L_SUM_SUMA_SR)  
                    WHERE OUT_EL.ID = :L_OUT_EL_ID;  
  
                    EXIT;  
                END  
            END  
        END  
        --ПРЕДИ ДА СЕ МИНЕ НА СЛЕДВАЩИ ЕЛЕМЕНТ ОТ ПРОДАЖБА - МАХАМЕ СУМА СП
        --ОТ ТЕКУЩО РАЗГЛЕЖДАНИЯ, КАКТО И ОТ НЕГОВАТА ПРОДАЖБА
        UPDATE OUT SET  
        OUT.SUMA_SR = ROUNDD(OUT.SUMA_SR - :L_SUM_SUMA_SR)  
        WHERE OUT.OPR_ID = :L_OPR_ID;  
 
        --НОВ НАЧИН
        UPDATE OPR_SUMI SET 
        OPR_SUMI.SUMA_SR = ROUNDD(OPR_SUMI.SUMA_SR - :L_SUM_SUMA_SR) 
        WHERE OPR_SUMI.OPR_ID = :L_OPR_ID; 
  
        UPDATE OUT_EL SET  
        OUT_EL.SUMA_SR = ROUNDD(OUT_EL.SUMA_SR - :L_SUM_SUMA_SR)  
        WHERE OUT_EL.ID = :L_OUT_EL_ID;  
    END  */
END^


ALTER PROCEDURE FIND_SIMPLES_FOR_RECALC (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_FLAG_FKT TYPE OF DOM_FLAG,
    P_DEPTH TYPE OF DOM_SMAL_INT)
RETURNS (
    R_DEPTH TYPE OF DOM_SMAL_INT)
AS
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_DEPTH TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_OPR_DATE TYPE OF DOM_DATE; 
DECLARE VARIABLE L_FLAG_CALC TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_OLD_CALC_DATE TYPE OF DOM_DATE; 
DECLARE VARIABLE L_OLD_CALC_OPR_ID TYPE OF DOM_KEY; 
BEGIN 
    R_DEPTH = P_DEPTH; 
 
 
    P_NEW_OPR_DATE = COALESCE(P_NEW_OPR_DATE, CURRENT_DATE); 
    P_OLD_OPR_DATE = COALESCE(P_OLD_OPR_DATE, CURRENT_DATE); 
 
    --ПРИ РЕДАКЦИЯ ТРЯБВА ДА СЕ ВЪРНА ДО МОМЕНТА НА ПО-РАННАТА ОТ ДВЕТЕ ДАТИ, ЗА ДА ПРЕНАРЕДЯ ОТ ТАМ ДО КРАЯ  
    L_OPR_DATE = IIF(P_OLD_OPR_DATE < P_NEW_OPR_DATE, P_OLD_OPR_DATE, P_NEW_OPR_DATE); 
 
    IF (R_DEPTH >= 30) THEN 
        EXIT;--НЯЙ-ВЕРОЯТНО НЯКЪДЕ Е ЗАЦИКЛИЛО. ИЛИ КОНФИГУРАЦИИТЕ/ИСТОРИЯТА СА СТРАННО НАПРАВЕНИ  
 
    L_DEPTH = NULL; 
    SELECT 
        TMP.DEPTH, 
        TMP.FLAG_CALC, 
        TMP.OPR_ID, 
        TMP.OPR_DATE 
    FROM 
        TMP_SIMPLE_RECALC TMP 
    WHERE 
        SIMPLE_ID = :P_SIMPLE_ID 
    INTO 
        :L_DEPTH, :L_FLAG_CALC, :L_OLD_CALC_OPR_ID, :L_OLD_CALC_DATE; 
 
    IF ( (L_OPR_DATE > COALESCE(L_OLD_CALC_DATE, L_OPR_DATE)) 
    OR ((L_OPR_DATE = COALESCE(L_OLD_CALC_DATE, L_OPR_DATE)) 
        AND (P_OPR_ID > COALESCE(L_OLD_CALC_OPR_ID, P_OPR_ID)))) 
    THEN BEGIN 
        EXIT; 
    END 
 
    UPDATE OR INSERT INTO TMP_SIMPLE_RECALC(SIMPLE_ID, DEPTH, FLAG_CALC, OPR_ID, OPR_DATE) 
    VALUES(:P_SIMPLE_ID, MAXVALUE(:P_DEPTH, COALESCE(:L_DEPTH, 0)), COALESCE(:L_FLAG_CALC, 0), :P_OPR_ID, :L_OPR_DATE) 
    MATCHING(SIMPLE_ID); 
 
    FOR SELECT DISTINCT 
        IN_EL.SIMPLE_ID 
    FROM 
        OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.OPR_TIP IN (28, 32, 76, 80) 
        AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
        INNER JOIN OPR_RAZPAD_NODE ORN ON ORN.OUT_EL_ID = OUT_EL.ID 
        INNER JOIN IN_EL ON IN_EL.ID = ORN.IN_EL_ID 
    WHERE 
        OPR.OPR_DATE > :L_OPR_DATE 
        OR (OPR.OPR_DATE = :L_OPR_DATE AND OPR.ID >= :P_OPR_ID) 
        AND OUT_EL.IS_F = :P_FLAG_FKT 
    INTO 
        :L_SIMPLE_ID 
    DO BEGIN 
        EXECUTE PROCEDURE FIND_SIMPLES_FOR_RECALC(:P_OPR_ID, :L_SIMPLE_ID, :P_OLD_OPR_DATE, :P_NEW_OPR_DATE, :P_FLAG_FKT, :P_DEPTH + 1) 
        RETURNING_VALUES :L_DEPTH; 
        IF (L_DEPTH >= 30) THEN BEGIN 
            R_DEPTH = L_DEPTH; 
            EXIT; 
        END 
        ELSE 
            R_DEPTH = P_DEPTH + 1; 
 
        L_DEPTH = NULL; 
        SELECT 
            TMP.DEPTH, 
            TMP.FLAG_CALC 
        FROM 
            TMP_SIMPLE_RECALC TMP 
        WHERE 
            SIMPLE_ID = :L_SIMPLE_ID 
        INTO 
            :L_DEPTH,:L_FLAG_CALC; 
 
        UPDATE OR INSERT INTO TMP_SIMPLE_RECALC(SIMPLE_ID, DEPTH, FLAG_CALC, OPR_DATE, OPR_ID) 
        VALUES(:L_SIMPLE_ID, MAXVALUE(:R_DEPTH, COALESCE(:L_DEPTH, 0)), COALESCE(:L_FLAG_CALC, 0), :L_OPR_DATE, :P_OPR_ID) 
        MATCHING(SIMPLE_ID); 
    END 
END^


ALTER PROCEDURE FIX_ALL (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_FLAG_IZL TYPE OF DOM_SMAL_INT,
    P_FLAG_FKT TYPE OF DOM_SMAL_INT,
    P_OPR_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT,
    P_DATE TYPE OF DOM_DATE)
RETURNS (
    R_RESULT TYPE OF DOM_INT)
AS
DECLARE VARIABLE L_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_DATE TYPE OF DOM_DATE; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_FKT_SKLAD_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_IN_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_RSN TYPE OF DOM_SMAL_INT; 
BEGIN 
    R_RESULT = 0; 
    SELECT FIRST 1 
        SYSTEM.H_SKLAD 
    FROM 
        SYSTEM 
    INTO 
        :L_FKT_SKLAD_ID; 
 
    SELECT 
        CAST(SIMPLE.RSN AS SMALLINT) 
    FROM 
        SIMPLE 
    WHERE 
        ID = :P_SIMPLE_ID 
    INTO 
        :L_RSN; 
 
    IF (L_RSN IN (1, 3)) THEN 
        EXECUTE PROCEDURE PARTIDA_HISTORY_OLD_PARTIDA_SN(P_OPR_ID, P_SIMPLE_ID, P_DATE, P_DATE, P_SKLAD_ID); 
    ELSE 
        EXECUTE PROCEDURE FAST_PARTIDA_HISTORY_OLD(P_OPR_ID, P_SIMPLE_ID, P_DATE, P_DATE, P_SKLAD_ID); 
 
    IF (P_FLAG_FKT = 0) THEN BEGIN 
        FOR SELECT 
            IN_EL.ID 
        FROM 
            SKLAD INNER JOIN OPR ON OPR.SKLAD_ID = SKLAD.ID AND NOT OPR.SKLAD_ID = :L_FKT_SKLAD_ID 
            INNER JOIN IN_EL ON OPR.ID = IN_EL.OPR_ID AND IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
        INTO 
            :L_IN_EL_ID 
        DO BEGIN 
            UPDATE PARTIDA_NAL SET 
                KOL = 0.00, 
                SUMA_FR = 0.00 
            WHERE 
                IN_EL_ID = :L_IN_EL_ID; 
        END 
 
        UPDATE TMP_NAL SET 
            KOL = 0.00, 
            SUMA_SR = 0.00, 
            SUMA_FR = 0.00 
        WHERE 
            SIMPLE_ID = :P_SIMPLE_ID 
            AND NOT SKLAD_ID = :L_FKT_SKLAD_ID; 
    END 
    ELSE BEGIN 
        FOR SELECT 
            IN_EL.ID 
        FROM 
            SKLAD INNER JOIN OPR ON OPR.SKLAD_ID = SKLAD.ID AND OPR.SKLAD_ID = :L_FKT_SKLAD_ID 
            INNER JOIN IN_EL ON OPR.ID = IN_EL.OPR_ID AND IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
        INTO 
            :L_IN_EL_ID 
        DO BEGIN 
            UPDATE PARTIDA_NAL SET 
                KOL = 0.00, 
                SUMA_FR = 0.00 
            WHERE 
                IN_EL_ID = :L_IN_EL_ID; 
        END 
 
        UPDATE TMP_NAL SET 
            KOL = 0.00, 
            SUMA_SR = 0.00, 
            SUMA_FR = 0.00 
        WHERE 
            SIMPLE_ID = :P_SIMPLE_ID 
            AND SKLAD_ID = :L_FKT_SKLAD_ID; 
    END 
    IF (L_RSN IN (1, 3)) THEN 
        EXECUTE PROCEDURE PARTIDA_HISTORY_NEW_PARTIDA_SN(P_OPR_ID, P_SIMPLE_ID, P_DATE, P_DATE, P_SKLAD_ID, 0) 
        RETURNING_VALUES :R_RESULT; 
    ELSE 
        EXECUTE PROCEDURE PARTIDA_HISTORY_NEW_PARTIDA(P_OPR_ID, P_SIMPLE_ID, P_DATE, P_DATE, P_FLAG_IZL, P_SKLAD_ID, 0) 
        RETURNING_VALUES :R_RESULT; 
END ;^


ALTER PROCEDURE FIX_DOUBLE
AS
DECLARE VARIABLE L_PN_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PN_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_PN_ID INTEGER;
DECLARE VARIABLE L_PN_IN_EL_ID INTEGER;
DECLARE VARIABLE L_PN_ELEMENT_ID INTEGER;
BEGIN 
    FOR SELECT
        COUNT(PARTIDA_NAL.ID), 
        PARTIDA_NAL.IN_EL_ID, 
        PARTIDA_NAL.ELEMENT_ID 
    FROM 
        PARTIDA_NAL 
    GROUP BY 2,3 
    HAVING COUNT(PARTIDA_NAL.ID) > 1
    INTO 
        :L_PN_ID,:L_PN_IN_EL_ID,:L_PN_ELEMENT_ID 
    DO BEGIN 
        SELECT 
            SUM(PARTIDA_NAL.KOL),
            SUM(PARTIDA_NAL.SUMA_FR)
        FROM 
            PARTIDA_NAL 
        WHERE 
            PARTIDA_NAL.IN_EL_ID = :L_PN_IN_EL_ID 
            AND PARTIDA_NAL.ELEMENT_ID = :L_PN_ELEMENT_ID 
        INTO 
            :L_PN_KOL,:L_PN_SUMA; 
 
        DELETE FROM PARTIDA_NAL 
        WHERE IN_EL_ID = :L_PN_IN_EL_ID 
        AND ELEMENT_ID = :L_PN_ELEMENT_ID; 
 
        INSERT INTO PARTIDA_NAL (KOL,SUMA_FR,IN_EL_ID,ELEMENT_ID)
        VALUES (:L_PN_KOL,:L_PN_SUMA,:L_PN_IN_EL_ID,:L_PN_ELEMENT_ID); 
    END
END^


ALTER PROCEDURE FIX_GORIVO
RETURNS (
    ID INTEGER,
    KLI_ID INTEGER,
    SUMA DOUBLE PRECISION)
AS
declare variable L_KLI DOM_INT;
declare variable L_SUMA CURRENCY;
BEGIN
  l_kli = null;
  l_suma = null;
  FOR
    select
    opr.id, 
    opr.kli_id,
    opr.suma
    from opr
    where
      opr.USER_ID = 89 and
      opr.DATETIME between '09.01.2020 04:00:00' and '09.01.2020 04:10:00'
    
    order by cast(opr.DATETIME as date), opr.kli_id, opr.suma
    INTO :ID,
         :KLI_ID,
         :SUMA
  DO
  BEGIN


    if ((:l_kli <> :KLI_ID) or (:l_suma <> :suma)) then  begin

      delete from PARI
      where (opr_id = :ID);

      SUSPEND;
    end

    l_kli = :kli_id;
    l_suma = :suma;
  END
END^


ALTER PROCEDURE FIX_MOVE_ORN
AS
DECLARE VARIABLE L_OPR_ID INTEGER; 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_IN_EL_IN INTEGER; 
DECLARE VARIABLE L_OUT_EL_ID INTEGER; 
BEGIN 
 
    FOR SELECT DISTINCT 
        OUT_EL.OPR_ID 
 
    FROM 
        OPR INNER JOIN OUT_EL ON OPR.ID = OUT_EL.OPR_ID AND OPR.OPR_TIP = 9 
        INNER JOIN OPR_RAZPAD_NODE ORN ON ORN.OUT_EL_ID = OUT_EL.ID 
        INNER JOIN IN_EL ON IN_EL.ID = ORN.IN_EL_ID 
    WHERE 
        OUT_EL.SIMPLE_ID != IN_EL.SIMPLE_ID 
        AND CAST(OPR.DATETIME AS DATE) > '01.04.2010' 
    INTO 
        :l_OPR_ID 
    DO BEGIN 
        DELETE FROM OPR_RAZPAD_NODE 
        WHERE OUT_EL_ID IN ( 
            SELECT 
                OUT_EL.ID 
            FROM 
                OUT_EL 
            WHERE 
                OUT_EL.OPR_ID = :L_OPR_ID); 
 
        EXECUTE PROCEDURE MOVE_ADD_OPR_RAZPAD(:L_OPR_ID); 
 
        FOR SELECT 
            OPR_RAZPAD_NODE.IN_EL_ID, 
            OUT_EL.KOL 
        FROM 
            OPR_RAZPAD_NODE INNER JOIN OUT_EL ON OUT_EL.ID = OPR_RAZPAD_NODE.OUT_EL_ID 
            AND OUT_EL.OPR_ID = :L_OPR_ID 
        INTO 
            :L_IN_EL_IN,:L_KOL 
        DO BEGIN 
            UPDATE IN_EL SET 
            KOL = :L_KOL 
            WHERE ID = :L_IN_EL_IN; 
        END 
    END 
END^


ALTER PROCEDURE FREE_RZV_PARTIDA_KOL (
    P_OPR_ID INTEGER)
AS
DECLARE VARIABLE L_PEN_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PEN_PARTIDA_ID INTEGER;
DECLARE VARIABLE L_RZV_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_EL_ID INTEGER;
BEGIN
    FOR SELECT
        OUT_EL.ID
    FROM
        OUT_EL
    WHERE
        OUT_EL.OPR_ID = :P_OPR_ID
    INTO
        :L_OUT_EL_ID
    DO BEGIN
        FOR SELECT
            PEN.PARTIDA_ID,
            PEN.KOL
        FROM
            PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PEN.ID = PON.PARTIDA_NODE_ID AND
            PON.OUT_EL_ID = :L_OUT_EL_ID
        INTO
            :L_PEN_PARTIDA_ID,:L_PEN_KOL
        DO BEGIN
            L_RZV_KOL = NULL;
            
            SELECT
                TMP.KOL
            FROM
                TMP_PARTIDA_RZV_KOL TMP
            WHERE
                TMP.PARTIDA_ID = :L_PEN_PARTIDA_ID
            INTO
                :L_RZV_KOL;

            UPDATE OR INSERT INTO TMP_PARTIDA_RZV_KOL(PARTIDA_ID,KOL)
            VALUES (:L_PEN_PARTIDA_ID,ROUND(COALESCE(:L_RZV_KOL,0.00) - :L_PEN_KOL,5))
            MATCHING (PARTIDA_ID);
        END
    END
END^


ALTER PROCEDURE FTPDOCUMENT_EXISTS (
    P_CODE INTEGER,
    P_RECORD_ID INTEGER)
RETURNS (
    R_EXISTS INTEGER)
AS
declare variable L_ID integer; 
BEGIN 
  R_EXISTS = 0; 
  FOR SELECT FIRST 1 
    T.ID 
  FROM 
  ( 
    SELECT 
      DOCUMENTS.ID 
    FROM 
      DOCUMENTS 
      INNER JOIN "USER" U ON U.ID = DOCUMENTS.USER_ID AND DOCUMENTS.DOC_CODE = :P_CODE AND DOCUMENTS.RECORD_ID = :P_RECORD_ID AND DOCUMENTS.STATUS = 0 
      INNER JOIN DOCUMENTS_TIP ON DOCUMENTS_TIP.ID = DOCUMENTS.DOC_TYPE 
 
    UNION 
 
    SELECT 
      DOCUMENTS.ID 
    FROM 
      DOCUMENTS 
      INNER JOIN "USER" U ON U.ID = DOCUMENTS.USER_ID 
      INNER JOIN DOCUMENTS_TIP ON DOCUMENTS_TIP.ID = DOCUMENTS.DOC_TYPE 
    WHERE 
      :P_CODE = 7 AND 
      DOCUMENTS.STATUS = 0 AND 
      DOCUMENTS.RECORD_ID IN ( 
        SELECT DISTINCT 
          FAK_IN.OPR_ID 
        FROM 
          FAK_IN_EL_NODE 
          INNER JOIN IN_EL ON IN_EL.ID = FAK_IN_EL_NODE.IN_EL_ID 
          INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
          INNER JOIN FAK_IN ON FAK_IN.ID = FAK_IN_EL_NODE.FAK_IN_ID 
        WHERE 
          OPR.ID = :P_RECORD_ID) 
 
    UNION 
 
    SELECT 
      DOCUMENTS.ID 
    FROM 
      DOCUMENTS 
      INNER JOIN "USER" U ON U.ID = DOCUMENTS.USER_ID 
      INNER JOIN DOCUMENTS_TIP ON DOCUMENTS_TIP.ID = DOCUMENTS.DOC_TYPE 
    WHERE 
      :P_CODE = 8 AND 
      DOCUMENTS.STATUS = 0 AND 
      DOCUMENTS.RECORD_ID IN ( 
        SELECT DISTINCT 
          IN_EL.OPR_ID 
        FROM 
          FAK_IN_EL_NODE 
          INNER JOIN FAK_IN ON FAK_IN.ID = FAK_IN_EL_NODE.FAK_IN_ID 
          INNER JOIN OPR ON OPR.ID = FAK_IN.OPR_ID 
          INNER JOIN IN_EL ON IN_EL.ID = FAK_IN_EL_NODE.IN_EL_ID 
        WHERE 
          OPR.ID = :P_RECORD_ID) 
 
    UNION 
 
    SELECT 
      DOCUMENTS.ID 
    FROM 
      DOCUMENTS 
      INNER JOIN "USER" U ON U.ID = DOCUMENTS.USER_ID 
      INNER JOIN DOCUMENTS_TIP ON DOCUMENTS_TIP.ID = DOCUMENTS.DOC_TYPE 
    WHERE 
      :P_CODE IN (8, 9) AND 
      DOCUMENTS.STATUS = 0 AND 
      DOCUMENTS.RECORD_ID IN ( 
        SELECT DISTINCT 
          PARI_FAKINUSLUGA_NODE.PARI_ID 
        FROM 
          PARI_FAKINUSLUGA_NODE 
          INNER JOIN FAK_IN ON FAK_IN.ID = PARI_FAKINUSLUGA_NODE.FAK_IN_ID 
          INNER JOIN OPR ON OPR.ID = FAK_IN.OPR_ID 
        WHERE 
          OPR.ID = :P_RECORD_ID) 
 
    UNION 
 
    SELECT 
      DOCUMENTS.ID 
    FROM 
      DOCUMENTS 
      INNER JOIN "USER" U ON U.ID = DOCUMENTS.USER_ID 
      INNER JOIN DOCUMENTS_TIP ON DOCUMENTS_TIP.ID = DOCUMENTS.DOC_TYPE 
    WHERE 
      :P_CODE = 6 AND 
      DOCUMENTS.STATUS = 0 AND 
      DOCUMENTS.RECORD_ID IN ( 
        SELECT DISTINCT 
          FAK_IN.OPR_ID 
        FROM 
          PARI_FAKINUSLUGA_NODE 
          INNER JOIN FAK_IN ON FAK_IN.ID = PARI_FAKINUSLUGA_NODE.FAK_IN_ID 
        WHERE 
          PARI_FAKINUSLUGA_NODE.PARI_ID = :P_RECORD_ID) 
 
    UNION 
 
    SELECT 
      DOCUMENTS.ID 
    FROM 
      DOCUMENTS 
      INNER JOIN "USER" U ON U.ID = DOCUMENTS.USER_ID 
      INNER JOIN DOCUMENTS_TIP ON DOCUMENTS_TIP.ID = DOCUMENTS.DOC_TYPE 
    WHERE 
      :P_CODE = 6 AND 
      DOCUMENTS.STATUS = 0 AND 
      DOCUMENTS.RECORD_ID IN ( 
      SELECT 
        GET_PAY_PARI_INFO.SKL_OPR_ID 
      FROM 
        GET_PAY_PARI_INFO 
      WHERE 
        GET_PAY_PARI_INFO.PARI_ID = (SELECT PARI.ID FROM PARI WHERE PARI.OPR_ID = :P_RECORD_ID)) 
 
    UNION 
 
    SELECT 
      DOCUMENTS.ID 
    FROM 
      DOCUMENTS 
      INNER JOIN "USER" U ON U.ID = DOCUMENTS.USER_ID 
      INNER JOIN DOCUMENTS_TIP ON DOCUMENTS_TIP.ID = DOCUMENTS.DOC_TYPE 
    WHERE 
      :P_CODE = 11 AND 
      DOCUMENTS.STATUS = 0 AND 
      DOCUMENTS.RECORD_ID IN ( 
      SELECT 
        PARI.OPR_ID 
      FROM 
        GET_PAY_PARI_INFO 
        INNER JOIN PARI ON PARI.ID = GET_PAY_PARI_INFO.PARI_ID 
      WHERE 
        GET_PAY_PARI_INFO.SKL_OPR_ID = :P_RECORD_ID) 
 
    UNION 
 
    SELECT 
      DOCUMENTS.ID 
    FROM 
      DOCUMENTS 
      INNER JOIN "USER" U ON U.ID = DOCUMENTS.USER_ID 
      INNER JOIN DOCUMENTS_TIP ON DOCUMENTS_TIP.ID = DOCUMENTS.DOC_TYPE 
    WHERE 
      :P_CODE = 11 AND 
      DOCUMENTS.STATUS = 0 AND 
      DOCUMENTS.RECORD_ID IN ( 
        SELECT 
          OPR.ID AS OPR_ID 
        FROM 
          PAYMENT_NODE PN1 
          INNER JOIN SUMI ON SUMI.ID = PN1.OPR_ID 
          INNER JOIN OPR ON OPR.ID = SUMI.OPR_ID 
          INNER JOIN GET_PAYMENT_NODE_ID((SELECT SUMI.ID FROM SUMI WHERE SUMI.OPR_ID = :P_RECORD_ID)) GPN ON PN1.ID = GPN.R_PAYMENT_NODE_ID) 
 
    UNION 
 
    SELECT 
      DOCUMENTS.ID 
    FROM 
      DOCUMENTS 
      INNER JOIN "USER" U ON U.ID = DOCUMENTS.USER_ID 
      INNER JOIN DOCUMENTS_TIP ON DOCUMENTS_TIP.ID = DOCUMENTS.DOC_TYPE 
    WHERE 
      :P_CODE IN (7, 8) AND 
      DOCUMENTS.STATUS = 0 AND 
      DOCUMENTS.RECORD_ID IN ( 
        SELECT 
          PARI.OPR_ID 
        FROM 
          PARI 
          INNER JOIN PARI_SKLOPR_NODE ON PARI_SKLOPR_NODE.OPR_PARI_ID = PARI.OPR_ID 
          INNER JOIN SUMI SUMI1 ON SUMI1.OPR_ID = PARI_SKLOPR_NODE.OPR_ID 
          INNER JOIN OPR_PAYMENT_NODE ON SUMI1.ID = OPR_PAYMENT_NODE.PAYMENT_ID 
          INNER JOIN SUMI SUMI2 ON SUMI2.ID = OPR_PAYMENT_NODE.OPR_ID 
        WHERE 
          SUMI2.OPR_ID = :P_RECORD_ID 
 
        UNION 
 
        SELECT 
          PARI_TMP.OPR_ID 
        FROM 
          PARI_TMP 
          INNER JOIN SUMI SUMI1 ON SUMI1.OPR_ID = PARI_TMP.OPR_ID 
          INNER JOIN OPR_PAYMENT_NODE ON SUMI1.ID = OPR_PAYMENT_NODE.PAYMENT_ID 
          INNER JOIN SUMI SUMI2 ON SUMI2.ID = OPR_PAYMENT_NODE.OPR_ID 
        WHERE 
          SUMI2.OPR_ID = :P_RECORD_ID) 
    ) T 
  INTO :L_ID 
  DO BEGIN 
    IF (:L_ID IS NOT NULL) THEN 
      R_EXISTS = 1; 
    ELSE 
      R_EXISTS = 0; 
  END 
 
  SUSPEND; 
END^


ALTER PROCEDURE GENERATE_DIST_PAY_FOR_SALE (
    P_DIST_ID TYPE OF DOM_KEY,
    P_SALE_ID TYPE OF DOM_KEY,
    P_USER_ID TYPE OF DOM_KEY,
    P_SUM TYPE OF DOM_SUMA,
    P_DATE TYPE OF DOM_DATE)
AS
DECLARE VARIABLE L_OPR_ID TYPE OF DOM_KEY;
DECLARE VARIABLE L_SALE_OPR_ID TYPE OF DOM_KEY;
BEGIN
    EXECUTE PROCEDURE ADD_OPR(15, :P_DATE,  NULL, :P_USER_ID, NULL, :P_DIST_ID, ROUND(:P_SUM, 1))
    RETURNING_VALUES :L_OPR_ID;

    SELECT
        OUT.OPR_ID
    FROM
        OUT
    WHERE
        OUT.ID = :P_SALE_ID
    INTO
        :L_SALE_OPR_ID;
    
    EXECUTE PROCEDURE NEW_PARI_DIST(:L_OPR_ID, :L_SALE_OPR_ID, ROUND(:P_SUM, 1))
    RETURNING_VALUES :L_OPR_ID;
END^


ALTER PROCEDURE GENERATE_UNP (
    P_USER_ID TYPE OF DOM_SMAL_INT,
    P_FP_NUMBER TYPE OF DOM_FP_NUMBER)
RETURNS (
    R_UNP TYPE OF DOM_UNP,
    R_STATUS TYPE OF DOM_SMAL_INT)
AS
DECLARE VARIABLE L_FP_ID TYPE OF DOM_INT64; 
DECLARE VARIABLE L_FP_GEN TYPE OF DOM_FP_GEN; 
DECLARE VARIABLE L_GEN_ID TYPE OF DOM_INT64; 
BEGIN 
    R_STATUS = 0; 
 
    IF (NOT (:P_USER_ID BETWEEN 1 AND 9999)) THEN BEGIN 
        R_STATUS = 1; -- НЕВАЛИДЕН КОД НА ОПЕРАТОР 
    END 
    ELSE IF (CHAR_LENGTH (TRIM(:P_FP_NUMBER)) < 8) THEN BEGIN 
        R_STATUS = 2; --ПОДАДЕН Е ПО-КЪС НОМЕР 
    END 
    ELSE IF (POSITION(' ', TRIM(:P_FP_NUMBER)) > 0) THEN BEGIN 
        R_STATUS = 3; --ПОДАДЕН Е НОМЕР С ИНТЕРВАЛИ ВЪТРЕ 
    END 
 
    IF (R_STATUS <> 0) THEN 
        EXIT; 
 
    SELECT 
        FP.ID, 
        FP.GEN_NAME 
    FROM 
        FP 
    WHERE 
        UPPER(FP.FP_NUMBER) = UPPER(:P_FP_NUMBER) 
    INTO 
        :L_FP_ID, :L_FP_GEN; 
 
    IF (L_FP_ID IS NULL) THEN BEGIN 
        R_STATUS = 4; -- НЕ Е НАМЕРЕН КОНФИГУРИРАН ПРИНТЕР С ТОЗИ НОМЕР 
        EXIT; 
    END 
 
    EXECUTE STATEMENT 
    'SELECT NEXT VALUE FOR ' || :L_FP_GEN || ' FROM RDB$DATABASE' 
    INTO 
        :L_GEN_ID; 
 
    R_UNP = UPPER(:P_FP_NUMBER) || '-' || LPAD(:P_USER_ID, 4, '0') || '-' || LPAD(:L_GEN_ID, 7, '0'); 
END;^


ALTER PROCEDURE GENERATOR_NACHISLIAVANE (
    P_BROI_GENERIRANIA INTEGER,
    P_GEN_ZADULJITELNO INTEGER)
RETURNS (
    R_ID INTEGER,
    R_COUNT INTEGER)
AS
DECLARE VARIABLE L_MESEC_BIN INTEGER; 
DECLARE VARIABLE L_MESEC INTEGER; 
DECLARE VARIABLE L_DEN INTEGER; 
DECLARE VARIABLE L_ID INTEGER; 
DECLARE VARIABLE L_KLI_ID INTEGER; 
DECLARE VARIABLE L_OBEKT_ID INTEGER; 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_TASK_ID INTEGER; 
DECLARE VARIABLE L_CURR_DATE DATE; 
DECLARE VARIABLE L_CURR_DATETIME TIMESTAMP; 
DECLARE VARIABLE L_BROI_GEN INTEGER; 
DECLARE VARIABLE L_GENERIRANE_DEN INTEGER; 
DECLARE VARIABLE L_GEN_Y INTEGER; 
DECLARE VARIABLE L_GEN_M INTEGER; 
DECLARE VARIABLE L_GEN_FROM_DATE DATE; 
BEGIN 
  R_COUNT = 0; 
 
  L_BROI_GEN = P_BROI_GENERIRANIA; 
 
  FOR SELECT 
    OPR_TEMPLATE.ID, 
    OPR_TEMPLATE.LAST_GEN_DATE, 
    OPR_TEMPLATE.GENERIRANE_DEN, 
    TBL_TEMPLATES_TMP_GEN.GEN_FROM_DATE 
  FROM 
    OPR_TEMPLATE 
    INNER JOIN TBL_TEMPLATES_TMP_GEN ON OPR_TEMPLATE.ID = TBL_TEMPLATES_TMP_GEN.TEMPLATE_ID 
  --WHERE 
    --OPR_TEMPLATE.ID = 7664 
  INTO 
    :L_ID, :L_CURR_DATE, :L_GENERIRANE_DEN, :L_GEN_FROM_DATE 
  DO BEGIN 
    --L_GEN_FROM_DATE = '01.06.2021'; 
    IF (L_CURR_DATE IS NULL) THEN BEGIN 
      UPDATE OPR_TEMPLATE SET OPR_TEMPLATE.LAST_GEN_DATE = '31.01.1900' WHERE OPR_TEMPLATE.ID = :L_ID; 
      L_CURR_DATE = CURRENT_DATE;    --'31.01.1900'; 
    END 
 
    IF (L_GEN_FROM_DATE IS NOT NULL) THEN BEGIN 
        L_CURR_DATE = L_GEN_FROM_DATE; 
    END 
 
    IF (NOT(P_GEN_ZADULJITELNO = 0 AND L_BROI_GEN = 1)) THEN 
    BEGIN   -- GENERIRANE NA KONKRETEN 6ABLON N-PUTI 
      L_CURR_DATETIME = L_CURR_DATE; 
 
      L_DEN   = EXTRACT(DAY FROM L_CURR_DATE); 
 
      -- NQMA SMISAL DA SE GENERIRA 6ABLON ZA MINALA DATA 
      -- 
      IF (L_GEN_FROM_DATE IS NULL) THEN BEGIN 
        WHILE (EXTRACT(MONTH FROM L_CURR_DATE) < EXTRACT(MONTH FROM CURRENT_DATE)) DO BEGIN 
            L_CURR_DATE = DATEADD(MONTH, 1, L_CURR_DATE); 
            L_CURR_DATETIME = DATEADD(MONTH, 1, L_CURR_DATETIME); 
        END 
      END 
 
      -- DATA POSREDSTVOM DENQ ZA GENERIRANE OT KONFIGURACIQTA NA 6ABLONA 
      -- 
      L_GEN_Y = EXTRACT(YEAR FROM L_CURR_DATETIME); 
      L_GEN_M = EXTRACT(MONTH FROM L_CURR_DATETIME); 
      L_CURR_DATETIME = '01.01.2000'; 
      L_CURR_DATETIME = DATEADD(DAY,  L_GENERIRANE_DEN-1, L_CURR_DATETIME); 
      L_CURR_DATETIME = DATEADD(MONTH, L_GEN_M-1,  L_CURR_DATETIME); 
      L_CURR_DATETIME = DATEADD(YEAR,  L_GEN_Y-2000, L_CURR_DATETIME); 
    END 
    ELSE BEGIN   -- GENERIRANE NA MARKIRANI 6ABLONI ZA TEKU6TATA DATA 
      L_CURR_DATE = CURRENT_DATE; 
      L_CURR_DATETIME = CURRENT_DATE; 
      L_DEN   = EXTRACT(DAY FROM L_CURR_DATE); 
 
      -- DATA POSREDSTVOM DENQ ZA GENERIRANE OT KONFIGURACIQTA NA 6ABLONA 
      -- 
      L_GEN_Y = EXTRACT(YEAR FROM L_CURR_DATETIME); 
      L_GEN_M = EXTRACT(MONTH FROM L_CURR_DATETIME); 
      L_CURR_DATETIME = '01.01.2000'; 
      L_CURR_DATETIME = DATEADD(DAY,  L_GENERIRANE_DEN-1, L_CURR_DATETIME); 
      L_CURR_DATETIME = DATEADD(MONTH, L_GEN_M-1,  L_CURR_DATETIME); 
      L_CURR_DATETIME = DATEADD(YEAR,  L_GEN_Y-2000, L_CURR_DATETIME); 
    END 
 
    P_BROI_GENERIRANIA = L_BROI_GEN; 
 
    WHILE (P_BROI_GENERIRANIA > 0) DO BEGIN 
      L_MESEC_BIN = 1; 
      L_MESEC = EXTRACT(MONTH FROM L_CURR_DATE); 
 
      WHILE (L_MESEC > 1) DO BEGIN 
        L_MESEC_BIN = L_MESEC_BIN * 2; 
        L_MESEC = L_MESEC - 1; 
      END 
 
      FOR SELECT 
        OPR_TEMPLATE.ID, 
        OPR_TEMPLATE.KLI_ID, 
        OPR_TEMPLATE.OBEKT_ID, 
        OPR_TEMPLATE.SUMA 
      FROM 
        OPR_TEMPLATE 
        --INNER JOIN TBL_TEMPLATES_TMP_GEN ON OPR_TEMPLATE.ID = TBL_TEMPLATES_TMP_GEN.TEMPLATE_ID 
      WHERE 
        OPR_TEMPLATE.ID = :L_ID 
        AND OPR_TEMPLATE.ACTIVEN = 1 
        AND OPR_TEMPLATE.DELETED = 0 
        AND BIN_AND(OPR_TEMPLATE.ACTIVEN_MESECI, :L_MESEC_BIN) = :L_MESEC_BIN 
        AND OPR_TEMPLATE.ACTIVEN_OT_DATA <= :L_CURR_DATE 
        AND OPR_TEMPLATE.ACTIVEN_DO_DATA >= :L_CURR_DATE 
        AND OPR_TEMPLATE.GENERIRANE_DEN <= :L_DEN 
        AND (OPR_TEMPLATE.LAST_GEN_DATE IS NULL 
            --OR :P_GEN_ZADULJITELNO = 1 
            OR EXTRACT(YEAR FROM OPR_TEMPLATE.LAST_GEN_DATE) < EXTRACT(YEAR FROM :L_CURR_DATE) 
            OR (EXTRACT(YEAR FROM OPR_TEMPLATE.LAST_GEN_DATE) = EXTRACT(YEAR FROM :L_CURR_DATE) AND 
                EXTRACT(MONTH FROM OPR_TEMPLATE.LAST_GEN_DATE) < EXTRACT(MONTH FROM :L_CURR_DATE))) 
      INTO :L_ID, :L_KLI_ID, :L_OBEKT_ID, :L_SUMA 
      DO BEGIN 
        R_ID = L_ID; 
 
        L_TASK_ID = GEN_ID(GEN_TASKS_ID, 1); 
 
        INSERT INTO TASKS (ID, TASKS_TIP_ID, KLI_ID, OBEKT_ID, STATUS_TASKS, DT, DOSHLO, SUMA) 
        VALUES(:L_TASK_ID, 2, :L_KLI_ID, :L_OBEKT_ID, 0, :L_CURR_DATETIME, 1, :L_SUMA); 
 
        INSERT INTO OPR_TEMPLATE_TASK_NODE (TASK_ID, TEMPLATE_ID) 
        VALUES(:L_TASK_ID, :L_ID); 
 
        UPDATE OPR_TEMPLATE SET OPR_TEMPLATE.LAST_GEN_DATE = :L_CURR_DATETIME WHERE OPR_TEMPLATE.ID = :L_ID; 
 
        R_COUNT = R_COUNT + 1; 
        P_BROI_GENERIRANIA = P_BROI_GENERIRANIA - 1; 
      END 
 
      IF (P_GEN_ZADULJITELNO = 0 AND L_BROI_GEN = 1) THEN 
        P_BROI_GENERIRANIA = 0; 
 
      L_CURR_DATE = DATEADD(MONTH, 1, L_CURR_DATE); 
      L_CURR_DATETIME = DATEADD(MONTH, 1, L_CURR_DATETIME); 
      L_DEN = 31; 
    END 
  END 
END^


ALTER PROCEDURE GENERATOR_NACHISLIAVANE_1 (
    P_BROI_GENERIRANIA INTEGER,
    P_GEN_ZADULJITELNO INTEGER)
RETURNS (
    R_ID INTEGER,
    R_COUNT INTEGER)
AS
DECLARE VARIABLE L_MESEC_BIN INTEGER; 
DECLARE VARIABLE L_MESEC INTEGER; 
DECLARE VARIABLE L_DEN INTEGER; 
DECLARE VARIABLE L_ID INTEGER; 
DECLARE VARIABLE L_KLI_ID INTEGER; 
DECLARE VARIABLE L_OBEKT_ID INTEGER; 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_TASK_ID INTEGER; 
DECLARE VARIABLE L_CURR_DATE DATE; 
DECLARE VARIABLE L_CURR_DATETIME TIMESTAMP; 
DECLARE VARIABLE L_BROI_GEN INTEGER; 
DECLARE VARIABLE L_GENERIRANE_DEN INTEGER; 
DECLARE VARIABLE L_GEN_Y INTEGER; 
DECLARE VARIABLE L_GEN_M INTEGER; 
BEGIN 
  R_COUNT = 0; 
 
  L_BROI_GEN = P_BROI_GENERIRANIA; 
 
  FOR SELECT 
    OPR_TEMPLATE.ID, 
    OPR_TEMPLATE.LAST_GEN_DATE, 
    OPR_TEMPLATE.GENERIRANE_DEN 
  FROM 
    OPR_TEMPLATE 
    --INNER JOIN TBL_TEMPLATES_TMP_GEN ON OPR_TEMPLATE.ID = TBL_TEMPLATES_TMP_GEN.TEMPLATE_ID 
  WHERE 
    OPR_TEMPLATE.id = 246 
  INTO 
    :L_ID, :L_CURR_DATE, :L_GENERIRANE_DEN 
  DO BEGIN 
    IF (L_CURR_DATE IS NULL) THEN BEGIN 
      UPDATE OPR_TEMPLATE SET OPR_TEMPLATE.LAST_GEN_DATE = '31.01.1900' WHERE OPR_TEMPLATE.ID = :L_ID; 
      L_CURR_DATE = '31.01.1900'; 
    END 
 
    IF (NOT(P_GEN_ZADULJITELNO = 0 AND L_BROI_GEN = 1)) THEN 
    BEGIN   -- GENERIRANE NA KONKRETEN 6ABLON N-PUTI 
      L_CURR_DATETIME = L_CURR_DATE; 
 
      L_DEN   = EXTRACT(DAY FROM L_CURR_DATE); 
 
      -- NQMA SMISAL DA SE GENERIRA 6ABLON ZA MINALA DATA 
      -- 
      WHILE (EXTRACT(MONTH FROM L_CURR_DATE) < EXTRACT(MONTH FROM CURRENT_DATE)) DO BEGIN 
      --WHILE (L_CURR_DATE < CURRENT_DATE) DO BEGIN 
        L_CURR_DATE = DATEADD(MONTH, 1, L_CURR_DATE); 
        L_CURR_DATETIME = DATEADD(MONTH, 1, L_CURR_DATETIME); 
      END 
 
      -- DATA POSREDSTVOM DENQ ZA GENERIRANE OT KONFIGURACIQTA NA 6ABLONA 
      -- 
      L_GEN_Y = EXTRACT(YEAR FROM L_CURR_DATETIME); 
      L_GEN_M = EXTRACT(MONTH FROM L_CURR_DATETIME); 
      L_CURR_DATETIME = '01.01.2000'; 
      L_CURR_DATETIME = DATEADD(DAY,  L_GENERIRANE_DEN-1, L_CURR_DATETIME); 
      L_CURR_DATETIME = DATEADD(MONTH, L_GEN_M-1,  L_CURR_DATETIME); 
      L_CURR_DATETIME = DATEADD(YEAR,  L_GEN_Y-2000, L_CURR_DATETIME); 
    END 
    ELSE BEGIN   -- GENERIRANE NA MARKIRANI 6ABLONI ZA TEKU6TATA DATA 
      L_CURR_DATE = CURRENT_DATE; 
      L_CURR_DATETIME = CURRENT_DATE; 
      L_DEN   = EXTRACT(DAY FROM L_CURR_DATE); 
 
      -- DATA POSREDSTVOM DENQ ZA GENERIRANE OT KONFIGURACIQTA NA 6ABLONA 
      -- 
      L_GEN_Y = EXTRACT(YEAR FROM L_CURR_DATETIME); 
      L_GEN_M = EXTRACT(MONTH FROM L_CURR_DATETIME); 
      L_CURR_DATETIME = '01.01.2000'; 
      L_CURR_DATETIME = DATEADD(DAY,  L_GENERIRANE_DEN-1, L_CURR_DATETIME); 
      L_CURR_DATETIME = DATEADD(MONTH, L_GEN_M-1,  L_CURR_DATETIME); 
      L_CURR_DATETIME = DATEADD(YEAR,  L_GEN_Y-2000, L_CURR_DATETIME); 
    END 
 
    P_BROI_GENERIRANIA = L_BROI_GEN; 
 
    WHILE (P_BROI_GENERIRANIA > 0) DO BEGIN 
      L_MESEC_BIN = 1; 
      L_MESEC = EXTRACT(MONTH FROM L_CURR_DATE); 
 
      WHILE (L_MESEC > 1) DO BEGIN 
        L_MESEC_BIN = L_MESEC_BIN * 2; 
        L_MESEC = L_MESEC - 1; 
      END 
 
      FOR SELECT 
        OPR_TEMPLATE.ID, 
        OPR_TEMPLATE.KLI_ID, 
        OPR_TEMPLATE.OBEKT_ID, 
        OPR_TEMPLATE.SUMA 
      FROM 
        OPR_TEMPLATE 
        --INNER JOIN TBL_TEMPLATES_TMP_GEN ON OPR_TEMPLATE.ID = TBL_TEMPLATES_TMP_GEN.TEMPLATE_ID 
      WHERE 
        OPR_TEMPLATE.ID = :L_ID 
        AND OPR_TEMPLATE.ACTIVEN = 1 
        AND OPR_TEMPLATE.DELETED = 0 
        AND BIN_AND(OPR_TEMPLATE.ACTIVEN_MESECI, :L_MESEC_BIN) = :L_MESEC_BIN 
        AND OPR_TEMPLATE.ACTIVEN_OT_DATA <= :L_CURR_DATE 
        AND OPR_TEMPLATE.ACTIVEN_DO_DATA >= :L_CURR_DATE 
        AND OPR_TEMPLATE.GENERIRANE_DEN <= :L_DEN 
        AND (OPR_TEMPLATE.LAST_GEN_DATE IS NULL 
            --OR :P_GEN_ZADULJITELNO = 1 
            OR EXTRACT(YEAR FROM OPR_TEMPLATE.LAST_GEN_DATE) < EXTRACT(YEAR FROM :L_CURR_DATE) 
            OR (EXTRACT(YEAR FROM OPR_TEMPLATE.LAST_GEN_DATE) = EXTRACT(YEAR FROM :L_CURR_DATE) AND 
                EXTRACT(MONTH FROM OPR_TEMPLATE.LAST_GEN_DATE) < EXTRACT(MONTH FROM :L_CURR_DATE))) 
      INTO :L_ID, :L_KLI_ID, :L_OBEKT_ID, :L_SUMA 
      DO BEGIN 
        R_ID = L_ID; 
 
        L_TASK_ID = GEN_ID(GEN_TASKS_ID, 1); 
 
        INSERT INTO TASKS (ID, TASKS_TIP_ID, KLI_ID, OBEKT_ID, STATUS_TASKS, DT, DOSHLO, SUMA) 
        VALUES(:L_TASK_ID, 2, :L_KLI_ID, :L_OBEKT_ID, 0, :L_CURR_DATETIME, 1, :L_SUMA); 
 
        INSERT INTO OPR_TEMPLATE_TASK_NODE (TASK_ID, TEMPLATE_ID) 
        VALUES(:L_TASK_ID, :L_ID); 
 
        UPDATE OPR_TEMPLATE SET OPR_TEMPLATE.LAST_GEN_DATE = :L_CURR_DATE WHERE OPR_TEMPLATE.ID = :L_ID; 
 
        R_COUNT = R_COUNT + 1; 
        P_BROI_GENERIRANIA = P_BROI_GENERIRANIA - 1; 
      END 
 
      IF (P_GEN_ZADULJITELNO = 0 AND L_BROI_GEN = 1) THEN 
        P_BROI_GENERIRANIA = 0; 
 
      L_CURR_DATE = DATEADD(MONTH, 1, L_CURR_DATE); 
      L_CURR_DATETIME = DATEADD(MONTH, 1, L_CURR_DATETIME); 
      L_DEN = 31; 
    END 
  END 
END^


ALTER PROCEDURE GENERATOR_NACHISLIAVANE_DOPL (
    P_TEMPLATE_ID INTEGER)
AS
declare variable L_TASK_ID integer;
declare variable L_KLI_ID integer;
declare variable L_OBEKT_ID integer;
declare variable L_EL_ID integer;
declare variable L_SIMPLE_ID integer;
declare variable L_S_ID integer;
begin 
    SELECT 
      OPR_TEMPLATE.KLI_ID, 
      OPR_TEMPLATE.OBEKT_ID 
    FROM 
      OPR_TEMPLATE 
    WHERE 
      OPR_TEMPLATE.ID = :P_TEMPLATE_ID 
    INTO :L_KLI_ID, :L_OBEKT_ID; 
 
    L_TASK_ID = GEN_ID(GEN_TASKS_ID, 1); 
 
    INSERT INTO TASKS (ID, TASKS_TIP_ID, KLI_ID, OBEKT_ID, STATUS_TASKS, DT, DOSHLO, SUMA) 
    VALUES(:L_TASK_ID, 2, :L_KLI_ID, :L_OBEKT_ID, 0, CURRENT_DATE, 1, 0); 
 
    INSERT INTO OPR_TEMPLATE_TASK_NODE (TASK_ID, TEMPLATE_ID) 
    VALUES(:L_TASK_ID, :P_TEMPLATE_ID); 
 
    ------- 
    ------- 
    ------- 
 
    FOR SELECT 
        SLEDI_TEMPLATE_EL.ID, 
        SLEDI_TEMPLATE_EL.SIMPLE_ID,
        SLEDI_TEMPLATE_EL.S_ID
    FROM
        SLEDI_TEMPLATE_EL 
        INNER JOIN TBL_TEMPLATES_TMP_GEN ON SLEDI_TEMPLATE_EL.ID = TBL_TEMPLATES_TMP_GEN.TEMPLATE_ID 
    INTO 
        :L_EL_ID, L_SIMPLE_ID, L_S_ID
    DO BEGIN 
        IF ((L_SIMPLE_ID = 2844 OR L_SIMPLE_ID = 2148) AND (L_S_ID IS NULL)) THEN
            INSERT INTO TASKS_EL (EL_ID, TASKS_ID, SIMPLE_ID, H) VALUES (:L_EL_ID, :L_TASK_ID, :L_SIMPLE_ID, 0); 
        ELSE 
            INSERT INTO TASKS_EL (EL_ID, TASKS_ID, SIMPLE_ID, H) VALUES (:L_EL_ID, :L_TASK_ID, :L_SIMPLE_ID, 1); 
    END 
end^


ALTER PROCEDURE GENERATOR_NACHISLIAVANE_SLEDI (
    P_BROI_GENERIRANIA INTEGER,
    P_GEN_ZADULJITELNO INTEGER)
RETURNS (
    R_ID INTEGER,
    R_COUNT INTEGER)
AS
declare variable L_DEN integer; 
declare variable L_ID integer; 
declare variable L_KLI_ID integer; 
declare variable L_OBEKT_ID integer; 
declare variable L_TASK_ID integer; 
declare variable L_LAST_GEN_DATE date; 
declare variable L_CURR_DATETIME timestamp; 
declare variable L_BROI_GEN integer; 
declare variable L_GENERIRANE_DEN integer; 
declare variable L_GEN_Y integer; 
declare variable L_GEN_M integer; 
declare variable L_EL_ID integer; 
declare variable L_GEN_FLAG integer; 
declare variable L_SIMPLE_ID integer; 
declare variable L_GEN_SLEDI_TEMPLATE_EL_GEN_ID integer; 
declare variable L_GEN_OPR_TEMPLATE_GEN_ID integer; 
BEGIN 
  R_COUNT = 0; 
 
  L_BROI_GEN = P_BROI_GENERIRANIA; 
 
  WHILE (P_BROI_GENERIRANIA > 0) DO BEGIN 
 
    FOR SELECT DISTINCT 
        OPR_TEMPLATE.ID, 
        OPR_TEMPLATE.GENERIRANE_DEN 
    FROM 
        SLEDI_TEMPLATE_EL 
        INNER JOIN TBL_TEMPLATES_TMP_GEN ON SLEDI_TEMPLATE_EL.ID = TBL_TEMPLATES_TMP_GEN.TEMPLATE_ID 
        INNER JOIN OPR_TEMPLATE ON OPR_TEMPLATE.ID = SLEDI_TEMPLATE_EL.TEMPLATE_ID 
    --WHERE SLEDI_TEMPLATE_EL.ID in (2951) 
    INTO 
        :L_ID, :L_GENERIRANE_DEN 
    DO BEGIN 
      -- GENERIRANE NA SHABLON 
      -- 
      FOR SELECT 
          OPR_TEMPLATE.ID, 
          OPR_TEMPLATE.KLI_ID, 
          OPR_TEMPLATE.OBEKT_ID 
      FROM 
          OPR_TEMPLATE 
      WHERE 
          OPR_TEMPLATE.ID = :L_ID 
      INTO :L_ID, :L_KLI_ID, :L_OBEKT_ID 
      DO BEGIN 
          R_ID = L_ID; 
 
          L_TASK_ID = GEN_ID(GEN_TASKS_ID, 1); 
 
          INSERT INTO TASKS (ID, TASKS_TIP_ID, KLI_ID, OBEKT_ID, STATUS_TASKS, DT, DOSHLO, SUMA) 
          VALUES(:L_TASK_ID, 2, :L_KLI_ID, :L_OBEKT_ID, 0, CURRENT_DATE, 1, 0); 
 
          ----------------------------------------------------------------------- 
          -- SAZDAVA SE KOPIE NA MOMENTA NA GENERIANE NA SHABLONA 
          -- 
 
          L_GEN_OPR_TEMPLATE_GEN_ID = GEN_ID(GEN_OPR_TEMPLATE_GEN_ID, 1); 
 
          INSERT INTO OPR_TEMPLATE_GEN (ID, KLI_ID, OBEKT_ID, PAY_TIP, FAK, ACTIVEN, ACTIVEN_OT_DATA, ACTIVEN_DO_DATA, 
                                        GENERIRANE_DEN, PADEJ_DEN, ACTIVEN_MESECI, SUMA, LAST_GEN_DATE, USER_ID, SKLAD_ID, 
                                        SUMA_OSCL, DAY_REG, FLAG_MONTH, DELETED, OBEKT_FAK_ID, TIP, FAK_NAME, EFAK, FIRMA_ID, 
                                        DISTRIBUTOR_ID, DIST_SUMA, DIST_PROCENT, DIST_ROUND_TIP_ID, DIST_DT_AKTIVEN, 
                                        DIST_FAK_FLAG, FAK_COMMENT, OPR_TEMPLATE_ID) 
          SELECT :L_GEN_OPR_TEMPLATE_GEN_ID, KLI_ID, OBEKT_ID, PAY_TIP, FAK, ACTIVEN, ACTIVEN_OT_DATA, ACTIVEN_DO_DATA, GENERIRANE_DEN, PADEJ_DEN, 
                 ACTIVEN_MESECI, SUMA, LAST_GEN_DATE, USER_ID, SKLAD_ID, SUMA_OSCL, DAY_REG, FLAG_MONTH, DELETED, OBEKT_FAK_ID, 
                 TIP, FAK_NAME, EFAK, FIRMA_ID, DISTRIBUTOR_ID, DIST_SUMA, DIST_PROCENT, DIST_ROUND_TIP_ID, DIST_DT_AKTIVEN, 
                 DIST_FAK_FLAG, FAK_COMMENT, :L_ID 
          FROM 
            OPR_TEMPLATE 
          WHERE 
            OPR_TEMPLATE.ID = :L_ID; 
 
          ----------------------------------------------------------------------- 
 
          INSERT INTO OPR_TEMPLATE_TASK_NODE (TASK_ID, TEMPLATE_ID, TEMPLATE_GEN_ID) 
          VALUES(:L_TASK_ID, :L_ID, :L_GEN_OPR_TEMPLATE_GEN_ID); 
      END 
 
      -- GENERIRANE NA ELEMENTITE NA SHABLONA 
      -- 
      L_GEN_FLAG = 0; 
 
      FOR SELECT 
        SLEDI_TEMPLATE_EL.ID, 
        SLEDI_TEMPLATE_EL.LAST_GEN_DATE, 
        SLEDI_TEMPLATE_EL.SIMPLE_ID 
      FROM 
        SLEDI_TEMPLATE_EL 
        INNER JOIN TBL_TEMPLATES_TMP_GEN ON SLEDI_TEMPLATE_EL.ID = TBL_TEMPLATES_TMP_GEN.TEMPLATE_ID 
      WHERE 
        SLEDI_TEMPLATE_EL.TEMPLATE_ID = :L_ID 
        --AND SLEDI_TEMPLATE_EL.ID in (2951) 
 
      INTO 
        :L_EL_ID, :L_LAST_GEN_DATE, :L_SIMPLE_ID 
      DO BEGIN 
        IF (L_LAST_GEN_DATE IS NULL) THEN BEGIN 
          UPDATE SLEDI_TEMPLATE_EL SET SLEDI_TEMPLATE_EL.LAST_GEN_DATE = '31.01.2000' WHERE SLEDI_TEMPLATE_EL.ID = :L_EL_ID; 
          L_LAST_GEN_DATE = '31.01.2000';    --'31.01.1900'; 
        END 
 
        IF (NOT(P_GEN_ZADULJITELNO = 0 AND L_BROI_GEN = 1)) THEN 
        BEGIN   -- GENERIRANE NA KONKRETEN 6ABLON N-PUTI 
          IF (L_LAST_GEN_DATE < CURRENT_DATE) THEN BEGIN 
            L_CURR_DATETIME = CURRENT_DATE; 
 
            IF (EXTRACT(MONTH FROM L_LAST_GEN_DATE) = EXTRACT(MONTH FROM CURRENT_DATE) AND 
                EXTRACT(YEAR FROM L_LAST_GEN_DATE) = EXTRACT(YEAR FROM CURRENT_DATE))  THEN 
                    L_CURR_DATETIME = DATEADD(MONTH,  1, L_CURR_DATETIME); 
          END 
          ELSE BEGIN 
            L_CURR_DATETIME = L_LAST_GEN_DATE; 
            L_CURR_DATETIME = DATEADD(MONTH,  1, L_CURR_DATETIME); 
          END 
 
          L_DEN   = EXTRACT(DAY FROM L_LAST_GEN_DATE); 
 
          -- NQMA SMISAL DA SE GENERIRA 6ABLON ZA MINALA DATA 
          -- 
          --WHILE (L_CURR_DATE < CURRENT_DATE) DO BEGIN 
          --  L_CURR_DATE = DATEADD(MONTH, 1, L_CURR_DATE); 
          --  L_CURR_DATETIME = DATEADD(MONTH, 1, L_CURR_DATETIME); 
          --END 
 
          -- DATA POSREDSTVOM DENQ ZA GENERIRANE OT KONFIGURACIQTA NA 6ABLONA 
          -- 
          L_GEN_Y = EXTRACT(YEAR FROM L_CURR_DATETIME); 
          L_GEN_M = EXTRACT(MONTH FROM L_CURR_DATETIME); 
          L_CURR_DATETIME = '01.01.2000'; 
          L_CURR_DATETIME = DATEADD(DAY,  L_GENERIRANE_DEN-1, L_CURR_DATETIME); 
          L_CURR_DATETIME = DATEADD(MONTH, L_GEN_M-1,  L_CURR_DATETIME); 
          L_CURR_DATETIME = DATEADD(YEAR,  L_GEN_Y-2000, L_CURR_DATETIME); 
        END 
        ELSE BEGIN   -- GENERIRANE NA MARKIRANI 6ABLONI ZA TEKU6TATA DATA 
          L_LAST_GEN_DATE = CURRENT_DATE; 
          L_CURR_DATETIME = CURRENT_DATE; 
          L_DEN   = EXTRACT(DAY FROM L_LAST_GEN_DATE); 
 
          -- DATA POSREDSTVOM DENQ ZA GENERIRANE OT KONFIGURACIQTA NA 6ABLONA 
          -- 
          L_GEN_Y = EXTRACT(YEAR FROM L_CURR_DATETIME); 
          L_GEN_M = EXTRACT(MONTH FROM L_CURR_DATETIME); 
          L_CURR_DATETIME = '01.01.2000'; 
          L_CURR_DATETIME = DATEADD(DAY,  L_GENERIRANE_DEN-1, L_CURR_DATETIME); 
          L_CURR_DATETIME = DATEADD(MONTH, L_GEN_M-1,  L_CURR_DATETIME); 
          L_CURR_DATETIME = DATEADD(YEAR,  L_GEN_Y-2000, L_CURR_DATETIME); 
        END 
 
        FOR SELECT 
          OPR_TEMPLATE.ID 
        FROM 
          SLEDI_TEMPLATE_EL 
          INNER JOIN OPR_TEMPLATE ON OPR_TEMPLATE.ID = SLEDI_TEMPLATE_EL.TEMPLATE_ID 
        WHERE 
          SLEDI_TEMPLATE_EL.ID = :L_EL_ID 
          AND OPR_TEMPLATE.ACTIVEN = 1 
          AND OPR_TEMPLATE.DELETED = 0 
          AND OPR_TEMPLATE.ACTIVEN_OT_DATA-31 <= :L_CURR_DATETIME 
          AND OPR_TEMPLATE.ACTIVEN_DO_DATA >= :L_CURR_DATETIME 
          AND OPR_TEMPLATE.GENERIRANE_DEN <= :L_DEN 
          AND (SLEDI_TEMPLATE_EL.LAST_GEN_DATE IS NULL 
              OR EXTRACT(YEAR FROM SLEDI_TEMPLATE_EL.LAST_GEN_DATE) < EXTRACT(YEAR FROM :L_CURR_DATETIME) 
              OR (EXTRACT(YEAR FROM SLEDI_TEMPLATE_EL.LAST_GEN_DATE) = EXTRACT(YEAR FROM :L_CURR_DATETIME) AND 
                  EXTRACT(MONTH FROM SLEDI_TEMPLATE_EL.LAST_GEN_DATE) < EXTRACT(MONTH FROM :L_CURR_DATETIME))) 
          AND SLEDI_TEMPLATE_EL.S_ID IS NOT NULL 
        INTO :L_ID 
        DO BEGIN 
          UPDATE SLEDI_TEMPLATE_EL SET SLEDI_TEMPLATE_EL.LAST_GEN_DATE = :L_CURR_DATETIME WHERE SLEDI_TEMPLATE_EL.ID = :L_EL_ID; 
 
          ------------------------------------------------------- 
          -- SAZDAVA SE KOPIE NA MOMENTA NA GENERIANE NA ELEMENTA (TRAKERA) NA SHABLONA 
          -- 
 
          L_GEN_SLEDI_TEMPLATE_EL_GEN_ID = GEN_ID(GEN_SLEDI_TEMPLATE_EL_GEN_ID, 1); 
 
          INSERT INTO SLEDI_TEMPLATE_EL_GEN (ID, STE_ID, TEMPLATE_GEN_ID, S_ID, SIMPLE_ID, TEMPLATE_ID, CENA, PROMO_CENA, 
                                             PROMO_PERIOD, SPRIAN, SPRIAN_CENA, LIZING_SUMA, LIZING_PERIOD, FAK_NAME, 
                                             DISTRIBUTOR_KLI_ID, DISTRIBUTOR_SUMA, DISTRIBUTOR_TO_DATE) 
          SELECT :L_GEN_SLEDI_TEMPLATE_EL_GEN_ID, :L_EL_ID, :L_GEN_OPR_TEMPLATE_GEN_ID, S_ID, SIMPLE_ID, TEMPLATE_ID, CENA, PROMO_CENA, PROMO_PERIOD, SPRIAN, SPRIAN_CENA, 
                 LIZING_SUMA, LIZING_PERIOD, FAK_NAME, DISTRIBUTOR_KLI_ID, DISTRIBUTOR_SUMA, DISTRIBUTOR_TO_DATE 
          FROM 
            SLEDI_TEMPLATE_EL 
          WHERE 
            SLEDI_TEMPLATE_EL.ID = :L_EL_ID; 
 
          UPDATE SLEDI_TEMPLATE_EL_GEN SET SN = (SELECT SERIAL_NUM.SN FROM SERIAL_NUM WHERE SLEDI_TEMPLATE_EL_GEN.ID = :L_GEN_SLEDI_TEMPLATE_EL_GEN_ID AND SERIAL_NUM.ID = SLEDI_TEMPLATE_EL_GEN.S_ID) 
               WHERE SLEDI_TEMPLATE_EL_GEN.ID = :L_GEN_SLEDI_TEMPLATE_EL_GEN_ID; 
 
          --------------------------------------------------- 
 
          INSERT INTO TASKS_EL (EL_ID, TASKS_ID, SIMPLE_ID, H, LAST_GEN_DATE, EL_GEN_ID) VALUES (:L_EL_ID, :L_TASK_ID, :L_SIMPLE_ID, 0, :L_CURR_DATETIME, :L_GEN_SLEDI_TEMPLATE_EL_GEN_ID); 
 
          UPDATE TASKS SET TASKS.DT = :L_CURR_DATETIME WHERE TASKS.ID = :L_TASK_ID; 
 
          UPDATE OPR_TEMPLATE SET OPR_TEMPLATE.LAST_GEN_DATE = :L_CURR_DATETIME WHERE OPR_TEMPLATE.ID = :L_ID AND OPR_TEMPLATE.LAST_GEN_DATE < :L_CURR_DATETIME; 
 
          L_GEN_FLAG = L_GEN_FLAG + 1; 
        END 
      END 
 
      --------- 
      --------- 
      --------- 
 
      IF (L_GEN_FLAG = 0) THEN BEGIN 
        DELETE FROM OPR_TEMPLATE_TASK_NODE WHERE OPR_TEMPLATE_TASK_NODE.TASK_ID = :L_TASK_ID; 
        DELETE FROM TASKS WHERE TASKS.ID = :L_TASK_ID; 
      END 
      ELSE BEGIN 
        R_COUNT = R_COUNT + 1; 
      END 
    END 
 
    P_BROI_GENERIRANIA = P_BROI_GENERIRANIA - 1; 
 
    IF (P_GEN_ZADULJITELNO = 0 AND L_BROI_GEN = 1) THEN 
      P_BROI_GENERIRANIA = 0; 
  END 
END^


ALTER PROCEDURE GENERATOR_NACHISLIAVANE_ZA_DATA (
    P_BROI_GENERIRANIA INTEGER,
    P_ZA_DATA DATE)
RETURNS (
    R_ID INTEGER,
    R_COUNT INTEGER)
AS
DECLARE VARIABLE L_MESEC_BIN INTEGER; 
DECLARE VARIABLE L_MESEC INTEGER; 
DECLARE VARIABLE L_DEN INTEGER; 
DECLARE VARIABLE L_ID INTEGER; 
DECLARE VARIABLE L_KLI_ID INTEGER; 
DECLARE VARIABLE L_OBEKT_ID INTEGER; 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_TASK_ID INTEGER; 
DECLARE VARIABLE L_CURR_DATE DATE; 
DECLARE VARIABLE L_CURR_DATETIME TIMESTAMP; 
DECLARE VARIABLE L_DEN_TMP INTEGER; 
BEGIN 
  R_COUNT = 0; 
 
  --L_CURR_DATE = CURRENT_DATE; 
  --L_CURR_DATETIME = CURRENT_TIMESTAMP; 
 
  --L_DEN   = EXTRACT(DAY FROM L_CURR_DATE); 
  --L_DEN_TMP = L_DEN; 
 
  --WHILE (P_BROI_GENERIRANIA > 0) DO BEGIN 
    --L_MESEC_BIN = 1; 
    --L_MESEC = EXTRACT(MONTH FROM L_CURR_DATE); 
 
    --WHILE (L_MESEC > 1) DO BEGIN 
    --  L_MESEC_BIN = L_MESEC_BIN * 2; 
    --  L_MESEC = L_MESEC - 1; 
    --END 
 
    FOR SELECT 
      OPR_TEMPLATE.ID, 
      OPR_TEMPLATE.KLI_ID, 
      OPR_TEMPLATE.OBEKT_ID, 
      OPR_TEMPLATE.SUMA 
    FROM 
      OPR_TEMPLATE 
      INNER JOIN TBL_TEMPLATES_TMP_GEN ON OPR_TEMPLATE.ID = TBL_TEMPLATES_TMP_GEN.TEMPLATE_ID 
    --WHERE 
      --OPR_TEMPLATE.ACTIVEN = 1 
      --AND OPR_TEMPLATE.DELETED = 0 
      --AND BIN_AND(OPR_TEMPLATE.ACTIVEN_MESECI, :L_MESEC_BIN) = :L_MESEC_BIN 
      --AND OPR_TEMPLATE.ACTIVEN_OT_DATA <= :L_CURR_DATE 
      --AND OPR_TEMPLATE.ACTIVEN_DO_DATA >= :L_CURR_DATE 
      --AND OPR_TEMPLATE.GENERIRANE_DEN <= :L_DEN 
      --AND (OPR_TEMPLATE.LAST_GEN_DATE IS NULL /*OPR_TEMPLATE.LAST_GEN_DATE + 30 <= CURRENT_DATE*/ 
      --    OR EXTRACT(YEAR FROM OPR_TEMPLATE.LAST_GEN_DATE) < EXTRACT(YEAR FROM :L_CURR_DATE) 
      --    OR (EXTRACT(YEAR FROM OPR_TEMPLATE.LAST_GEN_DATE) = EXTRACT(YEAR FROM :L_CURR_DATE) AND 
      --        EXTRACT(MONTH FROM OPR_TEMPLATE.LAST_GEN_DATE) < EXTRACT(MONTH FROM :L_CURR_DATE))) 
    INTO :L_ID, :L_KLI_ID, :L_OBEKT_ID, :L_SUMA 
    DO BEGIN 
      R_ID = L_ID; 
 
      L_TASK_ID = GEN_ID(GEN_TASKS_ID, 1); 
 
      INSERT INTO TASKS (ID, TASKS_TIP_ID, KLI_ID, OBEKT_ID, STATUS_TASKS, DT, DOSHLO, SUMA) 
      VALUES(:L_TASK_ID, 2, :L_KLI_ID, :L_OBEKT_ID, 0, :P_ZA_DATA, 1, :L_SUMA); 
 
      INSERT INTO OPR_TEMPLATE_TASK_NODE (TASK_ID, TEMPLATE_ID) 
      VALUES(:L_TASK_ID, :L_ID); 
 
      --UPDATE OPR_TEMPLATE SET OPR_TEMPLATE.LAST_GEN_DATE = :L_CURR_DATE WHERE OPR_TEMPLATE.ID = :L_ID; 
 
      R_COUNT = R_COUNT + 1; 
      --P_BROI_GENERIRANIA = P_BROI_GENERIRANIA - 1; 
    END 
 
    --L_CURR_DATE = DATEADD(MONTH, 1, L_CURR_DATE); 
    --L_CURR_DATETIME = DATEADD(MONTH, 1, L_CURR_DATETIME); 
 
    --L_DEN = 31; 
  --END 
END^


ALTER PROCEDURE GET_ACTIV_BONUS (
    P_KLI_ID INTEGER,
    P_TIP_BONUS SMALLINT,
    P_SKLAD_ID INTEGER)
RETURNS (
    ID INTEGER)
AS
BEGIN 
  IF (P_KLI_ID = 0) THEN 
    FOR 
        SELECT 
            BONUS_CONFIG.ID 
        FROM 
            BONUS_CONFIG 
        WHERE 
            BONUS_CONFIG.ANULIRAN = 0 AND 
            ((BONUS_CONFIG.ID_BONUS IS NULL) OR (BONUS_CONFIG.ID_BONUS = 0)) AND 
            BONUS_CONFIG.IS_ACTIV IN (1,2) 
            AND BONUS_CONFIG.TIP IN (2,4,5) 
            AND BONUS_CONFIG.TIP_BONUS = :P_TIP_BONUS 
            AND ((NOT EXISTS(SELECT BONUS_KLI_USED.ID FROM BONUS_KLI_USED WHERE BONUS_KLI_USED.KLI_ID = :P_KLI_ID AND BONUS_KLI_USED.BONUS_ID = BONUS_CONFIG.ID) 
            AND BONUS_CONFIG.IS_ACTIV = 2) OR BONUS_CONFIG.IS_ACTIV = 1) 
            AND NOT EXISTS (SELECT BONUS_CONFIG_SKLAD.SKLAD_ID FROM BONUS_CONFIG_SKLAD WHERE BONUS_CONFIG_SKLAD.BONUS_ID = BONUS_CONFIG.ID) 
        UNION 
 
        SELECT 
            BONUS_CONFIG.ID 
        FROM 
            BONUS_CONFIG 
        WHERE 
            BONUS_CONFIG.ANULIRAN = 0 AND 
            ((BONUS_CONFIG.ID_BONUS IS NULL) OR (BONUS_CONFIG.ID_BONUS = 0)) AND 
            BONUS_CONFIG.IS_ACTIV IN (1,2) 
            AND BONUS_CONFIG.TIP IN (2,4,5) 
            AND BONUS_CONFIG.TIP_BONUS = :P_TIP_BONUS 
            AND ((NOT EXISTS(SELECT BONUS_KLI_USED.ID FROM BONUS_KLI_USED WHERE BONUS_KLI_USED.KLI_ID = :P_KLI_ID AND BONUS_KLI_USED.BONUS_ID = BONUS_CONFIG.ID) 
            AND BONUS_CONFIG.IS_ACTIV = 2) OR BONUS_CONFIG.IS_ACTIV = 1) 
            AND EXISTS (SELECT BONUS_CONFIG_SKLAD.SKLAD_ID FROM BONUS_CONFIG_SKLAD WHERE BONUS_CONFIG_SKLAD.SKLAD_ID =:P_SKLAD_ID AND BONUS_CONFIG_SKLAD.BONUS_ID =BONUS_CONFIG.ID) 
 
    INTO :ID 
    DO SUSPEND; 
  ELSE 
    FOR 
        SELECT 
           ID 
        FROM ( 
             SELECT 
                 BONUS_CONFIG.ID 
             FROM 
                 BONUS_CONFIG 
             WHERE 
                 BONUS_CONFIG.ANULIRAN = 0 AND 
                 ((BONUS_CONFIG.ID_BONUS IS NULL) OR (BONUS_CONFIG.ID_BONUS = 0)) AND 
                 BONUS_CONFIG.IS_ACTIV IN (1,2) 
                 AND BONUS_CONFIG.TIP IN (1,2) 
                 AND BONUS_CONFIG.TIP_BONUS = :P_TIP_BONUS 
                 AND ((NOT EXISTS(SELECT BONUS_KLI_USED.ID FROM BONUS_KLI_USED WHERE BONUS_KLI_USED.KLI_ID = :P_KLI_ID AND BONUS_KLI_USED.BONUS_ID = BONUS_CONFIG.ID) AND BONUS_CONFIG.IS_ACTIV = 2) OR BONUS_CONFIG.IS_ACTIV = 1) 
                 AND NOT EXISTS (SELECT BONUS_CONFIG_SKLAD.SKLAD_ID FROM BONUS_CONFIG_SKLAD WHERE BONUS_CONFIG_SKLAD.BONUS_ID = BONUS_CONFIG.ID) 
             UNION 
 
             SELECT 
                 BONUS_CONFIG.ID 
             FROM 
                 BONUS_CONFIG 
             WHERE 
                 BONUS_CONFIG.ANULIRAN = 0 AND 
                 ((BONUS_CONFIG.ID_BONUS IS NULL) OR (BONUS_CONFIG.ID_BONUS = 0)) AND 
                 BONUS_CONFIG.IS_ACTIV IN (1,2) 
                 AND BONUS_CONFIG.TIP IN (1,2) 
                 AND BONUS_CONFIG.TIP_BONUS = :P_TIP_BONUS 
                 AND ((NOT EXISTS(SELECT BONUS_KLI_USED.ID FROM BONUS_KLI_USED WHERE BONUS_KLI_USED.KLI_ID = :P_KLI_ID AND BONUS_KLI_USED.BONUS_ID = BONUS_CONFIG.ID) AND BONUS_CONFIG.IS_ACTIV = 2) OR BONUS_CONFIG.IS_ACTIV = 1) 
                 AND EXISTS (SELECT BONUS_CONFIG_SKLAD.SKLAD_ID FROM BONUS_CONFIG_SKLAD WHERE BONUS_CONFIG_SKLAD.SKLAD_ID =:P_SKLAD_ID AND BONUS_CONFIG_SKLAD.BONUS_ID =BONUS_CONFIG.ID) 
 
             UNION 
 
             SELECT 
                 BONUS_CONFIG.ID 
             FROM 
                 BONUS_CONFIG 
                 JOIN BONUS_CONFIG_KLI BCK ON BCK.BONUS_ID = BONUS_CONFIG.ID AND BCK.KLI_ID = :P_KLI_ID 
             WHERE 
                 BONUS_CONFIG.TIP_BONUS = :P_TIP_BONUS 
                 AND ((NOT EXISTS(SELECT BONUS_KLI_USED.ID FROM BONUS_KLI_USED WHERE BONUS_KLI_USED.KLI_ID = :P_KLI_ID AND BONUS_KLI_USED.BONUS_ID = BONUS_CONFIG.ID) AND BONUS_CONFIG.IS_ACTIV = 2) OR BONUS_CONFIG.IS_ACTIV = 1) 
                 AND BONUS_CONFIG.ANULIRAN = 0 AND 
                 ((BONUS_CONFIG.ID_BONUS IS NULL) OR (BONUS_CONFIG.ID_BONUS = 0)) AND 
                 BONUS_CONFIG.IS_ACTIV IN (1,2) 
                 AND BONUS_CONFIG.TIP IN (3,4) 
                 AND NOT EXISTS (SELECT BONUS_CONFIG_SKLAD.SKLAD_ID FROM BONUS_CONFIG_SKLAD WHERE BONUS_CONFIG_SKLAD.BONUS_ID = BONUS_CONFIG.ID) 
 
             UNION 
 
             SELECT 
                 BONUS_CONFIG.ID 
             FROM 
                 BONUS_CONFIG 
                 JOIN BONUS_CONFIG_KLI BCK ON BCK.BONUS_ID = BONUS_CONFIG.ID AND BCK.KLI_ID = :P_KLI_ID 
             WHERE 
                 BONUS_CONFIG.TIP_BONUS = :P_TIP_BONUS 
                 AND ((NOT EXISTS(SELECT BONUS_KLI_USED.ID FROM BONUS_KLI_USED WHERE BONUS_KLI_USED.KLI_ID = :P_KLI_ID AND BONUS_KLI_USED.BONUS_ID = BONUS_CONFIG.ID) AND BONUS_CONFIG.IS_ACTIV = 2) OR BONUS_CONFIG.IS_ACTIV = 1) 
                 AND BONUS_CONFIG.ANULIRAN = 0 AND 
                 ((BONUS_CONFIG.ID_BONUS IS NULL) OR (BONUS_CONFIG.ID_BONUS = 0)) AND 
                 BONUS_CONFIG.IS_ACTIV IN (1,2) 
                 AND BONUS_CONFIG.TIP IN (3,4) 
                 AND EXISTS (SELECT BONUS_CONFIG_SKLAD.SKLAD_ID FROM BONUS_CONFIG_SKLAD WHERE BONUS_CONFIG_SKLAD.SKLAD_ID =:P_SKLAD_ID AND BONUS_CONFIG_SKLAD.BONUS_ID =BONUS_CONFIG.ID) 
 
    ) 
    INTO :ID 
    DO SUSPEND; 
END^


ALTER PROCEDURE GET_ACTIVE_FP_NUMBER (
    R_OBEKT_ID TYPE OF DOM_KEY)
RETURNS (
    R_FP_NUMBER TYPE OF DOM_FP_NUMBER,
    R_UNP INTEGER)
AS
declare variable L_LAST_ACTIVE type of DOM_INT64; 
declare variable L_GEN_NAME type of DOM_FP_GEN; 
declare variable L_LAST_FP_NUMBER DOM_FP_NUMBER; 
declare variable L_INC integer; 
declare variable L_LAST_ACT integer; 
declare variable L_CHECK_SEC integer; 
declare variable L_CURRENT_TS timestamp; 
declare variable L_FINAL_TS timestamp; 
BEGIN 
    L_LAST_ACT = 999999999; 
    L_LAST_FP_NUMBER = NULL; 
    L_INC = 1; 
    L_CHECK_SEC = 5; 
 
    EXECUTE STATEMENT 'SELECT DATEADD(SECOND, ' || L_CHECK_SEC || ', CURRENT_TIMESTAMP) FROM RDB$DATABASE' INTO :L_FINAL_TS; 
 
    WHILE (1=1) DO BEGIN 
    -- ТЪРСИ КАСОВ ПАРАТ В ОБЕКТА, КОЙТО Е БИЛ АКТИВЕН ПОСЛЕДНАТА МИНУТА 
      FOR EXECUTE STATEMENT ' 
        SELECT 
            FP.FP_NUMBER, 
            FP.GEN_NAME_ACTIVE 
        FROM 
            FP 
        WHERE 
            FP.OBEKT_ID = ' ||  :R_OBEKT_ID 
        INTO 
            :R_FP_NUMBER, :L_GEN_NAME 
        DO BEGIN 
            EXECUTE STATEMENT 'SELECT GEN_ID(' || :L_GEN_NAME || ', 0) FROM RDB$DATABASE' 
            INTO 
                :L_LAST_ACTIVE; 
 
            L_LAST_ACTIVE = DATEDIFF(SECOND, DATEADD(SECOND, :L_LAST_ACTIVE, TIMESTAMP '01.01.2019 00:00:00'), CURRENT_TIMESTAMP); 
 
            IF (L_LAST_ACTIVE <= L_CHECK_SEC) THEN BEGIN 
                SUSPEND; 
                EXIT; 
            END 
 
            IF (L_LAST_ACTIVE <= L_CHECK_SEC) THEN BEGIN 
              EXECUTE STATEMENT 'SELECT GEN_ID(GEN_FP_NUMBER_' ||:R_FP_NUMBER|| ',' ||:L_INC|| ') FROM RDB$DATABASE' INTO :R_UNP; 
              SUSPEND; 
              EXIT; 
            END 
 
            IF (L_LAST_ACT > L_LAST_ACTIVE) THEN BEGIN 
            L_LAST_ACT = L_LAST_ACTIVE; 
            L_LAST_FP_NUMBER = R_FP_NUMBER; 
            END 
 
        END 
 
        EXECUTE STATEMENT 'SELECT CURRENT_TIMESTAMP FROM RDB$DATABASE' INTO :L_CURRENT_TS; 
        IF (L_CURRENT_TS > L_FINAL_TS) THEN BREAK; 
    END 
 
    IF (L_LAST_FP_NUMBER IS NOT NULL AND L_LAST_ACT <= IIF(L_CHECK_SEC <> 0, L_CHECK_SEC, 999999999)) THEN BEGIN 
        R_FP_NUMBER = L_LAST_FP_NUMBER; 
        L_LAST_ACTIVE = L_LAST_ACT; 
        EXECUTE STATEMENT 'SELECT GEN_ID(GEN_FP_NUMBER_' ||:R_FP_NUMBER|| ',' ||:L_INC|| ') FROM RDB$DATABASE' INTO :R_UNP; 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_ACTIVE_PRICE_LISTS (
    P_SKLAD_ID TYPE OF DOM_KEY)
RETURNS (
    R_PRICE_LIST_OPR_ID TYPE OF DOM_INT,
    R_SKLAD_ID TYPE OF DOM_INT,
    R_IS_PROMOTIONAL TYPE OF DOM_SMAL_INT)
AS
declare variable L_PRICE_LIST_OPR_ID type of DOM_INT; 
declare variable L_PRIORITET type of DOM_INT; 
declare variable L_OT_TIME type of DOM_TIME; 
declare variable L_DO_TIME type of DOM_TIME; 
declare variable L_WEEK type of DOM_INT; 
declare variable L_BIT_DAY_WEEK type of DOM_INT; 
declare variable L_ACTIVE type of DOM_SMAL_INT; 
begin 
  FOR SELECT 
        CENOVA_LISTA.OPR_ID, 
        CENOVA_LISTA.PRIORITET, 
        CENOVA_LISTA.OT_TIME, 
        CENOVA_LISTA.DO_TIME, 
        CENOVA_LISTA.WEEK, 
        CENOVA_LISTA.IS_PROMOTIONAL 
    FROM 
        CENOVA_LISTA INNER JOIN OPR ON OPR.ID = CENOVA_LISTA.OPR_ID 
    WHERE 
        ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
        AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
        AND CENOVA_LISTA.ACTIVNA = 1 
        AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
        AND ((EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD_ID AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID)) 
            OR (SELECT COUNT(CENOVA_LISTA_SKLAD.ID) FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) = 0) 
    ORDER BY 2 DESC 
    INTO 
        :L_PRICE_LIST_OPR_ID, :L_PRIORITET, :L_OT_TIME, :L_DO_TIME, :L_WEEK, :R_IS_PROMOTIONAL 
    DO BEGIN 
        L_ACTIVE = 1; 
        R_PRICE_LIST_OPR_ID = :L_PRICE_LIST_OPR_ID; 
 
        IF (L_WEEK IS NOT NULL) THEN BEGIN 
            L_BIT_DAY_WEEK = POWER(2, EXTRACT(WEEKDAY FROM CURRENT_DATE-1)); 
 
            IF (BIN_AND(:L_WEEK, :L_BIT_DAY_WEEK) <> :L_BIT_DAY_WEEK) THEN 
                L_ACTIVE = 0; 
        END 
        IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME >= CURRENT_TIME)) THEN 
            L_ACTIVE = 0; 
        IF ((:L_DO_TIME IS NOT NULL) AND (:L_DO_TIME <= CURRENT_TIME)) THEN 
            L_ACTIVE = 0; 
 
        IF (:L_ACTIVE = 1) THEN 
            SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_AGENT_KLIENTI (
    P_AGENT INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(100))
AS
declare variable l_sklad integer; 
BEGIN 
  FOR 
    SELECT 
        KLI_SKLAD_NODE.sklad_id 
    FROM KLI_SKLAD_NODE 
    WHERE 
        KLI_SKLAD_NODE.kli_id = :p_agent 
  
    UNION 
 
    select 
        KLI_SKLAD_NODE.sklad_id 
    from KLI_SKLAD_NODE 
    JOIN SELEKCIQ_KLI_EL ON KLI_SKLAD_NODE.SELEKCIQ_ID = SELEKCIQ_KLI_EL.SELEKCIQ_ID AND KLI_SKLAD_NODE.kli_id = :p_agent 
    join KLI on KLI_SKLAD_NODE.kli_id = kli.id and kli.klient = 1 
    INTO :l_sklad 
  DO 
  BEGIN 
    for select 
    GET_KLI_SKLAD_NODE.id, 
    GET_KLI_SKLAD_NODE.name 
    from GET_KLI_SKLAD_NODE(0,:l_sklad) 
    into :id,:name 
    do 
    SUSPEND; 
  END 
END^


ALTER PROCEDURE GET_ALL_CALC (
    P_FILTER_SIMPLE VARCHAR(180))
RETURNS (
    R_NAME_DETAIL VARCHAR(100),
    R_NAME_CHILD VARCHAR(100),
    R_KOL TYPE OF DOM_KOL,
    R_ME CHAR(2),
    R_FORMULA TYPE OF DOM_CHAR_120,
    R_SELEKCIQ_NAME VARCHAR(50),
    R_CENA_SP DOUBLE PRECISION,
    R_SUMA TYPE OF DOM_SUMA,
    R_SIMPLE_CHILD_ID INTEGER,
    R_LAST_CENA TYPE OF DOM_CENA,
    R_SUMA_LAST_CENA TYPE OF DOM_SUMA)
AS
declare variable L_ALL_SUMA double precision; 
declare variable L_SIMPLE_ID integer; 
declare variable L_SIMPLE_NAME varchar(100); 
declare variable L_SUMA_LAST_CENA_TOTAL type of DOM_SUMA; 
BEGIN 
for execute statement 'SELECT DISTINCT 
     SIMPLE.ID , 
     SIMPLE.NAME 
  FROM 
     SIMPLE INNER JOIN SIMPLE_CALC ON SIMPLE_CALC.SIMPLE_ID = SIMPLE.ID 
  WHERE  ' || :P_FILTER_SIMPLE || ' (1=1) order by 2' 
        into :L_SIMPLE_ID, :L_SIMPLE_NAME 
do 
begin 
 
  L_ALL_SUMA = 0; 
  L_SUMA_LAST_CENA_TOTAL = 0; 
 
  for select S.NAME as NAME_DETAIL, 
             S1.NAME as NAME_CHILD, 
             SIMPLE_CALC.KOL as KOL, 
             ME.NAME as ME, 
             SIMPLE_CALC.FORMULA, 
             SELEKCIQ.NAME as SELEKCIQ_NAME, 
             S1.id AS SIMPLE_CHILD_ID, 
             (select 
                     case 
                       when (sum(NAL.KOL_NAL) <> 0) then ROUNDD(sum(NAL.SUMA) / sum(NAL.KOL_NAL)) 
                       else 0 
                     end 
              from NAL 
              where NAL.SIMPLE_ID = S1.ID) as CENA_SR, 
              (Select first 1 nal.last_cena 
               from nal 
               where nal.simple_id = S1.id 
               order by nal.datetime_lastcena desc ) as last_cena 
 
      from SIMPLE_CALC 
      inner join SIMPLE S on S.ID = SIMPLE_CALC.SIMPLE_ID 
      inner join SIMPLE S1 on S1.ID = SIMPLE_CALC.CHILD_SIMPLE_ID 
      inner join ME on ME.ID = S1.ME_ID 
      left join SELEKCIQ on SELEKCIQ.ID = S1.DEF_SEL_CALC 
      where S.ID = :L_SIMPLE_ID 
      order by 1, 6 
 
      into :R_NAME_DETAIL, :R_NAME_CHILD, :R_KOL, :R_ME, :R_FORMULA, :R_SELEKCIQ_NAME, :R_SIMPLE_CHILD_ID, :R_CENA_SP , :R_LAST_CENA 
  do 
  begin 
    R_SUMA_LAST_CENA = ROUND(:R_KOL * COALESCE(:R_LAST_CENA,0), 2); 
    R_SUMA = ROUND(:R_KOL * :R_CENA_SP, 2); 
    L_ALL_SUMA = :L_ALL_SUMA + COALESCE(:R_SUMA, 0); 
    L_SUMA_LAST_CENA_TOTAL = :L_SUMA_LAST_CENA_TOTAL + COALESCE(:R_SUMA_LAST_CENA, 0); 
    suspend; 
  end 
 
  R_NAME_DETAIL = :R_NAME_DETAIL; 
  R_NAME_CHILD = null; 
  R_KOL = null; 
  R_ME = null; 
  R_FORMULA = null; 
  R_SELEKCIQ_NAME = 'Обща сума:'; 
  R_CENA_SP = null; 
  R_SUMA = L_ALL_SUMA; 
  R_SIMPLE_CHILD_ID = NULL; 
  R_LAST_CENA = null; 
  R_SUMA_LAST_CENA =:L_SUMA_LAST_CENA_TOTAL; 
 
  suspend; 
 
end 
 
END^


ALTER PROCEDURE GET_ALL_SIMPLE_AND_SKLAD_OBOB (
    P_FROM_DATE DATE,
    P_TO_DATE DATE,
    P_NULI SMALLINT)
RETURNS (
    R_KOL_NACH DOUBLE PRECISION,
    R_KOL_SALDO DOUBLE PRECISION,
    R_SUMA_NACH_FR DOUBLE PRECISION,
    R_SUMA_SALDO_FR DOUBLE PRECISION,
    R_SUMA_SR_OB DOUBLE PRECISION,
    R_SUMA_NACH_OUT_SR DOUBLE PRECISION,
    R_SUMA_SALDO_SR DOUBLE PRECISION,
    R_SUMA_NACH_SR DOUBLE PRECISION,
    R_SUMA_FR_OB DOUBLE PRECISION,
    R_KOL_OB DOUBLE PRECISION,
    R_KOL_IN_OB DOUBLE PRECISION,
    R_KOL_OUT_OB DOUBLE PRECISION,
    R_SUMA_IN_SR_OB DOUBLE PRECISION,
    R_SUMA_OUT_SR_OB DOUBLE PRECISION,
    R_SUMA_OUT_FR_OB DOUBLE PRECISION,
    R_SUMA_IN_FR_OB DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER)
AS
declare variable L_SKLAD_ID integer; 
BEGIN 
    FOR SELECT 
        SKLAD.ID 
    FROM 
        SKLAD, SYSTEM 
    WHERE 
        SKLAD.ID <> SYSTEM.H_SKLAD 
    INTO 
        :L_SKLAD_ID 
    DO BEGIN 
        FOR SELECT 
            SIMPLE.ID AS SIMPLE_ID 
        FROM 
            SIMPLE 
        WHERE 
           NOT SIMPLE.USLUGA = 1 
        INTO 
            :R_SIMPLE_ID 
        DO BEGIN 
            FOR SELECT 
                GET_SIMPLE_HISTORY_OBOB.R_KOLNACH, 
                GET_SIMPLE_HISTORY_OBOB.R_KOL_OB, 
                GET_SIMPLE_HISTORY_OBOB.R_SUMANACH_FR, 
                GET_SIMPLE_HISTORY_OBOB.R_SUMANACH_SR, 
                GET_SIMPLE_HISTORY_OBOB.R_SUMA_SALDO_FR, 
                GET_SIMPLE_HISTORY_OBOB.R_SUMA_SALDO_SR, 
                GET_SIMPLE_HISTORY_OBOB.R_KOL_SALDO, 
                GET_SIMPLE_HISTORY_OBOB.R_SUMA_FR_OB, 
                GET_SIMPLE_HISTORY_OBOB.R_SUMA_SR_OB, 
                GET_SIMPLE_HISTORY_OBOB.R_KOL_IN_OB, 
                GET_SIMPLE_HISTORY_OBOB.R_KOL_OUT_OB, 
                GET_SIMPLE_HISTORY_OBOB.R_SUMA_IN_SR_OB, 
                GET_SIMPLE_HISTORY_OBOB.R_SUMA_OUT_SR_OB, 
                GET_SIMPLE_HISTORY_OBOB.R_SUMA_OUT_FR_OB, 
                GET_SIMPLE_HISTORY_OBOB.R_SUMAIN_FR_OB 
            FROM 
                GET_SIMPLE_HISTORY_OBOB(:L_SKLAD_ID,:P_FROM_DATE,:P_TO_DATE, :R_SIMPLE_ID) 
            INTO 
                :R_KOL_NACH, :R_KOL_OB, :R_SUMA_NACH_FR, :R_SUMA_NACH_SR, :R_SUMA_SALDO_FR, 
                :R_SUMA_SALDO_SR, :R_KOL_SALDO, :R_SUMA_FR_OB, :R_SUMA_SR_OB, :R_KOL_IN_OB,:R_KOL_OUT_OB, 
                :R_SUMA_IN_SR_OB, :R_SUMA_OUT_SR_OB,:R_SUMA_OUT_FR_OB,:R_SUMA_IN_FR_OB 
            DO BEGIN 
                IF (P_NULI = 1) THEN BEGIN 
                    IF (NOT(R_KOL_OB = 0.00 AND R_SUMA_NACH_FR = 0.00 AND R_SUMA_NACH_SR = 0.00 AND R_SUMA_SALDO_FR = 0.00 AND 
                        R_KOL_SALDO = 0.00 AND R_SUMA_FR_OB = 0.00 AND R_SUMA_SR_OB = 0.00 AND R_KOL_IN_OB = 0.00 AND 
                        R_KOL_OUT_OB = 0.00 AND R_SUMA_IN_SR_OB = 0.00 AND R_SUMA_OUT_SR_OB = 0.00 AND R_SUMA_OUT_FR_OB = 0.00 AND 
                        R_SUMA_IN_FR_OB = 0.00)) 
                    THEN 
                        SUSPEND; 
                END 
                ELSE 
                    SUSPEND; 
            END 
        END 
    END 
  SUSPEND; 
END^


ALTER PROCEDURE GET_ALL_SIMPLE_HISTORY (
    P_SKLAD_ID TYPE OF DOM_KEY_SMALL,
    P_FROM_DATE TYPE OF DOM_CHAR_10,
    P_TO_DATE TYPE OF DOM_CHAR_10,
    P_FILTER_SIMPLES VARCHAR(1024),
    P_FILTER_ORDER TYPE OF DOM_CHAR_10)
RETURNS (
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_OPR_ID TYPE OF DOM_KEY,
    R_OPR_TIP TYPE OF DOM_KEY_SMALL,
    R_OPR_NAME VARCHAR(45),
    R_OPR_DATE TYPE OF DOM_DATE,
    R_KOL_IN TYPE OF DOM_KOL,
    R_KOL_OUT TYPE OF DOM_KOL,
    R_KOL_SALDO TYPE OF DOM_KOL,
    R_SUMA_IN_FR TYPE OF DOM_SUMA,
    R_SUMA_OUT_FR TYPE OF DOM_SUMA,
    R_SUMA_SALDO_FR TYPE OF DOM_SUMA,
    R_SUMA_IN_SR TYPE OF DOM_SUMA,
    R_SUMA_OUT_SR TYPE OF DOM_SUMA,
    R_SUMA_SALDO_SR DOUBLE PRECISION,
    R_SKLAD_NAME VARCHAR(20),
    R_BARCODE VARCHAR(13),
    R_SIMPLE_CODE VARCHAR(50),
    R_ED_CENA_IN_FR TYPE OF DOM_CENA,
    R_ED_CENA_IN_SR TYPE OF DOM_CENA,
    R_ED_CENA_OUT_FR TYPE OF DOM_CENA,
    R_ED_CENA_OUT_SR TYPE OF DOM_CENA,
    R_ED_CENA_SALDO_FR TYPE OF DOM_CENA,
    R_ED_CENA_SALDO_SR TYPE OF DOM_CENA,
    R_KLI_ID TYPE OF DOM_KEY,
    R_PN_SUMA_FR TYPE OF DOM_KOL,
    R_PN_SUMA_SR TYPE OF DOM_KOL,
    R_PN_KOL TYPE OF DOM_KOL,
    R_PN_SALDO_SUMA_FR TYPE OF DOM_KOL,
    R_PN_SALDO_SUMA_SR TYPE OF DOM_SUMA,
    R_PN_SALDO_KOL TYPE OF DOM_KOL)
AS
declare variable L_SIMPLE_ID integer; 
BEGIN 
/*V.7*/ 
    FOR EXECUTE STATEMENT 
    'SELECT 
        SIMPLE.ID AS SIMPLE_ID 
    FROM 
        SIMPLE 
    WHERE 
        NOT SIMPLE.USLUGA = 1 ' || 
        :P_FILTER_SIMPLES || 
    ' ORDER BY SIMPLE.NAME ' 
    INTO 
        :L_SIMPLE_ID 
    DO BEGIN 
        R_SIMPLE_NAME = NULL; 
        R_OPR_ID = -2; 
        R_SIMPLE_ID = -1; 
        R_OPR_TIP = NULL; 
        R_OPR_NAME = NULL; 
        R_OPR_DATE = NULL; 
        R_KOL_IN = NULL; 
        R_KOL_OUT = NULL; 
        R_KOL_SALDO = NULL; 
        R_SUMA_IN_FR = NULL; 
        R_SUMA_OUT_FR = NULL; 
        R_SUMA_SALDO_FR = NULL; 
        R_SUMA_IN_SR = NULL; 
        R_SUMA_OUT_SR = NULL; 
        R_SUMA_SALDO_SR = NULL; 
        R_SKLAD_NAME = NULL; 
        R_ED_CENA_IN_FR = NULL; 
        R_ED_CENA_IN_SR = NULL; 
        R_ED_CENA_OUT_FR = NULL; 
        R_ED_CENA_OUT_SR = NULL; 
        R_ED_CENA_SALDO_FR = NULL; 
        R_ED_CENA_SALDO_SR = NULL; 
        R_KLI_ID = NULL; 
        R_PN_KOL = NULL; 
        R_PN_SALDO_KOL = NULL; 
        R_PN_SALDO_SUMA_FR = NULL; 
        R_PN_SALDO_SUMA_SR = NULL; 
        R_PN_SUMA_FR = NULL; 
        R_PN_SUMA_SR = NULL; 
        SUSPEND; 
        FOR SELECT 
            GET_SIMPLE_HISTORY.R_SIMPLE_NAME, 
            GET_SIMPLE_HISTORY.R_OPR_TIP, 
            GET_SIMPLE_HISTORY.R_OPR_NAME, 
            GET_SIMPLE_HISTORY.R_OPR_DATE, 
            GET_SIMPLE_HISTORY.R_KOL_IN, 
            GET_SIMPLE_HISTORY.R_KOL_OUT, 
            GET_SIMPLE_HISTORY.R_KOL_SALDO, 
            GET_SIMPLE_HISTORY.R_OPR_ID, 
            GET_SIMPLE_HISTORY.R_SUMA_IN_FR, 
            GET_SIMPLE_HISTORY.R_SUMA_IN_SR, 
            GET_SIMPLE_HISTORY.R_SUMA_OUT_FR, 
            GET_SIMPLE_HISTORY.R_SUMA_OUT_SR, 
            GET_SIMPLE_HISTORY.R_SUMA_SALDO_FR, 
            GET_SIMPLE_HISTORY.R_SUMA_SALDO_SR, 
            GET_SIMPLE_HISTORY.R_SKLAD_NAME, 
            GET_SIMPLE_HISTORY.R_ED_CENA_IN_FR, 
            GET_SIMPLE_HISTORY.R_ED_CENA_IN_SR, 
            GET_SIMPLE_HISTORY.R_ED_CENA_OUT_FR, 
            GET_SIMPLE_HISTORY.R_ED_CENA_OUT_SR, 
            GET_SIMPLE_HISTORY.R_ED_CENA_SALDO_FR, 
            GET_SIMPLE_HISTORY.R_ED_CENA_SALDO_SR, 
            GET_SIMPLE_HISTORY.r_simple_id, 
            GET_SIMPLE_HISTORY.R_SIMPLE_CODE, 
            GET_SIMPLE_HISTORY.R_BARCODE, 
            GET_SIMPLE_HISTORY.R_KLI_ID, 
            GET_SIMPLE_HISTORY.R_PN_SUMA_FR, 
            GET_SIMPLE_HISTORY.R_PN_SUMA_SR, 
            GET_SIMPLE_HISTORY.R_PN_KOL, 
            GET_SIMPLE_HISTORY.R_PN_SALDO_SUMA_FR, 
            GET_SIMPLE_HISTORY.R_PN_SALDO_SUMA_SR, 
            GET_SIMPLE_HISTORY.R_PN_SALDO_KOL 
        FROM 
            GET_SIMPLE_HISTORY(:P_SKLAD_ID,:L_SIMPLE_ID,:P_FROM_DATE,:P_TO_DATE,:P_FILTER_ORDER) 
        INTO 
            :R_SIMPLE_NAME,:R_OPR_TIP,:R_OPR_NAME,:R_OPR_DATE,:R_KOL_IN,:R_KOL_OUT,:R_KOL_SALDO,:R_OPR_ID, 
            :R_SUMA_IN_FR,:R_SUMA_IN_SR,:R_SUMA_OUT_FR,:R_SUMA_OUT_SR,:R_SUMA_SALDO_FR,:R_SUMA_SALDO_SR, 
            :R_SKLAD_NAME,:R_ED_CENA_IN_FR,:R_ED_CENA_IN_SR,:R_ED_CENA_OUT_FR,:R_ED_CENA_OUT_SR,:R_ED_CENA_SALDO_FR, 
            :R_ED_CENA_SALDO_SR,:R_SIMPLE_ID,:R_SIMPLE_CODE,:R_BARCODE,:R_KLI_ID,:R_PN_SUMA_FR,:R_PN_SUMA_SR, 
            :R_PN_KOL,:R_PN_SALDO_SUMA_FR,:R_PN_SALDO_SUMA_SR,:R_PN_SALDO_KOL 
        DO 
            SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_ALL_SIMPLE_HISTORY_OBOB (
    P_SKLAD_ID TYPE OF DOM_KEY,
    P_FROM_DATE TYPE OF DOM_CHAR_10,
    P_TO_DATE TYPE OF DOM_CHAR_10,
    P_FILTER_SIMPLES VARCHAR(1024),
    P_NULI TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SIMPLE_CODE TYPE OF DOM_CHAR_50,
    R_BARCODE VARCHAR(13),
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_KOLNACH TYPE OF DOM_KOL,
    R_KOL_SALDO TYPE OF DOM_KOL,
    R_SUMANACH_FR TYPE OF DOM_SUMA,
    R_SUMA_SALDO_FR TYPE OF DOM_SUMA,
    R_SUMA_SR_OB TYPE OF DOM_SUMA,
    R_SUMA_SALDO_SR TYPE OF DOM_SUMA,
    R_SUMANACH_SR TYPE OF DOM_SUMA,
    R_SUMA_FR_OB TYPE OF DOM_SUMA,
    R_KOL_OB TYPE OF DOM_KOL,
    R_KOL_IN_OB TYPE OF DOM_KOL,
    R_KOL_OUT_OB TYPE OF DOM_KOL,
    R_SUMA_IN_SR_OB TYPE OF DOM_SUMA,
    R_SUMA_OUT_SR_OB TYPE OF DOM_SUMA,
    R_SUMA_OUT_FR_OB TYPE OF DOM_SUMA,
    R_SUMAIN_FR_OB TYPE OF DOM_SUMA,
    R_ED_CENA_IN_SR TYPE OF DOM_CENA)
AS
declare variable L_SIMPLE_ID integer; 
BEGIN 
 
  FOR EXECUTE STATEMENT 
   'SELECT 
       SIMPLE.ID AS SIMPLE_ID 
      FROM 
       SIMPLE 
      WHERE 
       NOT SIMPLE.USLUGA = 1' || 
       :P_FILTER_SIMPLES || 
      'ORDER BY SIMPLE.NAME' 
  INTO 
  :L_SIMPLE_ID 
  DO  BEGIN 
    FOR SELECT 
      GET_SIMPLE_HISTORY_OBOB.R_SIMPLE_NAME, 
      GET_SIMPLE_HISTORY_OBOB.R_SIMPLE_CODE, 
      GET_SIMPLE_HISTORY_OBOB.R_KOLNACH, 
      GET_SIMPLE_HISTORY_OBOB.R_KOL_OB, 
      GET_SIMPLE_HISTORY_OBOB.R_SUMANACH_FR, 
      GET_SIMPLE_HISTORY_OBOB.R_SUMANACH_SR, 
      GET_SIMPLE_HISTORY_OBOB.R_SUMA_SALDO_FR, 
      GET_SIMPLE_HISTORY_OBOB.R_SUMA_SALDO_SR, 
      GET_SIMPLE_HISTORY_OBOB.R_BARCODE, 
      GET_SIMPLE_HISTORY_OBOB.R_KOL_SALDO, 
      GET_SIMPLE_HISTORY_OBOB.R_SUMA_FR_OB, 
      GET_SIMPLE_HISTORY_OBOB.R_SUMA_SR_OB, 
      GET_SIMPLE_HISTORY_OBOB.R_KOL_IN_OB, 
      GET_SIMPLE_HISTORY_OBOB.R_KOL_OUT_OB, 
      GET_SIMPLE_HISTORY_OBOB.R_SUMA_IN_SR_OB, 
      GET_SIMPLE_HISTORY_OBOB.R_SUMA_OUT_SR_OB, 
      GET_SIMPLE_HISTORY_OBOB.R_SUMA_OUT_FR_OB, 
      GET_SIMPLE_HISTORY_OBOB.R_SUMAIN_FR_OB, 
      GET_SIMPLE_HISTORY_OBOB.R_ED_CENA_IN_SR 
    FROM 
      GET_SIMPLE_HISTORY_OBOB(:P_SKLAD_ID,:P_FROM_DATE,:P_TO_DATE,:L_SIMPLE_ID) 
    INTO 
      :R_SIMPLE_NAME, 
      :R_SIMPLE_CODE, 
      :R_KOLNACH, 
      :R_KOL_OB, 
      :R_SUMANACH_FR, 
      :R_SUMANACH_SR, 
      :R_SUMA_SALDO_FR, 
      :R_SUMA_SALDO_SR, 
      :R_BARCODE, 
      :R_KOL_SALDO, 
      :R_SUMA_FR_OB, 
      :R_SUMA_SR_OB, 
      :R_KOL_IN_OB, 
      :R_KOL_OUT_OB, 
      :R_SUMA_IN_SR_OB, 
      :R_SUMA_OUT_SR_OB, 
      :R_SUMA_OUT_FR_OB, 
      :R_SUMAIN_FR_OB, 
      :R_ED_CENA_IN_SR 
      DO 
 
      IF (P_NULI = 1) THEN BEGIN 
        IF (NOT(R_KOL_OB = 0.00 AND R_SUMANACH_FR = 0.00 AND R_SUMANACH_SR = 0.00 AND R_SUMA_SALDO_FR = 0.00 AND 
            R_KOL_SALDO = 0.00 AND R_SUMA_FR_OB = 0.00 AND R_SUMA_SR_OB = 0.00 AND R_KOL_IN_OB = 0.00 AND 
            R_KOL_OUT_OB = 0.00 AND R_SUMA_IN_SR_OB = 0.00 AND R_SUMA_OUT_SR_OB = 0.00 AND R_SUMA_OUT_FR_OB = 0.00 AND 
            R_SUMAIN_FR_OB = 0.00)) THEN 
            SUSPEND; 
        END 
      ELSE 
        SUSPEND; 
     END 
END^


ALTER PROCEDURE GET_ALL_SN_EXPIRATION_DATE (
    P_OUT_EL_ID INTEGER)
RETURNS (
    R_SN TYPE OF DOM_CHAR_30,
    R_OUT_EL_ID TYPE OF DOM_KEY,
    R_EXPIRATION_DATE_STR TYPE OF DOM_CHAR_10)
AS
BEGIN 
 
  R_SN = NULL; 
  for 
    SELECT 
        SERIAL_NUM.SN, 
        SUBSTRING(100+EXTRACT(DAY FROM PE.SROK) FROM 2 FOR 2)||'.'|| 
        SUBSTRING(100+EXTRACT(MONTH FROM PE.SROK) FROM 2 FOR 2)||'.'|| 
        EXTRACT(YEAR FROM PE.SROK) 
    FROM 
        PARTIDA_OUT_EL_NODE INNER JOIN PARTIDA_EL_NODE ON PARTIDA_EL_NODE.ID = PARTIDA_OUT_EL_NODE.PARTIDA_NODE_ID AND PARTIDA_OUT_EL_NODE.OUT_EL_ID = :P_OUT_EL_ID 
        INNER JOIN PARTIDA_NAL ON PARTIDA_NAL.ID = PARTIDA_EL_NODE.PARTIDA_ID 
        INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PARTIDA_NAL.ELEMENT_ID 
        LEFT JOIN PARTIDA_EL PE ON PE.ID = SERIAL_NUM.PARTIDA_EL_ID 
    INTO 
        :R_SN, :R_EXPIRATION_DATE_STR 
  do BEGIN 
    R_OUT_EL_ID = P_OUT_EL_ID; 
 
    SUSPEND; 
  end 
END^


ALTER PROCEDURE GET_AMBALAJ (
    P_SIMPLE_ID INTEGER,
    P_KOL INTEGER,
    P_KLI INTEGER,
    P_CL_ID INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL INTEGER,
    R_KOL_TOTAL DOUBLE PRECISION,
    R_CENA_CL DOUBLE PRECISION)
AS
declare variable L_KOL integer; 
BEGIN 
    FOR SELECT 
        RAZ.KOL, 
        RAZ.SIMPLE_ID, 
        SM_R.NAME 
    FROM 
        SIMPLE SM INNER JOIN RAZFASOVKA RAZ ON RAZ.RAZ_TIP_ID = SM.RAZ_TIP_ID 
        INNER JOIN RAZ_TIP ON RAZ_TIP.ID = SM.RAZ_TIP_ID 
        INNER JOIN SIMPLE SM_R ON SM_R.ID = RAZ.SIMPLE_ID 
    WHERE 
        RAZ.SIMPLE_ID IS NOT NULL 
        AND RAZ_TIP.AMBALAJ = 1 
        AND SM.ID = :P_SIMPLE_ID 
    ORDER BY RAZ.KOL DESC 
    INTO 
        :L_KOL, :R_SIMPLE_ID, :R_SIMPLE_NAME 
    DO BEGIN 
 
        SELECT 
            AMBALAJ.KOL 
        FROM 
            AMBALAJ 
        WHERE 
            AMBALAJ.SIMPLE_ID = :R_SIMPLE_ID 
            AND AMBALAJ.KLI_ID = :P_KLI 
        INTO 
            :R_KOL_TOTAL; 
 
        if (L_KOL <> 0) then 
          R_KOL = P_KOL / L_KOL; 
        else 
          R_KOL = 0; 
 
        IF (R_KOL > 0 ) THEN BEGIN 
            EXECUTE PROCEDURE GET_CENA_CL(:P_CL_ID,:R_SIMPLE_ID) RETURNING_VALUES(:R_CENA_CL); 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_AMBALAJ_KLI_POR (
    P_OPR_ID INTEGER,
    P_CL_ID INTEGER)
RETURNS (
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL DOUBLE PRECISION,
    R_CENA DOUBLE PRECISION,
    R_KOL_OUT DOUBLE PRECISION,
    R_KOL_IN DOUBLE PRECISION,
    R_KOL_OLD DOUBLE PRECISION,
    R_KOL_TOTAL DOUBLE PRECISION)
AS
DECLARE VARIABLE L_TIP_OPR INTEGER; 
DECLARE VARIABLE L_KLI_ID INTEGER; 
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
DECLARE VARIABLE L_KOL_OUT DOUBLE PRECISION; 
DECLARE VARIABLE L_KOL_IN DOUBLE PRECISION; 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_OPR_OUT INTEGER; 
DECLARE VARIABLE L_OPR_IN INTEGER; 
BEGIN 
    SELECT 
        OPR.OPR_TIP, 
        OPR.KLI_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :L_TIP_OPR,:L_KLI_ID; 
 
    IF (L_TIP_OPR = 2) THEN 
    BEGIN 
    SELECT 
        OPR_AMBALAJ_NODE.OPR_AMBALAJ_ID 
    FROM 
        OPR_AMBALAJ_NODE 
        INNER JOIN OPR ON OPR_AMBALAJ_NODE.OPR_AMBALAJ_ID = OPR.ID 
    WHERE 
        OPR_AMBALAJ_NODE.OPR_PROD_ID = :P_OPR_ID AND OPR.OPR_TIP = 20 
    INTO :L_OPR_OUT; 
    SELECT 
        OPR_AMBALAJ_NODE.OPR_AMBALAJ_ID 
    FROM 
        OPR_AMBALAJ_NODE 
        INNER JOIN OPR ON OPR_AMBALAJ_NODE.OPR_AMBALAJ_ID = OPR.ID 
    WHERE 
        OPR_AMBALAJ_NODE.OPR_PROD_ID = :P_OPR_ID AND OPR.OPR_TIP = 21 
    INTO :L_OPR_IN; 
    END 
    else 
    BEGIN 
        L_OPR_OUT =:P_OPR_ID; 
        L_OPR_IN = 0; 
    END 
 
    FOR SELECT 
        AMBALAJ.SIMPLE_ID, 
        AMBALAJ.KOL, 
        SIMPLE.NAME, 
        (SELECT GET_CENA_CL.CENA FROM GET_CENA_CL(:P_CL_ID,SIMPLE.ID)) 
    FROM 
        AMBALAJ 
        INNER JOIN SIMPLE ON SIMPLE.ID = AMBALAJ.SIMPLE_ID 
    WHERE 
        AMBALAJ.KLI_ID =:L_KLI_ID 
    INTO :L_SIMPLE_ID,:L_KOL,:R_SIMPLE_NAME,:R_CENA 
 
    DO 
    BEGIN 
       SELECT 
           SUM(AMBALAJ_HISTORY.KOL) 
        FROM 
            AMBALAJ_HISTORY INNER JOIN OPR ON OPR.ID = AMBALAJ_HISTORY.OPR_ID 
        WHERE 
            OPR.OPR_TIP = 20 
            AND OPR.ID  =:L_OPR_OUT 
            AND OPR.KLI_ID = :L_KLI_ID 
            AND AMBALAJ_HISTORY.SIMPLE_ID = :L_SIMPLE_ID 
            AND NOT EXISTS ( 
                SELECT 
                    OPR_ANUL.ID 
                FROM 
                    OPR_ANUL 
                WHERE 
                    OPR_ANUL.AN_OPR_ID = OPR.ID) 
        INTO 
            :R_KOL_OUT; 
 
        IF (:R_KOL_OUT IS NULL) THEN 
            R_KOL_OUT = 0; 
 
        SELECT 
            SUM(AMBALAJ_HISTORY.KOL) 
        FROM 
            AMBALAJ_HISTORY INNER JOIN OPR ON OPR.ID = AMBALAJ_HISTORY.OPR_ID 
        WHERE 
            OPR.OPR_TIP = 21 
            AND OPR.ID =:L_OPR_IN 
            AND OPR.KLI_ID = :L_KLI_ID 
            AND AMBALAJ_HISTORY.SIMPLE_ID = :L_SIMPLE_ID 
            AND NOT EXISTS ( 
                SELECT 
                    OPR_ANUL.ID 
                FROM 
                    OPR_ANUL 
                WHERE 
                    OPR_ANUL.AN_OPR_ID = OPR.ID) 
        INTO 
            :R_KOL_IN; 
        IF (:R_KOL_IN IS NULL) THEN 
            R_KOL_IN = 0; 
 
            SELECT 
                SUM(AMBALAJ_HISTORY.KOL) 
            FROM 
                AMBALAJ_HISTORY INNER JOIN OPR ON OPR.ID = AMBALAJ_HISTORY.OPR_ID 
            WHERE 
                OPR.OPR_TIP = 20 
                AND OPR.ID < :P_OPR_ID 
                AND OPR.KLI_ID = :L_KLI_ID 
                AND AMBALAJ_HISTORY.SIMPLE_ID = :L_SIMPLE_ID 
                AND NOT EXISTS ( 
                    SELECT 
                        OPR_ANUL.ID 
                    FROM 
                        OPR_ANUL 
                    WHERE 
                        OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND NOT AMBALAJ_HISTORY.OPR_ID =:P_OPR_ID 
            INTO 
                :l_KOL_OUT; 
 
            IF (l_KOL_OUT IS NULL) THEN 
                l_KOL_OUT = 0; 
 
            SELECT 
                SUM(AMBALAJ_HISTORY.KOL) 
            FROM 
                AMBALAJ_HISTORY INNER JOIN OPR ON OPR.ID = AMBALAJ_HISTORY.OPR_ID 
            WHERE 
                OPR.OPR_TIP = 21 
                AND OPR.ID < :P_OPR_ID 
                AND OPR.KLI_ID = :L_KLI_ID 
                AND AMBALAJ_HISTORY.SIMPLE_ID = :L_SIMPLE_ID 
                AND NOT EXISTS ( 
                    SELECT 
                        OPR_ANUL.ID 
                    FROM 
                        OPR_ANUL 
                    WHERE 
                        OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND NOT AMBALAJ_HISTORY.OPR_ID =:P_OPR_ID 
            INTO 
                :l_KOL_IN; 
 
            IF (l_KOL_IN IS NULL) THEN 
                l_KOL_IN = 0; 
 
            R_KOL_OLD = :l_KOL_OUT - :l_KOL_IN; 
            R_KOL_TOTAL = :R_KOL_OLD + :R_KOL_OUT - :R_KOL_IN; 
            R_KOL =:R_KOL_OUT; 
            if ((R_KOL_OLD <> 0) or (R_KOL_TOTAL <> 0) or (R_KOL_OUT <> 0) or (R_KOL_IN <> 0)) then 
                SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_AMBALAJ_KLIENT (
    P_KLI_ID INTEGER,
    P_CL_ID INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_CODE VARCHAR(50),
    R_KOL DOUBLE PRECISION,
    R_CENA_CL DOUBLE PRECISION)
AS
BEGIN 
    FOR SELECT DISTINCT 
        SIMPLE.ID, 
        SIMPLE.NAME, 
        SIMPLE.CODE, 
        AMBALAJ.KOL 
    FROM 
        SIMPLE INNER JOIN RAZFASOVKA ON RAZFASOVKA.SIMPLE_ID = SIMPLE.ID 
        INNER JOIN AMBALAJ ON AMBALAJ.SIMPLE_ID = SIMPLE.ID AND AMBALAJ.KLI_ID =:P_KLI_ID 
    INTO :R_SIMPLE_ID,:R_SIMPLE_NAME,:R_CODE, :R_KOL 
    DO BEGIN 
        IF (COALESCE(:R_KOL,0) <> 0.00) THEN BEGIN 
            EXECUTE PROCEDURE GET_CENA_CL(:P_CL_ID,:R_SIMPLE_ID) RETURNING_VALUES(:R_CENA_CL); 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_AMBALAJ_OB (
    P_SIMPLE_ID INTEGER,
    P_KOL INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_KOL INTEGER)
AS
declare variable L_KOL integer; 
declare variable L_Raz_tip integer; 
declare variable L_KOL_S integer; 
BEGIN  
  select first 1 
    raz_tip_id, 
    kol 
  from razfasovka 
  where 
    simple_id = :p_simple_id 
  into :l_raz_tip,:l_kol_s; 
 
  FOR SELECT 
    RAZ.kol, 
    RAZ.simple_id 
  FROM razfasovka RAZ 
  WHERE 
    RAZ.raz_tip_id = :l_raz_tip and 
    RAZ.simple_id <> :p_simple_id and 
    RAZ.kol > :l_kol_s 
  ORDER BY RAZ.kol DESC 
  INTO :l_kol, :r_simple_id 
  DO BEGIN 
    r_kol = p_kol/l_kol; 
    IF (r_kol > 0) THEN 
      suspend; 
  END 
END^


ALTER PROCEDURE GET_AMBALAJ_OPR (
    P_OPR_ID INTEGER,
    P_ALL SMALLINT,
    P_CL_ID INTEGER)
RETURNS (
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL DOUBLE PRECISION,
    R_KOL_OLD DOUBLE PRECISION,
    R_CENA DOUBLE PRECISION,
    R_SUMA_PARTIDA TYPE OF DOM_SUMA,
    R_SIMPLE_CODE TYPE OF DOM_CHAR_15)
AS
declare variable L_SIMPLE_ID integer; 
declare variable L_KLI_ID integer; 
declare variable L_TIP_OPR integer; 
declare variable L_OPR_ID type of DOM_KEY; 
declare variable L_TIP_OPR_OLD integer; 
declare variable L_KOL_OUT type of DOM_KOL; 
declare variable L_KOL_IN type of DOM_KOL; 
declare variable L_KOL_OLD type of DOM_KOL; 
declare variable L_SUMA_PARTIDA_OUT type of DOM_SUMA; 
declare variable L_SUMA_PARTIDA_IN type of DOM_SUMA; 
BEGIN 
    R_SUMA_PARTIDA = 0; 
 
    SELECT 
        OPR.OPR_TIP 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :L_TIP_OPR; 
 
    L_OPR_ID =:P_OPR_ID; 
    L_KLI_ID = 0; 
    IF (L_TIP_OPR = 2) THEN BEGIN 
        SELECT 
            OPR_AMBALAJ_NODE.OPR_AMBALAJ_ID, 
            OPR.KLI_ID 
       FROM 
            OPR INNER JOIN OPR_AMBALAJ_NODE ON OPR_AMBALAJ_NODE.OPR_PROD_ID = OPR.ID 
        WHERE 
            OPR.ID = :P_OPR_ID AND 
            NOT EXISTS (SELECT OPR.ID FROM OPR WHERE OPR.ID = OPR_AMBALAJ_NODE.OPR_AMBALAJ_ID AND OPR.OPR_TIP = 21) 
        INTO 
            :P_OPR_ID,:L_KLI_ID; 
 
        SELECT FIRST 1 
            OPR_AMB.OPR_TIP 
        FROM 
            OPR INNER JOIN OPR_AMBALAJ_NODE ON OPR_AMBALAJ_NODE.OPR_PROD_ID = OPR.ID 
            INNER JOIN OPR OPR_AMB ON OPR_AMB.ID = OPR_AMBALAJ_NODE.OPR_AMBALAJ_ID 
        WHERE 
            OPR.ID = :L_OPR_ID 
        ORDER BY OPR.ID DESC 
        INTO :L_TIP_OPR_OLD; 
    END 
    ELSE BEGIN 
        SELECT 
            OPR.KLI_ID 
        FROM 
            OPR 
        WHERE 
            OPR.ID = :P_OPR_ID 
        INTO 
            :L_KLI_ID; 
    END 
 
    IF ((:L_TIP_OPR_OLD = 20) OR (:L_TIP_OPR = 20)) THEN BEGIN 
      FOR SELECT 
        AMBALAJ_HISTORY.SIMPLE_ID, 
        SIMPLE.NAME, 
        SIMPLE.CODE, 
        SUM(AMBALAJ_HISTORY.KOL), 
        SUM((SELECT COALESCE(GET_CENA_CL.CENA,0) FROM GET_CENA_CL(:P_CL_ID,SIMPLE.ID))) AS CENA 
      FROM 
        AMBALAJ_HISTORY INNER JOIN SIMPLE ON SIMPLE.ID = AMBALAJ_HISTORY.SIMPLE_ID 
      WHERE 
        AMBALAJ_HISTORY.OPR_ID = :P_OPR_ID 
      GROUP BY 1,2,3 
      INTO 
        :L_SIMPLE_ID,:R_SIMPLE_NAME, :R_SIMPLE_CODE, :R_KOL,:R_CENA 
      DO BEGIN 
        R_KOL_OLD = COALESCE(:L_KOL_OUT,0) - COALESCE(:L_KOL_IN,0); 
 
        IF (R_KOL <> 0) THEN 
 
        R_SUMA_PARTIDA = 0; 
 
        SUSPEND; 
      END 
    END 
    ELSE 
    BEGIN 
      IF ((:L_TIP_OPR IN (55,56,57,58)) OR (:L_TIP_OPR_OLD IN (55,56,57,58))) THEN 
        FOR SELECT 
            SIMPLE.ID, 
            SIMPLE.NAME, 
            simple.CODE, 
            SUM(OUT_EL.SUMA_FR), 
            -SUM(OUT_EL.KOL) AS KOL 
        FROM 
            OUT_EL INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        WHERE 
            OUT_EL.OPR_ID =:P_OPR_ID 
        GROUP BY 1, 2, 3 
        INTO :L_SIMPLE_ID,:R_SIMPLE_NAME, :R_SIMPLE_CODE, :R_SUMA_PARTIDA, :R_KOL 
 
        DO BEGIN 
            SELECT 
                COALESCE(GET_CENA_CL.CENA,0) 
            FROM 
                GET_CENA_CL(:P_CL_ID,:L_SIMPLE_ID) 
            INTO :R_CENA; 
 
            R_KOL_OLD = 0; 
 
            SUSPEND; 
        END 
    END 
 
    IF ((P_ALL = 1) AND (:L_TIP_OPR = 2)) THEN BEGIN 
        FOR SELECT 
            SIMPLE.ID, 
            SIMPLE.NAME, 
            simple.CODE, 
            SUM(AMBALAJ.KOL) 
        FROM 
            AMBALAJ INNER JOIN SIMPLE ON SIMPLE.ID = AMBALAJ.SIMPLE_ID 
        WHERE 
            AMBALAJ.KLI_ID =:L_KLI_ID 
        GROUP BY 1,2,3 
        INTO :L_SIMPLE_ID, :R_SIMPLE_NAME, :R_SIMPLE_CODE, :L_KOL_OLD 
        DO BEGIN 
            IF (:L_TIP_OPR_OLD = 20) THEN BEGIN 
                SELECT 
                    SUM(AMBALAJ_HISTORY.KOL) 
                FROM 
                    AMBALAJ_HISTORY INNER JOIN OPR ON OPR.ID = AMBALAJ_HISTORY.OPR_ID 
                WHERE 
                    OPR.OPR_TIP = 20 
                    AND OPR.ID >=:P_OPR_ID 
                    AND OPR.KLI_ID = :L_KLI_ID 
                    AND AMBALAJ_HISTORY.SIMPLE_ID = :L_SIMPLE_ID 
                    AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                INTO :L_KOL_OUT; 
 
                SELECT 
                    SUM(AMBALAJ_HISTORY.KOL) 
                FROM 
                    AMBALAJ_HISTORY INNER JOIN OPR ON OPR.ID = AMBALAJ_HISTORY.OPR_ID 
                WHERE 
                    OPR.OPR_TIP = 21 
                    AND OPR.ID >=:P_OPR_ID 
                    AND OPR.KLI_ID = :L_KLI_ID 
                    AND AMBALAJ_HISTORY.SIMPLE_ID = :L_SIMPLE_ID 
                    AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
 
                INTO :L_KOL_IN; 
 
                R_SUMA_PARTIDA = 0; 
 
                R_KOL_OLD = COALESCE(:L_KOL_OLD, 0) - (COALESCE(:L_KOL_OUT,0) - COALESCE(:L_KOL_IN,0)); 
            END 
            ELSE IF (:L_TIP_OPR_OLD IN (55,56,57,58)) THEN BEGIN 
                SELECT 
                    SUM(OUT_EL.SUMA_FR), 
                    SUM(OUT_EL.KOL) 
                FROM 
                    OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
                WHERE 
                    OPR.OPR_TIP IN (56,57) 
                    AND OPR.ID >= :P_OPR_ID 
                    AND OPR.KLI_ID = :L_KLI_ID 
                    AND OUT_EL.SIMPLE_ID = :L_SIMPLE_ID 
                    AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
 
              INTO :L_SUMA_PARTIDA_OUT,:L_KOL_OUT; 
 
              SELECT 
                  SUM(IN_EL.SUMA_FR), 
                  SUM(IN_EL.KOL) 
              FROM 
                  IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
              WHERE 
                  OPR.OPR_TIP IN (55,58) 
                  AND OPR.ID >= :P_OPR_ID 
                  AND OPR.KLI_ID = :L_KLI_ID 
                  AND IN_EL.SIMPLE_ID = :L_SIMPLE_ID 
                  AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
              INTO :L_SUMA_PARTIDA_IN,:L_KOL_IN; 
 
              R_KOL_OLD      = COALESCE(:L_KOL_OLD, 0) + (COALESCE(:L_KOL_OUT,0) - COALESCE(:L_KOL_IN,0)); 
              R_SUMA_PARTIDA = COALESCE(:L_SUMA_PARTIDA_IN, 0) - COALESCE(:L_SUMA_PARTIDA_OUT, 0); 
            END 
 
            SELECT 
                COALESCE(GET_CENA_CL.CENA,0) 
            FROM 
                GET_CENA_CL(:P_CL_ID,:L_SIMPLE_ID) 
            INTO :R_CENA; 
 
            R_KOL = 0; 
 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_AMBALAJ_VR (
    P_OPR_ID INTEGER)
RETURNS (
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL DOUBLE PRECISION,
    R_KOL_OLD DOUBLE PRECISION,
    R_KOL_TOTAL DOUBLE PRECISION,
    R_SUMA_PARTIDA TYPE OF DOM_SUMA)
AS
declare variable L_KLI_ID integer; 
declare variable L_SIMPLE_ID integer; 
declare variable L_KOL_OUT double precision; 
declare variable L_KOL_IN double precision; 
declare variable L_TIP_OPR integer; 
BEGIN 
    SELECT 
        OPR.OPR_TIP 
    FROM 
        OPR INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :L_TIP_OPR; 
 
    L_KLI_ID = 0; 
    IF (L_TIP_OPR = 2) THEN BEGIN 
        SELECT 
            OPR_AMBALAJ_NODE.OPR_AMBALAJ_ID, 
            OPR.KLI_ID 
        FROM 
            OPR INNER JOIN OPR_AMBALAJ_NODE ON OPR_AMBALAJ_NODE.OPR_PROD_ID = OPR.ID 
        WHERE 
            OPR.ID = :P_OPR_ID AND 
            NOT EXISTS (SELECT OPR.ID FROM OPR WHERE OPR.ID = OPR_AMBALAJ_NODE.OPR_AMBALAJ_ID AND OPR.OPR_TIP = 20) 
        INTO 
            :P_OPR_ID,:L_KLI_ID; 
 
        SELECT FIRST 1 
            OPR.OPR_TIP 
        FROM 
            OPR INNER JOIN OPR_AMBALAJ_NODE ON OPR_AMBALAJ_NODE.OPR_PROD_ID = OPR.ID 
        WHERE 
            OPR.ID = :P_OPR_ID 
        ORDER BY OPR.ID DESC 
        INTO :L_TIP_OPR; 
    END 
    ELSE BEGIN 
        SELECT 
            OPR.KLI_ID 
        FROM 
            OPR 
        WHERE 
            OPR.ID = :P_OPR_ID 
        INTO 
            :L_KLI_ID; 
    END 
 
    IF (:L_TIP_OPR = 21) THEN BEGIN 
        FOR SELECT 
            AMBALAJ_HISTORY.SIMPLE_ID, 
            SIMPLE.NAME, 
            SUM(AMBALAJ_HISTORY.KOL) 
        FROM 
            AMBALAJ_HISTORY INNER JOIN SIMPLE ON SIMPLE.ID = AMBALAJ_HISTORY.SIMPLE_ID 
        WHERE 
            AMBALAJ_HISTORY.OPR_ID = :P_OPR_ID 
        GROUP BY 1,2 
        INTO :L_SIMPLE_ID,:R_SIMPLE_NAME,:R_KOL 
        DO BEGIN 
            SELECT 
                SUM(AMBALAJ_HISTORY.KOL) 
            FROM 
                AMBALAJ_HISTORY INNER JOIN OPR ON OPR.ID = AMBALAJ_HISTORY.OPR_ID 
            WHERE 
                OPR.OPR_TIP = 20 
                AND OPR.ID < :P_OPR_ID 
                AND OPR.KLI_ID = :L_KLI_ID 
                AND AMBALAJ_HISTORY.SIMPLE_ID = :L_SIMPLE_ID 
                AND NOT EXISTS ( 
                    SELECT 
                        OPR_ANUL.ID 
                    FROM 
                        OPR_ANUL 
                    WHERE 
                        OPR_ANUL.AN_OPR_ID = OPR.ID) 
            INTO :L_KOL_OUT; 
 
            IF (:L_KOL_OUT IS NULL) THEN 
                L_KOL_OUT = 0; 
 
            SELECT 
                SUM(AMBALAJ_HISTORY.KOL) 
            FROM 
                AMBALAJ_HISTORY INNER JOIN OPR ON OPR.ID = AMBALAJ_HISTORY.OPR_ID 
            WHERE 
                OPR.OPR_TIP = 21 
                AND OPR.ID < :P_OPR_ID 
                AND OPR.KLI_ID = :L_KLI_ID 
                AND AMBALAJ_HISTORY.SIMPLE_ID = :L_SIMPLE_ID 
                AND NOT EXISTS ( 
                    SELECT 
                        OPR_ANUL.ID 
                    FROM 
                        OPR_ANUL 
                    WHERE 
                        OPR_ANUL.AN_OPR_ID = OPR.ID) 
            INTO :L_KOL_IN; 
 
            IF (:L_KOL_IN IS NULL) THEN 
                L_KOL_IN = 0; 
 
            R_KOL_OLD = :L_KOL_OUT - :L_KOL_IN; 
            R_KOL_TOTAL = :R_KOL_OLD - :R_KOL; 
            SUSPEND; 
        END 
    END ELSE 
    IF (:L_TIP_OPR IN (55,58)) THEN BEGIN 
        FOR SELECT 
            SIMPLE.ID, 
            SIMPLE.NAME, 
            SUM(IN_EL.KOL) AS KOL , 
            SUM(IN_EL.SUMA_FR) AS SUMA 
        FROM 
            IN_EL INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
        WHERE 
            IN_EL.OPR_ID =:P_OPR_ID 
        GROUP BY 1, 2 
        INTO :L_SIMPLE_ID,:R_SIMPLE_NAME,:R_KOL, :R_SUMA_PARTIDA 
 
        DO BEGIN 
            SELECT 
                SUM(OUT_EL.KOL) 
            FROM 
                OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
            WHERE 
                OPR.OPR_TIP IN (56,57) 
                AND OPR.ID < :P_OPR_ID 
                AND OPR.KLI_ID = :L_KLI_ID 
                AND OUT_EL.SIMPLE_ID = :L_SIMPLE_ID 
                AND NOT EXISTS ( 
                    SELECT 
                        OPR_ANUL.ID 
                    FROM 
                        OPR_ANUL 
                    WHERE 
                        OPR_ANUL.AN_OPR_ID = OPR.ID) 
            INTO :L_KOL_OUT; 
 
            SELECT 
                SUM(IN_EL.KOL) 
            FROM 
                IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
            WHERE 
                OPR.OPR_TIP IN (55,58) 
                AND OPR.ID < :P_OPR_ID 
                AND OPR.KLI_ID = :L_KLI_ID 
                AND IN_EL.SIMPLE_ID = :L_SIMPLE_ID 
                AND NOT EXISTS ( 
                    SELECT 
                        OPR_ANUL.ID 
                    FROM 
                        OPR_ANUL 
                    WHERE 
                        OPR_ANUL.AN_OPR_ID = OPR.ID) 
            INTO :L_KOL_IN; 
 
            R_KOL_OLD = COALESCE(:L_KOL_OUT, 0) - COALESCE(:L_KOL_IN,0); 
            R_KOL_TOTAL = COALESCE(:R_KOL_OLD,0) - COALESCE(:R_KOL, 0); 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_ANUL_PORS
RETURNS (
    R_SKLAD_ID INTEGER,
    R_SKLAD_NAME VARCHAR(20),
    R_POR_ID INTEGER,
    R_OPR_ID INTEGER,
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_ZA_DATA DATE,
    R_TIP SMALLINT,
    R_STATUS SMALLINT,
    R_NOM_POR VARCHAR(30),
    R_AGENT_NAME VARCHAR(100),
    R_USER_NAME VARCHAR(30),
    R_AGENT_ID INTEGER,
    R_FOR_DATE_TIME TYPE OF DOM_DATE_TIME,
    R_KLI_ADRES TYPE OF DOM_CHAR_100,
    R_UNP_ID TYPE OF DOM_INT64,
    R_UNP TYPE OF DOM_UNP)
AS
declare variable L_SKLAD_ID integer; 
BEGIN 
/*V.1*/ 
    FOR SELECT 
        POR.SKLAD_ID, 
        SKLAD.NAME 
    FROM 
        POR LEFT JOIN SKLAD ON POR.SKLAD_ID = SKLAD.ID 
        INNER JOIN OPR ON OPR.ID = POR.OPR_ID 
    WHERE 
        EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = POR.OPR_ID) 
    GROUP BY 1,2 
    ORDER BY 2 
    INTO 
        :R_SKLAD_ID,:R_SKLAD_NAME 
    DO BEGIN 
        R_POR_ID = NULL; R_ZA_DATA = NULL; R_TIP = NULL; R_OPR_ID = NULL; R_KLI_NAME = NULL; 
        R_KLI_ID = NULL; R_STATUS = NULL; r_nom_por = NULL; r_agent_name = NULL; r_agent_id = null; R_UNP_ID = 
null; R_UNP = NULL; 
        SUSPEND; 
        L_SKLAD_ID = R_SKLAD_ID; 
 
        FOR SELECT 
            POR.ID, 
            POR.ZA_DATA, 
            POR.TIP_ZAQWKA, 
            POR.OPR_ID, 
            POR.STATUS, 
            KLI1.NAME, 
            KLI1.ID, 
            por.nomer, 
            kli2.name as Agent_Name, 
            us.name, 
            por.agent_id, 
            por.FOR_DATE_TIME, 
            kli1.ADRES, 
            UNP.ID, 
            UNP.UNP 
        FROM POR 
            JOIN OPR ON POR.OPR_ID = OPR.ID 
            join "USER" us on us.id = opr.user_id 
            JOIN KLI kli1 ON OPR.KLI_ID = KLI1.ID 
            left join KLI kli2 ON por.agent_id = KLI2.ID 
            LEFT JOIN UNP ON UNP.ID = POR.UNP_ID 
        WHERE 
            POR.SKLAD_ID =  :L_SKLAD_ID 
            AND EXISTS(SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        ORDER BY 2,5 
        INTO 
            :R_POR_ID,:R_ZA_DATA,:R_TIP,:R_OPR_ID,:R_STATUS,:R_KLI_NAME,:R_KLI_ID, 
            :R_NOM_POR,:R_AGENT_NAME, :R_USER_NAME, :R_AGENT_ID, :R_FOR_DATE_TIME, :R_KLI_ADRES, :R_UNP_ID, :R_UNP 
        DO 
            SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_ASSECO_CUSTOMERS (
    P_SEL_ID TYPE OF DOM_KEY,
    P_KLI_ID TYPE OF DOM_KEY,
    P_BASE_BRANCH_ID TYPE OF DOM_KEY,
    P_DAYS TYPE OF DOM_KEY)
RETURNS (
    R_BRANCH_ID TYPE OF DOM_SMAL_INT,
    R_CUSTOMER_ID TYPE OF DOM_KEY,
    R_PAYER_ID TYPE OF DOM_KEY,
    R_CUSTOMER_NAME TYPE OF DOM_CHAR_100,
    R_CUSTOMER_NAME_2 TYPE OF DOM_CHAR_100,
    R_CUSTOMER_TYPE TYPE OF DOM_CHAR_50,
    R_COUNTRY_ID TYPE OF DOM_CHAR_10,
    R_CITY_NAME TYPE OF DOM_CHAR_30,
    R_POSTAL_CODE TYPE OF DOM_CHAR_8,
    R_STREET_NAME TYPE OF DOM_CHAR_100,
    R_APT_NUMBER TYPE OF DOM_CHAR_8,
    R_TIN TYPE OF DOM_CHAR_50,
    R_CUSTOMER_STATUS TYPE OF DOM_SMAL_INT,
    R_LATITUDE TYPE OF DOM_KOL,
    R_LONGITUDE TYPE OF DOM_KOL,
    R_REGION1 TYPE OF DOM_CHAR_100,
    R_REGION2 TYPE OF DOM_CHAR_100,
    R_REGION3 TYPE OF DOM_CHAR_100,
    R_REGION4 TYPE OF DOM_CHAR_100)
AS
BEGIN 
    FOR WITH PRODUCER_SIMPLES AS 
    ( 
        SELECT 
            SIMPLE.ID AS SIMPLE_ID 
        FROM 
            SIMPLE inner join SELEKCIQ_SIM_EL on SELEKCIQ_SIM_EL.SIMPLE_ID = SIMPLE.ID 
        WHERE 
            SELEKCIQ_SIM_EL.SELEKCIQ_ID =:P_SEL_ID 
            AND SIMPLE.USLUGA = 0 
 
        UNION ALL 
 
        SELECT 
            SIMPLE.ID 
        FROM 
            SIMPLE INNER JOIN KLI_DOST_NODE ON KLI_DOST_NODE.SIMPLE_ID = SIMPLE.ID AND KLI_DOST_NODE.KLI_ID = -1/*:P_KLI_ID*/ 
    ) 
    SELECT DISTINCT 
        CAST(:P_BASE_BRANCH_ID AS DOM_SMAL_INT) AS BranchId, 
        COALESCE(KLI.ID, 0) AS CustomerId, 
        coalesce(firmi.id, COALESCE(kli.id, 0))  AS PayerId, 
        COALESCE(kli.NAME, 'FREE SALES') as CustomerName1, 
        COALESCE(COALESCE(KLI.NAME_ENGL, KLI.NAME), 'N/A') AS CustomerName2, 
        CAST(IIF(KLI.FIRMA_ID IS NULL, 'PRV', 'B2B') AS DOM_CHAR_50) AS CustomerType, 
        CAST('BG' AS DOM_CHAR_10) CountryId, 
        COALESCE(PLACE.NAME, 'N/A') AS CityName, 
        COALESCE(PLACE.POST_CODE, '00000') AS PostalCode, 
        IIF(COALESCE(KLI.ADRES, '') = '', 'N/A', KLI.ADRES) AS StreetName, 
        'N/A' AS AptNumber, 
        COALESCE(FIRMI.IDNOMDDS, '0000000000') AS Tin, 
        1 AS CustomerStatus, 
        COALESCE(KLI.LATITUDE, 0.00) AS Latitude, 
        COALESCE(KLI.LONGITUDE, 0.00) AS Longitude, 
        CAST(NULL AS DOM_CHAR_100) AS Region1, 
        CAST(NULL AS DOM_CHAR_100) AS Region2, 
        CAST(NULL AS DOM_CHAR_100) AS Region3, 
        CAST(null AS DOM_CHAR_100) AS Region4 
    FROM 
        OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
        LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
        INNER JOIN PRODUCER_SIMPLES ON PRODUCER_SIMPLES.SIMPLE_ID = OUT_EL.SIMPLE_ID 
        INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
        LEFT JOIN FIRMI ON FIRMI.ID = KLI.FIRMA_ID 
        LEFT JOIN PLACE ON PLACE.ID = KLI.PLACE_ID 
        WHERE 
            OPR.OPR_DATE BETWEEN DATEADD(:P_DAYS day to CURRENT_DATE) and CURRENT_DATE 
            and opr.OPR_TIP in (2, 34) 
    INTO :R_BRANCH_ID, :R_CUSTOMER_ID, :R_PAYER_ID, :R_CUSTOMER_NAME, :R_CUSTOMER_NAME_2, :R_CUSTOMER_TYPE, 
        :R_COUNTRY_ID, :R_CITY_NAME, :R_POSTAL_CODE, :R_STREET_NAME, :R_APT_NUMBER, :R_TIN, :R_CUSTOMER_STATUS, 
        :R_LATITUDE, :R_LONGITUDE, R_REGION1, :R_REGION2, :R_REGION3, :R_REGION4 
    DO 
        SUSPEND; 
END^


ALTER PROCEDURE GET_ASSECO_ORDERS_CONFIRMATION (
    P_SEL_ID TYPE OF DOM_INT,
    P_KLI_ID TYPE OF DOM_INT,
    P_BASE_BRANCH_ID TYPE OF DOM_INT,
    P_TYPE_ORDER TYPE OF DOM_SMAL_INT)
RETURNS (
    R_OPERATION_ID TYPE OF DOM_KEY,
    R_SOURCE TYPE OF DOM_CHAR_50,
    R_BRANCH_ID TYPE OF DOM_SMAL_INT,
    R_ORDER_NUMBER TYPE OF DOM_CHAR_30,
    R_STATUS_ID TYPE OF DOM_SMAL_INT,
    R_STATUS_DESCRIPTION TYPE OF DOM_CHAR_100)
AS
BEGIN 
    FOR WITH PRODUCER_SIMPLES AS 
    ( 
        SELECT 
            SIMPLE.ID AS SIMPLE_ID 
        FROM 
            SIMPLE inner join SELEKCIQ_SIM_EL on SELEKCIQ_SIM_EL.SIMPLE_ID = SIMPLE.ID 
        WHERE 
            SELEKCIQ_SIM_EL.SELEKCIQ_ID =:P_SEL_ID 
            AND SIMPLE.USLUGA = 0 
 
        UNION ALL 
 
        SELECT 
            SIMPLE.ID 
        FROM 
            SIMPLE INNER JOIN KLI_DOST_NODE ON KLI_DOST_NODE.SIMPLE_ID = SIMPLE.ID AND KLI_DOST_NODE.KLI_ID = -1/*:P_KLI_ID*/ 
    ) 
    SELECT DISTINCT 
        OPR.ID AS OperationId, 
        POR.ASSECO_SOURCE as Source, 
        CAST(:P_BASE_BRANCH_ID AS DOM_SMAL_INT) AS BranchId, 
        COALESCE(POR.NOMER, 'N/A') as OrderNumber, 
        IIF(POR.STATUS = 1, 0, POR.STATUS) AS StatusId, 
        cast(null as DOM_CHAR_100 ) AS StatusDescription 
    FROM 
        POR INNER JOIN OPR ON OPR.ID = POR.OPR_ID 
        INNER JOIN POR_EL ON POR_EL.OPR_ID = OPR.ID 
        INNER JOIN PRODUCER_SIMPLES ON PRODUCER_SIMPLES.SIMPLE_ID = POR_EL.SIMPLE_ID 
    WHERE 
        POR.ZA_DATA = CURRENT_DATE AND COALESCE(POR.FLAG_SYNC, 0) = 0 
        AND IIF(:P_TYPE_ORDER = 0, POR.STATUS, 1) > 0 
        AND POR.ASSECO_SYNC = 1 
    INTO :R_OPERATION_ID, :R_SOURCE, :R_BRANCH_ID, :R_ORDER_NUMBER, :R_STATUS_ID, :R_STATUS_DESCRIPTION 
    DO 
        SUSPEND; 
END^


ALTER PROCEDURE GET_ASSECO_PRODUCTS (
    P_BASE_BRANCH_ID TYPE OF DOM_SMAL_INT,
    P_DEF_CURRENCY TYPE OF DOM_SMAL_INT,
    P_KLI_ID TYPE OF DOM_KEY,
    P_VAT TYPE OF DOM_SMAL_INT,
    P_SEL_ID INTEGER)
RETURNS (
    R_BRANCH_ID TYPE OF DOM_SMAL_INT,
    R_PRODUCT_ID TYPE OF DOM_INT,
    R_PRODUCER_PRODUCT_ID TYPE OF DOM_CHAR_50,
    R_EAN TYPE OF DOM_CHAR_15,
    R_PRODUCT_NAME1 TYPE OF DOM_CHAR_100,
    R_PRODUCT_NAME2 TYPE OF DOM_CHAR_100,
    R_CURRENCY_ID TYPE OF DOM_STR_3,
    R_NET_PRICE TYPE OF DOM_CENA,
    R_MEASURE_UNIT_ID TYPE OF DOM_CHAR_15,
    R_MEASURE_UNIT_NAME TYPE OF DOM_CHAR_15,
    R_PRODUCER_ID TYPE OF DOM_CHAR_50,
    R_PRODUCER_NAME TYPE OF DOM_CHAR_50,
    R_PRODUCT_STATUS TYPE OF DOM_SMAL_INT,
    R_MULTIPLIER TYPE OF DOM_SMAL_INT)
AS
BEGIN 
    FOR WITH PRODUCER_SIMPLES AS 
    ( 
    SELECT 
        SIMPLE.ID AS SIMPLE_ID 
    FROM 
        SIMPLE inner join SELEKCIQ_SIM_EL on SELEKCIQ_SIM_EL.SIMPLE_ID = SIMPLE.ID 
    WHERE 
        SELEKCIQ_SIM_EL.SELEKCIQ_ID =:P_SEL_ID 
        AND SIMPLE.USLUGA = 0 
 
    UNION ALL 
 
    SELECT 
        SIMPLE.ID 
    FROM 
        SIMPLE INNER JOIN KLI_DOST_NODE ON KLI_DOST_NODE.SIMPLE_ID = SIMPLE.ID AND KLI_DOST_NODE.KLI_ID =-1/*:P_KLI_ID*/ 
    ) 
 
    SELECT DISTINCT 
        CAST(:P_BASE_BRANCH_ID AS DOM_SMAL_INT) AS BranchId, 
        SIMPLE.ID AS ProductId, 
        SIMPLE.CODE2 AS ProducerProductId, 
        coalesce((SELECT FIRST 1 BARCODE.BARCODE FROM BARCODE WHERE BARCODE.SIMPLE_ID = SIMPLE.ID), '0000000000') AS EAN, 
        SIMPLE.NAME AS ProductName1, 
        COALESCE(SIMPLE.NAME_2, 'N/A') AS ProductName2, 
        COALESCE(VALUTA.CODE, 'BGN') AS CurrencyId, 
        IIF(:P_VAT = 1, ROUND(CENOVA_LISTA_EL.CENA/(1 + simple.DDS/100), 2), ROUND(CENOVA_LISTA_EL.CENA, 2)) as NetPrice, 
        ME.NAME_ENG as MeasureUnitId, 
        ME.NAME_ENG as MeasureUnitName, 
        CAST('CC' AS DOM_CHAR_50) as ProducerId, 
        CAST('COCBG' AS DOM_CHAR_100) as ProducerName, 
        1 as ProductStatus, 
        1 AS Multiplier 
    FROM 
        PRODUCER_SIMPLES INNER JOIN SIMPLE ON SIMPLE.ID = PRODUCER_SIMPLES.SIMPLE_ID 
        INNER JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN VALUTA ON VALUTA.ID = :P_DEF_CURRENCY 
        LEFT JOIN CENOVA_LISTA_EL ON CENOVA_LISTA_EL.SIMPLE_ID = SIMPLE.ID AND CENOVA_LISTA_EL.OPR_ID = 
        (SELECT FIRST 1 CENOVA_LISTA.OPR_ID FROM CENOVA_LISTA WHERE CENOVA_LISTA.DEF = 1) 
    INTO :R_BRANCH_ID, :R_PRODUCT_ID, :R_PRODUCER_PRODUCT_ID, :R_EAN, :R_PRODUCT_NAME1, :R_PRODUCT_NAME2, 
        :R_CURRENCY_ID, :R_NET_PRICE, :R_MEASURE_UNIT_ID, :R_MEASURE_UNIT_NAME, :R_PRODUCER_ID, :R_PRODUCER_NAME, 
        :R_PRODUCT_STATUS, :R_MULTIPLIER 
    DO 
        SUSPEND; 
END^


ALTER PROCEDURE GET_ASSECO_SALES (
    P_SEL_ID TYPE OF DOM_KEY,
    P_KLI_ID TYPE OF DOM_KEY,
    P_VAT TYPE OF DOM_SMAL_INT,
    P_DAYS TYPE OF DOM_INT)
RETURNS (
    R_OPERATION_ID TYPE OF DOM_KEY,
    R_PRODUCT_ID TYPE OF DOM_KEY,
    R_MEASURE_UNIT_ID TYPE OF DOM_CHAR_15,
    R_PRODUCER_ID TYPE OF DOM_CHAR_10,
    R_QTY TYPE OF DOM_KOL,
    R_QTY_WAS TYPE OF DOM_KOL,
    R_NET_PRICE TYPE OF DOM_CENA,
    R_NET_VALUE TYPE OF DOM_SUMA,
    R_NET_VALUE_WAS TYPE OF DOM_SUMA,
    R_PROMOTION_STATUS TYPE OF DOM_SMAL_INT,
    R_PROMOTION_ID VARCHAR(200),
    R_FIELD_3 VARCHAR(200),
    R_PARCHASE_ORDER TYPE OF DOM_INT)
AS
declare variable L_IN_EL_QTY type of DOM_KOL; 
declare variable L_OUT_EL_QTY type of DOM_KOL; 
declare variable L_OUT_EL_ID type of DOM_KEY; 
declare variable L_OLD_QTY_RET type of DOM_KOL; 
declare variable L_OLD_NET_VALUE type of DOM_SUMA; 
declare variable L_NET_VALUE_RET type of DOM_SUMA; 
BEGIN 
 
    FOR WITH PRODUCER_SIMPLES AS 
    ( 
        SELECT 
            SIMPLE.ID AS SIMPLE_ID 
        FROM 
            SIMPLE inner join SELEKCIQ_SIM_EL on SELEKCIQ_SIM_EL.SIMPLE_ID = SIMPLE.ID 
        WHERE 
            SELEKCIQ_SIM_EL.SELEKCIQ_ID =:P_SEL_ID 
            AND SIMPLE.USLUGA = 0 
 
        UNION ALL 
 
        SELECT 
            SIMPLE.ID 
        FROM 
            SIMPLE INNER JOIN KLI_DOST_NODE ON KLI_DOST_NODE.SIMPLE_ID = SIMPLE.ID AND KLI_DOST_NODE.KLI_ID =-1/*:P_KLI_ID*/ 
    ) 
 
    SELECT DISTINCT 
        opr.id as OperationId, 
        SIMPLE.ID AS ProductId, 
        COALESCE(ME.NAME_ENG, 'N/A') AS MeasureUnitId, 
        'CC' AS ProducerId, 
        SUM(OUT_EL.KOL) AS Quantity, 
        '0.00' AS QuantityWas, 
        IIF(:P_VAT = 1, ROUND(PROD_CENI_EL.CENA/(1 + PROD_CENI_EL.VAT_PERCENT/100), 2), PROD_CENI_EL.CENA) AS NetPrice, 
        IIF(:P_VAT = 1, ROUND(OUT_EL.SUMA/(1 + PROD_CENI_EL.VAT_PERCENT/100), 2), OUT_EL.SUMA) AS NetValue, 
        0.00 AS NetValueWas, 
        POR.ID AS PerchaseOrder, 
        IIF(out_el.SUMA = 0.00, 2, 0) AS PromotionStatus, 
        CAST (NULL AS VARCHAR(200)) AS PromotionId, 
        CAST(NULL AS VARCHAR(200)) AS Field3 
    FROM 
        OUT INNER JOIN OPR ON OPR.ID = OUT.OPR_ID 
        INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OPR.ID 
        INNER JOIN PRODUCER_SIMPLES ON PRODUCER_SIMPLES.SIMPLE_ID = OUT_EL.SIMPLE_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN POR ON POR.SALE_OPR_ID = OUT.OPR_ID AND POR.ASSECO_SYNC = 1 
    WHERE 
        OPR.OPR_DATE BETWEEN DATEADD(:P_DAYS day to CURRENT_DATE) and CURRENT_DATE 
        --AND OPR.ID = 1335650 
        AND OPR.OPR_TIP IN (2, 34) 
    GROUP BY 1,2,3,4,6,7,8,9,10,11,12,13 
    INTO 
        :R_OPERATION_ID, :R_PRODUCT_ID, :R_MEASURE_UNIT_ID, :R_PRODUCER_ID, :R_QTY, 
        :R_QTY_WAS, :R_NET_PRICE, :R_NET_VALUE, :R_NET_VALUE_WAS, :R_PARCHASE_ORDER, 
        :R_PROMOTION_STATUS, :R_PROMOTION_ID, :R_FIELD_3 
    DO BEGIN 
        SUSPEND; 
    END 
 
    FOR WITH PRODUCER_SIMPLES AS 
    ( 
        SELECT 
            SIMPLE.ID AS SIMPLE_ID 
        FROM 
            SIMPLE inner join SELEKCIQ_SIM_EL on SELEKCIQ_SIM_EL.SIMPLE_ID = SIMPLE.ID 
        WHERE 
            SELEKCIQ_SIM_EL.SELEKCIQ_ID =:P_SEL_ID 
            AND SIMPLE.USLUGA = 0 
 
        UNION ALL 
 
        SELECT 
            SIMPLE.ID 
        FROM 
            SIMPLE INNER JOIN KLI_DOST_NODE ON KLI_DOST_NODE.SIMPLE_ID = SIMPLE.ID AND KLI_DOST_NODE.KLI_ID = -1/*:P_KLI_ID*/ 
 
    ) 
 
    SELECT DISTINCT 
        opr.id as OperationId, 
        SIMPLE.ID AS ProductId, 
        COALESCE(ME.NAME_ENG, 'N/A') AS MeasureUnitId, 
        'CC' AS ProducerId, 
        OUT_EL.KOL AS Quantity, 
        IN_EL.KOL AS InElQty, 
        IIF(:P_VAT = 1, ROUND(PROD_CENI_EL.CENA/(1 + PROD_CENI_EL.VAT_PERCENT/100), 2), PROD_CENI_EL.CENA) AS NetPrice, 
        IIF(:P_VAT = 1, ROUND(OUT_EL.SUMA/(1 + PROD_CENI_EL.VAT_PERCENT/100), 2), OUT_EL.SUMA), 
        ROUND(IIF(:P_VAT = 1, (OUT_EL.SUMA/(1 + PROD_CENI_EL.VAT_PERCENT/100)/OUT_EL.KOL)*IN_EL.KOL, (OUT_EL.SUMA/OUT_EL.KOL)*IN_EL.KOL), 2) AS NetValue, 
        --IIF(@Vat = 1, ROUND(OUT_EL.SUMA/(1 + PROD_CENI_EL.VAT_PERCENT/100), 2), OUT_EL.SUMA) AS NetValueWas, 
        POR.ID AS PerchaseOrder, 
        IIF(OUT_EL.SUMA = 0.00, 2, 0) AS PromotionStatus, 
        CAST (NULL AS VARCHAR(200)) AS PromotionId, 
        CAST(NULL AS VARCHAR(200)) AS Field3, 
        out_el.ID as out_el_id 
    FROM 
        OPR INNER JOIN IN_EL ON IN_EL.OPR_ID = OPR.ID AND OPR.OPR_TIP = 26 
        INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
        INNER JOIN OUT_EL ON OUT_EL.ID = OPR_RAZPAD_NODE.OUT_EL_ID 
        INNER JOIN OUT ON OUT.OPR_ID = OUT_EL.OPR_ID 
        INNER JOIN PRODUCER_SIMPLES ON PRODUCER_SIMPLES.SIMPLE_ID = IN_EL.SIMPLE_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
        INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN POR ON POR.SALE_OPR_ID = OUT.OPR_ID AND POR.ASSECO_SYNC = 1 
    WHERE 
        OPR.OPR_DATE BETWEEN DATEADD(:P_DAYS day to CURRENT_DATE) and CURRENT_DATE 
    INTO 
        :R_OPERATION_ID, :R_PRODUCT_ID, :R_MEASURE_UNIT_ID, :R_PRODUCER_ID, 
        :L_OUT_EL_QTY, :L_IN_EL_QTY, :R_NET_PRICE, :R_NET_VALUE, :L_NET_VALUE_RET, :R_PARCHASE_ORDER, 
        :R_PROMOTION_STATUS, :R_PROMOTION_ID, :R_FIELD_3, :L_OUT_EL_ID 
    DO BEGIN 
        SELECT 
            SUM(IIF(:P_VAT = 1, (OUT_EL.SUMA/(1 + PROD_CENI_EL.VAT_PERCENT/100)/OUT_EL.KOL)*IN_EL.KOL, (OUT_EL.SUMA/OUT_EL.KOL)*IN_EL.KOL)), 
            SUM(IN_EL.KOL) 
        FROM 
            IN_EL INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID AND OPR_RAZPAD_NODE.OUT_EL_ID =:L_OUT_EL_ID 
            AND IN_EL.OPR_ID < :R_OPERATION_ID 
            INNER JOIN OUT_EL ON OUT_EL.ID = OPR_RAZPAD_NODE.OUT_EL_ID 
            INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID 
        INTO :L_OLD_NET_VALUE, :L_OLD_QTY_RET; 
 
        R_QTY_WAS = round(L_OUT_EL_QTY - COALESCE(:L_OLD_QTY_RET, 0), 2); 
        R_QTY = round(R_QTY_WAS - :L_IN_EL_QTY, 2); 
        R_NET_VALUE_WAS = ROUND(:R_NET_VALUE - COALESCE(L_OLD_NET_VALUE, 0), 2); 
        R_NET_VALUE = ROUND(R_NET_VALUE_WAS - :L_NET_VALUE_RET, 2); 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_ASSECO_SALES_HEADER (
    P_SEL_ID TYPE OF DOM_INT,
    P_KLI_ID TYPE OF DOM_INT,
    P_BASE_BRANCH_ID TYPE OF DOM_INT,
    P_BASE_CURRENCY_ID TYPE OF DOM_INT,
    P_DAYS TYPE OF DOM_SMAL_INT)
RETURNS (
    R_OPERATION_ID TYPE OF DOM_INT,
    R_TYPE_ID TYPE OF DOM_STR_3,
    R_BRANCH_ID TYPE OF DOM_INT,
    R_DOC_ID TYPE OF DOM_INT,
    R_CURRENCY_ID TYPE OF DOM_STR_3,
    R_ISSUE_DATE TYPE OF DOM_DATE_TIME,
    R_SALE_DATE TYPE OF DOM_DATE,
    R_CUSTOMER_ID TYPE OF DOM_INT,
    R_CORDOC_ID TYPE OF DOM_INT,
    R_CORDOC_DATE TYPE OF DOM_DATE,
    R_TYPESALE_ID TYPE OF DOM_STR_3,
    R_DATE_OF_ISSUE TYPE OF DOM_DATE,
    R_NUMBER_OF_INVOICE TYPE OF DOM_CHAR_10,
    R_FIELD3 VARCHAR(200))
AS
BEGIN 
    FOR WITH PRODUCER_SIMPLES AS 
    ( 
        SELECT 
            SIMPLE.ID AS SIMPLE_ID 
        FROM 
            SIMPLE inner join SELEKCIQ_SIM_EL on SELEKCIQ_SIM_EL.SIMPLE_ID = SIMPLE.ID 
        WHERE 
            SELEKCIQ_SIM_EL.SELEKCIQ_ID =:P_SEL_ID 
            AND SIMPLE.USLUGA = 0 
 
        UNION ALL 
 
        SELECT 
            SIMPLE.ID 
        FROM 
            SIMPLE INNER JOIN KLI_DOST_NODE ON KLI_DOST_NODE.SIMPLE_ID = SIMPLE.ID AND KLI_DOST_NODE.KLI_ID =-1/*:P_KLI_ID*/ 
    ) 
    SELECT DISTINCT 
        OPR.ID AS OperationId, 
        CAST('DEL' AS VARCHAR(3)) AS TypeId, 
        CAST(:P_BASE_BRANCH_ID AS DOM_SMAL_INT) AS BranchId, 
        OPR.ID AS DocId, 
        VALUTA.CODE AS CurrencyId, 
        OPR.DATETIME AS IssueDate, 
        OPR.OPR_DATE AS SaleDate, 
        OPR.KLI_ID AS CustomerId, 
        CAST(NULL AS DOM_CHAR_50) AS CorDocId, 
        NULL AS CorDocDate, 
        'ST' AS TypeSaleId, 
        CAST(NULL AS DOM_DATE) AS DateOfIssue, 
        CAST(NULL AS DOM_CHAR_10) AS NumberOfInvoice, 
        CAST(NULL AS VARCHAR(200)) AS Field3 
    FROM 
        OUT INNER JOIN OPR ON OPR.ID = OUT.OPR_ID 
        INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OPR.ID 
        INNER JOIN PRODUCER_SIMPLES ON PRODUCER_SIMPLES.SIMPLE_ID = OUT_EL.SIMPLE_ID 
        LEFT JOIN VALUTA ON VALUTA.ID =:P_BASE_CURRENCY_ID 
    WHERE 
        OPR.OPR_DATE BETWEEN DATEADD(:P_DAYS day to CURRENT_DATE) and CURRENT_DATE 
        AND OPR.OPR_TIP = 2 
 
    UNION ALL 
 
    SELECT DISTINCT 
        OPR.ID AS OperationId, 
        CAST('DEC' AS VARCHAR(3)) AS TypeId, 
        CAST(:P_BASE_BRANCH_ID AS DOM_SMAL_INT) AS BranchId, 
        OPR.ID AS DocId, 
        VALUTA.CODE AS CurrencyId, 
        OPR.DATETIME AS IssueDate, 
        OPR.OPR_DATE AS SaleDate, 
        OPR.KLI_ID AS CustomerId, 
        CAST(NULL AS DOM_CHAR_50) AS CorDocId, 
        CAST(NULL AS DOM_DATE) AS CorDocDate, 
        'ST' AS TypeSaleId, 
        CAST(NULL AS DOM_DATE) AS DateOfIssue, 
        CAST(NULL AS DOM_CHAR_10) AS NumberOfInvoice, 
        CAST(NULL AS VARCHAR(200)) AS Field3 
    FROM 
        OPR INNER JOIN IN_EL ON IN_EL.OPR_ID = OPR.ID AND OPR.OPR_TIP = 26 
        INNER JOIN PRODUCER_SIMPLES ON PRODUCER_SIMPLES.SIMPLE_ID = IN_EL.SIMPLE_ID 
        LEFT JOIN VALUTA ON VALUTA.ID =:P_BASE_CURRENCY_ID 
    WHERE 
        OPR.OPR_DATE BETWEEN DATEADD(:P_DAYS day to CURRENT_DATE) and CURRENT_DATE 
    into :R_OPERATION_ID, :R_TYPE_ID, :R_BRANCH_ID, :R_DOC_ID, :R_CURRENCY_ID, :R_ISSUE_DATE, :R_SALE_DATE, 
        :R_CUSTOMER_ID, :R_CORDOC_ID, :R_CORDOC_DATE, :R_TYPESALE_ID, :R_DATE_OF_ISSUE, :R_NUMBER_OF_INVOICE, :R_FIELD3 
    DO BEGIN 
        SELECT FIRST 1 
            OPR.ID, 
            OPR.OPR_DATE 
        FROM 
            IN_EL INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
            INNER JOIN OUT_EL ON OUT_EL.ID = OPR_RAZPAD_NODE.OUT_EL_ID 
            INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
        WHERE 
            IN_EL.OPR_ID =:R_OPERATION_ID 
        ORDER BY OPR.ID DESC 
        INTO :R_CORDOC_ID, :R_CORDOC_DATE; 
 
        SELECT FIRST 1 
            DateOfIssue, 
            NumberOfInvoice 
        FROM 
        ( 
            SELECT 
                FAK.DATE_SDELKA AS DateOfIssue, 
                FAK.NUMBER AS NumberOfInvoice, 
                OPR_FAK.DATETIME 
            FROM 
                FAK_PROD INNER JOIN FAK ON FAK.ID = FAK_PROD.FAK_ID 
                INNER JOIN OPR OPR_FAK ON OPR_FAK.ID = FAK.OPR_ID 
            WHERE 
                FAK_PROD.OPR_ID =:R_OPERATION_ID 
 
            UNION ALL 
 
            SELECT 
                FAK.DATE_SDELKA AS DateOfIssue, 
                FAK.NUMBER AS NumberOfInvoice, 
                OPR_FAK.DATETIME 
            FROM 
                KI_NODE INNER JOIN FAK ON FAK.OPR_ID = KI_NODE.KI_OPR_ID 
                INNER JOIN OPR OPR_FAK ON OPR_FAK.ID = FAK.OPR_ID 
            WHERE 
                KI_NODE.SUB_KI_OPR_ID =:R_OPERATION_ID 
            ORDER BY 3 DESC 
        ) 
        INTO :R_DATE_OF_ISSUE, :R_NUMBER_OF_INVOICE; 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_ASSECO_STOCKS (
    P_SEL_ID TYPE OF DOM_INT,
    P_KLI_ID TYPE OF DOM_INT,
    P_BASE_BRANCH_ID TYPE OF DOM_INT,
    P_BASE_CURRENCY TYPE OF DOM_INT,
    P_VAT TYPE OF DOM_SMAL_INT)
RETURNS (
    R_BRANCH_ID TYPE OF DOM_INT,
    R_PRODUCT_ID TYPE OF DOM_INT,
    R_STOCK_DATE TYPE OF DOM_DATE,
    R_MEASURE_UNIT_ID TYPE OF DOM_CHAR_15,
    R_PRODUCER_ID TYPE OF DOM_CHAR_10,
    R_CURRENCY_ID TYPE OF DOM_STR_3,
    R_STOCK TYPE OF DOM_KOL,
    R_NET_VALUE TYPE OF DOM_SUMA)
AS
BEGIN 
    /*DELETE FROM TMP_SEL_1; 
    DELETE FROM TMP_SEL_2; 
 
    INSERT INTO TMP_SEL_1 
    SELECT 
        SKLAD.ID 
    FROM 
        SKLAD 
    WHERE 
        SKLAD.IS_SYSTEM = 0; 
 
    INSERT INTO TMP_SEL_2 
    SELECT 
        SIMPLE.ID AS SIMPLE_ID 
    FROM 
        SIMPLE inner join SELEKCIQ_SIM_EL on SELEKCIQ_SIM_EL.SIMPLE_ID = SIMPLE.ID 
    WHERE 
        SELEKCIQ_SIM_EL.SELEKCIQ_ID =:P_SEL_ID 
        AND SIMPLE.USLUGA = 0 
 
    UNION ALL 
 
    SELECT 
        SIMPLE.ID 
    FROM 
        SIMPLE INNER JOIN KLI_DOST_NODE ON KLI_DOST_NODE.SIMPLE_ID = SIMPLE.ID AND KLI_DOST_NODE.KLI_ID =-1; */ 
 
    for with producer_simples as 
    ( 
        SELECT 
            SIMPLE.ID AS SIMPLE_ID 
        FROM 
            SIMPLE inner join SELEKCIQ_SIM_EL on SELEKCIQ_SIM_EL.SIMPLE_ID = SIMPLE.ID 
        WHERE 
            SELEKCIQ_SIM_EL.SELEKCIQ_ID =:P_SEL_ID 
            AND SIMPLE.USLUGA = 0 
 
        UNION ALL 
 
        SELECT 
            SIMPLE.ID 
        FROM 
            SIMPLE INNER JOIN KLI_DOST_NODE ON KLI_DOST_NODE.SIMPLE_ID = SIMPLE.ID AND KLI_DOST_NODE.KLI_ID =-1 
    ) 
    SELECT DISTINCT 
        CAST(:P_BASE_BRANCH_ID as DOM_SMAL_INT) AS BranchId, 
        NAL.R_SIMPLE_ID AS ProductId, 
        CURRENT_DATE AS StockDate, 
        COALESCE(ME.NAME_ENG, 'N/A') AS MeasureUnitId, 
        'CC' AS ProducerId, 
        VALUTA.CODE AS CurrencyId, 
        ROUND(SUM(NAL.R_KOL), 4) AS Stock, 
        SUM(ROUND(IIF(NAL.R_KOL <> 0, IIF(:P_VAT = 1, ROUND(NAL.R_SUMA_SR/(1 + SIMPLE.DDS/100), 2), NAL.R_SUMA_SR), 0.00), 2)) 
    FROM 
        SLOW_SPR_NAL(0, CURRENT_DATE) NAL INNER JOIN PRODUCER_SIMPLES ON PRODUCER_SIMPLES.SIMPLE_ID = NAL.R_SIMPLE_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = NAL.R_SIMPLE_ID 
        INNER JOIN ME ON ME.ID = SIMPLE.ME_ID 
        INNER JOIN SKLAD ON SKLAD.ID = NAL.R_SKLAD_ID 
        LEFT JOIN VALUTA ON VALUTA.ID =:P_BASE_CURRENCY 
    WHERE 
        SKLAD.IS_SYSTEM = 0 
        --AND NAL.R_KOL > 0 
    group by 1,2,3,4,5,6 
 
    INTO :R_BRANCH_ID, :R_PRODUCT_ID, :R_STOCK_DATE, :R_MEASURE_UNIT_ID, :R_PRODUCER_ID, :R_CURRENCY_ID, :R_STOCK, :R_NET_VALUE 
    DO 
        SUSPEND; 
END^


ALTER PROCEDURE GET_BARCODE (
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_BAR_CODE VARCHAR(15))
AS
BEGIN 
    R_SIMPLE_ID = :P_SIMPLE_ID; 
    SELECT FIRST 1 
        BARCODE 
    FROM 
        BARCODE 
    WHERE 
        SIMPLE_ID = :P_SIMPLE_ID 
    ORDER BY ID 
    INTO 
        :R_BAR_CODE; 
 
    SUSPEND; 
END^


ALTER PROCEDURE GET_BONUS_ATRIBUT (
    P_SIM_ID INTEGER,
    P_SKLAD_ID INTEGER,
    P_KLI_ID INTEGER)
RETURNS (
    R_DDS NUMERIC(4,2),
    R_USLUGA CHAR(1),
    R_CENA_CL DOUBLE PRECISION,
    R_CENA_OS DOUBLE PRECISION,
    R_VALUTA_ID TYPE OF DOM_KEY_SMALL,
    R_CENA_VALUTA TYPE OF DOM_CENA,
    R_FLAG_LOCK TYPE OF DOM_FLAG,
    R_VAT_PERCENT NUMERIC(4,2),
    R_VAT_GROUP TYPE OF DOM_SMAL_INT)
AS
declare variable L_PRI double precision; 
declare variable L_ID integer; 
declare variable L_CL_ID integer; 
BEGIN 
  SELECT 
    SIMPLE.DDS, 
    SIMPLE.USLUGA 
  FROM SIMPLE 
  WHERE 
    SIMPLE.ID = :P_SIM_ID 
  INTO :R_DDS,:R_USLUGA; 
 
  EXECUTE PROCEDURE GET_CENA_SIMPLE(:P_SKLAD_ID,COALESCE(:P_KLI_ID,0),:P_SIM_ID) 
  RETURNING_VALUES :L_ID, :R_CENA_CL,:L_PRI,:R_CENA_OS,:L_CL_ID, :R_VALUTA_ID, :R_CENA_VALUTA, :R_FLAG_LOCK, :R_VAT_PERCENT, :R_VAT_GROUP; 
 
  IF (R_CENA_OS IS NULL) THEN R_CENA_OS = 0; 
  IF (R_CENA_CL IS NULL) THEN R_CENA_CL = 0; 
END^


ALTER PROCEDURE GET_BONUS_PRODUKT_D (
    P_BONUS_ID INTEGER,
    P_SIM_ID INTEGER,
    P_TIP INTEGER,
    P_SEL_ID INTEGER,
    P_TIP_BONUS SMALLINT)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
declare variable L_SQL varchar(1000); 
BEGIN  
l_sql = ''; 
if (p_tip = 5) then begin 
    l_sql = 'select id, name from bonus_config 
    where  
      id <> '||:p_bonus_id||' and 
      simple_id = '||:p_sim_id||' and 
      anuliran = 0 and  
      id_bonus is null and  
      tip in (2,4,5) '; 
    if (p_tip_bonus = 3) then 
      l_sql = l_sql||' and tip_bonus = 3'; 
    else 
      l_sql = l_sql||' and tip_bonus <> 3'; 
end 
else 
if (p_tip = 1) then begin 
  l_sql = 'select id, name from bonus_config 
    where  
      id <> '||:p_bonus_id||' and 
      simple_id = '||:p_sim_id||' and 
      anuliran = 0 and  
      id_bonus is null and  
      tip in (1,2)'; 
  if (p_tip_bonus = 3) then 
    l_sql = l_sql||' and tip_bonus = 3'; 
  else 
    l_sql = l_sql||' and tip_bonus <> 3'; 
 
  l_sql = l_sql||' union 
    select id, name from bonus_config 
    where  
      id <> '||:p_bonus_id||' and 
      simple_id = '||:p_sim_id||' and 
      anuliran = 0 and  
      id_bonus is null and  
      tip in (3,4) and  
      exists(select id from bonus_config_kli  
                 join SEL_KLI_QR on SEL_KLI_QR.kli_id = bonus_config_kli.kli_id and bonus_config_kli.bonus_id = id and SEL_KLI_QR.sel_id = '||:p_sel_id||') '; 
  if (p_tip_bonus = 3) then 
    l_sql = l_sql||' and tip_bonus = 3'; 
  else 
    l_sql = l_sql||' and tip_bonus <> 3'; 
end 
else  
if (p_tip = 2) then begin 
  l_sql = l_sql||'select id, name from bonus_config 
    where  
    id <> '||:p_bonus_id||' and 
      simple_id = '||:p_sim_id||' and 
      anuliran = 0 and  
      id_bonus is null and  
      tip in (1,2,4,5)'; 
  if (p_tip_bonus = 3) then 
    l_sql = l_sql||' and tip_bonus = 3'; 
  else 
    l_sql = l_sql||' and tip_bonus <> 3'; 
 
  l_sql = l_sql||' union 
    select id, name from bonus_config 
    where  
      id <> '||:p_bonus_id||' and 
      simple_id = '||:p_sim_id||' and 
      anuliran = 0 and  
      id_bonus is null and  
      tip in (3,4) and  
      exists(select id from bonus_config_kli  
                 join SEL_KLI_QR on SEL_KLI_QR.kli_id = bonus_config_kli.kli_id and bonus_config_kli.bonus_id = id and SEL_KLI_QR.sel_id = '||:p_sel_id||')'; 
  if (p_tip_bonus = 3) then 
    l_sql = l_sql||' and tip_bonus = 3'; 
  else 
    l_sql = l_sql||' and tip_bonus <> 3'; 
 
  l_sql = l_sql||' union 
    select id, name from bonus_config 
    where  
      id <> '||:p_bonus_id||' and 
      simple_id = '||:p_sim_id||' and 
      anuliran = 0 and  
      id_bonus is null and  
      tip in (3,4) and '||:p_sel_id||' = -2'; 
  if (p_tip_bonus = 3) then 
    l_sql = l_sql||' and tip_bonus = 3'; 
  else 
    l_sql = l_sql||' and tip_bonus <> 3'; 
end 
else  
if (p_tip = 3) then begin 
  l_sql = l_sql||'select id, name from bonus_config 
    where 
      id <> '||:p_bonus_id||' and 
      simple_id = '||:p_sim_id||' and 
      anuliran = 0 and  
      id_bonus is null and  
      tip in (1,2)'; 
  if (p_tip_bonus = 3) then 
    l_sql = l_sql||' and tip_bonus = 3'; 
  else 
    l_sql = l_sql||' and tip_bonus <> 3'; 
 
  l_sql = l_sql||' union 
    select id, name from bonus_config 
    where  
      id <> '||:p_bonus_id||' and 
      simple_id ='|| :p_sim_id||' and 
      anuliran = 0 and  
      id_bonus is null and  
      tip in (3,4) and  
      exists(select id from bonus_config_kli  
                 join SEL_KLI_QR on SEL_KLI_QR.kli_id = bonus_config_kli.kli_id and bonus_config_kli.bonus_id = id and SEL_KLI_QR.sel_id = '||:p_sel_id||')'; 
  if (p_tip_bonus = 3) then 
    l_sql = l_sql||' and tip_bonus = 3'; 
  else 
    l_sql = l_sql||' and tip_bonus <> 3'; 
end 
else  
if (p_tip = 4) then begin 
  l_sql = l_sql||'select id, name from bonus_config 
    where  
      id <> '||:p_bonus_id||' and 
      simple_id = '||:p_sim_id||' and 
      anuliran = 0 and  
      id_bonus is null and  
      tip in (1,2,4,5)'; 
  if (p_tip_bonus = 3) then 
    l_sql = l_sql||' and tip_bonus = 3'; 
  else 
    l_sql = l_sql||' and tip_bonus <> 3'; 
 
  l_sql = l_sql||' union 
    select id, name from bonus_config 
    where  
      id <> '||:p_bonus_id||' and 
      simple_id = '||:p_sim_id||' and 
      anuliran = 0 and  
      id_bonus is null and  
      tip = 3 and  
      exists(select id from bonus_config_kli  
                 join SEL_KLI_QR on SEL_KLI_QR.kli_id = bonus_config_kli.kli_id and bonus_config_kli.bonus_id = id and SEL_KLI_QR.sel_id = '||:p_sel_id||')'; 
  if (p_tip_bonus = 3) then 
    l_sql = l_sql||' and tip_bonus = 3'; 
  else 
    l_sql = l_sql||' and tip_bonus <> 3'; 
end 
 
for execute statement l_sql into :ID, :NAME do suspend; 
  
END^


ALTER PROCEDURE GET_BONUS_PRODUKT_SEL_D (
    P_BONUS_ID INTEGER,
    P_SIM_SEL_ID INTEGER,
    P_TIP INTEGER,
    P_SEL_ID INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
DECLARE VARIABLE L_SQL VARCHAR(1000); 
BEGIN 
    L_SQL = ''; 
    IF (P_TIP = 5) THEN BEGIN 
        L_SQL = 'SELECT ID, NAME FROM BONUS_CONFIG 
        WHERE 
            ID <> '||:P_BONUS_ID||' AND 
            SIMPLE_SEL_ID = '||:P_SIM_SEL_ID||' AND 
            ANULIRAN = 0 AND 
            ID_BONUS IS NULL AND 
            TIP_BONUS = 4 AND 
            TIP IN (2,4,5) '; 
    END 
    ELSE IF (P_TIP = 1) THEN BEGIN 
        L_SQL = 'SELECT ID, NAME FROM BONUS_CONFIG 
        WHERE 
        ID <> '||:P_BONUS_ID||' AND 
        SIMPLE_SEL_ID = '||:P_SIM_SEL_ID||' AND 
        ANULIRAN = 0 AND 
        ID_BONUS IS NULL AND 
        TIP_BONUS = 4 AND 
        TIP IN (1,2)'; 
 
        L_SQL = L_SQL||' UNION 
        SELECT ID, NAME FROM BONUS_CONFIG 
        WHERE 
        ID <> '||:P_BONUS_ID||' AND 
        SIMPLE_SEL_ID = '||:P_SIM_SEL_ID||' AND 
        ANULIRAN = 0 AND 
        ID_BONUS IS NULL AND 
        TIP IN (3,4) AND 
        TIP_BONUS = 4 AND 
        EXISTS(SELECT ID FROM BONUS_CONFIG_KLI 
        JOIN SEL_KLI_QR ON SEL_KLI_QR.KLI_ID = BONUS_CONFIG_KLI.KLI_ID AND BONUS_CONFIG_KLI.BONUS_ID = ID AND SEL_KLI_QR.SEL_ID = '||:P_SEL_ID||') '; 
 
    END 
    ELSE IF (P_TIP = 2) THEN BEGIN 
        L_SQL = L_SQL||'SELECT ID, NAME FROM BONUS_CONFIG 
        WHERE 
        ID <> '||:P_BONUS_ID||' AND 
        SIMPLE_SEL_ID = '||:P_SIM_SEL_ID||' AND 
        ANULIRAN = 0 AND 
        ID_BONUS IS NULL AND 
        TIP_BONUS = 4 AND 
        TIP IN (1,2,4,5)'; 
 
        L_SQL = L_SQL||' UNION 
        SELECT ID, NAME FROM BONUS_CONFIG 
        WHERE 
        ID <> '||:P_BONUS_ID||' AND 
        SIMPLE_SEL_ID = '||:P_SIM_SEL_ID||' AND 
        ANULIRAN = 0 AND 
        ID_BONUS IS NULL AND 
        TIP IN (3,4) AND 
        TIP_BONUS = 4 AND 
        EXISTS(SELECT ID FROM BONUS_CONFIG_KLI 
        JOIN SEL_KLI_QR ON SEL_KLI_QR.KLI_ID = BONUS_CONFIG_KLI.KLI_ID AND BONUS_CONFIG_KLI.BONUS_ID = ID AND SEL_KLI_QR.SEL_ID = '||:P_SEL_ID||')'; 
 
        L_SQL = L_SQL||' UNION 
        SELECT ID, NAME FROM BONUS_CONFIG 
        WHERE 
        ID <> '||:P_BONUS_ID||' AND 
        SIMPLE_SEL_ID = '||:P_SIM_SEL_ID||' AND 
        ANULIRAN = 0 AND 
        ID_BONUS IS NULL AND 
        TIP_BONUS = 4 AND 
        TIP IN (3,4) AND '||:P_SEL_ID||' = -2'; 
    END 
    ELSE IF (P_TIP = 3) THEN BEGIN 
        L_SQL = L_SQL||'SELECT ID, NAME FROM BONUS_CONFIG 
        WHERE 
        ID <> '||:P_BONUS_ID||' AND 
        SIMPLE_SEL_ID = '||:P_SIM_SEL_ID||' AND 
        ANULIRAN = 0 AND 
        ID_BONUS IS NULL AND 
        TIP_BONUS = 4 AND 
        TIP IN (1,2)'; 
 
        L_SQL = L_SQL||' UNION 
        SELECT ID, NAME FROM BONUS_CONFIG 
        WHERE 
        ID <> '||:P_BONUS_ID||' AND 
        SIMPLE_SEL_ID ='|| :P_SIM_SEL_ID||' AND 
        ANULIRAN = 0 AND 
        ID_BONUS IS NULL AND 
        TIP_BONUS = 4 AND 
        TIP IN (3,4) AND 
        EXISTS(SELECT ID FROM BONUS_CONFIG_KLI 
        JOIN SEL_KLI_QR ON SEL_KLI_QR.KLI_ID = BONUS_CONFIG_KLI.KLI_ID AND BONUS_CONFIG_KLI.BONUS_ID = ID AND SEL_KLI_QR.SEL_ID = '||:P_SEL_ID||')'; 
    END 
    ELSE IF (P_TIP = 4) THEN BEGIN 
        L_SQL = L_SQL||'SELECT ID, NAME FROM BONUS_CONFIG 
        WHERE 
        ID <> '||:P_BONUS_ID||' AND 
        SIMPLE_SEL_ID = '||:P_SIM_SEL_ID||' AND 
        ANULIRAN = 0 AND 
        ID_BONUS IS NULL AND 
        TIP_BONUS = 4 AND 
        TIP IN (1,2,4,5)'; 
 
        L_SQL = L_SQL||' UNION 
        SELECT ID, NAME FROM BONUS_CONFIG 
        WHERE 
        ID <> '||:P_BONUS_ID||' AND 
        SIMPLE_SEL_ID = '||:P_SIM_SEL_ID||' AND 
        ANULIRAN = 0 AND 
        ID_BONUS IS NULL AND 
        TIP = 3 AND 
        TIP_BONUS = 4 AND 
        EXISTS(SELECT ID FROM BONUS_CONFIG_KLI 
        JOIN SEL_KLI_QR ON SEL_KLI_QR.KLI_ID = BONUS_CONFIG_KLI.KLI_ID AND BONUS_CONFIG_KLI.BONUS_ID = ID AND SEL_KLI_QR.SEL_ID = '||:P_SEL_ID||')'; 
    END 
 
    FOR EXECUTE STATEMENT L_SQL INTO :ID, :NAME DO SUSPEND; 
 
END^


ALTER PROCEDURE GET_BONUS_SUMA_D (
    P_BONUS_ID INTEGER,
    P_OT_SUMA DOUBLE PRECISION,
    P_DO_SUMA DOUBLE PRECISION,
    P_TIP INTEGER,
    P_SEL_ID INTEGER,
    P_TIP_BONUS SMALLINT)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN  
if (p_tip = 5) then  
  for  
    select id, name  
    from bonus_config 
    where  
      id <> :p_bonus_id and  
      ((:p_ot_suma between ot_suma and do_suma) or (:p_do_suma between ot_suma and do_suma)) and  
      anuliran = 0 and  
      id_bonus is null and  
      tip in (2,4,5)  
      and tip_bonus = :p_tip_bonus 
    into :ID, :NAME  
  do suspend;  
else  
if (p_tip = 1) then  
  for  
    select id, name  
    from bonus_config  
    where  
    id <> :p_bonus_id and  
      ((:p_ot_suma between ot_suma and do_suma) or (:p_do_suma between ot_suma and do_suma)) and  
      anuliran = 0 and  
      id_bonus is null and  
      tip in (1,2)  
      and tip_bonus = :p_tip_bonus 
    union  
    select id, name  
    from bonus_config  
    where  
    id <> :p_bonus_id and  
      ((:p_ot_suma between ot_suma and do_suma) or (:p_do_suma between ot_suma and do_suma)) and  
      anuliran = 0 and  
      id_bonus is null and  
      tip in (3,4) and  
      exists(select id from bonus_config_kli  
                 join SEL_KLI_QR on SEL_KLI_QR.kli_id = bonus_config_kli.kli_id and bonus_config_kli.bonus_id = id and SEL_KLI_QR.sel_id = :p_sel_id)  
      and tip_bonus = :p_tip_bonus 
    into :ID, :NAME  
  do suspend;  
else  
if (p_tip = 2) then  
  for  
    select id, name  
    from bonus_config  
    where  
    id <> :p_bonus_id and  
      ((:p_ot_suma between ot_suma and do_suma) or (:p_do_suma between ot_suma and do_suma)) and  
      anuliran = 0 and  
      id_bonus is null and  
      tip in (1,2,4,5)  
      and tip_bonus = :p_tip_bonus 
    union  
    select id, name  
    from bonus_config  
    where  
    id <> :p_bonus_id and  
      ((:p_ot_suma between ot_suma and do_suma) or (:p_do_suma between ot_suma and do_suma)) and  
      anuliran = 0 and  
      id_bonus is null and  
      tip in (3,4) and  
      exists(select id from bonus_config_kli  
                 join SEL_KLI_QR on SEL_KLI_QR.kli_id = bonus_config_kli.kli_id and bonus_config_kli.bonus_id = id and SEL_KLI_QR.sel_id = :p_sel_id)  
      and tip_bonus = :p_tip_bonus 
    union  
    select id, name  
    from bonus_config  
    where  
    id <> :p_bonus_id and  
      ((:p_ot_suma between ot_suma and do_suma) or (:p_do_suma between ot_suma and do_suma)) and  
      anuliran = 0 and  
      id_bonus is null and  
      tip in (3,4) and  :p_sel_id = -2  
      and tip_bonus = :p_tip_bonus 
    into :ID, :NAME  
  do suspend;  
else  
if (p_tip = 3) then  
  for  
    select id, name  
    from bonus_config  
    where  
    id <> :p_bonus_id and  
      ((:p_ot_suma between ot_suma and do_suma) or (:p_do_suma between ot_suma and do_suma)) and  
      anuliran = 0 and  
      id_bonus is null and  
      tip in (1,2)  
    union  
    select id, name  
    from bonus_config  
    where  
    id <> :p_bonus_id and  
      ((:p_ot_suma between ot_suma and do_suma) or (:p_do_suma between ot_suma and do_suma)) and  
      anuliran = 0 and  
      id_bonus is null and  
      tip in (3,4) and  
      exists(select id from bonus_config_kli  
                 join SEL_KLI_QR on SEL_KLI_QR.kli_id = bonus_config_kli.kli_id and bonus_config_kli.bonus_id = id and SEL_KLI_QR.sel_id = :p_sel_id)  
      and tip_bonus = :p_tip_bonus 
    into :ID, :NAME  
  do suspend;  
  
else  
if (p_tip = 4) then  
  for  
    select id, name  
    from bonus_config  
    where  
    id <> :p_bonus_id and  
      ((:p_ot_suma between ot_suma and do_suma) or (:p_do_suma between ot_suma and do_suma)) and  
      anuliran = 0 and  
      id_bonus is null and  
      tip in (1,2,4,5)  
      and tip_bonus = :p_tip_bonus 
    union  
    select id, name  
    from bonus_config  
    where  
    id <> :p_bonus_id and  
      ((:p_ot_suma between ot_suma and do_suma) or (:p_do_suma between ot_suma and do_suma)) and  
      anuliran = 0 and  
      id_bonus is null and  
      tip = 3 and  
      exists(select id from bonus_config_kli  
                 join SEL_KLI_QR on SEL_KLI_QR.kli_id = bonus_config_kli.kli_id and bonus_config_kli.bonus_id = id and SEL_KLI_QR.sel_id = :p_sel_id)  
      and tip_bonus = :p_tip_bonus 
    into :ID, :NAME  
  do suspend;  
  
END^


ALTER PROCEDURE GET_BONUSI (
    P_KLI_ID INTEGER,
    P_SUMA DOUBLE PRECISION,
    P_TIP_BONUS SMALLINT,
    P_SKLAD_ID INTEGER)
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(50),
    R_SIM_ID INTEGER,
    R_SIM_NAME VARCHAR(100),
    R_SIM_KOL DOUBLE PRECISION,
    R_SIM_CENA DOUBLE PRECISION,
    R_PROCENT DOUBLE PRECISION,
    R_SIM_P_ID INTEGER,
    R_SIM_P_KOL DOUBLE PRECISION,
    R_SIM_P_NAME VARCHAR(100))
AS
DECLARE VARIABLE L_WEEK_DAY INTEGER; 
DECLARE VARIABLE L_OT_TIME TIME; 
DECLARE VARIABLE L_DO_TIME TIME; 
DECLARE VARIABLE L_OT_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_DO_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_PERIOD SMALLINT; 
DECLARE VARIABLE L_NUMBER_WMY SMALLINT; 
DECLARE VARIABLE L_WMY SMALLINT; 
DECLARE VARIABLE L_SIM_ID INTEGER; 
DECLARE VARIABLE L_SIM_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_TYPE SMALLINT; 
DECLARE VARIABLE L_DAY INTEGER; 
DECLARE VARIABLE L_BIT_DEY_WEEK INTEGER; 
BEGIN 
    SELECT FIRST 1 * FROM ( 
        SELECT 
            CAST(1 AS INTEGER) AS TIP, 
            BONUS_CONFIG.ID, 
            BONUS_CONFIG.NAME, 
            BONUS_CONFIG.WEEK_DAY, 
            BONUS_CONFIG.OT_TIME, 
            BONUS_CONFIG.DO_TIME, 
            BONUS_CONFIG.OT_SUMA, 
            BONUS_CONFIG.DO_SUMA, 
            BONUS_CONFIG.SIMPLE_ID SIM_P_ID, 
            BONUS_CONFIG.SIMPLE_KOL, 
            SIM_P.NAME SIM_P_NAME, 
            BONUS_CONFIG.PERIOD, 
            BONUS_CONFIG.NUMBER_WMY, 
            BONUS_CONFIG.WMY, 
            BONUS_CONFIG.PROCENT, 
            BONUS_CONFIG.SIMPLE_ID_BONUS, 
            SIM_B.NAME SIM_BONUS_NAME, 
            BONUS_CONFIG.KOL_SIM_BONUS, 
            BONUS_CONFIG.CENA_SIM_BONUS 
        FROM 
            GET_ACTIV_BONUS(:P_KLI_ID,:P_TIP_BONUS, :P_SKLAD_ID) GAB INNER JOIN BONUS_CONFIG ON GAB.ID = BONUS_CONFIG.ID 
            LEFT JOIN SIMPLE SIM_P ON SIM_P.ID = BONUS_CONFIG.SIMPLE_ID 
            LEFT JOIN SIMPLE SIM_B ON SIM_B.ID = BONUS_CONFIG.SIMPLE_ID_BONUS 
 
        WHERE 
            CURRENT_DATE BETWEEN COALESCE(BONUS_CONFIG.OT_DATE, CURRENT_DATE) AND COALESCE(BONUS_CONFIG.DO_DATE, CURRENT_DATE) AND 
            CURRENT_TIME BETWEEN BONUS_CONFIG.OT_TIME AND BONUS_CONFIG.DO_TIME AND 
            BONUS_CONFIG.ZA_SMETKA = 1 AND :P_SUMA BETWEEN BONUS_CONFIG.OT_SUMA AND BONUS_CONFIG.DO_SUMA 
 
        UNION 
 
        SELECT 
            CAST(2 AS INTEGER) TIP, 
            BONUS_CONFIG.ID, 
            BONUS_CONFIG.NAME, 
            BONUS_CONFIG.WEEK_DAY, 
            BONUS_CONFIG.OT_TIME, 
            BONUS_CONFIG.DO_TIME, 
            BONUS_CONFIG.OT_SUMA, 
            BONUS_CONFIG.DO_SUMA, 
            BONUS_CONFIG.SIMPLE_ID SIM_P_ID, 
            BONUS_CONFIG.SIMPLE_KOL, 
            SIM_P.NAME SIM_P_NAME, 
            BONUS_CONFIG.PERIOD, 
            BONUS_CONFIG.NUMBER_WMY, 
            BONUS_CONFIG.WMY, 
            BONUS_CONFIG.PROCENT, 
            BONUS_CONFIG.SIMPLE_ID_BONUS, 
            SIM_B.NAME SIM_BONUS_NAME, 
            BONUS_CONFIG.KOL_SIM_BONUS, 
            BONUS_CONFIG.CENA_SIM_BONUS 
        FROM 
            GET_ACTIV_BONUS(:P_KLI_ID,:P_TIP_BONUS, :P_SKLAD_ID) GAB INNER JOIN BONUS_CONFIG ON GAB.ID = BONUS_CONFIG.ID 
            LEFT JOIN SIMPLE SIM_P ON SIM_P.ID = BONUS_CONFIG.SIMPLE_ID 
            LEFT JOIN SIMPLE SIM_B ON SIM_B.ID = BONUS_CONFIG.SIMPLE_ID_BONUS 
 
        WHERE 
            CURRENT_DATE BETWEEN COALESCE(BONUS_CONFIG.OT_DATE, CURRENT_DATE) AND COALESCE(BONUS_CONFIG.DO_DATE, CURRENT_DATE) AND 
            CURRENT_TIME BETWEEN BONUS_CONFIG.OT_TIME AND BONUS_CONFIG.DO_TIME AND 
            BONUS_CONFIG.ZA_SMETKA = 0 
            AND BONUS_CONFIG.OT_SUMA <= (SELECT SUMA FROM GET_SUMA_KLI_DATE(:P_KLI_ID,BONUS_CONFIG.PERIOD,BONUS_CONFIG.NUMBER_WMY,BONUS_CONFIG.WMY,:P_SUMA)) AND 
            (SELECT SUMA FROM GET_SUMA_KLI_DATE(:P_KLI_ID,BONUS_CONFIG.PERIOD,BONUS_CONFIG.NUMBER_WMY,BONUS_CONFIG.WMY,:P_SUMA)) <= BONUS_CONFIG.DO_SUMA 
 
        ORDER BY 1 DESC) 
 
    INTO :L_TYPE, :R_ID,:R_NAME,:L_WEEK_DAY,:L_OT_TIME,:L_DO_TIME,:L_OT_SUMA,:L_DO_SUMA, 
    :R_SIM_P_ID,:R_SIM_P_KOL,:R_SIM_P_NAME,:L_PERIOD,:L_NUMBER_WMY,:L_WMY, 
    :R_PROCENT,:R_SIM_ID,:R_SIM_NAME,:R_SIM_KOL,:R_SIM_CENA; 
 
    L_DAY = EXTRACT(WEEKDAY FROM CURRENT_DATE); 
    L_BIT_DEY_WEEK = 0; 
    IF (L_DAY = 1 ) THEN L_BIT_DEY_WEEK = 1; 
    ELSE IF (L_DAY = 2 ) THEN L_BIT_DEY_WEEK = 2; 
    ELSE IF (L_DAY = 3 ) THEN L_BIT_DEY_WEEK = 4; 
    ELSE IF (L_DAY = 4 ) THEN L_BIT_DEY_WEEK = 8; 
    ELSE IF (L_DAY = 5 ) THEN L_BIT_DEY_WEEK = 16; 
    ELSE IF (L_DAY = 6 ) THEN L_BIT_DEY_WEEK = 32; 
    ELSE IF (L_DAY = 7 ) THEN L_BIT_DEY_WEEK = 64; 
 
    IF ((BIN_AND(:L_WEEK_DAY,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND 
        (L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= L_DO_TIME)) THEN 
    SUSPEND; 
END^


ALTER PROCEDURE GET_BONUSI_ZA_PRODUKT (
    P_SIM_ID INTEGER,
    P_SIM_KOL DOUBLE PRECISION,
    P_SKLAD_ID INTEGER)
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(50),
    R_SIM_ID INTEGER,
    R_SIM_NAME VARCHAR(100),
    R_SIM_KOL DOUBLE PRECISION,
    R_SIM_CENA DOUBLE PRECISION,
    R_SIM_P_ID INTEGER,
    R_SIM_P_KOL DOUBLE PRECISION,
    R_SIM_P_NAME VARCHAR(100),
    R_TIP_BONUS INTEGER,
    R_PROCENT DOUBLE PRECISION)
AS
declare variable L_WEEK_DAY integer; 
declare variable L_SIM_ID integer; 
declare variable L_SIM_KOL double precision; 
BEGIN 
    FOR 
    SELECT 
        BONUS_CONFIG.ID, 
        BONUS_CONFIG.NAME, 
        BONUS_CONFIG.WEEK_DAY, 
        BONUS_CONFIG.SIMPLE_ID SIM_P_ID, 
        BONUS_CONFIG.SIMPLE_KOL, 
        SIM_P.NAME SIM_P_NAME, 
        BONUS_CONFIG.SIMPLE_ID_BONUS, 
        SIM_B.NAME SIM_BONUS_NAME, 
        IIF(BONUS_CONFIG.TIP_BONUS = 6, 1, BONUS_CONFIG.KOL_SIM_BONUS) AS KOL_SIM_BONUS, 
        BONUS_CONFIG.CENA_SIM_BONUS, 
        BONUS_CONFIG.TIP_BONUS, 
        BONUS_CONFIG.PROCENT 
    FROM 
        BONUS_CONFIG LEFT JOIN SIMPLE SIM_P ON SIM_P.ID = BONUS_CONFIG.SIMPLE_ID 
        LEFT JOIN SIMPLE SIM_B ON SIM_B.ID = BONUS_CONFIG.SIMPLE_ID_BONUS 
    WHERE 
        CURRENT_DATE BETWEEN COALESCE(BONUS_CONFIG.OT_DATE, CURRENT_DATE) AND COALESCE(BONUS_CONFIG.DO_DATE, CURRENT_DATE) AND 
        CURRENT_TIME BETWEEN BONUS_CONFIG.OT_TIME AND BONUS_CONFIG.DO_TIME AND 
        BONUS_CONFIG.ANULIRAN = 0 AND 
        BONUS_CONFIG.IS_ACTIV IN (1,2) AND 
        BONUS_CONFIG.ZA_SMETKA = 1 AND 
        BONUS_CONFIG.ID_BONUS IS NULL AND 
        BONUS_CONFIG.SIMPLE_ID = :P_SIM_ID AND 
        BONUS_CONFIG.TIP_BONUS <> 3 
        AND NOT EXISTS (SELECT BONUS_CONFIG_SKLAD.SKLAD_ID FROM BONUS_CONFIG_SKLAD WHERE BONUS_CONFIG_SKLAD.BONUS_ID = BONUS_CONFIG.ID) 
 
    UNION 
 
    SELECT 
        BONUS_CONFIG.ID, 
        BONUS_CONFIG.NAME, 
        BONUS_CONFIG.WEEK_DAY, 
        BONUS_CONFIG.SIMPLE_ID SIM_P_ID, 
        BONUS_CONFIG.SIMPLE_KOL, 
        SIM_P.NAME SIM_P_NAME, 
        BONUS_CONFIG.SIMPLE_ID_BONUS, 
        SIM_B.NAME SIM_BONUS_NAME, 
        IIF(BONUS_CONFIG.TIP_BONUS = 6, 1, BONUS_CONFIG.KOL_SIM_BONUS) AS KOL_SIM_BONUS, 
        BONUS_CONFIG.CENA_SIM_BONUS, 
        BONUS_CONFIG.TIP_BONUS, 
        BONUS_CONFIG.PROCENT 
    FROM 
        BONUS_CONFIG LEFT JOIN SIMPLE SIM_P ON SIM_P.ID = BONUS_CONFIG.SIMPLE_ID 
        LEFT JOIN SIMPLE SIM_B ON SIM_B.ID = BONUS_CONFIG.SIMPLE_ID_BONUS 
    WHERE 
        CURRENT_DATE BETWEEN COALESCE(BONUS_CONFIG.OT_DATE, CURRENT_DATE) AND COALESCE(BONUS_CONFIG.DO_DATE, CURRENT_DATE) AND 
        CURRENT_TIME BETWEEN BONUS_CONFIG.OT_TIME AND BONUS_CONFIG.DO_TIME AND 
        BONUS_CONFIG.ANULIRAN = 0 AND 
        BONUS_CONFIG.IS_ACTIV IN (1,2) AND 
        BONUS_CONFIG.ZA_SMETKA = 1 AND 
        BONUS_CONFIG.ID_BONUS IS NULL AND 
        BONUS_CONFIG.SIMPLE_ID = :P_SIM_ID AND 
        BONUS_CONFIG.TIP_BONUS <> 3 
        AND EXISTS (SELECT BONUS_CONFIG_SKLAD.SKLAD_ID FROM BONUS_CONFIG_SKLAD WHERE BONUS_CONFIG_SKLAD.SKLAD_ID =:P_SKLAD_ID AND BONUS_CONFIG_SKLAD.BONUS_ID =BONUS_CONFIG.ID) 
 
    INTO :R_ID,:R_NAME,:L_WEEK_DAY,:R_SIM_P_ID,:R_SIM_P_KOL,:R_SIM_P_NAME, 
         :R_SIM_ID,:R_SIM_NAME,:R_SIM_KOL,:R_SIM_CENA, :R_TIP_BONUS, R_PROCENT 
    DO 
    BEGIN 
        R_SIM_KOL = CAST(P_SIM_KOL/R_SIM_P_KOL - 0.5 AS INTEGER)*R_SIM_KOL; 
        IF (R_SIM_KOL > 0) THEN 
            SUSPEND; 
 
        IF (R_PROCENT IS NOT NULL) THEN 
            SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_BTC (
    P_SIM_ID INTEGER,
    P_KLI_ID INTEGER,
    P_SKLAD_ID INTEGER)
RETURNS (
    R_BTC INTEGER)
AS
DECLARE VARIABLE L_WEEK_DAY INTEGER; 
DECLARE VARIABLE L_OT_TIME TIME; 
DECLARE VARIABLE L_DO_TIME TIME; 
DECLARE VARIABLE L_DAY INTEGER; 
DECLARE VARIABLE L_BIT_DEY_WEEK INTEGER; 
DECLARE VARIABLE L_BTC INTEGER; 
BEGIN 
    R_BTC = 1; 
 
    IF (:P_KLI_ID IS NULL) THEN 
        P_KLI_ID = 0; 
 
    SELECT 
        BONUS_CONFIG.WEEK_DAY, 
        BONUS_CONFIG.OT_TIME, 
        BONUS_CONFIG.DO_TIME, 
        BONUS_CONFIG.BTC 
    FROM 
        GET_ACTIV_BONUS(:P_KLI_ID, 3, :P_SKLAD_ID) GAB INNER JOIN BONUS_CONFIG ON BONUS_CONFIG.ID = GAB.ID 
    WHERE 
        BONUS_CONFIG.SIMPLE_ID = :P_SIM_ID AND 
        BONUS_CONFIG.ZA_SMETKA = 0 AND 
        BONUS_CONFIG.TIP_BONUS = 3 
 
    INTO :L_WEEK_DAY,:L_OT_TIME,:L_DO_TIME,:L_BTC; 
 
    L_DAY = EXTRACT(WEEKDAY FROM CURRENT_DATE); 
    L_BIT_DEY_WEEK = 0; 
    IF (L_DAY = 1 ) THEN L_BIT_DEY_WEEK = 1; 
    ELSE IF (L_DAY = 2 ) THEN L_BIT_DEY_WEEK = 2; 
    ELSE IF (L_DAY = 3 ) THEN L_BIT_DEY_WEEK = 4; 
    ELSE IF (L_DAY = 4 ) THEN L_BIT_DEY_WEEK = 8; 
    ELSE IF (L_DAY = 5 ) THEN L_BIT_DEY_WEEK = 16; 
    ELSE IF (L_DAY = 6 ) THEN L_BIT_DEY_WEEK = 32; 
    ELSE IF (L_DAY = 7 ) THEN L_BIT_DEY_WEEK = 64; 
 
    IF ((BIN_AND(:L_WEEK_DAY,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND 
        (L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= L_DO_TIME)) THEN 
 
    R_BTC = :L_BTC; 
 
    SUSPEND; 
END^


ALTER PROCEDURE GET_CEN_LIST_SIMPLE (
    ID_SIMPLE TYPE OF DOM_KEY)
RETURNS (
    NAME TYPE OF DOM_CHAR_30,
    OT_DATE TYPE OF DOM_DATE,
    DO_DATE TYPE OF DOM_DATE,
    OT_TIME TYPE OF DOM_TIME,
    DO_TIME TYPE OF DOM_TIME,
    WEEK TYPE OF DOM_INT,
    ACTIVNA TYPE OF DOM_SMAL_INT,
    OT_OPR_ID TYPE OF DOM_INT,
    TIP1 TYPE OF DOM_SMAL_INT,
    PROCENT TYPE OF DOM_PERCENT,
    CENA TYPE OF DOM_CENA,
    TIP_OT_CENA TYPE OF DOM_INT,
    OPR_ID TYPE OF DOM_KEY,
    CENA_SR TYPE OF DOM_CENA,
    ROUND_TIP TYPE OF DOM_KEY,
    SUMA_SR TYPE OF DOM_SUMA,
    KOL_SR TYPE OF DOM_SUMA,
    FAKT TYPE OF DOM_INT,
    SEL_ID TYPE OF DOM_KEY,
    R_BASE_PERCENT TYPE OF DOM_PERCENT,
    R_CENA_SR_DDS TYPE OF DOM_CENA,
    R_SUMA_SR_DDS TYPE OF DOM_SUMA,
    R_FLAG_LOCK TYPE OF DOM_SMAL_INT)
AS
declare variable L_ID_OSNOVNA type of DOM_KEY; 
declare variable L_H_SKLAD type of DOM_KEY; 
declare variable L_L type of DOM_KEY; 
declare variable L_TIP_CENI type of DOM_SMAL_INT; 
declare variable L_SIMPLE_DDS numeric(4,2); 
declare variable L_CENA_SR type of DOM_CENA; 
declare variable L_SUMA_SR type of DOM_SUMA; 
BEGIN 
    SELECT FIRST 1 
        LOG_CENI_DDS.TIP_CENI 
    FROM 
        LOG_CENI_DDS 
    WHERE 
        LOG_CENI_DDS.TIP_DDS = 0 
 
    ORDER BY LOG_CENI_DDS.ID DESC 
    INTO :L_TIP_CENI; 
 
    FOR SELECT 
        CENOVA_LISTA.NAME, 
        CENOVA_LISTA.OPR_ID, 
        CENOVA_LISTA.OT_DATE, 
        CENOVA_LISTA.DO_DATE, 
        CENOVA_LISTA.OT_TIME, 
        CENOVA_LISTA.DO_TIME, 
        CENOVA_LISTA.WEEK, 
        CENOVA_LISTA.ACTIVNA, 
        CENOVA_LISTA.ID, 
        CENOVA_LISTA.BASE_PERCENT 
    FROM 
        CENOVA_LISTA 
    WHERE 
        CENOVA_LISTA.DEF = 1 
    INTO 
        :NAME, :OPR_ID, :OT_DATE, :DO_DATE, :OT_TIME, :DO_TIME, :WEEK, :ACTIVNA, :L_ID_OSNOVNA, :R_BASE_PERCENT 
    DO BEGIN 
        OT_OPR_ID = NULL; 
        TIP1 = NULL; 
        PROCENT = NULL; 
        CENA = NULL; 
        TIP_OT_CENA = NULL; 
        SEL_ID = NULL; 
        L_SIMPLE_DDS = NULL; 
        R_FLAG_LOCK = 0; 
 
        SELECT 
            CENOVA_LISTA_EL.OT_OPR_ID, 
            CENOVA_LISTA_EL.TIP, 
            CENOVA_LISTA_EL.PROCENT, 
            CENOVA_LISTA_EL.CENA, 
            CENOVA_LISTA_EL.TIP_OT_CENA, 
            CENOVA_LISTA_EL.ROUND_TIP_ID, 
            CENOVA_LISTA_EL.SEL_ID, 
            CENOVA_LISTA_EL.FLAG_LOCK, 
            SIMPLE.DDS 
        FROM 
            CENOVA_LISTA_EL 
            INNER JOIN SIMPLE ON SIMPLE.ID = CENOVA_LISTA_EL.SIMPLE_ID 
        WHERE 
            CENOVA_LISTA_EL.OPR_ID = :OPR_ID 
            AND CENOVA_LISTA_EL.SIMPLE_ID = :ID_SIMPLE 
        INTO 
            :OT_OPR_ID, :TIP1, :PROCENT, :CENA, :TIP_OT_CENA, :ROUND_TIP, :SEL_ID, :R_FLAG_LOCK, :L_SIMPLE_DDS; 
 
        CENA_SR = NULL; 
        FAKT = 0; 
        CENA_SR = 0; 
        KOL_SR = 0; 
        SUMA_SR = 0; 
 
        EXECUTE PROCEDURE GET_SR_CENA(:ID_SIMPLE,:OPR_ID, '') 
        RETURNING_VALUES :L_CENA_SR, :KOL_SR, :L_SUMA_SR; 
 
        IF (:L_TIP_CENI = 1) THEN begin 
            R_CENA_SR_DDS =:L_CENA_SR; 
            CENA_SR = ROUNDD(L_CENA_SR / (:L_SIMPLE_DDS/100 + 1)); 
 
            R_SUMA_SR_DDS =:L_SUMA_SR; 
            suma_sr = ROUNDD(L_SUMA_SR / (:L_SIMPLE_DDS/100 + 1)); 
        END 
        ELSE BEGIN 
            R_CENA_SR_DDS = ROUNDD(:L_CENA_SR * :L_SIMPLE_DDS/100 + L_CENA_SR); 
            CENA_SR =:L_CENA_SR; 
 
            R_SUMA_SR_DDS = ROUNDD(:L_SUMA_SR * :L_SIMPLE_DDS/100 + L_SUMA_SR); 
            SUMA_SR =:L_SUMA_SR; 
        END 
 
        SUSPEND; 
    END 
 
    SELECT 
        SYSTEM.H_SKLAD 
    FROM 
        SYSTEM 
    INTO 
        :L_H_SKLAD; 
 
    FOR SELECT 
        CENOVA_LISTA.NAME, 
        CENOVA_LISTA.OPR_ID, 
        CENOVA_LISTA.OT_DATE, 
        CENOVA_LISTA.DO_DATE, 
        CENOVA_LISTA.OT_TIME, 
        CENOVA_LISTA.DO_TIME, 
        CENOVA_LISTA.WEEK, 
        CENOVA_LISTA.ACTIVNA, 
        CENOVA_LISTA.BASE_PERCENT 
    FROM 
        CENOVA_LISTA 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID) 
        AND CENOVA_LISTA.ID <> :L_ID_OSNOVNA 
    ORDER BY 
        CENOVA_LISTA.PRIORITET DESC 
    INTO 
        :NAME, :OPR_ID, :OT_DATE, :DO_DATE, :OT_TIME, :DO_TIME, :WEEK, :ACTIVNA, :R_BASE_PERCENT 
    DO BEGIN 
        OT_OPR_ID = NULL; 
        TIP1 = NULL; 
        PROCENT = NULL; 
        CENA = NULL; 
        TIP_OT_CENA = NULL; 
        SEL_ID = NULL; 
        R_FLAG_LOCK = 0; 
        L_SIMPLE_DDS = NULL; 
 
        SELECT 
            CENOVA_LISTA_EL.OT_OPR_ID, 
            CENOVA_LISTA_EL.TIP, 
            CENOVA_LISTA_EL.PROCENT, 
            CENOVA_LISTA_EL.CENA, 
            CENOVA_LISTA_EL.TIP_OT_CENA, 
            CENOVA_LISTA_EL.ROUND_TIP_ID, 
            CENOVA_LISTA_EL.SEL_ID, 
            CENOVA_LISTA_EL.FLAG_LOCK, 
            SIMPLE.DDS 
        FROM 
            CENOVA_LISTA_EL 
            INNER JOIN SIMPLE ON SIMPLE.ID = CENOVA_LISTA_EL.SIMPLE_ID 
        WHERE 
            CENOVA_LISTA_EL.OPR_ID = :OPR_ID 
            AND CENOVA_LISTA_EL.SIMPLE_ID = :ID_SIMPLE 
        INTO 
            :OT_OPR_ID,:TIP1, :PROCENT, :CENA, :TIP_OT_CENA, :ROUND_TIP, :SEL_ID, :R_FLAG_LOCK, :L_SIMPLE_DDS; 
 
        CENA_SR = 0; 
        KOL_SR = 0; 
        SUMA_SR = 0; 
 
        SELECT 
            COUNT(ID) 
        FROM 
            CENOVA_LISTA_SKLAD 
        WHERE 
            OPR_ID = :OPR_ID 
            AND SKLAD_ID = :L_H_SKLAD 
        INTO 
            :L_L; 
 
        IF (L_L = 0) THEN BEGIN 
            FAKT = 0; 
            EXECUTE PROCEDURE GET_SR_CENA(:ID_SIMPLE,:OPR_ID, '') 
            RETURNING_VALUES :CENA_SR,:KOL_SR,:SUMA_SR; 
        END 
        ELSE BEGIN 
            FAKT = 1; 
            SELECT 
                CASE WHEN KOL_NAL >0 THEN ROUND5(SUMA/KOL_NAL) ELSE 0 END, 
                COALESCE(KOL_NAL,0), 
                COALESCE(SUMA, 0) 
            FROM 
                NAL 
            WHERE 
                SKLAD_ID = :L_H_SKLAD 
                AND 
                SIMPLE_ID = :ID_SIMPLE 
            INTO 
                :CENA_SR,:KOL_SR,:SUMA_SR; 
        END 
        IF (:L_TIP_CENI = 1) THEN begin 
            R_CENA_SR_DDS =:L_CENA_SR; 
            CENA_SR = ROUNDD(L_CENA_SR / (:L_SIMPLE_DDS/100 + 1)); 
 
            R_SUMA_SR_DDS =:L_SUMA_SR; 
            suma_sr = ROUNDD(L_SUMA_SR / (:L_SIMPLE_DDS/100 + 1)); 
        END 
        ELSE BEGIN 
            R_CENA_SR_DDS = ROUNDD(:L_CENA_SR * :L_SIMPLE_DDS/100 + L_CENA_SR); 
            CENA_SR =:L_CENA_SR; 
 
            R_SUMA_SR_DDS = ROUNDD(:L_SUMA_SR * :L_SIMPLE_DDS/100 + L_SUMA_SR); 
            SUMA_SR =:L_SUMA_SR; 
        END 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_CENA_CL (
    CL_ID INTEGER,
    S_ID INTEGER)
RETURNS (
    CENA DOUBLE PRECISION)
AS
BEGIN 
  select 
    cenova_lista_el.cena 
  from cenova_lista_el 
  join cenova_lista on cenova_lista.opr_id = cenova_lista_el.opr_id and cenova_lista.id = :cl_id 
  where cenova_lista_el.simple_id = :s_id 
  INTO :CENA; 
 
  SUSPEND; 
END^


ALTER PROCEDURE GET_CENA_CL_OS (
    SIM_ID INTEGER)
RETURNS (
    CENA_OS DOUBLE PRECISION)
AS
begin 
  select 
    cle.cena 
  from cenova_lista_el cle 
  join cenova_lista cl on cl.opr_id = cle.opr_id and cl.def = 1 
  where cle.simple_id = :sim_id 
  into :cena_os; 
 
  suspend; 
end^


ALTER PROCEDURE GET_CENA_CL_SIMPLES (
    P_SELID INTEGER,
    P_ASORTIMENT INTEGER)
RETURNS (
    ID INTEGER,
    CL_ID INTEGER,
    CENA DOUBLE PRECISION,
    R_TIP INTEGER)
AS
declare variable L_PROCENT double precision; 
declare variable L_TIP integer; 
declare variable L_CENA_SR double precision; 
declare variable L_KOL_SR double precision; 
declare variable L_SUMA_SR double precision; 
declare variable L_OPR_ID integer; 
declare variable L_TIP_OT_CENA integer; 
BEGIN 
    if (P_SELID = 0) then 
        if (:P_ASORTIMENT = 0) then BEGIN 
            for select 
                simple.id, 
                cenova_lista.id cl_id, 
                cenova_lista_el.cena, 
                cenova_lista_el.TIP 
            from simple 
            join cenova_lista_el on cenova_lista_el.simple_id = simple.id 
            join cenova_lista on cenova_lista.opr_id = cenova_lista_el.opr_id 
                           and cenova_lista.activna = 1 
                           and not exists(select opr_anul.id from opr_anul where opr_anul.an_opr_id = cenova_lista.opr_id) 
            into :id,:cl_id,:cena, :R_TIP 
            do 
                suspend; 
        end else 
        begin 
            for select 
                simple.id, 
                cenova_lista.id cl_id, 
                cenova_lista_el.cena, 
                cenova_lista_el.TIP 
            from simple 
            left join cenova_lista_el on cenova_lista_el.simple_id = simple.id 
            LEFT join cenova_lista on cenova_lista.opr_id = cenova_lista_el.opr_id 
                           and cenova_lista.activna = 1 
                           and not exists(select opr_anul.id from opr_anul where opr_anul.an_opr_id = cenova_lista.opr_id) 
            into :id,:cl_id,:cena, :R_TIP 
        do 
            suspend; 
        end 
        else 
        if (:P_ASORTIMENT = 0) then begin 
            for select 
                simple.id, 
                cenova_lista.id cl_id, 
                cenova_lista_el.cena, 
                cenova_lista_el.procent, 
                cenova_lista_el.tip, 
                cenova_lista.opr_id, 
                cenova_lista_el.TIP_OT_CENA 
            FROM 
                SIMPLE JOIN SEL_SIM_QR on SEL_SIM_QR.simple_id = simple.id and SEL_SIM_QR.sel_id = :p_selid 
                JOIN CENOVA_LISTA_EL on cenova_lista_el.simple_id = simple.id 
                JOIN CENOVA_LISTA on cenova_lista.opr_id = cenova_lista_el.opr_id 
                           and cenova_lista.activna = 1 
                           and not exists(select opr_anul.id from opr_anul where opr_anul.an_opr_id = cenova_lista.opr_id) 
            into :id,:cl_id,:cena,:l_procent,:R_TIP,:l_opr_id, :L_TIP_OT_CENA 
            do begin 
            /*if ((l_tip = 2) and (l_tip_ot_cena = 0)) then begin 
                execute procedure GET_SR_CENA(:id,:l_opr_id,'') returning_values :l_cena_sr,:l_kol_sr,:l_suma_sr; 
                cena = round5(:l_cena_sr + :l_cena_sr*:l_procent/100); 
            end */ 
                suspend; 
            end 
        end else 
            for select 
                simple.id, 
                cenova_lista.id cl_id, 
                cenova_lista_el.cena, 
                cenova_lista_el.procent, 
                cenova_lista_el.tip, 
                cenova_lista.opr_id, 
                cenova_lista_el.TIP_OT_CENA 
            FROM SIMPLE 
                JOIN SEL_SIM_QR on SEL_SIM_QR.simple_id = simple.id and SEL_SIM_QR.sel_id = :p_selid 
                LEFT JOIN CENOVA_LISTA_EL on cenova_lista_el.simple_id = simple.id 
                LEFT JOIN CENOVA_LISTA on cenova_lista.opr_id = cenova_lista_el.opr_id 
                           and cenova_lista.activna = 1 
                           and not exists(select opr_anul.id from opr_anul where opr_anul.an_opr_id = cenova_lista.opr_id) 
            into :id,:cl_id,:cena,:l_procent,:l_tip,:l_opr_id, :L_TIP_OT_CENA 
            do begin 
            /*if ((l_tip = 2) and (l_tip_ot_cena = 0)) then begin 
            execute procedure GET_SR_CENA(:id,:l_opr_id,'') returning_values :l_cena_sr,:l_kol_sr,:l_suma_sr; 
            cena = round5(:l_cena_sr + :l_cena_sr*:l_procent/100); 
        end */ 
            suspend; 
        end 
END^


ALTER PROCEDURE GET_CENA_DEF_CL (
    P_ID_SIMPLE INTEGER)
RETURNS (
    CENA DOUBLE PRECISION)
AS
DECLARE VARIABLE L_ID INTEGER;
begin
  select
    cenova_lista.id
  from cenova_lista where cenova_lista.def = 1
  into :l_id;

  execute procedure get_cena_cl(l_id,p_id_simple) returning_values(cena);
  suspend;
end^


ALTER PROCEDURE GET_CENA_FIX_CL (
    P_ID_SIMPLE INTEGER)
RETURNS (
    CENA DOUBLE PRECISION)
AS
DECLARE VARIABLE L_ID INTEGER; 
BEGIN 
  SELECT 
    CENOVA_LISTA.ID 
  FROM CENOVA_LISTA WHERE CENOVA_LISTA.DEF_FIKS = 1 
  INTO :L_ID; 
 
  EXECUTE PROCEDURE GET_CENA_CL(L_ID,P_ID_SIMPLE) RETURNING_VALUES(CENA); 
  SUSPEND; 
END^


ALTER PROCEDURE GET_CENA_OFERTA (
    CL_OF INTEGER,
    S_ID INTEGER)
RETURNS (
    CENA_OF DOUBLE PRECISION,
    CENA_PROD DOUBLE PRECISION,
    CENA_FIKS DOUBLE PRECISION)
AS
declare variable l_cl_id integer; 
declare variable cl_fiks_id integer; 
BEGIN 
 
  SELECT CENOVA_LISTA.id 
  FROM cenova_lista 
  WHERE CENOVA_LISTA.def = 1 
  INTO :L_CL_ID; 
 
  SELECT CENOVA_LISTA.ID 
  FROM cenova_lista 
  WHERE cenova_lista.def_fiks = 1 
  INTO :cl_fiks_id; 
 
  select 
    cenova_lista_el.cena 
  from cenova_lista 
  join cenova_lista_el  on cenova_lista.opr_id = cenova_lista_el.opr_id and cenova_lista.id = :cl_of 
  where cenova_lista_el.simple_id =:s_id 
  into :cena_of; 
 
  select 
    cenova_lista_el.cena 
  from cenova_lista 
  join cenova_lista_el  on cenova_lista.opr_id = cenova_lista_el.opr_id and cenova_lista.id = :l_cl_id 
  where cenova_lista_el.simple_id = :s_id 
  INTO :cena_prod; 
 
  select 
    cenova_lista_el.cena 
  from cenova_lista 
  join cenova_lista_el  on cenova_lista.opr_id = cenova_lista_el.opr_id and cenova_lista.id = :cl_fiks_id 
  where cenova_lista_el.simple_id = :s_id 
  INTO :cena_FIKS; 
 
  SUSPEND; 
END^


ALTER PROCEDURE GET_CENA_PROD_DOSTAVNA (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID_S VARCHAR(1000),
    P_FAKT INTEGER)
RETURNS (
    CODE TYPE OF DOM_CHAR_50,
    NAME VARCHAR(100),
    CENA DOUBLE PRECISION,
    SELKTION_NAME VARCHAR(50),
    DOSTAVNA DOUBLE PRECISION,
    CENA_EDRO DOUBLE PRECISION,
    CENA_SR DOUBLE PRECISION)
AS
declare variable L_ID integer; 
declare variable L_KOL_SR double precision; 
declare variable L_SUMA_SR double precision; 
declare variable L_SR double precision; 
declare variable L_FR double precision; 
declare variable L_LR double precision; 
BEGIN 
  FOR 
    SELECT 
      simple.code, 
      simple.name, 
      simple.cena_prod AS cena, 
      selekciq.name AS selktion_name, 
      simple.cena_edro 
    FROM simple 
    LEFT JOIN selekciq ON selekciq.id = simple.def_sel_id 
    WHERE 
      simple.id = :p_simple_id 
 
    ORDER BY 3 
    INTO :CODE,:NAME,:CENA,:SELKTION_NAME,:cena_edro 
  DO 
  BEGIN 
    if (p_fakt = 0) then begin 
      dostavna = 0; 
      execute procedure GET_DOSTAVNA_CENA_SKLAD(0,:p_simple_id) returning_values :dostavna; 
      cena_sr = 0; 
      execute procedure GET_SR_CENA(:p_simple_id,0,:p_sklad_id_s)  returning_values :cena_sr,:l_kol_sr,:l_suma_sr; 
    end 
    else begin 
      execute procedure GET_SR_FR_LR(p_simple_id) returning_values :l_sr,:l_fr,:l_lr; 
 
      dostavna = coalesce(l_lr,0); 
      cena_sr = coalesce(l_sr,0); 
    end 
    SUSPEND; 
  END 
END^


ALTER PROCEDURE GET_CENA_PRODUCT (
    ID TYPE OF DOM_KEY,
    P_SKLAD TYPE OF DOM_KEY)
RETURNS (
    CENA_CURRENT TYPE OF DOM_CENA)
AS
DECLARE VARIABLE L_CENA TYPE OF DOM_CENA; 
DECLARE VARIABLE L_OT_TIME TYPE OF DOM_TIME; 
DECLARE VARIABLE L_DO_TIME TYPE OF DOM_TIME; 
DECLARE VARIABLE L_WEEK TYPE OF DOM_INT; 
DECLARE VARIABLE L_BIT_DEY_WEEK TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_PRIORITET TYPE OF DOM_INT; 
BEGIN 
    SELECT 
        SIMPLE.CENA_PROD 
    FROM 
        SIMPLE 
    WHERE 
        SIMPLE.ID = :ID 
    INTO 
        :CENA_CURRENT; 
 
    FOR SELECT 
        CENOVA_LISTA.PRIORITET, 
        CENOVA_LISTA_EL.CENA, 
        CENOVA_LISTA.OT_TIME, 
        CENOVA_LISTA.DO_TIME, 
        CENOVA_LISTA.WEEK 
    FROM 
        CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
        JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
        JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID 
    WHERE 
        ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
        AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
        AND CENOVA_LISTA.ACTIVNA = 1 
        AND CENOVA_LISTA.OPR_ID > -100 
        AND CENOVA_LISTA.TIP IN (1,2) 
        AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
        AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
    UNION 
 
    SELECT 
        CENOVA_LISTA.PRIORITET, 
        CENOVA_LISTA_EL.CENA, 
        CENOVA_LISTA.OT_TIME, 
        CENOVA_LISTA.DO_TIME, 
        CENOVA_LISTA.WEEK 
    FROM 
        CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
        JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID 
    WHERE 
        ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
        AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
        AND CENOVA_LISTA.ACTIVNA = 1 
        AND CENOVA_LISTA.OPR_ID > -100 
        AND NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
        AND CENOVA_LISTA.TIP IN (1,2) 
        AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
        AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
    UNION 
 
    SELECT 
        CENOVA_LISTA.PRIORITET, 
        CENOVA_LISTA_EL.CENA, 
        CENOVA_LISTA.OT_TIME, 
        CENOVA_LISTA.DO_TIME, 
        CENOVA_LISTA.WEEK 
    FROM 
        CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
        JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
    WHERE 
        ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
        AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
        AND CENOVA_LISTA.ACTIVNA = 1 
        AND CENOVA_LISTA.OPR_ID > -100 
        AND CENOVA_LISTA.TIP IN (1,2) 
        AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
        AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
    UNION 
 
    SELECT 
        CENOVA_LISTA.PRIORITET, 
        CENOVA_LISTA_EL.CENA, 
        CENOVA_LISTA.OT_TIME, 
        CENOVA_LISTA.DO_TIME, 
        CENOVA_LISTA.WEEK 
    FROM 
        CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
        INNER JOIN (SELECT 
                        CENOVA_LISTA.OPR_ID, 
                        OPR.SKLAD_ID 
                    FROM 
                        CENOVA_LISTA INNER JOIN OPR ON OPR.ID = CENOVA_LISTA.OPR_ID 
                    WHERE 
                        NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.OPR_ID = OPR.ID)) CL_SKLAD ON CL_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID 
    WHERE 
        ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
        AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
        AND CENOVA_LISTA.ACTIVNA = 1 
        AND CENOVA_LISTA.OPR_ID > -100 
        AND CENOVA_LISTA.TIP IN (1,2) 
        AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
        AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
    ORDER BY 1 DESC 
    INTO 
        :L_PRIORITET, :L_CENA, :L_OT_TIME, :L_DO_TIME, :L_WEEK 
    DO BEGIN 
        IF (L_WEEK IS NOT NULL) THEN BEGIN 
            L_BIT_DEY_WEEK = POWER (2, EXTRACT(WEEKDAY FROM CURRENT_DATE-1)); 
 
            IF (L_OT_TIME IS NULL) THEN BEGIN 
                IF (BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    LEAVE; 
                END 
            END 
            ELSE BEGIN 
                IF ((BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) THEN BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    LEAVE; 
                END 
            END 
        END 
        ELSE IF (:L_OT_TIME IS NOT NULL) THEN BEGIN 
            IF ((:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) THEN BEGIN 
                CENA_CURRENT = :L_CENA; 
                LEAVE; 
            END 
        END ELSE BEGIN 
            CENA_CURRENT = :L_CENA; 
            LEAVE; 
        END 
    END 
    SUSPEND; 
END^


ALTER PROCEDURE GET_CENA_SIM (
    P_SKLAD INTEGER,
    P_KLIENT INTEGER,
    P_SEL_SIMPLE VARCHAR(3000))
RETURNS (
    CENA_CURRENT DOUBLE PRECISION,
    CENA_VALUTA TYPE OF DOM_CENA)
AS
BEGIN 
    SELECT FIRST 1 
        CENA_CURRENT, 
        R_CENA_VALUTA 
    FROM GET_CENI_SEL(:P_SKLAD,:P_KLIENT,:P_SEL_SIMPLE,0,0) 
    INTO :CENA_CURRENT,:CENA_VALUTA; 
    SUSPEND; 
END^


ALTER PROCEDURE GET_CENA_SIMPLE (
    P_SKLAD DOM_KEY,
    P_KLIENT DOM_KEY,
    P_SIMPLE_ID DOM_KEY)
RETURNS (
    ID TYPE OF DOM_KEY,
    CENA_CURRENT TYPE OF DOM_CENA,
    R_PRI DOUBLE PRECISION,
    CENA_OS TYPE OF DOM_CENA,
    R_CL_ID TYPE OF DOM_KEY,
    R_CENA_VALUTA TYPE OF DOM_CENA,
    R_VALUTA_ID TYPE OF DOM_KEY_SMALL,
    R_FLAG_LOCK TYPE OF DOM_FLAG,
    R_VAT_PERCENT NUMERIC(4,2),
    R_VAT_GROUP TYPE OF DOM_SMAL_INT)
AS
declare variable L_CENA type of DOM_CENA; 
declare variable L_OT_TIME type of DOM_TIME; 
declare variable L_DO_TIME type of DOM_TIME; 
declare variable L_WEEK type of DOM_INT; 
declare variable L_PRIORITET type of DOM_INT; 
declare variable L_BIT_DEY_WEEK type of DOM_INT; 
declare variable L_AA type of DOM_INT; 
declare variable L_KURS_VALUTA type of CURRENCY; 
BEGIN 
    FOR SELECT 
        SIMPLE1.ID, 
        SIMPLE1.CENA_PROD, 
        SIMPLE1.DDS, 
        SIMPLE1.VAT_GROUP 
    FROM 
        NAL INNER JOIN SIMPLE SIMPLE1 ON SIMPLE1.ID = NAL.SIMPLE_ID  AND NOT SIMPLE1."ACTIVE" = '0'  AND SIMPLE1.ID = :P_SIMPLE_ID 
    WHERE 
        NAL.SKLAD_ID = :P_SKLAD 
 
    UNION 
 
    SELECT 
        SIMPLE.ID, 
        SIMPLE.CENA_PROD, 
        SIMPLE.DDS, 
        SIMPLE.VAT_GROUP 
    FROM 
        SIMPLE 
    WHERE 
        NOT SIMPLE."ACTIVE" = '0' 
        AND NOT EXISTS (SELECT NAL.ID FROM NAL WHERE NAL.SIMPLE_ID = SIMPLE.ID AND NAL.SKLAD_ID = :P_SKLAD) 
        AND SIMPLE.ID = :P_SIMPLE_ID 
    ORDER BY 1 
    INTO 
        :ID,:CENA_CURRENT, :R_VAT_PERCENT, :R_VAT_GROUP 
    DO BEGIN 
        R_FLAG_LOCK = 0; 
        IF ((SELECT KLI.CL_ID from KLI WHERE KLI.ID = :P_KLIENT) IS NULL) then 
        BEGIN 
          EXECUTE PROCEDURE GET_CENA_CL_OS(:P_SIMPLE_ID) RETURNING_VALUES :CENA_OS; 
        END 
        ELSE BEGIN 
          SELECT 
            CENA 
          FROM 
            CENOVA_LISTA_EL 
          WHERE 
            CENOVA_LISTA_EL.OPR_ID = (SELECT KLI.CL_ID FROM KLI WHERE KLI.ID = :P_KLIENT) AND 
            CENOVA_LISTA_EL.SIMPLE_ID = :ID 
          INTO :CENA_OS; 
        END 
 
        IF (:P_KLIENT = 0) THEN BEGIN 
            FOR SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CAST(0 AS INTEGER), 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (2,4,5) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND  CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CAST(1 AS INTEGER), 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (2,4,5) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            ORDER BY 6,1 DESC 
            INTO 
                :L_PRIORITET, :L_CENA, :L_OT_TIME, :L_DO_TIME, :L_WEEK, :L_AA, :R_CL_ID, :R_FLAG_LOCK 
            DO BEGIN 
                IF (L_WEEK IS NOT NULL) THEN BEGIN 
 
                    L_BIT_DEY_WEEK = POWER(2, EXTRACT(WEEKDAY FROM CURRENT_DATE-1)); 
 
                    IF (L_OT_TIME IS NULL) THEN BEGIN 
                        IF (BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                    ELSE BEGIN 
                        IF ((BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) 
                        AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                        THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                END 
                ELSE IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                THEN BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
                ELSE BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
            END 
        END 
        ELSE BEGIN 
            FOR SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND  CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
            ORDER BY 1 DESC 
            INTO 
                :L_PRIORITET, :L_CENA, :L_OT_TIME, :L_DO_TIME, :L_WEEK, :R_CL_ID, :R_FLAG_LOCK 
            DO BEGIN 
                IF (L_WEEK IS NOT NULL) THEN BEGIN 
                    L_BIT_DEY_WEEK = POWER(2, EXTRACT(WEEKDAY FROM CURRENT_DATE-1)); 
 
                    IF (L_OT_TIME IS NULL) THEN BEGIN 
                        IF (BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                    ELSE BEGIN 
                        IF ((BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                        THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                END 
                ELSE IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) THEN BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
                ELSE BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
            END 
        END 
 
        R_CENA_VALUTA = NULL; 
        R_VALUTA_ID   = NULL; 
 
        SELECT 
            VALUTA.ID, 
            VALUTA.KURS 
        FROM 
            VALUTA INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.VALUTA_ID = VALUTA.ID 
        WHERE 
            CENOVA_LISTA.OPR_ID =:R_CL_ID 
        INTO 
            :R_VALUTA_ID, :L_KURS_VALUTA; 
 
        IF (R_VALUTA_ID IS NOT NULL) THEN BEGIN 
            R_CENA_VALUTA = CENA_CURRENT; 
            CENA_CURRENT = ROUND(CENA_CURRENT * L_KURS_VALUTA,5); 
        END 
 
        SUSPEND; 
 
        CENA_CURRENT = NULL; 
        R_PRI = NULL; 
    END 
END^


ALTER PROCEDURE GET_CENI (
    P_SKLAD TYPE OF DOM_KEY,
    P_KLIENT TYPE OF DOM_KEY)
RETURNS (
    KOL_NAL TYPE OF DOM_KOL,
    CENA_SR TYPE OF DOM_CENA,
    LAST_CENA TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    USLUGA CHAR(1),
    ME_ID TYPE OF DOM_SMAL_INT,
    DEF_SEL_ID TYPE OF DOM_KEY,
    CENA_PROD TYPE OF DOM_CENA,
    CENA_EDRO TYPE OF DOM_CENA,
    LOCK_CENA_PROD CHAR(1),
    D_D_S TYPE OF DOM_PERCENT,
    RSN CHAR(1),
    RAZ_TIP_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    ME_KOEF TYPE OF DOM_INT,
    GR_NAME TYPE OF DOM_CHAR_50,
    R_PRI DOUBLE PRECISION,
    CENA_CURRENT TYPE OF DOM_CENA,
    ME2_ID TYPE OF DOM_SMAL_INT,
    ME2 CHAR(2),
    KOL_NAL2 TYPE OF DOM_KOL,
    KOL_RZV TYPE OF DOM_KOL,
    DEF_RAZ_EL TYPE OF DOM_INT,
    NAME_RAZ_EL TYPE OF DOM_CHAR_30,
    KOL_RAZ_EL TYPE OF DOM_INT,
    CODE2 TYPE OF DOM_CHAR_50,
    CENA_OS TYPE OF DOM_CENA,
    RAZPAD TYPE OF DOM_INT,
    R_IS_BONUS TYPE OF DOM_SMAL_INT,
    USE_PROP TYPE OF DOM_SMAL_INT,
    CL_ID INTEGER)
AS
DECLARE VARIABLE L_CENA TYPE OF DOM_CENA; 
DECLARE VARIABLE L_OT_TIME TYPE OF DOM_TIME; 
DECLARE VARIABLE L_DO_TIME TYPE OF DOM_TIME; 
DECLARE VARIABLE L_WEEK TYPE OF DOM_INT; 
DECLARE VARIABLE L_PRIORITET TYPE OF DOM_INT; 
DECLARE VARIABLE L_BIT_DEY_WEEK TYPE OF DOM_INT; 
DECLARE VARIABLE L_CL_ID INTEGER; 
BEGIN 
    FOR SELECT 
        CAST (NAL.KOL_NAL AS DOUBLE PRECISION), 
        CASE WHEN NAL.KOL_NAL <> 0 THEN 
        CAST((NAL.SUMA/NAL.KOL_NAL) AS DOUBLE PRECISION) 
        ELSE CAST(0 AS DOUBLE PRECISION)END, 
        CAST(COALESCE(NAL.LAST_CENA,0) AS DOUBLE PRECISION), 
        SIMPLE1.ID, 
        SIMPLE1.NAME, 
        SIMPLE1.CODE, 
        SIMPLE1.USLUGA, 
        SIMPLE1.ME_ID, 
        SIMPLE1.DEF_SEL_ID, 
        SIMPLE1.CENA_PROD, 
        SIMPLE1.CENA_EDRO, 
        SIMPLE1.LOCK_CENA_PROD, 
        SIMPLE1.DDS, 
        SIMPLE1.RSN, 
        COALESCE(SIMPLE1.RAZ_TIP_ID,0), 
        ME1.NAME, 
        COALESCE(ME1.KOEF,0), 
        SELEKCIQ.NAME, 
        SIMPLE1.CENA_PROD, 
        SIMPLE1.ME2_ID, 
        ME2.NAME, 
        COALESCE(NAL2.KOL, 0), 
        COALESCE(NAL.KOL_RZV, 0), 
        COALESCE(DEF_RAZ_SIMPLE.RAZFASOVKA_ID, 0), 
        RAZFASOVKA.KOL, 
        RAZ_ELEMENT.NAME NAME_RAZ_EL, 
        SIMPLE1.RAZPAD, 
        SIMPLE1.USE_PROP, 
        SIMPLE1.CODE2, 
        SIMPLE1.IS_BONUS 
    FROM 
        NAL INNER JOIN SIMPLE SIMPLE1 ON SIMPLE1.ID = NAL.SIMPLE_ID  AND NOT SIMPLE1."ACTIVE" = '0' 
        LEFT JOIN ME ME1 ON ME1.ID = SIMPLE1.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE1.ME2_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE1.DEF_SEL_ID 
        LEFT JOIN NAL2 ON NAL2.NAL_ID = NAL.ID 
        LEFT JOIN DEF_RAZ_SIMPLE ON DEF_RAZ_SIMPLE.SIMPLE_ID = NAL.SIMPLE_ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = DEF_RAZ_SIMPLE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
    WHERE 
        NAL.SKLAD_ID = :P_SKLAD 
 
    UNION 
 
    SELECT 
        CAST (0 AS DOUBLE PRECISION), 
        CAST(0 AS DOUBLE PRECISION), 
        CAST (0 AS DOUBLE PRECISION), 
        SIMPLE.ID, 
        SIMPLE.NAME, 
        SIMPLE.CODE, 
        SIMPLE.USLUGA, 
        SIMPLE.ME_ID, 
        SIMPLE.DEF_SEL_ID, 
        SIMPLE.CENA_PROD, 
        SIMPLE.CENA_EDRO, 
        SIMPLE.LOCK_CENA_PROD, 
        SIMPLE.DDS, 
        SIMPLE.RSN, 
        COALESCE(SIMPLE.RAZ_TIP_ID,0), 
        ME1.NAME, 
        COALESCE(ME1.KOEF,0), 
        SELEKCIQ.NAME, 
        SIMPLE.CENA_PROD, 
        SIMPLE.ME2_ID, 
        ME2.NAME, 
        CAST (0 AS DOUBLE PRECISION), 
        CAST (0 AS DOUBLE PRECISION), 
        COALESCE(DEF_RAZ_SIMPLE.RAZFASOVKA_ID, 0), 
        RAZFASOVKA.KOL, 
        RAZ_ELEMENT.NAME NAME_RAZ_EL, 
        SIMPLE.RAZPAD, 
        SIMPLE.USE_PROP, 
        SIMPLE.CODE2, 
        SIMPLE.IS_BONUS 
    FROM 
        SIMPLE 
        LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
        LEFT JOIN DEF_RAZ_SIMPLE ON DEF_RAZ_SIMPLE.SIMPLE_ID = SIMPLE.ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = DEF_RAZ_SIMPLE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
    WHERE 
 
        NOT SIMPLE."ACTIVE" = '0' 
        AND NOT EXISTS (SELECT NAL.ID FROM NAL WHERE NAL.SIMPLE_ID = SIMPLE.ID AND NAL.SKLAD_ID = :P_SKLAD) 
        AND SIMPLE.ID > -100 
 
    INTO 
        :KOL_NAL,:CENA_SR,:LAST_CENA,:ID,:NAME,:CODE,:USLUGA,:ME_ID,:DEF_SEL_ID,:CENA_PROD, 
        :CENA_EDRO,:LOCK_CENA_PROD,:D_D_S,:RSN,:RAZ_TIP_ID,:ME,:ME_KOEF,:GR_NAME,:CENA_CURRENT, 
        :ME2_ID, :ME2, :KOL_NAL2,:KOL_RZV,:DEF_RAZ_EL,:KOL_RAZ_EL,:NAME_RAZ_EL,:RAZPAD,:USE_PROP, :CODE2, :R_IS_BONUS 
    DO BEGIN 
        EXECUTE PROCEDURE GET_CENA_CL_OS(:ID) 
        RETURNING_VALUES :CENA_OS; 
 
        IF (:P_KLIENT = 0) THEN BEGIN 
            FOR SELECT 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL 
                JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (2,4,5) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
            UNION 
 
            SELECT 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (2,4,5) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE OPR_ID = CENOVA_LISTA_EL.OPR_ID) = 0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            ORDER BY 2 DESC 
            INTO 
                :L_CL_ID, :L_PRIORITET, :L_CENA, :L_OT_TIME, :L_DO_TIME, :L_WEEK 
            DO BEGIN 
                IF (L_WEEK IS NOT NULL) THEN BEGIN 
                    L_BIT_DEY_WEEK = POWER(2, EXTRACT(WEEKDAY FROM CURRENT_DATE-1)); 
 
                    IF (L_OT_TIME IS NULL) THEN BEGIN 
                        IF (BIN_AND(:L_WEEK, :L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                            CL_ID = :L_CL_ID; 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                    ELSE BEGIN 
                        IF ((BIN_AND(:L_WEEK, :L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                        THEN BEGIN 
                            CL_ID = :L_CL_ID; 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                END 
                ELSE IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                THEN BEGIN 
                    CL_ID = :L_CL_ID; 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
                ELSE BEGIN 
                    CL_ID = :L_CL_ID; 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
            END 
        END 
        ELSE BEGIN 
            FOR SELECT 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
            UNION 
 
            SELECT 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
            UNION 
 
            SELECT 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
            ORDER BY 2 DESC 
            INTO 
                :L_CL_ID, :L_PRIORITET, :L_CENA, :L_OT_TIME, :L_DO_TIME, :L_WEEK 
            DO BEGIN 
                IF (L_WEEK IS NOT NULL) THEN BEGIN 
                    L_BIT_DEY_WEEK = POWER(2, EXTRACT(WEEKDAY FROM CURRENT_DATE-1)); 
 
                    IF (L_OT_TIME IS NULL) THEN BEGIN 
                        IF (BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                            CL_ID = :L_CL_ID; 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                    ELSE BEGIN 
                        IF ((BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                        THEN BEGIN 
                            CL_ID = :L_CL_ID; 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                END 
                ELSE IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                THEN BEGIN 
                    CL_ID = :L_CL_ID; 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
                ELSE BEGIN 
                    CL_ID = :L_CL_ID; 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
            END 
        END 
 
        SUSPEND; 
        CL_ID = NULL; 
        CENA_CURRENT = NULL; 
        R_PRI = NULL; 
    END 
END^


ALTER PROCEDURE GET_CENI_ALL (
    P_SKLAD TYPE OF DOM_KEY,
    P_KLIENT TYPE OF DOM_KEY,
    P_FAK_SKLAD TYPE OF DOM_KEY,
    P_BTC TYPE OF DOM_SMAL_INT)
RETURNS (
    KOL_NAL TYPE OF DOM_KOL,
    CENA_CURRENT TYPE OF DOM_CENA,
    CENA_SR TYPE OF DOM_CENA,
    LAST_CENA TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    USLUGA CHAR(1),
    ME_ID TYPE OF DOM_SMAL_INT,
    DEF_SEL_ID TYPE OF DOM_KEY,
    CENA_PROD TYPE OF DOM_CENA,
    CENA_EDRO TYPE OF DOM_CENA,
    LOCK_CENA_PROD CHAR(1),
    D_D_S TYPE OF DOM_PERCENT,
    RSN CHAR(1),
    RAZ_TIP_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    ME_KOEF INTEGER,
    GR_NAME TYPE OF DOM_CHAR_50,
    R_PRI DOUBLE PRECISION,
    ME2_ID TYPE OF DOM_SMAL_INT,
    ME2 CHAR(2),
    KOL_NAL2 TYPE OF DOM_KOL,
    KOL_RZV TYPE OF DOM_KOL,
    DEF_RAZ_EL TYPE OF DOM_INT,
    NAME_RAZ_EL TYPE OF DOM_CHAR_30,
    KOL_RAZ_EL TYPE OF DOM_INT,
    CENA_OS TYPE OF DOM_CENA,
    BTC TYPE OF DOM_INT,
    BTC_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_CENA TYPE OF DOM_CENA; 
DECLARE VARIABLE L_OT_TIME TYPE OF DOM_TIME; 
DECLARE VARIABLE L_DO_TIME TYPE OF DOM_TIME; 
DECLARE VARIABLE L_WEEK TYPE OF DOM_INT; 
DECLARE VARIABLE L_PRIORITET TYPE OF DOM_INT; 
DECLARE VARIABLE L_BIT_DEY_WEEK TYPE OF DOM_INT; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_KEY; 
BEGIN 
    IF (P_FAK_SKLAD > 0)  THEN 
        L_SKLAD_ID = P_FAK_SKLAD; 
    ELSE 
        L_SKLAD_ID = P_SKLAD; 
 
    FOR SELECT 
        CAST (NAL.KOL_NAL AS DOUBLE PRECISION), 
        CASE WHEN NAL.KOL_NAL <> 0 THEN 
            CAST((NAL.SUMA/NAL.KOL_NAL) AS DOUBLE PRECISION) 
            ELSE CAST(0 AS DOUBLE PRECISION)END, 
        CAST(COALESCE(NAL.LAST_CENA,0) AS DOUBLE PRECISION), 
        SIMPLE1.ID, 
        SIMPLE1.NAME, 
        SIMPLE1.CODE, 
        SIMPLE1.USLUGA, 
        SIMPLE1.ME_ID, 
        SIMPLE1.DEF_SEL_ID, 
        SIMPLE1.CENA_PROD, 
        SIMPLE1.CENA_EDRO, 
        SIMPLE1.LOCK_CENA_PROD, 
        SIMPLE1.DDS, 
        SIMPLE1.RSN, 
        COALESCE(SIMPLE1.RAZ_TIP_ID,0), 
        ME1.NAME, 
        COALESCE(ME1.KOEF,0), 
        SELEKCIQ.NAME, 
        SIMPLE1.CENA_PROD, 
        SIMPLE1.ME2_ID, 
        ME2.NAME, 
        COALESCE(NAL2.KOL, 0), 
        COALESCE(NAL.KOL_RZV, 0), 
        COALESCE(DEF_RAZ_SIMPLE.RAZFASOVKA_ID, 0), 
        RAZFASOVKA.KOL, 
        RAZ_ELEMENT.NAME NAME_RAZ_EL 
    FROM 
        NAL INNER JOIN SIMPLE SIMPLE1 ON ( SIMPLE1.ID = NAL.SIMPLE_ID AND NOT SIMPLE1."ACTIVE" = '0') 
        LEFT JOIN ME ME1 ON ME1.ID = SIMPLE1.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE1.ME2_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE1.DEF_SEL_ID 
        LEFT JOIN NAL2 ON NAL2.NAL_ID = NAL.ID 
        LEFT JOIN DEF_RAZ_SIMPLE ON DEF_RAZ_SIMPLE.SIMPLE_ID = NAL.SIMPLE_ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = DEF_RAZ_SIMPLE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
    WHERE 
        NAL.SKLAD_ID = :L_SKLAD_ID 
 
    UNION 
 
    SELECT 
        CAST (0 AS DOUBLE PRECISION), 
        CAST(0 AS DOUBLE PRECISION), 
        CAST (0 AS DOUBLE PRECISION), 
        SIMPLE.ID, 
        SIMPLE.NAME, 
        SIMPLE.CODE, 
        SIMPLE.USLUGA, 
        SIMPLE.ME_ID, 
        SIMPLE.DEF_SEL_ID, 
        SIMPLE.CENA_PROD, 
        SIMPLE.CENA_EDRO, 
        SIMPLE.LOCK_CENA_PROD, 
        SIMPLE.DDS, 
        SIMPLE.RSN, 
        COALESCE(SIMPLE.RAZ_TIP_ID,0), 
        ME1.NAME, 
        COALESCE(ME1.KOEF,0), 
        SELEKCIQ.NAME, 
        SIMPLE.CENA_PROD, 
        SIMPLE.ME2_ID, 
        ME2.NAME, 
        CAST (0 AS DOUBLE PRECISION), 
        CAST (0 AS DOUBLE PRECISION), 
        COALESCE(DEF_RAZ_SIMPLE.RAZFASOVKA_ID, 0), 
        RAZFASOVKA.KOL, 
        RAZ_ELEMENT.NAME NAME_RAZ_EL 
    FROM 
        SIMPLE LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
        LEFT JOIN DEF_RAZ_SIMPLE ON DEF_RAZ_SIMPLE.SIMPLE_ID = SIMPLE.ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = DEF_RAZ_SIMPLE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
    WHERE 
        NOT SIMPLE."ACTIVE" = '0' 
        AND NOT EXISTS (SELECT NAL.ID FROM NAL WHERE NAL.SIMPLE_ID = SIMPLE.ID AND NAL.SKLAD_ID = :L_SKLAD_ID) 
        AND SIMPLE.ID > -100 
 
    INTO 
        :KOL_NAL,:CENA_SR,:LAST_CENA,:ID,:NAME,:CODE,:USLUGA,:ME_ID,:DEF_SEL_ID,:CENA_PROD, 
        :CENA_EDRO,:LOCK_CENA_PROD,:D_D_S,:RSN,:RAZ_TIP_ID,:ME,:ME_KOEF,:GR_NAME,:CENA_CURRENT, 
        :ME2_ID, :ME2, :KOL_NAL2,:KOL_RZV,:DEF_RAZ_EL,:KOL_RAZ_EL,:NAME_RAZ_EL 
    DO BEGIN 
        EXECUTE PROCEDURE GET_CENA_CL_OS(:ID) 
        RETURNING_VALUES :CENA_OS; 
 
        EXECUTE PROCEDURE GET_BTC(:ID,:P_KLIENT,:L_SKLAD_ID) 
        RETURNING_VALUES :BTC; 
 
        BTC_ID = 0; 
 
        IF (:P_BTC = 1) THEN 
            SELECT FIRST 1 
                BCT.ID 
            FROM 
                BONUS_CENA_TOCHKI BCT 
            WHERE 
                BCT.SIMPLE_ID = :ID AND BCT.BONUS_C_T_ID IS NULL AND BCT.ANUL = 0 
                AND (BCT.OTDT <= CURRENT_DATE) AND (CURRENT_DATE <= BCT.DODT) 
            INTO 
                :BTC_ID; 
 
        IF (:P_KLIENT = 0) THEN BEGIN 
            FOR SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (2,4,5) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (2,4,5) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            ORDER BY 1 DESC 
            INTO 
                :L_PRIORITET, :L_CENA,:L_OT_TIME,:L_DO_TIME,:L_WEEK 
            DO BEGIN 
                IF (L_WEEK IS NOT NULL) THEN BEGIN 
 
                    L_BIT_DEY_WEEK = POWER(2, EXTRACT(WEEKDAY FROM CURRENT_DATE-1)); 
                    IF (L_OT_TIME IS NULL) THEN BEGIN 
                      IF (BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                        CENA_CURRENT = :L_CENA; 
                        R_PRI = :L_DO_TIME - :L_OT_TIME; 
                        LEAVE; 
                      END 
                    END 
                    ELSE BEGIN 
                        IF ((BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                        THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                END 
                ELSE IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                THEN BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
                ELSE BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
            END 
        END 
        ELSE BEGIN 
            FOR SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
            ORDER BY 1 DESC 
            INTO 
                :L_PRIORITET, :L_CENA,:L_OT_TIME,:L_DO_TIME,:L_WEEK 
            DO BEGIN 
                IF (L_WEEK IS NOT NULL) THEN BEGIN 
 
                    L_BIT_DEY_WEEK = POWER(2, EXTRACT(WEEKDAY FROM CURRENT_DATE-1)); 
 
                    IF (L_OT_TIME IS NULL) THEN BEGIN 
                        IF (BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                    ELSE IF ((BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                    THEN BEGIN 
                        CENA_CURRENT = :L_CENA; 
                        R_PRI = :L_DO_TIME - :L_OT_TIME; 
                        LEAVE; 
                    END 
                END 
                ELSE IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) THEN BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
                ELSE BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
            END 
        END 
 
        SUSPEND; 
        CENA_CURRENT = NULL; 
        R_PRI = NULL; 
    END 
END^


ALTER PROCEDURE GET_CENI_SEL (
    P_SKLAD TYPE OF DOM_KEY,
    P_KLIENT TYPE OF DOM_KEY,
    P_SEL_SIMPLE VARCHAR(3000),
    P_FAK_SKLAD TYPE OF DOM_KEY,
    P_BTC TYPE OF DOM_SMAL_INT)
RETURNS (
    KOL_NAL TYPE OF DOM_KOL,
    CENA_CURRENT TYPE OF DOM_CENA,
    CENA_SR TYPE OF DOM_CENA,
    LAST_CENA TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    USLUGA CHAR(1),
    ME_ID TYPE OF DOM_SMAL_INT,
    DEF_SEL_ID TYPE OF DOM_KEY,
    CENA_PROD TYPE OF DOM_CENA,
    CENA_EDRO TYPE OF DOM_CENA,
    LOCK_CENA_PROD CHAR(1),
    D_D_S TYPE OF DOM_PERCENT,
    RSN CHAR(1),
    RAZ_TIP_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    ME_KOEF TYPE OF DOM_INT,
    GR_NAME TYPE OF DOM_CHAR_50,
    R_PRI DOUBLE PRECISION,
    ME2_ID TYPE OF DOM_SMAL_INT,
    ME2 CHAR(2),
    KOL_NAL2 TYPE OF DOM_KOL,
    KOL_RZV TYPE OF DOM_KOL,
    DEF_RAZ_EL TYPE OF DOM_INT,
    NAME_RAZ_EL TYPE OF DOM_CHAR_30,
    KOL_RAZ_EL TYPE OF DOM_INT,
    CENA_OS TYPE OF DOM_CENA,
    BTC TYPE OF DOM_INT,
    BTC_ID TYPE OF DOM_KEY,
    CL_ID TYPE OF DOM_KEY,
    R_VALUTA_ID TYPE OF DOM_KEY_SMALL,
    R_CENA_VALUTA TYPE OF DOM_CENA,
    R_FLAG_LOCK TYPE OF DOM_FLAG,
    R_VAT_GROUP TYPE OF DOM_SMAL_INT)
AS
declare variable L_CENA type of DOM_CENA; 
declare variable L_OT_TIME type of DOM_TIME; 
declare variable L_DO_TIME type of DOM_TIME; 
declare variable L_WEEK type of DOM_INT; 
declare variable L_PRIORITET type of DOM_INT; 
declare variable L_BIT_DEY_WEEK type of DOM_INT; 
declare variable L_SKLAD_ID type of DOM_KEY; 
declare variable L_KURS_VALUTA type of CURRENCY; 
BEGIN 
    CL_ID = NULL; 
 
    IF (P_FAK_SKLAD > 0)  THEN 
        L_SKLAD_ID = P_FAK_SKLAD; 
    ELSE 
        L_SKLAD_ID = P_SKLAD; 
 
    FOR SELECT 
        CAST (NAL.KOL_NAL AS DOUBLE PRECISION), 
        CASE WHEN NAL.KOL_NAL <> 0 THEN 
        CAST((NAL.SUMA/NAL.KOL_NAL) AS DOUBLE PRECISION) 
        ELSE CAST(0 AS DOUBLE PRECISION)END, 
        CAST(COALESCE(NAL.LAST_CENA,0) AS DOUBLE PRECISION), 
        SIMPLE1.ID, 
        SIMPLE1.NAME, 
        SIMPLE1.CODE, 
        SIMPLE1.USLUGA, 
        SIMPLE1.ME_ID, 
        SIMPLE1.DEF_SEL_ID, 
        SIMPLE1.CENA_PROD, 
        SIMPLE1.CENA_EDRO, 
        SIMPLE1.LOCK_CENA_PROD, 
        SIMPLE1.DDS, 
        SIMPLE1.RSN, 
        COALESCE(SIMPLE1.RAZ_TIP_ID,0), 
        ME1.NAME, 
        COALESCE(ME1.KOEF,0), 
        SELEKCIQ.NAME AS GR_NAME, 
        SIMPLE1.CENA_PROD, 
        SIMPLE1.ME2_ID, 
        ME2.NAME, 
        COALESCE(NAL2.KOL, 0), 
        COALESCE(NAL.KOL_RZV, 0), 
        COALESCE(DEF_RAZ_SIMPLE.RAZFASOVKA_ID, 0), 
        RAZFASOVKA.KOL, 
        RAZ_ELEMENT.NAME NAME_RAZ_EL, 
        SIMPLE1.VAT_GROUP 
    FROM 
        NAL INNER JOIN SIMPLE SIMPLE1 ON (:P_SEL_SIMPLE LIKE '%,'||SIMPLE1.ID||',%') AND SIMPLE1.ID = NAL.SIMPLE_ID  AND NOT SIMPLE1."ACTIVE" = '0' 
        LEFT JOIN ME ME1 ON ME1.ID = SIMPLE1.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE1.ME2_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE1.DEF_SEL_ID 
        LEFT JOIN NAL2 ON NAL2.NAL_ID = NAL.ID 
        LEFT JOIN DEF_RAZ_SIMPLE ON DEF_RAZ_SIMPLE.SIMPLE_ID = NAL.SIMPLE_ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = DEF_RAZ_SIMPLE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
    WHERE 
        NAL.SKLAD_ID = :L_SKLAD_ID 
 
    UNION 
 
    SELECT 
        CAST (0 AS DOUBLE PRECISION), 
        CAST(0 AS DOUBLE PRECISION), 
        CAST (0 AS DOUBLE PRECISION), 
        SIMPLE.ID, 
        SIMPLE.NAME, 
        SIMPLE.CODE, 
        SIMPLE.USLUGA, 
        SIMPLE.ME_ID, 
        SIMPLE.DEF_SEL_ID, 
        SIMPLE.CENA_PROD, 
        SIMPLE.CENA_EDRO, 
        SIMPLE.LOCK_CENA_PROD, 
        SIMPLE.DDS, 
        SIMPLE.RSN, 
        COALESCE(SIMPLE.RAZ_TIP_ID,0), 
        ME1.NAME, 
        COALESCE(ME1.KOEF,0), 
        SELEKCIQ.NAME, 
        SIMPLE.CENA_PROD, 
        SIMPLE.ME2_ID, 
        ME2.NAME, 
        CAST (0 AS DOUBLE PRECISION), 
        CAST (0 AS DOUBLE PRECISION), 
        COALESCE(DEF_RAZ_SIMPLE.RAZFASOVKA_ID, 0), 
        RAZFASOVKA.KOL, 
        RAZ_ELEMENT.NAME NAME_RAZ_EL, 
        SIMPLE.VAT_GROUP 
    FROM 
        SIMPLE LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
        LEFT JOIN DEF_RAZ_SIMPLE ON DEF_RAZ_SIMPLE.SIMPLE_ID = SIMPLE.ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = DEF_RAZ_SIMPLE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
    WHERE 
        (:P_SEL_SIMPLE LIKE '%,'||SIMPLE.ID||',%') 
        AND NOT SIMPLE."ACTIVE" = '0' 
        AND NOT EXISTS (SELECT NAL.ID FROM NAL WHERE NAL.SIMPLE_ID = SIMPLE.ID AND NAL.SKLAD_ID = :L_SKLAD_ID) 
        AND SIMPLE.ID > -100 
 
    INTO 
        :KOL_NAL,:CENA_SR,:LAST_CENA,:ID,:NAME,:CODE,:USLUGA,:ME_ID,:DEF_SEL_ID,:CENA_PROD, 
        :CENA_EDRO,:LOCK_CENA_PROD,:D_D_S,:RSN,:RAZ_TIP_ID,:ME,:ME_KOEF,:GR_NAME,:CENA_CURRENT, 
        :ME2_ID, :ME2, :KOL_NAL2,:KOL_RZV,:DEF_RAZ_EL,:KOL_RAZ_EL,:NAME_RAZ_EL, :R_VAT_GROUP 
    DO BEGIN 
        IF ((SELECT KLI.CL_ID from KLI WHERE KLI.ID = :P_KLIENT) IS NULL) then 
        BEGIN 
          EXECUTE PROCEDURE GET_CENA_CL_OS(:ID) RETURNING_VALUES :CENA_OS; 
        END 
        ELSE BEGIN 
          SELECT 
            CENA 
          FROM 
            CENOVA_LISTA_EL 
          WHERE 
            CENOVA_LISTA_EL.OPR_ID = (SELECT KLI.CL_ID FROM KLI WHERE KLI.ID = :P_KLIENT) AND 
            CENOVA_LISTA_EL.SIMPLE_ID = :ID 
          INTO :CENA_OS; 
        END 
        --EXECUTE PROCEDURE GET_CENA_CL_OS(:ID) 
        --RETURNING_VALUES :CENA_OS; 
 
        EXECUTE PROCEDURE GET_BTC(:ID,:P_KLIENT, :P_SKLAD) 
        RETURNING_VALUES :BTC; 
 
        BTC_ID = 0; 
        R_FLAG_LOCK = 0; 
 
        IF (:P_BTC = 1) THEN 
            SELECT FIRST 1 
                BCT.ID 
            FROM 
                BONUS_CENA_TOCHKI BCT 
            WHERE 
                BCT.SIMPLE_ID = :ID AND BCT.BONUS_C_T_ID IS NULL AND BCT.ANUL = 0 
                AND (BCT.OTDT <= CURRENT_DATE) AND (CURRENT_DATE <= BCT.DODT) 
            INTO 
                :BTC_ID; 
 
 
        IF (:P_KLIENT = 0) THEN BEGIN 
            FOR SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (2,4,5) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (2,4,5) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            ORDER BY 1 DESC 
            INTO 
                :L_PRIORITET, :L_CENA, :L_OT_TIME, :L_DO_TIME, :L_WEEK, :CL_ID, :R_FLAG_LOCK 
            DO BEGIN 
                IF (L_WEEK IS NOT NULL) THEN BEGIN 
 
                    L_BIT_DEY_WEEK = POWER(2, EXTRACT(WEEKDAY FROM CURRENT_DATE-1)); 
                    IF (L_OT_TIME IS NULL) THEN BEGIN 
                        IF (BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                    ELSE IF ((BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                    THEN BEGIN 
                        CENA_CURRENT = :L_CENA; 
                        R_PRI = :L_DO_TIME - :L_OT_TIME; 
                        LEAVE; 
 
                    END 
                END 
                ELSE IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) THEN BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
                ELSE BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
            END 
        END 
        ELSE BEGIN 
            FOR SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA.OPR_ID, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
            ORDER BY 1 DESC 
            INTO 
                :L_PRIORITET, :L_CENA, :L_OT_TIME, :L_DO_TIME, :L_WEEK, :CL_ID, :R_FLAG_LOCK 
            DO BEGIN 
                IF (L_WEEK IS NOT NULL) THEN BEGIN 
                    L_BIT_DEY_WEEK = POWER(2, EXTRACT (WEEKDAY FROM CURRENT_DATE)); 
 
                    IF (L_OT_TIME IS NULL) THEN BEGIN 
                        IF (BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                    ELSE IF ((BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                    THEN BEGIN 
                        CENA_CURRENT = :L_CENA; 
                        R_PRI = :L_DO_TIME - :L_OT_TIME; 
                        LEAVE; 
                    END 
                END 
                ELSE IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) THEN BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
                ELSE BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
            END 
        END 
 
        R_CENA_VALUTA = NULL; 
        R_VALUTA_ID   = NULL; 
        SELECT 
            VALUTA.ID, 
            VALUTA.KURS 
        FROM 
            VALUTA INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.VALUTA_ID = VALUTA.ID 
        WHERE 
            CENOVA_LISTA.OPR_ID =:CL_ID 
        INTO 
            :R_VALUTA_ID, :L_KURS_VALUTA; 
 
        IF (R_VALUTA_ID IS NOT NULL) THEN BEGIN 
            R_CENA_VALUTA = CENA_CURRENT; 
            CENA_CURRENT = ROUND(CENA_CURRENT * L_KURS_VALUTA,5); 
        END 
 
        SUSPEND; 
        CENA_CURRENT = NULL; 
        R_PRI = NULL; 
    END 
END^


ALTER PROCEDURE GET_CENI_SEL_KONS (
    P_SKLAD INTEGER,
    P_KLIENT INTEGER,
    P_SEL_SIMPLE VARCHAR(3000))
RETURNS (
    KOL_NAL FLOAT,
    CENA_SR DOUBLE PRECISION,
    LAST_CENA DOUBLE PRECISION,
    ID INTEGER,
    CENA_PROD DOUBLE PRECISION,
    KOL_NAL2 DOUBLE PRECISION,
    KOL_RZV DOUBLE PRECISION,
    CENA_CURRENT DOUBLE PRECISION,
    R_PRI DOUBLE PRECISION,
    CENA_OS DOUBLE PRECISION,
    BTC INTEGER,
    R_CENA_VALUTA TYPE OF DOM_CENA)
AS
declare variable L_K_SKLAD_ID integer; 
declare variable L_KOL_OUT double precision; 
declare variable L_KOL_IN double precision; 
declare variable L_KOL_OUT2 double precision; 
declare variable L_KOL_IN2 double precision; 
BEGIN 
  select k_sklad from system  into :l_k_sklad_id; 
 
  FOR 
    select 
        kol_nal, 
        cena_sr , 
        last_cena , 
        id , 
        cena_prod , 
        kol_nal2 , 
        kol_rzv , 
        cena_current, 
        r_pri, 
        cena_os, 
        btc, 
        r_cena_valuta 
    from GET_CENI_SEL(:P_SKLAD,:P_KLIENT,:P_SEL_SIMPLE,0,0) 
    into :KOL_NAL,:CENA_SR,:LAST_CENA,:ID,:CENA_PROD,:KOL_NAL2,:KOL_RZV,:CENA_CURRENT,:R_PRI,:CENA_OS,:btc, :R_CENA_VALUTA 
  do begin 
    if (p_sklad = l_k_sklad_id) then begin 
        select sum(coalesce(out_el.kol,0)), sum(coalesce(out_el2.kol,0)) from out_el 
        join opr on opr.id = out_el.opr_id and opr.kli_id = :p_klient and opr.sklad_id = :p_sklad 
        left join out_el2 on out_el2.out_el_id = out_el.id 
        where 
          simple_id = :id 
        into :l_kol_out, :l_kol_out2; 
 
        select sum(coalesce(in_el.kol,0)), sum(coalesce(in_el2.kol,0)) from in_el 
        join opr on opr.id = in_el.opr_id and opr.kli_id = :p_klient and opr.sklad_id = :p_sklad 
        left join in_el2 on in_el2.in_el_id = in_el.id 
        where 
          simple_id = :id 
        into :l_kol_in,:l_kol_in2; 
 
        KOL_NAL = coalesce(:l_kol_in,0) - coalesce(:l_kol_out,0); 
        KOL_NAL2 = coalesce(:l_kol_in2,0) - coalesce(:l_kol_out2,0); 
    end 
    suspend; 
  end 
END^


ALTER PROCEDURE GET_CENI_SEL_POCKET (
    P_SKLAD TYPE OF DOM_KEY,
    P_KLIENT TYPE OF DOM_KEY,
    P_DATE TYPE OF DOM_DATE,
    P_TIME TYPE OF DOM_TIME)
RETURNS (
    KOL_NAL TYPE OF DOM_KOL,
    LAST_CENA TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_100,
    ME_ID TYPE OF DOM_SMAL_INT,
    RSN CHAR(1),
    ME CHAR(2),
    GR_ID TYPE OF DOM_KEY,
    R_PRI DOUBLE PRECISION,
    CENA_CURRENT TYPE OF DOM_CENA)
AS
DECLARE VARIABLE L_CENA TYPE OF DOM_CENA; 
DECLARE VARIABLE L_OT_TIME TYPE OF DOM_TIME; 
DECLARE VARIABLE L_DO_TIME TYPE OF DOM_TIME; 
DECLARE VARIABLE L_WEEK TYPE OF DOM_INT; 
DECLARE VARIABLE L_PRIORITET TYPE OF DOM_INT; 
DECLARE VARIABLE L_BIT_DEY_WEEK TYPE OF DOM_INT; 
BEGIN 
    FOR SELECT 
        CAST (NAL.KOL_NAL AS DOUBLE PRECISION), 
        CAST(COALESCE(NAL.LAST_CENA,0) AS DOUBLE PRECISION), 
        SIMPLE1.ID, 
        SIMPLE1.NAME, 
        SIMPLE1.CODE, 
        SIMPLE1.ME_ID, 
        SIMPLE1.RSN, 
        ME1.NAME, 
        SIMPLE1.DEF_SEL_ID, 
        SIMPLE1.CENA_PROD 
    FROM 
        NAL INNER JOIN SIMPLE SIMPLE1 ON SIMPLE1.ID = NAL.SIMPLE_ID  AND NOT SIMPLE1."ACTIVE" = '0'  AND SIMPLE1.USLUGA = '0' 
        LEFT JOIN ME ME1 ON ME1.ID = SIMPLE1.ME_ID 
    WHERE 
        NAL.SKLAD_ID = :P_SKLAD 
 
    UNION 
 
    SELECT 
        CAST (0 AS DOUBLE PRECISION), 
        CAST (0 AS DOUBLE PRECISION), 
        SIMPLE.ID, 
        SIMPLE.NAME, 
        SIMPLE.CODE, 
        SIMPLE.ME_ID, 
        SIMPLE.RSN, 
        ME1.NAME, 
        SIMPLE.DEF_SEL_ID, 
        SIMPLE.CENA_PROD 
    FROM 
        SIMPLE LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
    WHERE 
        NOT SIMPLE."ACTIVE" = '0' 
        AND SIMPLE.USLUGA = '0' 
        AND NOT EXISTS (SELECT NAL.ID FROM NAL WHERE NAL.SIMPLE_ID = SIMPLE.ID AND NAL.SKLAD_ID = :P_SKLAD) 
 
    INTO :KOL_NAL, :LAST_CENA, :ID, :NAME, :CODE, :ME_ID, :RSN, :ME, :GR_ID, :CENA_CURRENT 
    DO BEGIN 
        IF (:P_KLIENT = 0) THEN BEGIN 
           FOR  SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (2,4,5) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= :P_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= :P_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (2,4,5) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= :P_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= :P_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE OPR_ID = CENOVA_LISTA_EL.OPR_ID) > 0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            ORDER BY 1 DESC 
            INTO 
                :L_PRIORITET, :L_CENA, :L_OT_TIME,:L_DO_TIME,:L_WEEK 
 
            DO BEGIN 
                IF (L_WEEK IS NOT NULL) THEN BEGIN 
 
                    L_BIT_DEY_WEEK = POWER(2, EXTRACT (WEEKDAY FROM :P_DATE-1)); 
 
                    IF (L_OT_TIME IS NULL) THEN BEGIN 
                        IF (BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                    ELSE BEGIN 
                        IF ((BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND (:L_OT_TIME <= :P_TIME) AND (:P_TIME <= :L_DO_TIME)) THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                END 
                ELSE IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= :P_TIME) AND (:P_TIME <= :L_DO_TIME)) THEN BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
                ELSE BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
            END 
        END 
        ELSE BEGIN 
            FOR SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
            ORDER BY 1 DESC 
            INTO 
                :L_PRIORITET, :L_CENA, :L_OT_TIME, :L_DO_TIME, :L_WEEK 
            DO BEGIN 
                IF (L_WEEK IS NOT NULL) THEN BEGIN 
                    L_BIT_DEY_WEEK = POWER(2, EXTRACT (WEEKDAY FROM :P_DATE-1)); 
 
                    IF (L_OT_TIME IS NULL) THEN BEGIN 
                       IF (BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                    ELSE BEGIN 
                        IF ((BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND (:L_OT_TIME <= :P_TIME) AND (:P_TIME <= :L_DO_TIME)) THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                END 
                ELSE IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= :P_TIME) AND (:P_TIME <= :L_DO_TIME)) THEN BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
                ELSE BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
            END 
        END 
        SUSPEND; 
        CENA_CURRENT = NULL; 
        R_PRI = NULL; 
    END 
END^


ALTER PROCEDURE GET_CENI_SEL_POCKET_SIM_KLIENT (
    P_SKLAD TYPE OF DOM_KEY,
    P_SIMPLE TYPE OF DOM_KEY,
    P_DATE TYPE OF DOM_DATE,
    P_TIME TYPE OF DOM_TIME,
    P_CENA TYPE OF DOM_CENA)
RETURNS (
    CENA_CURRENT TYPE OF DOM_CENA,
    KLIENT TYPE OF DOM_KEY,
    SIMPLE_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_CENA TYPE OF DOM_CENA; 
DECLARE VARIABLE L_OT_TIME TYPE OF DOM_TIME; 
DECLARE VARIABLE L_DO_TIME TYPE OF DOM_TIME; 
DECLARE VARIABLE L_WEEK TYPE OF DOM_INT; 
DECLARE VARIABLE L_PRIORITET TYPE OF DOM_INT; 
DECLARE VARIABLE L_BIT_DEY_WEEK TYPE OF DOM_INT; 
BEGIN 
   FOR SELECT 
        CENOVA_LISTA_EL.SIMPLE_ID, 
        CENOVA_LISTA.PRIORITET, 
        CENOVA_LISTA_EL.CENA, 
        CENOVA_LISTA.OT_TIME, 
        CENOVA_LISTA.DO_TIME, 
        CENOVA_LISTA.WEEK, 
        GET_KLI_SKLAD_NODE.ID 
    FROM 
        CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1, 2, 3,4) 
        AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
        JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID 
        INNER JOIN GET_KLI_SKLAD_NODE(0, :P_SKLAD) ON GET_KLI_SKLAD_NODE.ID = CENOVA_LISTA_KLI.KLI_ID 
    WHERE 
        ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
        AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
        AND  CENOVA_LISTA.OPR_ID = ( 
            SELECT FIRST 1 
                CENOVA_LISTA_KLI.OPR_ID 
            FROM 
                CENOVA_LISTA_KLI INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_KLI.OPR_ID 
            WHERE 
                CENOVA_LISTA_KLI.KLI_ID = GET_KLI_SKLAD_NODE.ID 
                AND CENOVA_LISTA.ACTIVNA = 1 
                AND EXISTS (SELECT CLE.ID FROM CENOVA_LISTA_EL CLE WHERE CLE.SIMPLE_ID = CENOVA_LISTA_EL.SIMPLE_ID AND CLE.OPR_ID = CENOVA_LISTA.OPR_ID) 
            ORDER BY CENOVA_LISTA.PRIORITET DESC) 
    ORDER BY 1 DESC, 2 DESC 
    INTO 
        :SIMPLE_ID, :L_PRIORITET, :L_CENA, :L_OT_TIME, :L_DO_TIME, :L_WEEK, :KLIENT 
    DO BEGIN 
        IF ((L_WEEK IS NOT NULL) AND (L_CENA <> P_CENA)) THEN BEGIN 
            L_BIT_DEY_WEEK = POWER(2, EXTRACT (WEEKDAY FROM :P_DATE-1)); 
 
            IF (L_OT_TIME IS NULL) THEN BEGIN 
                IF (BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    SUSPEND; 
                END 
            END 
            ELSE IF ((BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND (:L_OT_TIME <= :P_TIME) AND (:P_TIME <= :L_DO_TIME)) THEN BEGIN 
                CENA_CURRENT = :L_CENA; 
                SUSPEND; 
 
            END 
        END 
        ELSE IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= :P_TIME) AND (:P_TIME <= :L_DO_TIME) AND (L_CENA <> P_CENA)) THEN BEGIN 
            CENA_CURRENT = :L_CENA; 
            SUSPEND; 
        END 
        ELSE IF (L_CENA <> P_CENA) THEN BEGIN 
            CENA_CURRENT = :L_CENA; 
            SUSPEND; 
        END 
    END 
END ;^


ALTER PROCEDURE GET_CENI_SEL_POS (
    P_SKLAD TYPE OF DOM_KEY,
    P_KLIENT TYPE OF DOM_KEY,
    P_SIMPLE TYPE OF DOM_KEY,
    P_SKLAD_NAL_ID TYPE OF DOM_KEY,
    P_SKLAD_NAL_IDS TYPE OF DOM_CHAR_100)
RETURNS (
    KOL_NAL DOUBLE PRECISION,
    KOL_NAL_OTHER DOUBLE PRECISION,
    CENA_CURRENT DOUBLE PRECISION,
    ID INTEGER,
    NAME VARCHAR(100),
    CODE TYPE OF DOM_CHAR_50,
    USLUGA CHAR(1),
    ME_ID SMALLINT,
    DEF_SEL_ID INTEGER,
    CENA_PROD DOUBLE PRECISION,
    CENA_EDRO DOUBLE PRECISION,
    LOCK_CENA_PROD SMALLINT,
    D_D_S DOUBLE PRECISION,
    RSN CHAR(1),
    RAZ_TIP_ID INTEGER,
    ME CHAR(2),
    ME_IS_BROI INTEGER,
    ME_KOEF INTEGER,
    GR_NAME VARCHAR(50),
    R_PRI DOUBLE PRECISION,
    ME2_ID SMALLINT,
    ME2 CHAR(2),
    KOL_NAL2 DOUBLE PRECISION,
    KOL_RZV DOUBLE PRECISION,
    DEF_RAZ_EL INTEGER,
    NAME_RAZ_EL VARCHAR(30),
    KOL_RAZ_EL INTEGER,
    CENA_OS DOUBLE PRECISION)
AS
declare variable L_CENA type of DOM_CENA; 
declare variable L_OT_TIME type of DOM_TIME; 
declare variable L_DO_TIME type of DOM_TIME; 
declare variable L_WEEK type of DOM_INT; 
declare variable L_PRIORITET type of DOM_INT; 
declare variable L_BIT_DEY_WEEK type of DOM_INT; 
declare variable L_FLAG_LOCK type of DOM_INT; 
BEGIN 
    FOR SELECT 
        IIF(:P_SKLAD_NAL_ID <> 0, 
            (SELECT NAL.KOL_NAL FROM NAL WHERE NAL.SIMPLE_ID = SIMPLE.ID AND NAL.SKLAD_ID = :P_SKLAD_NAL_ID), 
            NULL), 
        IIF(:P_SKLAD_NAL_IDS <> '', 
           (SELECT SUM(NAL.KOL_NAL) FROM NAL WHERE NAL.SIMPLE_ID = SIMPLE.ID AND :P_SKLAD_NAL_IDS CONTAINING ','||NAL.SKLAD_ID||','), 
            NULL), 
        SIMPLE.ID, 
        SIMPLE.NAME, 
        SIMPLE.CODE, 
        SIMPLE.USLUGA, 
        SIMPLE.ME_ID, 
        SIMPLE.DEF_SEL_ID, 
        SIMPLE.CENA_PROD, 
        SIMPLE.CENA_EDRO, 
        SIMPLE.LOCK_CENA_PROD, 
        SIMPLE.DDS AS D_D_S, 
        SIMPLE.RSN, 
        COALESCE(SIMPLE.RAZ_TIP_ID,0), 
        ME1.NAME, 
        ME1.IS_BROI, 
        COALESCE(ME1.KOEF,0), 
        SELEKCIQ.NAME, 
        SIMPLE.CENA_PROD, 
        SIMPLE.ME2_ID, 
        ME2.NAME, 
        0.00, 
        0.00, 
        COALESCE(DEF_RAZ_SIMPLE.RAZFASOVKA_ID, 0), 
        RAZFASOVKA.KOL, 
        RAZ_ELEMENT.NAME NAME_RAZ_EL 
    FROM 
        SIMPLE 
        LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
        LEFT JOIN DEF_RAZ_SIMPLE ON DEF_RAZ_SIMPLE.SIMPLE_ID = SIMPLE.ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = DEF_RAZ_SIMPLE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
    WHERE 
        SIMPLE.ID = :P_SIMPLE AND 
        NOT SIMPLE."ACTIVE" = '0' AND 
        SIMPLE.ID > -100 
 
    INTO :KOL_NAL,:KOL_NAL_OTHER,:ID,:NAME,:CODE,:USLUGA,:ME_ID,:DEF_SEL_ID,:CENA_PROD, 
         :CENA_EDRO,:LOCK_CENA_PROD,:D_D_S,:RSN,:RAZ_TIP_ID,:ME,:ME_IS_BROI, :ME_KOEF,:GR_NAME,:CENA_CURRENT, 
         :ME2_ID, :ME2, :KOL_NAL2,:KOL_RZV,:DEF_RAZ_EL,:KOL_RAZ_EL,:NAME_RAZ_EL 
    DO BEGIN 
        EXECUTE PROCEDURE GET_CENA_CL_OS(:ID) 
        RETURNING_VALUES :CENA_OS; 
 
        IF (:P_KLIENT = 0) THEN BEGIN 
            FOR SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (2,4,5) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (2,4,5) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            ORDER BY 1 DESC 
            INTO 
                :L_PRIORITET, :L_CENA, :L_OT_TIME, :L_DO_TIME, :L_WEEK, :L_FLAG_LOCK 
            DO BEGIN 
                LOCK_CENA_PROD = L_FLAG_LOCK; 
 
                IF (L_WEEK IS NOT NULL) THEN BEGIN 
 
                    L_BIT_DEY_WEEK = POWER(2, EXTRACT(WEEKDAY FROM CURRENT_DATE-1)); 
 
                    IF (L_OT_TIME IS NULL) THEN BEGIN 
                        IF (BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                    ELSE BEGIN 
                        IF ((BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                END 
                ELSE  IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) THEN BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
                ELSE BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
            END 
        END 
        ELSE BEGIN 
            FOR SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL 
                JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK, 
                CENOVA_LISTA_EL.FLAG_LOCK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
            ORDER BY 1 DESC 
            INTO 
                :L_PRIORITET, :L_CENA, :L_OT_TIME, :L_DO_TIME, :L_WEEK, :L_FLAG_LOCK 
            DO BEGIN 
                LOCK_CENA_PROD = L_FLAG_LOCK; 
 
                IF (L_WEEK IS NOT NULL) THEN BEGIN 
                    L_BIT_DEY_WEEK = POWER(2, EXTRACT(WEEKDAY FROM CURRENT_DATE-1)); 
 
                    IF (L_OT_TIME IS NULL) THEN BEGIN 
                        IF (BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                    ELSE IF ((BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                    THEN BEGIN 
                        CENA_CURRENT = :L_CENA; 
                        R_PRI = :L_DO_TIME - :L_OT_TIME; 
                        LEAVE; 
                    END 
                END 
                ELSE IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) THEN BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
                ELSE BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
            END 
        END 
 
        SUSPEND; 
        CENA_CURRENT = NULL; 
        R_PRI = NULL; 
    END 
END^


ALTER PROCEDURE GET_CENI_SHORT (
    P_SKLAD INTEGER,
    P_KLIENT INTEGER)
RETURNS (
    ID INTEGER,
    R_PRI DOUBLE PRECISION,
    CENA_CURRENT DOUBLE PRECISION)
AS
DECLARE VARIABLE L_CENA DOUBLE PRECISION; 
DECLARE VARIABLE L_PROCENT DOUBLE PRECISION; 
DECLARE VARIABLE L_OT_TIME TIME; 
DECLARE VARIABLE L_DO_TIME TIME; 
DECLARE VARIABLE L_WEEK INTEGER; 
DECLARE VARIABLE L_PRIORITET INTEGER; 
DECLARE VARIABLE L_BIT_DEY_WEEK INTEGER; 
BEGIN 
    FOR SELECT DISTINCT 
        SIMPLE.ID, 
        SIMPLE.CENA_PROD AS CENA_CURRENT 
    FROM 
        SIMPLE 
    WHERE 
        NOT SIMPLE."ACTIVE" = '0' 
        AND SIMPLE.ID >-1 
    INTO 
        :ID,:CENA_CURRENT 
    DO BEGIN 
        IF (:P_KLIENT = 0) THEN BEGIN 
            FOR SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (2,4,5) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
                JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            UNION 
 
            SELECT 
                CENOVA_LISTA.PRIORITET, 
                CENOVA_LISTA_EL.CENA, 
                CENOVA_LISTA.OT_TIME, 
                CENOVA_LISTA.DO_TIME, 
                CENOVA_LISTA.WEEK 
            FROM 
                CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID  AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (2,4,5) 
                AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            WHERE 
                ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
                AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
                AND NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD) 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
            ORDER BY 1 DESC 
            INTO 
                :L_PRIORITET, :L_CENA, :L_OT_TIME, :L_DO_TIME, :L_WEEK 
            DO BEGIN 
                IF (L_WEEK IS NOT NULL) THEN BEGIN 
                    L_BIT_DEY_WEEK = POWER(2, EXTRACT(WEEKDAY FROM CURRENT_DATE-1)); 
 
                    IF (L_OT_TIME IS NULL) THEN BEGIN 
                        IF (BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                            CENA_CURRENT = :L_CENA; 
                            R_PRI = :L_DO_TIME - :L_OT_TIME; 
                            LEAVE; 
                        END 
                    END 
                    ELSE IF ((BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                    THEN BEGIN 
                        CENA_CURRENT = :L_CENA; 
                        R_PRI = :L_DO_TIME - :L_OT_TIME; 
                        LEAVE; 
                    END 
                END 
                ELSE IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) THEN BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
                ELSE BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
            END 
        END 
    ELSE BEGIN 
        FOR SELECT 
            CENOVA_LISTA.PRIORITET, 
            CENOVA_LISTA_EL.CENA, 
            CENOVA_LISTA.OT_TIME, 
            CENOVA_LISTA.DO_TIME, 
            CENOVA_LISTA.WEEK 
        FROM 
            CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
            AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
        WHERE 
            ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
            AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
            AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
        UNION 
 
        SELECT 
            CENOVA_LISTA.PRIORITET, 
            CENOVA_LISTA_EL.CENA, 
            CENOVA_LISTA.OT_TIME, 
            CENOVA_LISTA.DO_TIME, 
            CENOVA_LISTA.WEEK 
        FROM 
            CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
            AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
        WHERE 
            ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
            AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
            AND NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
            AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
        UNION 
 
        SELECT 
            CENOVA_LISTA.PRIORITET, 
            CENOVA_LISTA_EL.CENA, 
            CENOVA_LISTA.OT_TIME, 
            CENOVA_LISTA.DO_TIME, 
            CENOVA_LISTA.WEEK 
        FROM 
            CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (1,2) 
            AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            JOIN CENOVA_LISTA_SKLAD ON CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD 
        WHERE 
            ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
            AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
            AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
        UNION 
 
        SELECT 
            CENOVA_LISTA.PRIORITET, 
            CENOVA_LISTA_EL.CENA, 
            CENOVA_LISTA.OT_TIME, 
            CENOVA_LISTA.DO_TIME, 
            CENOVA_LISTA.WEEK 
        FROM 
            CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP IN (3,4) 
            AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
        WHERE 
            ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
            AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
            AND NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
            AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
 
        UNION 
 
        SELECT 
            CENOVA_LISTA.PRIORITET, 
            CENOVA_LISTA_EL.CENA, 
            CENOVA_LISTA.OT_TIME, 
            CENOVA_LISTA.DO_TIME, 
            CENOVA_LISTA.WEEK 
        FROM 
            CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 AND CENOVA_LISTA.TIP = 3 
            AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
            JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT 
        WHERE 
            ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
            AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
            AND NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID = :P_SKLAD AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
            AND CENOVA_LISTA_EL.SIMPLE_ID = :ID 
        ORDER BY 1 DESC 
        INTO 
            :L_PRIORITET, :L_CENA, :L_OT_TIME, :L_DO_TIME, :L_WEEK 
        DO BEGIN 
            IF (L_WEEK IS NOT NULL) THEN BEGIN 
                L_BIT_DEY_WEEK = POWER(2, EXTRACT(WEEKDAY FROM CURRENT_DATE-1)); 
 
                IF (L_OT_TIME IS NULL) THEN BEGIN 
                    IF (BIN_AND(:L_WEEK,:L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) THEN BEGIN 
                        CENA_CURRENT = :L_CENA; 
                        R_PRI = :L_DO_TIME - :L_OT_TIME; 
                        LEAVE; 
                    END 
                END 
                ELSE IF ((BIN_AND(:L_WEEK, :L_BIT_DEY_WEEK) = :L_BIT_DEY_WEEK) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                THEN BEGIN 
                    CENA_CURRENT = :L_CENA; 
                    R_PRI = :L_DO_TIME - :L_OT_TIME; 
                    LEAVE; 
                END 
            END 
            ELSE IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) THEN BEGIN 
                CENA_CURRENT = :L_CENA; 
                R_PRI = :L_DO_TIME - :L_OT_TIME; 
                LEAVE; 
            END 
            ELSE BEGIN 
                CENA_CURRENT = :L_CENA; 
                R_PRI = :L_DO_TIME - :L_OT_TIME; 
                LEAVE; 
            END 
        END 
    END 
    SUSPEND; 
    CENA_CURRENT = NULL; 
    R_PRI = NULL; 
    END 
END^


ALTER PROCEDURE GET_CENI_SUB_PROD (
    P_SKLAD_IDS VARCHAR(200),
    P_KLIENT INTEGER)
RETURNS (
    R_KOL_NAL DOUBLE PRECISION,
    R_CENA_SR DOUBLE PRECISION,
    R_LAST_CENA DOUBLE PRECISION,
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(50),
    R_USLUGA CHAR(1),
    R_ME_ID SMALLINT,
    R_DEF_SEL_ID INTEGER,
    R_CENA_PROD DOUBLE PRECISION,
    R_CENA_EDRO DOUBLE PRECISION,
    R_LOCK_CENA_PROD CHAR(1),
    R_D_D_S DOUBLE PRECISION,
    R_RSN CHAR(1),
    R_RAZ_TIP_ID INTEGER,
    R_ME CHAR(2),
    R_ME_KOEF INTEGER,
    R_GR_NAME VARCHAR(50),
    R_PRI DOUBLE PRECISION,
    R_CENA_CURRENT DOUBLE PRECISION,
    R_SKLAD_ID SMALLINT,
    R_SKLAD_NAME VARCHAR(20),
    R_ME2_ID SMALLINT,
    R_ME2 CHAR(2),
    R_KOL_NAL2 DOUBLE PRECISION,
    CENA_OS DOUBLE PRECISION,
    R_KOL_RZV DOUBLE PRECISION,
    R_IS_BONUS SMALLINT)
AS
declare variable L_COUNT integer; 
BEGIN 
    FOR EXECUTE STATEMENT 
    'SELECT 
        SKLAD.NAME, 
        SKLAD.ID 
    FROM 
        SKLAD 
    WHERE 
        SKLAD.ID IN('|| :P_SKLAD_IDS ||')' 
    INTO 
        :R_SKLAD_NAME,:R_SKLAD_ID 
    DO BEGIN 
        SELECT 
            COUNT(SKLAD_SELEKCIQ_NODE.ID) 
        FROM 
            SKLAD_SELEKCIQ_NODE 
        WHERE 
            SKLAD_SELEKCIQ_NODE.ID_SKLAD = :R_SKLAD_ID 
        INTO 
            :L_COUNT; 
        IF (L_COUNT > 0) THEN 
            FOR SELECT 
                GET_CENI.KOL_NAL, 
                GET_CENI.CENA_SR, 
                GET_CENI.LAST_CENA, 
                GET_CENI.ID, 
                GET_CENI.NAME, 
                GET_CENI.CODE, 
                GET_CENI.USLUGA, 
                GET_CENI.ME_ID, 
                GET_CENI.DEF_SEL_ID, 
                GET_CENI.CENA_PROD, 
                GET_CENI.CENA_EDRO, 
                GET_CENI.LOCK_CENA_PROD, 
                GET_CENI.D_D_S, 
                GET_CENI.RSN, 
                GET_CENI.RAZ_TIP_ID, 
                GET_CENI.ME, 
                GET_CENI.ME_KOEF, 
                GET_CENI.GR_NAME, 
                GET_CENI.R_PRI, 
                GET_CENI.CENA_CURRENT, 
                GET_CENI.ME2_ID, 
                GET_CENI.ME2, 
                GET_CENI.KOL_NAL2, 
                GET_CENI.cena_os, 
                GET_CENI.KOL_RZV, 
                GET_CENI.R_IS_BONUS 
            FROM 
                SKLAD_SELEKCIQ_NODE INNER JOIN SELEKCIQ_SIM_EL ON (SKLAD_SELEKCIQ_NODE.ID_SKLAD = :R_SKLAD_ID AND 
                SKLAD_SELEKCIQ_NODE.ID_SELEKCIQ = SELEKCIQ_SIM_EL.SELEKCIQ_ID) 
                INNER JOIN GET_CENI(:R_SKLAD_ID,:P_KLIENT) ON GET_CENI.ID = SELEKCIQ_SIM_EL.SIMPLE_ID 
            INTO 
                :R_KOL_NAL,:R_CENA_SR,:R_LAST_CENA,:R_ID,:R_NAME,:R_CODE,:R_USLUGA,:R_ME_ID,:R_DEF_SEL_ID, 
                :R_CENA_PROD,:R_CENA_EDRO,:R_LOCK_CENA_PROD,:R_D_D_S,:R_RSN,:R_RAZ_TIP_ID,:R_ME,:R_ME_KOEF, 
                :R_GR_NAME,:R_PRI,:R_CENA_CURRENT,:R_ME2_ID,:R_ME2,:R_KOL_NAL2,:CENA_OS,:R_KOL_RZV,:R_IS_BONUS 
            DO 
                SUSPEND; 
        ELSE 
            FOR SELECT 
                GET_CENI.KOL_NAL, 
                GET_CENI.CENA_SR, 
                GET_CENI.LAST_CENA, 
                GET_CENI.ID, 
                GET_CENI.NAME, 
                GET_CENI.CODE, 
                GET_CENI.USLUGA, 
                GET_CENI.ME_ID, 
                GET_CENI.DEF_SEL_ID, 
                GET_CENI.CENA_PROD, 
                GET_CENI.CENA_EDRO, 
                GET_CENI.LOCK_CENA_PROD, 
                GET_CENI.D_D_S, 
                GET_CENI.RSN, 
                GET_CENI.RAZ_TIP_ID, 
                GET_CENI.ME, 
                GET_CENI.ME_KOEF, 
                GET_CENI.GR_NAME, 
                GET_CENI.R_PRI, 
                GET_CENI.CENA_CURRENT, 
                GET_CENI.ME2_ID, 
                GET_CENI.ME2, 
                GET_CENI.KOL_NAL2, 
                GET_CENI.CENA_OS, 
                GET_CENI.KOL_RZV, 
                GET_CENI.R_IS_BONUS 
            FROM 
                GET_CENI(:R_SKLAD_ID,:P_KLIENT) 
            INTO 
                :R_KOL_NAL,:R_CENA_SR,:R_LAST_CENA,:R_ID,:R_NAME,:R_CODE,:R_USLUGA,:R_ME_ID,:R_DEF_SEL_ID, 
                :R_CENA_PROD,:R_CENA_EDRO,:R_LOCK_CENA_PROD,:R_D_D_S,:R_RSN,:R_RAZ_TIP_ID,:R_ME,:R_ME_KOEF, 
                :R_GR_NAME,:R_PRI,:R_CENA_CURRENT,:R_ME2_ID,:R_ME2,:R_KOL_NAL2,:CENA_OS,:R_KOL_RZV,:R_IS_BONUS 
            DO 
                SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_CENI_TEST (
    P_SKLAD INTEGER,
    P_KLIENT INTEGER,
    P_DAY INTEGER,
    P_DATE DATE,
    P_TIME TIME)
RETURNS (
    ID INTEGER,
    CENA_PROD DOUBLE PRECISION,
    R_PRI INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_CENOVA_LISTA VARCHAR(30),
    R_CODE VARCHAR(50))
AS
DECLARE VARIABLE L_CENA DOUBLE PRECISION; 
DECLARE VARIABLE L_PROCENT DOUBLE PRECISION; 
DECLARE VARIABLE L_OT_DATE DATE; 
DECLARE VARIABLE L_DO_DATE DATE; 
DECLARE VARIABLE L_OT_TIME TIME; 
DECLARE VARIABLE L_DO_TIME TIME; 
DECLARE VARIABLE L_WEEK INTEGER; 
DECLARE VARIABLE L_PRIORITET INTEGER; 
DECLARE VARIABLE L_DAY INTEGER; 
DECLARE VARIABLE L_BIT_DEY_WEEK INTEGER; 
DECLARE VARIABLE L_ID INTEGER; 
BEGIN 
  l_id = null; 
  select first 1 sel_sim_qr.simple_id from sel_sim_qr into :l_id; 
  if (l_id is null) then begin 
    insert into sel_sim_qr(sel_id,simple_id) 
    select cast(-23 as integer), simple.id from simple; 
  end 
 
  FOR 
    SELECT 
        SIMPLE.ID, 
        simple.name, 
        simple.cena_prod, 
        simple.code 
    FROM SIMPLE 
    join sel_sim_qr on SIMPLE.id = sel_sim_qr.simple_id 
    WHERE simple.id > -10 
    INTO :ID,:R_SIMPLE_NAME,:cena_prod,:r_code 
  DO 
  BEGIN 
    IF (:p_klient = 0) THEN BEGIN 
    FOR 
    SELECT 
      cenova_lista.prioritet, 
      cenova_lista_el.cena, 
      cenova_lista_el.procent, 
      cenova_lista.ot_date, 
      cenova_lista.do_date, 
      cenova_lista.ot_time, 
      cenova_lista.do_time, 
      cenova_lista.week, 
      cenova_lista.name 
    FROM cenova_lista_el 
    JOIN cenova_lista ON cenova_lista.opr_id = cenova_lista_el.opr_id 
    JOIN cenova_lista_sklad ON cenova_lista_sklad.opr_id = cenova_lista.opr_id AND cenova_lista_sklad.sklad_id = :p_sklad 
 
    WHERE 
        ((cenova_lista.ot_date <= :P_DATE) OR (cenova_lista.ot_date IS NULL)) AND 
        ((cenova_lista.do_date >= :P_DATE) OR (cenova_lista.do_date IS NULL)) AND 
        cenova_lista.activna = 1 AND 
        cenova_lista.opr_id > -100 AND 
        cenova_lista.tip IN (2,4,5) AND 
        (not exists (select opr_anul.id from opr_anul where opr_anul.an_opr_id = cenova_lista.opr_id)) and 
        cenova_lista_el.simple_id = :id 
    UNION 
    SELECT 
      cenova_lista.prioritet, 
      cenova_lista_el.cena, 
      cenova_lista_el.procent, 
      cenova_lista.ot_date, 
      cenova_lista.do_date, 
      cenova_lista.ot_time, 
      cenova_lista.do_time, 
      cenova_lista.week, 
      cenova_lista.name 
    FROM cenova_lista_el 
    JOIN cenova_lista ON cenova_lista.opr_id = cenova_lista_el.opr_id 
 
    WHERE 
        ((cenova_lista.ot_date <= :P_DATE) OR (cenova_lista.ot_date IS NULL)) AND 
        ((cenova_lista.do_date >= :P_DATE) OR (cenova_lista.do_date IS NULL)) AND 
        cenova_lista.activna = 1 AND 
        cenova_lista.opr_id > -100 AND 
        NOT EXISTS (SELECT cenova_lista_sklad.id FROM cenova_lista_sklad WHERE cenova_lista_sklad.sklad_id = :p_sklad AND cenova_lista_sklad.opr_id = cenova_lista.opr_id) AND 
        cenova_lista.tip IN (2,4,5) AND 
        (not exists (select opr_anul.id from opr_anul where opr_anul.an_opr_id = cenova_lista.opr_id)) and 
        cenova_lista_el.simple_id = :id 
    ORDER BY 1 DESC 
    INTO :l_prioritet, :l_cena,:l_procent,:l_ot_date,:l_do_date,:l_ot_time,:l_do_time,:l_week,:R_CENOVA_LISTA 
    DO BEGIN 
      IF (l_week IS NOT NULL) THEN BEGIN 
        l_day = :p_day; 
        l_bit_dey_week = 0; 
        IF (l_day = 1 ) THEN l_bit_dey_week = 1; 
        ELSE IF (l_day = 2 ) THEN l_bit_dey_week = 2; 
        ELSE IF (l_day = 3 ) THEN l_bit_dey_week = 4; 
        ELSE IF (l_day = 4 ) THEN l_bit_dey_week = 8; 
        ELSE IF (l_day = 5 ) THEN l_bit_dey_week = 16; 
        ELSE IF (l_day = 6 ) THEN l_bit_dey_week = 32; 
        ELSE IF (l_day = 7 ) THEN l_bit_dey_week = 64; 
        IF (l_ot_time IS NULL) THEN BEGIN 
          IF (bin_and(:l_week,:l_bit_dey_week) = :l_bit_dey_week) THEN BEGIN 
            cena_prod = :l_cena; 
            r_pri = :l_prioritet; 
            LEAVE; 
          END 
        END 
        ELSE BEGIN 
          IF ((bin_and(:l_week,:l_bit_dey_week) = :l_bit_dey_week) AND (:l_ot_time <= :P_TIME) AND (:P_TIME <= :l_do_time)) THEN BEGIN 
            cena_prod = :l_cena; 
            r_pri = :l_prioritet; 
            LEAVE; 
          END 
        END 
      END 
      ELSE 
      IF ((:l_ot_time IS NOT NULL) AND (:l_ot_time <= :P_TIME) AND (:P_TIME <= :l_do_time)) THEN BEGIN 
        cena_prod = :l_cena; 
        r_pri = :l_prioritet; 
        LEAVE; 
      END 
      ELSE BEGIN 
        cena_prod = :l_cena; 
        r_pri = :l_prioritet; 
        LEAVE; 
      END 
    END 
    END 
    ELSE BEGIN 
    FOR 
    SELECT 
      cenova_lista.prioritet, 
      cenova_lista_el.cena, 
      cenova_lista_el.procent, 
      cenova_lista.ot_date, 
      cenova_lista.do_date, 
      cenova_lista.ot_time, 
      cenova_lista.do_time, 
      cenova_lista.week, 
      cenova_lista.name 
    FROM cenova_lista_el 
    JOIN cenova_lista ON cenova_lista.opr_id = cenova_lista_el.opr_id 
    JOIN cenova_lista_sklad ON cenova_lista_sklad.opr_id = cenova_lista.opr_id AND cenova_lista_sklad.sklad_id = :p_sklad 
--    JOIN cenova_lista_kli ON cenova_lista_kli.opr_id = cenova_lista.opr_id and cenova_lista_kli.kli_id = :p_klient 
    WHERE 
        ((cenova_lista.ot_date <= :P_DATE) OR (cenova_lista.ot_date IS NULL)) AND 
        ((cenova_lista.do_date >= :P_DATE) OR (cenova_lista.do_date IS NULL)) AND 
        cenova_lista.activna = 1 AND 
        cenova_lista.opr_id > -100 AND 
        cenova_lista.tip IN (1,2) AND 
        (not exists (select opr_anul.id from opr_anul where opr_anul.an_opr_id = cenova_lista.opr_id)) and 
        cenova_lista_el.simple_id = :id 
    UNION 
    SELECT 
      cenova_lista.prioritet, 
      cenova_lista_el.cena, 
      cenova_lista_el.procent, 
      cenova_lista.ot_date, 
      cenova_lista.do_date, 
      cenova_lista.ot_time, 
      cenova_lista.do_time, 
      cenova_lista.week, 
      cenova_lista.name 
    FROM cenova_lista_el 
    JOIN cenova_lista ON cenova_lista.opr_id = cenova_lista_el.opr_id 
    JOIN cenova_lista_kli ON cenova_lista_kli.opr_id = cenova_lista.opr_id and cenova_lista_kli.kli_id = :p_klient 
    WHERE 
        ((cenova_lista.ot_date <= :P_DATE) OR (cenova_lista.ot_date IS NULL)) AND 
        ((cenova_lista.do_date >= :P_DATE) OR (cenova_lista.do_date IS NULL)) AND 
        cenova_lista.activna = 1 AND 
        cenova_lista.opr_id > -100 AND 
        NOT EXISTS (SELECT cenova_lista_sklad.id FROM cenova_lista_sklad WHERE cenova_lista_sklad.sklad_id = :p_sklad AND cenova_lista_sklad.opr_id = cenova_lista.opr_id) AND 
        cenova_lista.tip IN (3,4) AND 
        (not exists (select opr_anul.id from opr_anul where opr_anul.an_opr_id = cenova_lista.opr_id)) and 
        cenova_lista_el.simple_id = :id 
    UNION 
    SELECT 
      cenova_lista.prioritet, 
      cenova_lista_el.cena, 
      cenova_lista_el.procent, 
      cenova_lista.ot_date, 
      cenova_lista.do_date, 
      cenova_lista.ot_time, 
      cenova_lista.do_time, 
      cenova_lista.week, 
      cenova_lista.name 
    FROM cenova_lista_el 
    JOIN cenova_lista ON cenova_lista.opr_id = cenova_lista_el.opr_id 
    JOIN cenova_lista_sklad ON cenova_lista_sklad.opr_id = cenova_lista.opr_id AND cenova_lista_sklad.sklad_id = :p_sklad 
    WHERE 
        ((cenova_lista.ot_date <= :P_DATE) OR (cenova_lista.ot_date IS NULL)) AND 
        ((cenova_lista.do_date >= :P_DATE) OR (cenova_lista.do_date IS NULL)) AND 
        cenova_lista.activna = 1 AND 
        cenova_lista.opr_id > -100 AND 
        cenova_lista.tip IN (1,2) AND 
        (not exists (select opr_anul.id from opr_anul where opr_anul.an_opr_id = cenova_lista.opr_id)) and 
        cenova_lista_el.simple_id = :id 
    UNION 
    SELECT 
      cenova_lista.prioritet, 
      cenova_lista_el.cena, 
      cenova_lista_el.procent, 
      cenova_lista.ot_date, 
      cenova_lista.do_date, 
      cenova_lista.ot_time, 
      cenova_lista.do_time, 
      cenova_lista.week, 
      cenova_lista.name 
    FROM cenova_lista_el 
    JOIN cenova_lista ON cenova_lista.opr_id = cenova_lista_el.opr_id 
--    JOIN cenova_lista_kli ON cenova_lista_kli.opr_id = cenova_lista.opr_id and cenova_lista_kli.kli_id = :p_klient 
    WHERE 
        ((cenova_lista.ot_date <= :P_DATE) OR (cenova_lista.ot_date IS NULL)) AND 
        ((cenova_lista.do_date >= :P_DATE) OR (cenova_lista.do_date IS NULL)) AND 
        cenova_lista.activna = 1 AND 
        cenova_lista.opr_id > -100 AND 
        NOT EXISTS (SELECT cenova_lista_sklad.id FROM cenova_lista_sklad WHERE cenova_lista_sklad.sklad_id = :p_sklad AND cenova_lista_sklad.opr_id = cenova_lista.opr_id) AND 
        cenova_lista.tip IN (1,2) AND 
        (not exists (select opr_anul.id from opr_anul where opr_anul.an_opr_id = cenova_lista.opr_id)) and 
        cenova_lista_el.simple_id = :id 
    UNION 
    SELECT 
      cenova_lista.prioritet, 
      cenova_lista_el.cena, 
      cenova_lista_el.procent, 
      cenova_lista.ot_date, 
      cenova_lista.do_date, 
      cenova_lista.ot_time, 
      cenova_lista.do_time, 
      cenova_lista.week, 
      cenova_lista.name 
    FROM cenova_lista_el 
    JOIN cenova_lista ON cenova_lista.opr_id = cenova_lista_el.opr_id 
    JOIN cenova_lista_kli ON cenova_lista_kli.opr_id = cenova_lista.opr_id and cenova_lista_kli.kli_id = :p_klient 
    WHERE 
        ((cenova_lista.ot_date <= :P_DATE) OR (cenova_lista.ot_date IS NULL)) AND 
        ((cenova_lista.do_date >= :P_DATE) OR (cenova_lista.do_date IS NULL)) AND 
        cenova_lista.activna = 1 AND 
        cenova_lista.opr_id > -100 AND 
        NOT EXISTS (SELECT cenova_lista_sklad.id FROM cenova_lista_sklad WHERE cenova_lista_sklad.sklad_id = :p_sklad AND cenova_lista_sklad.opr_id = cenova_lista.opr_id) AND 
        cenova_lista.tip IN (3) AND 
        (not exists (select opr_anul.id from opr_anul where opr_anul.an_opr_id = cenova_lista.opr_id)) and 
        cenova_lista_el.simple_id = :id 
    ORDER BY 1 DESC 
    INTO :l_prioritet, :l_cena,:l_procent,:l_ot_date,:l_do_date,:l_ot_time,:l_do_time,:l_week,:R_CENOVA_LISTA 
    DO BEGIN 
      IF (l_week IS NOT NULL) THEN BEGIN 
        l_day = :p_day; 
        l_bit_dey_week = 0; 
        IF (l_day = 1 ) THEN l_bit_dey_week = 1; 
        ELSE IF (l_day = 2 ) THEN l_bit_dey_week = 2; 
        ELSE IF (l_day = 3 ) THEN l_bit_dey_week = 4; 
        ELSE IF (l_day = 4 ) THEN l_bit_dey_week = 8; 
        ELSE IF (l_day = 5 ) THEN l_bit_dey_week = 16; 
        ELSE IF (l_day = 6 ) THEN l_bit_dey_week = 32; 
        ELSE IF (l_day = 7 ) THEN l_bit_dey_week = 64; 
        IF (l_ot_time IS NULL) THEN BEGIN 
          IF (bin_and(:l_week,:l_bit_dey_week) = :l_bit_dey_week) THEN BEGIN 
            cena_prod = :l_cena; 
            r_pri = :l_prioritet; 
            LEAVE; 
          END 
        END 
        ELSE BEGIN 
          IF ((bin_and(:l_week,:l_bit_dey_week) = :l_bit_dey_week) AND (:l_ot_time <= :P_TIME) AND (:P_TIME <= :l_do_time)) THEN BEGIN 
            cena_prod = :l_cena; 
            r_pri = :l_prioritet; 
            LEAVE; 
          END 
        END 
      END 
      ELSE 
      IF ((:l_ot_time IS NOT NULL) AND (:l_ot_time <= :P_TIME) AND (:P_TIME <= :l_do_time)) THEN BEGIN 
        cena_prod = :l_cena; 
        r_pri = :l_prioritet; 
        LEAVE; 
      END 
      ELSE BEGIN 
        cena_prod = :l_cena; 
        r_pri = :l_prioritet; 
        LEAVE; 
      END 
    END 
    END 
    SUSPEND; 
    cena_prod = NULL; 
    r_pri = NULL; 
    R_CENOVA_LISTA = NULL; 
  END 
 
  if (l_id is null) then begin 
    delete from sel_sim_qr where sel_sim_qr.sel_id = -23; 
  end 
 
END;^


ALTER PROCEDURE GET_CENOVILISTI (
    FAKT INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    TIP SMALLINT,
    OPR_ID INTEGER)
AS
BEGIN 
  if (fakt = 0) then begin 
    FOR 
      SELECT 
        cenova_lista.id, 
        cenova_lista.name, 
        cenova_lista.tip, 
        cenova_lista.opr_id 
      FROM cenova_lista 
      where 
        not exists (select opr_anul.id from opr_anul where opr_anul.an_opr_id = cenova_lista.opr_id) 
 
      union 
      SELECT 
        CAST(-1 AS INTEGER) AS  id, 
        CAST(' <Доставна-Последна>' AS VARCHAR(50)) AS name, 
        CAST(0 AS smallint) AS tip, 
        CAST(0 AS INTEGER) AS opr_id 
      FROM system 
 
      union 
      SELECT 
        CAST(-2 AS INTEGER) AS  id, 
        CAST(' <Доставна-Средно претеглена>' AS VARCHAR(50)) AS name, 
        CAST(0 AS smallint) AS tip, 
        CAST(0 AS INTEGER) AS opr_id 
      FROM system 
      union 
 
      SELECT 
        CAST(-5 AS INTEGER) AS  id, 
        CAST(' <Доставна-Последна с ДДС>' AS VARCHAR(50)) AS name, 
        CAST(0 AS smallint) AS tip, 
        CAST(0 AS INTEGER) AS opr_id 
      FROM system 
 
      ORDER BY 2 
      INTO :id,:name,:tip,:opr_id 
    DO 
      suspend; 
  end 
  else begin 
    for 
      SELECT 
        CAST(-3 AS INTEGER) AS  id, 
        CAST(' <Доставна-Последна фактурна>' AS VARCHAR(50)) AS name, 
        CAST(0 AS smallint) AS tip, 
        CAST(0 AS INTEGER) AS opr_id 
      FROM system 
 
      union 
      SELECT 
        CAST(-4 AS INTEGER) AS  id, 
        CAST(' <Доставна-Средно претеглена фактурна>' AS VARCHAR(50)) AS name, 
        CAST(0 AS smallint) AS tip, 
        CAST(0 AS INTEGER) AS opr_id 
      FROM system 
      ORDER BY 2 
      INTO :id,:name,:tip,:opr_id 
    do 
      suspend; 
  end 
END^


ALTER PROCEDURE GET_CENOVILISTI_KLIENT (
    P_KLI_ID INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(30),
    R_VALUTA_ID TYPE OF DOM_KEY_SMALL)
AS
BEGIN 
    IF (P_KLI_ID = 0) THEN BEGIN 
        FOR 
            SELECT 
                CENOVA_LISTA.ID, 
                CENOVA_LISTA.NAME, 
                CENOVA_LISTA.VALUTA_ID 
            FROM 
                CENOVA_LISTA 
            WHERE 
                CENOVA_LISTA.TIP IN (2,4,5) AND 
                (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) AND 
                CENOVA_LISTA.ID > -100 AND CENOVA_LISTA.ACTIVNA = 1 
            INTO :ID, :NAME, :R_VALUTA_ID 
        DO BEGIN 
            SUSPEND; 
        END 
    END 
    ELSE BEGIN 
        FOR 
            SELECT 
                CENOVA_LISTA.ID, 
                CENOVA_LISTA.NAME, 
                CENOVA_LISTA.VALUTA_ID 
            FROM 
                CENOVA_LISTA JOIN CENOVA_LISTA_KLI ON CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_KLI.KLI_ID = :P_KLI_ID AND CENOVA_LISTA.ID > -100 AND CENOVA_LISTA.ACTIVNA = 1 
            WHERE 
                (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
 
            UNION 
            SELECT 
                CENOVA_LISTA.ID, 
                CENOVA_LISTA.NAME, 
                CENOVA_LISTA.VALUTA_ID 
            FROM 
                CENOVA_LISTA 
            WHERE 
                CENOVA_LISTA.TIP IN (1,2) AND 
                (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) AND 
                CENOVA_LISTA.ID > -100 AND CENOVA_LISTA.ACTIVNA = 1 
            INTO :ID, :NAME, :R_VALUTA_ID 
        DO BEGIN 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_CL_IMPORT (
    P_KLI_ID_S VARCHAR(10000))
RETURNS (
    R_OPR_ID INTEGER)
AS
declare variable L_ID_KLI_S varchar(10000); 
declare variable L_ID_KLI integer; 
BEGIN 
    FOR SELECT 
        OPR_ID 
    FROM 
        CENOVA_LISTA 
    INTO 
        :R_OPR_ID 
    DO BEGIN 
        L_ID_KLI_S = ''; 
        FOR SELECT 
            KLI_ID 
        FROM 
            CENOVA_LISTA_KLI 
        WHERE 
            OPR_ID = :R_OPR_ID 
        ORDER BY KLI_ID 
        INTO 
            :L_ID_KLI 
        DO BEGIN 
            L_ID_KLI_S = L_ID_KLI_S||L_ID_KLI||','; 
        END 
        IF (L_ID_KLI_S = P_KLI_ID_S) THEN BEGIN 
            SUSPEND; 
            LEAVE; 
        END 
    END 
 
    R_OPR_ID = 0; 
    SUSPEND; 
END^


ALTER PROCEDURE GET_CODE_NUM
RETURNS (
    NOM INTEGER)
AS
declare variable ST DOM_CHAR_50; 
declare variable II integer; 
begin 
 for select 
  simple.code 
from simple 
where 
  simple.code is not null 
  into :st 
do begin 
  EXECUTE PROCEDURE is_number(st) returning_values :ii; 
  if (ii=1) then begin 
    nom = cast(st as integer); 
    suspend; 
  end 
 end 
end^


ALTER PROCEDURE GET_COMMENTS (
    TABLE_NODE_NAME VARCHAR(30),
    TABLE_NODE_OBJECT_NAME VARCHAR(30),
    TABLE_NODE_OBJECT_ID INTEGER)
RETURNS (
    ID INTEGER,
    COMMENT_ID INTEGER,
    OBJECT_ID INTEGER,
    DATE_MODIFIED TIMESTAMP,
    NOTE BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    USER_ID INTEGER,
    USER_NAME VARCHAR(30),
    HEADER VARCHAR(50))
AS
DECLARE VARIABLE TMP VARCHAR(50); 
begin   
  /* Procedure Text */ 
  IF (TABLE_NODE_OBJECT_ID = -1) THEN EXIT; 
    
  TMP = '';  
  IF ((TABLE_NODE_OBJECT_ID IS NOT NULL) AND (TABLE_NODE_OBJECT_ID <> 0)) THEN  
    TMP = ' WHERE '||TABLE_NODE_OBJECT_NAME||' = '||TABLE_NODE_OBJECT_ID;  
  
  FOR EXECUTE STATEMENT   
    'SELECT '||TABLE_NODE_NAME||'.ID, COMMENT_ID, '||TABLE_NODE_OBJECT_NAME||   
    ', COMMENTS.DATE_MODIFIED, COMMENTS.NOTE, COMMENTS.USER_ID, COMMENTS.HEADER, "USER"."NAME" '|| 
    'FROM '||TABLE_NODE_NAME||   
    ' INNER JOIN COMMENTS ON ('||TABLE_NODE_NAME||'.COMMENT_ID = COMMENTS.ID)'||   
    ' LEFT JOIN "USER" ON COMMENTS.USER_ID = "USER".ID'||TMP  
  INTO   
    :ID,:COMMENT_ID, :OBJECT_ID, :DATE_MODIFIED, :NOTE, :USER_ID, :HEADER, :USER_NAME 
  DO   
  suspend;   
end^


ALTER PROCEDURE GET_COURSE_AMBALAJ (
    P_COURSE_ID INTEGER)
RETURNS (
    R_OPR_ID TYPE OF DOM_KEY,
    R_SUMA TYPE OF DOM_SUMA,
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_KOL_KK TYPE OF DOM_KOL,
    R_KOL_BEER TYPE OF DOM_KOL,
    R_KOL_KEG TYPE OF DOM_KOL,
    R_KOL_19L TYPE OF DOM_KOL,
    R_KOL_PEPSI TYPE OF DOM_KOL,
    R_KOL_OBK TYPE OF DOM_KOL,
    R_KOL_CO2 TYPE OF DOM_KOL,
    KOL_GAZBOT TYPE OF DOM_KOL,
    R_KOL_KK075 TYPE OF DOM_KOL)
AS
BEGIN 
   FOR 
        SELECT 
            COURSES_OPR_NODE.OPR_ID AS OPR_ID, 
            OPR.SUMA AS suma, 
            KLI.NAME AS CONTRAGENT 
        FROM 
            COURSES_OPR_NODE INNER JOIN OPR ON OPR.ID = COURSES_OPR_NODE.OPR_ID 
            INNER JOIN KLI ON OPR.KLI_ID = KLI.ID 
        WHERE 
            COURSES_OPR_NODE.COURSE_ID = :P_COURSE_ID 
        INTO :R_OPR_ID, :R_SUMA, :R_KLI_NAME 
    DO BEGIN 
        SELECT 
            sum(KOL_KK) AS KOL_KK, 
            sum(KOL_BEER) AS KOL_BEER, 
            sum(KOL_KEG) AS KOL_KEG, 
            sum(KOL_19L) AS KOL_19L, 
            sum(KOL_PEPSI) AS KOL_PEPSI, 
            sum(KOL_OBK) AS KOL_OBK, 
            sum(KOL_CO2) AS KOL_CO2, 
            sum(KOL_GAZBOT) AS KOL_GAZBOT, 
            sum(KOL_KK075) AS KOL_KK075 
        from 
        ( 
            SELECT 
                OPR_AMBALAJ_NODE.OPR_PROD_ID AS OPR_ID, 
                SIMPLE.NAME_SHORT, 
                IIF(SIMPLE.NAME_SHORT = cast('КК' as VARCHAR(10)), OUT_EL.KOL, 0) AS KOL_KK, 
                IIF(SIMPLE.NAME_SHORT = cast('Бира' as VARCHAR(10)), OUT_EL.KOL, 0) AS KOL_BEER, 
                IIF(SIMPLE.NAME_SHORT = cast('КЕГ' as VARCHAR(10)), OUT_EL.KOL, 0) AS KOL_KEG, 
                IIF(SIMPLE.NAME_SHORT = cast('19л.' as VARCHAR(10)), OUT_EL.KOL, 0) AS KOL_19L, 
                IIF(SIMPLE.NAME_SHORT = cast('Пепси' as VARCHAR(10)), OUT_EL.KOL, 0) AS KOL_PEPSI, 
                IIF(SIMPLE.NAME_SHORT = CAST('Об. К' as VARCHAR(10)), OUT_EL.KOL, 0) AS KOL_OBK, 
                IIF(SIMPLE.NAME_SHORT = cast('CO2' as VARCHAR(10)), OUT_EL.KOL, 0) AS KOL_CO2, 
                IIF(SIMPLE.NAME_SHORT = cast('Газ. бут' as VARCHAR(10)), OUT_EL.KOL, 0) AS KOL_GAZBOT, 
                IIF(SIMPLE.NAME_SHORT = cast('КК 0.75' as VARCHAR(10)), OUT_EL.KOL, 0) AS KOL_KK075 
            FROM 
                OPR_AMBALAJ_NODE INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OPR_AMBALAJ_NODE.OPR_AMBALAJ_ID 
                INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
            WHERE 
                OPR_AMBALAJ_NODE.OPR_PROD_ID =:R_OPR_ID 
        ) 
        INTO :R_KOL_KK, :R_KOL_BEER, :R_KOL_KEG, :R_KOL_19L, :R_KOL_PEPSI, :R_KOL_OBK, R_KOL_CO2, KOL_GAZBOT, R_KOL_KK075; 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_DATA_RET_PROD_POCKET (
    P_KLI_ID INTEGER,
    P_SKLAD_ID SMALLINT,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_DATE DATE)
RETURNS (
    R_OUT_EL_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_SUMA_PROD DOUBLE PRECISION)
AS
declare variable L_OUT_EL_ID integer; 
declare variable L_KOL_OUT double precision; 
declare variable L_KOL_RET double precision; 
declare variable L_CENA double precision; 
BEGIN 
/*ТЪРСИ ЕЛЕМЕНТИ ОТ ПРОДАЖБА ОТГОВАРЯЩИ НА ПОДАДЕНИТЕ ПАРАМЕТРИ ПРИ ВРЪЩАНЕ НА СТОКА ОТ КЛИЕНТ 
ПРИ РАЗНАСЯНЕ НА ОТЧЕТ ОТ ПОКЕТ. АКО НЕ НАМЕРИ ЕЛЕМЕНТ ОТ ПРОДАЖБА ОТГОВАРЯЩ НА ТЕЗИ УСЛОВИЯ 
ВРЪЩАНИЯ РЕЗУЛТАТ Е 0.*/ 
 
    --ТЪРСИМ ВСИЧКИ ЕЛЕМЕНТИ ОТ ПРОДАЖБА ОТГОВАРЯЩИ НА ВХОДНИТЕ ПАРАМЕТРИ*/ 
    FOR SELECT 
        OUT_EL.ID, 
        OUT_EL.KOL, 
        ROUND(OUT_EL.SUMA / OUT_EL.KOL,5) 
    FROM 
        OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.OPR_TIP IN (2,34) 
    WHERE 
        OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
        AND OPR.SKLAD_ID = :P_SKLAD_ID 
        AND ((COALESCE(OPR.KLI_ID,0) = :P_KLI_ID) OR (:P_KLI_ID = -1)) 
        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OUT_EL.OPR_ID) 
        AND OPR.OPR_DATE <= :P_DATE 
    ORDER BY OPR.OPR_DATE DESC, OPR.ID DESC 
    INTO 
        :L_OUT_EL_ID,:L_KOL_OUT,:L_CENA 
    DO IF (P_KOL > 0.00) THEN BEGIN 
        --ЗА ВСЕКИ ЕЛЕМЕНТ НАМИРАМ КОЛИЧЕСТВОТО ВЪРНАТА ПО-РАНО СТОКА 
        SELECT 
            COALESCE(SUM(IN_EL.KOL),0) 
        FROM 
            OPR_RAZPAD_NODE ORN INNER JOIN IN_EL ON ORN.OUT_EL_ID = :L_OUT_EL_ID 
            AND ORN.IN_EL_ID = IN_EL.ID 
        INTO 
            :L_KOL_RET; 
 
        L_KOL_OUT = ROUND(L_KOL_OUT - L_KOL_RET,5); 
        --АКО Е ОСТАНАЛО КОЛ ЗА ВРЪЩАНЕ ОТ ТОЗИ ЕЛЕМЕНТ НА ПРОДАЖБА 
        IF (L_KOL_OUT > 0.00) THEN BEGIN 
            IF (L_KOL_OUT >= P_KOL) THEN 
                L_KOL_OUT = P_KOL; 
 
            P_KOL = ROUND(P_KOL - L_KOL_OUT,5); 
            R_KOL = L_KOL_OUT; 
            R_SUMA_PROD = ROUND(R_KOL * L_CENA,2); 
            R_OUT_EL_ID = L_OUT_EL_ID; 
            SUSPEND; 
        END 
    END 
 
    --МИНАЛИ СА ВСИЧКИ ЕЛЕМЕНТИ ОТ ПРОДАЖБА И Е ОСТАНАЛО НЕРАЗПРЕДЕЛЕНО КОЛ 
    --ВРЪЩАМ ОСТАТЪКА ОТ НЕГО И 0 ЗА ЕЛ. ЗА ДА СЕ ИНДИКИРА КАТО ГРЕШКА И ДА СЕ ЗНАЕ КОЛКО Е ОСТНАЛО 
    --НЕРАЗПРЕДЕЛЕНО 
    IF (P_KOL > 0.00) THEN BEGIN 
        R_OUT_EL_ID = 0; 
        R_KOL = P_KOL; 
        R_SUMA_PROD = 0.00; 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_DEF_DOSTKLI (
    P_KLI INTEGER,
    P_OPR_ID INTEGER,
    P_SKLAD_ID VARCHAR(3000),
    P_BARCODE TYPE OF DOM_SMAL_INT,
    P_SHOW_IZL TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SKLADID INTEGER,
    R_SIMPLEID INTEGER,
    R_SIMPLENAME VARCHAR(100),
    R_CODE DOM_CHAR_50,
    R_KOLKRIMIN DOUBLE PRECISION,
    R_KOLKRIMAX DOUBLE PRECISION,
    R_ME CHAR(2),
    R_MEID INTEGER,
    R_CENA_CL DOUBLE PRECISION,
    R_DDS DECIMAL(4,2),
    R_GRNAME VARCHAR(100),
    R_MEKOEF SMALLINT,
    R_BAR_CODE VARCHAR(13),
    R_KLINAME VARCHAR(100),
    R_SKLAD_NAME VARCHAR(20),
    R_CODE2 TYPE OF DOM_CHAR_50,
    R_KOL_NAL TYPE OF DOM_KOL,
    R_KOL_RZV TYPE OF DOM_KOL,
    R_LAST_CENA TYPE OF DOM_CENA)
AS
declare variable L_SYSTEM_SKLAD_ID type of DOM_KEY; 
BEGIN 
    SELECT SYSTEM.H_SKLAD FROM SYSTEM INTO :L_SYSTEM_SKLAD_ID; 
    FOR SELECT 
        SKLAD.ID, 
        SKLAD.NAME 
    FROM 
        SKLAD 
    WHERE 
        SKLAD.ID <> :L_SYSTEM_SKLAD_ID 
        AND (:P_SKLAD_ID LIKE '%,'||SKLAD.ID||',%') 
    INTO 
        :R_SKLADID, :R_SKLAD_NAME 
    DO BEGIN 
        FOR SELECT DISTINCT 
            SIMPLE.ID, 
            SIMPLE.NAME, 
            SIMPLE.CODE, 
            SIMPLE.KOL_KRI_MIN, 
            SIMPLE.KOL_KRI_MAX, 
            ME.NAME, 
            SIMPLE.ME_ID, 
            (SELECT CENA FROM CENOVA_LISTA_EL WHERE CENOVA_LISTA_EL.SIMPLE_ID= SIMPLE.ID AND CENOVA_LISTA_EL.OPR_ID = :P_OPR_ID), 
            SIMPLE.DDS, 
            SELEKCIQ.NAME, 
            COALESCE(ME.KOEF,0), 
            (SELECT FIRST 1 BAR."BARCODE"  FROM  BARCODE BAR WHERE BAR.SIMPLE_ID= SIMPLE.ID), 
            KLI.NAME, 
            SIMPLE.CODE2 
          FROM 
            SIMPLE 
            INNER JOIN KLI ON KLI.ID = SIMPLE.DEF_DOST_KLI_ID AND KLI.ID = :P_KLI 
            LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
            LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
          WHERE 
            SIMPLE.DEF_DOST_KLI_ID = :P_KLI AND 
            NOT SIMPLE."ACTIVE" = '0' AND 
            NOT SIMPLE.USLUGA = '1' 
 
          INTO :R_SIMPLEID,:R_SIMPLENAME,:R_CODE,:R_KOLKRIMIN,:R_KOLKRIMAX,:R_ME,:R_MEID,:R_CENA_CL, 
            :R_DDS,:R_GRNAME,:R_MEKOEF,:R_BAR_CODE,:R_KLINAME,:R_CODE2 
        DO BEGIN 
            IF (P_BARCODE = 1) THEN 
            SELECT FIRST 1 
                BAR."BARCODE" 
            FROM 
                BARCODE BAR 
            WHERE 
                BAR.SIMPLE_ID =:R_SIMPLEID 
            INTO :R_BAR_CODE; 
 
            R_KOL_NAL = NULL; 
            R_LAST_CENA = NULL; 
            R_KOL_RZV = NULL; 
 
            SELECT 
                ROUND(IIF(:P_SHOW_IZL = 1, NAL.KOL_IZL, NAL.KOL_NAL),5) as KOL_NAL, 
                NAL.LAST_CENA, 
                NAL.KOL_RZV 
            FROM 
                NAL 
            WHERE 
                NAL.SIMPLE_ID =:R_SIMPLEID AND NAL.SKLAD_ID =:R_SKLADID 
            INTO :R_KOL_NAL, :R_LAST_CENA, :R_KOL_RZV; 
 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_DIST_HISTORY (
    P_FROM_DATE DATE,
    P_FILTER_KLI VARCHAR(10000),
    P_FILTER_DATE VARCHAR(100),
    P_FILTER_OBEKT VARCHAR(10000))
RETURNS (
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_KLI_CODE VARCHAR(15),
    R_SUMA_NACH_SALDO DOUBLE PRECISION,
    R_SUMA_NACH_DUE DOUBLE PRECISION,
    R_SUMA_NACH_PAY DOUBLE PRECISION,
    R_SUMA_DUE DOUBLE PRECISION,
    R_SUMA_PAY DOUBLE PRECISION,
    R_SUMA_KR_SALDO DOUBLE PRECISION,
    R_KLI_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(50),
    R_SUMA_DDS DOUBLE PRECISION,
    R_SUMA_TOTAL_DUE DOUBLE PRECISION)
AS
DECLARE VARIABLE L_SUMA_TEMP DOUBLE PRECISION; 
BEGIN 
/*V.2*/ 
 
    FOR EXECUTE STATEMENT 'SELECT 
        KLI.ID, 
        KLI.NAME, 
        KLI.CODE, 
        FIRMI.NAME_FAK 
    FROM 
        KLI LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
    WHERE 
        EXISTS(SELECT OPR.ID FROM OPR WHERE OPR.KLI_ID = KLI.ID AND  OPR.OPR_TIP IN (15, 16) 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)) ' 
        || :P_FILTER_KLI || 
    ' ORDER BY UPPER(KLI.NAME) ' 
 
    INTO 
      :R_KLI_ID,:R_KLI_NAME,:R_KLI_CODE,:R_NAME_FAK 
    DO BEGIN 
      R_KLI_COMMENT = NULL; 
         
      SELECT FIRST 1 
          COMMENTS.NOTE 
      FROM 
          COMMENTS INNER JOIN COMMENT_KLI_NODE ON COMMENT_KLI_NODE.COMMENT_ID = COMMENTS.ID 
      WHERE 
          COMMENT_KLI_NODE.KLI_ID = :R_KLI_ID 
      ORDER BY 
          COMMENT_KLI_NODE.ID DESC 
      INTO :R_KLI_COMMENT; 
 
      IF (P_FROM_DATE IS NULL) THEN BEGIN 
          R_SUMA_NACH_SALDO = 0; 
          R_SUMA_NACH_DUE = 0; 
          R_SUMA_NACH_PAY = 0; 
      END 
      ELSE BEGIN 
          SELECT 
              COALESCE(SUM(OPR.SUMA),0) 
          FROM 
              OPR INNER JOIN PARI_DIST ON OPR.ID = PARI_DIST.OPR_ID 
          WHERE 
              OPR.OPR_TIP = 15 
              AND OPR.KLI_ID = :R_KLI_ID 
              AND OPR.OPR_DATE < :P_FROM_DATE 
              AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
          INTO 
              :R_SUMA_NACH_DUE; 
 
          SELECT 
              COALESCE(SUM(OPR.SUMA),0) 
          FROM 
              OPR 
          WHERE 
              OPR.OPR_TIP = 16 
              AND OPR.KLI_ID = :R_KLI_ID 
              AND OPR.OPR_DATE < :P_FROM_DATE 
              AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
          INTO 
             :R_SUMA_NACH_PAY; 
 
          R_SUMA_NACH_SALDO = ROUNDD(R_SUMA_NACH_DUE - R_SUMA_NACH_PAY); 
        END 
 
        R_SUMA_DUE = 0; 
        EXECUTE STATEMENT 
          'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
          FROM 
            OPR INNER JOIN PARI_DIST ON OPR.ID = PARI_DIST.OPR_ID 
          WHERE 
            OPR.OPR_TIP = 15 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)' 
        INTO 
            :R_SUMA_DUE; 
 
        R_SUMA_PAY = 0; 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR 
        WHERE 
            OPR.OPR_TIP = 16 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)' 
        INTO 
            :R_SUMA_PAY; 
 
        --R_SUMA_PAY = R_SUMA_PAY + 1000; 
 
        R_SUMA_TOTAL_DUE = ROUNDD(R_SUMA_DUE); 
 
        R_SUMA_KR_SALDO = ROUNDD(R_SUMA_NACH_SALDO + R_SUMA_TOTAL_DUE - R_SUMA_PAY); 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_DOC_NOM
RETURNS (
    R_NOM INTEGER)
AS
BEGIN 
  R_NOM = GEN_ID(GEN_DOC_NUM, 1); 
 
  SUSPEND; 
END^


ALTER PROCEDURE GET_DOST_CENA_PROD (
    P_OPR_ID INTEGER,
    P_CENOVA_LISTA INTEGER,
    P_TIP INTEGER)
RETURNS (
    R_SUMA DOUBLE PRECISION)
AS
declare variable L_SIMPLE_ID integer; 
declare variable L_KOL double precision; 
declare variable L_CENA double precision; 
declare variable L_CENOVA_LISTA_ID integer; 
BEGIN 
    R_SUMA = 0; 
 
    IF (P_CENOVA_LISTA = -1) THEN 
        SELECT CENOVA_LISTA.OPR_ID FROM CENOVA_LISTA WHERE CENOVA_LISTA.DEF = 1 INTO :L_CENOVA_LISTA_ID; 
    ELSE 
        L_CENOVA_LISTA_ID =:P_CENOVA_LISTA; 
 
    FOR 
        SELECT 
            IN_EL.SIMPLE_ID, 
            IN_EL.KOL 
        FROM 
            IN_EL 
        WHERE 
            IN_EL.OPR_ID =:P_OPR_ID 
        INTO :L_SIMPLE_ID, :L_KOL 
 
 
        DO BEGIN 
            L_CENA = NULL; 
            /*SELECT 
                CENOVA_LISTA_EL.CENA 
            FROM 
                CENOVA_LISTA_EL 
            WHERE 
                CENOVA_LISTA_EL.SIMPLE_ID =:L_SIMPLE_ID 
                AND CENOVA_LISTA_EL.OPR_ID =:L_CENOVA_LISTA_ID  */ 
            EXECUTE PROCEDURE GET_DOST_PROD_CENA(:L_SIMPLE_ID,:P_OPR_ID,:L_CENOVA_LISTA_ID,:P_TIP) RETURNING_VALUES (:L_CENA); 
 
            /*IF (L_CENA IS NULL) THEN BEGIN 
                SELECT 
                    CENOVA_LISTA_EL.CENA 
                FROM 
                    CENOVA_LISTA_EL 
                WHERE 
                    CENOVA_LISTA_EL.SIMPLE_ID =:L_SIMPLE_ID 
                    AND CENOVA_LISTA_EL.OPR_ID =:L_CENOVA_LISTA_ID 
                INTO :L_CENA; 
            END  */ 
 
            R_SUMA = R_SUMA + ROUNDD(L_CENA * L_KOL); 
        END 
END^


ALTER PROCEDURE GET_DOST_HISTORY (
    P_FROM_DATE DATE,
    P_FILTER_KLI VARCHAR(10000),
    P_FILTER_DATE VARCHAR(100),
    P_DDS_FAK INTEGER,
    P_TIP_FILTER SMALLINT,
    P_DDS DOUBLE PRECISION)
RETURNS (
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_KLI_CODE VARCHAR(15),
    R_SUMA_NACH_SALDO DOUBLE PRECISION,
    R_SUMA_NACH_DUE DOUBLE PRECISION,
    R_SUMA_NACH_PAY DOUBLE PRECISION,
    R_SUMA_DUE DOUBLE PRECISION,
    R_SUMA_PAY DOUBLE PRECISION,
    R_SUMA_KR_SALDO DOUBLE PRECISION,
    R_KLI_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(100),
    R_SUMA_DDS DOUBLE PRECISION,
    R_SUMA_TOTAL_DUE DOUBLE PRECISION)
AS
declare variable L_SUMA_TEMP double precision; 
declare variable L_TEMP_DDS double precision; 
BEGIN 
/*V.4*/ 
    FOR EXECUTE STATEMENT 'SELECT 
        KLI.ID, 
        KLI.NAME, 
        KLI.CODE, 
        FIRMI.NAME_FAK 
    FROM 
        KLI LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
    WHERE 
        EXISTS(SELECT OPR.ID FROM OPR WHERE OPR.KLI_ID = KLI.ID AND  OPR.OPR_TIP IN (1, 7, 13, 27, 30, 37, 50, 55, 56) 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)) ' 
        || :P_FILTER_KLI || 
    ' ORDER BY UPPER(KLI.NAME) ' 
 
    INTO 
        :R_KLI_ID,:R_KLI_NAME,:R_KLI_CODE,:R_NAME_FAK 
    DO BEGIN 
        R_KLI_COMMENT = NULL; 
 
        SELECT FIRST 1 
            COMMENTS.NOTE 
        FROM 
            COMMENTS INNER JOIN COMMENT_KLI_NODE ON COMMENT_KLI_NODE.COMMENT_ID = COMMENTS.ID 
        WHERE 
            COMMENT_KLI_NODE.KLI_ID = :R_KLI_ID 
        ORDER BY 
            COMMENT_KLI_NODE.ID DESC 
        INTO :R_KLI_COMMENT; 
 
        IF (P_FROM_DATE IS NULL) THEN BEGIN 
            R_SUMA_NACH_SALDO = 0; 
            R_SUMA_NACH_DUE = 0; 
            R_SUMA_NACH_PAY = 0; 
        END 
        ELSE BEGIN 
            R_SUMA_NACH_SALDO = 0; 
            R_SUMA_NACH_DUE = 0; 
            R_SUMA_NACH_PAY = 0; 
 
            /*СУМАТА НА ДОСТАВКИТЕ*/ 
            R_SUMA_NACH_DUE = 0; 
            SELECT 
                COALESCE(SUM(SUMI.SUMA),0) 
            FROM 
                OPR 
                INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 1 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND :P_TIP_FILTER IN (0,1) 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            INTO 
                :R_SUMA_NACH_DUE; 
 
            IF (P_DDS_FAK = 1) THEN BEGIN 
            /*И СУМАТА НА ДДС ОТ ФАКТУРИ ДАВАТ ЗАДЪЛЖЕНИЯТА*/ 
                L_SUMA_TEMP = 0; 
                SELECT 
                    COALESCE(SUM(FAK_IN.DDS), 0) 
                FROM 
                    OPR INNER JOIN FAK_IN ON OPR.ID = FAK_IN.OPR_ID 
                WHERE 
                    OPR.OPR_TIP = 13 
                    AND FAK_IN.TIP = 0 
                    AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                    AND OPR.KLI_ID = :R_KLI_ID 
                    AND OPR.OPR_DATE < :P_FROM_DATE 
                    AND :P_TIP_FILTER IN (0,1) 
                INTO 
                    :L_SUMA_TEMP; 
 
                R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE + L_SUMA_TEMP); 
 
 
                /*- ДДС ОТ КРЕДИТНИТЕ ИЗВЕСТИЯ*/ 
                L_SUMA_TEMP = 0; 
                SELECT 
                    COALESCE(SUM(FAK_IN.DDS), 0) 
                FROM 
                    OPR INNER JOIN FAK_IN ON OPR.ID = FAK_IN.OPR_ID 
                WHERE 
                    OPR.OPR_TIP = 37 
                    AND FAK_IN.TIP = 0 
                    AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                    AND OPR.KLI_ID = :R_KLI_ID 
                    AND OPR.OPR_DATE < :P_FROM_DATE 
                    AND :P_TIP_FILTER IN (0,1) 
                INTO 
                    :L_SUMA_TEMP; 
 
                R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE - L_SUMA_TEMP); 
 
            END 
 
            /*СУМАТА НА ВЪРНАТА СТОКА*/ 
            L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR 
            WHERE 
                OPR.OPR_TIP = 27 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND :P_TIP_FILTER IN (0,1) 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE - L_SUMA_TEMP); 
 
            /*СУМАТА НА ВЪРНАТА СТОКА КИ*/ 
            L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(FAK_IN.SUMA),0) 
            FROM 
                OPR INNER JOIN FAK_IN ON FAK_IN.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 37 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND :P_TIP_FILTER IN (0,1) 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE - L_SUMA_TEMP); 
 
            L_SUMA_TEMP = 0; 
            SELECT 
               COALESCE(SUM(SUMI.SUMA),0) 
            FROM 
               OPR INNER JOIN KI_DOST_SUMA ON OPR.ID = KI_DOST_SUMA.KI_OPR_ID 
               INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
               OPR.OPR_TIP = 50 
               AND OPR.KLI_ID = :R_KLI_ID 
               AND OPR.OPR_DATE < :P_FROM_DATE 
               AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
               AND :P_TIP_FILTER IN (0,1) 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE - L_SUMA_TEMP); 
 
 
            /* СУМА ОТ ВЗЕМАНЕ НА АМБАЛАЖ */ 
            L_SUMA_TEMP = 0; 
            SELECT 
                -COALESCE(SUM(SUMI.SUMA), 0) 
            FROM 
                OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 55 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND :P_TIP_FILTER IN (0,2) 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE - L_SUMA_TEMP); 
 
 
            /* СУМА ОТ ВРЪЩАНЕ АМБАЛАЖ КЪМ ДОСТАВЧИК */ 
            L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(SUMI.SUMA), 0) 
            FROM 
                OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 56 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND :P_TIP_FILTER IN (0,2) 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE - L_SUMA_TEMP); 
 
            /*СУМАТА ОТ ПЛАЩАНИЯТА*/ 
            L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR 
            WHERE 
                OPR.OPR_TIP = 7 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND :P_TIP_FILTER IN (0,1) 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_PAY = L_SUMA_TEMP; 
 
            /*+ СУМАТА ОТ ПЛАТЕНИ ВЕДНАГА ДОСТАВКИ*/ 
            L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(SUMI.SUMA),0) 
            FROM 
                OPR INNER JOIN "IN" ON "IN".OPR_ID = OPR.ID 
                INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 1 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (("IN".PAY_TIP = 0) OR ("IN".PAY_TIP = 2)) 
                AND :P_TIP_FILTER IN (0,1) 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_PAY = ROUNDD(R_SUMA_NACH_PAY + L_SUMA_TEMP); 
 
            IF (P_DDS_FAK = 1) THEN BEGIN 
                /*И СУМАТА ОТ ПЛАТЕНИ ВЕДНАГА ДДС-ТА НА ВХОДЯЩИ ФАКТУРИ ДАВАТ 
                ПЛАТЕНИТЕ СУМИ. РАЗЛИКАТА М/У ДВЕТЕ СУМИ ДАВА НАЧАЛНОТО САЛДО*/ 
                L_SUMA_TEMP = 0; 
                SELECT 
                    COALESCE(SUM(FAK_IN.DDS),0) 
                FROM 
                    OPR INNER JOIN FAK_IN ON FAK_IN.OPR_ID = OPR.ID 
                WHERE 
                    OPR.OPR_TIP = 13 
                    AND OPR.KLI_ID = :R_KLI_ID 
                    AND OPR.OPR_DATE < :P_FROM_DATE 
                    AND FAK_IN.TIP = 0 
                    AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                    AND ((FAK_IN.PAY_TIP_DDS = 0) OR (FAK_IN.PAY_TIP_DDS = 2)) 
                    AND :P_TIP_FILTER IN (0,1) 
                INTO 
                    :L_SUMA_TEMP; 
 
 
                R_SUMA_NACH_PAY = ROUNDD(R_SUMA_NACH_PAY + L_SUMA_TEMP); 
            END 
 
            /*СУМАТА ОТ ПЛАЩАНИЯТА ВРЪЩАНЕ НА СТОКА*/ 
            L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR 
            WHERE 
                OPR.OPR_TIP = 30 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND :P_TIP_FILTER IN (0,1) 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_PAY = ROUNDD(R_SUMA_NACH_PAY -  L_SUMA_TEMP); 
 
            /*СУМАТА ОТ ПЛАТЕНИ ВЕДНАГА ВРЪЩАНИЯ НА СТОКА*/ 
            L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR INNER JOIN RET_STOKA_DOST ON RET_STOKA_DOST.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 27 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ((RET_STOKA_DOST.PAY_TIP = 0) OR (RET_STOKA_DOST.PAY_TIP = 2)) 
                AND :P_TIP_FILTER IN (0,1) 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_PAY = ROUNDD(R_SUMA_NACH_PAY - L_SUMA_TEMP); 
 
            /*СУМАТА ОТ ПЛАТЕНИ ВЕДНАГА ВРЪЩАНИЯ НА СТОКА КИ*/ 
            L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR INNER JOIN RET_STOKA_DOST_KI ON RET_STOKA_DOST_KI.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 37 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ((RET_STOKA_DOST_KI.PAY_TIP = 0) OR (RET_STOKA_DOST_KI.PAY_TIP = 2)) 
                AND :P_TIP_FILTER IN (0,1) 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_PAY = ROUNDD(R_SUMA_NACH_PAY - L_SUMA_TEMP); 
 
 
            R_SUMA_NACH_SALDO = ROUNDD(R_SUMA_NACH_DUE - R_SUMA_NACH_PAY); 
        END 
 
        R_SUMA_DUE = 0; 
        EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(SUMI.SUMA),0) 
            FROM 
                OPR INNER JOIN "IN" ON OPR.ID = "IN".OPR_ID 
                INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 1 
                AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ' || :P_TIP_FILTER || ' IN (0,1)' 
        INTO 
            :R_SUMA_DUE; 
 
        R_SUMA_DDS = 0; 
        IF (P_DDS_FAK = 1) THEN BEGIN 
            EXECUTE STATEMENT 
                'SELECT 
                    COALESCE(SUM(FAK_IN.DDS), 0) 
                FROM 
                    OPR INNER JOIN FAK_IN ON FAK_IN.OPR_ID = OPR.ID 
                WHERE 
                    OPR.OPR_TIP = 13 
                    AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                    ' AND FAK_IN.TIP = 0 
                    AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                    AND ' || :P_TIP_FILTER || ' IN (0,1)' 
 
            INTO 
                :R_SUMA_DDS; 
 
            L_TEMP_DDS = 0; 
            EXECUTE STATEMENT 
                'SELECT 
                    COALESCE(SUM(FAK_IN.DDS), 0) 
                FROM 
                    OPR INNER JOIN FAK_IN ON FAK_IN.OPR_ID = OPR.ID 
                WHERE 
                    OPR.OPR_TIP = 37 
                    AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                    ' AND FAK_IN.TIP = 0 
                    AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                    AND ' || :P_TIP_FILTER || ' IN (0,1)' 
            INTO 
                :L_TEMP_DDS; 
 
            L_TEMP_DDS = COALESCE(L_TEMP_DDS,0.00); 
 
            R_SUMA_DDS = ROUNDD(R_SUMA_DDS - L_TEMP_DDS); 
 
        END 
        ELSE BEGIN 
            R_SUMA_DDS = ROUNDD(R_SUMA_DUE - ROUNDD(R_SUMA_DUE / :P_DDS)); 
            R_SUMA_DUE = ROUNDD(R_SUMA_DUE / :P_DDS); 
        END 
 
        /*ВРЪЩАНЕ НА СТОКА*/ 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR INNER JOIN RET_STOKA_DOST ON OPR.ID = RET_STOKA_DOST.OPR_ID 
            WHERE 
                OPR.OPR_TIP = 27 
                AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ' || :P_TIP_FILTER || ' IN (0,1)' 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_DUE = ROUNDD(R_SUMA_DUE - L_SUMA_TEMP); 
 
        /*ВРЪЩАНЕ НА СТОКА КИ*/ 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
            'SELECT 
                --COALESCE(SUM(FAK_IN.SUMA),0) 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR INNER JOIN RET_STOKA_DOST_KI ON OPR.ID = RET_STOKA_DOST_KI.OPR_ID 
                INNER JOIN FAK_IN ON FAK_IN.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 37 
                AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ' || :P_TIP_FILTER || ' IN (0,1)' 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_DUE = ROUNDD(R_SUMA_DUE - L_SUMA_TEMP); 
 
        /*КРЕДИТНО ИЗВЕСТИЕ ЗА СУМА*/ 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(SUMI.SUMA),0) 
            FROM 
                OPR INNER JOIN KI_DOST_SUMA ON OPR.ID = KI_DOST_SUMA.KI_OPR_ID 
                INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 50 
                AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ' || :P_TIP_FILTER || ' IN (0,1)' 
 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_DUE = ROUNDD(R_SUMA_DUE - L_SUMA_TEMP); 
 
         /* СУМА ОТ ВЗЕМАНЕ НА АМБАЛАЖ */ 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
            'SELECT 
                -COALESCE(SUM(SUMI.SUMA), 0) 
            FROM 
                OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 55 
                AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                  AND ' || :P_TIP_FILTER || ' IN (0,2)' 
 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_DUE = ROUNDD(R_SUMA_DUE - L_SUMA_TEMP); 
 
 
        /* СУМА ОТ ВРЪЩАНЕ НА АМБАЛАЖ */ 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(SUMI.SUMA), 0) 
            FROM 
                OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 56 
                AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ' || :P_TIP_FILTER || ' IN (0,2)' 
 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_DUE = ROUNDD(R_SUMA_DUE - L_SUMA_TEMP); 
 
        R_SUMA_TOTAL_DUE = ROUNDD(R_SUMA_DUE + R_SUMA_DDS); 
 
        R_SUMA_PAY = 0; 
        EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR 
            WHERE 
                OPR.OPR_TIP = 7 
                AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ' || :P_TIP_FILTER || ' IN (0,1)' 
 
        INTO 
            :R_SUMA_PAY; 
 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(SUMI.SUMA),0) 
            FROM 
                OPR LEFT JOIN "IN" ON OPR.ID = "IN".OPR_ID 
                INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 1 
                AND "IN".PAY_TIP IN (0, 2) 
                AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ' || :P_TIP_FILTER || ' IN (0,1)' 
 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_PAY = ROUNDD(R_SUMA_PAY + L_SUMA_TEMP); 
 
        IF (P_DDS_FAK = 1) THEN BEGIN 
            L_SUMA_TEMP = 0; 
            EXECUTE STATEMENT 
                'SELECT 
                    COALESCE(SUM(FAK_IN.DDS),0) 
                FROM 
                    OPR INNER JOIN FAK_IN ON OPR.ID = FAK_IN.OPR_ID 
                WHERE 
                    OPR.OPR_TIP = 13 
                    AND FAK_IN.PAY_TIP_DDS IN (0, 2) 
                    AND FAK_IN.TIP = 0 
                    AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                    ' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                      AND ' || :P_TIP_FILTER || ' IN (0,1)' 
 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_PAY = ROUNDD(R_SUMA_PAY + L_SUMA_TEMP); 
 
            L_SUMA_TEMP = 0; 
            EXECUTE STATEMENT 
                'SELECT 
                    COALESCE(SUM(FAK_IN.DDS),0) 
                FROM 
                    OPR INNER JOIN FAK_IN ON OPR.ID = FAK_IN.OPR_ID 
                WHERE 
                    OPR.OPR_TIP = 37 
                    AND FAK_IN.PAY_TIP_DDS IN (0, 2) 
                    AND FAK_IN.TIP = 0 
                    AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                    ' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                      AND ' || :P_TIP_FILTER || ' IN (0,1)' 
 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_PAY = ROUNDD(R_SUMA_PAY - L_SUMA_TEMP); 
        END 
 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR 
            WHERE 
                OPR.OPR_TIP = 30 
                AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                  AND ' || :P_TIP_FILTER || ' IN (0,1)' 
 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_PAY = ROUNDD(R_SUMA_PAY - L_SUMA_TEMP); 
 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR LEFT JOIN RET_STOKA_DOST ON OPR.ID = RET_STOKA_DOST.OPR_ID 
            WHERE 
                OPR.OPR_TIP = 27 
                AND RET_STOKA_DOST.PAY_TIP IN (0, 2) 
                AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                  AND ' || :P_TIP_FILTER || ' IN (0,1)' 
 
        INTO 
            :L_SUMA_TEMP; 
 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(FAK_IN.SUMA),0) 
            FROM 
                OPR INNER JOIN RET_STOKA_DOST_KI ON OPR.ID = RET_STOKA_DOST_KI.OPR_ID 
                INNER JOIN FAK_IN ON FAK_IN.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 37 
                AND RET_STOKA_DOST_KI.PAY_TIP IN (0, 2) 
                AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                  AND ' || :P_TIP_FILTER || ' IN (0,1)' 
 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_PAY = ROUNDD(R_SUMA_PAY - L_SUMA_TEMP); 
 
        R_SUMA_KR_SALDO = ROUNDD(R_SUMA_NACH_SALDO + R_SUMA_TOTAL_DUE - R_SUMA_PAY); 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_DOST_PROD_CENA (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_CL_OPR_ID INTEGER,
    P_TIP DOM_SMAL_INT)
RETURNS (
    R_CENA_PROD DOUBLE PRECISION)
AS
declare variable L_DATE_TIME timestamp; 
declare variable L_CL_ID integer; 
BEGIN 
    SELECT 
        OPR.DATETIME 
    FROM 
        OPR 
    WHERE 
        OPR.ID =:P_OPR_ID 
    INTO :L_DATE_TIME; 
 
    IF (P_TIP = 0) THEN BEGIN 
        SELECT 
            CENOVA_LISTA_EL.CENA 
        FROM 
            CENOVA_LISTA_EL 
        WHERE 
            CENOVA_LISTA_EL.OPR_ID =IIF(:P_CL_OPR_ID = -1,(SELECT CENOVA_LISTA.OPR_ID FROM CENOVA_LISTA WHERE CENOVA_LISTA.DEF = 1), :P_CL_OPR_ID) 
            AND CENOVA_LISTA_EL.SIMPLE_ID =:P_SIMPLE_ID 
        INTO :R_CENA_PROD; 
    END 
    ELSE BEGIN 
        SELECT FIRST 1 
            CENOVA_LISTA_HISTORY.CENA_OLD 
        FROM 
            CENOVA_LISTA_HISTORY 
        WHERE 
            CENOVA_LISTA_HISTORY.SIMPLE_ID =:P_SIMPLE_ID AND DATEADD(MINUTE,-2,CENOVA_LISTA_HISTORY.DT) /*CENOVA_LISTA_HISTORY.DT*/ >=:L_DATE_TIME AND 
            CENOVA_LISTA_HISTORY.CL_EL_ID = IIF(:P_CL_OPR_ID = -1,(SELECT CENOVA_LISTA.OPR_ID FROM CENOVA_LISTA WHERE CENOVA_LISTA.DEF = 1), :P_CL_OPR_ID) 
        ORDER BY CENOVA_LISTA_HISTORY.DT ASC 
        INTO :R_CENA_PROD; 
 
        IF (R_CENA_PROD IS NULL) THEN BEGIN 
            SELECT 
                CENOVA_LISTA_EL.CENA 
            FROM 
                CENOVA_LISTA_EL 
            WHERE 
                CENOVA_LISTA_EL.OPR_ID =IIF(:P_CL_OPR_ID = -1,(SELECT CENOVA_LISTA.OPR_ID FROM CENOVA_LISTA WHERE CENOVA_LISTA.DEF = 1), :P_CL_OPR_ID) 
                AND CENOVA_LISTA_EL.SIMPLE_ID =:P_SIMPLE_ID 
            INTO :R_CENA_PROD; 
        END 
    END 
    SUSPEND; 
END^


ALTER PROCEDURE GET_DOST_SKLAD_NODE (
    P_TIP_NODE SMALLINT,
    P_SKLAD_ID INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(100))
AS
declare variable l_id integer; 
declare variable l_name varchar(100) character set win1251; 
declare variable l_empty smallint; 
begin  
if (p_tip_node = 0) then  
begin  
l_empty = 0;  
for select id,  
       kli.name  
  from kli  
 where exists (select kli_sklad_node.sklad_id from kli_sklad_node where kli_sklad_node.kli_id =kli.id and kli_sklad_node.sklad_id =:p_sklad_id)  
 and KLI.dostav = 1 
 
 union 
 
 select id,  
       kli.name  
 from kli 
 where not exists (select kli_sklad_node.sklad_id from kli_sklad_node where kli_sklad_node.kli_id =kli.id) 
 and KLI.dostav = 1  
  order by 2 
  into :l_id, :l_name  
do  
begin  
  id = l_id;  
  name = l_name;  
  l_empty = 1;  
  suspend;  
  end  
 end  
  
else  
begin  
for SELECT  
    KLI.ID,  
    KLI.NAME  
FROM  
    KLI   
WHERE  
    KLI.DOSTAV=1  
ORDER BY 2  
into :l_id, :l_name  
do  
begin  
 id = l_id;  
 name = l_name;  
 suspend;  
  end  
 end  
if (l_empty = 0) then  
  begin  
   for select get_dost_sklad_node.id,  
              get_dost_sklad_node.name  
   from get_dost_sklad_node(1,0)  
   into :id, :name  
   do  
    suspend;  
  END  
  
end^


ALTER PROCEDURE GET_DOSTAVKA (
    ID INTEGER,
    P_CL_ID INTEGER,
    P_TIP INTEGER,
    P_CL_2_ID TYPE OF DOM_KEY)
RETURNS (
    ME_LONG VARCHAR(15),
    BAR_CODE VARCHAR(13),
    CODE VARCHAR(50),
    NAME VARCHAR(100),
    KOL DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    ME CHAR(2),
    KOL_RAZ DOUBLE PRECISION,
    NAME_RAZ VARCHAR(30),
    NOM_DOK VARCHAR(100),
    IN_EL_ID INTEGER,
    ME2 CHAR(2),
    KOL2 DOUBLE PRECISION,
    CODE2 TYPE OF DOM_CHAR_50,
    TEMPERATURA VARCHAR(20),
    SUMA_CL DOUBLE PRECISION,
    SKLAD_NAME VARCHAR(30),
    LAST_CENA DOUBLE PRECISION,
    R_CENA DOUBLE PRECISION,
    R_CENA_S_DDS DOUBLE PRECISION,
    R_DDS DOUBLE PRECISION,
    R_CENA_CL DOUBLE PRECISION,
    R_CENA_BEZ_DDS DOUBLE PRECISION,
    R_SROK DATE,
    R_CENA_CL_2 TYPE OF DOM_CENA,
    R_TEXT_ADDR TYPE OF DOM_CHAR_50,
    R_PN TYPE OF DOM_CHAR_1000)
AS
declare variable L_SIMPLE_ID integer; 
declare variable L_CENA double precision; 
declare variable GODNOST smallint; 
declare variable L_NOM varchar(20); 
declare variable L_TIP_DDS integer; 
declare variable L_CENA_CL double precision; 
declare variable L_SKLAD_ID type of DOM_KEY_SMALL; 
BEGIN 
    SELECT 
        FIRST 1 LOG.TIP_CENI 
    FROM 
        LOG_CENI_DDS LOG 
    WHERE 
        LOG.OPR_ID < :ID AND LOG.TIP_DDS = IIF(COALESCE((SELECT OPR.SKLAD_ID FROM OPR WHERE OPR.ID = :ID),0) = (SELECT FIRST 1 SYSTEM.H_SKLAD FROM SYSTEM),2,0) 
    ORDER BY LOG.OPR_ID DESC, LOG.ID DESC 
    INTO :L_TIP_DDS; 
 
    FOR SELECT 
        IN_EL.ID, 
        IN_EL.KOL, 
        IN_EL.SUMA_FR, 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        SIMPLE.GODNOST, 
        ME1.NAME, 
        IN_EL_RAZ_NODE.KOL, 
        RAZ_ELEMENT.NAME, 
        SIMPLE.ID, 
        ME2.NAME, 
        IN_EL2.KOL, 
        (SELECT FIRST 1 BAR."BARCODE" FROM BARCODE BAR WHERE BAR.SIMPLE_ID = SIMPLE.ID), 
        ME1.NAME_LONG, 
        SIMPLE.CODE2, 
        SIMPLE.temperatura, 
        SKLAD.NAME, 
        dost_ceni.LAST_CENA, 
        CASE WHEN IN_EL.KOL <> 0 THEN IN_EL.SUMA_FR/IN_EL.KOL ELSE NULL END, 
        SIMPLE.DDS, 
        SKLAD.ID 
    FROM 
        IN_EL INNER JOIN SIMPLE ON (IN_EL.OPR_ID = :ID AND IN_EL.SIMPLE_ID = SIMPLE.ID) 
        INNER JOIN OPR ON OPR.ID =:ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
        LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN IN_EL_RAZ_NODE ON IN_EL_RAZ_NODE.IN_EL_ID = IN_EL.ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = IN_EL_RAZ_NODE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZFASOVKA.RAZ_ELEMENT_ID = RAZ_ELEMENT.ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN IN_EL2 ON IN_EL2.IN_EL_ID = IN_EL.ID 
        LEFT JOIN DOST_CENI ON DOST_CENI.IN_EL_ID = IN_EL.ID 
 
 
    UNION ALL 
 
    SELECT 
        IN_EL.ID, 
        IN_EL.KOL, 
        IN_EL.SUMA_FR, 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        SIMPLE.GODNOST, 
        ME1.NAME, 
        CAST(0 AS DOUBLE PRECISION), 
        CAST('' AS VARCHAR(30)), 
        SIMPLE.ID, 
        ME2.NAME, 
        IN_EL2.KOL, 
        (SELECT FIRST 1 BAR."BARCODE" FROM BARCODE BAR WHERE BAR.SIMPLE_ID = SIMPLE.ID), 
        ME1.NAME_LONG, 
        SIMPLE.CODE2, 
        SIMPLE.temperatura, 
        SKLAD.NAME, 
        DOST_CENI.LAST_CENA, 
        CASE WHEN IN_EL.KOL <> 0 THEN IN_EL.SUMA_FR/IN_EL.KOL ELSE NULL END, 
        SIMPLE.DDS, 
        SKLAD.ID 
    FROM 
        DOST_NODE INNER JOIN IN_EL ON (DOST_NODE.DOST_ID = :ID AND IN_EL.OPR_ID = DOST_NODE.RAZ_DOST_ID) 
        LEFT JOIN SIMPLE ON IN_EL.SIMPLE_ID = SIMPLE.ID 
        LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN IN_EL2 ON IN_EL2.IN_EL_ID = IN_EL.ID 
        INNER JOIN OPR ON OPR.ID = DOST_NODE.RAZ_DOST_ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
        left join dost_ceni on dost_ceni.IN_EL_ID = in_el.ID 
 
 
    UNION ALL 
 
    SELECT 
        CAST(0 AS INTEGER), 
        OLD_IN_EL.KOL, 
        OLD_IN_EL.SUMA_FR, 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        SIMPLE.GODNOST, 
        ME1.NAME, 
        CAST(0 AS DOUBLE PRECISION), 
        CAST('' AS VARCHAR(30)), 
        SIMPLE.ID, 
        ME2.NAME, 
        OLD_IN_EL.KOL2, 
        (SELECT FIRST 1 BAR."BARCODE" FROM BARCODE BAR WHERE BAR.SIMPLE_ID = SIMPLE.ID), 
        ME1.NAME_LONG, 
        SIMPLE.CODE2, 
        SIMPLE.temperatura, 
        SKLAD.NAME, 
        dost_ceni.LAST_CENA, 
        CASE WHEN OLD_IN_EL.KOL <> 0 THEN OLD_IN_EL.SUMA_FR/OLD_IN_EL.KOL ELSE NULL END, 
        SIMPLE.DDS, 
        SKLAD.ID 
    FROM 
        OLD_IN_EL INNER JOIN SIMPLE ON OLD_IN_EL.SIMPLE_ID = SIMPLE.ID and old_in_el.OPR_ID = :ID 
        LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        INNER JOIN OPR ON OPR.ID =:ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
        left JOIN DOST_CENI ON DOST_CENI.IN_EL_ID = OLD_IN_EL.ID 
 
    ORDER BY 1 
    INTO 
        :IN_EL_ID,:KOL,:SUMA,:CODE,:NAME,:GODNOST,:ME,:KOL_RAZ,:NAME_RAZ, :L_SIMPLE_ID, :ME2, :KOL2, :BAR_CODE, :ME_LONG, :code2, :TEMPERATURA, :SKLAD_NAME, :LAST_CENA, :L_CENA,:R_DDS, :L_SKLAD_ID 
    DO BEGIN 
        R_CENA = L_CENA; 
 
        IF (P_CL_ID > 0) then 
        BEGIN 
            IF (P_TIP = 3) THEN 
                EXECUTE PROCEDURE GET_CENA_PRODUCT(:L_SIMPLE_ID,:L_SKLAD_ID) RETURNING_VALUES(L_CENA_CL); 
            ELSE 
                EXECUTE PROCEDURE GET_CENA_CL(:P_CL_ID,:L_SIMPLE_ID) RETURNING_VALUES(L_CENA_CL); 
 
            SUMA_CL = ROUNDD(L_CENA_CL * KOL); 
            R_CENA_CL = L_CENA_CL; 
        END ELSE 
        BEGIN 
            IF (P_TIP = 3) THEN 
                EXECUTE PROCEDURE GET_CENA_PRODUCT(:L_SIMPLE_ID,:L_SKLAD_ID) RETURNING_VALUES(L_CENA_CL); 
            ELSE 
                EXECUTE PROCEDURE GET_CENA_CL_OS(:L_SIMPLE_ID) RETURNING_VALUES(L_CENA_CL); 
 
            SUMA_CL = ROUNDD(L_CENA_CL * KOL); 
            R_CENA_CL = L_CENA_CL; 
        END 
 
        IF (:P_CL_2_ID > 0) then 
        BEGIN 
            IF (P_TIP = 3) THEN 
                EXECUTE PROCEDURE GET_CENA_PRODUCT(:L_SIMPLE_ID,:L_SKLAD_ID) RETURNING_VALUES(:R_CENA_CL_2); 
            ELSE 
                EXECUTE PROCEDURE GET_CENA_CL(:P_CL_2_ID,:L_SIMPLE_ID) RETURNING_VALUES(:R_CENA_CL_2); 
        END ELSE 
        BEGIN 
            IF (P_TIP = 3) THEN 
                EXECUTE PROCEDURE GET_CENA_PRODUCT(:L_SIMPLE_ID,:L_SKLAD_ID) RETURNING_VALUES(:R_CENA_CL_2); 
            ELSE 
                EXECUTE PROCEDURE GET_CENA_CL_OS(:L_SIMPLE_ID) RETURNING_VALUES(L_CENA_CL); 
        END 
 
        IF (P_TIP = 1) THEN 
        BEGIN 
            SUMA = SUMA_CL; 
            R_CENA = L_CENA_CL; 
        END 
 
       IF (L_TIP_DDS = 0) THEN 
       BEGIN 
            R_CENA_BEZ_DDS = R_CENA; 
            R_CENA_S_DDS = ROUND5((R_CENA * R_DDS)/100 + R_CENA); 
       END 
       IF (L_TIP_DDS = 1) THEN 
       BEGIN 
            R_CENA_BEZ_DDS = ROUND5(R_CENA /(1+ R_DDS/100)); 
            R_CENA_S_DDS = R_CENA; 
       END 
 
 
        NOM_DOK = ''; 
        IF (GODNOST > 0 ) THEN BEGIN 
            L_NOM = ''; 
            FOR SELECT DISTINCT 
                DVSK_EL.NOM_DOK 
            FROM 
                DVSK_EL 
                INNER JOIN PARTIDA_IN_EL_NODE ON PARTIDA_IN_EL_NODE.IN_EL_ID =:IN_EL_ID 
                INNER JOIN PARTIDA_EL_NODE ON PARTIDA_EL_NODE.PARTIDA_ID = PARTIDA_IN_EL_NODE.PARTIDA_NODE_ID 
                INNER JOIN PARTIDA_NAL ON (PARTIDA_NAL.ID = PARTIDA_EL_NODE.PARTIDA_ID AND PARTIDA_NAL.ELEMENT_ID = DVSK_EL.PARTIDA_EL_ID) 
            INTO 
                :L_NOM 
            DO BEGIN 
                NOM_DOK = NOM_DOK ||:L_NOM||', '; 
            END 
 
 
        END 
        SELECT DISTINCT 
            PE.SROK, 
            CAST(LIST(SERIAL_NUM.SN) AS DOM_CHAR_1000) as sn 
        FROM 
            IN_EL INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
            INNER JOIN PARTIDA_IN_EL_NODE PIEN ON PIEN.IN_EL_ID = IN_EL.ID 
            INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIEN.PARTIDA_NODE_ID 
            INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
            INNER JOIN PARTIDA_EL PE ON PE.ID = PN.ELEMENT_ID 
            LEFT JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PE.ID 
        WHERE 
            IN_EL.ID = :IN_EL_ID 
        group by 1 
 
        INTO :R_SROK, R_PN; 
 
        SELECT 
            SIMPLE_SKLAD_KOD.TEXT 
        FROM 
            SIMPLE_SKLAD_KOD 
        WHERE 
            SIMPLE_SKLAD_KOD.SIMPLE_ID =:L_SIMPLE_ID AND SIMPLE_SKLAD_KOD.SKLAD_ID = (SELECT OPR.SKLAD_ID FROM OPR WHERE OPR.ID = :ID) 
        INTO :R_TEXT_ADDR; 
 
        SUSPEND; 
   END 
END^


ALTER PROCEDURE GET_DOSTAVKA_OPR (
    ID_OPR INTEGER,
    P_CL_ID INTEGER,
    P_TIP INTEGER)
RETURNS (
    ID INTEGER,
    IN_ID INTEGER,
    IN_DATETIME DATE,
    OPR_DATETIME TIMESTAMP,
    SUMA DOUBLE PRECISION,
    KLI_MOL VARCHAR(30),
    DOST_NAME VARCHAR(100),
    DOST_ADRES VARCHAR(50),
    DOST_BULSTAT VARCHAR(13),
    USER_NAME VARCHAR(30),
    COMMENT_TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    ANULIRANA INTEGER,
    PAY_TIP SMALLINT,
    DATA_PADEJ DATE,
    SKLAD_NAME VARCHAR(20),
    R_KLI_CODE VARCHAR(15),
    R_SUMA_CL TYPE OF DOM_SUMA)
AS
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_CENA DOUBLE PRECISION; 
BEGIN 
    FOR SELECT 
        OPR.ID, 
        "IN".ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        OPR.SUMA, 
        FIRMI.MOL, 
        KLI.NAME, 
        KLI.ADRES, 
        FIRMI.BULSTAT, 
        "USER".NAME, 
        CASE WHEN EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) THEN 1 ELSE 0 END AS ANULIRANA, 
        "IN".PAY_TIP, 
        OPR_PADEJ.DATA_PADEJ, 
        SKLAD.NAME, 
        KLI.CODE 
    FROM 
        OPR INNER JOIN "IN" ON (OPR.ID = :ID_OPR  AND "IN".OPR_ID = OPR.ID) 
        INNER JOIN "USER" ON "USER".ID = OPR.USER_ID 
        INNER JOIN KLI ON OPR.KLI_ID = KLI.ID 
        LEFT JOIN FIRMI ON FIRMI.ID = KLI.FIRMA_ID 
        LEFT JOIN OPR_PADEJ ON OPR_PADEJ.OPR_ID = OPR.ID 
        LEFT JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
 
    UNION 
 
    SELECT 
        OPR.ID, 
        "IN".ID, 
        OPR_EDIT.OPR_DATE, 
        OPR.DATETIME, 
        OPR_EDIT.SUMA, 
        FIRMI.MOL, 
        KLI.NAME, 
        KLI.ADRES, 
        FIRMI.BULSTAT, 
        "USER".NAME, 
        2 AS ANULIRANA, 
        "IN".PAY_TIP, 
        OPR_PADEJ.DATA_PADEJ, 
        SKLAD.NAME, 
        KLI.CODE 
    FROM 
        OPR INNER JOIN OPR_EDIT ON OPR_EDIT.OPR_ID = :ID_OPR AND OPR.ID = OPR_EDIT.ED_OPR_ID 
        INNER JOIN "IN" ON "IN".OPR_ID = OPR.ID 
        INNER JOIN "USER" ON "USER".ID = OPR_EDIT.USER_ID 
        INNER JOIN KLI ON OPR_EDIT.KLI_ID = KLI.ID 
        LEFT JOIN FIRMI ON FIRMI.ID = KLI.FIRMA_ID 
        LEFT JOIN OPR_PADEJ ON OPR_PADEJ.OPR_ID = OPR.ID 
        LEFT JOIN SKLAD ON SKLAD.ID = OPR_EDIT.SKLAD_ID 
 
    UNION 
 
    SELECT 
        OPR.ID, 
        "IN".ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        OPR.SUMA, 
        FIRMI.MOL, 
        KLI.NAME, 
        KLI.ADRES, 
        FIRMI.BULSTAT, 
        "USER".NAME, 
        1, 
        "IN".PAY_TIP, 
        CAST(NULL AS DATE), 
        SKLAD.NAME, 
        KLI.CODE 
    FROM 
        OPR INNER JOIN OPR_ANUL ON OPR_ANUL.OPR_ID = :ID_OPR AND OPR.ID = OPR_ANUL.AN_OPR_ID 
        INNER JOIN "IN" ON "IN".OPR_ID = OPR.ID 
        INNER JOIN "USER" ON "USER".ID = OPR.USER_ID 
        INNER JOIN KLI ON OPR.KLI_ID = KLI.ID 
        LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        LEFT JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
 
    INTO 
        :ID,:IN_ID,:IN_DATETIME,:OPR_DATETIME,:SUMA,:KLI_MOL,:DOST_NAME,:DOST_ADRES,:DOST_BULSTAT, 
        :USER_NAME,:ANULIRANA,:PAY_TIP,:DATA_PADEJ,:SKLAD_NAME, :R_KLI_CODE 
    DO BEGIN 
        COMMENT_TEXT = NULL; 
 
        SELECT FIRST 1 
            COMMENTS.NOTE 
        FROM 
            COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
        WHERE 
            COMMENT_OPR_NODE.OPR_ID = :ID 
        ORDER BY 
            COMMENT_OPR_NODE.ID DESC 
        INTO :COMMENT_TEXT; 
 
        IF (P_CL_ID > 0) THEN BEGIN 
            FOR SELECT 
                IN_EL.KOL, 
                IN_EL.SIMPLE_ID 
            FROM 
                IN_EL 
            WHERE 
                IN_EL.OPR_ID = :ID_OPR 
 
            UNION ALL 
 
            SELECT 
                IN_EL.KOL, 
                IN_EL.SIMPLE_ID 
            FROM 
                DOST_NODE INNER JOIN IN_EL ON (DOST_NODE.DOST_ID = :ID_OPR AND IN_EL.OPR_ID = DOST_NODE.RAZ_DOST_ID) 
 
            UNION ALL 
 
            SELECT 
                OLD_IN_EL.KOL, 
                OLD_IN_EL.SIMPLE_ID 
            FROM 
                OLD_IN_EL 
            WHERE 
                OLD_IN_EL.OPR_ID = :ID_OPR 
            ORDER BY 1 
            INTO 
                :L_KOL, :L_SIMPLE_ID 
            DO BEGIN 
                EXECUTE PROCEDURE GET_CENA_CL(:P_CL_ID,:L_SIMPLE_ID) RETURNING_VALUES(L_CENA); 
                R_SUMA_CL = COALESCE(R_SUMA_CL,0) + ROUNDD(:L_CENA * :L_KOL); 
            END 
 
            IF (P_TIP = 1) then 
                SUMA =:R_SUMA_CL; 
        END 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_DOSTAVNA_CENA (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID_S VARCHAR(1000))
RETURNS (
    R_DOSTAVNA_C DOUBLE PRECISION,
    R_DT_LAST_CENA TIMESTAMP)
AS
declare variable L_SKLAD_ID_S varchar(1000); 
declare variable L_SKLAD_ID integer; 
BEGIN 
    IF (P_OPR_ID <> 0) THEN BEGIN 
        EXECUTE PROCEDURE GET_SKLAD_ID_S(:P_OPR_ID) RETURNING_VALUES :L_SKLAD_ID_S; 
 
        IF ((L_SKLAD_ID_S = '') OR (:L_SKLAD_ID_S IS NULL)) THEN BEGIN 
            SELECT FIRST 1 
                NAL.LAST_CENA, 
                NAL.DATETIME_LASTCENA 
            FROM 
                NAL 
            WHERE 
                NAL.SIMPLE_ID = :P_SIMPLE_ID AND 
                NAL.LAST_CENA > 0 
                AND NOT NAL.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
            ORDER BY NAL.DATETIME_LASTCENA DESC 
            INTO :R_DOSTAVNA_C, :R_DT_LAST_CENA; 
        END 
        ELSE BEGIN 
            L_SKLAD_ID_S = L_SKLAD_ID_S || '0'; 
            EXECUTE STATEMENT 
                'SELECT FIRST 1 
                    NAL.LAST_CENA, 
                    NAL.DATETIME_LASTCENA 
                FROM 
                    NAL 
                WHERE 
                    NAL.SIMPLE_ID = ' || :P_SIMPLE_ID || ' AND 
                    NAL.LAST_CENA > 0 AND 
                    NAL.SKLAD_ID IN (' || :L_SKLAD_ID_S || ') 
                    AND NOT NAL.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
                ORDER BY NAL.DATETIME_LASTCENA DESC' 
                INTO :R_DOSTAVNA_C, :R_DT_LAST_CENA; 
        END 
    END 
    ELSE BEGIN 
        IF ((L_SKLAD_ID_S = '') OR (:L_SKLAD_ID_S IS NULL)) THEN BEGIN 
            EXECUTE STATEMENT 
                'SELECT FIRST 1 
                    NAL.LAST_CENA, 
                    NAL.DATETIME_LASTCENA 
                FROM 
                    NAL 
                WHERE 
                    NAL.SIMPLE_ID = ' || :P_SIMPLE_ID || ' AND 
                    NAL.LAST_CENA > 0 
                    AND NOT NAL.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
                ORDER BY NAL.DATETIME_LASTCENA DESC' 
                INTO :R_DOSTAVNA_C, :R_DT_LAST_CENA; 
        END 
        ELSE 
            EXECUTE STATEMENT 
                'SELECT FIRST 1 
                    NAL.LAST_CENA, 
                    NAL.DATETIME_LASTCENA 
                FROM 
                    NAL 
                WHERE 
                    NAL.SIMPLE_ID = ' || :P_SIMPLE_ID || ' AND 
                    NAL.LAST_CENA > 0 AND 
                    NAL.SKLAD_ID IN (' || :P_SKLAD_ID_S || ') 
                    AND NOT NAL.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
                ORDER BY NAL.DATETIME_LASTCENA DESC' 
                INTO :R_DOSTAVNA_C, :R_DT_LAST_CENA; 
    END 
 
    SUSPEND; 
END^


ALTER PROCEDURE GET_DOSTAVNA_CENA_SKLAD (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_DOSTAVNA_C DOUBLE PRECISION)
AS
declare variable L_SKLAD_ID_S varchar(1000); 
declare variable L_SKLAD_ID integer; 
begin 
    SELECT FIRST 1 
        NAL.LAST_CENA 
    FROM 
        NAL 
    WHERE 
        NAL.SIMPLE_ID = :P_SIMPLE_ID AND 
        NAL.LAST_CENA > 0 
        AND NOT NAL.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
        and (EXISTS (select PLDS.ID FROM PRICE_LIST_DELIVERY_STORAGES PLDS WHERE PLDS.STORAGE_ID = NAL.SKLAD_ID AND PLDS.PRICE_LIST_ID =:P_OPR_ID) 
             or ((SELECT COUNT(PLDS.ID) FROM PRICE_LIST_DELIVERY_STORAGES PLDS WHERE PLDS.PRICE_LIST_ID =:P_OPR_ID) = 0)) 
    ORDER BY NAL.DATETIME_LASTCENA DESC 
    INTO :R_DOSTAVNA_C; 
 
    suspend; 
end^


ALTER PROCEDURE GET_FACTURNA_CENA (
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_CENA DOUBLE PRECISION)
AS
DECLARE VARIABLE L_OPR_CL_ID INTEGER; 
BEGIN 
  SELECT 
    CENOVA_LISTA.OPR_ID 
  FROM 
    CENOVA_LISTA 
  WHERE 
    CENOVA_LISTA.FAKTURNA = 1 
  INTO 
    :L_OPR_CL_ID; 
 
  SELECT 
    CENOVA_LISTA_EL.CENA 
  FROM 
    CENOVA_LISTA_EL 
  WHERE 
    CENOVA_LISTA_EL.OPR_ID = :L_OPR_CL_ID AND 
    CENOVA_LISTA_EL.SIMPLE_ID = :P_SIMPLE_ID 
  INTO 
    :R_CENA; 
END^


ALTER PROCEDURE GET_FACTURNI_CENI
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_CENA DOUBLE PRECISION)
AS
BEGIN 
  FOR SELECT 
    SIMPLE.ID 
  FROM 
    SIMPLE 
  ORDER BY 1 
  INTO 
    :R_SIMPLE_ID 
  DO BEGIN 
    EXECUTE PROCEDURE GET_FACTURNA_CENA(R_SIMPLE_ID) RETURNING_VALUES R_CENA; 
    SUSPEND; 
  END 
END^


ALTER PROCEDURE GET_FAK_EL_PN (
    P_FAK_EL TYPE OF DOM_KEY)
RETURNS (
    R_LIST_PN VARCHAR(300),
    R_LIST_SROK VARCHAR(300))
AS
BEGIN 
    SELECT 
        SUBSTRING(LIST(DISTINCT SERIAL_NUM.SN, ', ') FROM 1 FOR 300) AS LIST_PN, 
        SUBSTRING(LIST(DISTINCT PE.SROK, ', ') FROM 1 FOR 300) AS LIST_SROK 
    FROM 
        FAK_OUT_EL_NODE INNER JOIN OUT_EL ON OUT_EL.ID = FAK_OUT_EL_NODE.OUT_EL_ID AND FAK_OUT_EL_NODE.FAK_EL_ID =:P_FAK_EL 
        INNER JOIN PARTIDA_OUT_EL_NODE POEN ON POEN.OUT_EL_ID = OUT_EL.ID 
        INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = POEN.PARTIDA_NODE_ID 
        INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
        INNER JOIN PARTIDA_EL PE ON PE.ID = PN.ELEMENT_ID 
        LEFT JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PE.ID 
    INTO :R_LIST_PN, :R_LIST_SROK; 
 
    SUSPEND; 
END^


ALTER PROCEDURE GET_FAK_OTKLONENIE (
    P_OPR_FAK_ID INTEGER,
    P_TIP_DDS INTEGER)
RETURNS (
    FAK_SUMA DOUBLE PRECISION,
    R_SUMA_OS DOUBLE PRECISION,
    R_SUMA_CL DOUBLE PRECISION,
    R_SUMA_NEOBLAGAEMA DOUBLE PRECISION,
    R_SUMA_DDS DOUBLE PRECISION,
    R_SUMA_TOTAL DOUBLE PRECISION,
    R_OTKL_CL DOUBLE PRECISION,
    R_OTKL_OS DOUBLE PRECISION,
    R_RAZLIKA_OS DOUBLE PRECISION,
    R_RAZLIKA_CL DOUBLE PRECISION,
    R_SUMA_S_DDS DOUBLE PRECISION)
AS
DECLARE VARIABLE L_SUMA_OS DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_CL DOUBLE PRECISION; 
DECLARE VARIABLE L_FAKT_PROD_OPR_ID INTEGER; 
DECLARE VARIABLE L_SUMA_PROD DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_PROD_TOTAL DOUBLE PRECISION; 
DECLARE VARIABLE L_SKLAD INTEGER; 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_OS_NETO TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_SUMA_CL_NETO TYPE OF DOM_SUMA; 
BEGIN 
    L_SUMA_PROD_TOTAL = 0; 
    R_SUMA_CL = 0; 
    R_SUMA_OS = 0; 
    L_SUMA_PROD = 0; 
 
    SELECT 
        SYSTEM.H_SKLAD 
    FROM 
        SYSTEM 
    INTO 
        :L_SKLAD; 
 
    FOR SELECT 
        FAK.SUMA, 
        FAK.NEOBLAGAEMA, 
        FAK.DDS, 
        FAK.TOTAL, 
        FAK_PROD.OPR_ID 
    FROM 
        FAK INNER JOIN FAK_PROD ON FAK_PROD.FAK_ID = FAK.ID 
        INNER JOIN OPR ON OPR.ID = FAK_PROD.OPR_ID 
    WHERE 
        (NOT EXISTS (SELECT FAK_PROD_REAL_PROD_NODE.ID FROM FAK_PROD_REAL_PROD_NODE WHERE FAK_PROD_REAL_PROD_NODE.PROD_OPR_ID = FAK_PROD.OPR_ID)) 
        AND FAK.OPR_ID =:P_OPR_FAK_ID 
        AND OPR.OPR_TIP = 2 
 
    UNION ALL 
    SELECT 
        FAK.SUMA, 
        FAK.NEOBLAGAEMA, 
        FAK.DDS, 
        FAK.TOTAL, 
        FAK_PROD_REAL_PROD_NODE.FKT_PROD_OPR_ID 
    FROM 
        FAK INNER JOIN FAK_PROD ON FAK_PROD.FAK_ID = FAK.ID 
        INNER JOIN FAK_PROD_REAL_PROD_NODE ON FAK_PROD_REAL_PROD_NODE.PROD_OPR_ID = FAK_PROD.OPR_ID 
        INNER JOIN OPR ON OPR.ID = FAK_PROD_REAL_PROD_NODE.FKT_PROD_OPR_ID 
    WHERE 
        (EXISTS (SELECT FAK_PROD_REAL_PROD_NODE.ID FROM FAK_PROD_REAL_PROD_NODE WHERE FAK_PROD_REAL_PROD_NODE.PROD_OPR_ID = FAK_PROD.OPR_ID)) 
        AND FAK.OPR_ID =:P_OPR_FAK_ID 
        AND OPR.SKLAD_ID =:L_SKLAD 
 
    INTO :FAK_SUMA,:R_SUMA_NEOBLAGAEMA,:R_SUMA_DDS,:R_SUMA_TOTAL,:L_FAKT_PROD_OPR_ID 
    DO BEGIN 
        EXECUTE PROCEDURE GET_SUMI_PROD(L_FAKT_PROD_OPR_ID, :P_TIP_DDS) 
        RETURNING_VALUES (:L_SUMA_CL,:L_SUMA_OS,:L_SUMA_PROD,:R_SUMA_S_DDS,:L_SUMA_OS_NETO,:L_SUMA_CL_NETO); 
 
        L_SUMA_PROD_TOTAL = L_SUMA_PROD_TOTAL + L_SUMA_PROD; 
        R_SUMA_CL = R_SUMA_CL + L_SUMA_CL; 
        R_SUMA_OS = R_SUMA_OS + L_SUMA_OS; 
    END 
 
    IF ((R_SUMA_CL <> 0) AND (R_SUMA_CL > L_SUMA_PROD_TOTAL)) THEN BEGIN 
        R_OTKL_CL = ROUNDD(ROUNDD((R_SUMA_CL - L_SUMA_PROD_TOTAL)/R_SUMA_CL)*100); 
        R_RAZLIKA_CL = R_SUMA_CL - L_SUMA_PROD_TOTAL; 
    END 
    ELSE BEGIN 
        R_OTKL_CL = 0; 
        R_RAZLIKA_CL = 0; 
    END 
 
    IF ((R_SUMA_OS <> 0) AND (R_SUMA_OS > L_SUMA_PROD_TOTAL)) THEN BEGIN 
        R_OTKL_OS = ROUNDD(ROUNDD((R_SUMA_OS - L_SUMA_PROD_TOTAL)/R_SUMA_OS)*100); 
        R_RAZLIKA_OS = R_SUMA_OS - L_SUMA_PROD_TOTAL; 
     END 
     ELSE BEGIN 
        R_OTKL_OS = 0; 
        R_RAZLIKA_OS = 0; 
     END 
 
     SUSPEND; 
END^


ALTER PROCEDURE GET_FAK_PROPERTIES (
    P_FAK_EL_ID TYPE OF DOM_INT)
RETURNS (
    R_SIMPLE_PROP TYPE OF DOM_CHAR_300)
AS
BEGIN 
    SELECT 
        LIST(SIMPLE_PROP.NAME || ' - ' || SIMPLE_PROP_MINOR.NAME) 
    FROM 
        POR_PROP_NODE INNER JOIN SIMPLE_PROP ON SIMPLE_PROP.ID = POR_PROP_NODE.MAJOR_PROP_ID 
        INNER JOIN SIMPLE_PROP_MINOR ON SIMPLE_PROP_MINOR.ID = POR_PROP_NODE.MINOR_PROP_ID 
    WHERE 
        POR_PROP_NODE.POR_EL_ID IN (SELECT POR_EL.ID FROM FAK_EL INNER JOIN FAK_OUT_EL_NODE ON FAK_OUT_EL_NODE.FAK_EL_ID = FAK_EL.ID 
                INNER JOIN OUT_EL ON OUT_EL.ID = FAK_OUT_EL_NODE.OUT_EL_ID 
                INNER JOIN POR_EL ON POR_EL.OUT_EL_ID = FAK_OUT_EL_NODE.OUT_EL_ID 
                WHERE FAK_EL.ID =:P_FAK_EL_ID) 
    INTO :R_SIMPLE_PROP; 
 
    SUSPEND; 
END^


ALTER PROCEDURE GET_FAK_SUMI_INVOICE (
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_RAZLIKA TYPE OF DOM_SUMA,
    R_FAK_EL_ID TYPE OF DOM_KEY)
AS
declare variable L_SUMA_FAK_EL type of DOM_SUMA; 
declare variable L_SUMA_FAKTURA type of DOM_SUMA; 
declare variable L_RAZLIKA type of DOM_SUMA; 
BEGIN 
    SELECT 
        SUM(ROUND((FAK_EL.SUMA_TOTAL-FAK_EL.SUMA_DDS) * FAK.KURS_VALUTA, 2)) 
    FROM 
        FAK_EL INNER JOIN FAK ON FAK.OPR_ID = FAK_EL.OPR_ID 
    WHERE 
        FAK.OPR_ID =:P_OPR_ID 
    INTO :L_SUMA_FAK_EL; 
 
    SELECT 
        ROUND(FAK.SUMA * FAK.KURS_VALUTA,2) 
    FROM 
        FAK 
    WHERE 
        FAK.OPR_ID =:P_OPR_ID 
    INTO :L_SUMA_FAKTURA; 
 
    R_RAZLIKA = L_SUMA_FAKTURA - L_SUMA_FAK_EL; 
 
    SELECT FIRST 1 
        ID 
    FROM 
        (SELECT 
            FAK_EL.ID, 
            FAK_EL.SUMA_TOTAL 
        FROM 
            FAK_EL 
        WHERE 
            FAK_EL.OPR_ID =:P_OPR_ID 
        ORDER BY 2 DESC,1) 
    INTO :R_FAK_EL_ID; 
 
    SUSPEND; 
END^


ALTER PROCEDURE GET_FAKTURA_DNEVNIK (
    P_FROM_DATE TYPE OF DOM_DATE,
    P_TO_DATE TYPE OF DOM_DATE,
    P_PO_EL TYPE OF DOM_SMAL_INT)
RETURNS (
    R_FAK_NUMBER TYPE OF DOM_CHAR_10,
    R_FAK_EL_TEXT TYPE OF DOM_CHAR_1000,
    R_SUMA TYPE OF DOM_SUMA,
    R_NEOBLAGAEMA_SUMA TYPE OF DOM_SUMA,
    R_DDS_SUMA TYPE OF DOM_SUMA,
    R_TOTAL TYPE OF DOM_SUMA,
    R_FAK_EL_CENA TYPE OF DOM_CENA,
    R_FAK_EL_KOL TYPE OF DOM_KOL,
    R_FAK_EL_DDS TYPE OF DOM_PERCENT,
    R_RAZ_NAME TYPE OF DOM_CHAR_30,
    R_RAZ_KOL TYPE OF DOM_KOL,
    R_TIP TYPE OF DOM_SMAL_INT,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_OPR_ID TYPE OF DOM_INT,
    R_FIRMA_NAME TYPE OF DOM_CHAR_50,
    R_PAY_TIP TYPE OF DOM_CHAR_10,
    R_TIP_STR TYPE OF DOM_CHAR_10)
AS
declare variable L_FAK_ID type of DOM_INT; 
declare variable L_OPR_ID type of DOM_KEY; 
declare variable L_DOST_CENI_DDS type of DOM_SMAL_INT; 
declare variable L_TOTAL_PROD type of DOM_SUMA; 
declare variable L_TOTAL_PROD_NETO type of DOM_SUMA; 
declare variable L_TOTAL_PROD_DDS type of DOM_SUMA; 
declare variable L_TOTAL_PROD_CNT type of DOM_SMAL_INT; 
declare variable L_TOTAL_DOST type of DOM_SUMA; 
declare variable L_TOTAL_DOST_NETO type of DOM_SUMA; 
declare variable L_TOTAL_DOST_DDS type of DOM_SUMA; 
declare variable L_TOTAL_DOST_CNT type of DOM_SMAL_INT; 
BEGIN 
    FOR 
        SELECT 
            FAK.ID, 
            FAK.NUMBER, 
            FAK.OPR_ID, 
            OPR.OPR_DATE, 
            FIRMI_FAK_DATA.NAME_FAK, 
            CAST(IIF(FAK.PAY_TYPE = 1, 'В брой',IIF(FAK.PAY_TYPE = 0, 'С платежно', 'В брой - отложено')) AS VARCHAR(10)) 
        FROM 
            FAK INNER JOIN OPR ON OPR.ID = FAK.OPR_ID 
            INNER JOIN FIRMI_FAK_DATA ON FIRMI_FAK_DATA.FAK_ID = FAK.ID 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = fak.OPR_ID) 
            AND OPR.OPR_DATE BETWEEN COALESCE(CAST(:P_FROM_DATE AS DATE),'01.01.1989') AND COALESCE(CAST(:P_TO_DATE AS DATE),'31.12.2120') 
        INTO :L_FAK_ID, :R_FAK_NUMBER, :L_OPR_ID, :R_OPR_DATE, :R_FIRMA_NAME, :R_PAY_TIP 
    DO BEGIN 
        R_TIP = -1; 
        R_OPR_ID =:L_OPR_ID; 
        R_TIP_STR = 'Продажба'; 
 
        IF (:P_PO_EL = 1) THEN BEGIN 
 
            SUSPEND; 
 
            R_PAY_TIP = NULL; 
            R_FIRMA_NAME = NULL; 
            R_TIP_STR = NULL; 
 
            FOR 
                SELECT 
                    FAK_EL.TEXT, 
                    FAK_EL.KOL, 
                    FAK_EL.CENA, 
                    FAK_EL.DDS, 
                    FAK_EL.SUMA_DDS, 
                    ROUND(FAK_EL.SUMA_TOTAL - FAK_EL.SUMA_DDS,2), 
                    FAK_EL.SUMA_TOTAL, 
                    COALESCE(RAZ_EL.NAME,ME.NAME) AS RAZ_NAME, 
                    FAK_EL.RAZ_KOL 
                FROM 
                    FAK_EL LEFT JOIN ME ON FAK_EL.ME_ID = ME.ID 
                    LEFT JOIN RAZFASOVKA RAZ ON RAZ.ID = FAK_EL.RAZ_ID 
                    LEFT JOIN RAZ_ELEMENT RAZ_EL ON RAZ_EL.ID=RAZ.RAZ_ELEMENT_ID 
                WHERE 
                    FAK_EL.OPR_ID =:L_OPR_ID 
                INTO :R_FAK_EL_TEXT, :R_FAK_EL_KOL, :R_FAK_EL_CENA, :R_FAK_EL_DDS, :R_DDS_SUMA, :R_SUMA, :R_TOTAL, :R_RAZ_NAME, :R_RAZ_KOL 
            DO BEGIN 
                R_TIP = 0; 
                SUSPEND; 
            END 
 
 
            R_FAK_EL_TEXT = 'Общо:'; 
            R_FAK_NUMBER = NULL; 
            R_FAK_EL_CENA = NULL; 
            R_FAK_EL_KOL = NULL; 
            R_FAK_EL_DDS = NULL; 
            R_RAZ_NAME = NULL; 
            R_RAZ_KOL = NULL; 
 
        END 
 
        SELECT 
            FAK.SUMA, 
            FAK.NEOBLAGAEMA, 
            FAK.DDS, 
            FAK.TOTAL 
        FROM 
            FAK 
        WHERE 
            FAK.OPR_ID =:L_OPR_ID 
        INTO :R_SUMA, :R_NEOBLAGAEMA_SUMA, :R_DDS_SUMA,: R_TOTAL; 
 
        if (:P_PO_EL = 1) then  R_TIP = 2; 
        L_TOTAL_PROD = COALESCE(:L_TOTAL_PROD,0) + COALESCE(:R_TOTAL,0); 
        L_TOTAL_PROD_NETO = COALESCE(:L_TOTAL_PROD_NETO,0) + COALESCE(:R_SUMA,0); 
        L_TOTAL_PROD_DDS = COALESCE(:L_TOTAL_PROD_DDS,0) + COALESCE(:R_DDS_SUMA,0); 
        L_TOTAL_PROD_CNT = COALESCE(:L_TOTAL_PROD_CNT,0) + 1; 
        SUSPEND; 
 
        R_FAK_EL_TEXT = NULL; 
        R_SUMA = NULL; 
        R_NEOBLAGAEMA_SUMA = NULL; 
        R_DDS_SUMA = NULL; 
        R_TOTAL = NULL; 
 
    END 
    FOR 
        SELECT 
            FAK_IN.ID, 
            FAK_IN.NUMBER, 
            FAK_IN.OPR_ID, 
            OPR.OPR_DATE, 
            (SELECT FIRST 1 FIRMI.NAME_FAK FROM FIRMI INNER JOIN KLI_FIRMA_NODE ON KLI_FIRMA_NODE.FIRMA_ID = FIRMI.ID AND KLI_FIRMA_NODE.KLI_ID = OPR.KLI_ID), 
            CAST(IIF(FAK_IN.PAY_TIP = 1, 'В брой',IIF(FAK_IN.PAY_TIP = 0, 'С платежно', 'В брой - отложено')) AS VARCHAR(10)) 
        FROM 
            FAK_IN INNER JOIN OPR ON OPR.ID = FAK_IN.OPR_ID 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND OPR.OPR_DATE BETWEEN COALESCE(CAST(:P_FROM_DATE AS DATE),'01.01.1989') AND COALESCE(CAST(:P_TO_DATE AS DATE),'31.12.2120') 
        INTO :L_FAK_ID, :R_FAK_NUMBER, :L_OPR_ID, :R_OPR_DATE, :R_FIRMA_NAME, :R_PAY_TIP 
 
    DO BEGIN 
        R_TIP = -1; 
        R_OPR_ID =:L_OPR_ID; 
        R_TIP_STR = 'Доставка'; 
 
        IF (:P_PO_EL = 1) THEN BEGIN 
            SUSPEND; 
 
            R_PAY_TIP = NULL; 
            R_FIRMA_NAME = NULL; 
            R_TIP_STR = NULL; 
 
            SELECT FIRST 1 
                LOG_CENI_DDS.TIP_CENI 
            FROM 
                LOG_CENI_DDS 
            WHERE 
                LOG_CENI_DDS.TIP_DDS = 0 AND LOG_CENI_DDS.OPR_ID <:L_OPR_ID 
            ORDER BY LOG_CENI_DDS.OPR_ID DESC, LOG_CENI_DDS.ID DESC 
            INTO :L_DOST_CENI_DDS; 
 
 
            FOR 
                SELECT 
                    SIMPLE.NAME, 
                    IN_EL.KOL, 
                    ROUND(IIF(COALESCE(:L_DOST_CENI_DDS,0) = 0, IN_EL.SUMA_FR / IN_EL.KOL, (IN_EL.SUMA_FR /(SIMPLE.DDS/100 + 1))/IN_EL.KOL),5) AS CENA_NETNA, 
                    SIMPLE.DDS, 
                    ROUND(IIF(COALESCE(:L_DOST_CENI_DDS,0) = 0, IN_EL.SUMA_FR, IN_EL.SUMA_FR/(SIMPLE.DDS/100 + 1)),2) AS SUMA_NETO, 
                    ROUND(IIF(COALESCE(:L_DOST_CENI_DDS,0) = 0, (IN_EL.SUMA_FR*SIMPLE.DDS)/100 + IN_EL.SUMA_FR, IN_EL.SUMA_FR),2) AS TOTAL, 
                    COALESCE(RAZ_EL.NAME,ME.NAME) AS RAZ_NAME, 
                    IN_EL_RAZ_NODE.KOL 
                FROM 
                    IN_EL INNER JOIN FAK_IN_EL_NODE ON FAK_IN_EL_NODE.IN_EL_ID = IN_EL.ID 
                    INNER JOIN FAK_IN ON FAK_IN.ID = FAK_IN_EL_NODE.FAK_IN_ID AND FAK_IN.OPR_ID =:L_OPR_ID 
                    INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
                    LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
                    LEFT JOIN IN_EL_RAZ_NODE ON IN_EL_RAZ_NODE.IN_EL_ID = IN_EL.ID 
                    LEFT JOIN RAZFASOVKA RAZ ON RAZ.ID = IN_EL_RAZ_NODE.RAZFASOVKA_ID 
                    LEFT JOIN RAZ_ELEMENT RAZ_EL ON RAZ_EL.ID=RAZ.RAZ_ELEMENT_ID 
                INTO :R_FAK_EL_TEXT, :R_FAK_EL_KOL, :R_FAK_EL_CENA, :R_FAK_EL_DDS, :R_SUMA, :R_TOTAL, :R_RAZ_NAME, :R_RAZ_KOL 
                DO BEGIN 
                    R_DDS_SUMA = :R_TOTAL - :R_SUMA; 
                    R_TIP = 1; 
                    SUSPEND; 
                END 
 
            R_FAK_EL_TEXT = 'Общо:'; 
            R_FAK_NUMBER = NULL; 
            R_FAK_EL_CENA = NULL; 
            R_FAK_EL_KOL = NULL; 
            R_FAK_EL_DDS = NULL; 
            R_RAZ_NAME = NULL; 
            R_RAZ_KOL = NULL; 
 
        END 
 
        SELECT 
            FAK_IN.SUMA, 
            FAK_IN.NEOBLAGAEMA, 
            FAK_IN.DDS, 
            FAK_IN.TOTAL 
        FROM 
            FAK_IN 
        WHERE 
            FAK_IN.OPR_ID =:L_OPR_ID 
        INTO :R_SUMA, :R_NEOBLAGAEMA_SUMA, :R_DDS_SUMA,: R_TOTAL; 
 
        if (:P_PO_EL = 1) then  R_TIP = 2; 
        L_TOTAL_DOST = COALESCE(:L_TOTAL_DOST,0) + COALESCE(:R_TOTAL,0); 
        L_TOTAL_DOST_NETO = COALESCE(:L_TOTAL_DOST_NETO,0) + COALESCE(:R_SUMA,0); 
        L_TOTAL_DOST_DDS = COALESCE(:L_TOTAL_DOST_DDS,0) + COALESCE(:R_DDS_SUMA,0); 
        L_TOTAL_DOST_CNT = COALESCE(:L_TOTAL_DOST_CNT,0) + 1; 
        SUSPEND; 
 
        R_FAK_EL_TEXT = NULL; 
        R_SUMA = NULL; 
        R_NEOBLAGAEMA_SUMA = NULL; 
        R_DDS_SUMA = NULL; 
        R_TOTAL = NULL; 
        R_OPR_DATE = NULL; 
        R_OPR_ID = NULL; 
    END 
 
    SELECT 
        MAX(OPR.ID) + 1 
    FROM 
        OPR 
    INTO :R_OPR_ID; 
 
    R_TIP = 101; 
    R_FAK_EL_TEXT = 'ОБЩО ПРОДАЖБИ'; 
    R_TOTAL = :L_TOTAL_PROD; 
    R_FAK_EL_KOL =:L_TOTAL_PROD_CNT; 
    R_DDS_SUMA =:L_TOTAL_PROD_DDS; 
    R_SUMA =:L_TOTAL_PROD_NETO; 
    R_PAY_TIP = NULL; 
    R_FIRMA_NAME = NULL; 
    R_TIP_STR = NULL; 
    R_FAK_EL_KOL = NULL; 
    R_OPR_DATE = NULL; 
    R_FAK_NUMBER = NULL; 
 
    IF (:R_SUMA IS NOT NULL) THEN 
        SUSPEND; 
 
    R_TIP = 101; 
    R_FAK_EL_TEXT = 'ОБЩО ДОСТАВКИ'; 
    R_TOTAL = :L_TOTAL_DOST; 
    R_FAK_EL_KOL =:L_TOTAL_DOST_CNT; 
    R_DDS_SUMA =:L_TOTAL_DOST_DDS; 
    R_SUMA =:L_TOTAL_DOST_NETO; 
    R_PAY_TIP = NULL; 
    R_FIRMA_NAME = NULL; 
    R_FAK_EL_KOL = NULL; 
    R_OPR_DATE = NULL; 
    R_TIP_STR = NULL; 
    R_FAK_NUMBER = NULL; 
 
    IF (:R_SUMA IS NOT NULL) THEN 
        SUSPEND; 
 
END^


ALTER PROCEDURE GET_FIX_CENI
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_CENA DOUBLE PRECISION)
AS
DECLARE VARIABLE L_ID INTEGER; 
BEGIN 
  SELECT 
    CENOVA_LISTA.ID 
  FROM CENOVA_LISTA WHERE CENOVA_LISTA.DEF_FIKS = 1 
  INTO :L_ID; 
 
  FOR SELECT 
    SIMPLE.ID 
  FROM 
    SIMPLE 
  ORDER BY 1 
  INTO 
    :R_SIMPLE_ID 
  DO BEGIN 
    EXECUTE PROCEDURE GET_CENA_CL(L_ID,R_SIMPLE_ID) RETURNING_VALUES(R_CENA); 
    SUSPEND; 
  END 
END^


ALTER PROCEDURE GET_GRAFIK_MONTAJ_DATA (
    P_OPR_ID INTEGER,
    P_BR_ME_ID INTEGER,
    P_M_ME_ID INTEGER,
    P_MM_ME_ID INTEGER,
    P_GRUPI INTEGER)
RETURNS (
    R_OPR_ID INTEGER,
    R_PVC_BR DOUBLE PRECISION,
    R_PVC_M DOUBLE PRECISION,
    R_PVC_MM DOUBLE PRECISION,
    R_AL_BR DOUBLE PRECISION,
    R_AL_M DOUBLE PRECISION,
    R_AL_MM DOUBLE PRECISION,
    R_APLAST_BR DOUBLE PRECISION,
    R_APLAST_M DOUBLE PRECISION,
    R_APLAST_MM DOUBLE PRECISION,
    L_RAZPAD INTEGER)
AS
declare variable L_SIMPLE_ID integer; 
declare variable L_KOL double precision; 
declare variable L_ME_ID integer; 
declare variable L_TIP integer; 
BEGIN 
  R_OPR_ID = 0; 
 
  --P_GRUPI = ',' || P_GRUPI || ','; 
 
  R_PVC_BR = 0; 
  R_PVC_M = 0; 
  R_PVC_MM = 0; 
  R_AL_BR = 0; 
  R_AL_M = 0; 
  R_AL_MM = 0; 
  R_APLAST_BR = 0; 
  R_APLAST_M = 0; 
  R_APLAST_MM = 0; 
 
  FOR SELECT 
    PRODUCTION_REQUEST_EL.SIMPLE_ID, 
    PRODUCTION_REQUEST_EL.KOL, 
    SIMPLE.ME_ID, 
    SIMPLE.RAZPAD 
  FROM 
    PRODUCTION_REQUEST_EL 
    INNER JOIN SIMPLE ON SIMPLE.ID = PRODUCTION_REQUEST_EL.SIMPLE_ID 
    INNER JOIN OPR_PRODUCTION_REQUEST ON OPR_PRODUCTION_REQUEST.OPR_ID = PRODUCTION_REQUEST_EL.OPR_REQUEST_ID 
  WHERE 
    PRODUCTION_REQUEST_EL.OPR_REQUEST_ID = :P_OPR_ID 
    AND (PRODUCTION_REQUEST_EL.SIMPLE_CALC_ID IS NULL) 
 
  INTO 
    :L_SIMPLE_ID, :L_KOL, :L_ME_ID, :L_RAZPAD 
  DO BEGIN 
      R_OPR_ID = P_OPR_ID; 
 
    /* 
    IF (L_TIP = 1) THEN BEGIN 
      IF (L_ME_ID = P_BR_ME_ID) THEN 
        R_PVC_BR = R_PVC_BR + L_KOL; 
      ELSE IF (L_ME_ID = P_M_ME_ID) THEN 
        R_PVC_M = R_PVC_M + L_KOL; 
      ELSE IF (L_ME_ID = P_MM_ME_ID) THEN 
        R_PVC_MM = R_PVC_MM + L_KOL; 
    END 
    ELSE IF (L_TIP = 2) THEN BEGIN 
      IF (L_ME_ID = P_BR_ME_ID) THEN 
        R_AL_BR = R_AL_BR + L_KOL; 
      ELSE IF (L_ME_ID = P_M_ME_ID) THEN 
        R_AL_M = R_AL_M + L_KOL; 
      ELSE IF (L_ME_ID = P_MM_ME_ID) THEN 
        R_AL_MM = R_AL_MM + L_KOL; 
    END 
    ELSE IF (L_TIP = 3) THEN BEGIN 
      IF (L_ME_ID = P_BR_ME_ID) THEN 
        R_APLAST_BR = R_APLAST_BR + L_KOL; 
      ELSE IF (L_ME_ID = P_M_ME_ID) THEN 
        R_APLAST_M = R_APLAST_M + L_KOL; 
      ELSE IF (L_ME_ID = P_BR_ME_ID) THEN 
        R_APLAST_MM = R_APLAST_MM + L_KOL; 
    END 
    */ 
 
    SELECT 
      COUNT(SELEKCIQ.ID) AS TIP 
    FROM 
      SIMPLE 
      LEFT JOIN SELEKCIQ_SIM_EL ON SELEKCIQ_SIM_EL.SIMPLE_ID = SIMPLE.ID 
      LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SELEKCIQ_SIM_EL.SELEKCIQ_ID 
    WHERE 
      SIMPLE.ID = :L_SIMPLE_ID AND 
      SELEKCIQ.ID = :P_GRUPI 
    INTO : L_TIP; 
 
 
    --IF (L_RAZPAD = 0) THEN BEGIN 
      IF (L_TIP > 0) THEN BEGIN 
        IF (L_ME_ID = P_BR_ME_ID) THEN 
          R_PVC_BR = R_PVC_BR + L_KOL; 
        ELSE IF (L_ME_ID = P_M_ME_ID) THEN 
          R_PVC_M = R_PVC_M + L_KOL; 
        ELSE IF (L_ME_ID = P_MM_ME_ID) THEN 
          R_PVC_MM = R_PVC_MM + L_KOL; 
      END 
    --END 
 
  END 
 
  IF (R_PVC_BR = 0) THEN 
    R_PVC_BR = NULL; 
 
  IF (R_PVC_M = 0) THEN 
    R_PVC_M = NULL; 
 
  IF (R_PVC_MM = 0) THEN 
    R_PVC_MM = NULL; 
 
  IF (R_AL_BR = 0) THEN 
    R_AL_BR = NULL; 
 
  IF (R_AL_M = 0) THEN 
    R_AL_M = NULL; 
 
  IF (R_AL_MM = 0) THEN 
    R_AL_MM = NULL; 
 
  IF (R_APLAST_BR = 0) THEN 
    R_APLAST_BR = NULL; 
 
  IF (R_APLAST_M = 0) THEN 
    R_APLAST_M = NULL; 
 
  IF (R_APLAST_MM = 0) THEN 
    R_APLAST_MM = NULL; 
 
  SUSPEND; 
 
END^


ALTER PROCEDURE GET_GRAFIK_MONTAJ_DATA_V1 (
    P_OPR_ID INTEGER,
    P_BR_ME_ID INTEGER,
    P_M_ME_ID INTEGER,
    P_MM_ME_ID INTEGER,
    P_GRUPI INTEGER)
RETURNS (
    R_OPR_ID INTEGER,
    R_PVC_BR DOUBLE PRECISION,
    R_PVC_M DOUBLE PRECISION,
    R_PVC_MM DOUBLE PRECISION,
    R_AL_BR DOUBLE PRECISION,
    R_AL_M DOUBLE PRECISION,
    R_AL_MM DOUBLE PRECISION,
    R_APLAST_BR DOUBLE PRECISION,
    R_APLAST_M DOUBLE PRECISION,
    R_APLAST_MM DOUBLE PRECISION,
    L_RAZPAD INTEGER)
AS
declare variable L_SIMPLE_ID integer; 
declare variable L_KOL double precision; 
declare variable L_ME_ID integer; 
declare variable L_TIP integer; 
declare variable L_POR_EL_ID type of DOM_KEY; 
BEGIN 
  R_OPR_ID = 0; 
 
  FOR 
    SELECT DISTINCT 
        POR_EL.ID, 
        POR_EL.SIMPLE_ID, 
        POR_EL.KOL, 
        SIMPLE.ME_ID, 
        SIMPLE.RAZPAD , 
        IIF(SELEKCIQ.ID IS NULL, 0, 1) 
  FROM 
        POR_EL INNER JOIN SIMPLE ON SIMPLE.ID = POR_EL.SIMPLE_ID 
        INNER JOIN ME ON ME.ID = SIMPLE.ME_ID 
        --AND POR_EL.SIMPLE_CALC_ID IS NULL 
        LEFT JOIN SELEKCIQ_SIM_EL ON SELEKCIQ_SIM_EL.SIMPLE_ID = SIMPLE.ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SELEKCIQ_SIM_EL.SELEKCIQ_ID AND SELEKCIQ.ID = :P_GRUPI 
  WHERE 
        POR_EL.OPR_ID = :P_OPR_ID 
  INTO 
        :L_POR_EL_ID, :L_SIMPLE_ID, :L_KOL, :L_ME_ID, :L_RAZPAD, :L_TIP 
  DO BEGIN 
      R_OPR_ID = P_OPR_ID; 
 
      IF (L_TIP > 0) THEN BEGIN 
        IF (L_ME_ID = P_BR_ME_ID) THEN 
          R_PVC_BR = COALESCE(R_PVC_BR, 0.00) + L_KOL; 
        ELSE IF (L_ME_ID = P_M_ME_ID) THEN 
          R_PVC_M = COALESCE(R_PVC_M, 0.00) + L_KOL; 
        ELSE IF (L_ME_ID = P_MM_ME_ID) THEN 
          R_PVC_MM = COALESCE(R_PVC_MM, 0.00) + L_KOL; 
      END 
  END 
 
  SUSPEND; 
 
END^


ALTER PROCEDURE GET_IN_PN (
    P_IN_EL_ID TYPE OF DOM_KEY)
RETURNS (
    R_PN TYPE OF DOM_CHAR_300,
    R_SROK TYPE OF DOM_CHAR_300)
AS
BEGIN

    FOR SELECT
        DISTINCT SERIAL_NUM.SN,
        SUBSTRING(100+EXTRACT(DAY FROM PARTIDA_EL.SROK) FROM 2 FOR 2)||'.'||
        SUBSTRING(100+EXTRACT(MONTH FROM PARTIDA_EL.SROK) FROM 2 FOR 2)||'.'||
        EXTRACT(YEAR FROM PARTIDA_EL.SROK) as SROK_NA_GODNOST
    FROM
        PARTIDA_IN_EL_NODE PIEN INNER join PARTIDA_EL_NODE PEN ON PEN.ID = PIEN.PARTIDA_NODE_ID
        INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID
        LEFT JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID
        LEFT JOIN PARTIDA_EL ON PARTIDA_EL.ID = PN.ELEMENT_ID 
    WHERE
        PIEN.IN_EL_ID =:P_IN_EL_ID
    INTO :R_PN, :R_SROK
    DO
        SUSPEND;
END^


ALTER PROCEDURE GET_INI_ID (
    P_HDD_SN INTEGER,
    P_NAME VARCHAR(20))
RETURNS (
    R_INI_ID SMALLINT)
AS
begin 
    SELECT ID FROM INI WHERE HDD_SN = :P_HDD_SN INTO :R_INI_ID; 
 
    if (R_INI_ID IS NULL) then BEGIN 
        R_INI_ID = GEN_ID(GEN_INI_ID, 1); 
        INSERT INTO INI (ID, NAME, HDD_SN) 
        VALUES(:R_INI_ID,:P_NAME,:P_HDD_SN); 
    END 
end^


ALTER PROCEDURE GET_INV_PO_SIMPLE (
    P_FILTER VARCHAR(1000),
    P_FLAG_OST_IZL INTEGER,
    P_FLAG_MINUS INTEGER,
    P_BROI_ZNACI SMALLINT)
RETURNS (
    R_OPR_ID INTEGER,
    R_INV_ID INTEGER,
    R_INV_TIP SMALLINT,
    R_OPR_DATE DATE,
    R_USER_ID INTEGER,
    R_USER_NAME VARCHAR(30),
    R_SUMA_LIPSA DOUBLE PRECISION,
    R_SUMA_IZLISHAK DOUBLE PRECISION,
    R_SKLAD_ID INTEGER,
    R_SKLAD_NAME VARCHAR(30),
    R_DATE_TIME TIMESTAMP,
    R_COMMENT BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    R_SUMA_MINUS DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER,
    R_KOL_S DOUBLE PRECISION,
    R_KOL_F DOUBLE PRECISION,
    R_KOL2_S DOUBLE PRECISION,
    R_KOL2_F DOUBLE PRECISION,
    R_CENA_S DOUBLE PRECISION,
    R_CENA_F DOUBLE PRECISION,
    R_SIMPLE_NAME VARCHAR(100),
    R_CODE VARCHAR(50),
    R_ME VARCHAR(2),
    R_ME2 VARCHAR(2),
    R_GR_NAME VARCHAR(50),
    R_KOL_IZLISHACI DOUBLE PRECISION,
    R_KOL_LIPSI DOUBLE PRECISION,
    R_SUMA_F DOUBLE PRECISION,
    R_SUMA_S DOUBLE PRECISION)
AS
DECLARE VARIABLE L_OPR_ID INTEGER; 
BEGIN 
    FOR EXECUTE STATEMENT 
        'SELECT 
            OPR.ID 
        FROM 
            OPR 
        WHERE 
            OPR.OPR_TIP = 3 AND 
            NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) AND ' ||:P_FILTER || '(1=1)' 
    INTO 
        :L_OPR_ID 
    DO BEGIN 
        SELECT 
            INV.ID, 
            INV.TIP, 
            COALESCE(INV.SUMA_LIPSA,0) as SUMA_LIPSA, 
            COALESCE(INV.SUMA_IZLISHAK,0)as SUMA_IZLISHAK 
        FROM 
            INV 
        WHERE 
            INV.OPR_ID =:L_OPR_ID 
        INTO 
            :R_INV_ID,:R_INV_TIP,:R_SUMA_LIPSA,:R_SUMA_IZLISHAK; 
 
        SELECT 
            OPR.ID AS OPR_ID, 
            OPR.OPR_DATE AS OPR_DATE, 
            OPR.USER_ID, 
            COALESCE("USER".NAME ,'????')AS USERNAME, 
            OPR.SKLAD_ID, 
            SKLAD.NAME, 
            OPR.DATETIME 
        FROM 
            OPR 
            LEFT JOIN "USER" ON OPR.USER_ID = "USER".ID 
            LEFT JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
        WHERE 
            OPR.ID =:L_OPR_ID 
        INTO :R_OPR_ID,:R_OPR_DATE,:R_USER_ID,:R_USER_NAME,:R_SKLAD_ID,:R_SKLAD_NAME,:R_DATE_TIME; 
 
        SELECT 
            SUM(INV_OPIS.KOL_S * INV_OPIS.CENA_S) 
        FROM 
            INV_OPIS 
        WHERE 
            INV_OPIS.OPR_ID =:L_OPR_ID AND INV_OPIS.KOL_S < 0.00 AND  (:P_FLAG_OST_IZL) <> 0 
        INTO 
            :R_SUMA_MINUS; 
 
        FOR SELECT 
            OP.SIMPLE_ID, 
            OP.KOL_S, 
            OP.KOL_F, 
            OP.KOL2_S, 
            OP.KOL2_F, 
            ROUND(OP.CENA_S,:P_BROI_ZNACI), 
            OP.CENA_F, 
            SIMPLE.NAME, 
            SIMPLE.CODE, 
            ME.NAME, 
            ME2.NAME, 
            SELEKCIQ.NAME 
        FROM 
            INV_OPIS OP 
            INNER JOIN SIMPLE ON SIMPLE.ID = OP.SIMPLE_ID AND OP.OPR_ID = :L_OPR_ID 
            INNER JOIN ME ON ME.ID = SIMPLE.ME_ID 
            LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
            LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
 
        INTO 
        :R_SIMPLE_ID,:R_KOL_S,:R_KOL_F,:R_KOL2_S,:R_KOL2_F,:R_CENA_S,:R_CENA_F,:R_SIMPLE_NAME, 
        :R_CODE,:R_ME,:R_ME2,:R_GR_NAME 
 
        DO BEGIN 
            R_KOL_IZLISHACI = NULL; 
            R_KOL_LIPSI = NULL; 
            R_SUMA_F = ROUND(R_KOL_F * R_CENA_F, 2); 
            R_SUMA_S = NULL; 
 
            IF (R_KOL_S > R_KOL_F) THEN BEGIN 
                R_KOL_LIPSI = ROUND(R_KOL_S - R_KOL_F, 5); 
                R_SUMA_S = ROUND(R_KOL_S * R_CENA_S, 2); 
            END 
            ELSE IF (R_KOL_F > R_KOL_S) THEN BEGIN 
                IF (R_KOL_S < 0.00) THEN BEGIN 
                    IF (P_FLAG_MINUS = 0) THEN 
                        R_KOL_S = 0.00; 
 
                    R_KOL_IZLISHACI = ROUND(R_KOL_F - R_KOL_S, 5); 
 
                    IF (P_FLAG_OST_IZL IN (1,2)) THEN 
                        R_CENA_S = IIF(R_CENA_S > 0.00, R_CENA_S, R_CENA_F); 
 
                    IF (P_FLAG_OST_IZL = 1) THEN BEGIN 
                        R_SUMA_S = ROUND(ABS(R_KOL_S) * R_CENA_S, 2); 
                    END 
                    ELSE IF (P_FLAG_OST_IZL = 2) THEN BEGIN 
                        R_SUMA_S = ROUND(R_KOL_S * R_CENA_S, 2); 
                    END 
                    ELSE 
                        R_SUMA_S = 0.00; 
                END 
                ELSE BEGIN 
                    R_SUMA_S = ROUND(R_KOL_S * R_CENA_S, 2); 
                    R_KOL_IZLISHACI = ROUND(R_KOL_F - R_KOL_S, 5); 
                END 
            END 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_INV_RAZ (
    P_OPR_INV_ID INTEGER,
    P_FLAG_MINUS SMALLINT,
    P_FLAG_OST_IZL SMALLINT,
    P_BROI_ZNACI SMALLINT)
RETURNS (
    R_KOL_IZLISHACI DOUBLE PRECISION,
    R_KOL_LIPSI DOUBLE PRECISION,
    R_KOL_S DOUBLE PRECISION,
    R_KOL_F DOUBLE PRECISION,
    R_KOL2_S DOUBLE PRECISION,
    R_KOL2_F DOUBLE PRECISION,
    R_CENA_S DOUBLE PRECISION,
    R_CENA_F DOUBLE PRECISION,
    R_SUMA_S DOUBLE PRECISION,
    R_SUMA_F DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_CODE DOM_CHAR_50,
    R_ME CHAR(2),
    R_ME2 CHAR(2),
    R_GR_NAME VARCHAR(50),
    R_SIMPLE_CODE2 TYPE OF DOM_CHAR_50)
AS
BEGIN 
/* 
P_FLAG_MINUS - ДАЛИ ДА ЗАМЕСТВА ТЪРСЕНЕТО ОТРИЦАТЕЛНО КОЛИЧЕСТВО С 0.00 ИЛИ ДА ГО ПОКАЗВА 
0 ЗАМЕСТВА С 0.00, 1 ПОКАЗВА ТЪРСЕНОТО. 
 
P_FLAG_OST_IZL - ИНВЕНТАРИЗАЦИЯТА ПРИ ОТРИЦАТЕЛНО ТЪРСЕНО КОЛИЕСТВО ДО НАМЕРЕНО 0.00 ИЛИ > 0, 
ОТРИЦАТЕЛНОТО КОЛИЧЕСТВО НЕ ГО ЗАПИСВА В БАЗАТА. САМО ПОЛОЖИТЕЛНО НАМЕРЕНОТО. 
ПРИ 1 ТОЗИ ФЛАГ ДОБАВЯ СТОЙНОСТТА НА ОТРИЦАТЕЛНОТО КОЛИЧЕСТВО КЪМ ИЗЛИШЪЦИТЕ И ОСТОЙНОСТЯВА 
СУМА ТЪРСЕНО, КОЯТО В МОМЕНТА Е 0.. ПО АБСОЛЮТНАТА СТОЙНОСТ НА КОЛИЧЕСТВОТО И ЦЕНАТА. 
ПРИ 2 ТОЗИ ФЛАГ ДОБАВЯ СТОЙНОСТТА С ЗНАК МИНУС. 
ВАЖИ САМО ЗА СПРАВКАТА. САМИТЕ ПАРТИДИ И КОЛИЧЕСТВ ВЛЕЗНАЛИ В БАЗАТА СА САМО ТЕЗИ 
НАМЕРЕНИ НАД 0.00. 
РАБОТИ САМО АКО P_FLAG_MINUS = 1, АКО P_FLAG_MINUS Е 0, ТЪРСЕНОТО СЕ ЗАМЕСТВА С 0.00 ЗА ОТРИЦАТЕЛНИТЕ КОЛИЧЕСТВА И НЯМА 
ДА БЪДЕ ОСТОЙНОСТЕНО. 
*/ 
 
    FOR SELECT 
        OP.SIMPLE_ID, 
        OP.KOL_S, 
        OP.KOL_F, 
        OP.KOL2_S, 
        OP.KOL2_F, 
        round(OP.CENA_S,:P_BROI_ZNACI), 
        OP.CENA_F, 
        SIMPLE.NAME, 
        SIMPLE.CODE, 
        ME.NAME, 
        ME2.NAME, 
        SELEKCIQ.NAME, 
        SIMPLE.CODE2 
    FROM 
        INV_OPIS OP INNER JOIN SIMPLE ON SIMPLE.ID = OP.SIMPLE_ID AND OP.OPR_ID = :P_OPR_INV_ID 
        INNER JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
 
    INTO 
        :R_SIMPLE_ID,:R_KOL_S,:R_KOL_F,:R_KOL2_S,:R_KOL2_F,:R_CENA_S,:R_CENA_F,:R_SIMPLE_NAME, 
        :R_CODE,:R_ME,:R_ME2,:R_GR_NAME, :R_SIMPLE_CODE2 
    DO BEGIN 
        R_KOL_IZLISHACI = NULL; 
        R_KOL_LIPSI = NULL; 
        R_SUMA_F = ROUND(R_KOL_F * R_CENA_F, 2); 
        R_SUMA_S = NULL; 
 
        IF (R_KOL_S > R_KOL_F) THEN BEGIN 
            R_KOL_LIPSI = ROUND(R_KOL_S - R_KOL_F, 5); 
            R_SUMA_S = ROUND(R_KOL_S * R_CENA_S, 2); 
        END 
        ELSE IF (R_KOL_F > R_KOL_S) THEN BEGIN 
            IF (R_KOL_S < 0.00) THEN BEGIN 
                IF (P_FLAG_MINUS = 0) THEN 
                    R_KOL_S = 0.00; 
 
                R_KOL_IZLISHACI = ROUND(R_KOL_F - R_KOL_S, 5); 
                IF (P_FLAG_OST_IZL IN (1,2)) THEN 
                    R_CENA_S = IIF(R_CENA_S > 0.00, R_CENA_S, R_CENA_F); 
 
                IF (P_FLAG_OST_IZL = 1) THEN BEGIN 
                    R_SUMA_S = ROUND(ABS(R_KOL_S) * R_CENA_S, 2); 
                END 
                ELSE IF (P_FLAG_OST_IZL = 2) THEN BEGIN 
                    R_SUMA_S = ROUND(R_KOL_S * R_CENA_S, 2); 
                END ELSE 
                    R_SUMA_S = 0.00; 
 
            END 
            ELSE BEGIN 
                R_SUMA_S = ROUND(R_KOL_S * R_CENA_S, 2); 
                R_KOL_IZLISHACI = ROUND(R_KOL_F - R_KOL_S, 5); 
            END 
        END ELSE R_SUMA_S = ROUND(R_KOL_S * R_CENA_S, 2); 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_INV_RAZ_V1 (
    P_OPR_INV_ID INTEGER,
    P_FLAG_MINUS SMALLINT,
    P_FLAG_OST_IZL SMALLINT,
    P_BROI_ZNACI SMALLINT,
    P_FLAG_DETAILED TYPE OF DOM_SMAL_INT)
RETURNS (
    R_KOL_IZLISHACI DOUBLE PRECISION,
    R_KOL_LIPSI DOUBLE PRECISION,
    R_KOL_S DOUBLE PRECISION,
    R_KOL_F DOUBLE PRECISION,
    R_KOL2_S DOUBLE PRECISION,
    R_KOL2_F DOUBLE PRECISION,
    R_CENA_S DOUBLE PRECISION,
    R_CENA_F DOUBLE PRECISION,
    R_SUMA_S DOUBLE PRECISION,
    R_SUMA_F DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_CODE DOM_CHAR_50,
    R_ME CHAR(2),
    R_ME2 CHAR(2),
    R_GR_NAME VARCHAR(50),
    R_SIMPLE_CODE2 TYPE OF DOM_CHAR_50,
    R_KOL_PREVIOUS_F TYPE OF DOM_KOL,
    R_KOL_IN TYPE OF DOM_KOL,
    R_KOL_OUT TYPE OF DOM_KOL)
AS
DECLARE VARIABLE L_PREVIOUS_OPR_INV TYPE OF DOM_KEY; 
BEGIN 
/* 
P_FLAG_MINUS - ДАЛИ ДА ЗАМЕСТВА ТЪРСЕНЕТО ОТРИЦАТЕЛНО КОЛИЧЕСТВО С 0.00 ИЛИ ДА ГО ПОКАЗВА 
0 ЗАМЕСТВА С 0.00, 1 ПОКАЗВА ТЪРСЕНОТО. 
 
P_FLAG_OST_IZL - ИНВЕНТАРИЗАЦИЯТА ПРИ ОТРИЦАТЕЛНО ТЪРСЕНО КОЛИЕСТВО ДО НАМЕРЕНО 0.00 ИЛИ > 0, 
ОТРИЦАТЕЛНОТО КОЛИЧЕСТВО НЕ ГО ЗАПИСВА В БАЗАТА. САМО ПОЛОЖИТЕЛНО НАМЕРЕНОТО. 
ПРИ 1 ТОЗИ ФЛАГ ДОБАВЯ СТОЙНОСТТА НА ОТРИЦАТЕЛНОТО КОЛИЧЕСТВО КЪМ ИЗЛИШЪЦИТЕ И ОСТОЙНОСТЯВА 
СУМА ТЪРСЕНО, КОЯТО В МОМЕНТА Е 0.. ПО АБСОЛЮТНАТА СТОЙНОСТ НА КОЛИЧЕСТВОТО И ЦЕНАТА. 
ПРИ 2 ТОЗИ ФЛАГ ДОБАВЯ СТОЙНОСТТА С ЗНАК МИНУС. 
ВАЖИ САМО ЗА СПРАВКАТА. САМИТЕ ПАРТИДИ И КОЛИЧЕСТВ ВЛЕЗНАЛИ В БАЗАТА СА САМО ТЕЗИ 
НАМЕРЕНИ НАД 0.00. 
РАБОТИ САМО АКО P_FLAG_MINUS = 1, АКО P_FLAG_MINUS Е 0, ТЪРСЕНОТО СЕ ЗАМЕСТВА С 0.00 ЗА ОТРИЦАТЕЛНИТЕ КОЛИЧЕСТВА И НЯМА 
ДА БЪДЕ ОСТОЙНОСТЕНО. 
*/ 
 
    FOR SELECT 
        OP.SIMPLE_ID, 
        OP.KOL_S, 
        OP.KOL_F, 
        OP.KOL2_S, 
        OP.KOL2_F, 
        round(OP.CENA_S,:P_BROI_ZNACI), 
        OP.CENA_F, 
        SIMPLE.NAME, 
        SIMPLE.CODE, 
        ME.NAME, 
        ME2.NAME, 
        SELEKCIQ.NAME, 
        SIMPLE.CODE2 
    FROM 
        INV_OPIS OP INNER JOIN SIMPLE ON SIMPLE.ID = OP.SIMPLE_ID AND OP.OPR_ID = :P_OPR_INV_ID 
        INNER JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
 
    INTO 
        :R_SIMPLE_ID,:R_KOL_S,:R_KOL_F,:R_KOL2_S,:R_KOL2_F,:R_CENA_S,:R_CENA_F,:R_SIMPLE_NAME, 
        :R_CODE,:R_ME,:R_ME2,:R_GR_NAME, :R_SIMPLE_CODE2 
    DO BEGIN 
        R_KOL_IZLISHACI = NULL; 
        R_KOL_LIPSI = NULL; 
        R_SUMA_F = ROUND(R_KOL_F * R_CENA_F, 2); 
        R_SUMA_S = NULL; 
 
        IF (R_KOL_S > R_KOL_F) THEN BEGIN 
            R_KOL_LIPSI = ROUND(R_KOL_S - R_KOL_F, 5); 
            R_SUMA_S = ROUND(R_KOL_S * R_CENA_S, 2); 
        END 
        ELSE IF (R_KOL_F > R_KOL_S) THEN BEGIN 
            IF (R_KOL_S < 0.00) THEN BEGIN 
                IF (P_FLAG_MINUS = 0) THEN 
                    R_KOL_S = 0.00; 
 
                R_KOL_IZLISHACI = ROUND(R_KOL_F - R_KOL_S, 5); 
                IF (P_FLAG_OST_IZL IN (1,2)) THEN 
                    R_CENA_S = IIF(R_CENA_S > 0.00, R_CENA_S, R_CENA_F); 
 
                IF (P_FLAG_OST_IZL = 1) THEN BEGIN 
                    R_SUMA_S = ROUND(ABS(R_KOL_S) * R_CENA_S, 2); 
                END 
                ELSE IF (P_FLAG_OST_IZL = 2) THEN BEGIN 
                    R_SUMA_S = ROUND(R_KOL_S * R_CENA_S, 2); 
                END ELSE 
                    R_SUMA_S = 0.00; 
 
            END 
            ELSE BEGIN 
                R_SUMA_S = ROUND(R_KOL_S * R_CENA_S, 2); 
                R_KOL_IZLISHACI = ROUND(R_KOL_F - R_KOL_S, 5); 
            END 
        END ELSE R_SUMA_S = ROUND(R_KOL_S * R_CENA_S, 2); 
        IF (:P_FLAG_DETAILED = 1) THEN BEGIN 
            SELECT FIRST 1 
                INV_OPIS.OPR_ID 
            FROM 
                INV_OPIS 
            WHERE 
                INV_OPIS.OPR_ID <:P_OPR_INV_ID 
            ORDER BY INV_OPIS.OPR_ID DESC 
            INTO :L_PREVIOUS_OPR_INV; 
 
            IF (:L_PREVIOUS_OPR_INV IS NOT NULL) then begin 
                SELECT FIRST 1 
                    INV_OPIS.KOL_F 
                FROM 
                    INV_OPIS 
                WHERE 
                    INV_OPIS.SIMPLE_ID =:r_simple_id 
                    and inv_opis.OPR_ID =:L_PREVIOUS_OPR_INV 
                INTO :R_KOL_PREVIOUS_F; 
 
                SELECT 
                    SUM(IN_EL.KOL) 
                FROM 
                    IN_EL 
                WHERE 
                    IN_EL.SIMPLE_ID =:R_SIMPLE_ID 
                    AND IN_EL.OPR_ID <:P_OPR_INV_ID AND IN_EL.OPR_ID >:L_PREVIOUS_OPR_INV 
                    AND NOT EXISTS (SELECT OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = IN_EL.OPR_ID) 
                INTO :R_KOL_IN; 
 
                 SELECT 
                    SUM(OUT_EL.KOL) 
                FROM 
                    OUT_EL 
                WHERE 
                    OUT_EL.SIMPLE_ID =:R_SIMPLE_ID 
                    AND OUT_EL.OPR_ID <:P_OPR_INV_ID AND OUT_EL.OPR_ID >:L_PREVIOUS_OPR_INV 
                    AND NOT EXISTS (SELECT OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OUT_EL.OPR_ID) 
                INTO :R_KOL_OUT; 
            end 
 
        END 
 
        SUSPEND; 
    END 
END;^


ALTER PROCEDURE GET_IZP_OPR (
    P_ID_OPR INTEGER,
    P_CL_ID INTEGER,
    P_TYPE INTEGER)
RETURNS (
    ID INTEGER,
    IZP_ID INTEGER,
    IN_DATETIME DATE,
    OPR_DATETIME TIMESTAMP,
    SUMA DOUBLE PRECISION,
    USER_NAME VARCHAR(30),
    OT_SKLAD_ID SMALLINT,
    OT_SKLAD VARCHAR(20),
    KLI_NAME VARCHAR(100),
    IZP_TIP VARCHAR(30),
    ANULIRANA INTEGER,
    COMMENT_TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_SUMA_OS DOUBLE PRECISION)
AS
declare variable L_KOL double precision; 
declare variable L_CENA double precision; 
declare variable L_CENA_OS double precision; 
BEGIN 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        OPR.SUMA, 
        OPR.SKLAD_ID, 
        IZP.ID, 
        "USER".NAME, 
        SKLAD.NAME, 
        IZP_TIP.NAME, 
        COALESCE(KLI.NAME,'Без клиент'), 
        case when (exists (select opr_anul.OPR_ID from opr_anul where opr_anul.AN_OPR_ID = opr.id)) then 1 else 0 end 
    FROM 
        OPR  INNER JOIN IZP ON (OPR.ID = :P_ID_OPR AND OPR.ID = IZP.OPR_ID) 
        INNER JOIN "USER" ON OPR.USER_ID = "USER".ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
        INNER JOIN IZP_TIP ON IZP.IZP_TIP_ID = IZP_TIP.ID 
        LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
 
    UNION ALL 
 
    SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        OPR.SUMA, 
        OPR.SKLAD_ID, 
        IZP.ID, 
        "USER".NAME, 
        SKLAD.NAME, 
        IZP_TIP.NAME, 
        COALESCE(KLI.NAME,'Без клиент'), 
        1 
    FROM 
        OPR_ANUL INNER JOIN OPR ON OPR.ID = OPR_ANUL.OPR_ID 
        INNER JOIN IZP ON (OPR.ID = :P_ID_OPR AND opr_anul.AN_OPR_ID = IZP.OPR_ID) 
        INNER JOIN "USER" ON OPR.USER_ID = "USER".ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
        INNER JOIN IZP_TIP ON IZP.IZP_TIP_ID = IZP_TIP.ID 
        LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
 
    UNION ALL 
 
    SELECT 
        OPR.ID, 
        OPR_EDIT.OPR_DATE, 
        OPR.DATETIME, 
        OPR_EDIT.SUMA, 
        OPR_EDIT.SKLAD_ID, 
        IZP.ID, 
        "USER".NAME, 
        SKLAD.NAME, 
        IZP_TIP.NAME, 
        COALESCE(KLI.NAME,'Без клиент'), 
        2 
    FROM 
        OPR_EDIT INNER JOIN OPR ON OPR.ID = OPR_EDIT.OPR_ID 
        INNER JOIN IZP ON (OPR.ID = :P_ID_OPR AND OPR_EDIT.ED_OPR_ID = IZP.OPR_ID) 
        INNER JOIN "USER" ON OPR_EDIT.USER_ID = "USER".ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR_EDIT.SKLAD_ID 
        INNER JOIN IZP_TIP ON IZP.IZP_TIP_ID = IZP_TIP.ID 
        LEFT JOIN KLI ON KLI.ID = OPR_EDIT.KLI_ID 
    INTO 
        :ID,:IN_DATETIME,:OPR_DATETIME,:SUMA,:OT_SKLAD_ID,:IZP_ID,:USER_NAME,:OT_SKLAD, 
        :IZP_TIP,:KLI_NAME,:ANULIRANA 
    DO BEGIN 
        COMMENT_TEXT = NULL; 
 
        SELECT FIRST 1 
            COMMENTS.NOTE 
        FROM 
            COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
        WHERE 
            COMMENT_OPR_NODE.OPR_ID = :ID 
        ORDER BY 
            COMMENT_OPR_NODE.ID DESC 
        INTO :COMMENT_TEXT; 
 
        IF (P_TYPE = 0) THEN BEGIN 
            SELECT 
                SUM(SUMA_SR) 
            FROM OUT_EL 
            WHERE OPR_ID = :P_ID_OPR 
            HAVING SUM(SUMA_SR) > 0 
 
            UNION 
 
            SELECT 
                SUM(SUMA_SR) 
            FROM 
                OLD_OUT_EL INNER JOIN OPR_ANUL ON (OPR_ANUL.AN_OPR_ID = :P_ID_OPR AND OPR_ANUL.OPR_ID = OLD_OUT_EL.OPR_ID) 
            HAVING SUM(SUMA_SR) > 0 
            INTO :SUMA; 
        END 
 
        IF (P_TYPE = 1) THEN BEGIN 
            SELECT 
                SUM(SUMA) 
            FROM OUT_EL 
            WHERE OPR_ID = :P_ID_OPR 
            HAVING SUM(SUMA_SR) > 0 
 
            UNION 
 
            SELECT 
                SUM(SUMA) 
            FROM OLD_OUT_EL INNER JOIN OPR_ANUL ON (OPR_ANUL.AN_OPR_ID = :P_ID_OPR AND OPR_ANUL.OPR_ID = OLD_OUT_EL.OPR_ID) 
            HAVING SUM(SUMA_SR) > 0 
 
            INTO :SUMA; 
        END 
 
        IF (P_TYPE = 2) THEN BEGIN 
            SUMA = 0; 
            FOR SELECT 
                OUT_EL.KOL, 
                --OUT_EL.SIMPLE_ID, 
                PROD_CENI_EL.CENA_CL, 
                PROD_CENI_EL.CENA_OS 
            FROM 
                OUT_EL 
                INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID 
            WHERE OPR_ID = :P_ID_OPR 
 
            UNION 
 
            SELECT 
                OLD_OUT_EL.KOL, 
                --OLD_OUT_EL.SIMPLE_ID, 
                OLD_OUT_EL.CENA_CL, 
                OLD_OUT_EL.CENA_OS 
            FROM 
                OLD_OUT_EL INNER JOIN OPR_ANUL ON (OPR_ANUL.AN_OPR_ID = :P_ID_OPR AND OPR_ANUL.OPR_ID = OLD_OUT_EL.OPR_ID) 
            INTO 
                :L_KOL,:L_CENA,:L_CENA_OS 
            DO BEGIN 
                --IF (L_CENA IS NULL) THEN 
                --    EXECUTE PROCEDURE GET_CENA_CL(:P_CL_ID,:L_SIMPLE_ID) RETURNING_VALUES(L_CENA); 
 
                SUMA = ROUNDD(SUMA + ROUNDD(:L_CENA * :L_KOL)); 
                R_SUMA_OS = ROUNDD(R_SUMA_OS + ROUNDD(L_CENA_OS * L_KOL)); 
            END 
        END 
 
        IF (P_TYPE = 3) THEN BEGIN 
            SELECT 
                SUM(SUMA_FR) 
            FROM OUT_EL 
            WHERE OPR_ID = :P_ID_OPR 
            HAVING SUM(SUMA_FR) > 0 
 
            UNION 
 
            SELECT 
                SUM(SUMA_FR) 
            FROM 
                OLD_OUT_EL INNER JOIN OPR_ANUL ON (OPR_ANUL.AN_OPR_ID = :P_ID_OPR AND OPR_ANUL.OPR_ID = OLD_OUT_EL.OPR_ID) 
            HAVING SUM(SUMA_FR) > 0 
            INTO :SUMA; 
        END 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_IZPISVANIA (
    ID INTEGER,
    CL_ID INTEGER,
    P_TYPEP INTEGER)
RETURNS (
    CODE DOM_CHAR_50,
    NAME VARCHAR(100),
    MENAME CHAR(2),
    KOL DOUBLE PRECISION,
    CENA DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    KOL_RAZ DOUBLE PRECISION,
    NAME_RAZ VARCHAR(30),
    NOM_DOK VARCHAR(100),
    CENA_OS DOUBLE PRECISION,
    SUMA_OS DOUBLE PRECISION,
    R_PN VARCHAR(2000),
    R_SROK TYPE OF DOM_CHAR_100,
    R_TEMPERATURE TYPE OF DOM_CHAR_20,
    R_EXT1 TYPE OF DOM_CHAR_300)
AS
declare variable L_OUT_ID integer; 
declare variable L_GODNOST smallint; 
declare variable L_NOM varchar(20); 
declare variable L_CENA double precision; 
declare variable L_SIMPLE_ID integer; 
declare variable L_CENA_CL double precision; 
declare variable L_CENA_OS double precision; 
declare variable L_RSN char(1); 
declare variable L_PN varchar(300); 
declare variable L_SROK DOM_CHAR_10; 
BEGIN 
   FOR SELECT 
        OUT_EL.ID, 
        OUT_EL.KOL, 
 
        CAST(case when OUT_EL.KOL = 0 then 0 
                  else 
                    (case 
                     when :p_typep = 0 then ROUND5(OUT_EL.SUMA_SR / OUT_EL.KOL) 
                     when :p_typep = 1 then ROUND5(OUT_EL.SUMA / OUT_EL.KOL) 
                     when :p_typep = 2 then ROUND5(OUT_EL.SUMA / OUT_EL.KOL) 
                     when :p_typep = 3 then ROUND5(OUT_EL.SUMA_FR / OUT_EL.KOL) end 
                    ) 
                  end as double precision), 
--        CAST(CASE WHEN OUT_EL.KOL = 0 THEN 0 ELSE ROUND5(OUT_EL.SUMA / OUT_EL.KOL) END AS DOUBLE PRECISION), 
 
        cast(case 
              when :p_typep = 0 then OUT_EL.SUMA_SR 
              when :p_typep = 1 then OUT_EL.SUMA 
              when :p_typep = 2 then OUT_EL.SUMA 
              when :p_typep = 3 then OUT_EL.SUMA_FR end as double precision), 
 
--        CAST(CASE WHEN :CL_ID = 0 THEN OUT_EL.SUMA ELSE -1 END AS DOUBLE PRECISION), 
 
        SIMPLE.ID, 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        SIMPLE.GODNOST, 
        ME.NAME, 
        OUT_EL_RAZ_NODE.KOL, 
        RAZ_ELEMENT.NAME, 
        PROD_CENI_EL.CENA_CL, 
        PROD_CENI_EL.CENA_OS, 
        SIMPLE.RSN, 
        SIMPLE.TEMPERATURA, 
        SIMPLE.EXT1 
    FROM 
        OUT_EL INNER JOIN SIMPLE ON (OUT_EL.OPR_ID = :ID AND SIMPLE.ID = OUT_EL.SIMPLE_ID) 
        INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN OUT_EL_RAZ_NODE ON OUT_EL_RAZ_NODE.OUT_EL_ID = OUT_EL.ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = OUT_EL_RAZ_NODE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZFASOVKA.RAZ_ELEMENT_ID = RAZ_ELEMENT.ID 
 
    UNION ALL 
 
    SELECT 
        CAST(0 AS INTEGER), 
        OLD_OUT_EL.KOL, 
        CAST(CASE WHEN OLD_OUT_EL.KOL = 0 THEN 0 ELSE ROUND5(OLD_OUT_EL.SUMA/OLD_OUT_EL.KOL) END AS DOUBLE PRECISION), 
        CAST(CASE WHEN :P_TYPEP = 0 THEN OLD_OUT_EL.SUMA_SR 
                  when :P_TYPEP = 1 THEN OLD_OUT_EL.SUMA 
                  when :P_TYPEP = 2 THEN -1 
                  when :P_TYPEP = 3 THEN OLD_OUT_EL.SUMA_FR END AS DOUBLE PRECISION), 
        SIMPLE.ID, 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        CAST(0 AS SMALLINT), 
        ME.NAME, 
        CAST(0 AS DOUBLE PRECISION), 
        CAST('' AS VARCHAR(30)), 
        OLD_OUT_EL.CENA_CL, 
        OLD_OUT_EL.CENA_OS, 
        SIMPLE.RSN, 
        SIMPLE.TEMPERATURA, 
        SIMPLE.EXT1 
    FROM 
        OLD_OUT_EL INNER JOIN OPR_ANUL ON (OPR_ANUL.AN_OPR_ID = :ID AND OLD_OUT_EL.OPR_ID = OPR_ANUL.OPR_ID) 
        INNER JOIN SIMPLE ON SIMPLE.ID = OLD_OUT_EL.SIMPLE_ID 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
 
    UNION ALL 
 
    SELECT 
        CAST(0 AS INTEGER), 
        OLD_OUT_EL.KOL, 
        CAST(CASE WHEN OLD_OUT_EL.KOL = 0 THEN 0 ELSE ROUND5(OLD_OUT_EL.SUMA/OLD_OUT_EL.KOL) END AS DOUBLE PRECISION), 
        CAST(CASE WHEN :P_TYPEP = 0 THEN OLD_OUT_EL.SUMA_SR 
                  when :P_TYPEP = 1 THEN OLD_OUT_EL.SUMA 
                  when :P_TYPEP = 2 THEN -1 
                  when :P_TYPEP = 3 THEN OLD_OUT_EL.SUMA_FR END AS DOUBLE PRECISION), 
        SIMPLE.ID, 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        CAST(0 AS SMALLINT), 
        ME.NAME, 
        CAST(0 AS DOUBLE PRECISION), 
        CAST('' AS VARCHAR(30)), 
        OLD_OUT_EL.CENA_CL, 
        OLD_OUT_EL.CENA_OS, 
        SIMPLE.RSN, 
        SIMPLE.TEMPERATURA, 
        SIMPLE.EXT1 
    FROM 
        OLD_OUT_EL INNER JOIN OPR_ANUL ON (OPR_ANUL.OPR_ID = :ID AND OLD_OUT_EL.OPR_ID = OPR_ANUL.OPR_ID) 
        INNER JOIN SIMPLE ON SIMPLE.ID = OLD_OUT_EL.SIMPLE_ID 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
 
    UNION ALL 
 
    SELECT 
        CAST(0 AS INTEGER), 
        OLD_OUT_EL.KOL, 
        CAST(CASE WHEN OLD_OUT_EL.KOL = 0 THEN 0 ELSE ROUND5(OLD_OUT_EL.SUMA/OLD_OUT_EL.KOL) END AS DOUBLE PRECISION), 
        CAST(CASE WHEN :P_TYPEP = 0 THEN OLD_OUT_EL.SUMA_SR 
                  when :P_TYPEP = 1 THEN OLD_OUT_EL.SUMA 
                  when :P_TYPEP = 2 THEN -1 
                  WHEN :P_TYPEP = 3 THEN OLD_OUT_EL.SUMA_FR END AS DOUBLE PRECISION), 
        SIMPLE.ID, 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        CAST(0 AS SMALLINT), 
        ME.NAME, 
        CAST(0 AS DOUBLE PRECISION), 
        CAST('' AS VARCHAR(30)), 
        OLD_OUT_EL.CENA_CL, 
        OLD_OUT_EL.CENA_OS, 
        SIMPLE.RSN, 
        SIMPLE.TEMPERATURA, 
        SIMPLE.EXT1 
    FROM 
        OLD_OUT_EL INNER JOIN OPR_EDIT ON (OPR_EDIT.OPR_ID = :ID AND OLD_OUT_EL.OPR_ID = OPR_EDIT.OPR_ID) 
        INNER JOIN SIMPLE ON SIMPLE.ID = OLD_OUT_EL.SIMPLE_ID 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
    INTO 
      :L_OUT_ID,:KOL,:CENA,:SUMA,:L_SIMPLE_ID,:CODE,:NAME,:L_GODNOST,:MENAME,:KOL_RAZ,:NAME_RAZ,:L_CENA_CL,:L_CENA_OS, :L_RSN, :R_TEMPERATURE, :R_EXT1 
    DO BEGIN 
        R_PN = ''; 
        L_PN = ''; 
 
        NOM_DOK = ''; 
        L_CENA = 0; 
 
        IF (p_typep = 2) THEN BEGIN 
            --EXECUTE PROCEDURE GET_CENA_CL(:CL_ID,:L_SIMPLE_ID) RETURNING_VALUES(L_CENA); 
            SUMA = cast(ROUNDD(:L_CENA_CL*:KOL) as double precision); 
            CENA = cast(:L_CENA_CL as double precision); 
        END 
 
        IF (p_typep = 1) THEN BEGIN 
            if (CENA > 0) then 
             CENA = ROUND5(SUMA / KOL); 
        END 
 
        CENA_OS = COALESCE(L_CENA_OS,0); 
        SUMA_OS = ROUNDD(:L_CENA_OS * :KOL); 
 
        IF (L_GODNOST > 0 ) THEN BEGIN 
            L_NOM = ''; 
            for select distinct 
                DVSK_EL.nom_dok 
            from 
                PARTIDA_OUT_EL_NODE POEN 
                INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = POEN.PARTIDA_NODE_ID 
                INNER JOIN PARTIDA_NAL ON PARTIDA_NAL.ID = PEN.PARTIDA_ID 
                INNER JOIN DVSK_EL ON DVSK_EL.PARTIDA_EL_ID = PARTIDA_NAL.ELEMENT_ID 
            WHERE 
                POEN.OUT_EL_ID = :L_OUT_ID 
            INTO 
                :L_NOM 
            DO BEGIN 
                NOM_DOK = NOM_DOK ||:L_NOM||', '; 
            END 
        END 
 
 
        IF (L_RSN = '2') THEN BEGIN 
            R_PN = ''; 
            L_PN = ''; 
 
            FOR SELECT DISTINCT 
                SERIAL_NUM.SN 
            FROM 
                PARTIDA_OUT_EL_NODE PON INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID 
                INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
                INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID 
            WHERE 
                PON.OUT_EL_ID =:L_OUT_ID 
            INTO 
                :L_PN 
            DO BEGIN 
                R_PN = R_PN ||:L_PN||', '; 
            END 
 
            R_SROK = ''; 
            FOR SELECT DISTINCT 
                SUBSTRING(100+EXTRACT(DAY FROM PE.SROK) FROM 2 FOR 2)||'.'|| 
                SUBSTRING(100+EXTRACT(MONTH FROM PE.SROK) FROM 2 FOR 2)||'.'|| 
                EXTRACT(YEAR FROM PE.SROK) 
            FROM 
                PARTIDA_OUT_EL_NODE POEN 
                INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = POEN.PARTIDA_NODE_ID 
                INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
                INNER JOIN PARTIDA_EL PE ON PE.ID = PN.ELEMENT_ID 
            WHERE 
                POEN.OUT_EL_ID =:L_OUT_ID 
            INTO 
                :L_SROK 
            DO BEGIN 
                IF (L_SROK IS NOT NULL) THEN 
                    R_SROK = R_SROK ||:L_SROK ||', '; 
            END 
 
            /* 
            IF ((R_PN = '') AND (:P_TIP_PN = 0)) THEN 
                SELECT FIRST 1 
                    SERIAL_NUM.SN 
                FROM 
                    PARTIDA_NAL PN INNER JOIN IN_EL ON IN_EL.ID = PN.IN_EL_ID AND IN_EL.SIMPLE_ID =:R_SIMPLE_ID 
                    INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID 
                ORDER BY SERIAL_NUM.ID DESC 
                INTO :R_PN; 
            */ 
        END 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_KLI_CODE_NUM
RETURNS (
    NOM INTEGER)
AS
DECLARE VARIABLE ST VARCHAR(15); 
DECLARE VARIABLE II INTEGER; 
BEGIN 
  FOR SELECT 
    KLI.CODE 
  FROM 
    KLI 
  WHERE 
    KLI.CODE IS NOT NULL 
  INTO :ST 
  DO BEGIN 
    EXECUTE PROCEDURE IS_NUMBER(ST) RETURNING_VALUES :II; 
    IF (II=1) THEN BEGIN 
      NOM = CAST(ST AS INTEGER); 
      SUSPEND; 
    END 
  END 
END^


ALTER PROCEDURE GET_KLI_GROUP (
    P_GROUP_ID INTEGER)
RETURNS (
    R_GROUP_NAME VARCHAR(1024))
AS
DECLARE VARIABLE L_GROUP_ID INTEGER;
DECLARE VARIABLE L_GROUP_NAME VARCHAR(1024);
DECLARE VARIABLE L_PARENT_ID INTEGER;
BEGIN
  SELECT
    KLI_GROUP.ID,
    KLI_GROUP.NAME,
    KLI_GROUP.PARENT
  FROM
    KLI_GROUP
  WHERE
    KLI_GROUP.ID = :P_GROUP_ID
  INTO
    :L_GROUP_ID,  :L_GROUP_NAME, :L_PARENT_ID;
  IF (L_PARENT_ID IS NULL OR L_PARENT_ID = 0) THEN BEGIN
    R_GROUP_NAME = L_GROUP_NAME;
  END
  ELSE BEGIN
    EXECUTE PROCEDURE GET_KLI_GROUP(L_PARENT_ID) RETURNING_VALUES R_GROUP_NAME;
    R_GROUP_NAME = R_GROUP_NAME || '/' || L_GROUP_NAME;
  END
END^


ALTER PROCEDURE GET_KLI_HISTORY (
    P_FROM_DATE DATE,
    P_FILTER_KLI VARCHAR(10000),
    P_FILTER_DATE VARCHAR(100),
    P_FLAG_NO_KLI SMALLINT,
    P_FILTER_OBEKT VARCHAR(10000),
    P_FILTER_RET_STOKA_OBEKT VARCHAR(10000),
    P_FILTER_PAY_OBEKT VARCHAR(10000),
    P_FILTER_RET_STOKA_PAY_OBEKT VARCHAR(10000),
    P_TIP_FILTER SMALLINT,
    P_DATE_PADEJ DATE,
    P_FILTER_ACTIVE_KLI INTEGER)
RETURNS (
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_KLI_CODE VARCHAR(15),
    R_SUMA_NACH_SALDO DOUBLE PRECISION,
    R_SUMA_NACH_DUE DOUBLE PRECISION,
    R_SUMA_NACH_PAY DOUBLE PRECISION,
    R_SUMA_DUE DOUBLE PRECISION,
    R_SUMA_PAY DOUBLE PRECISION,
    R_SUMA_KR_SALDO DOUBLE PRECISION,
    R_KLI_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(100),
    R_KLI_TEL VARCHAR(100),
    R_SUMA_LATE DOUBLE PRECISION,
    R_DAYS_LATE INTEGER,
    R_SUMA_NACH_NERAZCHETENA DOUBLE PRECISION,
    R_SUMA_NERAZCHETENA DOUBLE PRECISION)
AS
declare variable L_SUMA_TEMP double precision; 
declare variable L_SUMA_RET double precision; 
BEGIN 
/*V.5*/ 
    IF ((P_FLAG_NO_KLI = 1) OR (P_FLAG_NO_KLI = 2)) THEN BEGIN 
        R_KLI_ID          = 0; 
        R_KLI_NAME        = ' Без клиент'; 
        R_KLI_CODE        = NULL; 
        R_SUMA_NACH_SALDO = 0; 
        R_SUMA_KR_SALDO   = 0; 
        R_SUMA_DUE        = 0; 
        R_SUMA_PAY        = 0; 
        R_NAME_FAK        = NULL; 
        R_SUMA_NACH_NERAZCHETENA = 0; 
        R_SUMA_NERAZCHETENA = 0; 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA), 0) 
        FROM 
            OPR 
            INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
        WHERE OPR.OPR_TIP = 2 
            AND OPR.KLI_ID IS NULL 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' ||:P_TIP_FILTER || ' IN (0,1))' 
            || :P_FILTER_OBEKT || :P_FILTER_DATE 
        INTO 
            :R_SUMA_PAY; 
 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA), 0) 
        FROM 
            OPR 
        WHERE OPR.OPR_TIP = 26 
            AND OPR.KLI_ID IS NULL 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' ||:P_TIP_FILTER || ' IN (0,1)) ' 
            || :P_FILTER_RET_STOKA_OBEKT 
            || :P_FILTER_DATE 
        INTO 
            :L_SUMA_RET; 
 
        R_SUMA_PAY =COALESCE(:R_SUMA_PAY,0) - COALESCE(:L_SUMA_RET,0); 
 
        R_SUMA_DUE = R_SUMA_PAY; 
        SUSPEND; 
    END 
 
    IF (P_FLAG_NO_KLI = 2) THEN EXIT; 
 
    FOR EXECUTE STATEMENT 
    'SELECT 
        KLI.ID, 
        KLI.NAME, 
        KLI.CODE, 
        FIRMI.NAME_FAK, 
        KLI.TEL 
    FROM 
        KLI INNER JOIN ( 
            SELECT DISTINCT 
                OPR.KLI_ID 
            FROM 
                OPR 
            WHERE 
                OPR.OPR_TIP IN (2, 6, 26, 29, 40, 55, 56, 57, 58, 79) 
                AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)) T ON T.KLI_ID = KLI.ID '||:P_FILTER_KLI ||' 
        LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
    WHERE 
        ' || :P_FILTER_ACTIVE_KLI || ' = 0 OR (' || :P_FILTER_ACTIVE_KLI || ' = 1 AND KLI.KLIENT = ''1'') 
    ORDER BY UPPER(KLI.NAME) ' 
    INTO 
        :R_KLI_ID,:R_KLI_NAME,:R_KLI_CODE,:R_NAME_FAK,:R_KLI_TEL 
    DO BEGIN 
        R_KLI_COMMENT = NULL; 
 
        SELECT FIRST 1 
            COMMENTS.NOTE 
        FROM 
            COMMENTS INNER JOIN COMMENT_KLI_NODE ON COMMENT_KLI_NODE.COMMENT_ID = COMMENTS.ID 
        WHERE 
            COMMENT_KLI_NODE.KLI_ID = :R_KLI_ID 
        ORDER BY 
            COMMENT_KLI_NODE.ID DESC 
        INTO :R_KLI_COMMENT; 
 
        IF (P_FROM_DATE IS NULL) THEN BEGIN 
            R_SUMA_NACH_SALDO = 0; 
            R_SUMA_NACH_DUE = 0; 
            R_SUMA_NACH_PAY = 0; 
            R_SUMA_NACH_NERAZCHETENA = 0; 
        END 
        ELSE BEGIN 
            /*НАЧАЛНО САЛДО*/ 
            L_SUMA_TEMP = 0; 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR 
                INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 2 
                AND OPR.KLI_ID ='||:R_KLI_ID || 
                'AND OPR.OPR_DATE <'''||:P_FROM_DATE || ''' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' ||:P_TIP_FILTER || ' IN (0,1)) ' 
                ||:P_FILTER_OBEKT 
            INTO 
                :R_SUMA_NACH_DUE; 
 
            /*ВРЪЩАНЕ НА СТОКА*/ 
            L_SUMA_TEMP = 0; 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR 
            WHERE 
                OPR.OPR_TIP = 26 
                AND OPR.KLI_ID = '|| :R_KLI_ID || 
                'AND OPR.OPR_DATE < '''||:P_FROM_DATE || ''' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' ||:P_TIP_FILTER || ' IN (0,1))' 
                ||:P_FILTER_RET_STOKA_OBEKT 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE - L_SUMA_TEMP); 
 
 
            /*КРЕДИТНО ИЗВЕСТИЕ*/ 
 
            L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 40 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND :P_TIP_FILTER IN (0,1) 
                AND NOT EXISTS (SELECT RET_PROD_RET_FAK_PROD_KI_NODE.ID FROM RET_PROD_RET_FAK_PROD_KI_NODE WHERE RET_PROD_RET_FAK_PROD_KI_NODE.OPR_RET_FAK_PROD_KI_ID = OPR.ID) 
                AND NOT EXISTS (SELECT KI_PROD_SUMA_EL.ID FROM KI_PROD_SUMA_EL WHERE KI_PROD_SUMA_EL.SUMI_ID = SUMI.ID) 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE - L_SUMA_TEMP); 
 
 
            L_SUMA_TEMP = 0; 
            SELECT 
              COALESCE(SUM(SUMI.SUMA), 0) 
            FROM 
              OPR 
              INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
              OPR.OPR_TIP = 79 
              AND OPR.KLI_ID = :R_KLI_ID 
              AND OPR.OPR_DATE < :P_FROM_DATE 
              AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
              AND :P_TIP_FILTER IN (0,1) 
            INTO 
              :L_SUMA_TEMP; 
 
            R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE - L_SUMA_TEMP); 
 
            /*ЗАДЪЛЖЕНИЕ ЗА АМБАЛАЖ*/ 
            L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(SUMI.SUMA),0) AS SUMA 
            FROM 
                OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 57 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND :P_TIP_FILTER IN (0,2) 
            INTO 
              :L_SUMA_TEMP; 
 
            R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE + L_SUMA_TEMP); 
 
            L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(SUMI.SUMA),0) AS SUMA 
            FROM 
                OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 58 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND :P_TIP_FILTER IN (0,2) 
            INTO 
              :L_SUMA_TEMP; 
 
            R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE - L_SUMA_TEMP); 
 
            ------------------- 
            -- Плащания 
            ------------------- 
 
            L_SUMA_TEMP = 0; 
            /* 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR 
            WHERE 
                OPR.OPR_TIP = 6 
                AND OPR.KLI_ID = '||:R_KLI_ID || 
                ' AND OPR.OPR_DATE <'''|| :P_FROM_DATE|| 
                ''' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
                ||P_FILTER_PAY_OBEKT 
            INTO 
                :R_SUMA_NACH_PAY; 
            */ 
 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR_PAYMENT_NODE.SUMA), 0) 
            FROM 
                OPR_PAYMENT_NODE 
                INNER JOIN SUMI ON SUMI.ID = OPR_PAYMENT_NODE.PAYMENT_ID 
                INNER JOIN OPR ON OPR.ID = SUMI.OPR_ID 
            WHERE 
                OPR.OPR_TIP = 6 
                AND OPR.KLI_ID = '||:R_KLI_ID || 
                ' AND OPR.OPR_DATE <'''|| :P_FROM_DATE|| 
                ''' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
                || P_FILTER_PAY_OBEKT 
            INTO 
                :R_SUMA_NACH_PAY; 
 
 
            L_SUMA_TEMP = 0; 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 2 
                AND OPR.KLI_ID ='|| :R_KLI_ID || 
                'AND OPR.OPR_DATE <'''|| :P_FROM_DATE || ''' AND OUT.PAY_TIP IN (0, 2) 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
                ||:P_FILTER_OBEKT 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_PAY = ROUNDD(R_SUMA_NACH_PAY + L_SUMA_TEMP); 
 
            L_SUMA_TEMP = 0; 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR INNER JOIN RET_STOKA_PROD ON RET_STOKA_PROD.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 26 
                AND OPR.KLI_ID ='|| :R_KLI_ID || 
                'AND OPR.OPR_DATE <''' || :P_FROM_DATE || ''' AND RET_STOKA_PROD.PAY_TIP IN (0, 2) 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
                ||:P_FILTER_RET_STOKA_OBEKT 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_PAY = ROUNDD(R_SUMA_NACH_PAY - L_SUMA_TEMP); 
 
            L_SUMA_TEMP = 0; 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR 
            WHERE 
                OPR.OPR_TIP = 29 
                AND OPR.KLI_ID ='||:R_KLI_ID|| 
                'AND OPR.OPR_DATE <'''|| :P_FROM_DATE||''' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
                ||:P_FILTER_RET_STOKA_PAY_OBEKT 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_PAY = ROUNDD(R_SUMA_NACH_PAY - L_SUMA_TEMP); 
 
            /* 
            L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR LEFT JOIN RET_STOKA_PROD_KI ON OPR.ID = RET_STOKA_PROD_KI.OPR_ID 
            WHERE 
                OPR.OPR_TIP = 40 
                AND RET_STOKA_PROD_KI.PAY_TIP IN (0, 2) 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND :P_TIP_FILTER IN (0,1) 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_PAY = ROUNDD(R_SUMA_NACH_PAY - L_SUMA_TEMP); 
            */ 
 
            /* НЕРАЗЧЕТЕНИ */ 
            /* ----------- */ 
            R_SUMA_NACH_NERAZCHETENA = 0; 
            EXECUTE STATEMENT 
            'SELECT 
                --COALESCE(SUM(SUMI.SUMA_OST), 0) 
                COALESCE(SUM(IIF(OPR_TIP = 6, SUMI.SUMA_OST, -SUMI.SUMA_OST)), 0) 
            FROM 
                PAYMENT 
                INNER JOIN SUMI ON SUMI.OPR_ID = PAYMENT.OPR_ID 
                INNER JOIN OPR ON OPR.ID = SUMI.OPR_ID 
            WHERE 
                OPR.OPR_TIP IN (6, 83) 
                AND OPR.KLI_ID = '||:R_KLI_ID || 
                ' AND OPR.OPR_DATE <'''|| :P_FROM_DATE|| 
                ''' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
                --|| P_FILTER_PAY_OBEKT 
            INTO :R_SUMA_NACH_NERAZCHETENA; 
 
 
            R_SUMA_NACH_SALDO = ROUNDD(R_SUMA_NACH_DUE - R_SUMA_NACH_PAY); 
        END 
 
        /* ЗАДЪЛЖЕНИЯ */ 
        /* ========== */ 
        R_SUMA_DUE = 0; 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR 
            INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
        WHERE 
            OPR.OPR_TIP = 2 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
            ||:P_FILTER_OBEKT 
        INTO 
            :R_SUMA_DUE; 
 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA), 0) 
        FROM 
            OPR 
        WHERE 
            OPR.OPR_TIP = 26 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
            ||:P_FILTER_RET_STOKA_OBEKT 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_DUE = ROUNDD(R_SUMA_DUE - L_SUMA_TEMP); 
 
 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA), 0) 
        FROM 
            OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE 
            OPR.OPR_TIP = 40 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) 
            AND NOT EXISTS (SELECT RET_PROD_RET_FAK_PROD_KI_NODE.ID FROM RET_PROD_RET_FAK_PROD_KI_NODE WHERE RET_PROD_RET_FAK_PROD_KI_NODE.OPR_RET_FAK_PROD_KI_ID = OPR.ID) 
            AND NOT EXISTS (SELECT KI_PROD_SUMA_EL.ID FROM KI_PROD_SUMA_EL WHERE KI_PROD_SUMA_EL.SUMI_ID = SUMI.ID)' 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_DUE = ROUNDD(R_SUMA_DUE - L_SUMA_TEMP); 
 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(SUMI.SUMA), 0) 
        FROM 
            OPR 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE 
            OPR.OPR_TIP = 79 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_DUE = ROUNDD(R_SUMA_DUE - L_SUMA_TEMP); 
 
        /*ЗАДЪЛЖЕНИЕ ЗА АМБАЛАЖ*/ 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(SUMI.SUMA),0) AS SUMA 
         FROM 
            OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
         WHERE 
            OPR.OPR_TIP = 57 
            AND OPR.KLI_ID = '||:R_KLI_ID || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)' 
            || :P_FILTER_DATE || 
            ' AND ('||:P_TIP_FILTER|| 'IN (0,2)) ' 
          INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_DUE = ROUNDD(R_SUMA_DUE + L_SUMA_TEMP); 
 
        EXECUTE STATEMENT 
        'SELECT 
            -COALESCE(SUM(SUMI.SUMA),0) AS SUMA 
         FROM 
            OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
         WHERE 
            OPR.OPR_TIP = 58 
            AND OPR.KLI_ID = '||:R_KLI_ID || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)' 
            || :P_FILTER_DATE || 
            ' AND ('||:P_TIP_FILTER|| 'IN (0,2)) ' 
          INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_DUE = ROUNDD(R_SUMA_DUE + L_SUMA_TEMP); 
 
        /* ПЛАЩАНИЯ */ 
        /* ======== */ 
        /* 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR 
        WHERE 
            OPR.OPR_TIP = 6 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
            --||:P_FILTER_PAY_OBEKT 
        INTO 
            :R_SUMA_PAY; 
        */ 
 
        R_SUMA_PAY = 0; 
        EXECUTE STATEMENT 
            'SELECT 
                --COALESCE(SUM(OPR_PAYMENT_NODE.SUMA), 0) 
                COALESCE(SUM(IIF(OPR_TIP = 6, OPR_PAYMENT_NODE.SUMA, -OPR_PAYMENT_NODE.SUMA)), 0) 
            FROM 
                OPR_PAYMENT_NODE 
                INNER JOIN SUMI ON SUMI.ID = OPR_PAYMENT_NODE.PAYMENT_ID 
                INNER JOIN OPR ON OPR.ID = SUMI.OPR_ID 
            WHERE 
                OPR.OPR_TIP = 6 
                AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
                || P_FILTER_PAY_OBEKT 
            INTO 
                :R_SUMA_PAY; 
 
 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR LEFT JOIN OUT ON OPR.ID = OUT.OPR_ID 
        WHERE 
            OPR.OPR_TIP = 2 
            AND OUT.PAY_TIP IN (0, 2) 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
            ||:P_FILTER_OBEKT 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_PAY = ROUNDD(R_SUMA_PAY + L_SUMA_TEMP); 
 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR LEFT JOIN RET_STOKA_PROD ON OPR.ID = RET_STOKA_PROD.OPR_ID 
        WHERE 
            OPR.OPR_TIP = 26 
            AND RET_STOKA_PROD.PAY_TIP IN (0, 2) 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
            ||:P_FILTER_RET_STOKA_OBEKT 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_PAY = ROUNDD(R_SUMA_PAY - L_SUMA_TEMP); 
 
        /* 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR LEFT JOIN RET_STOKA_PROD_KI ON OPR.ID = RET_STOKA_PROD_KI.OPR_ID 
        WHERE 
            OPR.OPR_TIP = 40 
            AND RET_STOKA_PROD_KI.PAY_TIP IN (0, 2) 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) 
            AND NOT EXISTS (SELECT RET_PROD_RET_FAK_PROD_KI_NODE.ID FROM RET_PROD_RET_FAK_PROD_KI_NODE WHERE RET_PROD_RET_FAK_PROD_KI_NODE.OPR_RET_FAK_PROD_KI_ID = OPR.ID) ' 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_PAY = ROUNDD(R_SUMA_PAY - L_SUMA_TEMP); 
        */ 
 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA), 0) 
        FROM 
            OPR 
        WHERE 
            OPR.OPR_TIP = 29 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
            ||:P_FILTER_RET_STOKA_PAY_OBEKT 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_PAY = ROUNDD(R_SUMA_PAY - L_SUMA_TEMP); 
 
 
        /* НЕРАЗЧЕТЕНИ */ 
        /* ----------- */ 
        R_SUMA_NERAZCHETENA = 0; 
        EXECUTE STATEMENT 
            'SELECT 
                --COALESCE(SUM(SUMI.SUMA_OST), 0) 
                COALESCE(SUM(IIF(OPR_TIP = 6, SUMI.SUMA_OST, -SUMI.SUMA_OST)), 0) 
            FROM 
                PAYMENT 
                INNER JOIN SUMI ON SUMI.OPR_ID = PAYMENT.OPR_ID 
                INNER JOIN OPR ON OPR.ID = SUMI.OPR_ID 
            WHERE 
                OPR.OPR_TIP IN (6, 83) 
                AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
                --|| P_FILTER_PAY_OBEKT 
            INTO :R_SUMA_NERAZCHETENA; 
 
        R_SUMA_KR_SALDO = ROUNDD(R_SUMA_NACH_SALDO - R_SUMA_NACH_NERAZCHETENA + R_SUMA_DUE - R_SUMA_PAY - R_SUMA_NERAZCHETENA); 
 
        R_DAYS_LATE = NULL; 
        R_SUMA_LATE = NULL; 
 
        IF (:P_DATE_PADEJ IS NOT NULL) THEN BEGIN 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(SUMI.SUMA_OST), 0) 
            FROM 
                SUMI INNER JOIN OPR ON OPR.ID = SUMI.OPR_ID 
            WHERE 
                SUMI.PADEJ <''' || :P_DATE_PADEJ || ''' AND 
                SUMI.SUMA_OST <> 0 
                AND OPR.KLI_ID =' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) ' 
            INTO :R_SUMA_LATE; 
 
            EXECUTE STATEMENT 
            'SELECT FIRST 1 
                CAST('''||:P_DATE_PADEJ ||''' AS DATE) - SUMI.PADEJ AS DAYS_LATE 
            FROM 
                SUMI INNER JOIN OPR ON OPR.ID = SUMI.OPR_ID 
            WHERE 
                SUMI.PADEJ <'''|| CAST(:P_DATE_PADEJ AS DATE) || 
                '''AND SUMI.SUMA_OST <> 0 AND OPR.KLI_ID =' || :R_KLI_ID || :P_FILTER_DATE || 
                'AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                ORDER BY SUMI.OPR_ID' 
            INTO :R_DAYS_LATE; 
        END 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_KLI_HISTORY1 (
    P_FROM_DATE DATE,
    P_FILTER_KLI VARCHAR(10000),
    P_FILTER_DATE VARCHAR(100),
    P_FLAG_NO_KLI SMALLINT,
    P_FILTER_OBEKT VARCHAR(10000),
    P_FILTER_RET_STOKA_OBEKT VARCHAR(10000),
    P_FILTER_PAY_OBEKT VARCHAR(10000),
    P_FILTER_RET_STOKA_PAY_OBEKT VARCHAR(10000),
    P_TIP_FILTER SMALLINT,
    P_DATE_PADEJ DATE)
RETURNS (
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_KLI_CODE VARCHAR(15),
    R_SUMA_NACH_SALDO DOUBLE PRECISION,
    R_SUMA_NACH_DUE DOUBLE PRECISION,
    R_SUMA_NACH_PAY DOUBLE PRECISION,
    R_SUMA_DUE DOUBLE PRECISION,
    R_SUMA_PAY DOUBLE PRECISION,
    R_SUMA_KR_SALDO DOUBLE PRECISION,
    R_KLI_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(100),
    R_KLI_TEL VARCHAR(100),
    R_SUMA_LATE DOUBLE PRECISION,
    R_DAYS_LATE INTEGER)
AS
declare variable L_SUMA_TEMP double precision; 
declare variable L_SUMA_RET double precision; 
BEGIN 
/*V.5*/ 
    IF ((P_FLAG_NO_KLI = 1) OR (P_FLAG_NO_KLI = 2)) THEN BEGIN 
        R_KLI_ID          = 0; 
        R_KLI_NAME        = ' Без клиент'; 
        R_KLI_CODE        = NULL; 
        R_SUMA_NACH_SALDO = 0; 
        R_SUMA_KR_SALDO   = 0; 
        R_SUMA_DUE        = 0; 
        R_SUMA_PAY        = 0; 
        R_NAME_FAK        = NULL; 
 
        EXECUTE STATEMENT 
        'SELECT 
            SUM(OPR.SUMA) 
        FROM 
            OPR 
            INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
        WHERE OPR.OPR_TIP = 2 
            AND OPR.KLI_ID IS NULL 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' ||:P_TIP_FILTER || ' IN (0,1))' 
            || :P_FILTER_OBEKT || :P_FILTER_DATE 
        INTO 
            :R_SUMA_PAY; 
 
 
        EXECUTE STATEMENT 
        'SELECT 
            SUM(OPR.SUMA) 
        FROM 
            OPR 
        WHERE OPR.OPR_TIP = 26 
            AND OPR.KLI_ID IS NULL 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' ||:P_TIP_FILTER || ' IN (0,1)) ' 
            || :P_FILTER_RET_STOKA_OBEKT 
            || :P_FILTER_DATE 
        INTO 
            :L_SUMA_RET; 
 
        R_SUMA_PAY =COALESCE(:R_SUMA_PAY,0) - COALESCE(:L_SUMA_RET,0); 
 
        R_SUMA_DUE = R_SUMA_PAY; 
        SUSPEND; 
    END 
 
    IF (P_FLAG_NO_KLI = 2) THEN EXIT; 
 
    FOR EXECUTE STATEMENT 'SELECT 
        KLI.ID, 
        KLI.NAME, 
        KLI.CODE, 
        FIRMI.NAME_FAK, 
        KLI.TEL 
    FROM 
        KLI INNER JOIN ( 
            SELECT DISTINCT 
                OPR.KLI_ID 
            FROM 
                OPR 
            WHERE 
                OPR.OPR_TIP IN (2, 6, 26, 29, 40, 55, 56, 57, 58, 79) 
                AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)) T ON T.KLI_ID = KLI.ID '||:P_FILTER_KLI ||' 
        LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
     ORDER BY UPPER(KLI.NAME) ' 
    INTO 
        :R_KLI_ID,:R_KLI_NAME,:R_KLI_CODE,:R_NAME_FAK,:R_KLI_TEL 
    DO BEGIN 
        R_KLI_COMMENT = NULL; 
 
        SELECT FIRST 1 
            COMMENTS.NOTE 
        FROM 
            COMMENTS INNER JOIN COMMENT_KLI_NODE ON COMMENT_KLI_NODE.COMMENT_ID = COMMENTS.ID 
        WHERE 
            COMMENT_KLI_NODE.KLI_ID = :R_KLI_ID 
        ORDER BY 
            COMMENT_KLI_NODE.ID DESC 
        INTO :R_KLI_COMMENT; 
 
        IF (P_FROM_DATE IS NULL) THEN BEGIN 
            R_SUMA_NACH_SALDO = 0; 
            R_SUMA_NACH_DUE = 0; 
            R_SUMA_NACH_PAY = 0; 
        END 
        ELSE BEGIN 
            /*НАЧАЛНО САЛДО*/ 
            L_SUMA_TEMP = 0; 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR 
                INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 2 
                AND OPR.KLI_ID ='||:R_KLI_ID || 
                'AND OPR.OPR_DATE <'''||:P_FROM_DATE || ''' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' ||:P_TIP_FILTER || ' IN (0,1)) ' 
                ||:P_FILTER_OBEKT 
            INTO 
                :R_SUMA_NACH_DUE; 
 
            /*ВРЪЩАНЕ НА СТОКА*/ 
            L_SUMA_TEMP = 0; 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR 
            WHERE 
                OPR.OPR_TIP = 26 
                AND OPR.KLI_ID = '|| :R_KLI_ID || 
                'AND OPR.OPR_DATE < '''||:P_FROM_DATE || ''' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' ||:P_TIP_FILTER || ' IN (0,1))' 
                ||:P_FILTER_RET_STOKA_OBEKT 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE - L_SUMA_TEMP); 
 
 
            /*КРЕДИТНО ИЗВЕСТИЕ*/ 
-- 
           /* L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR 
            WHERE 
                OPR.OPR_TIP = 40 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND :P_TIP_FILTER IN (0,1) 
                AND NOT EXISTS (SELECT RET_PROD_RET_FAK_PROD_KI_NODE.ID FROM RET_PROD_RET_FAK_PROD_KI_NODE WHERE RET_PROD_RET_FAK_PROD_KI_NODE.OPR_RET_FAK_PROD_KI_ID = OPR.ID) 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE - L_SUMA_TEMP);*/ 
-- 
 
            L_SUMA_TEMP = 0; 
            SELECT 
              COALESCE(SUM(SUMI.SUMA), 0) 
            FROM 
              OPR 
              INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
              OPR.OPR_TIP = 79 
              AND OPR.KLI_ID = :R_KLI_ID 
              AND OPR.OPR_DATE < :P_FROM_DATE 
              AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
              AND :P_TIP_FILTER IN (0,1) 
            INTO 
              :L_SUMA_TEMP; 
 
            R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE - L_SUMA_TEMP); 
 
            /*ЗАДЪЛЖЕНИЕ ЗА АМБАЛАЖ*/ 
            L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(SUMI.SUMA),0) AS SUMA 
            FROM 
                OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 57 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND :P_TIP_FILTER IN (0,2) 
            INTO 
              :L_SUMA_TEMP; 
 
            R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE + L_SUMA_TEMP); 
 
            L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(SUMI.SUMA),0) AS SUMA 
            FROM 
                OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 58 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND OPR.OPR_DATE < :P_FROM_DATE 
                AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND :P_TIP_FILTER IN (0,2) 
            INTO 
              :L_SUMA_TEMP; 
 
            R_SUMA_NACH_DUE = ROUNDD(R_SUMA_NACH_DUE - L_SUMA_TEMP); 
 
            ------------------- 
            -- Плащания 
            ------------------- 
 
            L_SUMA_TEMP = 0; 
            /* 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR 
            WHERE 
                OPR.OPR_TIP = 6 
                AND OPR.KLI_ID = '||:R_KLI_ID || 
                ' AND OPR.OPR_DATE <'''|| :P_FROM_DATE|| 
                ''' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
                ||P_FILTER_PAY_OBEKT 
            INTO 
                :R_SUMA_NACH_PAY; 
            */ 
 
            EXECUTE STATEMENT 
            'SELECT 
                SUM(OPR_PAYMENT_NODE.SUMA) 
            FROM 
                OPR_PAYMENT_NODE 
                INNER JOIN SUMI ON SUMI.ID = OPR_PAYMENT_NODE.PAYMENT_ID 
                INNER JOIN OPR ON OPR.ID = SUMI.OPR_ID 
            WHERE 
                OPR.OPR_TIP = 6 
                AND OPR.KLI_ID = '||:R_KLI_ID || 
                ' AND OPR.OPR_DATE <'''|| :P_FROM_DATE|| 
                ''' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
                || P_FILTER_PAY_OBEKT 
            INTO 
                :R_SUMA_NACH_PAY; 
 
 
            L_SUMA_TEMP = 0; 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 2 
                AND OPR.KLI_ID ='|| :R_KLI_ID || 
                'AND OPR.OPR_DATE <'''|| :P_FROM_DATE || ''' AND OUT.PAY_TIP IN (0, 2) 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
                ||:P_FILTER_OBEKT 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_PAY = ROUNDD(R_SUMA_NACH_PAY + L_SUMA_TEMP); 
 
            L_SUMA_TEMP = 0; 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR INNER JOIN RET_STOKA_PROD ON RET_STOKA_PROD.OPR_ID = OPR.ID 
            WHERE 
                OPR.OPR_TIP = 26 
                AND OPR.KLI_ID ='|| :R_KLI_ID || 
                'AND OPR.OPR_DATE <''' || :P_FROM_DATE || ''' AND RET_STOKA_PROD.PAY_TIP IN (0, 2) 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
                ||:P_FILTER_RET_STOKA_OBEKT 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_PAY = ROUNDD(R_SUMA_NACH_PAY - L_SUMA_TEMP); 
 
            L_SUMA_TEMP = 0; 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR 
            WHERE 
                OPR.OPR_TIP = 29 
                AND OPR.KLI_ID ='||:R_KLI_ID|| 
                'AND OPR.OPR_DATE <'''|| :P_FROM_DATE||''' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
                ||:P_FILTER_RET_STOKA_PAY_OBEKT 
            INTO 
                :L_SUMA_TEMP; 
 
            R_SUMA_NACH_PAY = ROUNDD(R_SUMA_NACH_PAY - L_SUMA_TEMP); 
 
            /* 
            L_SUMA_TEMP = 0; 
            SELECT 
                COALESCE(SUM(OPR.SUMA),0) 
            FROM 
                OPR LEFT JOIN RET_STOKA_PROD_KI ON OPR.ID = RET_STOKA_PROD_KI.OPR_ID 
            WHERE 
                OPR.OPR_TIP = 40 
                AND RET_STOKA_PROD_KI.PAY_TIP IN (0, 2) 
                AND OPR.KLI_ID = :R_KLI_ID 
                AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND :P_TIP_FILTER IN (0,1) 
            INTO 
                :L_SUMA_TEMP; 
            */ 
 
            R_SUMA_NACH_PAY = ROUNDD(R_SUMA_NACH_PAY - L_SUMA_TEMP); 
 
            R_SUMA_NACH_SALDO = ROUNDD(R_SUMA_NACH_DUE - R_SUMA_NACH_PAY); 
 
            --R_SUMA_NACH_SALDO = ROUNDD(R_SUMA_NACH_PAY); 
        END 
 
        /* ЗАДЪЛЖЕНИЯ */ 
        /* ========== */ 
        R_SUMA_DUE = 0; 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR 
            INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
        WHERE 
            OPR.OPR_TIP = 2 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
            ||:P_FILTER_OBEKT 
        INTO 
            :R_SUMA_DUE; 
 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA), 0) 
        FROM 
            OPR 
        WHERE 
            OPR.OPR_TIP = 26 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
            ||:P_FILTER_RET_STOKA_OBEKT 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_DUE = ROUNDD(R_SUMA_DUE - L_SUMA_TEMP); 
 
-- 
        /*L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA), 0) 
        FROM 
            OPR 
        WHERE 
            OPR.OPR_TIP = 40 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) 
            AND NOT EXISTS (SELECT RET_PROD_RET_FAK_PROD_KI_NODE.ID FROM RET_PROD_RET_FAK_PROD_KI_NODE WHERE RET_PROD_RET_FAK_PROD_KI_NODE.OPR_RET_FAK_PROD_KI_ID = OPR.ID)' 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_DUE = ROUNDD(R_SUMA_DUE - L_SUMA_TEMP); */ 
 -- 
        L_SUMA_TEMP = 0; 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(SUMI.SUMA), 0) 
        FROM 
            OPR 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE 
            OPR.OPR_TIP = 79 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_DUE = ROUNDD(R_SUMA_DUE - L_SUMA_TEMP); 
 
        /*ЗАДЪЛЖЕНИЕ ЗА АМБАЛАЖ*/ 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(SUMI.SUMA),0) AS SUMA 
         FROM 
            OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
         WHERE 
            OPR.OPR_TIP = 57 
            AND OPR.KLI_ID = '||:R_KLI_ID || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)' 
            || :P_FILTER_DATE || 
            ' AND ('||:P_TIP_FILTER|| 'IN (0,2)) ' 
          INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_DUE = ROUNDD(R_SUMA_DUE + L_SUMA_TEMP); 
 
        EXECUTE STATEMENT 
        'SELECT 
            -COALESCE(SUM(SUMI.SUMA),0) AS SUMA 
         FROM 
            OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
         WHERE 
            OPR.OPR_TIP = 58 
            AND OPR.KLI_ID = '||:R_KLI_ID || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)' 
            || :P_FILTER_DATE || 
            ' AND ('||:P_TIP_FILTER|| 'IN (0,2)) ' 
          INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_DUE = ROUNDD(R_SUMA_DUE + L_SUMA_TEMP); 
 
        /* ПЛАЩАНИЯ */ 
        /* ======== */ 
        /* 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR 
        WHERE 
            OPR.OPR_TIP = 6 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
            --||:P_FILTER_PAY_OBEKT 
        INTO 
            :R_SUMA_PAY; 
        */ 
 
        EXECUTE STATEMENT 
            'SELECT 
                SUM(OPR_PAYMENT_NODE.SUMA) 
            FROM 
                OPR_PAYMENT_NODE 
                INNER JOIN SUMI ON SUMI.ID = OPR_PAYMENT_NODE.PAYMENT_ID 
                INNER JOIN OPR ON OPR.ID = SUMI.OPR_ID 
            WHERE 
                OPR.OPR_TIP = 6 
                AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
                || P_FILTER_PAY_OBEKT 
            INTO 
                :R_SUMA_PAY; 
 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR LEFT JOIN OUT ON OPR.ID = OUT.OPR_ID 
        WHERE 
            OPR.OPR_TIP = 2 
            AND OUT.PAY_TIP IN (0, 2) 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
            ||:P_FILTER_OBEKT 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_PAY = ROUNDD(R_SUMA_PAY + L_SUMA_TEMP); 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR LEFT JOIN RET_STOKA_PROD ON OPR.ID = RET_STOKA_PROD.OPR_ID 
        WHERE 
            OPR.OPR_TIP = 26 
            AND RET_STOKA_PROD.PAY_TIP IN (0, 2) 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
            ||:P_FILTER_RET_STOKA_OBEKT 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_PAY = ROUNDD(R_SUMA_PAY - L_SUMA_TEMP); 
 
        /*EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR LEFT JOIN RET_STOKA_PROD_KI ON OPR.ID = RET_STOKA_PROD_KI.OPR_ID 
        WHERE 
            OPR.OPR_TIP = 40 
            AND RET_STOKA_PROD_KI.PAY_TIP IN (0, 2) 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) 
            AND NOT EXISTS (SELECT RET_PROD_RET_FAK_PROD_KI_NODE.ID FROM RET_PROD_RET_FAK_PROD_KI_NODE WHERE RET_PROD_RET_FAK_PROD_KI_NODE.OPR_RET_FAK_PROD_KI_ID = OPR.ID) ' 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_PAY = ROUNDD(R_SUMA_PAY - L_SUMA_TEMP); */ 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA), 0) 
        FROM 
            OPR 
        WHERE 
            OPR.OPR_TIP = 29 
            AND OPR.KLI_ID = ' || :R_KLI_ID || :P_FILTER_DATE || 
            ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND (' || :P_TIP_FILTER || ' IN (0,1)) ' 
            ||:P_FILTER_RET_STOKA_PAY_OBEKT 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_PAY = ROUNDD(R_SUMA_PAY - L_SUMA_TEMP); 
 
        R_SUMA_KR_SALDO = ROUNDD(R_SUMA_NACH_SALDO + R_SUMA_DUE - R_SUMA_PAY); 
        R_DAYS_LATE = NULL; 
        R_SUMA_LATE = NULL; 
 
        IF (:P_DATE_PADEJ IS NOT NULL) THEN BEGIN 
            EXECUTE STATEMENT 
            'SELECT 
                SUM(SUMI.SUMA_OST) 
            FROM 
                SUMI INNER JOIN OPR ON OPR.ID = SUMI.OPR_ID 
            WHERE 
                SUMI.PADEJ <''' || :P_DATE_PADEJ || ''' AND 
                SUMI.SUMA_OST <> 0 
                AND OPR.KLI_ID =' || :R_KLI_ID || :P_FILTER_DATE || 
                ' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) ' 
            INTO :R_SUMA_LATE; 
 
            EXECUTE STATEMENT 
            'SELECT FIRST 1 
                CAST('''||:P_DATE_PADEJ ||''' AS DATE) - SUMI.PADEJ AS DAYS_LATE 
            FROM 
                SUMI INNER JOIN OPR ON OPR.ID = SUMI.OPR_ID 
            WHERE 
                SUMI.PADEJ <'''|| CAST(:P_DATE_PADEJ AS DATE) || 
                '''AND SUMI.SUMA_OST <> 0 AND OPR.KLI_ID =' || :R_KLI_ID || :P_FILTER_DATE || 
                'AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                ORDER BY SUMI.OPR_ID' 
            INTO :R_DAYS_LATE; 
        END 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_KLI_NEXT_CODE (
    OT_CODE INTEGER)
RETURNS (
    NNN INTEGER)
AS
DECLARE VARIABLE NN INTEGER; 
DECLARE VARIABLE OLD_NN INTEGER; 
BEGIN 
  OLD_NN = :OT_CODE; 
 
  FOR SELECT DISTINCT 
    NOM 
  FROM 
    GET_KLI_CODE_NUM 
  ORDER BY NOM 
  INTO :NN 
  DO BEGIN 
    IF ((NN - OLD_NN) > 1) THEN BEGIN 
      NNN=OLD_NN+1; 
      SUSPEND; 
      EXIT; 
    END 
    IF (NN > OLD_NN) THEN  OLD_NN=NN; 
  END 
 
  NNN=OLD_NN+1; 
 
  SUSPEND; 
END^


ALTER PROCEDURE GET_KLI_POCKET_NODE (
    P_TIP_NODE SMALLINT,
    P_POCKET_ID INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(100))
AS
DECLARE VARIABLE L_ID INTEGER; 
DECLARE VARIABLE L_NAME VARCHAR(100) CHARACTER SET WIN1251; 
DECLARE VARIABLE L_EMPTY SMALLINT; 
BEGIN 
  L_EMPTY = 0; 
 
  FOR SELECT 
    KLI.ID, 
    KLI.NAME 
  FROM 
    KLI INNER JOIN KLI_POCKET_NODE ON (KLI_POCKET_NODE.KLI_ID = KLI.ID AND KLI_POCKET_NODE.POCKET_ID = :P_POCKET_ID) 
  WHERE 
    KLI.KLIENT = 1 
 
  UNION 
 
  SELECT 
    KLI.ID, 
    KLI.NAME 
  FROM 
    KLI INNER JOIN SELEKCIQ_KLI_EL ON SELEKCIQ_KLI_EL.KLI_ID = KLI.ID 
    INNER JOIN KLI_POCKET_NODE ON (KLI_POCKET_NODE.SELEKCIQ_ID = SELEKCIQ_KLI_EL.SELEKCIQ_ID AND KLI_POCKET_NODE.POCKET_ID = :P_POCKET_ID) 
  WHERE 
    KLI.KLIENT = 1 
  ORDER BY 2 
  INTO :L_ID, :L_NAME 
  DO 
  BEGIN 
    ID = L_ID; 
    NAME = L_NAME; 
    L_EMPTY = 1; 
    SUSPEND; 
  END 
 
  IF (P_TIP_NODE = 1 OR L_EMPTY = 0) THEN 
  BEGIN 
    FOR SELECT 
         KLI.ID, 
         KLI.NAME 
        FROM 
          KLI 
        WHERE 
          KLI.KLIENT = 1 
        ORDER BY 2 
    INTO :L_ID, :L_NAME 
    DO 
    BEGIN 
      ID = L_ID; 
      NAME = L_NAME; 
      SUSPEND; 
    END 
  END 
END^


ALTER PROCEDURE GET_KLI_SKLAD_NODE (
    P_TIP_NODE SMALLINT,
    P_SKLAD_ID INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(100))
AS
DECLARE VARIABLE L_ID INTEGER; 
DECLARE VARIABLE L_NAME VARCHAR(100) CHARACTER SET WIN1251; 
DECLARE VARIABLE L_EMPTY SMALLINT; 
BEGIN   
  L_EMPTY = 0; 
 
  IF (P_TIP_NODE = 0) THEN   
  BEGIN   
    FOR SELECT 
      KLI.ID, 
      KLI.NAME 
    FROM 
      KLI INNER JOIN KLI_SKLAD_NODE ON (KLI_SKLAD_NODE.KLI_ID = KLI.ID AND KLI_SKLAD_NODE.SKLAD_ID = :P_SKLAD_ID) 
    WHERE 
      KLI.KLIENT = 1 
 
    UNION 
 
    SELECT 
      KLI.ID, 
      KLI.NAME 
    FROM 
      KLI INNER JOIN SELEKCIQ_KLI_EL ON SELEKCIQ_KLI_EL.KLI_ID = KLI.ID 
      INNER JOIN KLI_SKLAD_NODE ON (KLI_SKLAD_NODE.SELEKCIQ_ID = SELEKCIQ_KLI_EL.SELEKCIQ_ID AND KLI_SKLAD_NODE.SKLAD_ID = :P_SKLAD_ID) 
    WHERE 
      KLI.KLIENT = 1 
    ORDER BY 2 
    INTO :L_ID, :L_NAME  
    DO 
    BEGIN 
      ID = L_ID;   
      NAME = L_NAME;   
      L_EMPTY = 1;   
      SUSPEND;   
    END   
  END 
   
  IF (P_TIP_NODE = 1 OR L_EMPTY = 0) THEN 
  BEGIN   
    FOR SELECT   
         KLI.ID, 
         KLI.NAME   
        FROM   
          KLI 
        WHERE   
          KLI.KLIENT = 1   
        ORDER BY 2   
    INTO :L_ID, :L_NAME   
    DO   
    BEGIN   
      ID = L_ID;   
      NAME = L_NAME;   
      SUSPEND;   
    END   
  END 
 
END^


ALTER PROCEDURE GET_KLI_SUB_GROUPS (
    P_GROUPS VARCHAR(255),
    P_PARENT_ID INTEGER)
RETURNS (
    R_GROUPS VARCHAR(255))
AS
DECLARE VARIABLE L_GROUP_ID INTEGER;
BEGIN
    IF (P_GROUPS = '') THEN
        R_GROUPS = CAST(P_PARENT_ID AS VARCHAR(255));
    ELSE
        R_GROUPS = P_GROUPS || ',' || CAST(P_PARENT_ID AS VARCHAR(255));
    FOR SELECT
        KLI_GROUP.ID
    FROM
        KLI_GROUP
    WHERE
        COALESCE(KLI_GROUP.PARENT,0) = :P_PARENT_ID
    ORDER BY 1
    INTO
        :L_GROUP_ID
    DO BEGIN
        EXECUTE PROCEDURE GET_KLI_SUB_GROUPS(R_GROUPS,L_GROUP_ID)
        RETURNING_VALUES :R_GROUPS;
    END
END^


ALTER PROCEDURE GET_KLI_USER_NODE (
    P_TIP_NODE TYPE OF DOM_SMAL_INT,
    P_USER_ID TYPE OF DOM_KEY)
RETURNS (
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100)
AS
DECLARE VARIABLE L_EMPTY TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_NAME TYPE OF DOM_CHAR_100; 
DECLARE VARIABLE L_ID TYPE OF DOM_KEY; 
BEGIN 
 L_EMPTY = 0; 
 
  IF (P_TIP_NODE = 0) THEN 
  BEGIN 
    FOR SELECT 
      KLI.ID, 
      KLI.NAME 
    FROM 
      KLI INNER JOIN KLI_USER_NODE ON (KLI_USER_NODE.KLI_ID = KLI.ID AND KLI_USER_NODE.USER_ID = :P_USER_ID) 
    WHERE 
      KLI.KLIENT = 1 
    ORDER BY 1 
    INTO :L_ID, :L_NAME 
    DO 
    BEGIN 
      ID = L_ID; 
      NAME = L_NAME; 
      L_EMPTY = 1; 
      SUSPEND; 
    END 
  END 
 
  IF (P_TIP_NODE = 1 OR L_EMPTY = 0) THEN 
  BEGIN 
    FOR SELECT 
         KLI.ID, 
         KLI.NAME 
        FROM 
          KLI 
        WHERE 
          KLI.KLIENT = 1 
        ORDER BY 1 
    INTO :L_ID, :L_NAME 
    DO 
    BEGIN 
      ID = L_ID; 
      NAME = L_NAME; 
      SUSPEND; 
    END 
  END 
END^


ALTER PROCEDURE GET_KOL_SUMA_FOR_FAKT_NO_SN (
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION)
RETURNS (
    R_SUMA_SR DOUBLE PRECISION,
    R_KOL DOUBLE PRECISION)
AS
DECLARE VARIABLE L_FKT_SKLAD_ID SMALLINT;
DECLARE VARIABLE L_NAL_ID INTEGER;
DECLARE VARIABLE L_NAL_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_NAL_SUMA_SR DOUBLE PRECISION;
BEGIN
    SELECT
        SYSTEM.H_SKLAD
    FROM
        SYSTEM
    INTO
        :L_FKT_SKLAD_ID;

    L_NAL_ID = NULL;
    SELECT
        NAL.ID,
        NAL.KOL_NAL,
        NAL.SUMA
    FROM
        NAL
    WHERE
        NAL.SKLAD_ID = :L_FKT_SKLAD_ID
        AND NAL.SIMPLE_ID = :P_SIMPLE_ID
    INTO
        :L_NAL_ID, :L_NAL_KOL, :L_NAL_SUMA_SR;

    IF ((L_NAL_ID IS NULL) OR ((L_NAL_ID IS NOT NULL) AND (L_NAL_KOL <=0))) THEN BEGIN
        R_SUMA_SR = 0;
        R_KOL = 0;
    END
    ELSE BEGIN
        IF (L_NAL_KOL = P_KOL) THEN BEGIN
            R_SUMA_SR = L_NAL_SUMA_SR;
            R_KOL = L_NAL_KOL;
        END
        ELSE IF (L_NAL_KOL > P_KOL) THEN BEGIN
            R_KOL = P_KOL;
            R_SUMA_SR = ROUND(ROUND(L_NAL_SUMA_SR / L_NAL_KOL,5) * P_KOL,2);
        END
        ELSE BEGIN
            R_KOL = L_NAL_KOL;
            R_SUMA_SR = L_NAL_SUMA_SR;
        END
    END
END^


ALTER PROCEDURE GET_KOL_SUMA_FOR_FAKT_SN (
    P_SIMPLE_ID INTEGER,
    P_OUT_EL_ID INTEGER,
    P_NUMBER INTEGER,
    P_KOL DOUBLE PRECISION,
    P_FLAG_SAME_SN SMALLINT)
RETURNS (
    R_SUMA_SR DOUBLE PRECISION,
    R_KOL DOUBLE PRECISION)
AS
DECLARE VARIABLE L_FKT_SKLAD_ID SMALLINT;
DECLARE VARIABLE L_NAL_ID INTEGER;
DECLARE VARIABLE L_NAL_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_NAL_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_PN_KOL DOUBLE PRECISION;
BEGIN 
/* 
P_FLAG_SAME_SN 0 - ФАКТУРНИЯ СКЛАД РАБОТИ БЕЗ СЕРИЙНИ НОМЕРА И ЩЕ ТЪРСЯ ДАЛИ ОТ ПРОДУКТА ИМА 
ВСИЧКОТО НАЛИЧНО, БЕЗ ЗНАЧЕНИЕ ТОЧНИТЕ ПАРТИДИ 
1 - ТЪРСЯ ДАЛИ ПРОДАДЕНИТЕ СЕРИЙНИ НОМЕРА СА НАЛИЧНИ И ВЪВ ФАКТУРНИЯ СКЛАД 
*/ 
    SELECT
        SYSTEM.H_SKLAD 
    FROM 
        SYSTEM 
    INTO 
        :L_FKT_SKLAD_ID; 
 
    L_NAL_ID = NULL; 
    SELECT 
        NAL.ID, 
        NAL.KOL_NAL, 
        NAL.SUMA 
    FROM 
        NAL 
    WHERE 
        NAL.SKLAD_ID = :L_FKT_SKLAD_ID 
        AND NAL.SIMPLE_ID = :P_SIMPLE_ID 
    INTO 
        :L_NAL_ID, :L_NAL_KOL, :L_NAL_SUMA_SR; 
 
    IF (P_FLAG_SAME_SN = 1) THEN BEGIN 
        SELECT 
            COALESCE(SUM(PN_FAK.KOL),0)
        FROM 
            TEMP$PROD_TO_FAK INNER JOIN OPR OPR1 ON (OPR1.ID = TEMP$PROD_TO_FAK.PROD_ID AND OPR1.OPR_TIP = 2 AND TEMP$PROD_TO_FAK.NUMBER = :P_NUMBER) 
            LEFT JOIN PROD_NODE ON (PROD_NODE.OPR_PROD_ID = OPR1.ID) 
            INNER JOIN OUT_EL ON (OUT_EL.ID = :P_OUT_EL_ID AND (OUT_EL.OPR_ID = OPR1.ID OR OUT_EL.OPR_ID = PROD_NODE.OPR_SUB_PROD_ID)) 
            INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = OUT_EL.ID
            INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID
            INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID
            INNER JOIN PARTIDA_NAL PN_FAK ON PN_FAK.ELEMENT_ID = PN.ELEMENT_ID
            INNER JOIN IN_EL ON IN_EL.ID = PN_FAK.IN_EL_ID
            INNER JOIN OPR OPR2 ON OPR2.ID = IN_EL.OPR_ID AND OPR2.SKLAD_ID = :L_FKT_SKLAD_ID 
        WHERE 
            NOT EXISTS ( 
                SELECT 
                    PARTIDA_NAL.ID 
                FROM 
                    PARTIDA_NAL INNER JOIN IN_EL ON 
                    (IN_EL.ID = PARTIDA_NAL.IN_EL_ID AND PARTIDA_NAL.ELEMENT_ID = PN.ELEMENT_ID) 
                    INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
                WHERE 
                    NOT OPR.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)
                    AND PARTIDA_NAL.KOL > 0.00)
        INTO 
            :L_PN_KOL; 
    END 
    ELSE BEGIN 
        L_PN_KOL = L_NAL_KOL; 
    END 
 
    IF (L_PN_KOL < P_KOL) THEN 
        P_KOL = L_PN_KOL; 
 
    IF ((L_NAL_ID IS NULL) OR ((L_NAL_ID IS NOT NULL) AND (L_NAL_KOL <=0))) THEN BEGIN 
        R_SUMA_SR = 0; 
        R_KOL = 0; 
    END 
    ELSE BEGIN 
        IF (L_NAL_KOL = P_KOL) THEN BEGIN 
            R_SUMA_SR = L_NAL_SUMA_SR; 
            R_KOL = L_NAL_KOL; 
        END 
        ELSE IF (L_NAL_KOL > P_KOL) THEN BEGIN 
            R_KOL = P_KOL; 
            R_SUMA_SR = ROUND(ROUND(L_NAL_SUMA_SR / L_NAL_KOL,5) * P_KOL,2);
        END 
        ELSE BEGIN 
            R_KOL = L_NAL_KOL; 
            R_SUMA_SR = L_NAL_SUMA_SR; 
        END 
    END
END^


ALTER PROCEDURE GET_KOL_ZD_NODE (
    P_PR_ID_ZD INTEGER,
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_KOL DOUBLE PRECISION)
AS
BEGIN 
    select 
      coalesce(sum(kol), 0) r_kol 
    from zd_dost_move_node 
    where 
      opr_id_zd = :p_pr_id_zd  and 
      simple_id = :p_simple_id 
    INTO :R_KOL; 
END^


ALTER PROCEDURE GET_KONS_IN_PRINT (
    ID INTEGER)
RETURNS (
    R_DATE_TIME TIMESTAMP,
    R_OPR_DATE DATE,
    R_KLI_NAME VARCHAR(100),
    R_SKLAD_NAME VARCHAR(20),
    R_IS_ANUL INTEGER,
    R_USER_NAME VARCHAR(30),
    R_SUMA DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_OUT_ID INTEGER,
    R_KONS_ID INTEGER,
    R_IN_ID INTEGER)
AS
BEGIN 
    SELECT 
        OPR_OUT.DATETIME, 
        OPR_OUT.OPR_DATE, 
        KLI.NAME AS KLI_NAME, 
        SKLAD.NAME AS SKLAD_NAME, 
        0, 
        "USER".NAME AS USER_NAME, 
        OPR_SUMI.SUMA_SR, 
        OPR_SUMI.SUMA_FR, 
        OPR_out.ID, 
        KONSIGNACIA.ID , 
        OPR_IN.ID 
    FROM 
        KONSIGNACIA 
        INNER JOIN OPR OPR_IN ON OPR_IN.ID = KONSIGNACIA.OPR_IN_ID 
        INNER JOIN OPR OPR_OUT ON OPR_OUT.ID = KONSIGNACIA.OPR_OUT_ID 
        INNER JOIN KLI ON KLI.ID = OPR_IN.KLI_ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR_IN.SKLAD_ID 
        INNER JOIN "USER" ON "USER".ID = OPR_IN.USER_ID 
        INNER JOIN OPR_SUMI ON OPR_SUMI.OPR_ID = OPR_OUT.ID 
    WHERE 
        OPR_OUT.ID =:ID AND OPR_IN.OPR_TIP = 48 and 
        NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR_IN.ID) 
 
    UNION 
 
    SELECT 
        OPR_OUT.DATETIME, 
        OPR_OUT.OPR_DATE, 
        KLI.NAME AS KLI_NAME, 
        SKLAD.NAME AS SKLAD_NAME, 
        1, 
        "USER".NAME AS USER_NAME, 
        OPR_SUMI.SUMA_SR, 
        OPR_SUMI.SUMA_FR, 
        OPR_IN.ID, 
        KONSIGNACIA.ID, 
        OPR_IN.ID 
    FROM 
        KONSIGNACIA 
        INNER JOIN OPR OPR_IN ON OPR_IN.ID = KONSIGNACIA.OPR_IN_ID 
        INNER JOIN OPR OPR_OUT ON OPR_OUT.ID = KONSIGNACIA.OPR_OUT_ID 
        INNER JOIN KLI ON KLI.ID = OPR_IN.KLI_ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR_IN.SKLAD_ID 
        INNER JOIN "USER" ON "USER".ID = OPR_IN.USER_ID 
        INNER JOIN OPR_SUMI ON OPR_SUMI.OPR_ID = OPR_OUT.ID 
    WHERE 
        OPR_OUT.ID =:ID AND OPR_IN.OPR_TIP = 48 and 
        EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR_IN.ID) 
 
    INTO :R_DATE_TIME, :R_OPR_DATE,:R_KLI_NAME,:R_SKLAD_NAME,:R_IS_ANUL,:R_USER_NAME,:R_SUMA_SR,:R_SUMA_FR,:R_OUT_ID,R_KONS_ID,:R_IN_ID; 
 
    IF (R_IS_ANUL = 0) THEN 
        SELECT SUM(IN_EL.SUMA_FR) FROM IN_EL WHERE IN_EL.OPR_ID =:R_IN_ID INTO :R_SUMA;
    ELSE 
        SELECT SUM(OLD_IN_EL.SUMA_FR) FROM OLD_IN_EL WHERE OLD_IN_EL.OPR_ID =:R_IN_ID INTO :R_SUMA; 
 
    SUSPEND; 
END^


ALTER PROCEDURE GET_KONS_OUT_PRINT (
    ID INTEGER)
RETURNS (
    R_DATE_TIME TIMESTAMP,
    R_OPR_DATE DATE,
    R_KLI_NAME VARCHAR(100),
    R_SKLAD_NAME VARCHAR(20),
    R_IS_ANUL INTEGER,
    R_USER_NAME VARCHAR(30),
    R_SUMA DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_OUT_ID INTEGER,
    R_KONS_ID INTEGER)
AS
BEGIN 
    SELECT 
        OPR_OUT.DATETIME, 
        OPR_OUT.OPR_DATE, 
        KLI.NAME AS KLI_NAME, 
        SKLAD.NAME AS SKLAD_NAME, 
        0, 
        "USER".NAME AS USER_NAME, 
        OPR_SUMI.SUMA_SR, 
        OPR_SUMI.SUMA_FR, 
        OPR_OUT.ID, 
        KONSIGNACIA.ID 
    FROM 
        KONSIGNACIA 
        INNER JOIN OPR OPR_IN ON OPR_IN.ID = KONSIGNACIA.OPR_IN_ID 
        INNER JOIN OPR OPR_OUT ON OPR_OUT.ID = KONSIGNACIA.OPR_OUT_ID 
        INNER JOIN KLI ON KLI.ID = OPR_IN.KLI_ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR_OUT.SKLAD_ID 
        INNER JOIN "USER" ON "USER".ID = OPR_OUT.USER_ID 
        INNER JOIN OPR_SUMI ON OPR_SUMI.OPR_ID = OPR_OUT.ID 
    WHERE 
        OPR_OUT.ID =:ID AND OPR_IN.OPR_TIP = 46 and 
        NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR_OUT.ID) 
 
    UNION 
 
    SELECT 
        OPR_OUT.DATETIME, 
        OPR_OUT.OPR_DATE, 
        KLI.NAME AS KLI_NAME, 
        SKLAD.NAME AS SKLAD_NAME, 
        1, 
        "USER".NAME AS USER_NAME, 
        OPR_SUMI.SUMA_SR, 
        OPR_SUMI.SUMA_FR, 
        OPR_OUT.ID, 
        KONSIGNACIA.ID 
    FROM 
        KONSIGNACIA 
        INNER JOIN OPR OPR_IN ON OPR_IN.ID = KONSIGNACIA.OPR_IN_ID 
        INNER JOIN OPR OPR_OUT ON OPR_OUT.ID = KONSIGNACIA.OPR_OUT_ID 
        INNER JOIN KLI ON KLI.ID = OPR_IN.KLI_ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR_OUT.SKLAD_ID 
        INNER JOIN "USER" ON "USER".ID = OPR_OUT.USER_ID 
        INNER JOIN OPR_SUMI ON OPR_SUMI.OPR_ID = OPR_OUT.ID 
    WHERE 
        OPR_OUT.ID =:ID AND OPR_IN.OPR_TIP = 46 and 
        EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR_OUT.ID) 
 
    INTO :R_DATE_TIME, :R_OPR_DATE,:R_KLI_NAME,:R_SKLAD_NAME,:R_IS_ANUL,:R_USER_NAME,:R_SUMA_SR,:R_SUMA_FR,:R_OUT_ID,R_KONS_ID; 
 
    IF (R_IS_ANUL = 0) THEN 
        SELECT SUM(OUT_EL.SUMA) FROM OUT_EL WHERE OUT_EL.OPR_ID =:ID INTO :R_SUMA; 
    ELSE 
        SELECT SUM(OLD_OUT_EL.SUMA) FROM OLD_OUT_EL WHERE OLD_OUT_EL.OPR_ID =:ID INTO :R_SUMA; 
 
    SUSPEND; 
    END^


ALTER PROCEDURE GET_KRI_KOL (
    TIP_KRI_KOL SMALLINT,
    P_FILTER VARCHAR(1000),
    P_NO_MOVEMENT SMALLINT)
RETURNS (
    SIMPLE_ID INTEGER,
    CODE VARCHAR(15),
    NAME VARCHAR(100),
    ME CHAR(2),
    SUMA_DOST_CA DOUBLE PRECISION,
    NAL DOUBLE PRECISION,
    SUMA_FR DOUBLE PRECISION,
    GR_NAME VARCHAR(50),
    KOL_KRI_MIN DOUBLE PRECISION,
    KOL_KRI_MAX DOUBLE PRECISION,
    ED_CENA_SR DOUBLE PRECISION,
    SKLAD_ID INTEGER)
AS
BEGIN 
    FOR EXECUTE STATEMENT 
    'SELECT 
        SIMPLE.ID, 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        ME.NAME, 
        SELEKCIQ.NAME, 
        SIMPLE.KOL_KRI_MIN, 
        SIMPLE.KOL_KRI_MAX 
    FROM 
        SIMPLE LEFT JOIN ME ON SIMPLE.ME_ID = ME.ID 
        LEFT JOIN SELEKCIQ ON SIMPLE.DEF_SEL_ID = SELEKCIQ.ID 
    WHERE 
        SIMPLE.KOL_KRI_MIN IS NOT NULL OR SIMPLE.KOL_KRI_MAX IS  NOT NULL' 
    INTO 
        :SIMPLE_ID, :CODE,:NAME,:ME,:GR_NAME,:KOL_KRI_MIN,:KOL_KRI_MAX 
    DO BEGIN 
        NAL = NULL; 
        FOR EXECUTE STATEMENT 
        'SELECT 
            NAL.KOL_NAL, 
            NAL.SUMA, 
            NAL.SUMA_FR, 
            NAL.SKLAD_ID, 
            CASE WHEN(SUM(NAL.KOL_NAL) <>0 ) THEN SUM(NAL.SUMA) / SUM(NAL.KOL_NAL) 
            ELSE 0 END AS ED_CENA_SR 
        FROM 
            NAL JOIN SKLAD ON SKLAD.ID = NAL.SKLAD_ID 
        WHERE 
            NAL.SIMPLE_ID ='||:SIMPLE_ID || 
            'AND (SKLAD.IS_SYSTEM = 0 AND SKLAD.IS_ACTIVE = 1) '||:P_FILTER || 
        'GROUP BY 1,2,3,4' 
        INTO 
           :NAL,:SUMA_DOST_CA,:SUMA_FR,:SKLAD_ID,:ED_CENA_SR 
        DO BEGIN 
            IF (TIP_KRI_KOL = 0) THEN BEGIN 
                IF (NAL < KOL_KRI_MIN) THEN BEGIN 
                    SUSPEND; 
                END 
            END 
            ELSE IF (TIP_KRI_KOL = 1) THEN BEGIN 
                IF (NAL > KOL_KRI_MAX) THEN BEGIN 
                    SUSPEND; 
                END 
            END 
            ELSE IF (TIP_KRI_KOL = 2) THEN BEGIN 
                IF (NAL< KOL_KRI_MIN OR NAL > KOL_KRI_MAX) THEN BEGIN 
                    SUSPEND; 
                END 
            END 
        END 
 
        IF (P_NO_MOVEMENT = 1) THEN 
            IF (NAL IS NULL) THEN BEGIN 
                SUMA_DOST_CA = NULL; 
                SUMA_FR = NULL; 
                SKLAD_ID = NULL; 
                ED_CENA_SR = NULL; 
 
                SUSPEND; 
            END 
    END 
END^


ALTER PROCEDURE GET_KRI_KOL_ALL_SKLAD (
    TIP_KRI_KOL SMALLINT)
RETURNS (
    SIMPLE_ID INTEGER,
    CODE VARCHAR(15),
    NAME VARCHAR(100),
    ME CHAR(2),
    SUMA_DOST_CA DOUBLE PRECISION,
    NAL DOUBLE PRECISION,
    SUMA_FR DOUBLE PRECISION,
    GR_NAME VARCHAR(50),
    KOL_KRI_MIN DOUBLE PRECISION,
    KOL_KRI_MAX DOUBLE PRECISION,
    ED_CENA_SR DOUBLE PRECISION,
    SKLAD_NAME VARCHAR(20),
    SKLAD_ID SMALLINT)
AS
DECLARE VARIABLE L_KOL_SKLAD DOUBLE PRECISION; 
BEGIN 
    FOR EXECUTE STATEMENT 
    'SELECT 
        SIMPLE.ID, 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        ME.NAME, 
        SELEKCIQ.NAME, 
        SIMPLE.KOL_KRI_MIN, 
        SIMPLE.KOL_KRI_MAX 
    FROM 
        SIMPLE LEFT JOIN ME ON SIMPLE.ME_ID = ME.ID 
        LEFT JOIN SELEKCIQ ON SIMPLE.DEF_SEL_ID = SELEKCIQ.ID' 
    INTO 
        :SIMPLE_ID,:CODE,:NAME,:ME,:GR_NAME,:KOL_KRI_MIN,:KOL_KRI_MAX 
    DO BEGIN 
        FOR SELECT 
            SUM(NAL.KOL_NAL), 
            SUM(NAL.SUMA), 
            SUM(NAL.SUMA_FR), 
            CASE WHEN(SUM(NAL.KOL_NAL) > 0) THEN SUM(NAL.SUMA) / SUM(NAL.KOL_NAL) 
            ELSE 0 END AS ED_CENA_SR 
        FROM 
            NAL JOIN SKLAD ON SKLAD.ID = NAL.SKLAD_ID 
        WHERE 
            NAL.SIMPLE_ID =:SIMPLE_ID 
            AND SKLAD.IS_SYSTEM = 0 
            AND SKLAD.IS_ACTIVE = 1 
        INTO 
        :NAL, :SUMA_DOST_CA, :SUMA_FR, :ED_CENA_SR 
        DO BEGIN 
            IF (TIP_KRI_KOL = 0) THEN BEGIN 
                IF (NAL < KOL_KRI_MIN) THEN BEGIN 
                    SUSPEND; 
                END 
            END 
            ELSE IF (TIP_KRI_KOL = 1) THEN BEGIN 
                IF (NAL >= KOL_KRI_MAX) THEN BEGIN 
                    SUSPEND; 
                END 
            END 
            ELSE IF (TIP_KRI_KOL = 2) THEN BEGIN 
                IF (NAL< KOL_KRI_MIN OR NAL >= KOL_KRI_MAX) THEN BEGIN 
                    SUSPEND; 
                END 
            END 
        END 
    END 
END^


ALTER PROCEDURE GET_LAST_CENA (
    P_FKT INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_LAST_CENA FLOAT)
AS
declare variable H_SKLAD integer; 
declare variable K_SKLAD integer; 
BEGIN 
  SELECT 
    SYSTEM.H_SKLAD, 
    SYSTEM.K_SKLAD 
  FROM 
    SYSTEM 
  INTO :H_SKLAD, :K_SKLAD; 
 
  FOR SELECT 
    SIMPLE.ID 
  FROM 
    SIMPLE 
  WHERE 
    SIMPLE.ID > 0 
  INTO :R_SIMPLE_ID 
  DO BEGIN 
    R_LAST_CENA = 0; 
    IF (:P_FKT = 1) THEN BEGIN 
      SELECT FIRST 1 
        COALESCE(NAL.LAST_CENA, 0) 
      FROM 
        NAL 
      WHERE 
        NAL.SIMPLE_ID = :R_SIMPLE_ID AND 
        NAL.SKLAD_ID = :H_SKLAD 
      ORDER BY NAL.DATETIME_LASTCENA DESC 
      INTO :R_LAST_CENA; 
    END 
    ELSE BEGIN 
      SELECT FIRST 1 
        COALESCE(NAL.LAST_CENA, 0) 
      FROM 
        NAL 
      WHERE 
        NAL.SIMPLE_ID = :R_SIMPLE_ID AND 
        NAL.SKLAD_ID <> :H_SKLAD AND 
        NAL.SKLAD_ID <> :K_SKLAD 
      ORDER BY NAL.DATETIME_LASTCENA DESC 
      INTO :R_LAST_CENA; 
    END 
 
    INSERT INTO TMP_LAST_CENA(SIMPLE_ID, LAST_CENA) 
    VALUES (:R_SIMPLE_ID, ROUND5(:R_LAST_CENA)); 
  END 
END^


ALTER PROCEDURE GET_LAST_DOSTAV
RETURNS (
    R_SIMPLEID INTEGER,
    R_SIMPLENAME VARCHAR(100),
    R_CODE DOM_CHAR_50,
    R_MEID INTEGER,
    R_ME CHAR(2),
    R_CENAPROD DOUBLE PRECISION,
    R_DDS DECIMAL(4,2),
    R_KOLNAL DOUBLE PRECISION,
    R_CENASR DOUBLE PRECISION,
    R_GRNAME VARCHAR(100),
    R_MEKOEF SMALLINT,
    R_BARCODE VARCHAR(13),
    R_KLINAME VARCHAR(100),
    R_KOLKRIMAX FLOAT,
    R_KOLKRIMIN FLOAT,
    R_SKLADID INTEGER)
AS
declare variable L_SKLADID integer; 
begin 
 FOR SELECT 
    SIMPLE.ID, 
    SIMPLE.NAME, 
    SIMPLE.CODE, 
    SIMPLE.ME_ID, 
    simple.kol_kri_min, 
    simple.kol_kri_max, 
    ME.NAME AS ME, 
    SIMPLE.CENA_PROD, 
    SIMPLE.DDS AS D_D_S, 
    NAL.KOL_NAL, 
    coalesce(nal.last_cena,0) AS CENA_SR, 
    SELEKCIQ.NAME AS GR_NAME, 
    COALESCE(ME.KOEF,0) AS ME_KOEF, 
    (select FIRST 1 BAR."BARCODE"  FROM  barcode bar where bar.simple_id= simple.id)  AS BAR_CODE, 
    NAL.SKLAD_ID 
   FROM 
    NAL INNER JOIN SIMPLE ON SIMPLE.ID = NAL.SIMPLE_ID 
    LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
    LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
  WHERE 
      SIMPLE."ACTIVE" <> '0' 
 
  UNION 
 
  SELECT 
      SIMPLE.ID, 
      SIMPLE.NAME, 
      SIMPLE.CODE, 
      SIMPLE.ME_ID, 
      simple.kol_kri_min, 
      simple.kol_kri_max, 
      ME.NAME AS ME, 
      SIMPLE.CENA_PROD, 
      SIMPLE.DDS AS D_D_S, 
      CAST (0 AS double precision), 
      CAST (0 AS double precision), 
      SELEKCIQ.NAME AS GR_NAME, 
      COALESCE(ME.KOEF,0) AS ME_KOEF, 
      (select FIRST 1 BAR."BARCODE"  FROM  barcode bar where bar.simple_id= simple.id)  AS BAR_CODE, 
      nal.sklad_id 
  FROM 
      SIMPLE LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
     LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
      LEFT JOIN NAL ON NAL.SIMPLE_ID = SIMPLE.ID 
  WHERE 
      NOT EXISTS (SELECT NAL.ID FROM NAL WHERE NAL.SIMPLE_ID = SIMPLE.ID ) AND 
      NOT SIMPLE."ACTIVE" = '0' AND 
      NOT SIMPLE.USLUGA = '1' 
   order by 2 
 
INTO :r_simpleid, 
     :r_simpleNAME, 
     :r_code, 
     :r_meid, 
     :r_kolkrimin, 
     :r_kolkrimax, 
     :r_me, 
     :r_cenaprod, 
     :r_dds, 
     :r_kolnal, 
     :r_cenasr, 
     :r_grname, 
     :r_mekoef, 
     :r_barcode, 
     :r_skladid 
DO begin 
    l_skladid = r_skladid; 
     select FIRST 1 KLI.name 
     FROM opr 
     inner JOIN in_el ON (IN_EL.OPR_ID=OPR.ID AND IN_EL.SIMPLE_ID=:R_SIMPLEID) 
     inner JOIN kli ON KLI.ID=OPR.KLI_ID 
WHERE (OPR.OPR_TIP =1 AND KLI.dostav =1 and opr.sklad_id =: l_skladid) 
ORDER BY in_el.opr_id desc 
into :r_kliname; 
      suspend; 
  end 
end^


ALTER PROCEDURE GET_LAST_DOSTAVCHIK (
    P_SIMPLEID INTEGER,
    P_SKLADID INTEGER)
RETURNS (
    R_KLINAME VARCHAR(100),
    R_KLI_ID INTEGER)
AS
BEGIN 
    SELECT FIRST 1 
        KLI.NAME, 
        KLI.ID 
    FROM 
        KLI INNER JOIN OPR ON KLI.ID = OPR.KLI_ID AND OPR.SKLAD_ID = :P_SKLADID AND OPR.OPR_TIP IN(1,12) 
        INNER JOIN IN_EL ON IN_EL.OPR_ID = OPR.ID AND IN_EL.SIMPLE_ID =:P_SIMPLEID 
    WHERE 
        KLI.DOSTAV = 1 
    ORDER BY OPR.OPR_DATE DESC 
    INTO 
        :R_KLINAME, :R_KLI_ID; 
    SUSPEND; 
END^


ALTER PROCEDURE GET_LAST_DOSTKLI (
    P_KLI INTEGER,
    P_OPR_ID INTEGER,
    P_SKLAD_ID VARCHAR(3000),
    P_BARCODE TYPE OF DOM_SMAL_INT,
    P_SHOW_IZL TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SKLADID INTEGER,
    R_SIMPLEID INTEGER,
    R_SIMPLENAME VARCHAR(100),
    R_CODE DOM_CHAR_50,
    R_KOLKRIMIN DOUBLE PRECISION,
    R_KOLKRIMAX DOUBLE PRECISION,
    R_ME CHAR(2),
    R_MEID INTEGER,
    R_CENA_CL DOUBLE PRECISION,
    R_DDS DECIMAL(4,2),
    R_GRNAME VARCHAR(100),
    R_MEKOEF SMALLINT,
    R_BAR_CODE VARCHAR(13),
    R_KLINAME VARCHAR(100),
    R_SKLAD_NAME VARCHAR(20),
    R_CODE2 TYPE OF DOM_CHAR_50,
    R_KOL_NAL TYPE OF DOM_KOL,
    R_KOL_RZV TYPE OF DOM_KOL,
    R_LAST_CENA TYPE OF DOM_CENA)
AS
declare variable L_SYSTEM_SKLAD_ID type of DOM_KEY; 
BEGIN 
    SELECT SYSTEM.H_SKLAD FROM SYSTEM INTO :L_SYSTEM_SKLAD_ID; 
    FOR SELECT 
        SKLAD.ID, 
        SKLAD.NAME 
    FROM 
        SKLAD 
    WHERE 
        SKLAD.ID <> :L_SYSTEM_SKLAD_ID 
        AND (:P_SKLAD_ID LIKE '%,'||SKLAD.ID||',%') 
    INTO 
        :R_SKLADID, :R_SKLAD_NAME 
    DO BEGIN 
        FOR SELECT DISTINCT 
            SIMPLE.ID, 
            SIMPLE.NAME, 
            SIMPLE.CODE, 
            SIMPLE.KOL_KRI_MIN, 
            SIMPLE.KOL_KRI_MAX, 
            ME.NAME, 
            SIMPLE.ME_ID, 
            (SELECT CENA FROM CENOVA_LISTA_EL WHERE CENOVA_LISTA_EL.SIMPLE_ID= SIMPLE.ID AND CENOVA_LISTA_EL.OPR_ID = :P_OPR_ID), 
            SIMPLE.DDS, 
            SELEKCIQ.NAME, 
            COALESCE(ME.KOEF,0), 
            (SELECT FIRST 1 BAR."BARCODE"  FROM  BARCODE BAR WHERE BAR.SIMPLE_ID= SIMPLE.ID), 
            KLI.NAME, 
            SIMPLE.CODE2 
          FROM 
            KLI_DOST_NODE INNER JOIN SIMPLE ON KLI_DOST_NODE.SIMPLE_ID = SIMPLE.ID 
            INNER JOIN KLI ON (KLI.ID = KLI_DOST_NODE.KLI_ID AND KLI_DOST_NODE.KLI_ID = :P_KLI) 
            LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
            LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
          WHERE 
            NOT SIMPLE."ACTIVE" = '0' AND 
            NOT SIMPLE.USLUGA = '1' 
 
          INTO :R_SIMPLEID,:R_SIMPLENAME,:R_CODE,:R_KOLKRIMIN,:R_KOLKRIMAX,:R_ME,:R_MEID,:R_CENA_CL, 
            :R_DDS,:R_GRNAME,:R_MEKOEF,:R_BAR_CODE,:R_KLINAME,:R_CODE2 
        DO BEGIN 
            IF (P_BARCODE = 1) THEN 
            SELECT FIRST 1 
                BAR."BARCODE" 
            FROM 
                BARCODE BAR 
            WHERE 
                BAR.SIMPLE_ID =:R_SIMPLEID 
            INTO :R_BAR_CODE; 
 
            R_KOL_NAL = NULL; 
            R_LAST_CENA = NULL; 
            R_KOL_RZV = NULL; 
 
            SELECT 
                IIF(:P_SHOW_IZL = 1, ROUND(NAL.KOL_NAL - NAL.KOL_IZL,5),NAL.KOL_NAL) as KOL_NAL, 
                NAL.LAST_CENA, 
                NAL.KOL_RZV 
            FROM 
                NAL 
            WHERE 
                NAL.SIMPLE_ID =:R_SIMPLEID AND NAL.SKLAD_ID =:R_SKLADID 
            INTO :R_KOL_NAL, :R_LAST_CENA, :R_KOL_RZV; 
 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_LAST_DOSTPLACE (
    P_PLACEID INTEGER,
    P_OPR_ID INTEGER,
    P_BARCODE TYPE OF DOM_KEY,
    P_SKLAD_ID VARCHAR(3000),
    P_SHOW_IZL TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SIMPLEID INTEGER,
    R_SIMPLENAME VARCHAR(100),
    R_SKLADID INTEGER,
    R_CODE DOM_CHAR_50,
    R_KOLKRIMIN DOUBLE PRECISION,
    R_KOLKRIMAX DOUBLE PRECISION,
    R_ME CHAR(2),
    R_MEID INTEGER,
    R_CENA_CL DOUBLE PRECISION,
    R_DDS DECIMAL(4,2),
    R_GRNAME VARCHAR(100),
    R_MEKOEF SMALLINT,
    R_BAR_CODE VARCHAR(13),
    R_KLINAME VARCHAR(100),
    R_KLI_ID INTEGER,
    R_CODE_2 TYPE OF DOM_CHAR_50,
    R_SKLAD_NAME TYPE OF DOM_CHAR_50,
    R_KOL_NAL TYPE OF DOM_KOL,
    R_KOL_RZV TYPE OF DOM_KOL,
    R_LAST_CENA TYPE OF DOM_CENA)
AS
declare variable L_SYSTEM_SKLAD_ID type of DOM_KEY; 
BEGIN 
    SELECT SYSTEM.H_SKLAD FROM SYSTEM INTO :L_SYSTEM_SKLAD_ID; 
    FOR SELECT 
        SKLAD.ID, 
        SKLAD.NAME 
    FROM 
        SKLAD 
    WHERE 
        SKLAD.ID <> :L_SYSTEM_SKLAD_ID 
        AND (:P_SKLAD_ID LIKE '%,'||SKLAD.ID||',%') 
    INTO 
        :R_SKLADID, :R_SKLAD_NAME 
    DO BEGIN 
    FOR 
        SELECT 
            SIMPLE.ID, 
            SIMPLE.NAME, 
            SIMPLE.CODE, 
            SIMPLE.KOL_KRI_MIN, 
            SIMPLE.KOL_KRI_MAX, 
            ME.NAME, 
            SIMPLE.ME_ID, 
            (SELECT CENA FROM CENOVA_LISTA_EL WHERE CENOVA_LISTA_EL.SIMPLE_ID= SIMPLE.ID AND CENOVA_LISTA_EL.OPR_ID = :P_OPR_ID), 
            SIMPLE.DDS, 
            SELEKCIQ.NAME, 
            COALESCE(ME.KOEF,0), 
            SIMPLE.CODE2 
        FROM 
            OPR JOIN KLI ON KLI.ID = OPR.KLI_ID 
            INNER JOIN IN_EL ON IN_EL.OPR_ID = OPR.ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
            LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
            LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
        WHERE 
            OPR.OPR_TIP = 1 AND 
            KLI.PLACE_ID=:P_PLACEID 
 
 
        INTO 
            :R_SIMPLEID, 
            :R_SIMPLENAME, 
            :R_CODE, 
            :R_KOLKRIMIN, 
            :R_KOLKRIMAX, 
            :R_ME, 
            :R_MEID, 
            :R_CENA_CL, 
            :R_DDS, 
            :R_GRNAME, 
            :R_MEKOEF, 
            :R_CODE_2 
    DO BEGIN 
        R_BAR_CODE = NULL; 
        IF (:P_BARCODE = 1) THEN 
            SELECT FIRST 1 
                BAR."BARCODE" 
            FROM 
                BARCODE BAR 
            WHERE 
                BAR.SIMPLE_ID=:R_SIMPLEID 
            INTO :R_BAR_CODE; 
 
            R_KOL_NAL = NULL; 
            R_LAST_CENA = NULL; 
            R_KOL_RZV = NULL; 
            SELECT 
                IIF(:P_SHOW_IZL = 1, ROUND(NAL.KOL_NAL - NAL.KOL_IZL,5),NAL.KOL_NAL) as KOL_NAL, 
                NAL.LAST_CENA, 
                NAL.KOL_RZV 
            FROM 
                NAL 
            WHERE 
                NAL.SIMPLE_ID =:R_SIMPLEID AND NAL.SKLAD_ID =:R_SKLADID 
            INTO :R_KOL_NAL, :R_LAST_CENA, :R_KOL_RZV; 
 
        SUSPEND; 
    END 
  END 
END^


ALTER PROCEDURE GET_LAST_DOSTSEL (
    P_DEFSELID INTEGER,
    OPR_ID INTEGER,
    P_SKLAD_ID VARCHAR(3000),
    P_BARCODE TYPE OF DOM_SMAL_INT,
    P_SHOW_IZL TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SIMPLEID INTEGER,
    R_SIMPLENAME VARCHAR(100),
    R_CODE DOM_CHAR_50,
    R_MEID INTEGER,
    R_ME CHAR(2),
    R_CENA_CL DOUBLE PRECISION,
    R_DDS DECIMAL(4,2),
    R_GRNAME VARCHAR(100),
    R_MEKOEF SMALLINT,
    R_BARCODE VARCHAR(13),
    R_KLINAME VARCHAR(100),
    R_KOLKRIMAX FLOAT,
    R_KOLKRIMIN FLOAT,
    R_SKLADID INTEGER,
    R_KLI_ID INTEGER,
    R_SKLAD_NAME VARCHAR(20),
    R_CODE2 TYPE OF DOM_CHAR_50,
    R_KOL_NAL TYPE OF DOM_KOL,
    R_KOL_RZV TYPE OF DOM_KOL,
    R_LAST_CENA TYPE OF DOM_CENA)
AS
declare variable L_SYSTEM_SKLAD_ID integer; 
BEGIN 
  SELECT SYSTEM.H_SKLAD FROM SYSTEM INTO :L_SYSTEM_SKLAD_ID; 
 
  FOR SELECT 
      SIMPLE.ID, 
      SIMPLE.NAME, 
      SIMPLE.CODE, 
      SIMPLE.ME_ID, 
      SIMPLE.KOL_KRI_MIN, 
      SIMPLE.KOL_KRI_MAX, 
      ME.NAME AS ME, 
      SIMPLE.DDS AS D_D_S, 
      SELEKCIQ.NAME AS GR_NAME, 
      COALESCE(ME.KOEF,0) AS ME_KOEF, 
      SIMPLE.CODE2 
    FROM 
        SIMPLE INNER JOIN SELEKCIQ_SIM_EL ON SELEKCIQ_SIM_EL.SIMPLE_ID = SIMPLE.ID 
        INNER JOIN SELEKCIQ ON SELEKCIQ.ID = SELEKCIQ_SIM_EL.SELEKCIQ_ID 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
    WHERE 
        SIMPLE."ACTIVE" <> '0' AND 
        SIMPLE.USLUGA <> '1' AND 
        SELEKCIQ.ID = :P_DEFSELID 
    ORDER BY 2 
    INTO :R_SIMPLEID,:R_SIMPLENAME,:R_CODE,:R_MEID,:R_KOLKRIMIN,:R_KOLKRIMAX,:R_ME,:R_DDS,:R_GRNAME,:R_MEKOEF,:R_CODE2 
    DO BEGIN 
 
        SELECT CENA FROM CENOVA_LISTA_EL WHERE SIMPLE_ID= :R_SIMPLEID AND OPR_ID = :OPR_ID INTO :R_CENA_CL; 
 
        FOR SELECT 
            SKLAD.ID, 
            SKLAD.NAME 
        FROM 
            SKLAD 
        WHERE 
            SKLAD.ID <> :L_SYSTEM_SKLAD_ID 
            AND (:P_SKLAD_ID LIKE '%,'||SKLAD.ID||',%') 
      INTO :R_SKLADID, :R_SKLAD_NAME 
      DO BEGIN 
        R_BARCODE = NULL; 
 
        if (p_barcode = 1) then 
            SELECT FIRST 1 
                BAR."BARCODE" 
            FROM 
                BARCODE BAR 
            WHERE 
                BAR.SIMPLE_ID =:R_SIMPLEID 
            into :R_BARCODE; 
 
            R_KOL_NAL = NULL; 
            R_LAST_CENA = NULL; 
            R_KOL_RZV = NULL; 
            SELECT 
                IIF(:P_SHOW_IZL = 1, ROUND(NAL.KOL_NAL - NAL.KOL_IZL,5),NAL.KOL_NAL) as KOL_NAL, 
                NAL.LAST_CENA, 
                NAL.KOL_RZV 
            FROM 
                NAL 
            WHERE 
                NAL.SIMPLE_ID =:R_SIMPLEID AND NAL.SKLAD_ID =:R_SKLADID 
            INTO :R_KOL_NAL, :R_LAST_CENA, :R_KOL_RZV; 
        SUSPEND; 
      END 
    END 
END^


ALTER PROCEDURE GET_LAST_DVSK
RETURNS (
    SIMPLE_ID INTEGER,
    BG_NOMER VARCHAR(15),
    TYPE_DOC VARCHAR(10),
    NOM_DOK VARCHAR(20),
    DATE_PROIZV DATE,
    SROK_G DATE,
    PROIZVODITEL VARCHAR(50))
AS
BEGIN 
    FOR SELECT 
        SIMPLE.ID 
    FROM 
        SIMPLE 
    INTO 
        :SIMPLE_ID 
    DO BEGIN 
        BG_NOMER = NULL; 
        TYPE_DOC = NULL; 
        NOM_DOK = NULL; 
        DATE_PROIZV = NULL; 
        SROK_G = NULL; 
        PROIZVODITEL = NULL; 
        SELECT FIRST 1 
            DVSK_EL.BG_NOMER, 
            DVSK_DOK_TYPE.SHORT_NAME, 
            DVSK_EL.NOM_DOK, 
            DVSK_EL.DATE_PROIZV, 
            PARTIDA_EL.SROK, 
            KLI.NAME AS PROIZVODITEL 
        FROM 
            OPR INNER JOIN IN_EL ON IN_EL.OPR_ID = OPR.ID AND OPR.OPR_TIP = 1 AND IN_EL.SIMPLE_ID = :SIMPLE_ID 
            INNER JOIN PARTIDA_NAL PN ON PN.IN_EL_ID = IN_EL.ID 
            INNER JOIN DVSK_OPR ON DVSK_OPR.OPR_ID = OPR.ID 
            INNER JOIN PARTIDA_EL ON PARTIDA_EL.ID = PN.ELEMENT_ID 
            LEFT JOIN DVSK_EL ON DVSK_EL.PARTIDA_EL_ID = PN.ELEMENT_ID 
            LEFT JOIN DVSK_DOK_TYPE ON DVSK_DOK_TYPE.ID = DVSK_EL.TYPE_DOK 
            LEFT JOIN KLI ON KLI.ID = DVSK_EL.KLI_ID_PROIZV 
        WHERE 
            IN_EL.SIMPLE_ID = :SIMPLE_ID 
            AND OPR.OPR_TIP = 1 
        ORDER BY 
            IN_EL.ID DESC 
        INTO :BG_NOMER, :TYPE_DOC, :NOM_DOK, :DATE_PROIZV, :SROK_G, :PROIZVODITEL; 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_LAST_OPR_COMMENTS
RETURNS (
    OPRID INTEGER,
    NOTE BLOB SUB_TYPE 1 SEGMENT SIZE 80)
AS
DECLARE VARIABLE I INTEGER; 
begin 
  /* Procedure Text */ 
 
  FOR SELECT 
    COMMENT_OPR_NODE.OPR_ID, MAX( COMMENT_OPR_NODE.ID ) 
  FROM 
    COMMENT_OPR_NODE 
  GROUP BY 
    COMMENT_OPR_NODE.OPR_ID 
  INTO 
    :OPRID, :I 
  DO 
  BEGIN 
    SELECT COMMENTS.NOTE 
    FROM COMMENTS 
    INNER JOIN COMMENT_OPR_NODE ON COMMENTS.ID = COMMENT_OPR_NODE.COMMENT_ID 
    WHERE COMMENT_OPR_NODE.ID = :I 
    INTO :NOTE; 
 
    SUSPEND; 
  END 
end^


ALTER PROCEDURE GET_LAST_OPR_FOR_PER_OTC (
    P_LAST_OPR_ID_FOR_PER INTEGER,
    P_USER_ID INTEGER)
RETURNS (
    R_RESULT INTEGER)
AS
DECLARE VARIABLE C INTEGER; 
DECLARE VARIABLE C1 INTEGER; 
BEGIN 
 
  C = 0; 
  SELECT 
    COUNT(OPR.ID) 
  FROM 
    OPR 
  WHERE 
    OPR.ID > :P_LAST_OPR_ID_FOR_PER AND 
    OPR.USER_ID <> :P_USER_ID AND 
    (OPR.OPR_TIP > 100) 
  INTO 
    :C; 
 
  C1 = 0; 
  SELECT 
    COUNT(OPR.ID) 
  FROM 
    OPR 
  WHERE 
    OPR.ID > :P_LAST_OPR_ID_FOR_PER AND 
    OPR.USER_ID = :P_USER_ID 
  INTO 
    :C1; 
 
  R_RESULT = C + C1; 
 
  SUSPEND; 
END^


ALTER PROCEDURE GET_LAST_PARTIDEN_NOMER (
    P_OUT_EL_ID INTEGER)
RETURNS (
    R_SN VARCHAR(30),
    R_OUT_EL_ID INTEGER,
    R_SROK_GODNOST DATE)
AS
BEGIN 
  R_OUT_EL_ID = P_OUT_EL_ID; 
  R_SN = NULL; 
  SELECT FIRST 1 
    SERIAL_NUM.SN, 
    PARTIDA_EL.SROK 
  FROM 
    PARTIDA_OUT_EL_NODE 
    INNER JOIN PARTIDA_EL_NODE ON PARTIDA_EL_NODE.ID = PARTIDA_OUT_EL_NODE.PARTIDA_NODE_ID AND PARTIDA_OUT_EL_NODE.OUT_EL_ID = :P_OUT_EL_ID 
    INNER JOIN PARTIDA_NAL ON PARTIDA_NAL.ID = PARTIDA_EL_NODE.PARTIDA_ID 
    INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PARTIDA_NAL.ELEMENT_ID 
    LEFT JOIN PARTIDA_EL ON PARTIDA_EL.ID = SERIAL_NUM.PARTIDA_EL_ID 
  ORDER BY SERIAL_NUM.ID DESC 
  INTO 
    :R_SN, :R_SROK_GODNOST; 
 
  SUSPEND; 
END^


ALTER PROCEDURE GET_LAST_SN
RETURNS (
    SIMPLE_ID INTEGER,
    SN VARCHAR(100))
AS
declare variable ID integer; 
declare variable LAST_SIMPLE_ID integer; 
BEGIN 
  LAST_SIMPLE_ID = 0; 
 
  FOR SELECT DISTINCT 
    SIMPLE.ID, 
    SERIAL_NUM.SN 
  FROM 
    PARTIDA_NAL 
    INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PARTIDA_NAL.ELEMENT_ID 
    INNER JOIN IN_EL ON IN_EL.ID = PARTIDA_NAL.IN_EL_ID 
    INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
  WHERE 
    PARTIDA_NAL.ID > 0 AND 
    PARTIDA_NAL.KOL > 0 AND 
    SERIAL_NUM.SN IS NOT NULL AND SERIAL_NUM.SN <> '' 
  ORDER BY SIMPLE.ID, SERIAL_NUM.ID DESC 
  INTO 
    :SIMPLE_ID, :SN 
  DO BEGIN 
    IF (LAST_SIMPLE_ID <> SIMPLE_ID) THEN 
      SUSPEND; 
    LAST_SIMPLE_ID = SIMPLE_ID; 
  END 
END^


ALTER PROCEDURE GET_LOG_CENI_DDS (
    P_OPR_ID TYPE OF DOM_INT)
RETURNS (
    R_TIP_CENI TYPE OF DOM_SMAL_INT)
AS
BEGIN 
    SELECT FIRST 1 
        LOG_CENI_DDS.TIP_CENI 
    FROM 
        LOG_CENI_DDS 
    WHERE 
        LOG_CENI_DDS.OPR_ID <:P_OPR_ID AND LOG_CENI_DDS.TIP_DDS = 0 
    INTO :R_TIP_CENI; 
 
    SUSPEND; 
END^


ALTER PROCEDURE GET_MONTAGE_SUM (
    P_ORDER_ID TYPE OF DOM_KEY,
    P_CL_ID TYPE OF DOM_KEY)
RETURNS (
    R_SUMA_DUE TYPE OF DOM_SUMA,
    R_SUMA_PAYED TYPE OF DOM_SUMA,
    R_ORDER_ID TYPE OF DOM_KEY,
    R_SUMA_BONUS TYPE OF DOM_SUMA)
AS
BEGIN 
    select 
        ROUNDD(SUM(SUMA)) 
    FROM 
    (SELECT 
        SUM(POR_EL.KOL * COALESCE(POR_EL.INSTALLATION_PRICE, CENOVA_LISTA_EL.CENA, 2)) AS SUMA 
    FROM 
        POR_EL INNER JOIN SIMPLE ON SIMPLE.ID = POR_EL.SIMPLE_ID 
        INNER JOIN CENOVA_LISTA_EL ON CENOVA_LISTA_EL.SIMPLE_ID = SIMPLE.ID 
        INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
        INNER JOIN POR ON POR.OPR_ID = POR_EL.OPR_ID 
    WHERE 
        CENOVA_LISTA.ID = :P_CL_ID 
        AND POR.ID =:P_ORDER_ID 
 
    UNION ALL 
 
    SELECT 
        SUM(POR_EL.KOL * COALESCE(POR_EL.INSTALLATION_PRICE, CENOVA_LISTA_EL.CENA, 2)) AS SUMA 
    FROM 
        POR_EL INNER JOIN SIMPLE ON SIMPLE.ID = POR_EL.SIMPLE_ID 
        INNER JOIN CENOVA_LISTA_EL ON CENOVA_LISTA_EL.SIMPLE_ID = SIMPLE.ID 
        INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
        INNER JOIN POR ON POR.OPR_ID = POR_EL.OPR_ID 
        INNER JOIN POR_EL_PRODUCTION ON POR_EL_PRODUCTION.POR_EL_ID = POR_EL.ID 
    WHERE 
        CENOVA_LISTA.ID = :P_CL_ID 
        AND POR.ID =:P_ORDER_ID 
    ) 
    INTO :R_SUMA_DUE; 
 
    SELECT 
        ROUND(SUM(INSTALLATION_USERS.SUMA), 2) 
    FROM 
        INSTALLATION_USERS INNER JOIN INSTALLATIONS ON INSTALLATIONS.ID = INSTALLATION_USERS.INSTALLATION_ID 
    WHERE 
        INSTALLATIONS.ORDER_ID =:P_ORDER_ID 
    INTO :R_SUMA_PAYED; 
 
    SELECT 
        SUM(INSTALLATION_USERS.BONUS_SUMA) 
    FROM 
        INSTALLATION_USERS INNER JOIN INSTALLATIONS ON INSTALLATIONS.ID = INSTALLATION_USERS.INSTALLATION_ID 
    WHERE 
        INSTALLATIONS.ORDER_ID =:P_ORDER_ID 
    INTO :R_SUMA_BONUS; 
 
    R_ORDER_ID =:P_ORDER_ID; 
    SUSPEND; 
 
END^


ALTER PROCEDURE GET_MOVE (
    P_ID INTEGER,
    P_TYPE SMALLINT,
    P_CL_ID INTEGER)
RETURNS (
    BAR_CODE VARCHAR(13),
    ME_LONG VARCHAR(15),
    CODE TYPE OF DOM_CHAR_50,
    NAME VARCHAR(100),
    MENAME CHAR(2),
    KOL DOUBLE PRECISION,
    KOL_RAZ DOUBLE PRECISION,
    NAME_RAZ VARCHAR(30),
    CENA DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    NOM_DOK VARCHAR(5000),
    ME2NAME VARCHAR(2),
    KOL2 DOUBLE PRECISION,
    R_OUT_EL_ID INTEGER,
    KOL_NA_RAZ DOUBLE PRECISION,
    R_CODE_2 TYPE OF DOM_CHAR_50,
    R_NAME_SHORT TYPE OF DOM_CHAR_50,
    R_EXT_1 TYPE OF DOM_CHAR_2000,
    R_EXT_2 TYPE OF DOM_CHAR_1000)
AS
declare variable L_STR_SQL varchar(3000); 
declare variable L_NOM varchar(100); 
declare variable L_GODNOST smallint; 
declare variable L_OUT_ID integer; 
declare variable L_CENA double precision; 
declare variable L_SIMPLE_ID integer; 
BEGIN 
/*V.2*/ 
    FOR SELECT 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        ME1.NAME, 
        OUT_EL.KOL, 
        OUT_EL_RAZ_NODE.KOL, 
        COALESCE(RAZ_ELEMENT.NAME, ME1.NAME), 
        CASE 
            WHEN :P_TYPE IN (0) THEN CAST(COALESCE(OUT_EL.SUMA_SR/OUT_EL.KOL,0) AS DOUBLE PRECISION) 
            WHEN :P_TYPE = 1 THEN CAST(COALESCE(OUT_EL.SUMA/OUT_EL.KOL,0) AS DOUBLE PRECISION) 
        END, 
        CASE 
            WHEN :P_TYPE IN (0) THEN OUT_EL.SUMA_SR 
            WHEN :P_TYPE = 1 THEN OUT_EL.SUMA 
        END, 
        SIMPLE.GODNOST, 
        OUT_EL.ID, 
        ME2.NAME, 
        OUT_EL2.KOL, 
        ME1.NAME_LONG, 
        (SELECT FIRST 1 BAR."BARCODE" FROM "BARCODE" BAR WHERE BAR.SIMPLE_ID = SIMPLE.ID ), 
        OUT_EL.SIMPLE_ID, 
        COALESCE(RAZFASOVKA.KOL,1), 
        SIMPLE.CODE2 AS CODE2, 
        SIMPLE.NAME_SHORT, 
        SIMPLE.EXT1, 
        SIMPLE.EXT2 
    FROM 
        OUT_EL LEFT JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN OUT_EL_RAZ_NODE ON OUT_EL_RAZ_NODE.OUT_EL_ID = OUT_EL.ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = OUT_EL_RAZ_NODE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZFASOVKA.RAZ_ELEMENT_ID = RAZ_ELEMENT.ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN OUT_EL2 ON OUT_EL2.OUT_EL_ID = OUT_EL.ID 
    WHERE 
        OUT_EL.OPR_ID = :P_ID 
 
    UNION 
 
    SELECT 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        ME1.NAME, 
        OLD_OUT_EL.KOL, 
        OUT_EL_RAZ_NODE.KOL, 
        COALESCE(RAZ_ELEMENT.NAME, ME1.NAME), 
        CASE 
            WHEN :P_TYPE = 0 THEN CAST(COALESCE(OLD_OUT_EL.SUMA_SR/OLD_OUT_EL.KOL,0) AS DOUBLE PRECISION) 
            WHEN :P_TYPE = 1 THEN CAST(COALESCE(OLD_OUT_EL.SUMA/OLD_OUT_EL.KOL,0) AS DOUBLE PRECISION) 
        END AS CENA, 
        CASE 
            WHEN :P_TYPE = 0 THEN OLD_OUT_EL.SUMA_SR 
            WHEN :P_TYPE = 1 THEN OLD_OUT_EL.SUMA 
        END, 
        SIMPLE.GODNOST, 
        OLD_OUT_EL.ID, 
        ME2.NAME, 
        OUT_EL2.KOL, 
        ME1.NAME_LONG, 
        (SELECT FIRST 1 BAR."BARCODE" FROM "BARCODE" BAR WHERE BAR.SIMPLE_ID = SIMPLE.ID ), 
        OLD_OUT_EL.SIMPLE_ID, 
        COALESCE(RAZFASOVKA.KOL,1), 
        SIMPLE.CODE2 AS CODE2, 
        SIMPLE.NAME_SHORT, 
        SIMPLE.EXT1, 
        SIMPLE.EXT2 
    FROM 
        OLD_OUT_EL LEFT JOIN SIMPLE ON SIMPLE.ID = OLD_OUT_EL.SIMPLE_ID LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN OUT_EL_RAZ_NODE ON OUT_EL_RAZ_NODE.OUT_EL_ID = OLD_OUT_EL.ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = OUT_EL_RAZ_NODE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZFASOVKA.RAZ_ELEMENT_ID = RAZ_ELEMENT.ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN OUT_EL2 ON OUT_EL2.OUT_EL_ID = OLD_OUT_EL.ID 
    WHERE 
        OLD_OUT_EL.OPR_ID = :P_ID 
 
    UNION 
 
    SELECT 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        ME1.NAME, 
        OLD_OUT_EL.KOL, 
        OUT_EL_RAZ_NODE.KOL, 
        COALESCE(RAZ_ELEMENT.NAME, ME1.NAME), 
        CASE 
            WHEN :P_TYPE IN (0) THEN CAST(COALESCE(OLD_OUT_EL.SUMA_SR/OLD_OUT_EL.KOL,0) AS DOUBLE PRECISION) 
            WHEN :P_TYPE = 1 THEN CAST(COALESCE(OLD_OUT_EL.SUMA/OLD_OUT_EL.KOL,0) AS DOUBLE PRECISION) 
        END AS CENA, 
        CASE 
            WHEN :P_TYPE IN (0) THEN OLD_OUT_EL.SUMA_SR 
            WHEN :P_TYPE = 1 THEN OLD_OUT_EL.SUMA 
        END, 
        SIMPLE.GODNOST, 
        OLD_OUT_EL.ID, 
        ME2.NAME, 
        OUT_EL2.KOL, 
        ME1.NAME_LONG, 
        (SELECT FIRST 1 BAR."BARCODE" FROM "BARCODE" BAR WHERE BAR.SIMPLE_ID = SIMPLE.ID ), 
        OLD_OUT_EL.SIMPLE_ID, 
        COALESCE(RAZFASOVKA.KOL,1), 
        SIMPLE.CODE2 AS CODE2, 
        SIMPLE.NAME_SHORT, 
        SIMPLE.EXT1, 
        SIMPLE.EXT2 
    FROM 
        OPR_ANUL INNER JOIN OPR OPR1 ON OPR1.ID = OPR_ANUL.AN_OPR_ID AND OPR_ANUL.AN_OPR_ID =:P_ID 
        INNER JOIN OLD_OUT_EL ON OLD_OUT_EL.OPR_ID = OPR_ANUL.OPR_ID 
        LEFT JOIN SIMPLE ON SIMPLE.ID = OLD_OUT_EL.SIMPLE_ID LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN OUT_EL_RAZ_NODE ON OUT_EL_RAZ_NODE.OUT_EL_ID = OLD_OUT_EL.ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = OUT_EL_RAZ_NODE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZFASOVKA.RAZ_ELEMENT_ID = RAZ_ELEMENT.ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN OUT_EL2 ON OUT_EL2.OUT_EL_ID = OLD_OUT_EL.ID 
    INTO 
        :CODE,:NAME,:MENAME,:KOL,:KOL_RAZ,:NAME_RAZ,:CENA,:SUMA,:L_GODNOST,:L_OUT_ID,:ME2NAME, 
        :KOL2,:ME_LONG,:BAR_CODE,:L_SIMPLE_ID, KOL_NA_RAZ, :R_CODE_2,  :R_NAME_SHORT, :R_EXT_1, :R_EXT_2 
    DO BEGIN 
        IF (P_TYPE = 2) THEN BEGIN 
            EXECUTE PROCEDURE GET_CENA_CL(:P_CL_ID,:L_SIMPLE_ID) 
            RETURNING_VALUES(L_CENA); 
            SUMA = L_CENA * KOL; 
            CENA = L_CENA; 
        END 
 
        NOM_DOK = ''; 
        IF (L_GODNOST > 0 ) THEN BEGIN 
            L_NOM = ''; 
            FOR SELECT DISTINCT 
                DVSK_EL.NOM_DOK 
            FROM 
                PARTIDA_OUT_EL_NODE POEN 
                INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = POEN.PARTIDA_NODE_ID 
                INNER JOIN PARTIDA_NAL ON PARTIDA_NAL.ID = PEN.PARTIDA_ID 
                INNER JOIN DVSK_EL ON DVSK_EL.PARTIDA_EL_ID = PARTIDA_NAL.ELEMENT_ID 
            WHERE 
                POEN.OUT_EL_ID = :L_OUT_ID 
            INTO 
                :L_NOM 
            DO BEGIN 
                NOM_DOK =NOM_DOK || L_NOM || ', '; 
            END 
        END 
 
        R_OUT_EL_ID = L_OUT_ID; 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_MOVE_SUMA (
    P_ID INTEGER,
    P_TYPE SMALLINT)
RETURNS (
    SUMA DOUBLE PRECISION)
AS
declare variable l_str_sql varchar(3000);
declare variable l_suma double precision;
BEGIN
  suma = 0;
  l_str_sql = 'SELECT ';

  if (p_type = 0) then begin
    l_str_sql = l_str_sql||'ROUNDD(SIMPLE.CENA_PROD * OUT_EL.KOL) AS SUMA ';
    l_str_sql = l_str_sql||'FROM OUT_EL LEFT JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID ';
    l_str_sql = l_str_sql||'LEFT JOIN OUT_EL_RAZ_NODE ON OUT_EL_RAZ_NODE.OUT_EL_ID = OUT_EL.ID ';
    l_str_sql = l_str_sql||'LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = OUT_EL_RAZ_NODE.RAZFASOVKA_ID ';
    l_str_sql = l_str_sql||'LEFT JOIN RAZ_ELEMENT ON RAZFASOVKA.RAZ_ELEMENT_ID = RAZ_ELEMENT.ID ';
    l_str_sql = l_str_sql||'WHERE OUT_EL.OPR_ID = '||cast(p_id as varchar(20));
    l_str_sql = l_str_sql||'UNION ALL ';
    l_str_sql = l_str_sql||'SELECT ROUNDD(SIMPLE.CENA_PROD * OUT_EL_ANUL.KOL) AS SUMA ';
  end

  if (p_type = 1) then begin
    l_str_sql = l_str_sql||'ROUNDD(SIMPLE.CENA_EDRO * OUT_EL.KOL) AS SUMA ';
    l_str_sql = l_str_sql||'FROM OUT_EL LEFT JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID ';
    l_str_sql = l_str_sql||'LEFT JOIN OUT_EL_RAZ_NODE ON OUT_EL_RAZ_NODE.OUT_EL_ID = OUT_EL.ID ';
    l_str_sql = l_str_sql||'LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = OUT_EL_RAZ_NODE.RAZFASOVKA_ID ';
    l_str_sql = l_str_sql||'LEFT JOIN RAZ_ELEMENT ON RAZFASOVKA.RAZ_ELEMENT_ID = RAZ_ELEMENT.ID ';
    l_str_sql = l_str_sql||'WHERE OUT_EL.OPR_ID = '||cast(p_id as varchar(20));
    l_str_sql = l_str_sql||'UNION ALL ';
    l_str_sql = l_str_sql||'SELECT ROUNDD(SIMPLE.CENA_EDRO * OUT_EL_ANUL.KOL) AS SUMA ';
  end

  if (p_type = 2) then begin
    l_str_sql = l_str_sql||'OUT_EL.SUMA_FR AS SUMA ';
    l_str_sql = l_str_sql||'FROM OUT_EL LEFT JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID ';
    l_str_sql = l_str_sql||'LEFT JOIN OUT_EL_RAZ_NODE ON OUT_EL_RAZ_NODE.OUT_EL_ID = OUT_EL.ID ';
    l_str_sql = l_str_sql||'LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = OUT_EL_RAZ_NODE.RAZFASOVKA_ID ';
    l_str_sql = l_str_sql||'LEFT JOIN RAZ_ELEMENT ON RAZFASOVKA.RAZ_ELEMENT_ID = RAZ_ELEMENT.ID ';
    l_str_sql = l_str_sql||'WHERE OUT_EL.OPR_ID = '||cast(p_id as varchar(20));
    l_str_sql = l_str_sql||'UNION ALL ';
    l_str_sql = l_str_sql||'SELECT OUT_EL_ANUL.SUMA_FR AS SUMA ';
  end

  l_str_sql = l_str_sql||'FROM OUT_EL_ANUL LEFT JOIN SIMPLE ON SIMPLE.ID = OUT_EL_ANUL.SIMPLE_ID ';
  l_str_sql = l_str_sql||'LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID ';
  l_str_sql = l_str_sql||'INNER JOIN OPR_ANUL ON OPR_ANUL.ID = OUT_EL_ANUL.ANUL_ID ';
  l_str_sql = l_str_sql||'WHERE OPR_ANUL.AN_OPR_ID = '||cast(p_id as varchar(20));
  FOR
    execute statement l_str_sql
    INTO
         :l_suma
  DO
  BEGIN
    suma = suma + :l_suma;
  END
  SUSPEND;
END^


ALTER PROCEDURE GET_MULTI_PROD_PADEJ (
    P_OPRS VARCHAR(1000),
    SUMA DOUBLE PRECISION)
RETURNS (
    R_OPR_ID INTEGER,
    R_SUMA_PADEJ DOUBLE PRECISION,
    PADEJ_NUM INTEGER)
AS
DECLARE VARIABLE L_SUMA_OST DOUBLE PRECISION; 
DECLARE VARIABLE L_OPR_ID INTEGER; 
DECLARE VARIABLE L_RAZLIKA DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_DOP DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_1 DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_2 DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_PADEJ DOUBLE PRECISION; 
BEGIN 
    L_SUMA_1 = 0; 
    L_SUMA_2 = 0; 
    PADEJ_NUM = 0; 
    L_SUMA_PADEJ = 0; 
 
    FOR EXECUTE STATEMENT 
     'SELECT 
        SUMI.SUMA_OST, 
        SUMI.OPR_ID 
     FROM 
        SUMI 
     WHERE 
        SUMI.OPR_ID IN ('||:P_OPRS||')' 
     INTO :L_SUMA_OST, :L_OPR_ID 
 
     DO 
     BEGIN 
            L_RAZLIKA = SUMA - L_SUMA_OST; 
 
            IF (L_SUMA_2 > L_SUMA_OST) THEN 
                L_SUMA_2 = 0; 
 
            IF (L_SUMA_2 <> 0) THEN 
            BEGIN 
                R_SUMA_PADEJ =ROUNDD(L_SUMA_2); 
                R_OPR_ID = L_OPR_ID; 
 
                IF (R_SUMA_PADEJ > 0) THEN 
                SUSPEND; 
 
                PADEJ_NUM = PADEJ_NUM + 1; 
                L_SUMA_PADEJ = 0; 
            END 
 
            IF (L_RAZLIKA >=0) THEN 
            BEGIN 
                L_SUMA_1 = L_SUMA_OST - L_SUMA_2; 
                R_SUMA_PADEJ = ROUNDD(L_SUMA_1); 
                R_OPR_ID = L_OPR_ID; 
 
                IF (R_SUMA_PADEJ > 0) THEN 
                    SUSPEND; 
 
                L_SUMA_PADEJ = L_SUMA_PADEJ + L_SUMA_1; 
                L_SUMA_2 = SUMA - L_SUMA_PADEJ; 
            END 
            ELSE 
            BEGIN 
                L_SUMA_1 = L_SUMA_OST - L_SUMA_2; 
                WHILE (L_SUMA_1 > SUMA) DO 
                BEGIN 
                    R_SUMA_PADEJ = ROUNDD(SUMA); 
                    R_OPR_ID = L_OPR_ID; 
                    L_SUMA_1 = L_SUMA_1 - SUMA; 
 
                    IF (R_SUMA_PADEJ > 0) THEN 
                    SUSPEND; 
 
                    PADEJ_NUM = PADEJ_NUM + 1; 
                END 
                IF (L_SUMA_1 <> 0 ) THEN 
                BEGIN 
                    R_SUMA_PADEJ = ROUNDD(L_SUMA_1); 
                    R_OPR_ID = L_OPR_ID; 
                    L_SUMA_DOP = L_SUMA_OST - R_SUMA_PADEJ; 
 
                    L_SUMA_2 = SUMA - L_SUMA_1; 
 
                    IF (R_SUMA_PADEJ > 0) THEN 
                    SUSPEND; 
                END 
            END 
        END 
END^


ALTER PROCEDURE GET_MULTI_PROD_SUMI (
    P_TYPE_CONTRAGENT TYPE OF DOM_SMAL_INT)
RETURNS (
    R_NOM_PROD TYPE OF DOM_CHAR_300,
    R_SUMA_CL DOUBLE PRECISION,
    R_SUMA_OS DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_SUMA_S_DDS DOUBLE PRECISION,
    R_SUMA_SALDO DOUBLE PRECISION,
    R_OPR_DATE DATE,
    R_OPR_DATE_TIME TIMESTAMP,
    R_SUMA_OS_NETO TYPE OF DOM_SUMA,
    R_SUMA_CL_NETO TYPE OF DOM_SUMA,
    R_CONTRAGENT TYPE OF DOM_CHAR_300)
AS
DECLARE VARIABLE L_OPR_ID INTEGER; 
DECLARE VARIABLE L_OUT_ID INTEGER; 
DECLARE VARIABLE L_SUMA_CL DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_OS DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_PROD DOUBLE PRECISION; 
DECLARE VARIABLE L_PAY_TIP INTEGER; 
DECLARE VARIABLE L_KLI_NAME TYPE OF DOM_CHAR_100; 
DECLARE VARIABLE L_FLAG_LONGER TYPE OF DOM_FLAG; 
DECLARE VARIABLE L_FIRST_OUT_ID TYPE OF DOM_INT; 
DECLARE VARIABLE L_LAST_OUT_ID TYPE OF DOM_INT; 
BEGIN 
    R_NOM_PROD = ''; 
    R_SUMA_CL = 0; 
    R_SUMA_OS = 0; 
    R_SUMA = 0; 
    R_SUMA_SALDO = 0; 
    R_CONTRAGENT = ''; 
    L_FLAG_LONGER = 0; 
    FOR SELECT 
        OPR.ID, 
        OPR.SUMA, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        KLI.NAME 
    FROM 
        OPR INNER JOIN SEL_OPR ON SEL_OPR.OPR_ID = OPR.ID 
        LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
    ORDER BY SEL_OPR.ID 
    INTO 
        :L_OPR_ID, :L_SUMA, :R_OPR_DATE, :R_OPR_DATE_TIME, :L_KLI_NAME 
    DO BEGIN 
        FOR SELECT 
            OUT.ID, 
            OUT.PAY_TIP 
        FROM 
            OUT 
        WHERE 
            OUT.OPR_ID = :L_OPR_ID 
        INTO 
            :L_OUT_ID,:L_PAY_TIP 
        DO 
            IF (CHAR_LENGTH(R_NOM_PROD || L_OUT_ID || ', ') <= 300) THEN 
            BEGIN 
                if (R_NOM_PROD <> '') then 
                    R_NOM_PROD = R_NOM_PROD || ', ' || L_OUT_ID; 
                ELSE 
                    R_NOM_PROD = L_OUT_ID; 
            END 
            ELSE 
            BEGIN 
                L_FLAG_LONGER = 1; 
            END 
 
        EXECUTE PROCEDURE GET_SUMI_PROD(:L_OPR_ID,0) 
        RETURNING_VALUES(:L_SUMA_PROD, :L_SUMA_CL, :L_SUMA_OS, :R_SUMA_S_DDS, :R_SUMA_OS_NETO, :R_SUMA_CL_NETO); 
 
        R_SUMA_CL = R_SUMA_CL + L_SUMA_CL; 
        R_SUMA_OS = R_SUMA_OS + L_SUMA_OS; 
        R_SUMA = R_SUMA + L_SUMA; 
        IF (:L_PAY_TIP IN (1,3)) THEN 
            R_SUMA_SALDO = R_SUMA_SALDO + :L_SUMA; 
 
 
        IF (:P_TYPE_CONTRAGENT = 1) THEN 
        BEGIN 
            IF (:L_KLI_NAME IS NOT NULL) THEN 
                R_CONTRAGENT =:L_KLI_NAME; 
        END 
    END 
 
    IF (:P_TYPE_CONTRAGENT = 0) THEN 
    BEGIN 
        SELECT 
            CAST(SUBSTRING(LIST(DISTINCT KLI.NAME, ', ') FROM 1 FOR 300) AS DOM_CHAR_300) 
        FROM 
            SEL_OPR INNER JOIN OPR ON OPR.ID = SEL_OPR.OPR_ID 
            INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
        INTO :R_CONTRAGENT; 
 
    END 
    if (L_FLAG_LONGER = 1) then 
    BEGIN 
        SELECT FIRST 1 
            OUT.ID 
        FROM 
            SEL_OPR INNER JOIN OUT ON OUT.OPR_ID = SEL_OPR.OPR_ID 
        ORDER BY SEL_OPR.OPR_ID 
        INTO :L_FIRST_OUT_ID; 
 
        SELECT FIRST 1 
            OUT.ID 
        FROM 
            SEL_OPR INNER JOIN OUT ON OUT.OPR_ID = SEL_OPR.OPR_ID 
        ORDER BY SEL_OPR.OPR_ID DESC 
        INTO :L_LAST_OUT_ID; 
 
        R_NOM_PROD = L_FIRST_OUT_ID || '..' ||L_LAST_OUT_ID; 
    END 
 
    SUSPEND; 
END ;^


ALTER PROCEDURE GET_MUVE_OPR (
    P_ID INTEGER,
    P_TYPE INTEGER,
    P_CL_ID INTEGER)
RETURNS (
    ID INTEGER,
    MOVE_ID INTEGER,
    IN_DATETIME DATE,
    OPR_DATETIME TIMESTAMP,
    SUMA DOUBLE PRECISION,
    USER_NAME VARCHAR(30),
    OT_SKLAD TYPE OF DOM_CHAR_50,
    W_SKLAD TYPE OF DOM_CHAR_50,
    ANULIRANA INTEGER,
    COMMENT_TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_STORAGE_ID TYPE OF DOM_INT,
    R_TO_STORAGE_ID DOM_INT)
AS
declare variable L_SIMPLE_ID integer; 
declare variable L_KOL double precision; 
declare variable L_CENA double precision; 
BEGIN 
    SELECT 
        OPR1.ID, 
        MOVE.ID, 
        OPR1.OPR_DATE, 
        OPR1.DATETIME, 
        OPR1.SUMA, 
        "USER".NAME, 
        SKLAD1.NAME, 
        SKLAD2.NAME, 
        0, 
        (SELECT FIRST 1 COMMENTS.NOTE FROM COMMENTS 
        INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
        WHERE COMMENT_OPR_NODE.OPR_ID=OPR1.ID 
        ORDER BY COMMENT_OPR_NODE.ID DESC), 
        SKLAD1.ID, 
        SKLAD2.ID 
    FROM 
        MOVE INNER JOIN OPR OPR1 ON OPR1.ID = MOVE.OPR_OUT_ID 
        INNER JOIN OPR OPR2 ON OPR2.ID = MOVE.OPR_IN_ID 
        INNER JOIN "USER" ON OPR1.USER_ID = "USER".ID 
        INNER JOIN SKLAD SKLAD1 ON SKLAD1.ID = OPR1.SKLAD_ID 
        INNER JOIN SKLAD SKLAD2 ON SKLAD2.ID = OPR2.SKLAD_ID 
    WHERE 
        ((MOVE.OPR_OUT_ID = :P_ID) OR (MOVE.OPR_IN_ID = :P_ID)) 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE ((OPR_ANUL.AN_OPR_ID = OPR1.ID)OR(OPR_ANUL.AN_OPR_ID = OPR2.ID)) ) 
 
    UNION 
    SELECT 
        OPR1.ID, 
        MOVE.ID, 
        OPR1.OPR_DATE, 
        OPR1.DATETIME, 
        OPR1.SUMA, 
        "USER".NAME, 
        SKLAD1.NAME, 
        SKLAD2.NAME, 
        1, 
        (SELECT FIRST 1 COMMENTS.NOTE FROM COMMENTS 
        INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
        WHERE COMMENT_OPR_NODE.OPR_ID=OPR1.ID 
        ORDER BY COMMENT_OPR_NODE.ID DESC), 
        SKLAD1.ID, 
        SKLAD2.ID 
    FROM 
        MOVE INNER JOIN OPR OPR1 ON OPR1.ID = MOVE.OPR_OUT_ID 
        INNER JOIN OPR OPR2 ON OPR2.ID = MOVE.OPR_IN_ID 
        INNER JOIN "USER" ON OPR1.USER_ID = "USER".ID 
        INNER JOIN SKLAD SKLAD1 ON SKLAD1.ID = OPR1.SKLAD_ID 
        INNER JOIN SKLAD SKLAD2 ON SKLAD2.ID = OPR2.SKLAD_ID 
    WHERE 
        ((MOVE.OPR_OUT_ID = :P_ID) OR (MOVE.OPR_IN_ID = :P_ID)) 
        AND EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE ((OPR_ANUL.AN_OPR_ID = OPR1.ID)OR(OPR_ANUL.AN_OPR_ID = OPR2.ID)) ) 
    INTO 
        :ID,:MOVE_ID,:IN_DATETIME,:OPR_DATETIME,:SUMA,:USER_NAME,:OT_SKLAD,:W_SKLAD,:ANULIRANA,:COMMENT_TEXT, :R_STORAGE_ID, :R_TO_STORAGE_ID; 
 
    IF (P_TYPE IN (0,1)) THEN BEGIN 
        SELECT 
            SUM(CASE 
                WHEN :P_TYPE = 0 THEN OUT_EL.SUMA_SR 
                WHEN :P_TYPE = 1 THEN OUT_EL.SUMA 
            END) 
        FROM 
            OUT_EL 
        WHERE 
            OUT_EL.OPR_ID = :ID 
        INTO 
            :SUMA; 
    END 
 
    IF (P_TYPE = 2) THEN BEGIN 
        SUMA = 0; 
        FOR SELECT 
            OUT_EL.KOL, 
            OUT_EL.SIMPLE_ID 
        FROM 
            OUT_EL 
        WHERE 
            OUT_EL.OPR_ID = :ID 
        INTO 
            :L_KOL,:L_SIMPLE_ID 
        DO BEGIN 
            EXECUTE PROCEDURE GET_CENA_CL(:P_CL_ID,:L_SIMPLE_ID) 
            RETURNING_VALUES(L_CENA); 
            SUMA = SUMA + COALESCE(:L_KOL*:L_CENA,0.00); 
        END 
    END 
    SUSPEND; 
END^


ALTER PROCEDURE GET_NAL_SKLADOVE (
    P_SKLAD_ID INTEGER,
    P_SHOW_RESERVE_QTY INTEGER)
RETURNS (
    R_NAL_SKLAD1 DOUBLE PRECISION,
    R_NAL_SKLAD2 DOUBLE PRECISION,
    R_SIMPLE_NAME VARCHAR(100),
    R_ME_NAME VARCHAR(2),
    R_NAL_SUMA1 DOUBLE PRECISION,
    R_NAL_SUMA2 DOUBLE PRECISION,
    R_NAL_SUMA_FR1 DOUBLE PRECISION,
    R_NAL_SUMA_FR2 DOUBLE PRECISION,
    R_SIMPLE_CODE VARCHAR(15),
    R_SIMPLE_ID INTEGER,
    R_RAZLIKA DOUBLE PRECISION,
    R_KOL_RZV_2 DOUBLE PRECISION,
    R_RAZLIKA_RZV DOUBLE PRECISION,
    R_KOL_RZV DOUBLE PRECISION)
AS
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
BEGIN 
    FOR SELECT 
        SIMPLE.ID, 
        SIMPLE.NAME, 
        ME.NAME, 
        SIMPLE.CODE 
    FROM 
        SIMPLE INNER JOIN ME ON ME.ID = SIMPLE.ME_ID 
        INNER JOIN TMP_SEL_1 TMP_SEL_1 ON TMP_SEL_1.ID = SIMPLE.ID 
    WHERE 
        SIMPLE."ACTIVE" <> 0 
    INTO :L_SIMPLE_ID,:R_SIMPLE_NAME,:R_ME_NAME,:R_SIMPLE_CODE 
 
    DO 
    BEGIN 
        SELECT 
            SUM(NAL.SUMA), 
            SUM(NAL.SUMA_FR), 
            SUM(NAL.KOL_NAL) 
        FROM 
            NAL 
        WHERE NAL.SIMPLE_ID =:L_SIMPLE_ID 
              AND NAL.SKLAD_ID =:P_SKLAD_ID 
        INTO :R_NAL_SUMA1,:R_NAL_SUMA_FR1,:R_NAL_SKLAD1; 
 
        if (:P_SHOW_RESERVE_QTY = 1) then 
            SELECT 
                SUM(OUT_EL.KOL) 
            FROM 
                OPR 
                INNER JOIN OUT ON OUT.OPR_ID = OPR.ID AND OUT.REQUIRE_FAKT = 1 
                INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OPR.ID AND OUT_EL.SIMPLE_ID =:L_SIMPLE_ID 
            WHERE 
                OPR.SKLAD_ID =:P_SKLAD_ID 
                AND NOT EXISTS (SELECT FAK_PROD.ID FROM FAK_PROD WHERE FAK_PROD.OPR_ID = OPR.ID) 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.OPR_ID = OPR.ID) 
            INTO :R_KOL_RZV; 
 
        SELECT 
            SUM(NAL_1.SUMA), 
            SUM(NAL_1.SUMA_FR), 
            SUM(NAL_1.KOL_NAL) 
        FROM 
            NAL NAL_1 INNER JOIN TMP_SEL_2 TMP_SEL_2 ON TMP_SEL_2.ID = NAL_1.SKLAD_ID 
        WHERE 
            NAL_1.SIMPLE_ID =:L_SIMPLE_ID AND NAL_1.SKLAD_ID <> :P_SKLAD_ID 
        INTO :R_NAL_SUMA2,:R_NAL_SUMA_FR2,:R_NAL_SKLAD2; 
 
        if (:P_SHOW_RESERVE_QTY = 1) then 
            SELECT 
                SUM(OUT_EL.KOL) 
            FROM 
                OPR NAL_1 
                INNER JOIN OUT ON OUT.OPR_ID = NAL_1.ID AND OUT.REQUIRE_FAKT = 1 
                INNER JOIN OUT_EL ON OUT_EL.OPR_ID = NAL_1.ID 
                INNER JOIN TMP_SEL_2 TMP_SEL_2 ON TMP_SEL_2.ID = NAL_1.SKLAD_ID 
            WHERE 
                NAL_1.OPR_TIP IN (2,34) AND NAL_1.SKLAD_ID <> :P_SKLAD_ID  AND OUT_EL.SIMPLE_ID = :L_SIMPLE_ID 
                AND NOT EXISTS (SELECT FAK_PROD.ID FROM FAK_PROD WHERE FAK_PROD.OPR_ID = NAL_1.ID) 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.OPR_ID = NAL_1.ID) 
            INTO :R_KOL_RZV_2; 
 
        R_SIMPLE_ID = L_SIMPLE_ID; 
        R_NAL_SKLAD1 = COALESCE(R_NAL_SKLAD1,0); 
 
        --IF (COALESCE(R_NAL_SKLAD1,0) > ) THEN 
 
        R_RAZLIKA = ABS(COALESCE(R_NAL_SKLAD1,0)) - ABS(COALESCE(R_NAL_SKLAD2,0)); 
        R_RAZLIKA_RZV = ABS(COALESCE(R_KOL_RZV,0)) - ABS(COALESCE(R_KOL_RZV_2,0)); 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_NEXT_CODE (
    OT_CODE INTEGER)
RETURNS (
    NNN INTEGER)
AS
declare variable nn integer;
declare variable old_nn integer;
begin
  old_nn = :ot_code;
  for select distinct
    nom
  from get_code_num
  order by nom
  into :nn
do begin
  if ((NN - old_nn) > 1) then begin
    nnn=old_nn+1;
   suspend;
   exit;
  end
  if (nn > old_nn) then  old_nn=nn;
 end
 nnn=old_nn+1;
 suspend;
end^


ALTER PROCEDURE GET_NOM_GARANCIA (
    P_SKLAD_ID INTEGER)
RETURNS (
    R_NOM_GAR INTEGER)
AS
DECLARE VARIABLE L_ID INTEGER;
begin
  select
    obekt.id,
    coalesce (obekt.garancia_num, 0) + 1
  from obekt
  join sklad on sklad.obekt_id = obekt.id
  where sklad.id = :p_sklad_id
  into :l_id,:r_nom_gar;

  update obekt
  set obekt.garancia_num = :r_nom_gar
  where
  obekt.id = :l_id;

  suspend;
end^


ALTER PROCEDURE GET_OPR_FOR_PRINT (
    P_OPR_ID INTEGER)
RETURNS (
    R_OPR_ID INTEGER,
    R_OPR_SUMA DOUBLE PRECISION,
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_SKLAD_NAME VARCHAR(20),
    R_USER_NAME VARCHAR(30),
    R_ANUL_TIP INTEGER,
    R_OPR_DATE DATE,
    R_OBEKT_NAME VARCHAR(20),
    R_KASA_NAME VARCHAR(20),
    PARI_IO_NAME VARCHAR(30),
    R_VALUTA_CODE CHAR(3),
    R_PARI_KURS DOUBLE PRECISION,
    R_OPR_TIP INTEGER,
    R_USER_EDIT VARCHAR(50),
    R_DATE_EDIT TIMESTAMP)
AS
declare variable L_OPR_TIP integer; 
BEGIN 
   FOR SELECT 
        OPR.ID, 
        OPR.SUMA, 
        OPR.OPR_DATE, 
        OPR.KLI_ID, 
        KLI.NAME AS KLI, 
        SKLAD.NAME AS SKLAD, 
        "USER".NAME AS NAME, 
        CAST (0 AS SMALLINT ) AS TIP, 
        OPR.OPR_TIP 
    FROM 
        OPR INNER JOIN "USER" ON "USER".ID = OPR.USER_ID AND OPR.ID = :P_OPR_ID 
        LEFT JOIN KLI ON KLI.ID  = OPR.KLI_ID 
        LEFT JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
 
    UNION ALL 
 
    SELECT 
        OPR_EDIT.OPR_ID, 
        OPR_EDIT.SUMA, 
        OPR_EDIT.OPR_DATE, 
        OPR_EDIT.KLI_ID, 
        KLI.NAME, 
        SKLAD.NAME, 
        "USER".NAME, 
        CAST (1 AS SMALLINT), 
        NULL 
    FROM 
        OPR_EDIT 
        INNER JOIN "USER" ON "USER".ID = OPR_EDIT.USER_ID AND OPR_EDIT.ED_OPR_ID = :P_OPR_ID 
        LEFT JOIN KLI ON KLI.ID  = OPR_EDIT.KLI_ID 
        LEFT JOIN SKLAD ON SKLAD.ID = OPR_EDIT.SKLAD_ID 
 
    UNION ALL 
 
    SELECT 
        OPR_ANUL.OPR_ID, 
        OPR.SUMA, 
        OPR.OPR_DATE, 
        OPR.KLI_ID, 
        KLI.NAME, 
        SKLAD.NAME, 
        "USER".NAME, 
        CAST (2 AS SMALLINT ), 
        NULL 
    FROM 
        OPR INNER JOIN "USER" ON "USER".ID = OPR.USER_ID AND OPR.ID = :P_OPR_ID 
        INNER JOIN OPR_ANUL ON OPR_ANUL.AN_OPR_ID = OPR.ID 
        LEFT JOIN KLI ON KLI.ID  = OPR.KLI_ID 
        LEFT JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
    ORDER BY 6,1 
 
    INTO :R_OPR_ID,:R_OPR_SUMA,:R_OPR_DATE,:R_KLI_ID,:R_KLI_NAME,:R_SKLAD_NAME,:R_USER_NAME,:R_ANUL_TIP,:L_OPR_TIP 
 
    DO 
    BEGIN 
      R_OBEKT_NAME = NULL; 
      IF (L_OPR_TIP = 10) THEN 
        SELECT 
            OBEKT.NAME, 
            KASA.NAME, 
            PARI_IO.NAME, 
            VALUTA.CODE, 
            PARI.KURS 
        FROM 
            PARI 
            INNER JOIN PARI_IO ON PARI_IO.ID =PARI.PARI_IO_ID 
            LEFT JOIN KASA ON KASA.ID = PARI.KASA_ID 
            LEFT JOIN VALUTA ON VALUTA.ID = PARI.VALUTA_ID 
            LEFT JOIN OBEKT ON OBEKT.ID = PARI.OBEKT_ID 
        WHERE 
            PARI.OPR_ID =:R_OPR_ID 
        INTO :R_OBEKT_NAME,:R_KASA_NAME,:PARI_IO_NAME,:R_VALUTA_CODE,:R_PARI_KURS; 
 
      IF ((L_OPR_TIP = 210) OR (L_OPR_TIP = 110)) THEN 
        SELECT 
            OBEKT.NAME, 
            KASA.NAME, 
            PARI_IO.NAME, 
            VALUTA.CODE, 
            OLD_PARI_EL.KURS 
        FROM 
            OLD_PARI_EL 
            LEFT JOIN PARI_IO ON PARI_IO.ID =OLD_PARI_EL.PARI_IO_ID 
            LEFT JOIN KASA ON KASA.ID = OLD_PARI_EL.KASA_ID 
            LEFT JOIN VALUTA ON VALUTA.ID = OLD_PARI_EL.VALUTA_ID 
            LEFT JOIN OBEKT ON OLD_PARI_EL.OBEKT_ID = OBEKT.ID 
        WHERE OLD_PARI_EL.OPR_ID =:R_OPR_ID 
        INTO :R_OBEKT_NAME,:R_KASA_NAME,:PARI_IO_NAME,:R_VALUTA_CODE,:R_PARI_KURS; 
 
        IF (L_OPR_TIP = 2) THEN 
            SELECT 
                OBEKT.NAME 
            FROM 
                OUT LEFT JOIN OBEKT ON OUT.OBEKT_ID = OBEKT.ID 
            WHERE 
                OUT.OPR_ID =:R_OPR_ID 
            INTO :R_OBEKT_NAME; 
 
      R_OPR_TIP =:L_OPR_TIP; 
 
      R_USER_EDIT = NULL; 
      R_DATE_EDIT = NULL; 
 
      IF (R_ANUL_TIP = 0) THEN BEGIN 
        /* POSLEDNO SASTOQNIE */ 
        SELECT FIRST 1 
          "USER".NAME, 
          OPR.DATETIME 
        FROM 
          OPR_EDIT 
          INNER JOIN OPR ON OPR.ID = OPR_EDIT.OPR_ID 
          INNER JOIN "USER" ON "USER".ID = OPR.USER_ID 
        WHERE 
          OPR_EDIT.ED_OPR_ID = :R_OPR_ID 
          ORDER BY OPR_EDIT.ID DESC 
        INTO 
          :R_USER_EDIT, :R_DATE_EDIT; 
      END 
 
      IF (R_ANUL_TIP = 1) THEN BEGIN 
        /* REDAKTIRANA */ 
        SELECT FIRST 1 
          "USER".NAME, 
          OPR.DATETIME 
        FROM 
          OPR_EDIT 
          INNER JOIN OPR ON OPR.ID = OPR_EDIT.OPR_ID 
          INNER JOIN "USER" ON "USER".ID = OPR.USER_ID 
        WHERE 
          OPR_EDIT.ED_OPR_ID = :P_OPR_ID AND 
          OPR_EDIT.OPR_ID < :R_OPR_ID 
        ORDER BY OPR_EDIT.ID DESC 
        INTO :R_USER_EDIT, :R_DATE_EDIT; 
      END 
 
      if (R_ANUL_TIP = 2) then begin 
        /* ANULIRANA */ 
        SELECT FIRST 1 
          "USER".NAME, 
          OPR.DATETIME 
        FROM 
          OPR_ANUL 
          INNER JOIN OPR ON OPR.ID = OPR_ANUL.OPR_ID 
          INNER JOIN "USER" ON "USER".ID = OPR.USER_ID 
        WHERE 
          OPR_ANUL.AN_OPR_ID = :P_OPR_ID 
        INTO :R_USER_EDIT, :R_DATE_EDIT; 
      end 
 
      IF (COALESCE(:R_OPR_SUMA, 0) = 0) THEN 
      SELECT 
        SUM(OPR_SUMI.SUMA_FR) 
      FROM 
        OPR_SUMI 
      WHERE 
        OPR_SUMI.OPR_ID =:R_OPR_ID 
      INTO :R_OPR_SUMA; 
 
      SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_OPR_HISTORY (
    P_FILTER VARCHAR(1000))
RETURNS (
    R_OPR_ID INTEGER,
    R_DATETIME TIMESTAMP,
    R_SUMA DOUBLE PRECISION,
    R_OPRTIP VARCHAR(45),
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_OPR_TIP SMALLINT,
    R_USER_ID INTEGER,
    R_USER VARCHAR(30),
    R_SKLAD_ID SMALLINT,
    R_SKLAD TYPE OF DOM_CHAR_50,
    R_IP VARCHAR(15),
    R_FLAG_ANUL SMALLINT,
    R_CH_OPR INTEGER,
    R_OPR_DATE DATE,
    R_OTC_ID INTEGER,
    R_IS_LOCK SMALLINT,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_OBEKT_ID SMALLINT,
    R_OBEKT_NAME VARCHAR(20))
AS
DECLARE VARIABLE L_LOCK INTEGER; 
DECLARE VARIABLE L_KONS_IN_OPR_ID INTEGER; 
BEGIN 
/*V.3*/ 
        FOR EXECUTE STATEMENT 
        'SELECT 
            OPR.ID, 
            OPR.DATETIME, 
            OPR.SUMA, 
            OPR.OPR_TIP, 
            OPR_TIP.NAME, 
            OPR.KLI_ID, 
            COALESCE(OPR.SKLAD_ID,0), 
            IP(OPR.IP) AS IP, 
            OPR.OPR_DATE, 
            OPR.OTC_ID, 
            OPR.IS_LOCK, 
            OPR.USER_ID, 
            US.NAME, 
            OPR_TIP.IS_LOCK, 
            KLI.NAME, 
            SKLAD.NAME, 
            OBEKT.ID, 
            OBEKT.NAME 
        FROM 
            OPR 
            INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
            INNER JOIN "USER"  US ON US.ID = OPR.USER_ID 
            LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
            LEFT JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
            LEFT JOIN OBEKT ON OBEKT.ID = SKLAD.OBEKT_ID 
       where ' 
       ||coalesce(:P_FILTER,'')|| '(1=1)' 
 
        INTO 
            :R_OPR_ID,:R_DATETIME,:R_SUMA,:R_OPR_TIP,:R_OPRTIP,:R_KLI_ID, 
            :R_SKLAD_ID,:R_IP,:R_OPR_DATE,:R_OTC_ID,:R_IS_LOCK, 
            :R_USER_ID ,:R_USER,:L_LOCK,:R_KLI_NAME,:R_SKLAD,:R_OBEKT_ID,:R_OBEKT_NAME 
        DO BEGIN 
            R_LOCK_DT = NULL; 
            R_LOCK_USER_NAME = NULL; 
 
            IF (L_LOCK = 1) THEN 
                SELECT FIRST 1 
                    LOCK_OPR.DT, 
                    US_L.NAME 
                FROM 
                    LOCK_OPR  INNER JOIN LOCK_OPR_EL ON LOCK_OPR_EL.LOCK_ID = LOCK_OPR.ID AND LOCK_OPR_EL.OPR_ID = :R_OPR_ID 
                    INNER JOIN "USER" US_L ON US_L.ID = LOCK_OPR.USER_ID 
                ORDER BY LOCK_OPR.DT DESC 
                INTO 
                    :R_LOCK_DT,:R_LOCK_USER_NAME; 
 
            R_FLAG_ANUL = 0; 
            R_CH_OPR = 0; 
            IF (R_OPR_TIP BETWEEN 1 AND 100) THEN BEGIN 
                IF (EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = :R_OPR_ID)) THEN 
                    R_FLAG_ANUL = 1; 
                ELSE IF (EXISTS (SELECT OPR_EDIT.ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID = :R_OPR_ID)) THEN 
                    R_FLAG_ANUL = 2; 
 
                IF (R_FLAG_ANUL = 0 AND R_OPR_TIP = 10) THEN 
                    SELECT 
                        PARI.ID 
                    FROM 
                        PARI 
                    WHERE 
                        PARI.OPR_ID = :R_OPR_ID 
                    INTO 
                        :R_CH_OPR; 
            END 
            ELSE IF (R_OPR_TIP BETWEEN 101 AND 200) THEN BEGIN 
                SELECT FIRST 1 
                    OPR_ANUL.AN_OPR_ID 
                FROM 
                    OPR_ANUL 
                WHERE 
                    OPR_ANUL.OPR_ID = :R_OPR_ID 
                INTO 
                    :R_CH_OPR; 
            END 
            ELSE IF (R_OPR_TIP BETWEEN 201 AND 300) THEN BEGIN 
                SELECT FIRST 1 
                    OPR_EDIT.ED_OPR_ID 
                FROM 
                    OPR_EDIT 
                WHERE 
                    OPR_EDIT.OPR_ID = :R_OPR_ID 
                INTO 
                    :R_CH_OPR; 
            END 
 
            COMMENT = NULL; 
 
            SELECT FIRST 1 
                COMMENTS.NOTE 
            FROM 
                COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
            WHERE 
                COMMENT_OPR_NODE.OPR_ID = :R_OPR_ID 
            ORDER BY 
                COMMENT_OPR_NODE.ID DESC 
            INTO :COMMENT; 
 
 
            if (r_opr_tip = 46) then begin 
              l_kons_in_opr_id = null; 
              select first 1 id from konsignacia kons 
              where kons.opr_in_id = :r_opr_id 
              into :l_kons_in_opr_id; 
              if (l_kons_in_opr_id is null) then suspend; 
            end 
            else 
              SUSPEND; 
        END 
END^


ALTER PROCEDURE GET_OPR_ID
RETURNS (
    R_ID INTEGER)
AS
BEGIN
    R_ID = GEN_ID(GEN_OPR_ID,0);
END^


ALTER PROCEDURE GET_OPR_POTV (
    P_USER_ID INTEGER,
    P_VSICHKI_SKLADOVE INTEGER,
    P_OPR_ID INTEGER)
RETURNS (
    R_ID INTEGER,
    R_OPR_ID INTEGER,
    R_OPR_NAME VARCHAR(100),
    R_OPR_TIP INTEGER,
    R_OPR_DATE DATE,
    R_POTV_ID INTEGER,
    R_SKLAD_ID INTEGER,
    R_SKLAD_NAME VARCHAR(20),
    R_USER_ID INTEGER,
    R_USER_NAME VARCHAR(30),
    R_SUMA DOUBLE PRECISION,
    R_FLAG_ANUL INTEGER,
    R_CH_OPR INTEGER)
AS
BEGIN 
  FOR SELECT 
    POTV_EL.ID, 
    POTV_EL.OPR_POTV_ID, 
    OPR_TIP.NAME AS OPR_NAME, 
    OPR.OPR_TIP, 
    OPR.OPR_DATE, 
    POTV_EL.POTV_ID, 
    OPR.SKLAD_ID, 
    SKLAD.NAME AS SKLAD_NAME, 
    OPR.USER_ID, 
    "USER".NAME AS USER_NAME, 
    OPR.SUMA 
  FROM 
    POTV_EL 
    INNER JOIN OPR ON POTV_EL.OPR_POTV_ID = OPR.ID 
    INNER JOIN OPR_TIP ON OPR.OPR_TIP = OPR_TIP.ID 
    INNER JOIN "USER" ON OPR.USER_ID = "USER".ID 
    INNER JOIN SKLAD ON OPR.SKLAD_ID = SKLAD.ID 
  WHERE 
    SKLAD.IS_ACTIVE <> 0 AND 
    POTV_EL.POTV_ID IS NULL AND 
    (OPR.SKLAD_ID IN (SELECT 
                       SKLAD.ID 
                     FROM 
                       SKLAD 
                     WHERE 
                       SKLAD.USER_ID = :P_USER_ID OR 
                       EXISTS (SELECT 
                                 SKLAD_MOL.ID 
                               FROM 
                                 SKLAD_MOL 
                               WHERE 
                                 SKLAD_MOL.SKLAD_ID = SKLAD.ID AND 
                                 SKLAD_MOL.USER_ID = :P_USER_ID 
                               ) 
                    ) 
    AND ((OPR.OPR_TIP <> 9 AND NOT OPR.USER_ID = :P_USER_ID)) OR 
      ((((OPR.OPR_TIP = 4) AND (OPR.SKLAD_ID IN (SELECT USER_SKLAD_NODE.SKLAD_ID FROM USER_SKLAD_NODE WHERE USER_SKLAD_NODE.USER_ID = :P_USER_ID AND USER_SKLAD_NODE.OPR_RIGHT = '1')))) 
       OR 
      (((OPR.OPR_TIP = 4) AND (SELECT COUNT(USER_SKLAD_NODE.SKLAD_ID) FROM USER_SKLAD_NODE WHERE USER_SKLAD_NODE.USER_ID = :P_USER_ID) = 0) AND (1 = :P_VSICHKI_SKLADOVE))) 
  ) 
  AND OPR.ID > :P_OPR_ID 
  INTO :R_ID, :R_OPR_ID, :R_OPR_NAME, :R_OPR_TIP, :R_OPR_DATE, :R_POTV_ID, :R_SKLAD_ID, :R_SKLAD_NAME, :R_USER_ID, :R_USER_NAME, :R_SUMA 
  DO BEGIN 
 
    R_FLAG_ANUL = 0; 
    R_CH_OPR = 0; 
    IF (R_OPR_TIP BETWEEN 1 AND 100) THEN BEGIN 
      IF (EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = :R_OPR_ID)) THEN 
        R_FLAG_ANUL = 1; 
      ELSE IF (EXISTS (SELECT OPR_EDIT.ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID = :R_OPR_ID)) THEN 
        R_FLAG_ANUL = 2; 
    END 
    ELSE IF (R_OPR_TIP BETWEEN 101 AND 200) THEN BEGIN 
      SELECT FIRST 1 
        OPR_ANUL.AN_OPR_ID 
      FROM 
        OPR_ANUL 
      WHERE 
        OPR_ANUL.OPR_ID = :R_OPR_ID 
      INTO 
        :R_CH_OPR; 
      END 
      ELSE IF (R_OPR_TIP BETWEEN 201 AND 300) THEN BEGIN 
        SELECT FIRST 1 
          OPR_EDIT.ED_OPR_ID 
        FROM 
          OPR_EDIT 
        WHERE 
          OPR_EDIT.OPR_ID = :R_OPR_ID 
        INTO 
          :R_CH_OPR; 
      END 
 
    SUSPEND; 
  END 
END^


ALTER PROCEDURE GET_ORDER_CONFIRMATION_ELEMENTS (
    P_SEL_ID TYPE OF DOM_INT,
    P_KLI_ID TYPE OF DOM_INT,
    P_TYPE_ORDER TYPE OF DOM_SMAL_INT)
RETURNS (
    R_OPERATION_ID TYPE OF DOM_INT,
    R_PRODUCT_ID TYPE OF DOM_INT,
    R_QUANTITY_REALIZED TYPE OF DOM_KOL,
    R_QUANTITY_REQUESTED TYPE OF DOM_KOL,
    R_PRODUCT_NAME TYPE OF DOM_CHAR_100,
    R_RECORD_STATUS TYPE OF DOM_SMAL_INT)
AS
BEGIN 
    FOR WITH PRODUCER_SIMPLES AS 
    ( 
        SELECT 
            SIMPLE.ID AS SIMPLE_ID 
        FROM 
            SIMPLE inner join SELEKCIQ_SIM_EL on SELEKCIQ_SIM_EL.SIMPLE_ID = SIMPLE.ID 
        WHERE 
            SELEKCIQ_SIM_EL.SELEKCIQ_ID =:P_SEL_ID 
            AND SIMPLE.USLUGA = 0 
 
        UNION ALL 
 
        SELECT 
            SIMPLE.ID 
        FROM 
            SIMPLE INNER JOIN KLI_DOST_NODE ON KLI_DOST_NODE.SIMPLE_ID = SIMPLE.ID AND KLI_DOST_NODE.KLI_ID =-1/*:P_KLI_ID*/ 
     ) 
    SELECT 
        POR_EL.OPR_ID as OperationId, 
        por_el.SIMPLE_ID as ProductId, 
        round(POR_EL.KOL, 4) as QuantityRealized, 
        ROUND(POR_EL.KOL_POR, 4) as QuantityRequested, 
        SIMPLE.NAME AS ProductName, 
        CASE 
            WHEN POR_EL.KOL = POR_EL.KOL_POR then 0 
            WHEN POR_EL.KOL < POR_EL.KOL_POR then 1 
            WHEN POR_EL.KOL = 0 THEN 2 
        END AS RecordStatus 
    FROM 
        POR INNER JOIN OPR ON OPR.ID = POR.OPR_ID 
        INNER JOIN POR_EL ON POR_EL.OPR_ID = OPR.ID 
        INNER JOIN PRODUCER_SIMPLES ON PRODUCER_SIMPLES.SIMPLE_ID = POR_EL.SIMPLE_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = POR_EL.SIMPLE_ID 
    WHERE 
        POR.ZA_DATA = CURRENT_DATE AND COALESCE(POR.FLAG_SYNC, 0) = 0 
        AND IIF(:P_TYPE_ORDER = 0, POR.STATUS, 1) > 0 
        AND POR.ASSECO_SYNC = 1 
    INTO :R_OPERATION_ID, :R_PRODUCT_ID, :R_QUANTITY_REALIZED, :R_QUANTITY_REQUESTED, :R_PRODUCT_NAME, :R_RECORD_STATUS 
    DO 
        SUSPEND; 
 
END^


ALTER PROCEDURE GET_ORDER_EL_NUMBER (
    P_ORDER_ID TYPE OF DOM_KEY)
RETURNS (
    R_ORDER_EL_ID TYPE OF DOM_KEY,
    R_NUMBER TYPE OF DOM_SMAL_INT)
AS
declare variable L_ROW integer; 
BEGIN 
    R_ORDER_EL_ID = 0; 
    L_ROW = 0; 
    FOR 
        SELECT 
            POR_EL.ID 
            /*RDB$SET_CONTEXT('USER_TRANSACTION', 'ROW#', 
            COALESCE(CAST(RDB$GET_CONTEXT('USER_TRANSACTION', 'ROW#') AS INTEGER), 0) + 1), 
            RDB$GET_CONTEXT('USER_TRANSACTION', 'ROW#') AS ROW_NUMBER*/ 
 
 
        FROM 
            POR_EL 
        WHERE 
            POR_EL.OPR_ID =:P_ORDER_ID 
        ORDER BY 1 
        INTO :R_ORDER_EL_ID 
    DO BEGIN 
        L_ROW =:l_row + 1; 
        R_NUMBER =:L_ROW; 
        SUSPEND; 
    END 
 
END^


ALTER PROCEDURE GET_OTC_DOST_KLI (
    P_FILTER VARCHAR(150),
    P_ADD_DDS SMALLINT)
RETURNS (
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(120),
    R_SUMA_PLATENO DOUBLE PRECISION,
    R_SUMA_NEPLATENO DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_KLI_CODE VARCHAR(15))
AS
declare variable L_SUMA_TEMP double precision; 
BEGIN 
    FOR EXECUTE STATEMENT 
    'SELECT 
        KLI.ID, 
        KLI.CODE, 
        CAST(KLI.NAME AS VARCHAR(120)), 
        COALESCE(SUM(CASE WHEN OPR.OPR_TIP = 1 THEN OPR.SUMA ELSE 0 END),0) 
    FROM 
        OPR INNER JOIN KLI ON (OPR.KLI_ID = KLI.ID AND OPR.OPR_TIP IN (1,13)) 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND NOT (COALESCE(OPR.SKLAD_ID,0) = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) 
    AND ' || :P_FILTER || ' 
    GROUP BY 1,2,3' 
    INTO 
        :R_KLI_ID,:R_KLI_CODE,:R_KLI_NAME,:R_SUMA 
    DO BEGIN 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR INNER JOIN "IN" ON (OPR.OPR_TIP = 1 AND "IN".OPR_ID = OPR.ID AND "IN".PAY_TIP IN(0,2)) 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ' || :P_FILTER ||' 
            AND OPR.KLI_ID = ' || :R_KLI_ID 
        INTO 
            :R_SUMA_PLATENO; 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR INNER JOIN "IN" ON (OPR.OPR_TIP = 1 AND "IN".OPR_ID = OPR.ID AND "IN".PAY_TIP = 1) 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ' || :P_FILTER ||' 
            AND OPR.KLI_ID = ' || :R_KLI_ID 
        INTO 
            :R_SUMA_NEPLATENO; 
 
        IF (R_SUMA > 0) THEN 
            SUSPEND; 
 
        IF (P_ADD_DDS = 1) THEN BEGIN 
            R_KLI_NAME = CAST(R_KLI_NAME || '(ДДС вх.фак.)' AS VARCHAR(120)); 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(FAK_IN.DDS),0) 
            FROM 
                OPR INNER JOIN FAK_IN ON (OPR.OPR_TIP = 13 AND OPR.KLI_ID = ' || :R_KLI_ID ||' 
                AND FAK_IN.OPR_ID = OPR.ID) 
            WHERE 
                NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND NOT (COALESCE(OPR.SKLAD_ID,0) = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) 
            AND ' || :P_FILTER 
            INTO 
                :R_SUMA; 
 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(FAK_IN.DDS),0) 
            FROM 
                OPR INNER JOIN FAK_IN ON (OPR.OPR_TIP = 13 AND OPR.ID = FAK_IN.OPR_ID AND FAK_IN.PAY_TIP_DDS IN (0,2)) 
            WHERE 
                NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ' || :P_FILTER ||' 
                AND OPR.KLI_ID = ' || :R_KLI_ID 
            INTO 
                :R_SUMA_PLATENO; 
 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(FAK_IN.DDS),0) 
            FROM 
                OPR INNER JOIN FAK_IN ON (OPR.OPR_TIP = 13 AND FAK_IN.OPR_ID = OPR.ID AND FAK_IN.PAY_TIP_DDS = 1) 
            WHERE 
                NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ' || :P_FILTER ||' 
                AND OPR.KLI_ID = ' || :R_KLI_ID 
            INTO 
                :R_SUMA_NEPLATENO; 
 
            IF (R_SUMA > 0) THEN 
                SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_OTC_DOST_SKLAD (
    P_FILTER VARCHAR(150),
    P_ADD_DDS SMALLINT)
RETURNS (
    R_SKLAD_ID SMALLINT,
    R_SKLAD_NAME VARCHAR(40),
    R_SUMA_PLATENO DOUBLE PRECISION,
    R_SUMA_NEPLATENO DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION)
AS
declare variable L_SUMA_TEMP double precision; 
BEGIN 
    FOR EXECUTE STATEMENT 
    'SELECT 
        SKLAD.ID, 
        CAST(SKLAD.NAME AS VARCHAR(40)), 
        COALESCE(SUM(CASE WHEN OPR.OPR_TIP = 1 THEN OPR.SUMA ELSE 0 END),0) 
    FROM 
        OPR LEFT JOIN SKLAD ON (OPR.OPR_TIP IN (1,12,13) AND SKLAD.ID = OPR.SKLAD_ID) 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND NOT (SKLAD.ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) 
        AND ' ||:P_FILTER || 
    ' GROUP BY 1,2 ORDER BY 2' 
    INTO 
        :R_SKLAD_ID, :R_SKLAD_NAME, :R_SUMA 
    DO BEGIN 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR INNER JOIN "IN" ON (OPR.OPR_TIP = 1 AND "IN".OPR_ID = OPR.ID AND "IN".PAY_TIP IN(0,2)) 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ' || :P_FILTER ||' 
            AND OPR.SKLAD_ID = ' || :R_SKLAD_ID 
        INTO 
            :R_SUMA_PLATENO; 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR INNER JOIN DOST_NODE ON DOST_NODE.RAZ_DOST_ID = OPR.ID 
            INNER JOIN "IN" ON ("IN".OPR_ID = DOST_NODE.DOST_ID AND "IN".PAY_TIP IN(1,3)) 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ' || :P_FILTER ||' 
            AND OPR.SKLAD_ID = ' || :R_SKLAD_ID 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_PLATENO = ROUNDD(R_SUMA_PLATENO + L_SUMA_TEMP); 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR INNER JOIN "IN" ON (OPR.OPR_TIP = 1 AND "IN".OPR_ID = OPR.ID AND "IN".PAY_TIP = 1) 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ' || :P_FILTER ||' 
            AND OPR.SKLAD_ID = ' || :R_SKLAD_ID 
        INTO 
            :R_SUMA_NEPLATENO; 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR INNER JOIN DOST_NODE ON DOST_NODE.RAZ_DOST_ID = OPR.ID 
            INNER JOIN "IN" ON ("IN".OPR_ID = DOST_NODE.DOST_ID AND "IN".PAY_TIP = 1) 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ' || :P_FILTER ||' 
            AND OPR.SKLAD_ID = ' || :R_SKLAD_ID 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_NEPLATENO = ROUNDD(R_SUMA_NEPLATENO + L_SUMA_TEMP); 
        IF (R_SUMA > 0) THEN 
            SUSPEND; 
 
        IF(P_ADD_DDS = 1) THEN BEGIN 
            R_SKLAD_NAME = CAST(R_SKLAD_NAME || '(ДДС вх.фак.)' AS VARCHAR(40)); 
            EXECUTE STATEMENT 
            'SELECT 
                SUM(FAK_IN.DDS) 
            FROM 
                OPR INNER JOIN FAK_IN ON (OPR.OPR_TIP  = 13 AND OPR.SKLAD_ID = '|| :R_SKLAD_ID ||' 
                AND FAK_IN.OPR_ID = OPR.ID) 
            WHERE 
                NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ' ||:P_FILTER 
            INTO 
                :R_SUMA; 
 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(FAK_IN.DDS),0) 
            FROM 
                OPR INNER JOIN FAK_IN ON (OPR.OPR_TIP = 13 AND OPR.ID = FAK_IN.OPR_ID AND FAK_IN.PAY_TIP_DDS IN (0,2)) 
            WHERE 
                NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ' || :P_FILTER ||' 
                AND OPR.SKLAD_ID = ' || :R_SKLAD_ID 
            INTO 
                :R_SUMA_PLATENO; 
 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(FAK_IN.DDS),0) 
            FROM 
                OPR INNER JOIN FAK_IN ON (OPR.OPR_TIP = 13 AND FAK_IN.OPR_ID = OPR.ID AND FAK_IN.PAY_TIP_DDS = 1) 
            WHERE 
                NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ' || :P_FILTER ||' 
                AND OPR.SKLAD_ID = ' || :R_SKLAD_ID 
            INTO 
                :R_SUMA_NEPLATENO; 
 
            R_SKLAD_ID = 0; 
            IF (R_SUMA > 0) THEN 
                SUSPEND; 
        END 
    END 
 
    IF (P_ADD_DDS = 1) THEN BEGIN 
        R_SKLAD_NAME = CAST('ДДС вх.фактура без склад' AS VARCHAR(40)); 
        R_SKLAD_ID = 0; 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(FAK_IN.DDS),0) 
        FROM 
            OPR INNER JOIN FAK_IN ON (OPR.OPR_TIP = 13 AND FAK_IN.OPR_ID = OPR.ID) 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ' || :P_FILTER ||' 
            AND OPR.SKLAD_ID IS NULL' 
        INTO 
            :R_SUMA; 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(FAK_IN.DDS),0) 
        FROM 
            OPR INNER JOIN FAK_IN ON (OPR.OPR_TIP = 13 AND FAK_IN.OPR_ID = OPR.ID AND FAK_IN.PAY_TIP_DDS = 1) 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ' || :P_FILTER ||' 
            AND OPR.SKLAD_ID IS NULL' 
        INTO 
            :R_SUMA_NEPLATENO; 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(FAK_IN.DDS),0) 
        FROM 
            OPR INNER JOIN FAK_IN ON (OPR.OPR_TIP = 13 AND FAK_IN.OPR_ID = OPR.ID AND FAK_IN.PAY_TIP_DDS IN (1,3)) 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ' || :P_FILTER ||' 
            AND OPR.SKLAD_ID IS NULL' 
        INTO 
            :R_SUMA_PLATENO; 
        IF (R_SUMA > 0) THEN 
            SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_OTC_DOST_USER (
    P_FILTER VARCHAR(150),
    P_ADD_DDS SMALLINT)
RETURNS (
    R_USER_ID SMALLINT,
    R_USER_NAME VARCHAR(45),
    R_SUMA_PLATENO DOUBLE PRECISION,
    R_SUMA_NEPLATENO DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION)
AS
DECLARE VARIABLE L_SUMA_TEMP DOUBLE PRECISION; 
BEGIN 
    FOR EXECUTE STATEMENT 
    'SELECT 
        "USER".ID, 
        CAST("USER".NAME AS VARCHAR(45)), 
        COALESCE(SUM(CASE WHEN OPR_TIP = 1 THEN OPR.SUMA ELSE 0 END),0) 
    FROM 
        "USER" INNER JOIN OPR ON ("USER".ID = OPR.USER_ID AND OPR.OPR_TIP IN (1,13)) 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND NOT (COALESCE(OPR.SKLAD_ID,0) = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) 
        AND ' || :P_FILTER || ' 
        GROUP BY 1,2' 
    INTO 
        :R_USER_ID,:R_USER_NAME,:R_SUMA 
    DO BEGIN 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR INNER JOIN "IN" ON (OPR.OPR_TIP = 1 AND "IN".OPR_ID = OPR.ID AND "IN".PAY_TIP IN(0,2)) 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ' || :P_FILTER ||' 
            AND OPR.USER_ID = ' || :R_USER_ID 
        INTO 
            :R_SUMA_PLATENO; 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR INNER JOIN "IN" ON (OPR.OPR_TIP = 1 AND "IN".OPR_ID = OPR.ID AND "IN".PAY_TIP in (1,3)) 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ' || :P_FILTER ||' 
            AND OPR.USER_ID = ' || :R_USER_ID 
        INTO 
            :R_SUMA_NEPLATENO; 
 
        IF (R_SUMA > 0) THEN 
            SUSPEND; 
 
        IF (P_ADD_DDS = 1) THEN BEGIN 
            R_USER_NAME = CAST(R_USER_NAME || '(ДДС вх.фак.)' AS VARCHAR(45)); 
            EXECUTE STATEMENT 
            'SELECT 
                SUM(FAK_IN.DDS) 
            FROM 
                OPR INNER JOIN FAK_IN ON (OPR.OPR_TIP = 13 AND OPR.USER_ID = ' || :R_USER_ID ||' 
                AND OPR.ID = FAK_IN.OPR_ID) 
            WHERE 
                NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND NOT (COALESCE(OPR.SKLAD_ID,0) = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) 
                AND ' || :P_FILTER 
            INTO 
                :R_SUMA; 
 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(FAK_IN.DDS),0) 
            FROM 
                OPR INNER JOIN FAK_IN ON (OPR.OPR_TIP = 13 AND OPR.ID = FAK_IN.OPR_ID AND FAK_IN.PAY_TIP_DDS IN (0,2)) 
            WHERE 
                NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ' || :P_FILTER ||' 
                AND OPR.USER_ID = ' || :R_USER_ID 
            INTO 
                :R_SUMA_PLATENO; 
 
            EXECUTE STATEMENT 
            'SELECT 
                COALESCE(SUM(FAK_IN.DDS),0) 
            FROM 
                OPR INNER JOIN FAK_IN ON (OPR.OPR_TIP = 13 AND FAK_IN.OPR_ID = OPR.ID AND FAK_IN.PAY_TIP_DDS in (1,3)) 
            WHERE 
                NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND ' || :P_FILTER ||' 
                AND OPR.USER_ID = ' || :R_USER_ID 
            INTO 
                :R_SUMA_NEPLATENO; 
 
            R_USER_ID = 0; 
            IF (R_SUMA > 0) THEN 
                SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_OTC_PARI_DATA (
    P_OPR_ID INTEGER,
    P_PARI_OPR_ID INTEGER,
    P_NEW_KASA INTEGER)
RETURNS (
    R_ID INTEGER)
AS
DECLARE VARIABLE L_PARI_IO_ID INTEGER;
DECLARE VARIABLE L_OBEKT_ID INTEGER;
DECLARE VARIABLE L_KURS DOUBLE PRECISION;
DECLARE VARIABLE L_VALUTA_ID INTEGER;
DECLARE VARIABLE L_TIP SMALLINT;
BEGIN
/*V.1
КОГАТО ИМАМ РЕДАКЦИЯ НА ОПЕРАЦИЯ СЛЕД ОТЧЕТ И ОПЕРАЦИЯТА
ИМА ВРЪЗКА С КАСА И ТРЯБВА ДА СЕ СЪЗДАДЕ ЗА НОВ РЕД В КАСИ ЗА ДРУГ ОПЕРАТОР
ТАЗИ ОПЕРАЦИ ИЗВЛИЧА ДАННИТЕ ЗА СТАРАТА КАСА И ГИ ДОБАВЯ КАТО НОВ РЕД
*/
    SELECT 
        PARI.PARI_IO_ID,
        PARI.KURS,
        PARI.VALUTA_ID,
        PARI.TIP
    FROM
        PARI INNER JOIN PARI_SKLOPR_NODE ON PARI.OPR_ID = PARI_SKLOPR_NODE.OPR_PARI_ID
    WHERE
        PARI_SKLOPR_NODE.OPR_ID = :P_OPR_ID
    INTO
        :L_PARI_IO_ID,:L_KURS,:L_VALUTA_ID,:L_TIP;

    SELECT
        KASA.OBEKT_ID
    FROM
        KASA
    WHERE
        KASA.ID = :P_NEW_KASA
    INTO
        :L_OBEKT_ID;

    EXECUTE PROCEDURE ADD_PARI(P_PARI_OPR_ID,L_PARI_IO_ID,P_NEW_KASA,L_OBEKT_ID,0.00,
    L_VALUTA_ID,L_KURS,7,0,L_TIP)
    RETURNING_VALUES :R_ID;
END^


ALTER PROCEDURE GET_OTC_PAY_IN (
    P_FILTER VARCHAR(150))
RETURNS (
    R_PAYMENT_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_SUMA DOUBLE PRECISION,
    R_DATETIME DATE,
    R_IN_ID INTEGER,
    R_KLI_CODE VARCHAR(15))
AS
DECLARE VARIABLE L_TOTAL_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_OPR_ID INTEGER; 
DECLARE VARIABLE L_SUMA_ID INTEGER; 
BEGIN 
    FOR EXECUTE STATEMENT 
    'SELECT 
        PAYMENT.ID, 
        OPR.SUMA, 
        OPR.OPR_DATE, 
        KLI.NAME, 
        OPR.ID, 
        KLI.CODE, 
        SUMI.ID 
    FROM 
        PAYMENT INNER JOIN OPR ON (OPR.OPR_TIP = 7 AND PAYMENT.OPR_ID = OPR.ID) 
        INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE ' || :P_FILTER ||' 
    AND NOT EXISTS(SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
    ORDER BY 1' 
    INTO 
        :R_PAYMENT_ID,:L_TOTAL_SUMA,:R_DATETIME,:R_KLI_NAME,:L_OPR_ID, :R_KLI_CODE, :L_SUMA_ID 
    DO BEGIN 
        FOR SELECT 
            "IN".ID, 
            SUM(OPN.SUMA) 
        FROM 
            GET_PAYMENT_NODE_ID(:L_SUMA_ID) GPN INNER JOIN PAYMENT_NODE PN ON GPN.R_PAYMENT_NODE_ID = PN.ID 
            INNER JOIN OPR_PAYMENT_NODE OPN ON OPN.ID = PN.NODE_ID 
            INNER JOIN SUMI ON PN.OPR_ID = SUMI.ID 
            INNER JOIN "IN" ON (SUMI.OPR_ID = "IN".OPR_ID) 
        GROUP BY 1 
        UNION ALL 
        SELECT 
            FAK_IN.ID, 
            SUM(OPN.SUMA) 
        FROM 
            GET_PAYMENT_NODE_ID(:L_SUMA_ID) GPN INNER JOIN PAYMENT_NODE PN ON GPN.R_PAYMENT_NODE_ID = PN.ID 
            INNER JOIN OPR_PAYMENT_NODE OPN ON OPN.ID = PN.NODE_ID 
            INNER JOIN SUMI ON SUMI.ID = PN.OPR_ID 
            INNER JOIN FAK_IN ON (SUMI.OPR_ID = FAK_IN.OPR_ID) 
        GROUP BY 1 
 
        INTO 
            :R_IN_ID,:R_SUMA 
        DO BEGIN 
            L_TOTAL_SUMA = ROUNDD(L_TOTAL_SUMA - R_SUMA); 
            SUSPEND; 
        END 
        IF (L_TOTAL_SUMA > 0) THEN BEGIN 
            R_IN_ID = NULL; 
            R_SUMA = L_TOTAL_SUMA; 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_OTC_PAY_OUT (
    P_FILTER VARCHAR(150))
RETURNS (
    R_PAYMENT_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_SUMA DOUBLE PRECISION,
    R_DATETIME DATE,
    R_OUT_ID INTEGER,
    R_KLI_CODE VARCHAR(15))
AS
DECLARE VARIABLE L_TOTAL_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_OPR_ID INTEGER; 
DECLARE VARIABLE L_SUMA_ID INTEGER; 
BEGIN 
    FOR EXECUTE STATEMENT 
    'SELECT 
        PAYMENT.ID, 
        OPR.SUMA, 
        OPR.OPR_DATE, 
        KLI.NAME, 
        OPR.ID, 
        KLI.CODE, 
        SUMI.ID 
    FROM 
        PAYMENT INNER JOIN OPR ON (OPR.OPR_TIP = 6 AND PAYMENT.OPR_ID = OPR.ID) 
        INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE ' || :P_FILTER ||' 
    AND NOT EXISTS(SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
    ORDER BY 1' 
    INTO 
        :R_PAYMENT_ID,:L_TOTAL_SUMA,:R_DATETIME,:R_KLI_NAME,:L_OPR_ID, :R_KLI_CODE,:L_SUMA_ID 
    DO BEGIN 
        FOR SELECT 
            OUT.ID, 
            SUM(OPN.SUMA) 
        FROM 
            GET_PAYMENT_NODE_ID(:L_SUMA_ID) GPN INNER JOIN PAYMENT_NODE PN ON GPN.R_PAYMENT_NODE_ID = PN.ID 
            INNER JOIN SUMI ON SUMI.ID = PN.OPR_ID 
            INNER JOIN OPR_PAYMENT_NODE OPN ON OPN.ID = PN.NODE_ID 
            INNER JOIN OUT ON SUMI.OPR_ID = OUT.OPR_ID 
        GROUP BY 1 
        INTO 
            :R_OUT_ID,:R_SUMA 
        DO BEGIN 
            L_TOTAL_SUMA = ROUNDD(L_TOTAL_SUMA - R_SUMA); 
            SUSPEND; 
        END 
 
        IF (L_TOTAL_SUMA > 0) THEN BEGIN 
            R_OUT_ID = NULL; 
            R_SUMA = L_TOTAL_SUMA; 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_OTC_PROD_SKLAD (
    P_FILTER VARCHAR(150))
RETURNS (
    R_SKLAD_ID SMALLINT,
    R_SKLAD_NAME VARCHAR(20),
    R_SUMA_PLATENO DOUBLE PRECISION,
    R_SUMA_NEPLATENO DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION)
AS
DECLARE VARIABLE L_SUMA_TEMP DOUBLE PRECISION; 
BEGIN 
    FOR EXECUTE STATEMENT 
    'SELECT 
        SKLAD.ID, 
        SKLAD.NAME, 
        SUM(OPR.SUMA) 
    FROM 
        OPR INNER JOIN SKLAD ON (OPR.OPR_TIP IN (2,34) AND SKLAD.ID = OPR.SKLAD_ID) 
        INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND NOT (SKLAD.ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) 
        AND ' ||:P_FILTER || 
    ' GROUP BY 1,2 ORDER BY 2' 
    INTO 
        :R_SKLAD_ID, :R_SKLAD_NAME, :R_SUMA 
    DO BEGIN 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR INNER JOIN OUT ON (OUT.OPR_ID = OPR.ID AND OUT.PAY_TIP IN(0,2,3)) 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ' || :P_FILTER ||' 
            AND OPR.SKLAD_ID = ' || :R_SKLAD_ID 
        INTO 
            :R_SUMA_PLATENO; 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR INNER JOIN PROD_NODE ON PROD_NODE.OPR_SUB_PROD_ID = OPR.ID 
            INNER JOIN OUT ON (OUT.OPR_ID = PROD_NODE.OPR_PROD_ID AND OUT.PAY_TIP IN(0,2,3)) 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ' || :P_FILTER ||' 
            AND OPR.SKLAD_ID = ' || :R_SKLAD_ID 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_PLATENO = ROUNDD(R_SUMA_PLATENO + L_SUMA_TEMP); 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR INNER JOIN OUT ON (OUT.OPR_ID = OPR.ID AND OUT.PAY_TIP = 1) 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ' || :P_FILTER ||' 
            AND OPR.SKLAD_ID = ' || :R_SKLAD_ID 
        INTO 
            :R_SUMA_NEPLATENO; 
 
        EXECUTE STATEMENT 
        'SELECT 
            COALESCE(SUM(OPR.SUMA),0) 
        FROM 
            OPR INNER JOIN PROD_NODE ON PROD_NODE.OPR_SUB_PROD_ID = OPR.ID 
            INNER JOIN OUT ON (OUT.OPR_ID = PROD_NODE.OPR_PROD_ID AND OUT.PAY_TIP = 1) 
        WHERE 
            NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ' || :P_FILTER ||' 
            AND OPR.SKLAD_ID = ' || :R_SKLAD_ID 
        INTO 
            :L_SUMA_TEMP; 
 
        R_SUMA_NEPLATENO = ROUNDD(R_SUMA_NEPLATENO + L_SUMA_TEMP); 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_OTC_PROD_STOKI (
    P_FILTER VARCHAR(1000),
    P_OBEKT_ID TYPE OF DOM_KEY)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_ED_CENA DOUBLE PRECISION,
    R_TOT_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_KOL2 DOUBLE PRECISION)
AS
DECLARE VARIABLE L_OBEKT_FILTER VARCHAR(500); 
BEGIN 
    L_OBEKT_FILTER = 'WITH TMP AS (SELECT 
        OPR.ID 
    FROM 
        OPR INNER JOIN "USER" U ON U.ID = OPR.USER_ID 
        AND U.OBEKT_ID = ' || :P_OBEKT_ID || ' 
        AND OPR.OTC_ID IS NULL 
 
    UNION 
 
    SELECT 
        O.ID 
    FROM 
        OUT INNER JOIN OPR O ON O.ID = OUT.OPR_ID AND O.OTC_ID IS NULL 
    WHERE 
        OUT.OBEKT_ID = ' || :P_OBEKT_ID || ') '; 
 
    FOR EXECUTE STATEMENT 
    IIF (P_OBEKT_ID > 0, L_OBEKT_FILTER, ' ') || 
    'SELECT 
        SIMPLE.ID, 
        PROD_CENI_EL.CENA, 
        SUM(OUT_EL.KOL), 
        SUM(OUT_EL.SUMA), 
        SUM(OUT_EL2.KOL) 
    FROM 
        OPR INNER JOIN OUT_EL ON OPR.ID = OUT_EL.OPR_ID 
        INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        INNER JOIN OUT ON OUT.OPR_ID = OPR.ID ' || 
        IIF (:P_OBEKT_ID > 0, 'INNER JOIN TMP ON TMP.ID = OPR.ID ', ' ') || ' 
        LEFT JOIN OUT_EL2 ON OUT_EL2.OUT_EL_ID = OUT_EL.ID 
    WHERE 
        OPR.OPR_TIP IN(2,34) AND 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND NOT (OPR.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) AND ' ||:P_FILTER ||' 
    GROUP BY 1,2 
    ORDER BY 3' 
    INTO 
        :R_SIMPLE_ID,:R_ED_CENA,:R_TOT_KOL,:R_SUMA,:R_KOL2 
    DO BEGIN 
/*        EXECUTE STATEMENT 
        IIF (P_OBEKT_ID > 0, L_OBEKT_FILTER, ' ') || 
        'SELECT 
            SUM(OUT_EL2.KOL) 
        FROM 
            OUT_EL2 INNER JOIN OUT_EL ON OUT_EL2.OUT_EL_ID = OUT_EL.ID 
            INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
            INNER JOIN OUT ON OUT.OPR_ID = OPR.ID ' || 
            IIF (:P_OBEKT_ID > 0, 'INNER JOIN TMP ON TMP.ID = OPR.ID ', ' ') || ' 
        WHERE 
            OUT_EL.SIMPLE_ID = '|| :R_SIMPLE_ID || ' AND ' || :P_FILTER 
        INTO 
            :R_KOL2;*/ 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_OTC_USER_TOTAL (
    P_FILTER VARCHAR(150),
    P_ADD_DDS INTEGER)
RETURNS (
    R_USER_NAME VARCHAR(45),
    R_USER_ID SMALLINT,
    R_SUMA_TIP SMALLINT,
    R_OPR_SUMA DOUBLE PRECISION,
    R_TIP VARCHAR(35))
AS
BEGIN 
    FOR EXECUTE STATEMENT 
    'SELECT 
        CAST("USER".NAME AS VARCHAR(45)), 
        "USER".ID, 
        CAST(0 AS SMALLINT), 
        SUM(OPR.SUMA) AS SUMA, 
        CAST(''Платени продажби'' AS VARCHAR(35)) AS TIP 
    FROM 
        "USER" LEFT JOIN OPR ON OPR.USER_ID = "USER".ID 
        LEFT JOIN OUT ON OUT.OPR_ID = OPR.ID 
    WHERE 
        OPR.OPR_TIP = 2 
        AND OUT.PAY_TIP IN (0,2) 
        AND NOT EXISTS  (SELECT OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND ' || :P_FILTER || ' 
    GROUP BY 1,2,3,5 
 
    UNION ALL 
 
    SELECT 
        CAST("USER".NAME AS VARCHAR(45)), 
        "USER".ID, 
        CAST(1 AS SMALLINT), 
        SUM(OPR.SUMA), 
        CAST(''Плащания на продажби''AS VARCHAR(35)) 
    FROM 
        "USER" LEFT JOIN OPR ON OPR.USER_ID = "USER".ID 
    WHERE 
        OPR.OPR_TIP = 6 
        AND NOT EXISTS  (SELECT OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND ' || :P_FILTER || ' 
    GROUP BY 1,2,3,5 
 
    union all 
 
    SELECT 
        CAST("USER".NAME AS VARCHAR(45)), 
        "USER".ID, 
        CAST(3 AS SMALLINT), 
        SUM(OPR.SUMA), 
        CAST(''Пл. на върната стока към доставчик'' AS VARCHAR(35)) 
    FROM 
        "USER" LEFT JOIN OPR ON OPR.USER_ID = "USER".ID 
    WHERE 
        OPR.OPR_TIP = 30 
        AND NOT EXISTS  (SELECT OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND ' || :P_FILTER || ' 
    GROUP BY 1,2,3,5 
 
    UNION ALL 
 
    SELECT 
        CAST("USER".NAME AS VARCHAR(45)), 
        "USER".ID, 
        CAST(2 AS SMALLINT), 
        -SUM(OPR.SUMA), 
        CAST(''Платени доставки''AS VARCHAR(35)) 
    FROM 
        "USER" LEFT JOIN OPR ON OPR.USER_ID = "USER".ID 
        LEFT JOIN "IN" ON "IN".OPR_ID = OPR.ID 
    WHERE 
        OPR.OPR_TIP = 1 
        AND "IN".PAY_TIP  IN (0,2) 
        AND NOT EXISTS  (SELECT OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND ' || :P_FILTER || ' 
    GROUP BY 1,2,3,5 
 
    UNION ALL 
 
    SELECT 
        CAST("USER".NAME AS VARCHAR(45)), 
        "USER".ID, 
        CAST(3 AS SMALLINT), 
        -SUM(OPR.SUMA), 
        CAST(''Плащания на доставки'' AS VARCHAR(35)) 
    FROM 
        "USER" LEFT JOIN OPR ON OPR.USER_ID = "USER".ID 
    WHERE 
        OPR.OPR_TIP = 7 
        AND NOT EXISTS  (SELECT OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND ' || :P_FILTER || ' 
    GROUP BY 1,2,3,5 
 
    UNION ALL 
 
    SELECT 
        CAST("USER".NAME || ''(ДДС вх.фак.)'' AS VARCHAR(45)), 
        "USER".ID, 
        CAST(3 AS SMALLINT), 
        -SUM(FAK_IN.DDS), 
        CAST(''Платено ДДС вх.фак.'' AS VARCHAR(35)) 
    FROM 
        "USER" LEFT JOIN OPR ON OPR.USER_ID = "USER".ID 
        INNER JOIN FAK_IN ON (FAK_IN.OPR_ID = OPR.ID AND FAK_IN.PAY_TIP_DDS IN (0,2)) 
    WHERE 
        OPR.OPR_TIP = 13 
        AND NOT EXISTS  (SELECT OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND ' || :P_FILTER || ' 
        AND ' || :P_ADD_DDS || ' = 1 
    GROUP BY 1,2,3,5 
 
    union ALL 
 
    SELECT 
        CAST("USER".NAME AS VARCHAR(45)), 
        "USER".ID, 
        CAST(3 AS SMALLINT), 
        -SUM(OPR.SUMA), 
        CAST(''Пл. на върната стока от клиент'' AS VARCHAR(35)) 
    FROM 
        "USER" LEFT JOIN OPR ON OPR.USER_ID = "USER".ID 
    WHERE 
        OPR.OPR_TIP = 29 
        AND NOT EXISTS  (SELECT OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND ' || :P_FILTER || ' 
    GROUP BY 1,2,3,5 
    ORDER BY 1,3' 
 
    INTO 
        :R_USER_NAME,:R_USER_ID,:R_SUMA_TIP,:R_OPR_SUMA,:R_TIP 
    DO 
        SUSPEND; 
END^


ALTER PROCEDURE GET_OUT_DVSK (
    P_OUT_EL_ID INTEGER)
RETURNS (
    R_IN_EL_ID INTEGER,
    R_ELEMENT_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_OPR_ID INTEGER)
AS
BEGIN 
    FOR SELECT 
        PN.ELEMENT_ID, 
        PEN.KOL, 
        PEN.SUMA_FR 
    FROM 
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON 
        PON.PARTIDA_NODE_ID = PEN.ID AND PON.OUT_EL_ID = :P_OUT_EL_ID 
        INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
    INTO 
        :R_ELEMENT_ID,:R_KOL,:R_SUMA 
    DO BEGIN 
        FOR SELECT 
            PN.IN_EL_ID, 
            IN_EL.OPR_ID 
        FROM 
            PARTIDA_NAL PN INNER JOIN PARTIDA_EL_NODE PEN ON PN.ELEMENT_ID = :R_ELEMENT_ID 
            AND PN.ID = PEN.PARTIDA_ID 
            INNER JOIN PARTIDA_IN_EL_NODE PIN ON PEN.ID = PIN.PARTIDA_NODE_ID 
            INNER JOIN IN_EL ON IN_EL.ID = PIN.IN_EL_ID 
            INNER JOIN OPR ON IN_EL.OPR_ID = OPR.ID AND OPR.OPR_TIP IN (1,3,12,14,28,33,77) 
        GROUP BY 1,2 
        INTO 
            :R_IN_EL_ID,:R_OPR_ID 
        DO BEGIN 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_OUT_DVSK_INFO (
    P_FILTER VARCHAR(1200))
RETURNS (
    R_OPR_DATE DATE,
    R_OPR_DATETIME TIMESTAMP,
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_SIMPLE_CODE VARCHAR(15),
    R_ME_ID SMALLINT,
    R_ME_NAME VARCHAR(2),
    R_SKLAD_ID SMALLINT,
    R_SKLAD_NAME VARCHAR(20),
    R_USER_ID SMALLINT,
    R_USER_NAME VARCHAR(30),
    R_OUT_ID INTEGER,
    R_OBEKT_ID SMALLINT,
    R_OBEKT_NAME VARCHAR(20),
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_FIRMA_ID INTEGER,
    R_FIRMA_NAME VARCHAR(50),
    R_ME2_ID SMALLINT,
    R_ME2_NAME VARCHAR(2),
    R_KOL DOUBLE PRECISION,
    R_NAME_KLI VARCHAR(100),
    R_NAME_DOSTAV VARCHAR(100),
    R_KLI_ID_PROIZV INTEGER,
    R_SROK DATE,
    R_NCAR VARCHAR(20),
    R_USER_NAME_DVSK VARCHAR(30),
    R_OPR_DATE_DVSK DATE,
    R_DOK_EL VARCHAR(60),
    R_DOK_H VARCHAR(60),
    R_DVSK_EL_ID INTEGER,
    R_BG_NOMER VARCHAR(15),
    R_DATE_PROIZV DATE,
    R_PARTIDA_NOMER VARCHAR(30),
    R_TEMPERATURA VARCHAR(20),
    R_TIME_PRIEMANE TIME,
    R_PARTIDA_EL_ID INTEGER)
AS
declare variable L_OUT_EL_ID integer; 
BEGIN 
 
    FOR EXECUTE STATEMENT 'SELECT 
        OUT_EL.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        SIMPLE.ID, 
        SIMPLE.NAME, 
        SIMPLE.CODE, 
        ME.ID, 
        ME.NAME, 
        OPR.SKLAD_ID, 
        SKLAD.NAME, 
        UR.ID, 
        UR.NAME, 
        OUT.ID, 
        OBEKT.ID, 
        OBEKT.NAME, 
        OPR.KLI_ID, 
        KLI.NAME, 
        FIRMI.ID, 
        FIRMI.NAME_FAK, 
        ME2.ID, 
        ME2.NAME 
    FROM 
        OPR INNER JOIN OUT_EL ON OPR.OPR_TIP IN (2,34) AND OUT_EL.OPR_ID = OPR.ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        INNER JOIN ME ON ME.ID = SIMPLE.ME_ID 
        INNER JOIN SKLAD ON OPR.SKLAD_ID = SKLAD.ID 
        INNER JOIN "USER" UR ON UR.ID = OPR.USER_ID 
        LEFT JOIN PROD_NODE ON PROD_NODE.OPR_SUB_PROD_ID = OUT_EL.OPR_ID 
        LEFT JOIN OUT ON (OUT.OPR_ID = OPR.ID OR OUT.OPR_ID = PROD_NODE.OPR_PROD_ID) 
        LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
        LEFT JOIN FIRMI ON FIRMI.ID = KLI.FIRMA_ID 
        LEFT JOIN OBEKT ON OBEKT.ID = OUT.OBEKT_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
    WHERE ' || :P_FILTER ||' (1=1) 
    ORDER BY SIMPLE.NAME, OPR.ID, OUT_EL.ID' 
    INTO 
        :L_OUT_EL_ID,:R_OPR_DATE,:R_OPR_DATETIME,:R_SIMPLE_ID,:R_SIMPLE_NAME,:R_SIMPLE_CODE,:R_ME_ID, 
        :R_ME_NAME,:R_SKLAD_ID,:R_SKLAD_NAME,:R_USER_ID,:R_USER_NAME,:R_OUT_ID,:R_OBEKT_ID, 
        :R_OBEKT_NAME,:R_KLI_ID,:R_KLI_NAME,:R_FIRMA_ID,:R_FIRMA_NAME,:R_ME2_ID,:R_ME2_NAME 
    DO BEGIN 
        FOR SELECT 
            GO.R_KOL, 
            KLI_P.NAME, 
            KLI_D.NAME, 
            KLI_P.ID, 
            PARTIDA_EL.SROK, 
            PARTIDA_EL.ID, 
            DVSK_OPR.NCAR, 
            US.NAME, 
            OPR.OPR_DATE, 
            CAST( DVSK_EL_DOK_TYPE.SHORT_NAME|| DVSK_EL.NOM_DOK AS VARCHAR(60)), 
            CAST(DVSK_OPR_DOK_TYPE.SHORT_NAME || DVSK_OPR.DOK AS VARCHAR(60)), 
            DVSK_EL.ID, 
            DVSK_EL.BG_NOMER, 
            DVSK_EL.DATE_PROIZV, 
            SERIAL_NUM.SN, 
            SIMPLE.TEMPERATURA, 
            DVSK_OPR.TIME_PRIEMANE 
        FROM 
            GET_OUT_DVSK(:L_OUT_EL_ID) GO INNER JOIN PARTIDA_EL ON PARTIDA_EL.ID = GO.R_ELEMENT_ID 
            INNER JOIN IN_EL ON IN_EL.ID = GO.R_IN_EL_ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
            LEFT JOIN DVSK_EL ON DVSK_EL.PARTIDA_EL_ID = GO.R_ELEMENT_ID 
            LEFT JOIN DVSK_OPR ON DVSK_OPR.OPR_ID = GO.R_OPR_ID 
            LEFT JOIN OPR ON OPR.ID = DVSK_OPR.OPR_ID 
            LEFT JOIN "USER" US ON US.ID = DVSK_OPR.USER_ID 
            LEFT JOIN KLI KLI_D ON KLI_D.ID = OPR.KLI_ID 
            LEFT JOIN KLI KLI_P ON KLI_P.ID = DVSK_EL.KLI_ID_PROIZV 
            LEFT JOIN DVSK_DOK_TYPE DVSK_EL_DOK_TYPE ON DVSK_EL.TYPE_DOK = DVSK_EL_DOK_TYPE.ID 
            LEFT JOIN DVSK_DOK_TYPE DVSK_OPR_DOK_TYPE ON DVSK_OPR.TYPE_DOK = DVSK_OPR_DOK_TYPE.ID 
            LEFT JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = GO.R_ELEMENT_ID 
        INTO 
            :R_KOL,:R_NAME_KLI,:R_NAME_DOSTAV,:R_KLI_ID_PROIZV,:R_SROK,:R_PARTIDA_EL_ID,:R_NCAR,:R_USER_NAME_DVSK,:R_OPR_DATE_DVSK, 
            :R_DOK_EL,:R_DOK_H,:R_DVSK_EL_ID,:R_BG_NOMER,:R_DATE_PROIZV,:R_PARTIDA_NOMER,:R_TEMPERATURA,:R_TIME_PRIEMANE 
        DO BEGIN 
            SUSPEND; 
        END 
    END 
 
END^


ALTER PROCEDURE GET_OUT_EL_KOL_FOR_FAKTURA (
    P_NUMBER INTEGER,
    P_FLAG_FAKT_IZL SMALLINT,
    P_FLAG_SAME_SN SMALLINT)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_RSN SMALLINT,
    R_IS_ALL_KOL SMALLINT,
    R_IS_USLUGA SMALLINT)
AS
DECLARE VARIABLE L_FAKT_SKLAD_ID INTEGER; 
DECLARE VARIABLE L_NAL_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_TEMP_NAL_KOL SMALLINT; 
DECLARE VARIABLE L_RETURN_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_FISK_KOL DOUBLE PRECISION; 
BEGIN 
/*iliq*/ 
 
-- 
--P_FLAG_SAME_SN 0 - ФАКТУРНИЯ СКЛАД РАБОТИ БЕЗ СЕРИЙНИ НОМЕРА И ЩЕ ТЪРСЯ ДАЛИ ОТ ПРОДУКТА ИМА 
--ВСИЧКОТО НАЛИЧНО, БЕЗ ЗНАЧЕНИЕ ТОЧНИТЕ ПАРТИДИ 
--1 - ТЪРСЯ ДАЛИ ПРОДАДЕНИТЕ СЕРИЙНИ НОМЕРА СА НАЛИЧНИ И ВЪВ ФАКТУРНИЯ СКЛАД 
 
    SELECT 
        SYSTEM.H_SKLAD 
    FROM 
        SYSTEM 
    INTO 
        :L_FAKT_SKLAD_ID; 
 
    FOR SELECT 
        SUM(OUT_EL.KOL), 
        OUT_EL.SIMPLE_ID, 
        COALESCE(SUM(OUT_EL_FAK_OUT_EL.KOL),0.00) 
    FROM 
        TEMP$PROD_TO_FAK INNER JOIN OPR ON (OPR.ID = TEMP$PROD_TO_FAK.PROD_ID AND OPR.OPR_TIP = 2 AND TEMP$PROD_TO_FAK.NUMBER = :P_NUMBER) 
        LEFT JOIN PROD_NODE ON TEMP$PROD_TO_FAK.PROD_ID = PROD_NODE.OPR_PROD_ID 
        LEFT JOIN OUT_EL ON (OUT_EL.OPR_ID = OPR.ID OR OUT_EL.OPR_ID = PROD_NODE.OPR_SUB_PROD_ID) 
        LEFT JOIN OUT_EL_FAK_OUT_EL ON OUT_EL.ID = OUT_EL_FAK_OUT_EL.OUT_EL_ID 
    GROUP BY 2 
    INTO 
        :R_KOL,:R_SIMPLE_ID,:L_FISK_KOL 
 
    DO BEGIN 
        SELECT 
            SIMPLE.RSN, 
            SIMPLE.USLUGA 
        FROM 
            SIMPLE 
        WHERE 
            SIMPLE.ID = :R_SIMPLE_ID 
        INTO 
            :R_RSN,:R_IS_USLUGA; 
 
        L_RETURN_KOL = NULL; 
        SELECT 
            COALESCE(SUM(IN_EL.KOL),0.00) 
        FROM 
            TEMP$PROD_TO_FAK INNER JOIN OPR ON (OPR.ID = TEMP$PROD_TO_FAK.PROD_ID AND OPR.OPR_TIP = 2 AND TEMP$PROD_TO_FAK.NUMBER = :P_NUMBER) 
            LEFT JOIN PROD_NODE ON TEMP$PROD_TO_FAK.PROD_ID = PROD_NODE.OPR_PROD_ID 
            LEFT JOIN OUT_EL ON (OUT_EL.OPR_ID = OPR.ID OR OUT_EL.OPR_ID = PROD_NODE.OPR_SUB_PROD_ID) 
            LEFT JOIN OUT_EL_FAK_OUT_EL ON OUT_EL.ID = OUT_EL_FAK_OUT_EL.OUT_EL_ID 
            INNER JOIN OPR_RAZPAD_NODE ORN ON ORN.OUT_EL_ID = OUT_EL.ID 
            INNER JOIN IN_EL ON IN_EL.ID = ORN.IN_EL_ID 
            INNER JOIN OPR OPR_IN ON OPR_IN.ID = IN_EL.OPR_ID AND OPR.OPR_TIP IN (26,41) 
        WHERE 
            IN_EL.SIMPLE_ID = :R_SIMPLE_ID 
        INTO 
            :L_RETURN_KOL; 
 
        L_RETURN_KOL = COALESCE(L_RETURN_KOL, 0.00); 
 
        L_FISK_KOL = COALESCE(L_FISK_KOL,0.00); 
 
        R_IS_ALL_KOL = 1; 
        IF (R_IS_USLUGA = 1) THEN BEGIN 
            R_SUMA_SR = 0; 
        END 
        ELSE BEGIN 
            R_KOL = ROUND(R_KOL - ROUND(L_RETURN_KOL + L_FISK_KOL,5),5); 
            IF (R_KOL < 0) THEN R_KOL = 0.00; 
            IF (R_RSN = 1) THEN BEGIN 
                IF (P_FLAG_SAME_SN = 1) THEN BEGIN 
                    SELECT 
                        COALESCE(SUM(PN_FAK.KOL),0) 
                    FROM 
                        TEMP$PROD_TO_FAK INNER JOIN OPR OPR1 ON (OPR1.ID = TEMP$PROD_TO_FAK.PROD_ID 
                        AND OPR1.OPR_TIP = 2 AND TEMP$PROD_TO_FAK.NUMBER = :P_NUMBER) 
                        LEFT JOIN PROD_NODE ON PROD_NODE.OPR_PROD_ID = OPR1.ID 
                        INNER JOIN OUT_EL ON (OUT_EL.SIMPLE_ID = :R_SIMPLE_ID 
                        AND (OUT_EL.OPR_ID = OPR1.ID OR PROD_NODE.OPR_SUB_PROD_ID = OUT_EL.OPR_ID)) 
                        INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = OUT_EL.ID 
                        INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID 
                        INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
                        INNER JOIN PARTIDA_NAL PN_FAK ON PN_FAK.ELEMENT_ID = PN.ELEMENT_ID 
                        INNER JOIN IN_EL ON IN_EL.ID = PN_FAK.IN_EL_ID 
                        INNER JOIN OPR OPR2 ON OPR2.ID = IN_EL.OPR_ID AND OPR2.SKLAD_ID = :L_FAKT_SKLAD_ID 
                    WHERE 
                        NOT EXISTS (SELECT 
                            PARTIDA_NAL.ID 
                        FROM 
                            PARTIDA_NAL INNER JOIN IN_EL ON 
                            (IN_EL.ID = PARTIDA_NAL.IN_EL_ID AND PARTIDA_NAL.ELEMENT_ID = PN.ELEMENT_ID) 
                            INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
                            INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
                        WHERE 
                            SKLAD.ID <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
                            AND PARTIDA_NAL.KOL > 0.00) 
                    INTO 
                        :L_NAL_KOL; 
                END 
                ELSE BEGIN 
                    SELECT 
                        COALESCE(NAL.KOL_NAL,0.00) 
                    FROM 
                        NAL 
                    WHERE 
                        NAL.SIMPLE_ID = :R_SIMPLE_ID 
                        AND NAL.SKLAD_ID = :L_FAKT_SKLAD_ID 
                    INTO 
                        :L_NAL_KOL; 
                END 
            END 
            ELSE BEGIN 
                L_NAL_KOL = NULL; 
 
                SELECT 
                    NAL.KOL_NAL 
                FROM 
                    NAL 
                WHERE 
                    NAL.SIMPLE_ID = :R_SIMPLE_ID 
                    AND NAL.SKLAD_ID = :L_FAKT_SKLAD_ID 
                INTO 
                    :L_NAL_KOL; 
 
                IF (L_NAL_KOL IS NULL) THEN 
                    L_NAL_KOL = 0; 
 
            END 
 
            IF ((P_FLAG_FAKT_IZL = 0) OR (R_RSN = 1)) THEN BEGIN 
                IF (L_NAL_KOL > 0) THEN BEGIN 
                    IF (L_NAL_KOL < R_KOL) THEN BEGIN 
                        R_KOL = L_NAL_KOL; 
                        R_IS_ALL_KOL = 0; 
                    END 
 
                    SELECT 
                        IIF(NAL.KOL_NAL = 0.00, 0.00,ROUND(ROUND(NAL.SUMA / NAL.KOL_NAL,5) * :R_KOL,2)) 
                    FROM 
                        NAL 
                    WHERE 
                        NAL.SIMPLE_ID = :R_SIMPLE_ID 
                        AND NAL.SKLAD_ID = :L_FAKT_SKLAD_ID 
                    INTO 
                        :R_SUMA_SR; 
                END 
                ELSE BEGIN 
                    R_KOL = 0; 
                    R_SUMA_SR = 0; 
                    R_IS_ALL_KOL = 0; 
                END 
            END 
            ELSE BEGIN 
                IF (R_KOL <= L_NAL_KOL) THEN BEGIN 
                    L_NAL_KOL = R_KOL; 
                END 
 
                SELECT 
                    IIF (NAL.KOL_NAL = 0.00,0.00, ROUND(ROUND(NAL.SUMA / NAL.KOL_NAL,5) * :L_NAL_KOL,2)) 
                FROM 
                    NAL 
                WHERE 
                    NAL.SIMPLE_ID = :R_SIMPLE_ID 
                    AND NAL.SKLAD_ID = :L_FAKT_SKLAD_ID 
                INTO 
                    :R_SUMA_SR; 
            END 
        END 
        R_SUMA_SR = COALESCE(R_SUMA_SR,0); 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_OUT_EL_PRICES (
    P_FAK_EL_ID TYPE OF DOM_INT)
RETURNS (
    R_OUT_EL_CENA_OS TYPE OF DOM_CENA,
    R_OUT_EL_CENA TYPE OF DOM_CENA,
    R_OUT_EL_CENA_CL TYPE OF DOM_CENA,
    R_FAK_EL_ID TYPE OF DOM_KEY,
    R_PERCENT_MARKUP TYPE OF DOM_PERCENT)
AS
BEGIN 
    SELECT FIRST 1 
        FAK_OUT_EL_NODE.FAK_EL_ID, 
        PROD_CENI_EL.CENA_OS, 
        PROD_CENI_EL.CENA, 
        PROD_CENI_EL.CENA_CL, 
        iif(prod_ceni_el.CENA_CL <> 0, round((prod_ceni_el.cena/prod_ceni_el.CENA_CL - 1)*100, 2), 0) 
    FROM 
        FAK_OUT_EL_NODE INNER JOIN OUT_EL ON OUT_EL.ID = FAK_OUT_EL_NODE.OUT_EL_ID 
        INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID 
    WHERE 
        FAK_OUT_EL_NODE.FAK_EL_ID = :P_FAK_EL_ID 
    INTO :R_FAK_EL_ID, :R_OUT_EL_CENA_OS, :R_OUT_EL_CENA,  :R_OUT_EL_CENA_CL, :R_PERCENT_MARKUP; 
 
    SUSPEND; 
END^


ALTER PROCEDURE GET_OUT_PATIDA_INFO (
    P_ID INTEGER)
RETURNS (
    R_OUT_EL_ID INTEGER,
    R_OUT_SUMA_FR DOUBLE PRECISION,
    R_OPR_ID INTEGER,
    R_OUT_KOL DOUBLE PRECISION,
    R_PAR_KOL DOUBLE PRECISION,
    R_PAR_SUMA DOUBLE PRECISION,
    R_DATETIME TIMESTAMP,
    R_OPR_DATE DATE,
    R_OPR_NAME VARCHAR(45),
    R_OPR_TIP SMALLINT,
    R_SIMPLE_NAME VARCHAR(100))
AS
BEGIN
    FOR SELECT
        PON.OUT_EL_ID
    FROM
        PARTIDA_NAL PN INNER JOIN PARTIDA_EL_NODE PEN ON PEN.PARTIDA_ID = PN.ID
        AND PN.IN_EL_ID = :P_ID
        INNER JOIN PARTIDA_OUT_EL_NODE PON ON PEN.ID = PON.PARTIDA_NODE_ID
    INTO
        :R_OUT_EL_ID
    DO BEGIN
        SELECT
            OUT_EL.SUMA_FR,
            OUT_EL.OPR_ID,
            OUT_EL.KOL,
            OPR.DATETIME,
            OPR.OPR_DATE,
            OPR_TIP.NAME AS OPR_NAME,
            OPR_TIP.ID AS OPR_TIP,
            SIMPLE.NAME AS SIMPLE_NAME
        FROM
            OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID
            INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP
            INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID
        WHERE
            OUT_EL.ID = :R_OUT_EL_ID
        INTO
            :R_OUT_SUMA_FR,:R_OPR_ID,:R_OUT_KOL,:R_DATETIME,:R_OPR_DATE,
            :R_OPR_NAME,:R_OPR_TIP,:R_SIMPLE_NAME;

        SELECT
            SUM(PEN.KOL),
            SUM(PEN.SUMA_FR)
        FROM
            PARTIDA_NAL PN INNER JOIN PARTIDA_EL_NODE PEN ON PEN.PARTIDA_ID = PN.ID AND PN.IN_EL_ID = :P_ID
            INNER JOIN PARTIDA_OUT_EL_NODE PON ON PEN.ID = PON.PARTIDA_NODE_ID AND PON.OUT_EL_ID = :R_OUT_EL_ID
        INTO
            :R_PAR_KOL,:R_PAR_SUMA;
        SUSPEND;
    END
END^


ALTER PROCEDURE GET_PARI_SALDO (
    P_VALUTA_ID INTEGER,
    P_DATE DATE,
    P_FILTER VARCHAR(1024),
    P_FLAG_SUMA_BASE SMALLINT,
    P_IS_CRYPT SMALLINT,
    P_PASS VARCHAR(100))
RETURNS (
    R_VALUTA_ID INTEGER,
    R_SUMA DOUBLE PRECISION,
    R_SUMA_KURS DOUBLE PRECISION,
    R_SUMA_SR_KURS DOUBLE PRECISION,
    R_SUMA_RAZLIKA DOUBLE PRECISION,
    R_SUMA_SALDO DOUBLE PRECISION,
    R_SUMA_SALDO_KURS DOUBLE PRECISION,
    R_KURS DOUBLE PRECISION,
    R_KURS_SR DOUBLE PRECISION,
    R_PARI_IO_TIP SMALLINT,
    R_TIP SMALLINT,
    R_RAZHOD_SUMA DOUBLE PRECISION,
    R_PRIHOD_SUMA DOUBLE PRECISION,
    R_SUMA_SALDO_RAZLIKA DOUBLE PRECISION)
AS
declare variable L_SUMA double precision;
declare variable L_KURS double precision;
declare variable L_PARI_TIP smallint;
declare variable L_OPR_ID integer;
declare variable L_DATE date;
BEGIN 
    IF (P_FLAG_SUMA_BASE = 0) THEN BEGIN 
 
        R_SUMA = 0.00; 
        R_PRIHOD_SUMA = 0.00; 
        R_RAZHOD_SUMA = 0.00; 
        R_SUMA_SALDO_RAZLIKA = 0.00; 
 
        FOR EXECUTE STATEMENT 'SELECT 
            PARI1.SUMA, 
            PARI1.TIP 
        FROM 
            PARI PARI1 INNER JOIN OPR ON OPR.ID = PARI1.OPR_ID 
            join kasa on kasa.id = pari1.kasa_id 
            inner join pari_io on pari1.pari_io_id = pari_io.id 
        WHERE 
            PARI1.VALUTA_ID = '|| :P_VALUTA_ID || ' AND OPR.OPR_DATE < ''' || :P_DATE || ''' AND ' 
            || :P_FILTER || ' (1=1) 
 
        UNION ALL 
 
        SELECT 
            CAST (DECRYPT_DOUBLE(PARI1.SUMA, '''|| :P_PASS || ''') AS DOUBLE PRECISION), 
            PARI1.TIP 
        FROM 
            PARI_CRYPT PARI1 INNER JOIN OPR ON OPR.ID = PARI1.OPR_ID 
            join kasa on kasa.id = pari1.kasa_id 
            inner join pari_io on pari1.pari_io_id = pari_io.id 
        WHERE 
            PARI1.VALUTA_ID = ' || :P_VALUTA_ID || ' AND OPR.OPR_DATE < ''' || :P_DATE || ''' 
            AND 1 = ' || :P_IS_CRYPT || ' AND ' || :P_FILTER || ' (1=1)' 
        INTO 
            :L_SUMA,:L_PARI_TIP 
        DO BEGIN 
            R_SUMA = ROUNDD(R_SUMA + L_SUMA); 
            IF (L_PARI_TIP = 0) THEN 
                R_PRIHOD_SUMA = roundd(R_PRIHOD_SUMA + L_SUMA); 
            ELSE 
                R_RAZHOD_SUMA = roundd(R_RAZHOD_SUMA + L_SUMA); 
 
        END 
 
        R_VALUTA_ID = P_VALUTA_ID; 
        R_SUMA_RAZLIKA = 0.00; 
        R_KURS_SR = 0.00; 
        SUSPEND; 
    END 
    ELSE BEGIN 
        R_VALUTA_ID = P_VALUTA_ID; 
        R_SUMA_SALDO = 0.00; 
        R_SUMA_SALDO_KURS = 0.00; 
        R_SUMA_RAZLIKA = 0.00; 
        R_KURS_SR = 0.00; 
        R_SUMA_SALDO_RAZLIKA = 0.00; 
 
        R_PRIHOD_SUMA = 0.00; 
        R_RAZHOD_SUMA = 0.00; 
 
        FOR EXECUTE STATEMENT 'SELECT 
            PARI1.SUMA, 
            PARI1.KURS, 
            PARI1.TIP, 
            OPR.ID, 
            OPR.OPR_DATE, 
            PARI_IO.TIP 
        FROM 
            PARI PARI1 INNER JOIN OPR ON OPR.ID = PARI1.OPR_ID 
            INNER JOIN PARI_IO ON PARI_IO.ID = PARI1.PARI_IO_ID 
            join kasa on kasa.id = pari1.kasa_id 
        WHERE
            PARI1.VALUTA_ID = ' || :P_VALUTA_ID || 'AND OPR.OPR_DATE < ''' || :P_DATE || ''' AND 
            ' || :P_FILTER ||' (1=1) 
 
        UNION ALL 
        SELECT 
            DECRYPT_DOUBLE(PARI1.SUMA,'''||:P_PASS ||'''), 
            PARI1.KURS, 
            PARI1.TIP, 
            OPR.ID, 
            OPR.OPR_DATE, 
            PARI_IO.TIP 
        FROM 
            PARI_CRYPT PARI1 INNER JOIN OPR ON OPR.ID = PARI1.OPR_ID 
            INNER JOIN PARI_IO ON PARI_IO.ID = PARI1.PARI_IO_ID 
            join kasa on kasa.id = pari1.kasa_id 
        WHERE
            1 = '|| :P_IS_CRYPT || ' AND PARI1.VALUTA_ID = ' || :P_VALUTA_ID || ' 
            AND OPR.OPR_DATE < ''' || :P_DATE || ''' AND ' || :P_FILTER || ' (1=1) 
        ORDER BY 5,4' 
        INTO 
            :L_SUMA,:L_KURS,:L_PARI_TIP,:L_OPR_ID,:L_DATE,:R_PARI_IO_TIP 
        DO BEGIN 
            IF (L_PARI_TIP = 0/*WHOD*/) THEN BEGIN 
                IF (R_PARI_IO_TIP = 2) THEN BEGIN 
                    L_KURS = R_KURS_SR; 
                    UPDATE PARI SET 
                    KURS = :R_KURS_SR 
                    WHERE PARI.OPR_ID = :L_OPR_ID; 
                END 
 
                R_SUMA = L_SUMA; 
                R_SUMA_KURS  = ROUNDD(L_SUMA * L_KURS); 
 
                R_PRIHOD_SUMA = roundd(R_PRIHOD_SUMA + R_SUMA_KURS); 
 
                R_SUMA_SALDO = ROUNDD(R_SUMA + R_SUMA_SALDO); 
                R_SUMA_SALDO_KURS = ROUNDD(R_SUMA_SALDO_KURS + R_SUMA_KURS); 
                R_SUMA_SR_KURS = ROUNDD(L_SUMA * R_KURS_SR); 
 
                IF (NOT R_PARI_IO_TIP = 2) THEN BEGIN 
                    IF (R_SUMA_SALDO = 0.00) THEN 
                        R_KURS_SR = 0.00; 
                    ELSE 
                        R_KURS_SR = R_SUMA_SALDO_KURS / R_SUMA_SALDO; 
                END 
 
                R_SUMA_RAZLIKA = 0.00; 
                R_SUMA_SALDO_KURS = ROUNDD(R_SUMA_SALDO_KURS + R_SUMA_RAZLIKA); 
            END 
            ELSE BEGIN 
                IF (R_PARI_IO_TIP = 2) THEN BEGIN 
                    L_KURS = R_KURS_SR; 
 
                    UPDATE PARI SET 
                    KURS = :R_KURS_SR 
                    WHERE PARI.OPR_ID = :L_OPR_ID; 
                END 
 
                R_SUMA = L_SUMA; 
                R_SUMA_KURS = ROUNDD(L_SUMA * L_KURS); 
                R_RAZHOD_SUMA = roundd(R_RAZHOD_SUMA + R_SUMA_KURS); 
 
                IF (R_KURS_SR = 0.00) THEN 
                    R_SUMA_SR_KURS = R_SUMA_KURS; 
                ELSE 
                    R_SUMA_SR_KURS = ROUNDD(L_SUMA * R_KURS_SR); 
 
                R_SUMA_RAZLIKA = ROUNDD(R_SUMA_KURS - R_SUMA_SR_KURS); 
                R_SUMA_SALDO_RAZLIKA = roundd(R_SUMA_SALDO_RAZLIKA + R_SUMA_RAZLIKA); 
 
                R_SUMA_SALDO = ROUNDD(R_SUMA_SALDO - R_SUMA); 
                R_SUMA_SALDO_KURS = ROUNDD(ROUNDD(R_SUMA_SALDO_KURS - R_SUMA_KURS)  + R_SUMA_RAZLIKA); 
                IF (NOT R_PARI_IO_TIP = 2) THEN BEGIN 
                    IF (R_SUMA_SALDO = 0.00) THEN 
                        R_KURS_SR = 0.00; 
                    ELSE 
                        R_KURS_SR = R_SUMA_SALDO_KURS / R_SUMA_SALDO; 
                END 
            END 
            R_KURS = L_KURS; 
            R_TIP = L_PARI_TIP; 
 
        END 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_PARTIDA_HIS_IN (
    P_IN_ID TYPE OF DOM_KEY)
RETURNS (
    R_KOL TYPE OF DOM_KOL,
    R_SUMA_FR TYPE OF DOM_SUMA,
    R_SUMA_SR TYPE OF DOM_SUMA,
    R_ELEMENT_ID TYPE OF DOM_KEY,
    R_ID TYPE OF DOM_KEY,
    R_DATETIME TYPE OF DOM_DATE_TIME,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_OPR_SUMA TYPE OF DOM_SUMA,
    R_OPR_NAME VARCHAR(45),
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_SKLAD_NAME TYPE OF DOM_CHAR_20,
    R_SN TYPE OF DOM_CHAR_30)
AS
DECLARE VARIABLE L_EL_ID INTEGER;
BEGIN
/*V.2*/
    FOR SELECT
        PN.ELEMENT_ID
    FROM
        PARTIDA_IN_EL_NODE PIN INNER JOIN PARTIDA_EL_NODE PEN ON
        PEN.ID = PIN.PARTIDA_NODE_ID AND PIN.IN_EL_ID = :P_IN_ID
        INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID
    GROUP BY 1
    ORDER BY 1
    INTO
        :L_EL_ID
    DO BEGIN
        FOR SELECT
            PEN.KOL,
            PEN.SUMA_FR,
            PEN.SUMA_SR,
            PN.ELEMENT_ID,
            OPR.ID,
            OPR.DATETIME,
            OPR.OPR_DATE,
            OPR.SUMA,
            OPR_TIP.NAME,
            KLI.NAME,
            SKLAD.NAME,
            SERIAL_NUM.SN
        FROM
            PARTIDA_NAL PN INNER JOIN PARTIDA_EL_NODE PEN ON PN.ELEMENT_ID = :L_EL_ID AND PN.ID = PEN.PARTIDA_ID
            INNER JOIN OPR ON OPR.ID = PEN.OPR_ID
            INNER JOIN OPR_TIP ON OPR.OPR_TIP = OPR_TIP.ID
            INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID
            LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID
            LEFT JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID
        ORDER BY 4,5
        INTO
            :R_KOL,:R_SUMA_FR,:R_SUMA_SR,:R_ELEMENT_ID,:R_ID,:R_DATETIME,
            :R_OPR_DATE,:R_OPR_SUMA,:R_OPR_NAME,:R_KLI_NAME,:R_SKLAD_NAME,:R_SN
        DO BEGIN
            SUSPEND;
        END
    END
END^


ALTER PROCEDURE GET_PARTIDA_HIS_OUT (
    P_OUT_ID INTEGER)
RETURNS (
    R_KOL TYPE OF DOM_KOL,
    R_SUMA_FR TYPE OF DOM_SUMA,
    R_SUMA_SR TYPE OF DOM_SUMA,
    R_ELEMENT_ID TYPE OF DOM_KEY,
    R_ID TYPE OF DOM_KEY,
    R_DATETIME TYPE OF DOM_DATE_TIME,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_OPR_SUMA TYPE OF DOM_SUMA,
    R_OPR_NAME VARCHAR(45),
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_SKLAD_NAME TYPE OF DOM_CHAR_20,
    R_SN TYPE OF DOM_CHAR_30)
AS
DECLARE VARIABLE L_EL_ID INTEGER;
DECLARE VARIABLE L_PARTIDA_ID INTEGER;
BEGIN
/*V.2*/
    FOR SELECT
        PON.PARTIDA_NODE_ID
    FROM
        PARTIDA_OUT_EL_NODE PON
    WHERE
        PON.OUT_EL_ID = :P_OUT_ID
    INTO
        :L_PARTIDA_ID
    DO BEGIN
        FOR SELECT
            PN.ELEMENT_ID
        FROM
            PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID AND PEN.ID = :L_PARTIDA_ID
        GROUP BY 1
        ORDER BY 1
        INTO
            :L_EL_ID
        DO BEGIN
            FOR SELECT
                PEN.KOL,
                PEN.SUMA_FR,
                PEN.SUMA_SR,
                PN.ELEMENT_ID,
                OPR.ID,
                OPR.DATETIME,
                OPR.OPR_DATE,
                OPR.SUMA,
                OPR_TIP.NAME,
                KLI.NAME,
                SKLAD.NAME,
                SERIAL_NUM.SN
            FROM
                PARTIDA_NAL PN INNER JOIN PARTIDA_EL_NODE PEN ON PN.ELEMENT_ID = :L_EL_ID AND PN.ID = PEN.PARTIDA_ID
                INNER JOIN OPR ON OPR.ID = PEN.OPR_ID
                INNER JOIN OPR_TIP ON OPR.OPR_TIP = OPR_TIP.ID
                INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID
                LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID
                LEFT JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID
            ORDER BY 4,5
            INTO
                :R_KOL,:R_SUMA_FR,:R_SUMA_SR,:R_ELEMENT_ID,:R_ID,:R_DATETIME,
                :R_OPR_DATE,:R_OPR_SUMA,:R_OPR_NAME,:R_KLI_NAME,:R_SKLAD_NAME,:R_SN
            DO BEGIN
                SUSPEND;
            END
        END
    END
END^


ALTER PROCEDURE GET_PAY_DOST_AMB_DUE (
    P_DATE DATE,
    P_FILTER VARCHAR(150))
RETURNS (
    R_ID INTEGER,
    R_SUMA DOUBLE PRECISION)
AS
BEGIN 
    IF (P_FILTER IS NULL ) THEN 
        P_FILTER = ''; 
    IF (P_DATE IS NULL) THEN 
        FOR EXECUTE STATEMENT 'SELECT 
            OPR.KLI_ID, 
            SUM(SUMI.SUMA) 
        FROM 
            OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE ' || :P_FILTER ||' 
            OPR.OPR_TIP = 55 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1' 
        INTO 
            :R_ID,:R_SUMA 
        DO 
            SUSPEND; 
    ELSE 
        FOR EXECUTE STATEMENT 'SELECT 
            OPR.KLI_ID, 
            SUM(SUMI.SUMA) 
        FROM 
            OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE '|| :P_FILTER || ' 
            OPR.OPR_TIP = 55 
            AND OPR.OPR_DATE <= ''' || :P_DATE || ''' 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1' 
        INTO 
            :R_ID,:R_SUMA 
        DO 
            SUSPEND; 
END^


ALTER PROCEDURE GET_PAY_DOST_AMB_RET_DUE (
    P_DATE DATE,
    P_FILTER VARCHAR(150))
RETURNS (
    R_ID INTEGER,
    R_SUMA DOUBLE PRECISION)
AS
BEGIN 
    IF (P_FILTER IS NULL ) THEN 
        P_FILTER = ''; 
    IF (P_DATE IS NULL) THEN 
        FOR EXECUTE STATEMENT 'SELECT 
            OPR.KLI_ID, 
            SUM(SUMI.SUMA) 
        FROM 
            OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE ' || :P_FILTER ||' 
            OPR.OPR_TIP = 56 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1' 
        INTO 
            :R_ID,:R_SUMA 
        DO 
            SUSPEND; 
    ELSE 
        FOR EXECUTE STATEMENT 'SELECT 
            OPR.KLI_ID, 
            SUM(SUMI.SUMA) 
        FROM 
            OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE '|| :P_FILTER || ' 
            OPR.OPR_TIP = 56 
            AND OPR.OPR_DATE <= ''' || :P_DATE || ''' 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1' 
        INTO 
            :R_ID,:R_SUMA 
        DO 
            SUSPEND; 
END^


ALTER PROCEDURE GET_PAY_DOST_DUE (
    P_DATE DATE,
    P_FILTER VARCHAR(150))
RETURNS (
    R_ID INTEGER,
    R_SUMA DOUBLE PRECISION)
AS
begin 
    IF (P_FILTER IS NULL ) THEN 
        P_FILTER = ''; 
    IF (P_DATE IS NULL) THEN 
        FOR EXECUTE STATEMENT 'SELECT 
            OPR.KLI_ID, 
            SUM(SUMI.SUMA) 
        FROM 
            OPR INNER JOIN "IN" ON "IN".OPR_ID = OPR.ID 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE ' || :P_FILTER ||' 
            OPR.OPR_TIP = 1 
            AND "IN".ID > 0 
            AND "IN".PAY_TIP IN (1,3) 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1' 
        INTO 
            :R_ID,:R_SUMA 
        DO 
            SUSPEND; 
    ELSE 
        FOR EXECUTE STATEMENT 'SELECT 
            OPR.KLI_ID, 
            SUM(SUMI.SUMA) 
        FROM 
            OPR INNER JOIN "IN" ON "IN".OPR_ID = OPR.ID 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE '|| :P_FILTER || ' 
            OPR.OPR_TIP = 1 
            AND OPR.OPR_DATE <= ''' || :P_DATE || ''' 
            AND "IN".ID > 0 
            AND "IN".PAY_TIP IN (1,3) 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1' 
        INTO 
            :R_ID,:R_SUMA 
        DO 
            SUSPEND; 
END^


ALTER PROCEDURE GET_PAY_DOST_FAKT_DUE (
    P_DATE DATE,
    P_FILTER VARCHAR(150))
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(15),
    R_SUMA DOUBLE PRECISION,
    R_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(50))
AS
BEGIN 
    IF (P_FILTER IS NULL ) THEN 
        P_FILTER = ''; 
    IF (P_DATE IS NULL) THEN 
        FOR EXECUTE STATEMENT 'SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            SUM(FAK_IN.DDS), 
            (SELECT FIRST 1 COMMENTS.NOTE FROM COMMENTS INNER JOIN COMMENT_KLI_NODE 
            ON COMMENT_KLI_NODE.COMMENT_ID = COMMENTS.ID WHERE COMMENT_KLI_NODE.KLI_ID=KLI.ID 
            ORDER BY COMMENT_KLI_NODE.ID DESC) AS COMMENT, 
            FIRMI.NAME_FAK 
        FROM 
            OPR INNER JOIN FAK_IN ON (OPR.OPR_TIP = 13 AND FAK_IN.OPR_ID = OPR.ID) 
            INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE '|| :P_FILTER || ' 
            FAK_IN.TIP = 0 
            AND FAK_IN.ID > 0 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND FAK_IN.PAY_TIP_DDS IN (1,3,10) 
            AND ((SELECT FIRST 1 LOG.TIP_CENI FROM LOG_CENI_DDS LOG WHERE LOG.TIP_DDS = 0 AND 
            LOG.OPR_ID < OPR.ID ORDER BY LOG.OPR_ID DESC, LOG.ID DESC) = 0) 
        GROUP BY 1,2,3,6' 
        INTO 
            :R_ID,:R_NAME,:R_CODE,:R_SUMA,:R_COMMENT,:R_NAME_FAK 
        DO 
            SUSPEND; 
    ELSE 
        FOR EXECUTE STATEMENT 'SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            SUM(FAK_IN.DDS), 
            (SELECT FIRST 1 COMMENTS.NOTE FROM COMMENTS INNER JOIN COMMENT_KLI_NODE 
            ON COMMENT_KLI_NODE.COMMENT_ID = COMMENTS.ID WHERE COMMENT_KLI_NODE.KLI_ID=KLI.ID 
            ORDER BY COMMENT_KLI_NODE.ID DESC) AS COMMENT, 
            FIRMI.NAME_FAK 
        FROM 
            OPR INNER JOIN FAK_IN ON (OPR.OPR_TIP = 13 AND FAK_IN.OPR_ID = OPR.ID) 
            INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE '|| :P_FILTER || ' 
            FAK_IN.TIP = 0 
            AND OPR.OPR_DATE <= ''' || :P_DATE || ''' 
            AND FAK_IN.ID > 0 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND FAK_IN.PAY_TIP_DDS IN (1,3,10) 
            AND ((SELECT FIRST 1 LOG.TIP_CENI FROM LOG_CENI_DDS LOG WHERE LOG.TIP_DDS = 0 AND 
            LOG.OPR_ID < OPR.ID ORDER BY LOG.OPR_ID DESC, LOG.ID DESC) = 0) 
 
        GROUP BY 1,2,3,6' 
        INTO 
            :R_ID,:R_NAME,:R_CODE,:R_SUMA,:R_COMMENT,:R_NAME_FAK 
        DO 
            SUSPEND; 
 
END^


ALTER PROCEDURE GET_PAY_DOST_PAY (
    P_DATE DATE,
    P_FILTER VARCHAR(1000))
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(15),
    R_SUMA DOUBLE PRECISION,
    R_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(100))
AS
BEGIN 
/*V.1*/ 
    IF (P_FILTER IS NULL) THEN 
        P_FILTER = ''; 
    IF (P_DATE IS NULL) THEN 
        FOR EXECUTE STATEMENT 'SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            SUM(OPR.SUMA), 
            (SELECT FIRST 1 COMMENTS.NOTE FROM COMMENTS INNER JOIN COMMENT_KLI_NODE 
            ON COMMENT_KLI_NODE.COMMENT_ID = COMMENTS.ID WHERE COMMENT_KLI_NODE.KLI_ID=KLI.ID 
            ORDER BY COMMENT_KLI_NODE.ID DESC) AS COMMENT, 
            FIRMI.NAME_FAK 
        FROM 
            OPR INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE ' || :P_FILTER || ' 
            OPR.OPR_TIP = 7 
            AND KLI.ID > 0 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1,2,3,6' 
        INTO 
            :R_ID,:R_NAME,:R_CODE,:R_SUMA,:R_COMMENT,:R_NAME_FAK 
        DO 
            SUSPEND; 
    ELSE 
        FOR EXECUTE STATEMENT 'SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            SUM(OPR.SUMA), 
            (SELECT FIRST 1 COMMENTS.NOTE FROM COMMENTS INNER JOIN COMMENT_KLI_NODE 
            ON COMMENT_KLI_NODE.COMMENT_ID = COMMENTS.ID WHERE COMMENT_KLI_NODE.KLI_ID=KLI.ID 
            ORDER BY COMMENT_KLI_NODE.ID DESC) AS COMMENT, 
            FIRMI.NAME_FAK 
        FROM 
            OPR INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE ' || :P_FILTER ||' 
            OPR.OPR_TIP = 7 
            AND OPR.OPR_DATE <= ''' || :P_DATE || ''' 
            AND KLI.ID > 0 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1,2,3,6' 
        INTO 
            :R_ID,:R_NAME,:R_CODE,:R_SUMA,:R_COMMENT,:R_NAME_FAK 
        DO 
            SUSPEND; 
END^


ALTER PROCEDURE GET_PAY_DOST_RET (
    P_DATE DATE,
    P_FILTER VARCHAR(1000),
    P_FLAG_DDS SMALLINT)
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(15),
    R_SUMA DOUBLE PRECISION,
    R_NAME_FAK VARCHAR(100))
AS
declare variable L_KI_ID integer; 
declare variable L_OPR_ID integer; 
declare variable L_TIP_CENI smallint; 
declare variable L_OPR_TIP integer; 
BEGIN 
/*V.4*/ 
    IF (P_FILTER IS NULL) THEN 
        P_FILTER = ''; 
    IF (P_DATE IS NULL) THEN 
        FOR EXECUTE STATEMENT 'SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            OPR.SUMA, 
            FIRMI.NAME_FAK, 
            CAST (0 AS INTEGER), 
            OPR.ID, 
            OPR.OPR_TIP 
        FROM 
            OPR INNER JOIN RET_STOKA_DOST ON RET_STOKA_DOST.OPR_ID = OPR.ID 
            INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE '|| :P_FILTER ||' 
            OPR.OPR_TIP = 27 
            AND RET_STOKA_DOST.PAY_TIP IN (1,3) 
            AND OPR.KLI_ID IS NOT NULL 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND NOT OPR.SKLAD_ID = (SELECT FIRST 1 SYSTEM.H_SKLAD FROM SYSTEM) 
        UNION ALL 
        SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            OPR.SUMA, 
            FIRMI.NAME_FAK, 
            RET_STOKA_DOST_KI.ID , 
            OPR.ID, 
            OPR.OPR_TIP 
        FROM 
            OPR INNER JOIN RET_STOKA_DOST_KI ON RET_STOKA_DOST_KI.OPR_ID = OPR.ID 
            INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE '|| :P_FILTER ||' 
            OPR.OPR_TIP = 37 
            AND RET_STOKA_DOST_KI.PAY_TIP IN (1,3) 
            AND OPR.KLI_ID IS NOT NULL 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND NOT OPR.SKLAD_ID = (SELECT FIRST 1 SYSTEM.H_SKLAD FROM SYSTEM) 
        UNION ALL 
        SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            OPR.SUMA, 
            FIRMI.NAME_FAK, 
            KI_DOST_SUMA.ID, 
            OPR.ID, 
            OPR.OPR_TIP 
        FROM 
            OPR INNER JOIN KI_DOST_SUMA ON KI_DOST_SUMA.KI_OPR_ID = OPR.ID 
            INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE '|| :P_FILTER ||' 
            OPR.OPR_TIP = 50 
            AND KI_DOST_SUMA.PAY_TIP IN (1,3) 
            AND OPR.KLI_ID IS NOT NULL 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        UNION ALL 
        SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            -OPR.SUMA, 
            FIRMI.NAME_FAK, 
            KI_DOST_SUMA.ID, 
            OPR.ID, 
            OPR.OPR_TIP 
        FROM 
            OPR INNER JOIN KI_DOST_SUMA ON KI_DOST_SUMA.KI_OPR_ID = OPR.ID 
            INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE '|| :P_FILTER ||' 
            OPR.OPR_TIP = 91 
            AND KI_DOST_SUMA.PAY_TIP IN (1,3) 
            AND OPR.KLI_ID IS NOT NULL 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
 
        ORDER BY 1 ' 
        INTO 
            :R_ID,:R_NAME,:R_CODE,:R_SUMA,:R_NAME_FAK, :L_KI_ID, :L_OPR_ID, :L_OPR_TIP 
        DO BEGIN 
            IF (L_KI_ID = 0) THEN BEGIN/*ОБИКНОВЕННО ВРЪЩАНЕ*/ 
                SUSPEND; 
            END 
            ELSE IF (L_OPR_TIP NOT IN (50, 91) AND EXISTS (SELECT RT.ID FROM RET_DOST_KI_DOST_NODE RT WHERE RT.KI_DOST_ID = :L_KI_ID)) 
            THEN BEGIN 
                SELECT FIRST 1 
                    LOG.TIP_CENI 
                FROM 
                   LOG_CENI_DDS LOG 
                WHERE 
                    LOG.TIP_DDS = 0 
                    AND LOG.OPR_ID < :L_OPR_ID 
                ORDER BY LOG.OPR_ID DESC, LOG.ID DESC 
                INTO 
                    :L_TIP_CENI; 
                IF (L_TIP_CENI = 0) THEN 
                    SUSPEND;/*ПРИ ИЗДАВАНЕ НА КРЕДИТНОТО ИЗВЕСТИЕ ЦЕНИТЕ СА БИЛИ БЕЗ ДДС*/ 
            END 
            /*ELSE IF ((L_OPR_TIP = 50) AND (EXISTS (SELECT KI_DOST_SUMA_EL.ID FROM KI_DOST_SUMA_EL WHERE KI_DOST_SUMA_EL.OPR_ID = :L_OPR_ID))) 
            THEN BEGIN 
                -- АКО Е КРЕДИТНО ЗА СУМА ЩЕ СЕ ВЪРНЕ САМО ДДС-ТО НА КРЕДИТНОТО АКО ЦНИТЕ СА БИЛИ БЕЗ ДДС 
                SELECT FIRST 1 
                    LOG.TIP_CENI 
                FROM 
                   LOG_CENI_DDS LOG 
                WHERE 
                    LOG.TIP_DDS = 0 
                    AND LOG.OPR_ID < :L_OPR_ID 
                ORDER BY LOG.OPR_ID DESC, LOG.ID DESC 
                INTO 
                    :L_TIP_CENI; 
 
                IF (L_TIP_CENI = 0) THEN BEGIN 
                    SELECT 
                        FAK_IN.DDS 
                    FROM 
                        FAK_IN 
                    WHERE 
                        FAK_IN.OPR_ID = :L_OPR_ID 
                    INTO 
                        :R_SUMA; 
                    SUSPEND; 
                END 
            END*/ 
            ELSE BEGIN 
                SUSPEND;/*ОБИКНОВЕННО КИ, А НЕ ОТ ВРЪЗКА*/ 
            END 
        END 
    ELSE 
        FOR EXECUTE STATEMENT 'SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            OPR.SUMA, 
            FIRMI.NAME_FAK, 
            CAST (0 AS INTEGER), 
            OPR.ID, 
            OPR.OPR_TIP 
        FROM 
            OPR INNER JOIN RET_STOKA_DOST ON RET_STOKA_DOST.OPR_ID = OPR.ID 
            INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE '|| :P_FILTER || ' 
            OPR.OPR_TIP = 27 
            AND RET_STOKA_DOST.PAY_TIP IN (1,3) 
            AND OPR.KLI_ID IS NOT NULL 
            AND OPR.OPR_DATE <= '''||:P_DATE||''' 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND NOT OPR.SKLAD_ID = (SELECT FIRST 1 SYSTEM.H_SKLAD FROM SYSTEM) 
        UNION ALL 
        SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            OPR.SUMA, 
            FIRMI.NAME_FAK, 
            RET_STOKA_DOST_KI.ID, 
            OPR.ID, 
            OPR.OPR_TIP 
        FROM 
            OPR INNER JOIN RET_STOKA_DOST_KI ON RET_STOKA_DOST_KI.OPR_ID = OPR.ID 
            INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE '|| :P_FILTER || ' 
            OPR.OPR_TIP = 37 
            AND RET_STOKA_DOST_KI.PAY_TIP IN (1,3) 
            AND OPR.KLI_ID IS NOT NULL 
            AND OPR.OPR_DATE <= '''||:P_DATE||''' 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND NOT OPR.SKLAD_ID = (SELECT FIRST 1 SYSTEM.H_SKLAD FROM SYSTEM) 
        UNION ALL 
        SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            OPR.SUMA, 
            FIRMI.NAME_FAK, 
            KI_DOST_SUMA.ID, 
            OPR.ID, 
            OPR.OPR_TIP 
        FROM 
            OPR INNER JOIN KI_DOST_SUMA ON KI_DOST_SUMA.KI_OPR_ID = OPR.ID 
            INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE '|| :P_FILTER || ' 
            OPR.OPR_TIP = 50 
            AND KI_DOST_SUMA.PAY_TIP IN (1,3) 
            AND OPR.KLI_ID IS NOT NULL 
            AND OPR.OPR_DATE <= '''||:P_DATE||''' 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        UNION ALL 
        SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            -OPR.SUMA, 
            FIRMI.NAME_FAK, 
            KI_DOST_SUMA.ID, 
            OPR.ID, 
            OPR.OPR_TIP 
        FROM 
            OPR INNER JOIN KI_DOST_SUMA ON KI_DOST_SUMA.KI_OPR_ID = OPR.ID 
            INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE '|| :P_FILTER || ' 
            OPR.OPR_TIP = 91 
            AND KI_DOST_SUMA.PAY_TIP IN (1,3) 
            AND OPR.KLI_ID IS NOT NULL 
            AND OPR.OPR_DATE <= '''||:P_DATE||''' 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        ORDER BY 1' 
        INTO 
            :R_ID,:R_NAME,:R_CODE,:R_SUMA,:R_NAME_FAK,:L_KI_ID,:L_OPR_ID, :L_OPR_TIP 
        DO BEGIN 
            IF (L_KI_ID = 0) THEN BEGIN/*ОБИКНОВЕННО ВЯРЪЩАНЕ*/ 
                SUSPEND; 
            END 
            ELSE IF (L_OPR_TIP NOT IN (50, 91) AND  EXISTS (SELECT RT.ID FROM RET_DOST_KI_DOST_NODE RT WHERE RT.KI_DOST_ID = :L_KI_ID)) THEN BEGIN 
                --IF (P_FLAG_DDS = 1) THEN /*КР. ИЗВЕСТИЕ ВЪРЗАНО ОТ ВРЪЩАНЕ - САМО АКО СЕ ТРЯБВА ДА СЕ ВИДИ ДДС ОТ ВХОДЯЩИ ФАКТУ*/ 
                SELECT FIRST 1 
                    LOG.TIP_CENI 
                FROM 
                    LOG_CENI_DDS LOG 
                WHERE 
                    LOG.TIP_DDS = 0 
                    AND LOG.OPR_ID < :L_OPR_ID 
                ORDER BY LOG.OPR_ID DESC, LOG.ID DESC 
                INTO 
                    :L_TIP_CENI; 
               IF (L_TIP_CENI = 0) THEN 
                    SUSPEND;/*ПРИ ИЗДАВАНЕ НА КРЕДИТНОТО ИЗВЕСТИЕ ЦЕНИТЕ СА БИЛИ БЕЗ ДДС*/ 
            END 
            /*ELSE IF ((L_OPR_TIP = 50) AND (EXISTS (SELECT KI_DOST_SUMA_EL.ID FROM KI_DOST_SUMA_EL WHERE KI_DOST_SUMA_EL.OPR_ID = :L_OPR_ID))) 
            THEN BEGIN 
                -- АКО Е КРЕДИТНО ЗА СУМА ЩЕ СЕ ВЪРНЕ САМО ДДС-ТО НА КРЕДИТНОТО АКО ЦНИТЕ СА БИЛИ БЕЗ ДДС 
                SELECT FIRST 1 
                    LOG.TIP_CENI 
                FROM 
                   LOG_CENI_DDS LOG 
                WHERE 
                    LOG.TIP_DDS = 0 
                    AND LOG.OPR_ID < :L_OPR_ID 
                ORDER BY LOG.OPR_ID DESC, LOG.ID DESC 
                INTO 
                    :L_TIP_CENI; 
 
                IF (L_TIP_CENI = 0) THEN BEGIN 
                    SELECT 
                        FAK_IN.DDS 
                    FROM 
                        FAK_IN 
                    WHERE 
                        FAK_IN.OPR_ID = :L_OPR_ID 
                    INTO 
                        :R_SUMA; 
                    SUSPEND; 
                END 
            END */ 
            ELSE BEGIN 
                SUSPEND;/*ОБИКНОВЕННО КИ*/ 
            END 
        END 
END^


ALTER PROCEDURE GET_PAY_DOST_RET_PAY (
    P_DATE DATE,
    P_FILTER VARCHAR(150))
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(15),
    R_SUMA DOUBLE PRECISION,
    R_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(50))
AS
BEGIN  
/*V.2*/  
    IF (P_FILTER IS NULL) THEN  
        P_FILTER = '';  
    IF (P_DATE IS NULL) THEN  
        FOR EXECUTE STATEMENT 'SELECT  
            KLI.ID,  
            KLI.NAME,  
            KLI.CODE,  
            -SUM(OPR.SUMA),  
            (SELECT FIRST 1 COMMENTS.NOTE FROM COMMENTS INNER JOIN COMMENT_KLI_NODE 
            ON COMMENT_KLI_NODE.COMMENT_ID = COMMENTS.ID WHERE COMMENT_KLI_NODE.KLI_ID=KLI.ID 
            ORDER BY COMMENT_KLI_NODE.ID DESC) AS COMMENT, 
            FIRMI.NAME_FAK  
        FROM  
            OPR INNER JOIN KLI ON KLI.ID = OPR.KLI_ID  
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID  
        WHERE ' || :P_FILTER ||'  
            OPR.OPR_TIP = 30  
            AND KLI.ID > 0  
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)  
        GROUP BY 1,2,3,6' 
        INTO  
            :R_ID,:R_NAME,:R_CODE,:R_SUMA,:R_COMMENT,:R_NAME_FAK  
        DO  
            SUSPEND;  
    ELSE  
        FOR EXECUTE STATEMENT 'SELECT  
            KLI.ID,  
            KLI.NAME,  
            KLI.CODE,  
            -SUM(OPR.SUMA),  
            (SELECT FIRST 1 COMMENTS.NOTE FROM COMMENTS INNER JOIN COMMENT_KLI_NODE 
            ON COMMENT_KLI_NODE.COMMENT_ID = COMMENTS.ID WHERE COMMENT_KLI_NODE.KLI_ID=KLI.ID 
            ORDER BY COMMENT_KLI_NODE.ID DESC) AS COMMENT, 
            FIRMI.NAME_FAK  
        FROM  
            OPR INNER JOIN KLI ON KLI.ID = OPR.KLI_ID  
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID  
        WHERE ' || :P_FILTER ||'  
            OPR.OPR_TIP = 30  
            AND OPR.OPR_DATE <= '''|| :P_DATE ||'''  
            AND KLI.ID > 0  
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)  
        GROUP BY 1,2,3,6' 
        INTO  
            :R_ID,:R_NAME,:R_CODE,:R_SUMA,:R_COMMENT,:R_NAME_FAK  
        DO  
            SUSPEND;  
END^


ALTER PROCEDURE GET_PAY_IN_DOST_SUMI (
    P_KLI_ID TYPE OF DOM_KEY,
    P_FLAG_DDS TYPE OF DOM_SMAL_INT,
    P_TO_DATE TYPE OF DOM_DATE_TIME,
    P_ADD_DOST_FNUMBER TYPE OF DOM_FLAG,
    P_FLAG_SUMI TYPE OF DOM_FLAG)
RETURNS (
    R_ID INTEGER,
    R_DATETIME DATE,
    R_PAY_TIP SMALLINT,
    R_SUMA_DOST DOUBLE PRECISION,
    R_SUMA_PAY DOUBLE PRECISION,
    R_PL_SUMA DOUBLE PRECISION,
    R_SUMA_OSTATAK DOUBLE PRECISION,
    R_OPR_TIP SMALLINT,
    R_DT TIMESTAMP,
    R_NUMBER VARCHAR(10),
    R_SUMA_ID INTEGER,
    R_FAK_DATE DATE,
    R_FAK_OPR_ID INTEGER,
    R_VAT_PERCENT DOUBLE PRECISION)
AS
declare variable L_FKT_SKLAD_ID smallint; 
declare variable L_KI_DOST_ID integer; 
declare variable L_TIP_CENI smallint; 
BEGIN 
    SELECT 
        SYSTEM.H_SKLAD 
    FROM 
        SYSTEM 
    INTO 
        :L_FKT_SKLAD_ID; 
 
    /*СУМИТЕ ОТ ДОСТАВКИ*/ 
    R_SUMA_PAY = NULL; 
    R_OPR_TIP = 1; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        CASE WHEN ROUND(SUMI.SUMA_OST, 2) = 0.00 THEN 3 ELSE 1 END, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        COALESCE(SUMI.VAT_PERCENT, 20.0) 
    FROM 
        OPR INNER JOIN "IN" ON (OPR.KLI_ID = :P_KLI_ID AND OPR.ID = "IN".OPR_ID) 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        "IN".PAY_TIP IN (1, 3) 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND ((NOT OPR.SKLAD_ID = :L_FKT_SKLAD_ID) OR (OPR.SKLAD_ID IS NULL)) 
        AND (OPR.OPR_DATE < :P_TO_DATE OR :P_TO_DATE IS NULL) 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID, :R_DATETIME, :R_DT, :R_PAY_TIP, :R_SUMA_ID, :R_SUMA_DOST, :R_SUMA_OSTATAK, :R_VAT_PERCENT 
    DO BEGIN 
        R_PL_SUMA = ROUND(R_SUMA_DOST - R_SUMA_OSTATAK, 2); 
        R_SUMA_OSTATAK = -R_SUMA_OSTATAK; 
 
 
        R_NUMBER   = NULL; 
        R_FAK_DATE = NULL; 
 
        IF (P_ADD_DOST_FNUMBER = 1) THEN 
        SELECT FIRST 1 
            FAK_IN.NUMBER, 
            OPR.OPR_DATE, 
            OPR.ID 
        FROM 
            FAK_IN INNER JOIN FAK_IN_EL_NODE ON FAK_IN_EL_NODE.FAK_IN_ID = FAK_IN.ID 
            INNER JOIN IN_EL ON IN_EL.ID = FAK_IN_EL_NODE.IN_EL_ID 
            INNER JOIN OPR ON OPR.ID = FAK_IN.OPR_ID 
        WHERE 
            IN_EL.OPR_ID = :R_ID 
            --FAK_IN_EL_NODE.IN_EL_ID IN (SELECT IN_EL.ID FROM IN_EL WHERE IN_EL.OPR_ID = :R_ID) 
            --OR FAK_IN_EL_NODE.IN_EL_ID IN (SELECT IN_EL.ID FROM IN_EL INNER JOIN DOST_NODE 
            --ON DOST_NODE.DOST_ID = :R_ID AND IN_EL.OPR_ID = DOST_NODE.RAZ_DOST_ID) 
        INTO 
            :R_NUMBER, :R_FAK_DATE, :R_FAK_OPR_ID; 
        SUSPEND; 
    END 
 
    /*ПЛАЩАНИЯТА НА ДОСТАВКИ*/ 
    R_NUMBER = NULL; 
    R_OPR_TIP = 7; 
    R_PAY_TIP = 0; 
    R_SUMA_DOST = NULL; 
    R_FAK_DATE  = NULL; 
    R_FAK_OPR_ID = NULL; 
 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        COALESCE(SUMI.VAT_PERCENT, 20.0) 
    FROM 
        OPR INNER JOIN PAYMENT ON (OPR.OPR_TIP = 7 AND OPR.KLI_ID = :P_KLI_ID AND OPR.ID = PAYMENT.OPR_ID ) 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (OPR.OPR_DATE < :P_TO_DATE  OR :P_TO_DATE IS NULL) 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID, :R_DATETIME, :R_DT, :R_SUMA_ID, :R_SUMA_PAY, :R_SUMA_OSTATAK, :R_VAT_PERCENT 
    DO BEGIN 
 
        R_PL_SUMA = ROUND(R_SUMA_PAY - R_SUMA_OSTATAK, 2); 
 
        SUSPEND; 
    END 
 
    /*АКО ТРЯБВА ДА СЕ ПОКАЗВАТ И СУМИТЕ ОТ ДДС НА ВХОДЯЩИТЕ ФАКТУРИ*/ 
    R_OPR_TIP   = 13; 
    R_SUMA_PAY  = NULL; 
    R_FAK_DATE  = NULL; 
    R_NUMBER    = NULL; 
    R_FAK_OPR_ID = NULL; 
 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        CASE WHEN ROUND(SUMI.SUMA_OST, 2) = 0.00 THEN 3 ELSE 1 END, 
        FAK_IN.NUMBER, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        COALESCE(SUMI.VAT_PERCENT, 20.0) 
    FROM 
        OPR INNER JOIN FAK_IN ON (OPR.ID = FAK_IN.OPR_ID AND OPR.KLI_ID = :P_KLI_ID AND OPR.OPR_TIP = 13) 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        FAK_IN.TIP = 0 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND FAK_IN.PAY_TIP_DDS IN (1,3,10) 
        --AND (SELECT FIRST 1 "IN".PAY_TIP FROM "IN" INNER JOIN IN_EL on IN_EL.OPR_ID = "IN".OPR_ID INNER JOIN fak_in_el_node on FAK_IN_EL_NODE.IN_EL_ID = IN_EL.ID AND FAK_IN_EL_NODE.FAK_IN_ID = fak_in.ID ) IN (1, 3) 
        AND (OPR.OPR_DATE < :P_TO_DATE OR :P_TO_DATE IS NULL) 
        AND ((SELECT FIRST 1 LOG.TIP_CENI FROM LOG_CENI_DDS LOG WHERE LOG.TIP_DDS = 0 AND 
        LOG.OPR_ID < OPR.ID ORDER BY LOG.OPR_ID DESC, LOG.ID DESC) = 0) 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
 
    ORDER BY 2,1 
    INTO 
        :R_ID, :R_DATETIME, :R_DT, :R_PAY_TIP, :R_NUMBER, :R_SUMA_ID, :R_SUMA_DOST, :R_SUMA_OSTATAK, :R_VAT_PERCENT 
    DO BEGIN 
        R_FAK_DATE = R_DATETIME; 
        R_FAK_OPR_ID = R_ID; 
        R_PL_SUMA = ROUND(R_SUMA_DOST - R_SUMA_OSTATAK, 2); 
        R_SUMA_OSTATAK = -R_SUMA_OSTATAK; 
        SUSPEND; 
    END 
 
    /*ЗАДЪЛЖЕНИЯ ПО ВРЪЩАНЕ НА СТОКА КЪМ ДОСТАВЧИКА*/ 
    R_NUMBER   = NULL; 
    R_OPR_TIP  = 27; 
    R_SUMA_PAY = NULL; 
    R_FAK_DATE = NULL; 
    R_FAK_OPR_ID = NULL; 
 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        CASE WHEN ROUND(SUMI.SUMA_OST, 2) = 0.00 THEN 3 ELSE 1 END, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        COALESCE(SUMI.VAT_PERCENT, 20.0) 
    FROM 
        OPR INNER JOIN RET_STOKA_DOST ON (OPR.KLI_ID = :P_KLI_ID AND OPR.ID = RET_STOKA_DOST.OPR_ID) 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        RET_STOKA_DOST.PAY_TIP IN (1,3) 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (OPR.OPR_DATE < :P_TO_DATE OR :P_TO_DATE IS NULL) 
        AND NOT OPR.SKLAD_ID = :L_FKT_SKLAD_ID 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID, :R_DATETIME, :R_DT, :R_PAY_TIP, :R_SUMA_ID, :R_SUMA_DOST, :R_SUMA_OSTATAK, :R_VAT_PERCENT 
    DO BEGIN 
        R_PL_SUMA = ROUND(R_SUMA_DOST - R_SUMA_OSTATAK, 2); 
        R_SUMA_DOST = -R_SUMA_DOST; 
 
        SUSPEND; 
    END 
 
    /*ПЛАЩАНИЯ НА ВРЪЩАНЕ КЪМ ДОСТАВЧИК ИЛИ ПО КИ*/ 
    R_NUMBER = NULL; 
    R_PAY_TIP = 0; 
    R_SUMA_DOST = NULL; 
    R_OPR_TIP = 30; 
    R_FAK_DATE = NULL; 
    R_FAK_OPR_ID = NULL; 
 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        COALESCE(SUMI.VAT_PERCENT, 20.0) 
    FROM 
        OPR INNER JOIN PAYMENT ON (OPR.KLI_ID = :P_KLI_ID AND OPR.OPR_TIP = 30 AND OPR.ID = PAYMENT.OPR_ID) 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID, :R_DATETIME, :R_DT, :R_SUMA_ID, :R_SUMA_PAY, :R_SUMA_OSTATAK, :R_VAT_PERCENT 
    DO BEGIN 
        R_PL_SUMA = ROUND(R_SUMA_PAY - R_SUMA_OSTATAK, 2); 
        R_SUMA_PAY = -R_SUMA_PAY; 
        R_SUMA_OSTATAK = -R_SUMA_OSTATAK; 
 
        SUSPEND; 
    END 
 
    /*ЗАДЪЛЖЕНИЯ ПО КР.ИЗ. КЪМ ДОСТАВЧИКА*/ 
    R_NUMBER   = NULL; 
    R_OPR_TIP  = 37; 
    R_SUMA_PAY = NULL; 
    R_FAK_DATE = NULL; 
    R_FAK_OPR_ID = NULL; 
 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        CASE WHEN ROUND(SUMI.SUMA_OST, 2) = 0.00 THEN 3 ELSE 1 END, 
        RET_STOKA_DOST_KI.ID, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        COALESCE(SUMI.VAT_PERCENT, 20.0) 
    FROM 
        OPR INNER JOIN RET_STOKA_DOST_KI ON (OPR.KLI_ID = :P_KLI_ID AND OPR.ID = RET_STOKA_DOST_KI.OPR_ID) 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        RET_STOKA_DOST_KI.PAY_TIP IN (1,3) 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (OPR.OPR_DATE < :P_TO_DATE OR :P_TO_DATE IS NULL) 
        AND NOT OPR.SKLAD_ID = :L_FKT_SKLAD_ID 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID, :R_DATETIME, :R_DT, :R_PAY_TIP, :L_KI_DOST_ID, :R_SUMA_ID, :R_SUMA_DOST, :R_SUMA_OSTATAK, :R_VAT_PERCENT 
    DO BEGIN 
        R_PL_SUMA = ROUND(R_SUMA_DOST - R_SUMA_OSTATAK, 2); 
        R_SUMA_DOST = -R_SUMA_DOST; 
 
        SELECT 
          FAK_IN.NUMBER, 
          OPR.OPR_DATE, 
          OPR.ID 
        FROM 
          RET_STOKA_DOST_KI INNER JOIN OPR ON OPR.ID = RET_STOKA_DOST_KI.OPR_ID AND OPR.OPR_TIP = 37 
          INNER JOIN FAK_IN ON FAK_IN.OPR_ID = OPR.ID 
        WHERE 
          RET_STOKA_DOST_KI.ID =:L_KI_DOST_ID 
        INTO :R_NUMBER, :R_FAK_DATE, :R_FAK_OPR_ID; 
 
 
        IF (EXISTS (SELECT RT.ID FROM RET_DOST_KI_DOST_NODE RT WHERE  RT.KI_DOST_ID = :L_KI_DOST_ID)) 
        THEN BEGIN 
        /*IF (P_FLAG_DDS = 1) THEN SUSPEND;*/ 
            SELECT FIRST 1 
                LOG.TIP_CENI 
            FROM 
                LOG_CENI_DDS LOG 
            WHERE 
                LOG.TIP_DDS = 0 
                AND LOG.OPR_ID < :R_ID 
            ORDER BY LOG.OPR_ID DESC, LOG.ID DESC 
            INTO 
                :L_TIP_CENI; 
            IF (L_TIP_CENI = 0) THEN 
                SUSPEND;/*КИ СВЪРЗАНО С ВРЪЩАНЕ НА СТОКА. КОГАТО Е БИЛО НАПРАВЕНО ЦЕНИТЕ СА БИЛИ БЕЗ ДДС*/ 
        END 
        ELSE 
            SUSPEND; 
    END 
 
    /*ЗАДЪЛЖЕНИЯ ПО КР.ИЗ. ЗА СУМА КЪМ ДОСТАВЧИКА*/ 
    R_NUMBER   = NULL; 
    R_OPR_TIP  = 50; 
    R_SUMA_PAY = NULL; 
    R_FAK_DATE = NULL; 
    R_FAK_OPR_ID = NULL; 
 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        IIF(ROUND(SUMI.SUMA_OST,2) = 0.00, 3, 1), 
        KI_DOST_SUMA.ID, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        COALESCE(SUMI.VAT_PERCENT, 20.0) 
    FROM 
        OPR INNER JOIN KI_DOST_SUMA ON (OPR.KLI_ID = :P_KLI_ID AND OPR.ID = KI_DOST_SUMA.KI_OPR_ID) 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        OPR.OPR_TIP = 50 
        AND KI_DOST_SUMA.PAY_TIP IN (1,3) 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (OPR.OPR_DATE < :P_TO_DATE OR :P_TO_DATE IS NULL) 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID, :R_DATETIME, :R_DT, :R_PAY_TIP, :L_KI_DOST_ID, :R_SUMA_ID, :R_SUMA_DOST, :R_SUMA_OSTATAK, :R_VAT_PERCENT 
    DO BEGIN 
        R_PL_SUMA = ROUND(R_SUMA_DOST - R_SUMA_OSTATAK, 2); 
        R_SUMA_DOST = -R_SUMA_DOST; 
 
        SELECT 
          FAK_IN.NUMBER, 
          OPR.OPR_DATE, 
          OPR.ID 
        FROM 
          FAK_IN INNER JOIN OPR ON OPR.ID = FAK_IN.OPR_ID 
        WHERE 
          FAK_IN.OPR_ID =:R_ID 
 
        INTO :R_NUMBER, :R_FAK_DATE, :R_FAK_OPR_ID; 
 
        SUSPEND; 
    END 
 
    /*ЗАДЪЛЖЕНИЯ ПО ДЕБ.ИЗ. ЗА СУМА КЪМ ДОСТАВЧИКА*/ 
    R_NUMBER   = NULL; 
    R_OPR_TIP  = 91; 
    R_SUMA_PAY = NULL; 
    R_FAK_DATE = NULL; 
    R_FAK_OPR_ID = NULL; 
 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        IIF(ROUND(SUMI.SUMA_OST,2) = 0.00, 3, 1), 
        KI_DOST_SUMA.ID, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        COALESCE(SUMI.VAT_PERCENT, 20.0) 
    FROM 
        OPR INNER JOIN KI_DOST_SUMA ON (OPR.KLI_ID = :P_KLI_ID AND OPR.ID = KI_DOST_SUMA.KI_OPR_ID) 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        OPR.OPR_TIP = 91 
        AND KI_DOST_SUMA.PAY_TIP IN (1,3) 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (OPR.OPR_DATE < :P_TO_DATE OR :P_TO_DATE IS NULL) 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID, :R_DATETIME, :R_DT, :R_PAY_TIP, :L_KI_DOST_ID, :R_SUMA_ID, :R_SUMA_DOST, :R_SUMA_OSTATAK, :R_VAT_PERCENT 
    DO BEGIN 
        R_PL_SUMA = ROUND(R_SUMA_DOST - R_SUMA_OSTATAK, 2); 
        R_SUMA_OSTATAK = -R_SUMA_OSTATAK; 
 
        SELECT 
          FAK_IN.NUMBER, 
          OPR.OPR_DATE, 
          OPR.ID 
        FROM 
          FAK_IN INNER JOIN OPR ON OPR.ID = FAK_IN.OPR_ID 
        WHERE 
          FAK_IN.OPR_ID =:R_ID 
 
        INTO :R_NUMBER, :R_FAK_DATE, :R_FAK_OPR_ID; 
 
        SUSPEND; 
    END 
 
    --ВЗЕТ АМБАЛАЖ ОТ ДОСТАВЧИК 
    R_NUMBER   = NULL; 
    R_OPR_TIP  = 55; 
    R_SUMA_PAY = NULL; 
    R_FAK_DATE = NULL; 
    R_FAK_OPR_ID = NULL; 
 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        CASE WHEN ROUND(SUMI.SUMA_OST, 2) = 0.00 THEN 3 ELSE 1 END, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        COALESCE(SUMI.VAT_PERCENT, 20.0) 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        OPR.OPR_TIP = 55 
        AND OPR.KLI_ID = :P_KLI_ID 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (OPR.OPR_DATE < :P_TO_DATE OR :P_TO_DATE IS NULL) 
        AND NOT OPR.SKLAD_ID = :L_FKT_SKLAD_ID 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID, :R_DATETIME, :R_DT, :R_PAY_TIP, :R_SUMA_ID, :R_SUMA_DOST, :R_SUMA_OSTATAK, :R_VAT_PERCENT 
    DO BEGIN 
        R_PL_SUMA = ROUND(R_SUMA_DOST - R_SUMA_OSTATAK, 2); 
        R_SUMA_OSTATAK = -R_SUMA_OSTATAK; 
 
        SUSPEND; 
    END 
 
    --ВЪРНАТ АМБАЛАЖ ОТ ДОСТАВЧИК 
    R_NUMBER   = NULL; 
    R_OPR_TIP  = 56; 
    R_SUMA_PAY = NULL; 
    R_FAK_DATE = NULL; 
    R_FAK_OPR_ID = NULL; 
 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        CASE WHEN ROUND(SUMI.SUMA_OST, 2) = 0.00 THEN 3 ELSE 1 END, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        COALESCE(SUMI.VAT_PERCENT , 20.0) 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        OPR.OPR_TIP = 56 
        AND OPR.KLI_ID = :P_KLI_ID 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (OPR.OPR_DATE < :P_TO_DATE OR :P_TO_DATE IS NULL) 
        AND NOT OPR.SKLAD_ID = :L_FKT_SKLAD_ID 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID, :R_DATETIME, :R_DT, :R_PAY_TIP, :R_SUMA_ID, :R_SUMA_DOST, :R_SUMA_OSTATAK, :R_VAT_PERCENT 
    DO BEGIN 
        R_PL_SUMA = ROUND(R_SUMA_DOST - R_SUMA_OSTATAK, 2); 
        R_SUMA_DOST = -R_SUMA_DOST; 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_PAY_OUT_MOBILE (
    P_KLI_ID TYPE OF DOM_KEY)
RETURNS (
    R_OPR_ID TYPE OF DOM_KEY,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_SUMA_OPR TYPE OF DOM_SUMA,
    R_SUMA_OSTATAK TYPE OF DOM_SUMA,
    R_OPR_TIP TYPE OF DOM_SMAL_INT,
    R_SUMA_ID TYPE OF DOM_KEY,
    R_SUMI_PADEJ TYPE OF DOM_DATE,
    R_OUT_ID TYPE OF DOM_KEY,
    R_INVOICE_NUMBER TYPE OF DOM_CHAR_10,
    R_INVOICE_DATE TYPE OF DOM_DATE,
    R_UNP TYPE OF DOM_UNP,
    R_VAT_PERCENT TYPE OF DOM_PERCENT)
AS
declare variable L_FKT_SKLAD_ID type of DOM_FLAG; 
BEGIN 
    SELECT 
        SYSTEM.H_SKLAD 
    FROM 
        SYSTEM 
    INTO 
        :L_FKT_SKLAD_ID; 
 
    --СУМИТЕ ЗА ПРОДАЖБИТЕ 
    R_OPR_TIP = 2; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        -SUMI.SUMA, 
        -SUMI.SUMA_OST, 
        COALESCE(SUMI.PADEJ, OPR_PADEJ.DATA_PADEJ), 
        OUT.ID, 
        FAK.NUMBER, 
        FAK.DATE_SDELKA, 
        UNP.UNP, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.KLI_ID = :P_KLI_ID AND OPR.OPR_TIP = :R_OPR_TIP 
        INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
        LEFT JOIN OPR_PADEJ ON OPR.ID = OPR_PADEJ.OPR_ID 
        LEFT JOIN FAK_PROD ON FAK_PROD.OPR_ID = OPR.ID 
        LEFT JOIN FAK ON FAK.ID = FAK_PROD.FAK_ID 
        LEFT JOIN UNP ON UNP.ID = OUT.UNP_ID 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID, :R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_SUMI_PADEJ, :R_OUT_ID, 
        :R_INVOICE_NUMBER, :R_INVOICE_DATE, :R_UNP, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
 
    R_INVOICE_DATE = NULL; 
    R_INVOICE_NUMBER = NULL; 
    R_UNP = NULL; 
    --СУМИТЕ ОТ ПЛАЩАНИЯ НА ПРОДАЖБИ 
    R_OPR_TIP = 6; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.KLI_ID = :P_KLI_ID AND OPR.OPR_TIP = :R_OPR_TIP 
 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID, :R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_SUMI_PADEJ, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
 
    R_OUT_ID = NULL; 
    --СУМИ ОТ ВРЪЩАНЕ НА СТОКА 
    R_OPR_TIP = 26; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.KLI_ID = :P_KLI_ID AND OPR.OPR_TIP = :R_OPR_TIP 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND OPR.SKLAD_ID <> :L_FKT_SKLAD_ID 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID, :R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_SUMI_PADEJ, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
 
    --ПЛАЩАНИЯ НА ВРЪЩАНЕ НА СТОКА 
    R_OPR_TIP = 29; 
    R_SUMI_PADEJ = NULL; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.KLI_ID = :P_KLI_ID AND OPR.OPR_TIP = :R_OPR_TIP 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID, :R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
 
    --ЗАДЪЛЖЕНИЯ ПО КР.ИЗ. OT КЛИЕНТ 
    R_OPR_TIP = 40; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.KLI_ID = :P_KLI_ID AND OPR.OPR_TIP = :R_OPR_TIP 
        INNER JOIN RET_STOKA_PROD_KI ON OPR.ID = RET_STOKA_PROD_KI.OPR_ID 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND NOT EXISTS (SELECT RPKI.ID FROM RET_PROD_RET_FAK_PROD_KI_NODE RPKI WHERE RPKI.OPR_RET_FAK_PROD_KI_ID = OPR.ID) 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID, :R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
 
    --СУМИ ОТ ДАДЕН АМБАЛАЖ 
    R_OPR_TIP = 57; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        -SUMI.SUMA, 
        -SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.KLI_ID = :P_KLI_ID AND OPR.OPR_TIP = :R_OPR_TIP 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID, :R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_SUMI_PADEJ, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
 
    --СУМИ ОТ ВЪРНАТ АМБАЛАЖ 
    R_OPR_TIP = 58; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.KLI_ID = :P_KLI_ID AND OPR.OPR_TIP = :R_OPR_TIP 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID,:R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_SUMI_PADEJ, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
 
    --СУМИ ОТ ВРЪЩАНЕ НА СУМИ ОТ ПЛАЩАНЕ 
    R_OPR_TIP = 83; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.KLI_ID = :P_KLI_ID AND OPR.OPR_TIP = :R_OPR_TIP 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID,:R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_SUMI_PADEJ, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_PAY_OUT_ONLY_FAKT (
    P_DATE DATE,
    P_FILTER VARCHAR(150),
    P_PADEJ DATE)
RETURNS (
    R_ID INTEGER,
    R_SUMA_DUE DOUBLE PRECISION,
    R_SUMA_PAY DOUBLE PRECISION,
    R_SUMA_SALDO DOUBLE PRECISION)
AS
declare variable L_OPR_ID integer; 
declare variable L_SUMA double precision; 
declare variable L_SUMA_OST double precision; 
declare variable L_FLAG_PADEJ smallint; 
BEGIN 
    IF (P_FILTER IS NULL ) THEN 
        P_FILTER = ''; 
 
    IF (P_PADEJ IS NULL) THEN BEGIN 
        P_PADEJ = '31.12.3333'; 
    END 
 
    IF (P_DATE IS NULL) THEN BEGIN 
        FOR EXECUTE STATEMENT 'SELECT 
            OPR.KLI_ID 
        FROM 
            OPR INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
            INNER JOIN FAK_PROD ON FAK_PROD.OPR_ID = OUT.OPR_ID 
        WHERE ' || :P_FILTER || ' 
            OPR.OPR_TIP = 2 
            AND OUT.ID > 0 
            AND OUT.PAY_TIP IN (1,3) 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1' 
        INTO 
            :R_ID 
        DO BEGIN 
            R_SUMA_DUE = 0.00; 
            R_SUMA_PAY = 0.00; 
            FOR EXECUTE STATEMENT 'SELECT 
                OPR.ID, 
                SUM(SUMI.SUMA), 
                SUM(SUMI.SUMA_OST) 
            FROM 
                OPR INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
                INNER JOIN FAK_PROD ON FAK_PROD.OPR_ID = OUT.OPR_ID 
                INNER JOIN SUMI ON SUMI.OPR_ID = FAK_PROD.OPR_ID 
            WHERE ' || :P_FILTER ||' 
                OPR.KLI_ID = ' || :R_ID || ' 
                AND OPR.OPR_TIP = 2 
                AND OUT.ID > 0 
                AND OUT.PAY_TIP IN (1,3) 
                AND SUMI.SUMA_OST > 0.00 
                AND COALESCE(SUMI.PADEJ,''01.01.1000'') <= ''' || :P_PADEJ || ''' 
            GROUP BY 1' 
            INTO 
                :L_OPR_ID,:L_SUMA,:L_SUMA_OST 
            DO BEGIN 
                R_SUMA_DUE = ROUNDD(R_SUMA_DUE + L_SUMA); 
                R_SUMA_PAY = ROUNDD(R_SUMA_PAY + ROUNDD(L_SUMA - L_SUMA_OST)); 
            END 
            R_SUMA_SALDO = ROUNDD(R_SUMA_DUE - R_SUMA_PAY); 
            IF (R_SUMA_SALDO <> 0.00) THEN 
                SUSPEND; 
 
        END 
    END 
    ELSE BEGIN 
 
        FOR EXECUTE STATEMENT 'SELECT 
            OPR.KLI_ID 
        FROM 
            OPR INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
            INNER JOIN FAK_PROD ON FAK_PROD.OPR_ID = OUT.OPR_ID 
        WHERE ' || :P_FILTER || ' 
            OPR.OPR_TIP = 2 
            AND OPR.OPR_DATE <= ''' || :P_DATE || ''' 
            AND OUT.ID > 0 
            AND OUT.PAY_TIP IN (1,3) 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1' 
        INTO 
            :R_ID 
        DO BEGIN 
            R_SUMA_DUE = 0.00; 
            R_SUMA_PAY = 0.00; 
 
            FOR EXECUTE STATEMENT 'SELECT 
                OPR.ID, 
                SUM(SUMI.SUMA), 
                SUM(SUMI.SUMA_OST) 
            FROM 
                OPR INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
                INNER JOIN FAK_PROD ON FAK_PROD.OPR_ID = OUT.OPR_ID 
                INNER JOIN SUMI ON SUMI.OPR_ID = FAK_PROD.OPR_ID 
            WHERE ' || :P_FILTER || ' 
                OPR.OPR_TIP = 2 
                AND OPR.OPR_DATE <= ''' || :P_DATE || ''' 
                AND OPR.KLI_ID = ' || :R_ID || ' 
                AND OPR.OPR_TIP = 2 
                AND OUT.ID > 0 
                AND OUT.PAY_TIP IN (1,3) 
                AND SUMI.SUMA_OST > 0.00 
                AND COALESCE(SUMI.PADEJ,''01.01.1000'') <= ''' || :P_PADEJ || ''' 
            GROUP BY 1' 
            INTO 
                :L_OPR_ID,:L_SUMA,:L_SUMA_OST 
            DO BEGIN 
                R_SUMA_DUE = ROUNDD(R_SUMA_DUE + L_SUMA); 
                R_SUMA_PAY = ROUNDD(R_SUMA_PAY + ROUNDD(L_SUMA - L_SUMA_OST)); 
            END 
            R_SUMA_SALDO = ROUNDD(R_SUMA_DUE - R_SUMA_PAY); 
            IF (R_SUMA_SALDO <> 0.00) THEN 
                SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_PAY_OUT_PROD_SUMI (
    P_KLI_ID TYPE OF DOM_KEY,
    P_TO_DATE TYPE OF DOM_DATE,
    P_TO_OPR_ID TYPE OF DOM_KEY,
    P_FLAG_SUMI TYPE OF DOM_FLAG)
RETURNS (
    R_ID TYPE OF DOM_KEY,
    R_DATETIME TYPE OF DOM_DATE,
    R_PAY_TIP TYPE OF DOM_SMAL_INT,
    R_SUMA_PROD TYPE OF DOM_SUMA,
    R_SUMA_PAY TYPE OF DOM_SUMA,
    R_PL_SUMA TYPE OF DOM_SUMA,
    R_SUMA_OSTATAK TYPE OF DOM_SUMA,
    R_NUMBER TYPE OF DOM_CHAR_10,
    R_DT TYPE OF DOM_DATE_TIME,
    R_OPR_TIP TYPE OF DOM_SMAL_INT,
    R_SUMA_ID TYPE OF DOM_KEY,
    R_SUMI_PADEJ TYPE OF DOM_DATE,
    R_FAK_DATA TYPE OF DOM_DATE,
    R_FLAG_BONUS TYPE OF DOM_SMAL_INT,
    R_FLAG_LICENZ TYPE OF DOM_SMAL_INT,
    R_VBROJ TYPE OF DOM_FLAG,
    R_SUMA_FAK TYPE OF DOM_SUMA,
    R_FAK_OPR_ID TYPE OF DOM_KEY,
    R_POR_NUM TYPE OF DOM_CHAR_30,
    R_UNP_ID TYPE OF DOM_INT64,
    R_UNP TYPE OF DOM_UNP,
    R_IS_BANK TYPE OF DOM_FLAG,
    R_FLAG_AVANS TYPE OF DOM_FLAG,
    R_SUMI_VAT_PERCENT TYPE OF DOM_SUMA)
AS
declare variable L_FKT_SKLAD_ID type of DOM_FLAG; 
declare variable L_RET_KI type of DOM_INT; 
BEGIN 
    SELECT 
        SYSTEM.H_SKLAD 
    FROM 
        SYSTEM 
    INTO 
        :L_FKT_SKLAD_ID; 
 
    /*СУМИТЕ ЗА ПРОДАЖБИТЕ*/ 
    R_SUMA_PAY = NULL; 
    R_OPR_TIP = 2; 
    R_FLAG_BONUS = 0; 
    R_IS_BANK = -1; 
    R_FLAG_AVANS = 0; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        CASE WHEN ROUNDD(SUMI.SUMA_OST) = 0.00 THEN 3 ELSE 1 END, 
        FAK.NUMBER, 
        OPR.DATETIME, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT, 
        FAK.PAY_TYPE, 
        FAK.TOTAL, 
        FAK.OPR_ID, 
        CASE WHEN (OUT.POR_NUM IS not NULL) THEN OUT.POR_NUM ELSE (SELECT POR.NOMER FROM POR INNER JOIN POR_OUT_NODE ON POR_OUT_NODE.POR_ID =POR.ID AND POR_OUT_NODE.OUT_ID = OUT.ID) END , 
        UNP.ID, 
        UNP.UNP 
    FROM 
        OPR INNER JOIN OUT ON (OPR.KLI_ID = :P_KLI_ID AND OPR.ID = OUT.OPR_ID) 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        LEFT JOIN UNP ON UNP.ID = OUT.UNP_ID 
        LEFT JOIN FAK_PROD ON FAK_PROD.OPR_ID = OPR.ID 
        LEFT JOIN FAK ON FAK.ID = FAK_PROD.FAK_ID 
    WHERE 
        OUT.PAY_TIP IN (1, 3) 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND ((NOT OPR.SKLAD_ID = :L_FKT_SKLAD_ID) OR (OPR.SKLAD_ID IS NULL)) 
        AND (OPR.OPR_DATE < :P_TO_DATE OR :P_TO_DATE IS NULL) 
        AND (OPR.ID <= :P_TO_OPR_ID OR :P_TO_OPR_ID IS NULL) 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID,:R_DATETIME,:R_PAY_TIP,:R_NUMBER,:R_DT,:R_SUMA_ID,:R_SUMA_PROD,:R_SUMA_OSTATAK,:R_SUMI_PADEJ,:R_SUMI_VAT_PERCENT,:R_VBROJ,:R_SUMA_FAK,:R_FAK_OPR_ID , :R_POR_NUM, 
        :R_UNP_ID, :R_UNP 
    DO BEGIN 
        --ПРОВЕРКА ДАЛИ В ПРОДАЖБАТА ИМА ПРОДУКТ, КОЙТО Е ВЪРЗАН С ЛИЦЕНЗИТЕ В CRM 
        R_FLAG_LICENZ = IIF(EXISTS( 
            SELECT 
                OUT_EL.ID 
            FROM 
                OUT_EL INNER JOIN CRM_ATON_PRODUKT CRM ON OUT_EL.OPR_ID = :R_ID AND OUT_EL.SIMPLE_ID = 
                CRM.SIMPLE_ID 
            ),1,0); 
 
        R_PL_SUMA = ROUNDD(R_SUMA_PROD - R_SUMA_OSTATAK); 
        R_SUMA_OSTATAK = -R_SUMA_OSTATAK; 
        IF (NOT R_NUMBER IS NULL) THEN 
            SELECT 
                OPR.OPR_DATE 
            FROM 
                OPR INNER JOIN FAK ON FAK.OPR_ID = OPR.ID 
                INNER JOIN FAK_PROD ON FAK_PROD.OPR_ID = :R_ID AND FAK_PROD.FAK_ID = FAK.ID 
            INTO 
                :R_FAK_DATA; 
        ELSE 
            R_FAK_DATA = NULL; 
 
        IF (:R_SUMI_PADEJ IS NULL) THEN 
            SELECT 
                OPR_PADEJ.DATA_PADEJ 
            FROM 
                OPR_PADEJ 
            WHERE 
                OPR_PADEJ.OPR_ID =:R_ID 
            INTO :R_SUMI_PADEJ; 
 
        SUSPEND; 
    END 
 
    /*СУМИТЕ ОТ ПЛАЩАНИЯ НА ПРОДАЖБИ*/ 
    R_FLAG_LICENZ = 0; 
    R_SUMA_PROD   = NULL; 
    R_PAY_TIP     = 0; 
    R_NUMBER      = NULL; 
    R_OPR_TIP     = 6; 
    R_VBROJ       = NULL; 
    R_SUMA_FAK    = NULL; 
    R_FAK_DATA    = NULL; 
    R_FAK_OPR_ID  = NULL; 
    R_POR_NUM     = NULL; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        PAYMENT.VAT_PERCENT, 
        PAYMENT.FLAG_BONUS, 
        UNP.ID, 
        UNP.UNP, 
        FAK.NUMBER, 
        FAK.PAY_TYPE, 
        FAK.TOTAL, 
        FAK.OPR_ID, 
        PAYMENT.IS_BANK, 
        PAYMENT.FLAG_AVANS 
    FROM 
        OPR INNER JOIN PAYMENT ON (OPR.KLI_ID = :P_KLI_ID AND OPR.OPR_TIP = 6 AND OPR.ID = PAYMENT.OPR_ID) 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        LEFT JOIN UNP ON UNP.ID = PAYMENT.UNP_ID 
        LEFT JOIN FAK ON PAYMENT.FAK_ID = FAK.ID 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (OPR.OPR_DATE < :P_TO_DATE  OR :P_TO_DATE IS NULL) 
        AND (OPR.ID <= :P_TO_OPR_ID OR :P_TO_OPR_ID IS NULL) 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID,:R_DATETIME,:R_DT,:R_SUMA_ID,:R_SUMA_PAY,:R_SUMA_OSTATAK ,:R_SUMI_PADEJ,:R_SUMI_VAT_PERCENT,:R_FLAG_BONUS, :R_UNP_ID, :R_UNP, :R_NUMBER, 
        :R_VBROJ, :R_SUMA_FAK, :R_FAK_OPR_ID, :R_IS_BANK, :R_FLAG_AVANS 
    DO BEGIN 
        R_PL_SUMA = ROUNDD(R_SUMA_PAY - R_SUMA_OSTATAK); 
 
        IF (NOT R_NUMBER IS NULL) THEN 
            SELECT 
                OPR.OPR_DATE 
            FROM 
                PAYMENT INNER JOIN FAK ON FAK.ID = PAYMENT.FAK_ID AND PAYMENT.OPR_ID = :R_ID 
                INNER JOIN OPR ON FAK.OPR_ID = OPR.ID 
            INTO 
                :R_FAK_DATA; 
        ELSE 
            R_FAK_DATA = NULL; 
 
        SUSPEND; 
    END 
 
    /*СУМИ ОТ ВРЪЩАНЕ НА СТОКА*/ 
    R_SUMA_PAY = NULL; 
    R_NUMBER = NULL; 
    R_OPR_TIP = 26; 
    R_FLAG_BONUS = 0; 
    R_IS_BANK = -1; 
    R_FLAG_AVANS = 0; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        CASE WHEN ROUNDD(SUMI.SUMA_OST) = 0.00 THEN 3 ELSE 1 END, 
        OPR.DATETIME, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN RET_STOKA_PROD ON (OPR.KLI_ID = :P_KLI_ID AND OPR.ID = RET_STOKA_PROD.OPR_ID) 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        RET_STOKA_PROD.PAY_TIP IN (1,3) 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (OPR.OPR_DATE < :P_TO_DATE OR :P_TO_DATE IS NULL) 
        AND (OPR.ID <= :P_TO_OPR_ID OR :P_TO_OPR_ID IS NULL) AND (NOT OPR.SKLAD_ID = :L_FKT_SKLAD_ID) 
    ORDER BY 2,1 
    INTO 
        :R_ID,:R_DATETIME,:R_PAY_TIP,:R_DT,:R_SUMA_ID,:R_SUMA_PROD,:R_SUMA_OSTATAK,:R_SUMI_PADEJ,:R_SUMI_VAT_PERCENT 
    DO BEGIN 
        L_RET_KI = NULL; 
        R_OPR_TIP = 26; 
        R_VBROJ       = NULL; 
        R_SUMA_FAK    = NULL; 
        R_FAK_DATA    = NULL; 
        R_FAK_OPR_ID  = NULL; 
        R_NUMBER      = NULL; 
 
        SELECT 
          RET_PROD_RET_FAK_PROD_KI_NODE.OPR_RET_FAK_PROD_KI_ID 
        FROM 
          RET_PROD_RET_FAK_PROD_KI_NODE 
        WHERE 
          RET_PROD_RET_FAK_PROD_KI_NODE.OPR_RET_PROD_ID = :R_ID 
        INTO 
          :L_RET_KI; 
 
        IF (L_RET_KI IS NOT NULL 
            OR EXISTS (SELECT KI_NODE.ID FROM KI_NODE WHERE KI_NODE.SUB_KI_OPR_ID = :R_ID)) THEN BEGIN 
 
            R_OPR_TIP = 40; 
            R_ID = COALESCE(L_RET_KI, R_ID); 
 
            SELECT 
                FAK.NUMBER, 
                FAK.PAY_TYPE, 
                FAK.TOTAL, 
                FAK.OPR_ID, 
                OPR.OPR_DATE 
            FROM 
                KI_NODE INNER JOIN FAK ON FAK.OPR_ID = KI_NODE.KI_OPR_ID AND KI_NODE.SUB_KI_OPR_ID = :R_ID 
                INNER JOIN OPR ON OPR.ID = FAK.OPR_ID 
            INTO 
                :R_NUMBER, :R_VBROJ, :R_SUMA_FAK, :R_FAK_OPR_ID, :R_FAK_DATA; 
        END 
 
        IF (:R_SUMI_PADEJ IS NULL) THEN 
            SELECT 
                OPR_PADEJ.DATA_PADEJ 
            FROM 
                OPR_PADEJ 
            WHERE 
                OPR_PADEJ.OPR_ID =:R_ID 
            INTO :R_SUMI_PADEJ; 
 
        R_PL_SUMA = ROUNDD(R_SUMA_PROD - R_SUMA_OSTATAK); 
        R_SUMA_PROD = -R_SUMA_PROD; 
        SUSPEND; 
    END 
 
    /*ПЛАЩАНИЯ НА ВРЪЩАНЕ НА СТОКА*/ 
    R_OPR_TIP = 29; 
    R_PAY_TIP = 0; 
    R_SUMA_PROD = NULL; 
    R_NUMBER = NULL; 
    R_VBROJ       = NULL; 
    R_SUMA_FAK    = NULL; 
    R_FAK_DATA    = NULL; 
    R_FAK_OPR_ID  = NULL; 
    R_IS_BANK = -1; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT, 
        PAYMENT.IS_BANK 
    FROM 
        OPR INNER JOIN PAYMENT ON (OPR.KLI_ID = :P_KLI_ID AND OPR.OPR_TIP = 29 AND OPR.ID = PAYMENT.OPR_ID) 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (OPR.ID <= :P_TO_OPR_ID OR :P_TO_OPR_ID IS NULL) 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID,:R_DATETIME,:R_DT,:R_SUMA_ID,:R_SUMA_PAY,:R_SUMA_OSTATAK,:R_SUMI_PADEJ,:R_SUMI_VAT_PERCENT, :R_IS_BANK 
    DO BEGIN 
 
        R_PL_SUMA = ROUNDD(R_SUMA_PAY - R_SUMA_OSTATAK); 
        R_SUMA_OSTATAK = -R_SUMA_OSTATAK; 
        R_SUMA_PAY = -R_SUMA_PAY; 
 
        SUSPEND; 
    END 
 
    /*ЗАДЪЛЖЕНИЯ ПО КР.ИЗ. OT КЛИЕНТ*/ 
    R_NUMBER = NULL; 
    R_OPR_TIP = 40; 
    R_SUMA_PAY = NULL; 
    R_VBROJ       = NULL; 
    R_SUMA_FAK    = NULL; 
    R_FAK_DATA    = NULL; 
    R_FAK_OPR_ID  = NULL; 
    R_IS_BANK = -1; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        CASE WHEN ROUNDD(SUMI.SUMA_OST) = 0.00 THEN 3 ELSE 1 END, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT, 
        FAK.NUMBER 
    FROM 
        OPR INNER JOIN RET_STOKA_PROD_KI ON (OPR.KLI_ID = :P_KLI_ID AND OPR.ID = RET_STOKA_PROD_KI.OPR_ID) 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        INNER JOIN FAK ON FAK.OPR_ID = OPR.ID 
    WHERE 
        RET_STOKA_PROD_KI.PAY_TIP IN (1,3) 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (OPR.OPR_DATE < :P_TO_DATE OR :P_TO_DATE IS NULL) 
        AND (OPR.ID <= :P_TO_OPR_ID OR :P_TO_OPR_ID IS NULL) 
        AND ((NOT OPR.SKLAD_ID =:L_FKT_SKLAD_ID) OR (OPR.SKLAD_ID IS NULL)) 
        AND NOT EXISTS (SELECT RPKI.ID FROM RET_PROD_RET_FAK_PROD_KI_NODE RPKI WHERE RPKI.OPR_RET_FAK_PROD_KI_ID = RET_STOKA_PROD_KI.OPR_ID) 
        AND NOT EXISTS (SELECT KI_PROD_SUMA_EL.ID FROM KI_PROD_SUMA_EL WHERE KI_PROD_SUMA_EL.SUMI_ID = SUMI.ID) 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID,:R_DATETIME,:R_DT,:R_PAY_TIP,:R_SUMA_ID,:R_SUMA_PROD,:R_SUMA_OSTATAK,:R_SUMI_PADEJ,:R_SUMI_VAT_PERCENT, :R_NUMBER 
    DO BEGIN 
        R_PL_SUMA = ROUNDD(R_SUMA_PROD - R_SUMA_OSTATAK); 
        R_SUMA_PROD = -R_SUMA_PROD; 
 
        IF (:R_SUMI_PADEJ IS NULL) THEN 
            SELECT 
                OPR_PADEJ.DATA_PADEJ 
            FROM 
                OPR_PADEJ 
            WHERE 
                OPR_PADEJ.OPR_ID =:R_ID 
            INTO :R_SUMI_PADEJ; 
 
        SUSPEND; 
    END 
 
    FOR WITH TMP_SUMI AS ( 
        SELECT DISTINCT 
            OPR.KLI_ID, 
            KS.SUMI_ID, 
            KS.OPR_ID 
        FROM 
            KI_PROD_SUMA_EL KS INNER JOIN OUT_EL ON OUT_EL.ID = KS.OUT_EL_ID 
            INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID INNER JOIN SUMI ON SUMI.ID = KS.SUMI_ID 
        WHERE 
            OPR.KLI_ID = :P_KLI_ID 
            AND KS.SUMI_ID > 0 
        ) 
    SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        CASE WHEN ROUNDD(SUMI.SUMA_OST) = 0.00 THEN 3 ELSE 1 END, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT, 
        FAK.NUMBER 
    FROM 
        OPR INNER JOIN TMP_SUMI ON TMP_SUMI.OPR_ID = OPR.ID 
        INNER JOIN SUMI ON SUMI.ID = TMP_SUMI.SUMI_ID 
        INNER JOIN FAK ON FAK.OPR_ID = OPR.ID 
        INNER JOIN RET_STOKA_PROD_KI ON RET_STOKA_PROD_KI.OPR_ID = OPR.ID 
    WHERE 
        RET_STOKA_PROD_KI.PAY_TIP IN (1,3) 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (OPR.OPR_DATE < :P_TO_DATE OR :P_TO_DATE IS NULL) 
        AND (OPR.ID <= :P_TO_OPR_ID OR :P_TO_OPR_ID IS NULL) 
        AND NOT EXISTS (SELECT RPKI.ID FROM RET_PROD_RET_FAK_PROD_KI_NODE RPKI WHERE RPKI.OPR_RET_FAK_PROD_KI_ID = RET_STOKA_PROD_KI.OPR_ID) 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID,:R_DATETIME,:R_DT,:R_PAY_TIP,:R_SUMA_ID,:R_SUMA_PROD,:R_SUMA_OSTATAK,:R_SUMI_PADEJ,:R_SUMI_VAT_PERCENT,:R_NUMBER 
    DO BEGIN 
        R_PL_SUMA = ROUNDD(R_SUMA_PROD - R_SUMA_OSTATAK); 
        R_SUMA_PROD = -R_SUMA_PROD; 
 
        IF (:R_SUMI_PADEJ IS NULL) THEN 
            SELECT 
                OPR_PADEJ.DATA_PADEJ 
            FROM 
                OPR_PADEJ 
            WHERE 
                OPR_PADEJ.OPR_ID =:R_ID 
            INTO :R_SUMI_PADEJ; 
 
        SUSPEND; 
    END 
 
 
    /*СУМИ ОТ ДАДЕН АМБАЛАЖ */ 
    R_SUMA_PAY = NULL; 
    R_NUMBER = NULL; 
    R_OPR_TIP = 57; 
    R_FLAG_BONUS = 0; 
    R_VBROJ       = NULL; 
    R_SUMA_FAK    = NULL; 
    R_FAK_DATA    = NULL; 
    R_FAK_OPR_ID  = NULL; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        CASE WHEN ROUNDD(SUMI.SUMA_OST) = 0.00 THEN 3 ELSE 1 END, 
        OPR.DATETIME, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST , 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        OPR.OPR_TIP = 57 
        AND OPR.KLI_ID = :P_KLI_ID 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (OPR.OPR_DATE < :P_TO_DATE OR :P_TO_DATE IS NULL) 
        AND (OPR.ID <= :P_TO_OPR_ID OR :P_TO_OPR_ID IS NULL) AND (NOT OPR.SKLAD_ID = :L_FKT_SKLAD_ID) 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID,:R_DATETIME,:R_PAY_TIP,:R_DT,:R_SUMA_ID,:R_SUMA_PROD,:R_SUMA_OSTATAK,:R_SUMI_PADEJ,:R_SUMI_VAT_PERCENT 
    DO BEGIN 
        R_PL_SUMA = ROUNDD(R_SUMA_PROD - R_SUMA_OSTATAK); 
        R_SUMA_OSTATAK = -R_SUMA_OSTATAK; 
 
        SUSPEND; 
    END 
 
    /*СУМИ ОТ ВЪРНАТ АМБАЛАЖ */ 
    R_SUMA_PAY = NULL; 
    R_NUMBER = NULL; 
    R_OPR_TIP = 58; 
    R_FLAG_BONUS = 0; 
    R_VBROJ       = NULL; 
    R_SUMA_FAK    = NULL; 
    R_FAK_DATA    = NULL; 
    R_FAK_OPR_ID  = NULL; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        CASE WHEN ROUNDD(SUMI.SUMA_OST) = 0.00 THEN 3 ELSE 1 END, 
        OPR.DATETIME, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        OPR.OPR_TIP = 58 
        AND OPR.KLI_ID = :P_KLI_ID 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (OPR.OPR_DATE < :P_TO_DATE OR :P_TO_DATE IS NULL) 
        AND (OPR.ID <= :P_TO_OPR_ID OR :P_TO_OPR_ID IS NULL) AND (NOT OPR.SKLAD_ID = :L_FKT_SKLAD_ID) 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID,:R_DATETIME,:R_PAY_TIP,:R_DT,:R_SUMA_ID,:R_SUMA_PROD,:R_SUMA_OSTATAK,:R_SUMI_PADEJ,:R_SUMI_VAT_PERCENT 
    DO BEGIN 
        R_PL_SUMA = ROUNDD(R_SUMA_PROD - R_SUMA_OSTATAK); 
        R_SUMA_PROD = -R_SUMA_PROD; 
 
        SUSPEND; 
    END 
 
    /*СУМИ ОТ ВРЪЩАНЕ НА СУМИ ОТ ПЛАЩАНЕ */ 
    R_SUMA_PAY = NULL; 
    R_NUMBER = NULL; 
    R_PAY_TIP = 0; 
    R_OPR_TIP = 83; 
    R_FLAG_BONUS = 0; 
    R_VBROJ       = NULL; 
    R_SUMA_FAK    = NULL; 
    R_FAK_DATA    = NULL; 
    R_SUMA_PROD = NULL; 
    R_IS_BANK = -1; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.DATETIME, 
        SUMI.ID, 
        -SUMI.SUMA, 
        -SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT, 
        FAK.NUMBER, 
        FAK.PAY_TYPE, 
        FAK.TOTAL, 
        FAK.OPR_ID 
    FROM 
        OPR INNER JOIN PAYMENT ON OPR.KLI_ID = :P_KLI_ID AND OPR.OPR_TIP = 83 AND OPR.ID = PAYMENT.OPR_ID 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        LEFT JOIN FAK ON FAK.ID = PAYMENT.FAK_ID 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (OPR.OPR_DATE < :P_TO_DATE OR :P_TO_DATE IS NULL) 
        AND (OPR.ID <= :P_TO_OPR_ID OR :P_TO_OPR_ID IS NULL) 
        AND IIF(SUMI.SUMA_OST <> 0.00,1,0) >= :P_FLAG_SUMI 
    ORDER BY 2,1 
    INTO 
        :R_ID,:R_DATETIME,:R_DT,:R_SUMA_ID,:R_SUMA_PAY,:R_SUMA_OSTATAK,:R_SUMI_PADEJ,:R_SUMI_VAT_PERCENT, :R_NUMBER, :R_VBROJ, :R_SUMA_FAK, :R_FAK_OPR_ID 
    DO BEGIN 
        R_PL_SUMA = ROUNDD(R_SUMA_PAY - R_SUMA_OSTATAK); 
        --R_SUMA_PROD = -R_SUMA_PROD; 
 
        IF (NOT R_NUMBER IS NULL) THEN 
            SELECT 
                OPR.OPR_DATE 
            FROM 
                PAYMENT INNER JOIN FAK ON FAK.ID = PAYMENT.FAK_ID AND PAYMENT.OPR_ID = :R_ID 
                INNER JOIN OPR ON FAK.OPR_ID = OPR.ID 
            INTO 
                :R_FAK_DATA; 
        ELSE 
            R_FAK_DATA = NULL; 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_PAY_OUT_SUMS
RETURNS (
    R_OPR_ID TYPE OF DOM_KEY,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_SUMA_OPR TYPE OF DOM_SUMA,
    R_SUMA_OSTATAK TYPE OF DOM_SUMA,
    R_OPR_TIP TYPE OF DOM_SMAL_INT,
    R_SUMA_ID TYPE OF DOM_KEY,
    R_SUMI_PADEJ TYPE OF DOM_DATE,
    R_OUT_ID TYPE OF DOM_KEY,
    R_INVOICE_NUMBER TYPE OF DOM_CHAR_10,
    R_INVOICE_DATE TYPE OF DOM_DATE,
    R_UNP TYPE OF DOM_UNP,
    R_VAT_PERCENT TYPE OF DOM_PERCENT)
AS
DECLARE VARIABLE L_FKT_SKLAD_ID TYPE OF DOM_FLAG;
BEGIN 
    SELECT 
        SYSTEM.H_SKLAD 
    FROM 
        SYSTEM 
    INTO 
        :L_FKT_SKLAD_ID; 
 
    --СУМИТЕ ЗА ПРОДАЖБИТЕ 
    R_OPR_TIP = 2; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        -SUMI.SUMA, 
        -SUMI.SUMA_OST, 
        COALESCE(SUMI.PADEJ, OPR_PADEJ.DATA_PADEJ), 
        OUT.ID, 
        FAK.NUMBER, 
        FAK.DATE_SDELKA, 
        UNP.UNP, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.OPR_TIP = :R_OPR_TIP
        INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
        LEFT JOIN OPR_PADEJ ON OPR.ID = OPR_PADEJ.OPR_ID 
        LEFT JOIN FAK_PROD ON FAK_PROD.OPR_ID = OPR.ID 
        LEFT JOIN FAK ON FAK.ID = FAK_PROD.FAK_ID 
        LEFT JOIN UNP ON UNP.ID = OUT.UNP_ID 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID, :R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_SUMI_PADEJ, :R_OUT_ID, 
        :R_INVOICE_NUMBER, :R_INVOICE_DATE, :R_UNP, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
 
    R_INVOICE_DATE = NULL; 
    R_INVOICE_NUMBER = NULL; 
    R_UNP = NULL; 
    --СУМИТЕ ОТ ПЛАЩАНИЯ НА ПРОДАЖБИ 
    R_OPR_TIP = 6; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.OPR_TIP = :R_OPR_TIP
 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID, :R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_SUMI_PADEJ, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
 
    R_OUT_ID = NULL; 
    --СУМИ ОТ ВРЪЩАНЕ НА СТОКА 
    R_OPR_TIP = 26; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.OPR_TIP = :R_OPR_TIP
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND OPR.SKLAD_ID <> :L_FKT_SKLAD_ID 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID, :R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_SUMI_PADEJ, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
 
    --ПЛАЩАНИЯ НА ВРЪЩАНЕ НА СТОКА 
    R_OPR_TIP = 29; 
    R_SUMI_PADEJ = NULL; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.OPR_TIP = :R_OPR_TIP
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID, :R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
 
    --ЗАДЪЛЖЕНИЯ ПО КР.ИЗ. OT КЛИЕНТ 
    R_OPR_TIP = 40; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.OPR_TIP = :R_OPR_TIP
        INNER JOIN RET_STOKA_PROD_KI ON OPR.ID = RET_STOKA_PROD_KI.OPR_ID 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND NOT EXISTS (SELECT RPKI.ID FROM RET_PROD_RET_FAK_PROD_KI_NODE RPKI WHERE RPKI.OPR_RET_FAK_PROD_KI_ID = OPR.ID) 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID, :R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
 
    --СУМИ ОТ ДАДЕН АМБАЛАЖ 
    R_OPR_TIP = 57; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        -SUMI.SUMA, 
        -SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.OPR_TIP = :R_OPR_TIP
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID, :R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_SUMI_PADEJ, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
 
    --СУМИ ОТ ВЪРНАТ АМБАЛАЖ 
    R_OPR_TIP = 58; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.OPR_TIP = :R_OPR_TIP
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID,:R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_SUMI_PADEJ, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
 
    --СУМИ ОТ ВРЪЩАНЕ НА СУМИ ОТ ПЛАЩАНЕ 
    R_OPR_TIP = 83; 
    FOR SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        SUMI.ID, 
        SUMI.SUMA, 
        SUMI.SUMA_OST, 
        SUMI.PADEJ, 
        SUMI.VAT_PERCENT 
    FROM 
        OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID AND OPR.OPR_TIP = :R_OPR_TIP
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND SUMI.SUMA_OST > 0.00 
    ORDER BY 2,1 
    INTO 
        :R_OPR_ID,:R_OPR_DATE, :R_SUMA_ID, :R_SUMA_OPR, :R_SUMA_OSTATAK, :R_SUMI_PADEJ, :R_VAT_PERCENT 
    DO BEGIN 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_PAY_PROD_AMB_DUE (
    P_DATE DATE,
    P_FILTER VARCHAR(150),
    P_PADEJ DATE)
RETURNS (
    R_ID INTEGER,
    R_SUMA DOUBLE PRECISION)
AS
DECLARE VARIABLE L_SUMA_OST DOUBLE PRECISION; 
BEGIN 
/*V.1*/ 
    IF (P_FILTER IS NULL) THEN 
        P_FILTER = ''; 
 
    IF (P_DATE IS NULL) THEN BEGIN 
        FOR EXECUTE STATEMENT 'SELECT 
            OPR.KLI_ID, 
            SUM(SUMI.SUMA), 
            SUM(SUMI.SUMA_OST) 
        FROM 
            OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE ' || :P_FILTER ||' 
            OPR.OPR_TIP = 57 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1' 
        INTO 
            :R_ID,:R_SUMA,:L_SUMA_OST 
        DO BEGIN 
            SUSPEND; 
        END 
    END 
    ELSE BEGIN 
        FOR EXECUTE STATEMENT 'SELECT 
            OPR.KLI_ID, 
            SUM(SUMI.SUMA), 
            SUM(SUMI.SUMA_OST) 
        FROM 
            OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE '|| :P_FILTER || ' 
            OPR.OPR_TIP = 57 
            AND OPR.OPR_DATE <= ''' || :P_DATE || ''' 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1' 
        INTO 
            :R_ID,:R_SUMA,:L_SUMA_OST 
        DO BEGIN 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_PAY_PROD_AMB_RET_DUE (
    P_DATE DATE,
    P_FILTER VARCHAR(150),
    P_PADEJ DATE)
RETURNS (
    R_ID INTEGER,
    R_SUMA DOUBLE PRECISION)
AS
DECLARE VARIABLE L_SUMA_OST DOUBLE PRECISION; 
BEGIN 
/*V.1*/ 
    IF (P_FILTER IS NULL) THEN 
        P_FILTER = ''; 
 
    IF (P_DATE IS NULL) THEN BEGIN 
        FOR EXECUTE STATEMENT 'SELECT 
            OPR.KLI_ID, 
            SUM(SUMI.SUMA), 
            SUM(SUMI.SUMA_OST) 
        FROM 
            OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE ' || :P_FILTER ||' 
            OPR.OPR_TIP = 58 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1' 
        INTO 
            :R_ID,:R_SUMA,:L_SUMA_OST 
        DO BEGIN 
            SUSPEND; 
        END 
    END 
    ELSE BEGIN 
        FOR EXECUTE STATEMENT 'SELECT 
            OPR.KLI_ID, 
            SUM(SUMI.SUMA), 
            SUM(SUMI.SUMA_OST) 
        FROM 
            OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE '|| :P_FILTER || ' 
            OPR.OPR_TIP = 58 
            AND OPR.OPR_DATE <= ''' || :P_DATE || ''' 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1' 
        INTO 
            :R_ID,:R_SUMA,:L_SUMA_OST 
        DO BEGIN 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_PAY_PROD_DUE (
    P_DATE DATE,
    P_FILTER VARCHAR(150),
    P_PADEJ DATE)
RETURNS (
    R_ID INTEGER,
    R_SUMA DOUBLE PRECISION)
AS
DECLARE VARIABLE L_FLAG_PADEJ SMALLINT; 
DECLARE VARIABLE L_SUMA_OST DOUBLE PRECISION; 
BEGIN 
/*V.3*/ 
    IF (P_FILTER IS NULL) THEN 
        P_FILTER = ''; 
 
    IF (P_PADEJ IS NULL) THEN BEGIN 
        P_PADEJ = '31.12.3333'; 
        L_FLAG_PADEJ = 0; 
    END 
    ELSE 
        L_FLAG_PADEJ = 1; 
 
    IF (P_DATE IS NULL) THEN BEGIN 
        FOR EXECUTE STATEMENT 'SELECT 
            OPR.KLI_ID, 
            SUM(SUMI.SUMA), 
            SUM(SUMI.SUMA_OST) 
        FROM 
            OPR INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE ' || :P_FILTER ||' 
            OPR.OPR_TIP = 2 
            AND OUT.ID > 0 
            AND OUT.PAY_TIP IN (1,3) 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND COALESCE(SUMI.PADEJ,''01.01.1000'') <= ''' || :P_PADEJ || ''' 
        GROUP BY 1' 
        INTO 
            :R_ID,:R_SUMA,:L_SUMA_OST 
        DO BEGIN 
            IF (L_FLAG_PADEJ = 0) THEN 
                SUSPEND; 
            ELSE IF (L_SUMA_OST > 0.00) THEN BEGIN 
                R_SUMA = L_SUMA_OST; 
                SUSPEND; 
            END 
        END 
    END 
    ELSE BEGIN 
        FOR EXECUTE STATEMENT 'SELECT 
            OPR.KLI_ID, 
            SUM(SUMI.SUMA), 
            SUM(SUMI.SUMA_OST) 
        FROM 
            OPR INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE '|| :P_FILTER || ' 
            OPR.OPR_TIP = 2 
            AND OPR.OPR_DATE <= ''' || :P_DATE || ''' 
            AND OUT.ID > 0 
            AND OUT.PAY_TIP IN (1,3) 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND COALESCE(SUMI.PADEJ,''01.01.1000'') <= ''' || :P_PADEJ || ''' 
        GROUP BY 1' 
        INTO 
            :R_ID,:R_SUMA,:L_SUMA_OST 
        DO BEGIN 
            IF (L_FLAG_PADEJ = 0) THEN 
                SUSPEND; 
            ELSE IF (L_SUMA_OST > 0.00) THEN BEGIN 
                R_SUMA = L_SUMA_OST; 
                SUSPEND; 
            END 
        END 
    END 
END^


ALTER PROCEDURE GET_PAY_PROD_PAY (
    P_DATE DATE,
    P_FILTER VARCHAR(150),
    P_PADEJ DATE)
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(15),
    R_SUMA DOUBLE PRECISION,
    R_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(100))
AS
DECLARE VARIABLE L_SUMA_OST DOUBLE PRECISION; 
BEGIN 
/*V.1*/ 
    IF (P_FILTER IS NULL) THEN 
        P_FILTER = ''; 
 
    IF (P_DATE IS NULL) THEN BEGIN 
        FOR EXECUTE STATEMENT 'SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            SUM(IIF(OPR_TIP = 6, SUMI.SUMA, -SUMI.SUMA)), 
            (SELECT FIRST 1 COMMENTS.NOTE FROM COMMENTS INNER JOIN COMMENT_KLI_NODE 
            ON COMMENT_KLI_NODE.COMMENT_ID = COMMENTS.ID WHERE COMMENT_KLI_NODE.KLI_ID=KLI.ID 
            ORDER BY COMMENT_KLI_NODE.ID DESC) AS COMMENT, 
            FIRMI.NAME_FAK, 
            SUM(IIF(OPR_TIP = 6, SUMI.SUMA_OST, -SUMI.SUMA_OST)) 
        FROM 
            OPR LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE ' || :P_FILTER || ' 
            OPR.OPR_TIP IN (6, 83) 
            AND KLI.ID <> 0 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1,2,3,6' 
        INTO 
            :R_ID,:R_NAME,:R_CODE,:R_SUMA,:R_COMMENT,:R_NAME_FAK,:L_SUMA_OST 
        DO BEGIN 
            IF (P_PADEJ IS NULL) THEN 
                SUSPEND; 
            ELSE IF (L_SUMA_OST > 0.00) THEN BEGIN 
                R_SUMA = L_SUMA_OST; 
                SUSPEND; 
            END 
        END 
    END 
    ELSE BEGIN 
        FOR EXECUTE STATEMENT 'SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            SUM(IIF(OPR_TIP = 6, SUMI.SUMA, -SUMI.SUMA)), 
            (SELECT FIRST 1 COMMENTS.NOTE FROM COMMENTS INNER JOIN COMMENT_KLI_NODE 
            ON COMMENT_KLI_NODE.COMMENT_ID = COMMENTS.ID WHERE COMMENT_KLI_NODE.KLI_ID=KLI.ID 
            ORDER BY COMMENT_KLI_NODE.ID DESC) AS COMMENT, 
            FIRMI.NAME_FAK, 
            SUM(IIF(OPR_TIP = 6, SUMI.SUMA_OST, -SUMI.SUMA_OST)) 
        FROM 
            OPR LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE ' || :P_FILTER ||' 
            OPR.OPR_TIP IN (6, 83) 
            AND OPR.OPR_DATE <= ''' || :P_DATE || ''' 
            AND KLI.ID <> 0 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1,2,3,6' 
        INTO 
            :R_ID,:R_NAME,:R_CODE,:R_SUMA,:R_COMMENT,:R_NAME_FAK,:L_SUMA_OST 
        DO BEGIN 
            IF (P_PADEJ IS NULL) THEN 
                SUSPEND; 
            ELSE IF (L_SUMA_OST > 0.00) THEN BEGIN 
                R_SUMA = L_SUMA_OST; 
                SUSPEND; 
            END 
        END 
    END 
END^


ALTER PROCEDURE GET_PAY_PROD_RET (
    P_DATE DATE,
    P_FILTER VARCHAR(150),
    P_PADEJ DATE)
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(15),
    R_SUMA DOUBLE PRECISION,
    R_NAME_FAK VARCHAR(100))
AS
DECLARE VARIABLE L_FLAG_PADEJ SMALLINT; 
DECLARE VARIABLE L_SUMA_OST DOUBLE PRECISION; 
DECLARE VARIABLE L_FAKT_SKLAD INTEGER; 
BEGIN 
/*V.3*/ 
    IF (P_FILTER IS NULL) THEN 
        P_FILTER = ''; 
 
    IF (P_PADEJ IS NULL) THEN BEGIN 
        P_PADEJ = '31.12.3333'; 
        L_FLAG_PADEJ = 0; 
    END 
    ELSE 
        L_FLAG_PADEJ = 1; 
 
    SELECT FIRST 1 SYSTEM.H_SKLAD FROM SYSTEM INTO :L_FAKT_SKLAD; 
 
    IF (P_DATE IS NULL) THEN 
        FOR EXECUTE STATEMENT 'WITH TMP_SUMI AS ( 
        SELECT DISTINCT 
            OPR.KLI_ID, 
            KS.SUMI_ID, 
            KS.OPR_ID 
        FROM 
            KI_PROD_SUMA_EL KS INNER JOIN OUT_EL ON OUT_EL.ID = KS.OUT_EL_ID 
            INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
        WHERE 
            '|| :P_FILTER || ' 
            KS.SUMI_ID > 0 
        ) 
        SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            SUM(SUMI.SUMA), 
            FIRMI.NAME_FAK, 
            SUM(SUMI.SUMA_OST) 
        FROM 
            OPR INNER JOIN RET_STOKA_PROD ON RET_STOKA_PROD.OPR_ID = OPR.ID 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE '|| :P_FILTER ||' 
            OPR.OPR_TIP = 26 
            AND RET_STOKA_PROD.PAY_TIP IN (1,3) 
            AND OPR.KLI_ID IS NOT NULL 
            AND ((NOT OPR.SKLAD_ID ='||:L_FAKT_SKLAD ||') OR (OPR.SKLAD_ID IS NULL)) 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND COALESCE(SUMI.PADEJ,''01.01.1000'') <= ''' || :P_PADEJ || ''' 
        GROUP BY 1,2,3,5 
        UNION ALL 
        SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            SUM(SUMI.SUMA), 
            FIRMI.NAME_FAK, 
            SUM(SUMI.SUMA_OST) 
        FROM 
            OPR INNER JOIN RET_STOKA_PROD_KI ON RET_STOKA_PROD_KI.OPR_ID = OPR.ID 
            INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE '|| :P_FILTER ||' 
            OPR.OPR_TIP IN (40, 79) 
            AND RET_STOKA_PROD_KI.PAY_TIP IN (1,3) 
            AND OPR.KLI_ID IS NOT NULL 
            AND ((NOT OPR.SKLAD_ID =' ||:L_FAKT_SKLAD || ') OR (OPR.SKLAD_ID IS NULL)) 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND NOT EXISTS (SELECT RPKI.ID FROM RET_PROD_RET_FAK_PROD_KI_NODE RPKI WHERE RPKI.OPR_RET_FAK_PROD_KI_ID = RET_STOKA_PROD_KI.OPR_ID) 
            AND NOT EXISTS (SELECT KI_PROD_SUMA_EL.ID FROM KI_PROD_SUMA_EL WHERE KI_PROD_SUMA_EL.SUMI_ID = SUMI.ID) 
            AND COALESCE(SUMI.PADEJ,''01.01.1000'') <= ''' || :P_PADEJ || ''' 
        GROUP BY 1,2,3,5 
        UNION ALL 
 
        SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            SUM(SUMI.SUMA), 
            FIRMI.NAME_FAK, 
            SUM(SUMI.SUMA_OST) 
        FROM 
            SUMI INNER JOIN TMP_SUMI ON TMP_SUMI.SUMI_ID = SUMI.ID 
            INNER JOIN KLI ON KLI.ID = TMP_SUMI.KLI_ID 
            INNER JOIN RET_STOKA_PROD_KI ON RET_STOKA_PROD_KI.OPR_ID = TMP_SUMI.OPR_ID 
            INNER JOIN  OPR ON OPR.ID = RET_STOKA_PROD_KI.OPR_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE 
            RET_STOKA_PROD_KI.PAY_TIP IN (1,3) 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND NOT EXISTS (SELECT RPKI.ID FROM RET_PROD_RET_FAK_PROD_KI_NODE RPKI WHERE RPKI.OPR_RET_FAK_PROD_KI_ID = RET_STOKA_PROD_KI.OPR_ID) 
            AND COALESCE(SUMI.PADEJ,''01.01.1000'') <= ''' || :P_PADEJ || ''' 
        GROUP BY 1,2,3,5' 
        INTO 
            :R_ID,:R_NAME,:R_CODE,:R_SUMA,:R_NAME_FAK,:L_SUMA_OST 
        DO BEGIN 
            IF (L_FLAG_PADEJ = 0) THEN 
                SUSPEND; 
            ELSE BEGIN 
                IF (L_SUMA_OST > 0.00) THEN BEGIN 
                    R_SUMA = L_SUMA_OST; 
                    SUSPEND; 
                END 
            END 
        END 
    ELSE 
        FOR EXECUTE STATEMENT 'WITH TMP_SUMI AS ( 
        SELECT DISTINCT 
            OPR.KLI_ID, 
            KS.SUMI_ID, 
            KS.OPR_ID 
        FROM 
            KI_PROD_SUMA_EL KS INNER JOIN OUT_EL ON OUT_EL.ID = KS.OUT_EL_ID 
            INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
        WHERE 
            '|| :P_FILTER || ' 
            KS.SUMI_ID > 0 
        ) 
        SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            SUM(SUMI.SUMA), 
            FIRMI.NAME_FAK, 
            SUM(SUMI.SUMA_OST) 
        FROM 
            OPR INNER JOIN RET_STOKA_PROD ON RET_STOKA_PROD.OPR_ID = OPR.ID 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE '|| :P_FILTER || ' 
            OPR.OPR_TIP = 26 
            AND RET_STOKA_PROD.PAY_TIP IN (1,3) 
            AND OPR.KLI_ID IS NOT NULL 
            AND ((NOT OPR.SKLAD_ID ='||:L_FAKT_SKLAD ||') OR (OPR.SKLAD_ID IS NULL)) 
            AND OPR.OPR_DATE <= '''||:P_DATE||''' 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND COALESCE(SUMI.PADEJ,''01.01.1000'') <= ''' || :P_PADEJ || ''' 
        GROUP BY 1,2,3,5 
        UNION ALL 
        SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            SUM(SUMI.SUMA), 
            FIRMI.NAME_FAK, 
            SUM(SUMI.SUMA_OST) 
        FROM 
            OPR INNER JOIN RET_STOKA_PROD_KI ON RET_STOKA_PROD_KI.OPR_ID = OPR.ID 
            INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE '|| :P_FILTER || ' 
            OPR.OPR_TIP IN (40, 79) 
            AND RET_STOKA_PROD_KI.PAY_TIP IN (1,3) 
            AND OPR.KLI_ID IS NOT NULL 
            AND ((NOT OPR.SKLAD_ID ='||:L_FAKT_SKLAD || ') OR (OPR.SKLAD_ID IS NULL)) 
            AND OPR.OPR_DATE <= '''||:P_DATE||''' 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND NOT EXISTS (SELECT RPKI.ID FROM RET_PROD_RET_FAK_PROD_KI_NODE RPKI WHERE RPKI.OPR_RET_FAK_PROD_KI_ID = RET_STOKA_PROD_KI.OPR_ID) 
            AND NOT EXISTS (SELECT KI_PROD_SUMA_EL.ID FROM KI_PROD_SUMA_EL WHERE KI_PROD_SUMA_EL.SUMI_ID = SUMI.ID) 
            AND COALESCE(SUMI.PADEJ,''01.01.1000'') <= ''' || :P_PADEJ || ''' 
        GROUP BY 1,2,3,5 
        UNION ALL 
 
        SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            SUM(SUMI.SUMA), 
            FIRMI.NAME_FAK, 
            SUM(SUMI.SUMA_OST) 
        FROM 
            SUMI INNER JOIN TMP_SUMI ON TMP_SUMI.SUMI_ID = SUMI.ID 
            INNER JOIN KLI ON KLI.ID = TMP_SUMI.KLI_ID 
            INNER JOIN RET_STOKA_PROD_KI ON RET_STOKA_PROD_KI.OPR_ID = TMP_SUMI.OPR_ID 
            INNER JOIN  OPR ON OPR.ID = RET_STOKA_PROD_KI.OPR_ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE 
            RET_STOKA_PROD_KI.PAY_TIP IN (1,3) 
            AND OPR.OPR_DATE <= '''||:P_DATE||''' 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND NOT EXISTS (SELECT RPKI.ID FROM RET_PROD_RET_FAK_PROD_KI_NODE RPKI WHERE RPKI.OPR_RET_FAK_PROD_KI_ID = RET_STOKA_PROD_KI.OPR_ID) 
            AND COALESCE(SUMI.PADEJ,''01.01.1000'') <= ''' || :P_PADEJ || ''' 
        GROUP BY 1,2,3,5' 
        INTO 
            :R_ID,:R_NAME,:R_CODE,:R_SUMA,:R_NAME_FAK,:L_SUMA_OST 
        DO BEGIN 
            IF (L_FLAG_PADEJ = 0) THEN 
                SUSPEND; 
            ELSE BEGIN 
                IF (L_SUMA_OST > 0.00) THEN BEGIN 
                    R_SUMA = L_SUMA_OST; 
                    SUSPEND; 
                END 
            END 
        END 
END^


ALTER PROCEDURE GET_PAY_PROD_RET_PAY (
    P_DATE DATE,
    P_FILTER VARCHAR(150),
    P_PADEJ DATE)
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_CODE VARCHAR(15),
    R_SUMA DOUBLE PRECISION,
    R_COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_NAME_FAK VARCHAR(100))
AS
declare variable L_SUMA_OST double precision; 
BEGIN 
/*V.2*/ 
    IF (P_FILTER IS NULL) THEN 
        P_FILTER = ''; 
 
    IF (P_DATE IS NULL) THEN 
        FOR EXECUTE STATEMENT 'SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            -SUM(SUMI.SUMA), 
            (SELECT FIRST 1 COMMENTS.NOTE FROM COMMENTS INNER JOIN COMMENT_KLI_NODE 
            ON COMMENT_KLI_NODE.COMMENT_ID = COMMENTS.ID WHERE COMMENT_KLI_NODE.KLI_ID=KLI.ID 
            ORDER BY COMMENT_KLI_NODE.ID DESC) AS COMMENT, 
            FIRMI.NAME_FAK, 
            -SUM(SUMI.SUMA_OST) 
        FROM 
            OPR INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE ' || :P_FILTER ||' 
            OPR.OPR_TIP IN (29) 
            AND KLI.ID <> 0 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1,2,3,6' 
        INTO 
            :R_ID,:R_NAME,:R_CODE,:R_SUMA,:R_COMMENT,:R_NAME_FAK,:L_SUMA_OST 
        DO BEGIN 
            IF (P_PADEJ IS NULL) THEN 
                SUSPEND; 
            ELSE BEGIN 
                IF (L_SUMA_OST > 0.00) THEN BEGIN 
                    R_SUMA = L_SUMA_OST; 
                    SUSPEND; 
                END 
 
            END 
        END 
    ELSE 
        FOR EXECUTE STATEMENT 'SELECT 
            KLI.ID, 
            KLI.NAME, 
            KLI.CODE, 
            -SUM(SUMI.SUMA), 
            (SELECT FIRST 1 COMMENTS.NOTE FROM COMMENTS INNER JOIN COMMENT_KLI_NODE 
            ON COMMENT_KLI_NODE.COMMENT_ID = COMMENTS.ID WHERE COMMENT_KLI_NODE.KLI_ID=KLI.ID 
            ORDER BY COMMENT_KLI_NODE.ID DESC) AS COMMENT, 
            FIRMI.NAME_FAK, 
            -SUM(SUMI.SUMA_OST) 
        FROM 
            OPR INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
        WHERE ' || :P_FILTER ||' 
            OPR.OPR_TIP IN (29) 
            AND OPR.OPR_DATE <= '''|| :P_DATE ||''' 
            AND KLI.ID <> 0 
            AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        GROUP BY 1,2,3,6' 
        INTO 
            :R_ID,:R_NAME,:R_CODE,:R_SUMA,:R_COMMENT,:R_NAME_FAK,:L_SUMA_OST 
        DO  BEGIN 
            IF (P_PADEJ IS NULL) THEN 
                SUSPEND; 
            ELSE BEGIN 
                IF (L_SUMA_OST > 0.00) THEN BEGIN 
                    R_SUMA = L_SUMA_OST; 
                    SUSPEND; 
                END 
 
            END 
        END 
 
END^


ALTER PROCEDURE GET_PAYMENT_BONDS_OPR_ID (
    P_OPR_ID INTEGER)
RETURNS (
    R_OPR_ID INTEGER)
AS
DECLARE VARIABLE L_SUMA_ID INTEGER; 
BEGIN 
    FOR SELECT 
        SUMI.ID 
    FROM 
        SUMI 
    WHERE 
        SUMI.OPR_ID  = :P_OPR_ID 
    INTO 
        :L_SUMA_ID 
    DO BEGIN 
        FOR SELECT 
            SUMI.OPR_ID 
        FROM 
            GET_PAYMENT_NODE_ID(:L_SUMA_ID) GPN INNER JOIN PAYMENT_NODE PN ON GPN.R_PAYMENT_NODE_ID = PN.ID 
            INNER JOIN OPR_PAYMENT_NODE OPN ON OPN.ID = PN.NODE_ID 
            INNER JOIN SUMI ON PN.OPR_ID = SUMI.ID 
        INTO 
            :R_OPR_ID 
        DO BEGIN 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_PAYMENT_NODE_ID (
    P_OPR_ID INTEGER)
RETURNS (
    R_PAYMENT_NODE_ID INTEGER)
AS
DECLARE VARIABLE L_NODE_ID INTEGER; 
BEGIN 
    FOR SELECT 
        PAYMENT_NODE.NODE_ID 
    FROM 
        PAYMENT_NODE 
    WHERE 
        OPR_ID = :P_OPR_ID 
    INTO 
        :L_NODE_ID 
    DO BEGIN 
        SELECT 
            PAYMENT_NODE.ID 
        FROM 
            PAYMENT_NODE 
        WHERE 
            PAYMENT_NODE.NODE_ID = :L_NODE_ID 
            AND NOT PAYMENT_NODE.OPR_ID = :P_OPR_ID 
        INTO 
            :R_PAYMENT_NODE_ID; 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_PN_FOR_POR (
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_PN TYPE OF DOM_CHAR_100)
AS
declare variable L_PN_COUNT integer; 
declare variable L_PN_RAND integer; 
BEGIN 
    R_PN = NULL; 
 
    SELECT FIRST 10 
        COUNT(DISTINCT SERIAL_NUM.SN) 
    FROM 
        PARTIDA_NAL PN INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID 
        AND PN.SIMPLE_ID = :P_SIMPLE_ID 
    WHERE 
        (IIF(PN.KOL > 0.00, PN.IN_EL_ID,NULL)) > 0 
    INTO :L_PN_COUNT; 
 
    IF (L_PN_COUNT > 0) THEN BEGIN 
        L_PN_RAND = CAST(RAND() * L_PN_COUNT + 0.5 AS INTEGER); 
 
        SELECT DISTINCT 
            SERIAL_NUM.SN 
        FROM 
            PARTIDA_NAL PN INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID 
            AND PN.SIMPLE_ID = :P_SIMPLE_ID 
        WHERE 
            (IIF(PN.KOL > 0.00, PN.IN_EL_ID, NULL)) > 0 
        ORDER BY PN.ID DESC 
        ROWS :L_PN_RAND TO :L_PN_RAND 
        INTO 
            :R_PN; 
    END 
END^


ALTER PROCEDURE GET_POR_2 (
    P_SORT_KEY TYPE OF DOM_INT,
    ID TYPE OF DOM_KEY)
RETURNS (
    CODE TYPE OF DOM_CHAR_50,
    NAME TYPE OF DOM_CHAR_100,
    CENA_ED TYPE OF DOM_CENA,
    KOL TYPE OF DOM_KOL,
    ME CHAR(2),
    NAME_RAZ TYPE OF DOM_CHAR_30,
    KOL_RAZ TYPE OF DOM_KOL,
    KOL_EL_RAZ TYPE OF DOM_KOL,
    SIM_ID_RAZ TYPE OF DOM_KEY,
    TOTAL TYPE OF DOM_SUMA,
    CENA_ED_RAZ TYPE OF DOM_CENA,
    BAR_CODE VARCHAR(13),
    GODNOST TYPE OF DOM_SMAL_INT,
    R_POR_EL_COMMENT TYPE OF DOM_CHAR_100,
    CODE2 TYPE OF DOM_CHAR_50,
    R_CENA_OS TYPE OF DOM_CENA,
    R_TO TYPE OF DOM_CENA,
    R_PN TYPE OF DOM_CHAR_100)
AS
declare variable L_SIMPLE_ID type of DOM_KEY; 
BEGIN 
    FOR SELECT 
        SIMPLE1.CODE, 
        SIMPLE1.NAME, 
        IIF(POR_EL.KOL = 0, NULL, ROUND(POR_EL.SUMA / POR_EL.KOL, 5)), 
        POR_EL.KOL, 
        ME.NAME, 
        RAZ_ELEMENT.NAME, 
        POR_EL_RAZ_NODE.KOL, 
        RAZFASOVKA.KOL, 
        SIMPLE2.ID SIM_ID_RAZ, 
        IIF(POR_EL.KOL = 0, NULL,  ROUND(ROUND(POR_EL.SUMA / POR_EL.KOL, 5) * COALESCE(POR_EL_RAZ_NODE.KOL, 1), 2)), 
        (SELECT FIRST 1 BAR."BARCODE" FROM BARCODE BAR WHERE BAR.SIMPLE_ID = SIMPLE1.ID), 
        SIMPLE1.GODNOST, 
        POR_EL_COMMENT.COMMENT, 
        SIMPLE1.CODE2, 
        SIMPLE1.ID 
    FROM 
        POR_EL INNER JOIN SIMPLE SIMPLE1 ON POR_EL.SIMPLE_ID = SIMPLE1.ID 
        INNER JOIN ME ON SIMPLE1.ME_ID = ME.ID 
        LEFT JOIN POR_EL_RAZ_NODE ON POR_EL_RAZ_NODE.POR_EL_ID = POR_EL.ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = POR_EL_RAZ_NODE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
        LEFT JOIN SIMPLE SIMPLE2 ON SIMPLE2.ID = RAZFASOVKA.SIMPLE_ID 
        LEFT JOIN POR_EL_COMMENT ON POR_EL_COMMENT.POR_EL_ID = POR_EL.ID 
    WHERE 
        POR_EL.OPR_ID = :ID 
    ORDER BY IIF(:P_SORT_KEY = 0, SIMPLE1.CODE, IIF(:P_SORT_KEY = 1, SIMPLE1.NAME, RAZ_ELEMENT.NAME)) 
    INTO 
        :CODE, :NAME, :CENA_ED, :KOL, :ME, :NAME_RAZ, :KOL_RAZ, :KOL_EL_RAZ, :SIM_ID_RAZ, :TOTAL, 
        :BAR_CODE, :GODNOST, :R_POR_EL_COMMENT, :CODE2, :L_SIMPLE_ID 
    DO BEGIN 
        EXECUTE PROCEDURE GET_CENA_DEF_CL(SIM_ID_RAZ) 
        RETURNING_VALUES(CENA_ED_RAZ); 
 
        EXECUTE PROCEDURE GET_CENA_CL_OS(:L_SIMPLE_ID) 
        RETURNING_VALUES(:R_CENA_OS); 
 
        R_TO = IIF(COALESCE(:R_CENA_OS, 0.00) = 0.00, NULL, 100 * (ROUND(:CENA_ED / :R_CENA_OS, 5) - 1)); 
 
        EXECUTE PROCEDURE GET_PN_FOR_POR(:L_SIMPLE_ID) 
        RETURNING_VALUES(:R_PN); 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_POR_AMBALAJ (
    KLI_ID INTEGER,
    OPR_ID INTEGER,
    P_CL_ID INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL DOUBLE PRECISION,
    R_KOL_TOTAL DOUBLE PRECISION,
    R_CENA_AMBALAJ DOUBLE PRECISION)
AS
DECLARE VARIABLE P_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_SIMPLE INTEGER; 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
BEGIN 
  for select 
  por_el.simple_id, 
  sum(por_el.kol) 
  from por_el 
       inner join por_el_raz_node on POR_EL_RAZ_NODE.POR_EL_ID = por_el.ID 
  where 
    por_el.opr_id = :opr_id 
  group by por_el.simple_id 
  INTO   :l_simple, 
         :p_kol 
 
  do begin 
    FOR SELECT 
        RAZ.KOL, 
        RAZ.SIMPLE_ID, 
        SM_R.NAME 
    FROM 
        SIMPLE SM 
        JOIN RAZFASOVKA RAZ ON RAZ.RAZ_TIP_ID = SM.RAZ_TIP_ID 
        JOIN RAZ_TIP ON RAZ_TIP.ID = SM.RAZ_TIP_ID 
        JOIN SIMPLE SM_R ON SM_R.ID = RAZ.SIMPLE_ID 
    WHERE 
        RAZ.SIMPLE_ID IS NOT NULL AND 
        RAZ_TIP.AMBALAJ = 1 AND 
        SM.ID = :l_simple 
    ORDER BY RAZ.KOL DESC 
    INTO :L_KOL, :R_SIMPLE_ID, :R_SIMPLE_NAME 
    DO BEGIN 
 
        SELECT 
            ambalaj.kol 
        FROM ambalaj 
        WHERE 
            ambalaj.simple_id = :r_simple_id AND 
            ambalaj.kli_id = :kli_id 
        INTO :r_kol_total; 
 
       EXECUTE PROCEDURE GET_CENA_CL(:P_CL_ID,:R_SIMPLE_ID) RETURNING_VALUES (:R_CENA_AMBALAJ); 
 
        R_KOL =ROUNDD(P_KOL/L_KOL); 
        IF (R_KOL > 0 ) THEN  SUSPEND; 
    END 
  end 
END^


ALTER PROCEDURE GET_POR_DETAIL (
    P_OPR_ID INTEGER)
RETURNS (
    SIM_ID INTEGER,
    CODE TYPE OF DOM_CHAR_50,
    CODE2 TYPE OF DOM_CHAR_50,
    NAME VARCHAR(100),
    NAME_SHORT VARCHAR(12),
    ME CHAR(2),
    NAME_RAZ VARCHAR(30),
    KOL_RAZ DOUBLE PRECISION,
    KOL DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    KOL_POR DOUBLE PRECISION,
    SUMA_POR DOUBLE PRECISION,
    POR_RAZLIKA DOUBLE PRECISION,
    SUMA_RAZ DOUBLE PRECISION,
    COMMENT VARCHAR(100),
    R_KOL_PROD DOUBLE PRECISION,
    R_SUMA_PROD DOUBLE PRECISION,
    R_KOL_RAZLIKA_PROD DOUBLE PRECISION,
    R_SUMA_RAZLIKA_PROD DOUBLE PRECISION,
    KOL_RZV DOUBLE PRECISION,
    R_SIMPLE_PROP VARCHAR(100))
AS
declare variable L_POR_ID integer; 
declare variable L_POR_EL_ID integer; 
declare variable L_SIMPLE_MAJOR_PROP varchar(30); 
declare variable L_SIMPLE_MINOR_PROP varchar(30); 
BEGIN 
  FOR 
    SELECT 
        simple.id as sim_id, 
        simple.code, 
        SIMPLE.code2, 
        SIMPLE.NAME, 
        SIMPLE.NAME_SHORT, 
        ME.NAME AS ME, 
        raz_element.name name_raz, 
        por_el_raz_node.kol as kol_raz, 
        POR_EL.KOL, 
        por_el.suma, 
        por_el.kol_por, 
        IIF(por_el.kol <> 0, por_el.kol_por*por_el.suma/por_el.kol, 0) suma_por, 
        coalesce(por_el.kol,0) - coalesce(por_el.kol_por,0) por_razlika, 
        (coalesce(por_el.kol,0) - coalesce(por_el.kol_por,0))*iif(por_el.kol <> 0, por_el.suma/por_el.kol, 0) suma_raz, 
        por_el_comment.comment, 
        por.id, 
        por_el.kol_rzv, 
        POR_EL.ID 
    FROM POR_EL 
    join por on por.opr_id = por_el.opr_id and POR_EL.OPR_ID = :p_opr_id 
    JOIN SIMPLE ON POR_EL.SIMPLE_ID = SIMPLE.ID 
    LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
    left join por_el_raz_node on por_el_raz_node.por_el_id = por_el.id 
    left join razfasovka on razfasovka.id = por_el_raz_node.razfasovka_id 
    left join raz_element on raz_element.id = razfasovka.raz_element_id 
    left join por_el_comment on por_el_comment.por_el_id = por_el.id 
    ORDER BY SIMPLE.NAME 
    INTO :SIM_ID,:CODE,:CODE2,:NAME,:NAME_SHORT,:ME,:NAME_RAZ,:KOL_RAZ,:KOL,:SUMA, 
         :KOL_POR,:SUMA_POR,:POR_RAZLIKA,:SUMA_RAZ,:COMMENT,:l_por_id,:kol_rzv, :L_POR_EL_ID 
  DO 
  BEGIN 
    r_kol_prod = 0; 
    r_suma_prod = 0; 
    r_kol_razlika_prod = 0; 
    r_suma_razlika_prod = 0; 
 
    select 
      Sum(coalesce(out_el.kol,0)), 
      Sum(coalesce(out_el.suma,0)) 
    from out 
    join out_el on out.opr_id = out_el.opr_id and out_el.simple_id = :sim_id 
    join por_out_node on por_out_node.out_id = out.id and por_out_node.por_id = :l_por_id 
    into :r_kol_prod,:r_suma_prod; 
    if (r_kol_prod > 0) then begin 
      r_kol_razlika_prod = r_kol_prod - kol; 
      r_suma_razlika_prod =  r_suma_prod - suma; 
    end 
    else begin 
      r_kol_prod = 0; 
      r_suma_prod = 0; 
      r_kol_razlika_prod = 0; 
      r_suma_razlika_prod = 0; 
    end 
 
    R_SIMPLE_PROP = ''; 
    L_SIMPLE_MAJOR_PROP = ''; 
    L_SIMPLE_MINOR_PROP = ''; 
    for SELECT 
        SIMPLE_PROP.NAME AS PROP_MAJOR, 
        SIMPLE_PROP_MINOR.NAME AS PROP_MINOR 
    FROM POR_PROP_NODE 
        INNER JOIN SIMPLE_PROP ON SIMPLE_PROP.ID = POR_PROP_NODE.MAJOR_PROP_ID 
        INNER JOIN SIMPLE_PROP_MINOR ON SIMPLE_PROP_MINOR.ID = POR_PROP_NODE.MINOR_PROP_ID 
    WHERE 
        POR_PROP_NODE.POR_EL_ID =:L_POR_EL_ID 
    INTO :L_SIMPLE_MAJOR_PROP, :L_SIMPLE_MINOR_PROP 
    DO 
    BEGIN 
       R_SIMPLE_PROP = R_SIMPLE_PROP || L_SIMPLE_MAJOR_PROP || ' - ' || L_SIMPLE_MINOR_PROP || ', '; 
    END 
    SUSPEND; 
  END 
END^


ALTER PROCEDURE GET_POR_EL (
    P_OPR_ID INTEGER)
RETURNS (
    R_KOL FLOAT,
    R_SIMPLE_ID INTEGER,
    R_CENA DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_RAZ_ID INTEGER,
    R_RAZ_EL_ID INTEGER,
    R_KOL_RAZ DOUBLE PRECISION)
AS
BEGIN 
  for select 
    por_el.simple_id, 
    por_el.kol, 
    round5(por_el.suma/por_el.kol), 
    por_el.suma, 
    razfasovka.raz_element_id, 
    razfasovka.raz_tip_id, 
    por_el_raz_node.kol kol_raz 
  from por_el 
  left join por_el_raz_node on por_el_raz_node.por_el_id = por_el.id 
  left join razfasovka on razfasovka.id = por_el_raz_node.razfasovka_id 
  where 
    por_el.opr_id = :p_opr_id 
  into :r_simple_id,:r_kol,:r_cena,:r_suma,:r_raz_el_id,:r_raz_id,:r_kol_raz 
  do 
  suspend; 
END^


ALTER PROCEDURE GET_POR_EL_P (
    P_OPR_ID_POR INTEGER)
RETURNS (
    ID INTEGER,
    SIMPLE_ID INTEGER,
    KOL DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    KOL_RAZ DOUBLE PRECISION,
    RAZFASOVKA_ID INTEGER,
    KOL_NAL DOUBLE PRECISION,
    CENA_DOST DOUBLE PRECISION,
    CENA_BASE DOUBLE PRECISION,
    KOL2 DOUBLE PRECISION,
    ME2_ID INTEGER)
AS
declare variable L_CENA_BASE double precision; 
BEGIN 
  FOR 
    SELECT 
        POR_EL.id, 
        POR_EL.SIMPLE_ID, 
        POR_EL.KOL, 
        POR_EL.KOL2, 
        POR_EL.suma, 
        por_el_raz_node.kol as kol_raz, 
        por_el_raz_node.razfasovka_id, 
        nal.kol_nal, 
        case when nal.kol_nal > 0 then nal.suma/nal.kol_nal else 0 end as cena_dost, 
        simple.cena_prod, 
        simple.ME2_ID 
    FROM 
        POR_EL 
        join opr on por_el.opr_id = opr.id and opr.id = :p_opr_id_por 
        JOIN SIMPLE ON SIMPLE.ID = POR_EL.SIMPLE_ID and SIMPLE.USLUGA <> '1' 
        left join por_el_raz_node on por_el_raz_node.por_el_id = por_el.id 
        left join nal on nal.simple_id = por_el.simple_id and nal.sklad_id = opr.sklad_id 
    WHERE 
     POR_EL.KOL > 0 
    INTO :ID, 
         :SIMPLE_ID, 
         :KOL, 
         :KOL2, 
         :SUMA, 
         :KOL_RAZ, 
         :RAZFASOVKA_ID, 
         :KOL_NAL, 
         :CENA_DOST, 
         :cena_base, 
         :ME2_ID 
  DO BEGIN 
    select 
      cenova_lista_el.cena 
    from cenova_lista_el 
    join cenova_lista on cenova_lista.opr_id = cenova_lista_el.opr_id and cenova_lista.def = 1 
    where 
      cenova_lista_el.simple_id = :simple_id 
    into :l_cena_base; 
 
    if (l_cena_base is not null) then cena_base = :l_cena_base; 
    SUSPEND; 
  END 
END^


ALTER PROCEDURE GET_POR_EL_PRODUCTION_OBOB (
    P_OPR_ID INTEGER)
RETURNS (
    R_SIMPLE_CODE DOM_CHAR_50,
    R_SIMPLE_NAME VARCHAR(100),
    R_ME_NAME CHAR(2),
    R_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_GR_NAME VARCHAR(50),
    R_ME2_NAME CHAR(2),
    R_CENA DOUBLE PRECISION)
AS
BEGIN 
   FOR SELECT 
        SIMPLE.CODE AS CODE, 
        SIMPLE.NAME AS NAME, 
        ME1.NAME AS ME, 
        POR_EL.KOL AS KOL, 
        CASE WHEN POR_EL.KOL <> 0 THEN POR_EL.SUMA/POR_EL.KOL ELSE 0 END AS CENA, 
        POR_EL.SUMA AS SUMA, 
        SELEKCIQ.NAME AS gr_name, 
        ME2.NAME AS ME2 
    FROM 
        POR_EL 
        INNER JOIN SIMPLE ON SIMPLE.ID = POR_EL.SIMPLE_ID 
        LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
    WHERE 
        POR_EL.OPR_ID =:P_OPR_ID 
        AND NOT EXISTS (SELECT POR_EL_PRODUCTION.POR_EL_ID FROM POR_EL_PRODUCTION WHERE POR_EL_PRODUCTION.POR_EL_ID = POR_EL.ID) 
 
UNION ALL 
 
    SELECT 
        SIMPLE.CODE AS CODE, 
        SIMPLE.NAME AS NAME, 
        ME1.NAME AS ME, 
        POR_EL_PRODUCTION.KOL AS KOL, 
        CAST(NULL AS DOUBLE PRECISION), 
        CAST(NULL AS DOUBLE PRECISION), 
        SELEKCIQ.NAME AS gr_name, 
        ME2.NAME AS ME2 
    FROM 
        POR_EL_PRODUCTION 
        INNER JOIN SIMPLE ON SIMPLE.ID = POR_EL_PRODUCTION.SIMPLE_ID 
        LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
        INNER JOIN POR_EL ON POR_EL.ID = POR_EL_PRODUCTION.POR_EL_ID 
    WHERE 
        POR_EL.OPR_ID =:P_OPR_ID 
 
    INTO :R_SIMPLE_CODE,:R_SIMPLE_NAME,:R_ME_NAME,:R_KOL,:R_CENA,:R_SUMA,:R_GR_NAME,:R_ME2_NAME 
 
    DO 
    SUSPEND; 
 
END^


ALTER PROCEDURE GET_POR_NEDOSTIG (
    P_SKLAD INTEGER,
    P_OPR_ID INTEGER,
    P_PROIZ INTEGER)
RETURNS (
    SIM_ID INTEGER,
    SIM_NAME VARCHAR(100),
    SIM_CODE DOM_CHAR_50,
    ME_ID SMALLINT,
    NAME_ME CHAR(2),
    KOL_NAL DOUBLE PRECISION,
    KOL DOUBLE PRECISION,
    KOL_MOVE DOUBLE PRECISION,
    PRODUCT INTEGER,
    MASTER INTEGER,
    TIP_PRODUKT INTEGER)
AS
declare variable L_SIM_ID integer; 
declare variable L_SIM_NAME varchar(100); 
declare variable L_SIM_CODE varchar(15); 
declare variable L_ME_ID smallint; 
declare variable L_NAME_ME char(2); 
declare variable L_KOL_NAL double precision; 
declare variable L_KOL double precision; 
declare variable L_KOL_MOVE double precision; 
declare variable L_PR_ID integer; 
declare variable L_STAT integer; 
BEGIN 
  l_sim_id = null; l_sim_name = null; l_sim_code = null; 
  l_me_id = null; l_name_me = null; 
  l_kol_nal = null; l_kol = null; l_kol_move = null; 
 
  for 
    select 
      pe.id, 
      pe.simple_id, 
      simple.name name_sim, 
      simple.code, 
      simple.me_id, 
      me.name name_me, 
      coalesce(nal.kol_nal,0) kol_nal, 
      pe.kol, 
      coalesce(pe.kol_muve, 0) kol_move, 
      (select first 1 por_el_id from por_el_production where por_el_id = pe.id) product 
    from por_el pe 
    join simple on simple.id = pe.simple_id 
    join por on por.opr_id = pe.opr_id 
    left join me on me.id = simple.me_id 
    left join nal on nal.sklad_id = :p_sklad and nal.simple_id = pe.simple_id 
    where 
      pe.flag_move = 1 and 
      pe.opr_id = :p_opr_id 
    INTO :l_pr_id,:sim_id,:sim_name,:sim_code,:me_id,:name_me,:kol_nal,:kol,:kol_move,:product 
  do 
  begin 
    tip_produkt = 0; 
    if ((:p_proiz = 1) and (:product > 0)) then begin 
      master = sim_id; 
      tip_produkt = 1; 
      execute procedure get_prop_produkt_por(:l_pr_id) returning_values :l_stat; 
      if (l_stat > 0) then tip_produkt = tip_produkt + 2; 
    end 
    else begin 
      master = 0; 
      execute procedure get_prop_produkt_por(:l_pr_id) returning_values :l_stat; 
      if (l_stat > 0) then tip_produkt = tip_produkt + 2; 
    end 
    suspend; 
    if ((:p_proiz = 1) and (:product > 0)) then begin 
      for select 
        por_el_production.simple_id, 
        por_el_production.kol, 
        simple.name name_sim, 
        simple.code, 
        me.name name_me, 
        nal.kol_nal, 
        por_el_production.kol 
      from por_el_production 
      join simple on simple.id = por_el_production.simple_id 
      left join me on me.id = simple.me_id 
      left join nal on nal.simple_id = por_el_production.simple_id and nal.sklad_id = :p_sklad 
      where por_el_id = :l_pr_id 
      into :sim_id,:kol,:sim_name,:sim_code,:name_me,:kol_nal,:kol 
      do begin 
        kol_move = null; sim_code = null; tip_produkt = -1; 
        suspend; 
      end 
    end 
  end 
END^


ALTER PROCEDURE GET_POR_OB (
    P_OPR_ID VARCHAR(3000))
RETURNS (
    ID INTEGER,
    OPR_ID INTEGER,
    STATUS SMALLINT,
    TIP_ZAQWKA SMALLINT,
    ZA_DATA DATE,
    SKLAD_ID INTEGER,
    NAME_SKLAD VARCHAR(20),
    STATUS_DATE TIMESTAMP,
    NOMER VARCHAR(30),
    AGENT_ID INTEGER,
    STOKOV_NOM VARCHAR(15),
    OTKADE SMALLINT,
    NAME_KLI VARCHAR(100),
    NAME_PLACE VARCHAR(30),
    TOTAL_OLD DOUBLE PRECISION,
    SUMA_POR DOUBLE PRECISION,
    ADDRESS VARCHAR(50),
    KLI_ID INTEGER,
    R_KOL_BRUTO TYPE OF DOM_KOL)
AS
BEGIN 
  FOR 
    SELECT 
      POR.ID, 
      POR.OPR_ID, 
      POR.STATUS, 
      POR.TIP_ZAQWKA, 
      POR.ZA_DATA, 
      POR.SKLAD_ID, 
      SKLAD.NAME NAME_SKLAD, 
      POR.STATUS_DATE, 
      POR.NOMER, 
      POR.AGENT_ID, 
      POR.STOKOV_NOM, 
      POR.OTKADE, 
      KLI.NAME NAME_KLI, 
      PLACE.NAME NAME_PLACE, 
      KLI.ID, 
      KLI.ADRES 
    FROM POR 
    JOIN OPR ON OPR.ID = POR.OPR_ID AND :P_OPR_ID LIKE '%,'||OPR.ID||',%' 
    JOIN SKLAD ON SKLAD.ID = POR.SKLAD_ID 
    JOIN KLI ON KLI.ID = OPR.KLI_ID 
    LEFT JOIN PLACE ON PLACE.ID = KLI.PLACE_ID 
    INTO :ID,:OPR_ID,:STATUS,:TIP_ZAQWKA,:ZA_DATA,:SKLAD_ID,:NAME_SKLAD, 
         :STATUS_DATE,:NOMER,:AGENT_ID,:STOKOV_NOM,:OTKADE,:NAME_KLI,:NAME_PLACE, 
         :KLI_ID,:ADDRESS 
  DO 
  BEGIN 
    SELECT 
        SUM(POR_EL.KOL_POR * SIMPLE.BRUTO), 
        SUM(SUMA) 
    FROM 
        POR_EL INNER JOIN SIMPLE ON SIMPLE.ID = POR_EL.SIMPLE_ID 
    WHERE 
        OPR_ID = :OPR_ID 
    INTO :R_KOL_BRUTO, :SUMA_POR; 
 
    SELECT 
      (SELECT 
        COALESCE(SUM(OPR.SUMA),0) 
      FROM 
        OPR 
      WHERE 
        OPR.OPR_TIP = 6 
        AND OPR.KLI_ID = :KLI_ID 
        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)) 
 
      - 
 
      (SELECT 
        COALESCE(SUM(OPR.SUMA),0) 
        FROM 
          OPR 
          LEFT JOIN OUT ON OUT.OPR_ID = OPR.ID 
        WHERE 
          OPR.OPR_TIP = 2 
          AND OPR.KLI_ID = :KLI_ID 
          AND OUT.PAY_TIP IN (1, 3) 
          AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)) 
 
      + 
 
      (SELECT 
        COALESCE(SUM(OPR.SUMA),0) 
      FROM 
        OPR LEFT JOIN RET_STOKA_PROD ON RET_STOKA_PROD.OPR_ID = OPR.ID 
      WHERE 
        OPR.OPR_TIP = 26 
        AND OPR.KLI_ID = :KLI_ID 
        AND RET_STOKA_PROD.PAY_TIP  IN (1,3) 
        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)) 
 
      - 
 
      (SELECT 
        COALESCE(SUM(OPR.SUMA),0) 
      FROM 
        OPR 
      WHERE 
        OPR.OPR_TIP = 29 
        AND OPR.KLI_ID = :KLI_ID 
        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)) 
 
      + 
 
      (SELECT 
        COALESCE(SUM(OPR.SUMA),0) 
      FROM 
        OPR 
        INNER JOIN RET_STOKA_PROD_KI ON RET_STOKA_PROD_KI.OPR_ID = OPR.ID 
      WHERE 
        OPR.OPR_TIP = 40 
        AND OPR.KLI_ID = :KLI_ID 
        AND RET_STOKA_PROD_KI.PAY_TIP IN (3) 
        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND (SELECT OPR1.SKLAD_ID FROM KI_NODE INNER JOIN OPR OPR1 ON OPR1.ID = KI_NODE.SUB_KI_OPR_ID WHERE KI_NODE.KI_OPR_ID = OPR.ID) NOT IN (SELECT H_SKLAD FROM SYSTEM)) AS SUMA_SALDO 
    FROM OPR 
    WHERE 
      OPR.ID = :OPR_ID 
    INTO :TOTAL_OLD; 
 
    SUSPEND; 
  END 
END^


ALTER PROCEDURE GET_POR_TOTAL (
    OPR_ID INTEGER)
RETURNS (
    SUMA_TOTAL DOUBLE PRECISION)
AS
declare variable l_kaparo double precision; 
BEGIN 
  SELECT 
    coalesce(sum(por_el.suma),0) SUMA_total 
  FROM 
    POR_EL 
  where 
    POR_EL.OPR_ID = :OPR_ID 
  INTO :SUMA_TOTAL; 
 
  select 
    opr.suma 
  from por 
  join opr on opr.id = por.opr_id_kaparo 
  where 
    por.opr_id = :OPR_ID 
  into :l_kaparo; 
 
  SUMA_TOTAL = coalesce(SUMA_TOTAL,0) - coalesce(l_kaparo,0); 
 
  SUSPEND; 
 
END^


ALTER PROCEDURE GET_POR_ZAIVKA (
    P_SKLAD INTEGER,
    P_PROIZV INTEGER,
    P_OPR_ID INTEGER)
RETURNS (
    SIM_ID INTEGER,
    KOL DOUBLE PRECISION,
    SKLAD_ID INTEGER,
    POR_EL_ID INTEGER)
AS
declare variable l_kol_nal double precision; 
declare variable l_product integer; 
BEGIN   
  FOR   
    SELECT    
      POR_EL.SIMPLE_ID,   
      POR_EL.KOL KOL,   
      coalesce(nal.kol_nal,0),  
      coalesce(:p_sklad,0),  
      (select first 1 por_el_id from por_el_production where por_el_id = POR_EL.id),  
      (select first 1 por_el_id from por_prop_node where por_el_id = POR_EL.id)  
    FROM POR_EL   
    JOIN POR ON POR.OPR_ID = POR_EL.OPR_ID and por.status in (2,3,4) and por.opr_id =:p_opr_id 
    left join nal on nal.sklad_id = :p_sklad and nal.simple_id = POR_EL.SIMPLE_ID   
    WHERE   
      NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = POR.OPR_ID)   
      and POR_EL.flag_move = 1   
      and POR_EL.kol > coalesce(POR_EL.kol_muve, 0)   
    INTO :sim_id,:kol,:l_kol_nal,:sklad_id,:l_product, :por_el_id 
  DO   
  begin  
    if ((:p_proizv = 1) and (:l_product > 0)) then begin 
      for select   
        por_el_production.simple_id,  
        por_el_production.kol,  
        coalesce(nal.kol_nal,0)  
      from por_el_production   
      left join nal on nal.sklad_id = :p_sklad and nal.simple_id = por_el_production.simple_id   
      where por_el_id = :l_product 
      into :sim_id,:kol,:l_kol_nal  
      do begin   
        por_el_id = null;  
        if (kol > l_kol_nal) then suspend;  
      end   
    end   
    else begin  
      if (kol > l_kol_nal) then suspend;  
      por_el_id = null;  
    end  
  end   
END^


ALTER PROCEDURE GET_PORS (
    P_STATUS TYPE OF DOM_SMAL_INT,
    P_DATE TYPE OF DOM_DATE,
    P_DATE_TYPE TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SKLAD_ID INTEGER,
    R_SKLAD_NAME VARCHAR(20),
    R_POR_ID INTEGER,
    R_OPR_ID INTEGER,
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_ZA_DATA DATE,
    R_TIP SMALLINT,
    R_NOM_POR VARCHAR(30),
    R_AGENT_NAME VARCHAR(100),
    R_STOKOV_NOM VARCHAR(15),
    R_USER_NAME VARCHAR(30),
    R_AGENT_ID INTEGER,
    R_FOR_DATE_TIME TYPE OF DOM_DATE_TIME,
    R_KLI_ADDRES TYPE OF DOM_CHAR_100,
    R_UNP_ID TYPE OF DOM_INT64,
    R_UNP TYPE OF DOM_UNP)
AS
declare variable L_SKLAD_ID type of DOM_KEY; 
declare variable L_DATE_FROM type of DOM_DATE; 
declare variable L_DATE_TO type of DOM_DATE; 
BEGIN 
    if (P_DATE IS NULL) then P_DATE = CURRENT_DATE; 
    L_DATE_FROM = DECODE(P_DATE_TYPE, 0, '01.01.2000', 1, P_DATE, P_DATE); 
    L_DATE_TO = DECODE(P_DATE_TYPE, 0, P_DATE, 1, P_DATE, '31.12.2100'); 
 
    FOR SELECT 
        SKLAD.ID, 
        SKLAD.NAME 
    FROM 
        SKLAD 
    WHERE 
        EXISTS (SELECT POR.ID FROM POR WHERE POR.SKLAD_ID = SKLAD.ID AND POR.STATUS = :P_STATUS 
        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = POR.OPR_ID)) 
    ORDER BY 2 
    INTO 
        :R_SKLAD_ID, :R_SKLAD_NAME 
    DO BEGIN 
        R_POR_ID = NULL; 
        R_ZA_DATA = NULL; 
        R_TIP = NULL; 
        R_OPR_ID = NULL; 
        R_KLI_NAME = NULL; 
        R_KLI_ID = NULL; 
        R_NOM_POR = NULL; 
        R_AGENT_NAME = NULL; 
        R_STOKOV_NOM = NULL; 
        R_AGENT_ID = NULL; 
        R_UNP_ID = NULL; 
        R_UNP = NULL; 
 
        SUSPEND; 
 
        L_SKLAD_ID = R_SKLAD_ID; 
 
        FOR SELECT 
                POR.ID, 
                POR.ZA_DATA, 
                POR.TIP_ZAQWKA, 
                POR.OPR_ID, 
                KLI1.NAME, 
                KLI1.ID, 
                POR.NOMER, 
                KLI2.NAME, 
                POR.STOKOV_NOM, 
                US.NAME, 
                POR.AGENT_ID, 
                POR.FOR_DATE_TIME, 
                KLI1.ADRES, 
                UNP.ID, 
                UNP.UNP 
            FROM 
                POR INNER JOIN OPR ON POR.OPR_ID = OPR.ID AND POR.STATUS = :P_STATUS AND POR.ZA_DATA BETWEEN 
:L_DATE_FROM AND :L_DATE_TO 
                INNER JOIN "USER" US ON US.ID = OPR.USER_ID 
                INNER JOIN KLI KLI1 ON OPR.KLI_ID = KLI1.ID 
                LEFT JOIN KLI KLI2 ON POR.AGENT_ID = KLI2.ID 
                LEFT JOIN UNP ON UNP.ID = POR.UNP_ID 
            WHERE 
                POR.SKLAD_ID =  :L_SKLAD_ID 
                AND NOT EXISTS(SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            ORDER BY 2,5 
            INTO :R_POR_ID,:R_ZA_DATA,:R_TIP,:R_OPR_ID,:R_KLI_NAME,:R_KLI_ID,:R_NOM_POR, 
                 :R_AGENT_NAME,:R_STOKOV_NOM, :R_USER_NAME, :R_AGENT_ID, :R_FOR_DATE_TIME, :R_KLI_ADDRES, 
:R_UNP_ID, :R_UNP 
            DO 
              SUSPEND; 
        END 
END^


ALTER PROCEDURE GET_PORS_1 (
    P_OPR_ID VARCHAR(3000),
    P_PROIZVODSTVO INTEGER)
RETURNS (
    SIMPLE_ID INTEGER,
    NAME VARCHAR(100),
    USLUGA CHAR(1),
    ME CHAR(2),
    NAME_RAZ VARCHAR(30),
    KOL_RAZ DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    KOL DOUBLE PRECISION,
    KOL_NAL DOUBLE PRECISION,
    KOL_POR DOUBLE PRECISION,
    PRODUCT INTEGER,
    R_MASTER INTEGER,
    KOL_RZV DOUBLE PRECISION,
    TIP_PRODUKT INTEGER,
    POR_EL_ID_PROP INTEGER,
    RAZ_ID INTEGER,
    R_NOTE VARCHAR(100),
    DDS FLOAT,
    ME2 VARCHAR(2),
    KOL2 FLOAT,
    R_PRICE TYPE OF DOM_CENA)
AS
declare variable L_POR_EL_ID integer; 
declare variable L_SIMPLE_ID integer; 
declare variable L_NAME varchar(100); 
declare variable L_USLUGA char(1); 
declare variable L_ME char(2); 
declare variable L_NAME_RAZ varchar(30); 
declare variable L_KOL_RAZ double precision; 
declare variable L_SUMA double precision; 
declare variable L_KOL double precision; 
declare variable L_KOL_NAL double precision; 
declare variable L_KOL_POR double precision; 
declare variable L_PRODUCT double precision; 
declare variable L_OPR_ID integer; 
declare variable LL_OPR_ID integer; 
declare variable L_KOL_RZV double precision; 
declare variable L_STAT integer; 
declare variable L_NOTE varchar(100); 
declare variable L_ME2 varchar(2); 
declare variable L_KOL2 float; 
declare variable L_PRICE type of DOM_CENA; 
BEGIN 
 
    L_SIMPLE_ID = NULL; L_NAME = NULL; L_USLUGA = NULL; L_ME = NULL; L_ME2 = NULL; L_NAME_RAZ = NULL; 
    L_KOL_RAZ = NULL; L_SUMA = NULL; L_KOL = NULL; L_KOL2 = NULL; L_KOL_NAL = NULL; L_KOL_POR = NULL; 
    L_PRODUCT = NULL; L_OPR_ID = -2; L_KOL_RZV = NULL; L_NOTE = NULL; 
 
    FOR 
      EXECUTE STATEMENT 'SELECT 
          POR_EL.ID, 
          SIMPLE.ID AS SIMPLE_ID, 
          SIMPLE.NAME, 
          SIMPLE.USLUGA, 
          SIMPLE.DDS, 
          ME1.NAME AS ME, 
          ME2.NAME AS ME2, 
          RAZ_ELEMENT.NAME NAME_RAZ, 
          POR_EL_RAZ_NODE.KOL AS KOL_RAZ, 
          POR_EL.SUMA, 
          POR_EL.KOL, 
          POR_EL.KOL2, 
          NAL.KOL_NAL, 
          POR_EL.KOL_POR, 
          (SELECT FIRST 1 POR_EL_ID FROM POR_EL_PRODUCTION WHERE POR_EL_ID = POR_EL.ID) PRODUCT, 
          POR.ID, 
          POR_EL.KOL_RZV, 
          RAZFASOVKA.ID RAZ_ID, 
          POR_EL_COMMENT.COMMENT AS NOTE, 
          POR_EL.PRICE 
      FROM 
          POR_EL 
          JOIN POR ON POR.OPR_ID = POR_EL.OPR_ID AND POR_EL.OPR_ID IN ('||:P_OPR_ID||') 
          JOIN SIMPLE ON POR_EL.SIMPLE_ID = SIMPLE.ID 
          LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
          LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME_ID 
          LEFT JOIN POR_EL_RAZ_NODE ON POR_EL_RAZ_NODE.POR_EL_ID = POR_EL.ID 
          LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = POR_EL_RAZ_NODE.RAZFASOVKA_ID 
          LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
          LEFT JOIN NAL ON NAL.SKLAD_ID = POR.SKLAD_ID AND NAL.SIMPLE_ID = SIMPLE.ID 
          LEFT JOIN POR_EL_COMMENT ON POR_EL_COMMENT.POR_EL_ID = POR_EL.ID 
      ORDER BY 1 ' 
      INTO :L_POR_EL_ID,:SIMPLE_ID,:NAME,:USLUGA,:DDS,:ME,:ME2,:NAME_RAZ,:KOL_RAZ,:SUMA,:KOL,:KOL2, 
           :KOL_NAL,:KOL_POR,:PRODUCT,:LL_OPR_ID,:KOL_RZV,:RAZ_ID,:R_NOTE, :R_PRICE 
      DO 
    BEGIN 
      L_STAT = 0; 
      TIP_PRODUKT = 0; 
      POR_EL_ID_PROP = 0; 
 
      IF (L_OPR_ID <> LL_OPR_ID) THEN BEGIN 
        L_OPR_ID = LL_OPR_ID; 
 
        L_SIMPLE_ID = :SIMPLE_ID; L_NAME = :NAME; L_USLUGA = :USLUGA; L_ME = :ME; L_ME2 = :ME2; L_NAME_RAZ = :NAME_RAZ; 
        L_KOL_RAZ = :KOL_RAZ; L_SUMA = :SUMA; L_KOL = :KOL; L_KOL2 = :KOL2; L_KOL_NAL = :KOL_NAL; L_KOL_POR = :KOL_POR; 
        L_PRODUCT = :PRODUCT; L_KOL_RZV = :KOL_RZV; L_NOTE = R_NOTE; l_price = :R_PRICE; 
 
        SIMPLE_ID = NULL; 
        NAME = 'ПОРЪЧКА ' || LL_OPR_ID; USLUGA = NULL; ME = NULL; ME2 = NULL; NAME_RAZ = NULL; 
        KOL_RAZ = NULL; SUMA = NULL; KOL = NULL; KOL2 = NULL; KOL_NAL = NULL; KOL_POR = NULL; PRODUCT = NULL; 
        R_MASTER = NULL; KOL_RZV = NULL; TIP_PRODUKT = -1; 
        R_NOTE = NULL; R_PRICE = NULL; 
 
        SUSPEND; 
        TIP_PRODUKT = 0; 
        SIMPLE_ID = :L_SIMPLE_ID; 
        NAME = :L_NAME; USLUGA = :L_USLUGA; ME = :L_ME; ME2 = :L_ME2; NAME_RAZ = :L_NAME_RAZ; 
        KOL_RAZ = :L_KOL_RAZ; SUMA = :L_SUMA; KOL = :L_KOL; KOL2 = :L_KOL2; KOL_NAL = :L_KOL_NAL; KOL_POR = :L_KOL_POR; 
        PRODUCT = :L_PRODUCT; R_MASTER = 0;  KOL_RZV = :L_KOL_RZV; 
        R_NOTE = L_NOTE; R_PRICE = L_PRICE; 
      END 
 
      IF ((:P_PROIZVODSTVO = 1) AND (:PRODUCT > 0)) THEN BEGIN 
        R_MASTER = SIMPLE_ID; 
        TIP_PRODUKT = 1; 
        EXECUTE PROCEDURE GET_PROP_PRODUKT_POR(:L_POR_EL_ID) RETURNING_VALUES :L_STAT; 
        IF (L_STAT > 0) THEN TIP_PRODUKT = TIP_PRODUKT + 2; 
      END 
      ELSE BEGIN 
        R_MASTER = 0; 
        EXECUTE PROCEDURE GET_PROP_PRODUKT_POR(:L_POR_EL_ID) RETURNING_VALUES :L_STAT; 
        IF (L_STAT > 0) THEN TIP_PRODUKT = TIP_PRODUKT + 2; 
        SELECT FIRST 1 POR_EL_ID FROM POR_PROP_NODE WHERE POR_EL_ID = :L_POR_EL_ID INTO :POR_EL_ID_PROP; 
      END 
 
      SUSPEND; 
 
      IF ((:P_PROIZVODSTVO = 1) AND (:PRODUCT > 0)) THEN BEGIN 
        FOR SELECT 
          POR_EL_PRODUCTION.SIMPLE_ID, 
          POR_EL_PRODUCTION.KOL, 
          SIMPLE.NAME NAME_SIM, 
          ME.NAME NAME_ME 
        FROM POR_EL_PRODUCTION 
        JOIN SIMPLE ON SIMPLE.ID = POR_EL_PRODUCTION.SIMPLE_ID 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
        WHERE POR_EL_ID = :L_POR_EL_ID 
        INTO :SIMPLE_ID,:KOL,:NAME,:ME 
        DO BEGIN 
          NAME_RAZ = NULL; KOL_RAZ = NULL; SUMA = NULL; KOL_NAL=NULL; KOL_POR=NULL;TIP_PRODUKT = -1; 
          R_MASTER = -1; POR_EL_ID_PROP = 0; 
          SUSPEND; 
        END 
      END 
    END 
  END^


ALTER PROCEDURE GET_PORS_AMBALAJ (
    P_OPR_ID VARCHAR(3000),
    P_CL_ID INTEGER)
RETURNS (
    ID INTEGER,
    KLI_ID INTEGER,
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL DOUBLE PRECISION,
    R_KOL_TOTAL DOUBLE PRECISION,
    R_CENA_AMBALAJ DOUBLE PRECISION)
AS
DECLARE VARIABLE L_FLAG INTEGER; 
BEGIN 
  FOR 
    select 
      opr.id, 
      opr.kli_id 
    from por 
    join opr on opr.id = por.opr_id and :p_OPR_ID like '%,'||opr.id||',%' 
    INTO :ID, 
         :KLI_ID 
  DO 
  BEGIN 
    l_flag = 0; 
    r_simple_id = null; 
    r_simple_name = null; 
    r_kol = null; 
    r_kol_total = null; 
    for 
      select 
      r_simple_id, 
      r_simple_name, 
      r_kol, 
      r_kol_total, 
      r_cena_ambalaj 
      from get_por_ambalaj(:kli_id,:id,:P_CL_ID) 
      into 
      :r_simple_id, 
      :r_simple_name, 
      :r_kol, 
      :r_kol_total, 
      :r_cena_ambalaj 
    do begin 
      l_flag = 1; 
      SUSPEND; 
     end 
   if (l_flag = 0) then 
    suspend; 
  END 
END^


ALTER PROCEDURE GET_PORS_POR (
    P_OPR_ID VARCHAR(3000))
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_NAME VARCHAR(100),
    R_USLUGA CHAR(1),
    R_ME CHAR(2),
    R_NAME_RAZ VARCHAR(30),
    R_KOL_RAZ DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_KOL DOUBLE PRECISION,
    R_KOL_NAL DOUBLE PRECISION,
    R_OPR_ID INTEGER,
    R_KOL_POR DOUBLE PRECISION,
    R_KOL_RZV DOUBLE PRECISION,
    R_CENA DOUBLE PRECISION,
    R_POR_EL_ID_PROP INTEGER,
    R_TIP_PRODUKT INTEGER,
    R_KOL2 DOUBLE PRECISION,
    R_ME2 CHAR(2))
AS
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
DECLARE VARIABLE L_NAME VARCHAR(100); 
DECLARE VARIABLE L_USLUGA CHAR(1); 
DECLARE VARIABLE L_ME CHAR(2); 
DECLARE VARIABLE L_NAME_RAZ VARCHAR(30); 
DECLARE VARIABLE L_KOL_RAZ DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_KOL_NAL DOUBLE PRECISION; 
DECLARE VARIABLE L_OPR_ID INTEGER; 
DECLARE VARIABLE L_POR_ID INTEGER; 
DECLARE VARIABLE L_KOL_POR DOUBLE PRECISION; 
DECLARE VARIABLE L_KOL_RZV DOUBLE PRECISION; 
DECLARE VARIABLE L_CENA DOUBLE PRECISION; 
DECLARE VARIABLE L_PRODUKT INTEGER; 
DECLARE VARIABLE L_POR_EL_ID INTEGER; 
DECLARE VARIABLE L_POR_EL_OPR_ID INTEGER; 
DECLARE VARIABLE L_TEXT VARCHAR(3000); 
DECLARE VARIABLE L_KOL2 DOUBLE PRECISION; 
DECLARE VARIABLE L_ME2 CHAR(2); 
BEGIN 
  L_SIMPLE_ID = 0; L_NAME = ''; L_USLUGA = ''; L_ME = ''; L_ME2 = NULL; L_NAME_RAZ = ''; 
  L_KOL_RAZ = 0; L_SUMA = 0; L_KOL = 0; L_KOL2 = NULL; L_KOL_NAL = 0; L_OPR_ID = 0; L_KOL_POR = 0; 
  L_KOL_RZV = 0; L_CENA = 0; 
 
  L_TEXT = SUBSTRING(:P_OPR_ID FROM 2 FOR (CHAR_LENGTH(:P_OPR_ID) - 2)); 
 
  FOR EXECUTE STATEMENT 'SELECT POR.OPR_ID FROM POR WHERE POR.OPR_ID IN (' ||:L_TEXT|| ')' INTO :L_POR_EL_OPR_ID 
  DO BEGIN 
    FOR SELECT 
        SIMPLE.ID AS SIMPLE_ID, 
        SIMPLE.NAME, 
        SIMPLE.USLUGA, 
        ME1.NAME AS ME, 
        ME2.NAME AS ME2, 
        RAZ_ELEMENT.NAME NAME_RAZ, 
        POR_EL_RAZ_NODE.KOL AS KOL_RAZ, 
        POR_EL.SUMA, 
        POR_EL.KOL, 
        POR_EL.KOL2, 
        NAL.KOL_NAL, 
        POR_EL.OPR_ID, 
        POR.ID, 
        POR_EL.KOL_MUVE, 
        POR_EL.KOL_RZV, 
        ROUND(POR_EL.SUMA/POR_EL.KOL, 5) CENA , 
        (SELECT FIRST 1 POR_EL_ID FROM POR_EL_PRODUCTION WHERE POR_EL_ID = POR_EL.ID) PRODUCT, 
        POR_EL.ID 
    FROM 
        POR_EL 
        INNER JOIN POR ON POR.OPR_ID = POR_EL.OPR_ID 
        INNER JOIN SIMPLE ON POR_EL.SIMPLE_ID = SIMPLE.ID 
        LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN POR_EL_RAZ_NODE ON POR_EL_RAZ_NODE.POR_EL_ID = POR_EL.ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = POR_EL_RAZ_NODE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
        LEFT JOIN NAL ON NAL.SKLAD_ID = POR.SKLAD_ID AND NAL.SIMPLE_ID = SIMPLE.ID 
    --WHERE POR.OPR_ID IN (:P_OPR_ID) 
    WHERE POR_EL.OPR_ID =:L_POR_EL_OPR_ID 
    INTO :R_SIMPLE_ID, :R_NAME,:R_USLUGA,:R_ME, R_ME2, :R_NAME_RAZ,:R_KOL_RAZ, :R_SUMA,:R_KOL,:R_KOL2, :R_KOL_NAL, 
         :R_OPR_ID,  :L_POR_ID, :R_KOL_POR,:R_KOL_RZV,:R_CENA,:L_PRODUKT,:L_POR_EL_ID 
  DO 
  BEGIN 
    IF (R_OPR_ID <> L_OPR_ID) THEN BEGIN 
      L_SIMPLE_ID = :R_SIMPLE_ID; L_NAME = :R_NAME; L_USLUGA = :R_USLUGA; L_ME = :R_ME; L_ME2 = :R_ME2; 
      L_NAME_RAZ = :R_NAME_RAZ; L_KOL_RAZ = :R_KOL_RAZ; L_SUMA = :R_SUMA; L_KOL = :R_KOL; L_KOL2 = :R_KOL2; 
      L_KOL_NAL = :R_KOL_NAL; L_OPR_ID = :R_OPR_ID; L_KOL_POR = :R_KOL_POR; 
      L_KOL_RZV = :R_KOL_RZV;L_CENA = :R_CENA; 
 
      R_SIMPLE_ID = 0; R_NAME = 'Поръчка ' || L_POR_ID; R_USLUGA = ''; R_ME = ''; R_ME2 = NULL; 
      R_NAME_RAZ = ''; R_KOL_RAZ = 0; R_SUMA = 0; R_KOL = 0; R_KOL2 = NULL; R_KOL_NAL = 0; 
      R_OPR_ID = :R_OPR_ID; R_KOL_POR = 0; R_KOL_RZV = 0; R_CENA = 0; 
      R_POR_EL_ID_PROP = 0; R_TIP_PRODUKT = -1; 
      SUSPEND; 
 
      R_SIMPLE_ID = L_SIMPLE_ID; R_NAME = L_NAME; R_USLUGA = L_USLUGA; R_ME = L_ME; R_ME2 = L_ME2; 
      R_NAME_RAZ = L_NAME_RAZ; R_KOL_RAZ = L_KOL_RAZ; R_SUMA = L_SUMA; R_KOL = L_KOL; R_KOL2 = L_KOL2; 
      R_KOL_NAL = L_KOL_NAL; R_OPR_ID = L_OPR_ID; R_KOL_POR = L_KOL_POR; 
      R_KOL_RZV = L_KOL_RZV; R_CENA = L_CENA; 
      R_POR_EL_ID_PROP = 0; 
    END 
      R_TIP_PRODUKT = 0; 
      R_POR_EL_ID_PROP = 0; 
      IF (L_PRODUKT > 0) THEN 
        R_TIP_PRODUKT = 1; 
      ELSE BEGIN 
        SELECT FIRST 1 POR_EL_ID FROM POR_PROP_NODE WHERE POR_EL_ID = :L_POR_EL_ID INTO :R_POR_EL_ID_PROP; 
        IF (R_POR_EL_ID_PROP > 0) THEN 
          R_TIP_PRODUKT = 2; 
      END 
    SUSPEND; 
    END 
    END 
END ;^


ALTER PROCEDURE GET_PORS_TOTAL (
    P_STATUS TYPE OF DOM_INT,
    P_DATE TYPE OF DOM_DATE,
    P_DATE_TYPE TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SKLAD_ID TYPE OF DOM_KEY,
    R_SKLAD_NAME TYPE OF DOM_CHAR_20,
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_KOL TYPE OF DOM_KOL,
    R_SUMA TYPE OF DOM_SUMA,
    R_KOL2 DOUBLE PRECISION)
AS
declare variable L_DATE_FROM type of DOM_DATE; 
declare variable L_DATE_TO type of DOM_DATE; 
BEGIN 
    IF (P_DATE IS NULL) THEN P_DATE = CURRENT_DATE; 
    L_DATE_FROM = DECODE(P_DATE_TYPE, 0, '01.01.2000', 1, P_DATE, P_DATE); 
    L_DATE_TO = DECODE(P_DATE_TYPE, 0, P_DATE, 1, P_DATE, '31.12.2100'); 
 
    /*V.3*/ 
    FOR SELECT 
        SKLAD.ID, 
        SKLAD.NAME 
    FROM 
        SKLAD 
    WHERE 
        EXISTS (SELECT POR.ID FROM POR WHERE POR.SKLAD_ID = SKLAD.ID AND POR.STATUS = :P_STATUS 
        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = POR.OPR_ID)) 
    ORDER BY 2 
    INTO 
        :R_SKLAD_ID,:R_SKLAD_NAME 
    DO BEGIN 
        R_SIMPLE_ID = NULL; 
        R_SIMPLE_NAME = NULL; 
        R_KOL = NULL; 
        R_KOL2 = NULL; 
        SUSPEND; 
 
        R_SKLAD_NAME = NULL; 
        FOR WITH TMP AS ( 
        SELECT 
            POR.OPR_ID 
        FROM 
            POR 
        WHERE 
            POR.STATUS = :P_STATUS AND POR.SKLAD_ID = :R_SKLAD_ID 
            AND POR.ZA_DATA BETWEEN :L_DATE_FROM AND :L_DATE_TO 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = POR.OPR_ID)), 
        TMP_EL AS ( 
        SELECT 
            POR_EL.SIMPLE_ID, 
            SUM(POR_EL.KOL) AS KOL, 
            SUM(POR_EL.KOL2) AS KOL2, 
            SUM(POR_EL.SUMA) AS SUMA 
        FROM 
            POR_EL INNER JOIN TMP ON TMP.OPR_ID = POR_EL.OPR_ID 
        GROUP BY 1) 
 
        SELECT 
            TMP_EL.SIMPLE_ID, 
            SIMPLE.NAME, 
            TMP_EL.KOL, 
            TMP_EL.KOL2, 
            TMP_EL.SUMA 
            FROM 
            SIMPLE INNER JOIN TMP_EL ON TMP_EL.SIMPLE_ID = SIMPLE.ID 
        ORDER BY 2 
        INTO 
            :R_SIMPLE_ID, :R_SIMPLE_NAME, :R_KOL, :R_KOL2, :R_SUMA 
        DO 
            SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_PROD_PN (
    P_OPR_ID TYPE OF DOM_KEY,
    P_TIP_PN TYPE OF DOM_KEY_SMALL)
RETURNS (
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_PN TYPE OF DOM_CHAR_30,
    R_SROK DOM_DATE)
AS
declare variable L_SIMPLE_ID type of DOM_KEY; 
declare variable L_OUT_EL_ID type of DOM_KEY; 
BEGIN 
    FOR SELECT 
        OUT_EL.SIMPLE_ID, 
        OUT_EL.ID 
    FROM 
        OUT_EL 
    WHERE 
        OUT_EL.OPR_ID = :P_OPR_ID 
 
    UNION 
 
    SELECT 
        OUT_EL.SIMPLE_ID, 
        OUT_EL.ID 
    FROM 
        OUT_EL INNER JOIN PROD_NODE ON PROD_NODE.OPR_SUB_PROD_ID = OUT_EL.OPR_ID 
    WHERE 
        PROD_NODE.OPR_PROD_ID = :P_OPR_ID 
 
    INTO :L_SIMPLE_ID, :L_OUT_EL_ID 
 
    DO BEGIN 
      r_pn = null; 
 
      FOR SELECT 
        SIMPLE.NAME, 
        COALESCE(PARTIDA_EL_PRINT.PARTIDA_N, SERIAL_NUM.SN), 
        COALESCE(PARTIDA_EL_PRINT.SROK, PARTIDA_EL.SROK) 
      FROM 
        OUT_EL 
        INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID AND SIMPLE.RSN = '2' 
        INNER JOIN PARTIDA_OUT_EL_NODE POEN ON POEN.OUT_EL_ID = OUT_EL.ID AND OUT_EL.ID = :L_OUT_EL_ID 
        INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = POEN.PARTIDA_NODE_ID 
        INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
        INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID 
        INNER JOIN PARTIDA_EL ON PARTIDA_EL.ID = PN.ELEMENT_ID 
        LEFT JOIN PARTIDA_EL_PRINT ON PARTIDA_EL_PRINT.OUT_EL_ID = OUT_EL.ID 
 
      INTO :R_SIMPLE_NAME, :R_PN, :R_SROK 
 
      DO BEGIN 
        if (COALESCE(:R_PN,'') <> '') then 
        SUSPEND; 
      END 
 
      IF ((COALESCE(:R_PN,'') = '') AND (:P_TIP_PN = 0)) THEN BEGIN 
        r_pn = null; 
 
        SELECT FIRST 1 
            SIMPLE.NAME, 
            SERIAL_NUM.SN, 
            PARTIDA_EL.SROK 
        FROM 
            PARTIDA_NAL PN INNER JOIN IN_EL ON IN_EL.ID = PN.IN_EL_ID AND IN_EL.SIMPLE_ID =:L_SIMPLE_ID 
            INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
            INNER JOIN PARTIDA_EL ON PARTIDA_EL.ID = SERIAL_NUM.PARTIDA_EL_ID 
 
        ORDER BY SERIAL_NUM.ID DESC 
 
        INTO R_SIMPLE_NAME, :R_PN, :R_SROK; 
 
        if (COALESCE(:R_PN,'') <> '') then 
        SUSPEND; 
      END 
    END 
END^


ALTER PROCEDURE GET_PROD_SUMI_FOR_FAK_NO_SN (
    P_NUMBER INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_IS_USLUGA SMALLINT)
RETURNS (
    R_SUMA_PROD DOUBLE PRECISION)
AS
DECLARE VARIABLE L_OUT_EL_ID INTEGER;
DECLARE VARIABLE L_OUT_EL_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_EL_SUMA_PROD DOUBLE PRECISION;
BEGIN
    R_SUMA_PROD = 0.00;

    FOR SELECT
        OUT_EL.ID, 
        OUT_EL.KOL,
        OUT_EL.SUMA
    FROM
        TEMP$PROD_TO_FAK INNER JOIN OPR ON (OPR.ID = TEMP$PROD_TO_FAK.PROD_ID
        AND TEMP$PROD_TO_FAK.NUMBER = :P_NUMBER AND OPR.OPR_TIP = 2)
        LEFT JOIN PROD_NODE ON PROD_NODE.OPR_PROD_ID = OPR.ID
        INNER JOIN OUT_EL ON (OUT_EL.SIMPLE_ID = :P_SIMPLE_ID
        AND (OUT_EL.OPR_ID = OPR.ID OR OUT_EL.OPR_ID = PROD_NODE.OPR_SUB_PROD_ID))
    ORDER BY 1
    INTO
        :L_OUT_EL_ID,:L_OUT_EL_KOL,:L_OUT_EL_SUMA_PROD
    DO BEGIN
        IF (P_IS_USLUGA = 1) THEN
            R_SUMA_PROD = ROUND(R_SUMA_PROD + L_OUT_EL_SUMA_PROD,2);
        ELSE BEGIN
            IF (P_KOL <= L_OUT_EL_KOL) THEN BEGIN
                R_SUMA_PROD = ROUND(R_SUMA_PROD + ROUND(P_KOL * ROUND(L_OUT_EL_SUMA_PROD / L_OUT_EL_KOL,5),2),2);
                EXIT;
            END
            ELSE BEGIN
                R_SUMA_PROD = ROUND(R_SUMA_PROD + L_OUT_EL_SUMA_PROD,2);
                P_KOL = ROUND(P_KOL - L_OUT_EL_KOL,5);
            END
        END
    END
END^


ALTER PROCEDURE GET_PROD_SUMI_FOR_FAK_SN (
    P_NUMBER INTEGER,
    P_SIMPLE_ID INTEGER,
    P_FLAG_SAME_SN SMALLINT)
RETURNS (
    R_SUMA_PROD DOUBLE PRECISION)
AS
DECLARE VARIABLE L_OUT_EL_ID INTEGER;
DECLARE VARIABLE L_OUT_EL_SUMA DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_EL_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PARTIDA_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_FAKT_SKLAD_ID INTEGER;
DECLARE VARIABLE L_NAL_KOL DOUBLE PRECISION;
BEGIN 
/* 
P_FLAG_SAME_SN 0 - ФАКТУРНИЯ СКЛАД РАБОТИ БЕЗ СЕРИЙНИ НОМЕРА И ЩЕ ТЪРСЯ ДАЛИ ОТ ПРОДУКТА ИМА 
ВСИЧКОТО НАЛИЧНО, БЕЗ ЗНАЧЕНИЕ ТОЧНИТЕ ПАРТИДИ 
1 - ТЪРСЯ ДАЛИ ПРОДАДЕНИТЕ СЕРИЙНИ НОМЕРА СА НАЛИЧНИ И ВЪВ ФАКТУРНИЯ СКЛАД 
*/ 
    R_SUMA_PROD = 0.00;
 
    SELECT 
        SYSTEM.H_SKLAD 
    FROM 
        SYSTEM 
    INTO 
        :L_FAKT_SKLAD_ID; 
 
    IF (P_FLAG_SAME_SN = 1) THEN BEGIN 
        FOR SELECT 
            OUT_EL.ID, 
            OUT_EL.SUMA, 
            OUT_EL.KOL, 
            SUM(PN_FAK.KOL)
        FROM 
            TEMP$PROD_TO_FAK INNER JOIN OPR OPR1 ON (TEMP$PROD_TO_FAK.NUMBER = :P_NUMBER AND OPR1.ID =TEMP$PROD_TO_FAK.PROD_ID 
            AND OPR1.OPR_TIP = 2) 
            LEFT JOIN PROD_NODE ON (PROD_NODE.OPR_PROD_ID = OPR1.ID) 
            INNER JOIN OUT_EL ON ((OUT_EL.OPR_ID = PROD_NODE.OPR_SUB_PROD_ID OR OUT_EL.OPR_ID = OPR1.ID) 
            AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID) 
            INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = OUT_EL.ID
            INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID
            INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID
            INNER JOIN PARTIDA_NAL PN_FAK ON PN.ELEMENT_ID = PN_FAK.ELEMENT_ID
            INNER JOIN IN_EL ON IN_EL.ID = PN_FAK.IN_EL_ID
            INNER JOIN OPR OPR2 ON OPR2.ID = IN_EL.OPR_ID AND OPR2.SKLAD_ID = :L_FAKT_SKLAD_ID 
        WHERE 
            NOT EXISTS ( 
                SELECT 
                    PARTIDA_NAL.ID 
                FROM 
                    PARTIDA_NAL INNER JOIN IN_EL ON 
                    (IN_EL.ID = PARTIDA_NAL.IN_EL_ID AND PARTIDA_NAL.ELEMENT_ID = PN.ELEMENT_ID) 
                    INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
                WHERE 
                    NOT OPR.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)
                    AND PARTIDA_NAL.KOL > 0.00)
        GROUP BY 1,2,3 
        INTO 
            :L_OUT_EL_ID,:L_OUT_EL_SUMA,:L_OUT_EL_KOL,:L_PARTIDA_KOL 
        DO BEGIN 
            IF (L_OUT_EL_KOL > L_PARTIDA_KOL) THEN BEGIN 
                R_SUMA_PROD = ROUND(R_SUMA_PROD + ROUND(L_PARTIDA_KOL * ROUND(L_OUT_EL_SUMA / L_OUT_EL_KOL,5),2),2);
            END 
            ELSE BEGIN 
                R_SUMA_PROD = ROUND(R_SUMA_PROD + L_OUT_EL_SUMA,2);
            END 
        END 
    END 
    ELSE BEGIN 
        SELECT 
            COALESCE(NAL.KOL_NAL,0.00) 
        FROM 
            NAL 
        WHERE 
            NAL.SIMPLE_ID = :P_SIMPLE_ID 
            AND NAL.SKLAD_ID = :L_FAKT_SKLAD_ID 
        INTO 
            :L_NAL_KOL; 
 
        FOR SELECT 
            OUT_EL.SUMA, 
            OUT_EL.KOL 
        FROM 
            TEMP$PROD_TO_FAK INNER JOIN OPR OPR1 ON (TEMP$PROD_TO_FAK.NUMBER = :P_NUMBER AND OPR1.ID =TEMP$PROD_TO_FAK.PROD_ID 
            AND OPR1.OPR_TIP = 2) 
            LEFT JOIN PROD_NODE ON (PROD_NODE.OPR_PROD_ID = OPR1.ID) 
            INNER JOIN OUT_EL ON ((OUT_EL.OPR_ID = PROD_NODE.OPR_SUB_PROD_ID OR OUT_EL.OPR_ID = OPR1.ID) 
            AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID) 
        INTO 
            :L_OUT_EL_SUMA,:L_OUT_EL_KOL 
        DO BEGIN 
            IF (L_NAL_KOL > 0.00) THEN BEGIN 
                IF (L_NAL_KOL > L_OUT_EL_KOL) THEN BEGIN 
                    R_SUMA_PROD = ROUND(R_SUMA_PROD + L_OUT_EL_SUMA,2);
                    L_NAL_KOL = ROUND(L_NAL_KOL - L_OUT_EL_KOL,5);
                END 
                ELSE BEGIN 
                    R_SUMA_PROD = ROUND(R_SUMA_PROD + ROUND(L_NAL_KOL * ROUND(L_OUT_EL_SUMA / L_OUT_EL_KOL,5),2),2);
                    L_NAL_KOL = 0.00; 
                END 
            END 
        END 
    END
END^


ALTER PROCEDURE GET_PRODAJBA (
    ID INTEGER,
    P_TIP INTEGER,
    P_TIP_PN TYPE OF DOM_KEY_SMALL,
    P_BONUS_TEXT TYPE OF DOM_CHAR_30)
RETURNS (
    R_PROCENT_NAD_OS DOUBLE PRECISION,
    CODE DOM_CHAR_50,
    NAME VARCHAR(115),
    CENA_PROD DOUBLE PRECISION,
    KOL DOUBLE PRECISION,
    CENA DOUBLE PRECISION,
    ME CHAR(2),
    R_PROCENT_NAD_CL DOUBLE PRECISION,
    KOL_RAZ DOUBLE PRECISION,
    NAME_RAZ VARCHAR(30),
    KLI_KOD VARCHAR(15),
    KOL_NA_RAZ DOUBLE PRECISION,
    KOL_POR DOUBLE PRECISION,
    NOM_DOK VARCHAR(3000),
    ME2 CHAR(2),
    KOL2 DOUBLE PRECISION,
    ME_LONG VARCHAR(15),
    BAR_CODE VARCHAR(13),
    CODE2 TYPE OF DOM_CHAR_50,
    CENA_OS DOUBLE PRECISION,
    CENA_CL DOUBLE PRECISION,
    R_SEL_NAME VARCHAR(115),
    R_SIMPLE_ID INTEGER,
    R_SUMA_OS DOUBLE PRECISION,
    R_SUMA_CL DOUBLE PRECISION,
    R_PN VARCHAR(2000),
    VET_NOM_DOST VARCHAR(3000),
    R_SROK VARCHAR(2000),
    R_CENA_BEZ_DDS DOUBLE PRECISION,
    R_CENA_S_DDS DOUBLE PRECISION,
    R_MARKA VARCHAR(2000),
    R_STRANA VARCHAR(2000),
    R_KLI_PROIZV VARCHAR(2000),
    R_SIMPLE_PROP TYPE OF DOM_CHAR_300,
    R_SIMPLE_NAME_SORT TYPE OF DOM_CHAR_50,
    R_SIMPLE_EXT1 TYPE OF DOM_CHAR_2000,
    R_KOL_DEF_RAZ TYPE OF DOM_INT,
    R_DEF_RAZ_REST TYPE OF DOM_INT,
    R_NAME_DEF_RAZ TYPE OF DOM_CHAR_30,
    R_SELEKCIQ_ID TYPE OF DOM_KEY)
AS
declare variable GODNOST smallint; 
declare variable L_OUT_ID integer; 
declare variable L_PN varchar(300); 
declare variable L_RSN char(1); 
declare variable L_SROK varchar(50); 
declare variable L_TIP_DDS integer; 
declare variable L_DDS double precision; 
declare variable L_RAZ_KOL type of DOM_KOL; 
declare variable L_RAZ_NAME type of DOM_CHAR_30; 
BEGIN 
    SELECT 
        FIRST 1 LOG.TIP_CENI 
    FROM 
        LOG_CENI_DDS LOG 
    WHERE 
        LOG.OPR_ID < :ID AND log.TIP_DDS = 1 ORDER BY LOG.OPR_ID DESC, LOG.ID DESC 
    INTO 
        :L_TIP_DDS; 
 
    if (L_TIP_DDS = 1) then 
        L_TIP_DDS = 0; 
    else 
        L_TIP_DDS = 1; 
 
    FOR SELECT 
        OUT_EL.ID, 
        SIMPLE.CODE, 
        CASE WHEN PROD_CENI_EL.BONUS_ID IS NULL THEN SIMPLE.NAME ELSE :P_BONUS_TEXT || SIMPLE.NAME END, 
        prod_ceni_el.cena, 
        OUT_EL.KOL, 
        CASE WHEN OUT_EL.KOL <> 0 THEN COALESCE(PROD_CENI_EL.CENA, ROUND(OUT_EL.SUMA / OUT_EL.KOL, 5)) ELSE 0 
END, 
        ME1.NAME, 
        CASE WHEN (prod_ceni_el.CENA_os <> 0 AND PROD_CENI_EL.BONUS_ID IS NULL) THEN 
        ((PROD_CENI_EL.CENA - (CAST (prod_ceni_el.cena_os * (1 + :L_TIP_DDS * SIMPLE.DDS/100) AS DOUBLE 
PRECISION)))*100) / (CAST(prod_ceni_el.CENA_OS * (1 + :L_TIP_DDS * SIMPLE.DDS/100) AS DOUBLE PRECISION)) 
        ELSE NULL END, 
        OUT_EL_RAZ_NODE.KOL, 
        RAZ_ELEMENT.NAME, 
        SIMPLE_KOD.KOD, 
        COALESCE(RAZFASOVKA.KOL,1), 
        POR_EL.KOL_POR, 
        SIMPLE.GODNOST, 
        ME2.NAME, 
        OUT_EL2.KOL, 
        (SELECT FIRST 1 BAR."BARCODE"  FROM  BARCODE BAR WHERE BAR.SIMPLE_ID= SIMPLE.ID), 
        CASE WHEN (PROD_CENI_EL.CENA_CL <> 0 AND PROD_CENI_EL.BONUS_ID IS NULL) THEN 
        ((prod_ceni_el.cena - PROD_CENI_EL.CENA_cl * (1 + :L_TIP_DDS * SIMPLE.DDS/100))*100)/ 
(prod_ceni_el.cena_cl * (1 + :L_TIP_DDS * SIMPLE.DDS/100)) 
        ELSE NULL END, 
        ME1.NAME_LONG, 
        simple.code2, 
        prod_ceni_el.CENA_CL, 
        PROD_CENI_EL.CENA_OS, 
        COALESCE(SELEKCIQ.NAME, SIMPLE.NAME), 
        SIMPLE.ID, 
        CASE WHEN PROD_CENI_EL.BONUS_ID IS NULL THEN (PROD_CENI_EL.CENA_OS * OUT_EL.KOL) ELSE NULL END, 
        CASE WHEN PROD_CENI_EL.BONUS_ID IS NULL THEN (PROD_CENI_EL.CENA_CL * OUT_EL.KOL) ELSE NULL END, 
        SIMPLE.RSN, 
        SIMPLE.DDS, 
        SIMPLE.NAME_SHORT, 
        COALESCE(SIMPLE.EXT1, SIMPLE.NAME) AS SIMPLE_EX1, 
        SELEKCIQ.ID AS SELEKCIQ_ID 
    FROM 
        OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OUT_EL.OPR_ID = :ID 
        INNER JOIN SIMPLE ON OUT_EL.SIMPLE_ID = SIMPLE.ID 
        INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID 
        LEFT JOIN ME ME1 ON SIMPLE.ME_ID = ME1.ID 
        LEFT JOIN OUT_EL_RAZ_NODE ON OUT_EL_RAZ_NODE.OUT_EL_ID = OUT_EL.ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = OUT_EL_RAZ_NODE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZFASOVKA.RAZ_ELEMENT_ID = RAZ_ELEMENT.ID 
        LEFT JOIN SIMPLE_KOD ON SIMPLE_KOD.KLI_ID = OPR.KLI_ID AND SIMPLE.ID = SIMPLE_KOD.SIMPLE_ID 
        LEFT JOIN POR_EL ON POR_EL.OUT_EL_ID = OUT_EL.ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN OUT_EL2 ON OUT_EL2.OUT_EL_ID = OUT_EL.ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
 
    UNION ALL 
 
    SELECT 
        OLD_OUT_EL.ID, 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        old_out_el.PROD_CENA, 
        OLD_OUT_EL.KOL, 
        CASE WHEN OLD_OUT_EL.KOL <> 0 THEN COALESCE(OLD_OUT_EL.PROD_CENA, ROUND(OLD_OUT_EL.SUMA / OLD_OUT_EL.KOL, 5)) ELSE 0 END, 
        ME1.NAME, 
        CASE WHEN OLD_OUT_EL.CENA_OS <> 0 THEN 
        ((old_out_el.prod_cena - (CAST (old_out_el.cena_os * (1 + :L_TIP_DDS * SIMPLE.DDS/100) AS DOUBLE 
PRECISION)))*100) / (CAST(old_out_el.cena_os * (1 + :L_TIP_DDS * SIMPLE.DDS/100) AS DOUBLE PRECISION)) 
        ELSE 0 END, 
        CAST(NULL AS DOUBLE PRECISION), 
        CAST(ME1.NAME AS VARCHAR(30)), 
        SIMPLE_KOD.KOD, 
        CAST(1 AS DOUBLE PRECISION), 
        CAST(NULL AS DOUBLE PRECISION), 
        SIMPLE.GODNOST, 
        ME2.NAME, 
        OLD_OUT_EL.KOL2, 
        (SELECT FIRST 1 BAR."BARCODE"  FROM  BARCODE BAR WHERE BAR.SIMPLE_ID= SIMPLE.ID), 
        CASE WHEN OLD_OUT_EL.CENA_CL <> 0 THEN 
        ((old_out_el.prod_cena - (CAST (old_out_el.cena_cl * (1 + :L_TIP_DDS * SIMPLE.DDS/100) AS DOUBLE 
PRECISION)))*100) / (CAST(old_out_el.cena_cl * (1 + :L_TIP_DDS * SIMPLE.DDS/100) AS DOUBLE PRECISION)) 
        ELSE 0 END, 
        ME1.NAME_LONG, 
        simple.code2, 
        OLD_OUT_EL.CENA_CL, 
        OLD_OUT_EL.CENA_OS, 
        COALESCE(SELEKCIQ.NAME, SIMPLE.NAME), 
        SIMPLE.ID, 
        (OLD_OUT_EL.CENA_OS * OLD_OUT_EL.KOL), 
        (OLD_OUT_EL.CENA_CL * OLD_OUT_EL.KOL), 
        SIMPLE.RSN, 
        SIMPLE.DDS, 
        SIMPLE.NAME_SHORT, 
        COALESCE(SIMPLE.EXT1, SIMPLE.NAME) AS SIMPLE_EX1, 
        SELEKCIQ.ID AS SELEKCIQ_ID 
    FROM 
        OPR_EDIT 
        INNER JOIN OPR ON OPR.ID = OPR_EDIT.ED_OPR_ID AND OPR_EDIT.OPR_ID =:ID 
        INNER JOIN OLD_OUT_EL ON OLD_OUT_EL.OPR_ID = OPR_EDIT.OPR_ID 
        INNER JOIN SIMPLE ON OLD_OUT_EL.SIMPLE_ID = SIMPLE.ID 
        LEFT JOIN ME ME1 ON SIMPLE.ME_ID = ME1.ID 
        LEFT JOIN SIMPLE_KOD ON SIMPLE_KOD.KLI_ID = OPR.KLI_ID AND SIMPLE.ID = SIMPLE_KOD.SIMPLE_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
 
    UNION ALL 
 
 
    SELECT 
        CAST(0 AS INTEGER), 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        old_out_el.PROD_CENA, 
        OLD_OUT_EL.KOL, 
        OLD_OUT_EL.PROD_CENA, 
        ME1.NAME, 
        CASE WHEN OLD_OUT_EL.CENA_OS <> 0 THEN 
        ((old_out_el.prod_cena - (CAST (old_out_el.cena_os * (1 + :L_TIP_DDS * SIMPLE.DDS/100) AS DOUBLE 
PRECISION)))*100) / (CAST(old_out_el.cena_os * (1 + :L_TIP_DDS * SIMPLE.DDS/100) AS DOUBLE PRECISION)) 
        ELSE 0 END, 
        CAST(0 AS  DOUBLE PRECISION), 
        CAST('' AS VARCHAR(30)), 
        SIMPLE_KOD.KOD, 
        CAST(0 AS DOUBLE PRECISION), 
        CAST(0 AS DOUBLE PRECISION), 
        CAST(0 AS SMALLINT), 
        ME2.NAME, 
        OLD_OUT_EL.KOL2, 
       (SELECT FIRST 1 BAR."BARCODE"  FROM  BARCODE BAR WHERE BAR.SIMPLE_ID = SIMPLE.ID), 
       CASE WHEN OLD_OUT_EL.CENA_CL <> 0 THEN 
        ((old_out_el.prod_cena - (CAST (old_out_el.cena_cl * (1 + :L_TIP_DDS * SIMPLE.DDS/100) AS DOUBLE 
PRECISION)))*100) / (CAST(old_out_el.cena_cl * (1 + :L_TIP_DDS * SIMPLE.DDS/100) AS DOUBLE PRECISION)) 
        ELSE 0 END, 
        ME1.NAME_LONG, 
        simple.code2, 
        OLD_OUT_EL.CENA_CL, 
        OLD_OUT_EL.CENA_OS, 
        COALESCE(SELEKCIQ.NAME, SIMPLE.NAME), 
        SIMPLE.ID, 
        (OLD_OUT_EL.CENA_OS * OLD_OUT_EL.KOL), 
        (OLD_OUT_EL.CENA_CL * OLD_OUT_EL.KOL), 
        SIMPLE.RSN, 
        SIMPLE.DDS, 
        SIMPLE.NAME_SHORT, 
        COALESCE(SIMPLE.EXT1, SIMPLE.NAME) AS SIMPLE_EX1, 
        SELEKCIQ.ID AS SELEKCIQ_ID 
    FROM 
        OPR_ANUL INNER JOIN OPR OP1 ON OP1.ID = OPR_ANUL.AN_OPR_ID AND OPR_ANUL.AN_OPR_ID = :ID 
        INNER JOIN OLD_OUT_EL ON OPR_ANUL.OPR_ID = OLD_OUT_EL.OPR_ID 
        INNER JOIN SIMPLE ON OLD_OUT_EL.SIMPLE_ID = SIMPLE.ID 
        LEFT JOIN ME ME1 ON SIMPLE.ME_ID = ME1.ID 
        LEFT JOIN SIMPLE_KOD ON SIMPLE_KOD.KLI_ID = OP1.KLI_ID AND SIMPLE.ID = SIMPLE_KOD.SIMPLE_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
 
    UNION ALL 
 
    SELECT 
        OUT_EL.ID, 
        SIMPLE.CODE, 
        CASE WHEN PROD_CENI_EL.BONUS_ID IS NULL THEN SIMPLE.NAME ELSE :P_BONUS_TEXT || SIMPLE.NAME END, 
        PROD_CENI_EL.CENA, 
        OUT_EL.KOL, 
        CASE WHEN OUT_EL.KOL <> 0 THEN COALESCE(PROD_CENI_EL.CENA, OUT_EL.SUMA / OUT_EL.KOL) ELSE 0 END, 
        ME1.NAME, 
        CASE WHEN (PROD_CENI_EL.CENA_OS <> 0 AND PROD_CENI_EL.BONUS_ID IS NULL) THEN 
        ((prod_ceni_el.cena - (CAST (prod_ceni_el.cena_os * (1 + :L_TIP_DDS * SIMPLE.DDS/100) AS DOUBLE 
PRECISION)))*100) / (CAST(prod_ceni_el.cena_os * (1 + :L_TIP_DDS * SIMPLE.DDS/100) AS DOUBLE PRECISION)) 
        ELSE NULL END, 
        OUT_EL_RAZ_NODE.KOL, 
        RAZ_ELEMENT.NAME, 
        SIMPLE_KOD.KOD, 
        COALESCE(RAZFASOVKA.KOL,1), 
        POR_EL.KOL_POR, 
        SIMPLE.GODNOST, 
        ME2.NAME, 
        OUT_EL2.KOL, 
        (SELECT FIRST 1 BAR."BARCODE"  FROM  BARCODE BAR WHERE BAR.SIMPLE_ID= SIMPLE.ID)  AS BAR_CODE, 
        CASE WHEN (PROD_CENI_EL.CENA_CL <> 0 AND PROD_CENI_EL.BONUS_ID IS NULL) THEN 
        ((prod_ceni_el.cena - (CAST (prod_ceni_el.cena_cl * (1 + :L_TIP_DDS * SIMPLE.DDS/100) AS DOUBLE 
PRECISION)))*100) / (CAST(prod_ceni_el.cena_cl * (1 + :L_TIP_DDS * SIMPLE.DDS/100) AS DOUBLE PRECISION)) 
        ELSE NULL END, 
        ME1.NAME_LONG, 
        simple.code2, 
        PROD_CENI_EL.CENA_CL, 
        PROD_CENI_EL.CENA_OS, 
        COALESCE(SELEKCIQ.NAME, SIMPLE.NAME), 
        SIMPLE.ID, 
        CASE WHEN PROD_CENI_EL.BONUS_ID IS NULL THEN (PROD_CENI_EL.CENA_OS * OUT_EL.KOL) ELSE NULL END, 
        CASE WHEN PROD_CENI_EL.BONUS_ID IS NULL THEN (PROD_CENI_EL.CENA_CL * OUT_EL.KOL) ELSE NULL END, 
        SIMPLE.RSN, 
        SIMPLE.DDS, 
        SIMPLE.NAME_SHORT, 
        COALESCE(SIMPLE.EXT1, SIMPLE.NAME) AS SIMPLE_EX1, 
        SELEKCIQ.ID AS SELEKCIQ_ID 
    FROM 
        PROD_NODE INNER JOIN OPR ON (OPR.ID = :ID AND PROD_NODE.OPR_PROD_ID = OPR.ID) 
        INNER JOIN OUT_EL ON (PROD_NODE.OPR_SUB_PROD_ID = OUT_EL.OPR_ID) 
        INNER JOIN SIMPLE ON OUT_EL.SIMPLE_ID = SIMPLE.ID 
        INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID 
        LEFT JOIN ME ME1 ON SIMPLE.ME_ID = ME1.ID 
        LEFT JOIN OUT_EL_RAZ_NODE ON OUT_EL_RAZ_NODE.OUT_EL_ID = OUT_EL.ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = OUT_EL_RAZ_NODE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZFASOVKA.RAZ_ELEMENT_ID = RAZ_ELEMENT.ID 
        LEFT JOIN SIMPLE_KOD ON SIMPLE_KOD.KLI_ID = OPR.KLI_ID AND SIMPLE.ID = SIMPLE_KOD.SIMPLE_ID 
        LEFT JOIN POR_EL ON POR_EL.OUT_EL_ID = OUT_EL.ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN OUT_EL2 ON OUT_EL2.OUT_EL_ID = OUT_EL.ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
    ORDER BY 1,2 
    INTO 
        :L_OUT_ID, :CODE,:NAME,:CENA_PROD,:KOL,:CENA,:ME,:R_PROCENT_NAD_os,:KOL_RAZ,:NAME_RAZ, 
        :KLI_KOD,:KOL_NA_RAZ,:KOL_POR,:GODNOST, :ME2, :KOL2, :BAR_CODE,:R_PROCENT_nad_cl, :ME_LONG, :CODE2, 
:CENA_CL, :CENA_OS, :R_SEL_NAME, :R_SIMPLE_ID, :R_SUMA_OS, :R_SUMA_CL, :L_RSN,:L_DDS, :R_SIMPLE_NAME_SORT, 
:R_SIMPLE_EXT1, :R_SELEKCIQ_ID 
    DO BEGIN 
        --L_RSN = ''; 
        --R_PN  = ''; 
        IF (GODNOST > 0 ) THEN BEGIN 
 
            SELECT DISTINCT 
              LIST(DVSK_DOK_TYPE.SHORT_NAME || ' '|| DVSK_EL.NOM_DOK), 
              LIST(DISTINCT COALESCE(COUNTRIES.NAME,'')), 
              LIST(COALESCE(partida_el_print.SROK, PARTIDA_EL.SROK)) AS SROK, 
              LIST(MESA.MARKA), 
              LIST(DISTINCT (COUNTRIES.NAME ||DVSK_EL.NOM_DOK)) AS VET_NOD_DOST, 
              LIST(DISTINCT KLI.NAME) AS KLI_PROIZV 
            FROM 
              DVSK_EL INNER JOIN PARTIDA_EL ON PARTIDA_EL.ID = DVSK_EL.PARTIDA_EL_ID 
              INNER JOIN PARTIDA_NAL PN ON PN.ELEMENT_ID = PARTIDA_EL.ID 
              INNER JOIN PARTIDA_EL_NODE PEN ON PEN.PARTIDA_ID = PN.ID 
              INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.PARTIDA_NODE_ID = PEN.ID AND PON.OUT_EL_ID =:L_OUT_ID 
              LEFT JOIN MESA ON MESA.ELEMENT_ID = PEN.PARTIDA_ID 
              LEFT JOIN COUNTRIES ON COUNTRIES.ID = MESA.STRANA_K 
              LEFT JOIN DVSK_DOK_TYPE ON DVSK_DOK_TYPE.ID = DVSK_EL.TYPE_DOK 
              LEFT JOIN KLI ON KLI.ID = DVSK_EL.KLI_ID_PROIZV 
              LEFT JOIN PARTIDA_EL_PRINT ON PARTIDA_EL_PRINT.OUT_EL_ID = pon.OUT_EL_ID 
            INTO :NOM_DOK,:R_STRANA,:R_SROK, :R_MARKA, :VET_NOM_DOST, :R_KLI_PROIZV; 
        END 
 
        R_PN = ''; 
        IF (L_RSN IN ('2', 1)) THEN BEGIN 
            R_PN = ''; 
            L_PN = ''; 
 
            SELECT DISTINCT 
                LIST(DISTINCT coalesce(PARTIDA_EL_PRINT.PARTIDA_N, SERIAL_NUM.SN)), 
                LIST(SUBSTRING(100+EXTRACT(DAY FROM COALESCE(PARTIDA_EL_PRINT.SROK, PARTIDA_EL.SROK)) FROM 2 FOR 2)||'.'|| 
                    SUBSTRING(100+EXTRACT(MONTH FROM COALESCE(PARTIDA_EL_PRINT.SROK, PARTIDA_EL.SROK)) FROM 2 FOR 2)||'.'|| 
                    EXTRACT(YEAR FROM COALESCE(PARTIDA_EL_PRINT.SROK, PARTIDA_EL.SROK))) AS SROK 
            FROM 
                PARTIDA_OUT_EL_NODE PON INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID 
                INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
                INNER JOIN PARTIDA_EL ON PARTIDA_EL.ID = PN.ELEMENT_ID 
                LEFT JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID 
                LEFT JOIN PARTIDA_EL_PRINT ON PARTIDA_EL_PRINT.OUT_EL_ID = PON.OUT_EL_ID 
            WHERE 
                PON.OUT_EL_ID =:L_OUT_ID 
            INTO 
                :L_PN, :R_SROK; 
            R_PN =:L_PN; 
            /*DO BEGIN 
                R_PN = R_PN ||:L_PN||', '; 
            END*/ 
 
            if (R_PN = '') then 
            begin 
                select 
                    partida_el_print.PARTIDA_N, 
                    SUBSTRING(100+EXTRACT(DAY FROM PARTIDA_EL_PRINT.SROK) FROM 2 FOR 2)||'.'|| 
                    SUBSTRING(100+EXTRACT(MONTH FROM PARTIDA_EL_PRINT.SROK) FROM 2 FOR 2)||'.'|| 
                    EXTRACT(YEAR FROM PARTIDA_EL_PRINT.SROK) 
                from 
                    PARTIDA_EL_PRINT 
                where 
                    PARTIDA_EL_PRINT.OUT_EL_ID =:L_OUT_ID 
                INTO :R_PN, :R_SROK; 
            END 
 
            IF ((R_PN = '') AND (:P_TIP_PN = 0)) THEN 
                SELECT FIRST 1 
                    SERIAL_NUM.SN 
                FROM 
                    PARTIDA_NAL PN INNER JOIN IN_EL ON IN_EL.ID = PN.IN_EL_ID AND IN_EL.SIMPLE_ID =:R_SIMPLE_ID 
                    INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID 
                ORDER BY SERIAL_NUM.ID DESC 
                INTO :R_PN; 
        END 
 
        IF (R_SROK IS NULL) THEN 
            FOR SELECT DISTINCT 
                SUBSTRING(100+EXTRACT(DAY FROM COALESCE(PARTIDA_EL_PRINT.SROK, PE.SROK)) FROM 2 FOR 2)||'.'|| 
                SUBSTRING(100+EXTRACT(MONTH FROM COALESCE(PARTIDA_EL_PRINT.SROK, PE.SROK)) FROM 2 FOR 2)||'.'|| 
                EXTRACT(YEAR FROM COALESCE(PARTIDA_EL_PRINT.SROK, PE.SROK)) 
            FROM 
                PARTIDA_OUT_EL_NODE POEN 
                LEFT JOIN PARTIDA_EL_NODE PEN ON PEN.ID = POEN.PARTIDA_NODE_ID 
                LEFT JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
                LEFT JOIN PARTIDA_EL PE ON PE.ID = PN.ELEMENT_ID 
                LEFT JOIN PARTIDA_EL_PRINT ON PARTIDA_EL_PRINT.OUT_EL_ID = POEN.OUT_EL_ID 
            WHERE 
                POEN.OUT_EL_ID =:L_OUT_ID 
            INTO 
                :L_SROK 
            DO BEGIN 
                IF (L_SROK IS NOT NULL) THEN 
                    R_SROK = R_SROK ||:L_SROK ||', '; 
            END 
 
        R_CENA_BEZ_DDS = ROUND(CENA_PROD /(1+ L_DDS/100), 5); 
        R_CENA_S_DDS = CENA_PROD; 
 
        --if (R_SROK <> '') then 
        --    R_SROK = SUBSTRING(:R_SROK FROM 1 FOR (CHAR_LENGTH(:R_SROK) - 2)); 
 
        IF (P_TIP IN (1,2)) THEN 
            NAME = R_SEL_NAME; 
 
        R_SIMPLE_PROP = ' '; 
 
        SELECT 
            LIST(SIMPLE_PROP.NAME || ' - ' || SIMPLE_PROP_MINOR.NAME) 
        FROM POR_PROP_NODE 
            INNER JOIN SIMPLE_PROP ON SIMPLE_PROP.ID = POR_PROP_NODE.MAJOR_PROP_ID 
            INNER JOIN SIMPLE_PROP_MINOR ON SIMPLE_PROP_MINOR.ID = POR_PROP_NODE.MINOR_PROP_ID 
        WHERE 
            POR_PROP_NODE.POR_EL_ID = (SELECT POR_EL.ID FROM POR_EL WHERE POR_EL.OUT_EL_ID =:L_OUT_ID) 
        INTO :R_SIMPLE_PROP; 
 
 
        IF (:KOL_RAZ IS NULL) THEN BEGIN 
            SELECT first 1 
                RAZFASOVKA.KOL, 
                RAZ_ELEMENT.NAME 
            FROM 
                RAZFASOVKA INNER JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
            WHERE 
                RAZFASOVKA.RAZ_TIP_ID = (SELECT SIMPLE.RAZ_TIP_ID FROM SIMPLE WHERE SIMPLE.ID =:R_SIMPLE_ID) 
            INTO :L_RAZ_KOL, :R_NAME_DEF_RAZ; 
 
            if (COALESCE(CAST(:L_RAZ_KOL AS INTEGER), 0) <> 0) then begin 
                R_KOL_DEF_RAZ = ROUND(CAST(KOL AS INTEGER)/CAST(L_RAZ_KOL AS INTEGER), 5); 
                R_DEF_RAZ_REST = MOD(KOL, :L_RAZ_KOL); 
            END 
        END 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_PRODAJBI (
    P_TIP INTEGER,
    P_TIP_PN TYPE OF DOM_KEY_SMALL,
    P_BONUS_TEXT TYPE OF DOM_CHAR_30)
RETURNS (
    CODE DOM_CHAR_50,
    NAME VARCHAR(115),
    CENA_PROD DOUBLE PRECISION,
    KOL DOUBLE PRECISION,
    CENA DOUBLE PRECISION,
    ME CHAR(2),
    R_PROCENT_NAD_OS DOUBLE PRECISION,
    KOL_RAZ DOUBLE PRECISION,
    NAME_RAZ VARCHAR(30),
    KLI_KOD VARCHAR(15),
    KOL_NA_RAZ DOUBLE PRECISION,
    KOL_POR DOUBLE PRECISION,
    ME2 CHAR(2),
    BAR_CODE VARCHAR(13),
    R_PROCENT_NAD_CL DOUBLE PRECISION,
    ME_LONG VARCHAR(15),
    CODE2 DOM_CHAR_50,
    CENA_CL DOUBLE PRECISION,
    CENA_OS DOUBLE PRECISION,
    R_SEL_NAME VARCHAR(115),
    KOL2 DOUBLE PRECISION,
    NOM_DOK TYPE OF DOM_CHAR_1000,
    R_SIMPLE_ID INTEGER,
    R_SUMA_OS DOUBLE PRECISION,
    R_SUMA_CL DOUBLE PRECISION,
    R_PN VARCHAR(2000))
AS
declare variable L_OPR_ID integer; 
BEGIN 
    FOR SELECT 
            SEL_OPR.OPR_ID 
        FROM 
            SEL_OPR 
        INTO :L_OPR_ID 
DO 
    BEGIN 
     FOR SELECT 
            GET_PRODAJBA.CODE, 
            GET_PRODAJBA.NAME, 
            GET_PRODAJBA.CENA_PROD, 
            GET_PRODAJBA.KOL, 
            GET_PRODAJBA.CENA, 
            GET_PRODAJBA.ME, 
            GET_PRODAJBA.R_PROCENT_NAD_OS, 
            GET_PRODAJBA.KOL_RAZ, 
            GET_PRODAJBA.NAME_RAZ, 
            GET_PRODAJBA.KLI_KOD, 
            GET_PRODAJBA.KOL_NA_RAZ, 
            GET_PRODAJBA.KOL_POR, 
            GET_PRODAJBA.ME2, 
            GET_PRODAJBA.KOL2, 
            GET_PRODAJBA.BAR_CODE, 
            GET_PRODAJBA.R_PROCENT_NAD_CL, 
            GET_PRODAJBA.ME_LONG, 
            GET_PRODAJBA.CODE2, 
            GET_PRODAJBA.CENA_CL, 
            GET_PRODAJBA.CENA_OS, 
            GET_PRODAJBA.R_SEL_NAME, 
            GET_PRODAJBA.NOM_DOK, 
            GET_PRODAJBA.R_SIMPLE_ID, 
            GET_PRODAJBA.R_SUMA_OS, 
            GET_PRODAJBA.R_SUMA_CL, 
            GET_PRODAJBA.R_PN 
        FROM GET_PRODAJBA(:L_OPR_ID, :P_TIP, :P_TIP_PN, :P_BONUS_TEXT) 
 
        INTO :CODE,:NAME,:CENA_PROD,:KOL,:CENA,:ME,:R_PROCENT_NAD_os,:KOL_RAZ,:NAME_RAZ, 
        :KLI_KOD,:KOL_NA_RAZ,:KOL_POR,:ME2, :KOL2, :BAR_CODE,:R_PROCENT_nad_cl, :ME_LONG, :CODE2, :CENA_CL, 
:CENA_OS, :R_SEL_NAME, :NOM_DOK, :R_SIMPLE_ID, :R_SUMA_OS, :R_SUMA_CL, :R_PN 
   DO 
    SUSPEND; 
   END 
END^


ALTER PROCEDURE GET_PRODREPORTEL (
    P_ID INTEGER,
    P_SORT_KEY INTEGER)
RETURNS (
    CODE VARCHAR(15),
    NAME VARCHAR(100),
    GODNOST SMALLINT,
    KOL DOUBLE PRECISION,
    ME CHAR(2),
    NAME_RAZ VARCHAR(30),
    KOL_RAZ DOUBLE PRECISION,
    BAR_CODE VARCHAR(13),
    SUMA DOUBLE PRECISION,
    ED_CENA DOUBLE PRECISION,
    KOL_NEDOSTIG DOUBLE PRECISION,
    R_POR_EL_COMMENT VARCHAR(100),
    CODE2 VARCHAR(15),
    R_SIMPLE_PROP VARCHAR(100),
    R_CENA_OS DOUBLE PRECISION,
    R_TO DOUBLE PRECISION,
    R_PN TYPE OF DOM_CHAR_100,
    KOL2 DOUBLE PRECISION,
    ME2 CHAR(2))
AS
declare variable L_POR_EL integer; 
declare variable L_SIMPLE_MAJOR_PROP varchar(30); 
declare variable L_SIMPLE_MINOR_PROP varchar(30); 
declare variable L_SIMPLE_ID integer; 
declare variable L_SORT_TEXT type of DOM_CHAR_50; 
BEGIN 
      L_SORT_TEXT = 
      CASE P_SORT_KEY 
          when 0 then ' ORDER BY 1' 
          when 1 then ' ORDER BY 2' 
          WHEN 2 THEN ' ORDER BY 6' 
          WHEN 3 THEN ' ORDER BY POR_EL.ID ' 
      END; 
 
      FOR EXECUTE STATEMENT 
          'SELECT 
              SIMPLE.CODE AS CODE, 
              SIMPLE.NAME AS NAME, 
              SIMPLE.GODNOST, 
              POR_EL.KOL AS KOL, 
              ME1.NAME AS ME, 
              RAZ_ELEMENT.NAME NAME_RAZ, 
              POR_EL_RAZ_NODE.KOL AS KOL_RAZ, 
              (SELECT FIRST 1 BAR."BARCODE"  FROM  BARCODE BAR WHERE BAR.SIMPLE_ID = SIMPLE.ID)  AS BAR_CODE, 
              POR_EL.SUMA AS SUMA, 
              (CASE WHEN (POR_EL.KOL <> 0) THEN POR_EL.SUMA / POR_EL.KOL  ELSE 0 END) AS ED_CENA, 
              POR_EL.KOL - COALESCE(POR_EL.KOL_MUVE,0) KOL_NEDOSTIG, 
              POR_EL_COMMENT.COMMENT, 
              SIMPLE.CODE2, 
              POR_EL.ID, 
              SIMPLE.ID, 
              POR_EL.KOL2, 
              ME2.NAME AS ME_2 
          FROM 
              POR_EL 
              LEFT JOIN SIMPLE ON POR_EL.SIMPLE_ID = SIMPLE.ID 
              LEFT JOIN ME ME1 ON SIMPLE.ME_ID = ME1.ID 
              LEFT JOIN POR_EL_RAZ_NODE ON POR_EL_RAZ_NODE.POR_EL_ID = POR_EL.ID 
              LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = POR_EL_RAZ_NODE.RAZFASOVKA_ID 
              LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
              LEFT JOIN POR_EL_COMMENT ON POR_EL_COMMENT.POR_EL_ID = POR_EL.ID 
              LEFT JOIN ME ME2 ON SIMPLE.ME2_ID = ME2.ID 
          WHERE 
              POR_EL.OPR_ID =' ||:P_ID ||:L_SORT_TEXT 
          INTO :CODE,:NAME,:GODNOST,:KOL,:ME,:NAME_RAZ,:KOL_RAZ,:BAR_CODE,:SUMA,:ED_CENA,:KOL_NEDOSTIG,:R_POR_EL_COMMENT, :CODE2, :L_POR_EL, :L_SIMPLE_ID, KOL2, ME2 
      DO 
      BEGIN 
          R_SIMPLE_PROP = ''; 
          L_SIMPLE_MAJOR_PROP = ''; 
          L_SIMPLE_MINOR_PROP = ''; 
          FOR SELECT 
              SIMPLE_PROP.NAME AS PROP_MAJOR, 
              SIMPLE_PROP_MINOR.NAME AS PROP_MINOR 
          FROM POR_PROP_NODE 
              INNER JOIN SIMPLE_PROP ON SIMPLE_PROP.ID = POR_PROP_NODE.MAJOR_PROP_ID 
              INNER JOIN SIMPLE_PROP_MINOR ON SIMPLE_PROP_MINOR.ID = POR_PROP_NODE.MINOR_PROP_ID 
          WHERE 
              POR_PROP_NODE.POR_EL_ID =:L_POR_EL 
          INTO :L_SIMPLE_MAJOR_PROP, :L_SIMPLE_MINOR_PROP 
          DO BEGIN 
              R_SIMPLE_PROP = R_SIMPLE_PROP ||  L_SIMPLE_MAJOR_PROP || ' - ' ||  L_SIMPLE_MINOR_PROP || ', '; 
          END 
 
          EXECUTE PROCEDURE GET_CENA_CL_OS(L_SIMPLE_ID) RETURNING_VALUES(:R_CENA_OS); 
 
          IF (COALESCE(:R_CENA_OS,0) <> 0) THEN 
              R_TO = 100*(ROUND5(:ED_CENA/:R_CENA_OS) - 1); 
          ELSE 
              R_TO = NULL; 
 
          EXECUTE PROCEDURE GET_PN_FOR_POR(:L_SIMPLE_ID) RETURNING_VALUES(:R_PN); 
 
          SUSPEND; 
      END 
END^


ALTER PROCEDURE GET_PRODUCTION_IN (
    ID TYPE OF DOM_KEY)
RETURNS (
    R_CODE TYPE OF DOM_CHAR_50,
    R_NAME TYPE OF DOM_CHAR_100,
    R_SIMPLEID TYPE OF DOM_KEY,
    R_ME CHAR(2),
    CENA TYPE OF DOM_CENA,
    SUMA TYPE OF DOM_SUMA,
    GR_NAME TYPE OF DOM_CHAR_50,
    R_IN_EL_ID TYPE OF DOM_KEY,
    R_KOL TYPE OF DOM_KOL,
    NOM_DOK TYPE OF DOM_CHAR_1000,
    R_ME2 CHAR(2),
    R_KOL2 TYPE OF DOM_KOL,
    R_SROK TYPE OF DOM_CHAR_100,
    R_PARTIDA_NUM TYPE OF DOM_CHAR_1000,
    R_IN_EL_PARAM_COUNT TYPE OF DOM_KOL,
    R_PARAMAS TYPE OF DOM_CHAR_100,
    R_EXPLANATORY_TEXT TYPE OF DOM_CHAR_100,
    R_QTY_COMPLETE TYPE OF DOM_KOL,
    R_QTY_COMPLETE_TOTAL TYPE OF DOM_KOL,
    R_EXT_1 TYPE OF DOM_CHAR_300,
    R_EXT_2 TYPE OF DOM_CHAR_300,
    R_TEMPERATURE TYPE OF DOM_CHAR_20)
AS
declare variable L_IN_EL_ID type of DOM_KEY; 
declare variable L_GODNOST type of DOM_DATE_TIME; 
declare variable L_NOM type of DOM_CHAR_100; 
declare variable L_SROK type of DOM_CHAR_1000; 
declare variable L_PARTIDA_NUM type of DOM_CHAR_1000; 
BEGIN 
    FOR SELECT 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        SIMPLE.ID, 
        ME1.NAME, 
        IN_EL.KOL, 
        SELEKCIQ.NAME, 
        ME2.NAME, 
        IN_EL2.KOL, 
        IN_EL.ID, 
        SIMPLE.EXT1, 
        SIMPLE.EXT2, 
        SIMPLE.TEMPERATURA 
    FROM 
        IN_EL INNER JOIN SIMPLE ON IN_EL.SIMPLE_ID = SIMPLE.ID 
        INNER JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN IN_EL2 ON IN_EL2.IN_EL_ID = IN_EL.ID 
    WHERE 
        IN_EL.OPR_ID =:ID 
    INTO 
        :R_CODE,:R_NAME,:R_SIMPLEID,:R_ME,:R_KOL,:GR_NAME,:R_ME2,:R_KOL2,:R_IN_EL_ID, :R_EXT_1, :R_EXT_2, :R_TEMPERATURE 
 
    DO BEGIN 
        NOM_DOK = ''; 
        L_IN_EL_ID = R_IN_EL_ID; 
 
        IF (L_GODNOST > 0 ) THEN BEGIN 
            L_NOM = ''; 
            FOR SELECT DISTINCT 
                DVSK_EL.NOM_DOK 
            FROM 
                PARTIDA_IN_EL_NODE PIN INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
                AND PIN.IN_EL_ID = :L_IN_EL_ID 
                INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
                INNER JOIN DVSK_EL ON (DVSK_EL.PARTIDA_EL_ID = PN.ELEMENT_ID) 
                INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID 
            INTO 
                :L_NOM 
            DO BEGIN 
                NOM_DOK = NOM_DOK ||:L_NOM||', '; 
            END 
        END 
 
        SELECT 
            LIST(DISTINCT PARTIDA_EL.SROK), 
            LIST(DISTINCT SERIAL_NUM.SN) 
        FROM 
            PARTIDA_IN_EL_NODE PIN INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
            AND PIN.IN_EL_ID = :L_IN_EL_ID 
            INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
            INNER JOIN PARTIDA_EL ON PN.ELEMENT_ID = PARTIDA_EL.ID 
            INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PARTIDA_EL.ID 
        INTO 
            :L_SROK,:L_PARTIDA_NUM; 
 
        R_SROK = L_SROK; 
        R_PARTIDA_NUM = L_PARTIDA_NUM; 
 
        SELECT 
            PRODUCTION_IN_EL_PARAMS."COUNT" 
 
        FROM 
            PRODUCTION_IN_EL_PARAMS 
        WHERE 
            PRODUCTION_IN_EL_PARAMS.IN_EL_ID =:R_IN_EL_ID 
        GROUP BY 1 
        INTO :R_IN_EL_PARAM_COUNT; 
 
        select 
            LIST(VARIABLES) 
        from 
        ( 
            SELECT 
                PRODUCTION_IN_EL_PARAMS."VARIABLE" ||' - '||CAST(ROUND(PRODUCTION_IN_EL_PARAMS.QUANTITY,3) AS VARCHAR(15)) as VARIABLES 
            FROM 
                PRODUCTION_IN_EL_PARAMS 
            WHERE 
                PRODUCTION_IN_EL_PARAMS.IN_EL_ID =:R_IN_EL_ID 
            ORDER BY PRODUCTION_IN_EL_PARAMS."VARIABLE" 
        ) 
        INTO :R_PARAMAS; 
 
        SELECT 
            LIST(EXPLANATORY.NAME, ' ') 
        FROM 
            PRODUCTION_EXPLANATORY INNER JOIN IN_EL ON IN_EL.ID = PRODUCTION_EXPLANATORY.IN_EL_ID 
            INNER JOIN EXPLANATORY ON EXPLANATORY.ID = PRODUCTION_EXPLANATORY.EXPLAIN_ID 
        WHERE 
            IN_EL.ID =:R_IN_EL_ID 
        INTO :R_EXPLANATORY_TEXT; 
 
        select 
            SUM(PRODUCTION_REQUEST_EL.KOL) - SUM(PRODUCTION_REQUEST_EL.QTY_COMLETE) + CAST(SUM(:R_KOL) AS DOUBLE PRECISION) AS QTY_COMPLETE, 
            SUM(PRODUCTION_REQUEST_EL.QTY_COMLETE) AS QTY_COMPLETE_TOTAL 
        from 
            PRODUCTION_REQUEST_EL 
            inner join request_production_node on REQUEST_PRODUCTION_NODE.REQUEST_ID = PRODUCTION_REQUEST_EL.OPR_REQUEST_ID 
        where 
            REQUEST_PRODUCTION_NODE.PRODUCTION_ID = (SELECT PRODUCTION.OPR_OUT_ID FROM PRODUCTION WHERE PRODUCTION.OPR_IN_ID =:ID) 
            AND PRODUCTION_REQUEST_EL.SIMPLE_ID =:R_SIMPLEID AND PRODUCTION_REQUEST_EL.MASTER_SIMPLE_ID IS NOT NULL 
        INTO :R_QTY_COMPLETE, R_QTY_COMPLETE_TOTAL; 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_PRODUCTION_OUT (
    ID TYPE OF DOM_KEY,
    CL_ID TYPE OF DOM_KEY)
RETURNS (
    R_CODE TYPE OF DOM_CHAR_50,
    R_NAME TYPE OF DOM_CHAR_100,
    R_ME CHAR(2),
    R_KOL TYPE OF DOM_KOL,
    CENA TYPE OF DOM_CENA,
    SUMA TYPE OF DOM_SUMA,
    R_SUMAFR TYPE OF DOM_SUMA,
    GR_NAME TYPE OF DOM_CHAR_50,
    R_OUT_EL_ID TYPE OF DOM_KEY,
    NOM_DOK TYPE OF DOM_CHAR_1000,
    R_ME2 CHAR(2),
    R_KOL2 TYPE OF DOM_KOL,
    R_LAST_CENA TYPE OF DOM_SUMA)
AS
declare variable L_CENA type of DOM_CENA; 
declare variable L_OUT_EL_ID type of DOM_KEY; 
declare variable L_SIMPLEID type of DOM_KEY; 
declare variable L_GODNOST type of DOM_DATE_TIME; 
declare variable L_NOM type of DOM_CHAR_1000; 
declare variable L_SKLAD_ID type of DOM_KEY; 
BEGIN 
    SELECT 
        OPR.SKLAD_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID =:ID 
    INTO 
        :L_SKLAD_ID; 
 
    FOR SELECT 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        SIMPLE.ID, 
        ME1.NAME, 
        OUT_EL.KOL, 
        IIF(OUT_EL.KOL = 0.00, 0.00, ROUND(OUT_EL.SUMA_SR/OUT_EL.KOL,5)), 
        IIF(:CL_ID = 0, OUT_EL.SUMA_SR,-1), 
        OUT_EL.SUMA_FR, 
        SELEKCIQ.NAME, 
        ME2.NAME, 
        OUT_EL2.KOL, 
        OUT_EL.ID 
    FROM 
        OUT_EL INNER JOIN SIMPLE ON (SIMPLE.ID = OUT_EL.SIMPLE_ID AND OUT_EL.OPR_ID = :ID) 
        INNER JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN OUT_EL2 ON OUT_EL.ID = OUT_EL2.OUT_EL_ID 
    INTO 
        :R_CODE,:R_NAME,:L_SIMPLEID,:R_ME,:R_KOL,:CENA,:SUMA,:R_SUMAFR,:GR_NAME,:R_ME2, 
        :R_KOL2,:R_OUT_EL_ID 
 
    DO BEGIN 
        NOM_DOK = ''; 
        L_CENA = 0; 
        L_OUT_EL_ID = R_OUT_EL_ID; 
 
        IF (SUMA = -1) THEN BEGIN 
            EXECUTE PROCEDURE GET_CENA_CL(:CL_ID,:L_SIMPLEID) RETURNING_VALUES(L_CENA); 
            SUMA = :L_CENA*:R_KOL; 
            CENA = :L_CENA; 
        END 
 
        IF (L_GODNOST > 0 ) THEN BEGIN 
            L_NOM = ''; 
            FOR SELECT DISTINCT 
                DVSK_EL.NOM_DOK 
            FROM 
                PARTIDA_OUT_EL_NODE PON INNER JOIN PARTIDA_EL_NODE PEN ON PON.OUT_EL_ID = :L_OUT_EL_ID 
                AND  PEN.ID = PON.PARTIDA_NODE_ID 
                INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
                INNER JOIN DVSK_EL ON DVSK_EL.PARTIDA_EL_ID =  PN.ELEMENT_ID 
            INTO 
                :L_NOM 
            DO BEGIN 
                NOM_DOK = NOM_DOK ||:L_NOM||', '; 
            END 
        END 
 
        select 
            NAL.LAST_CENA 
        from 
            nal 
        where 
            NAL.SIMPLE_ID =:L_SIMPLEID AND NAL.SKLAD_ID =:L_SKLAD_ID 
        INTO :R_LAST_CENA; 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_PRODUCTION_OUT2
RETURNS (
    R_CODE TYPE OF DOM_CHAR_50,
    R_NAME TYPE OF DOM_CHAR_100,
    R_ME CHAR(2),
    R_KOL TYPE OF DOM_KOL,
    R_ME2 CHAR(2),
    R_KOL2 TYPE OF DOM_KOL,
    R_OUT_EL_ID TYPE OF DOM_KEY,
    R_SEL_TEXT TYPE OF DOM_CHAR_50,
    GR_NAME TYPE OF DOM_CHAR_50,
    CENA TYPE OF DOM_CENA,
    SUMA TYPE OF DOM_SUMA,
    SUMA_FR TYPE OF DOM_SUMA,
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_PARTIDA_SROK TYPE OF DOM_DATE_TIME,
    R_PARTIDA_NUM TYPE OF DOM_CHAR_30,
    R_CHILD_SEL_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_SIMPLE_CALC_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_IN_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OUT_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PARTIDA_KOL TYPE OF DOM_KOL; 
BEGIN 
    FOR SELECT 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        SIMPLE.ID, 
        ME1.NAME AS ME1, 
        OUT_EL.KOL, 
        SELEKCIQ.NAME AS GR_NAME, 
        ME2.NAME AS ME2, 
        OUT_EL2.KOL AS KOL2, 
        OUT_EL.ID, 
        OPR_RAZPAD_NODE.SIMPLE_CALC_ID, 
        CASE WHEN OUT_EL.KOL = 0 THEN 0 ELSE OUT_EL.SUMA_SR/OUT_EL.KOL END AS CENA, 
        OUT_EL.SUMA_SR, 
        OUT_EL.SUMA_FR, 
        OUT_EL.OPR_ID, 
        COALESCE(SIMPLE_CALC.CHILD_SEL_ID,0) 
    FROM 
        OPR_RAZPAD_NODE INNER JOIN OUT_EL ON OUT_EL.ID = OPR_RAZPAD_NODE.OUT_EL_ID 
        INNER join SIMPLE_CALC on SIMPLE_CALC.ID = OPR_RAZPAD_NODE.SIMPLE_CALC_ID 
        INNER JOIN TMP_IN_EL_PRODUCTION ON TMP_IN_EL_PRODUCTION.IN_EL_ID = OPR_RAZPAD_NODE.IN_EL_ID 
        LEFT JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID=SIMPLE.SIMPLE_GROUP_ID 
        LEFT JOIN ME ME1 ON ME1.ID=SIMPLE.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID=SIMPLE.ME2_ID 
        LEFT JOIN OUT_EL2 ON OUT_EL2.OUT_EL_ID=OUT_EL.ID 
    INTO 
        :R_CODE,:R_NAME,:R_SIMPLE_ID,:R_ME,:R_KOL,:GR_NAME,:R_ME2,:R_KOL2,:R_OUT_EL_ID,:L_SIMPLE_CALC_ID, 
        :CENA,:SUMA,:SUMA_FR,:L_OUT_OPR_ID, :R_CHILD_SEL_ID 
    DO BEGIN 
        SELECT 
            SIMPLE_CALC.SEL_TEXT 
        FROM 
            SIMPLE_CALC 
        WHERE 
            SIMPLE_CALC.ID =:L_SIMPLE_CALC_ID 
        INTO 
            :R_SEL_TEXT; 
 
        L_IN_EL_ID = NULL; 
        SELECT 
            COUNT(PN.IN_EL_ID) 
        FROM 
            PARTIDA_OUT_EL_NODE  PON INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID 
            AND PON.OUT_EL_ID =:R_OUT_EL_ID 
            INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
            INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID 
        INTO 
            :L_IN_EL_ID; 
 
        R_PARTIDA_NUM = NULL; 
 
        IF (COALESCE(L_IN_EL_ID,0) <> 0) THEN BEGIN 
            FOR SELECT 
                PARTIDA_EL.SROK, 
                SERIAL_NUM.SN, 
                PEN.KOL 
            FROM 
                PARTIDA_OUT_EL_NODE PON INNER JOIN PARTIDA_EL_NODE PEN ON PON.OUT_EL_ID =:R_OUT_EL_ID 
                AND PEN.ID = PON.PARTIDA_NODE_ID 
                INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
                INNER JOIN PARTIDA_EL ON PARTIDA_EL.ID = PN.ELEMENT_ID 
                INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PARTIDA_EL.ID 
            INTO 
                :R_PARTIDA_SROK,:R_PARTIDA_NUM,:L_PARTIDA_KOL 
            DO BEGIN 
                R_KOL = L_PARTIDA_KOL; 
                SUSPEND; 
            END 
        END 
        ELSE 
            SUSPEND; 
     END 
END^


ALTER PROCEDURE GET_PRODUK_ZAIAVKA (
    OPR_ID TYPE OF DOM_KEY,
    P_BARCODE TYPE OF DOM_KEY,
    P_SKLAD_ID VARCHAR(3000),
    P_SHOW_IZL TYPE OF DOM_KEY_SMALL)
RETURNS (
    R_SIMPLEID TYPE OF DOM_KEY,
    R_SIMPLENAME TYPE OF DOM_CHAR_100,
    R_CODE TYPE OF DOM_CHAR_50,
    R_MEID TYPE OF DOM_KEY,
    R_ME CHAR(2),
    R_CENA_CL TYPE OF DOM_CENA,
    R_DDS DECIMAL(4,2),
    R_GRNAME TYPE OF DOM_CHAR_100,
    R_MEKOEF TYPE OF DOM_SMAL_INT,
    R_BARCODE VARCHAR(13),
    R_KLINAME TYPE OF DOM_CHAR_100,
    R_KOLKRIMAX FLOAT,
    R_KOLKRIMIN FLOAT,
    R_SKLADID INTEGER,
    R_KLI_ID INTEGER,
    R_SKLAD_NAME TYPE OF DOM_CHAR_50,
    R_USE_PROP SMALLINT,
    R_CODE_2 TYPE OF DOM_CHAR_50,
    R_KOL_NAL TYPE OF DOM_KOL,
    R_LAST_CENA TYPE OF DOM_CENA,
    R_KOL_RZV TYPE OF DOM_KOL)
AS
declare variable L_SYSTEM_SKLAD_ID integer; 
declare variable L_SQL varchar(3000); 
BEGIN 
    SELECT SYSTEM.H_SKLAD FROM SYSTEM INTO :L_SYSTEM_SKLAD_ID; 
 
    L_SQL ='SELECT 
        SIMPLE.ID, 
        SIMPLE.NAME, 
        SIMPLE.CODE, 
        SIMPLE.ME_ID, 
        SIMPLE.KOL_KRI_MIN, 
        SIMPLE.KOL_KRI_MAX, 
        ME.NAME AS ME, 
        SIMPLE.DDS AS D_D_S, 
        SELEKCIQ.NAME AS GR_NAME, 
        COALESCE(ME.KOEF,0) AS ME_KOEF, 
        SIMPLE.CODE2, '; 
 
    IF (P_BARCODE = 1) THEN 
        L_SQL = L_SQL||'(SELECT FIRST 1 BAR."BARCODE"  FROM  BARCODE BAR WHERE BAR.SIMPLE_ID= SIMPLE.ID) AS BAR_CODE,'; 
    ELSE 
        L_SQL = L_SQL|| ''''' AS BAR_CODE,'; 
 
    L_SQL = L_SQL||'SIMPLE.USE_PROP, 
 
   (SELECT CENA FROM CENOVA_LISTA_EL WHERE SIMPLE_ID= SIMPLE.ID AND OPR_ID = '||:OPR_ID||') 
    FROM 
        SIMPLE 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
    WHERE 
        SIMPLE."ACTIVE" <> ''0'' AND 
        SIMPLE.USLUGA <> ''1'' 
    ORDER BY 2'; 
 
    FOR SELECT 
        SKLAD.ID, 
        SKLAD.NAME 
    FROM 
        SKLAD 
    WHERE 
        SKLAD.ID <> :L_SYSTEM_SKLAD_ID 
        AND (:P_SKLAD_ID LIKE '%,'||SKLAD.ID||',%') 
 
    INTO 
        :R_SKLADID, :R_SKLAD_NAME 
 
 
 
    DO BEGIN 
 
        FOR EXECUTE STATEMENT L_SQL 
        INTO 
 
            :R_SIMPLEID,:R_SIMPLENAME,:R_CODE,:R_MEID,:R_KOLKRIMIN,:R_KOLKRIMAX, 
            :R_ME,:R_DDS,:R_GRNAME,:R_MEKOEF,:R_CODE_2,:R_BARCODE,:R_USE_PROP,:R_CENA_CL 
        DO BEGIN 
            R_KOL_NAL = NULL; 
            R_LAST_CENA = NULL; 
            R_KOL_RZV = NULL; 
            SELECT 
                IIF(:P_SHOW_IZL = 1, ROUND(NAL.KOL_NAL - NAL.KOL_IZL,5),NAL.KOL_NAL) as KOL_NAL, 
                NAL.LAST_CENA, 
                NAL.KOL_RZV 
            FROM 
                NAL 
            WHERE 
                NAL.SIMPLE_ID =:R_SIMPLEID AND NAL.SKLAD_ID =:R_SKLADID 
            INTO :R_KOL_NAL, :R_LAST_CENA, :R_KOL_RZV; 
 
            R_KLINAME = NULL; 
            R_KLI_ID = NULL; 
 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_PROP_PRODUKT_POR (
    P_POR_EL_ID INTEGER)
RETURNS (
    R_STAUS INTEGER)
AS
begin 
  r_staus = 0; 
  select first 1 id 
  from por_prop_node 
  where 
    por_el_id = :p_por_el_id 
  into :r_staus; 
end^


ALTER PROCEDURE GET_PROV_NAL_RAZLIKI
RETURNS (
    R_IN_EL_ID INTEGER,
    R_SUMA_IN_FR DOUBLE PRECISION,
    R_SUMA_IN_SR DOUBLE PRECISION,
    R_SUMA_OUT_FR DOUBLE PRECISION,
    R_SUMA_OUT_SR DOUBLE PRECISION,
    R_ELEMENT_ID INTEGER,
    R_PARTIDA_ID INTEGER)
AS
BEGIN
/*V.2 - ИЗВЛИЧАНЕ НА ИЗЧЕРПАНИ ПАРТИДИ С РАЗЛИКИ В СУМИТЕ ОТ ВХОД И ИЗХОД
ИЗПОЛЗВА СЕ В ПРОВЕРКА НАЛИЧНОСТИ->РАЗЛИКИ PO WHOD/IZHOD*/

    FOR SELECT
        PIN.IN_EL_ID,
        PEN.PARTIDA_ID,
        PEN.SUMA_FR,
        PEN.SUMA_SR
    FROM
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.PARTIDA_NODE_ID = PEN.ID
    INTO
        :R_IN_EL_ID,:R_PARTIDA_ID,:R_SUMA_IN_FR,:R_SUMA_IN_SR
    DO BEGIN
        SELECT
            PN.ELEMENT_ID,
            SUM(PEN.SUMA_FR),
            SUM(PEN.SUMA_SR)
        FROM
            PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PEN.PARTIDA_ID = :R_PARTIDA_ID
            AND PEN.ID = PON.PARTIDA_NODE_ID
            INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID
        GROUP BY 1
        INTO
            :R_ELEMENT_ID,:R_SUMA_OUT_FR,:R_SUMA_OUT_SR;

        IF ((ROUND(R_SUMA_IN_FR,2) <> ROUND(R_SUMA_OUT_FR,2))
        OR (ROUND(R_SUMA_IN_SR,2) <> ROUND(R_SUMA_OUT_SR,2))) THEN
            SUSPEND;
    END
END^


ALTER PROCEDURE GET_PROVERKA_NAL (
    P_FLAG_FKT SMALLINT)
RETURNS (
    SIMPLE_ID INTEGER,
    SKLAD_ID SMALLINT,
    F_KOL DOUBLE PRECISION,
    F_SUMA_FR DOUBLE PRECISION,
    F_SUMA_SR DOUBLE PRECISION,
    S_KOL DOUBLE PRECISION,
    S_SUMA_FR DOUBLE PRECISION,
    S_SUMA_SR DOUBLE PRECISION,
    PAR_KOL DOUBLE PRECISION,
    PAR_SUMA_FR DOUBLE PRECISION,
    PAR_SUMA_SR DOUBLE PRECISION,
    P_KOL DOUBLE PRECISION,
    P_SUMA_FR DOUBLE PRECISION)
AS
BEGIN 
    FOR SELECT 
        PREPARE_PROVERKA_NAL.SIMPLE_ID, 
        PREPARE_PROVERKA_NAL.SKLAD_ID, 
        ROUND(SUM(PREPARE_PROVERKA_NAL.F_KOL),5),
        ROUND(SUM(PREPARE_PROVERKA_NAL.F_SUMA_FR),2),
        ROUND(SUM(PREPARE_PROVERKA_NAL.F_SUMA_SR),2),
        ROUND(SUM(PREPARE_PROVERKA_NAL.S_KOL),5),
        ROUND(SUM(PREPARE_PROVERKA_NAL.S_SUMA_FR),2),
        ROUND(SUM(PREPARE_PROVERKA_NAL.S_SUMA_SR),2),
        ROUND(SUM(PREPARE_PROVERKA_NAL.PAR_KOL),5),
        ROUND(SUM(PREPARE_PROVERKA_NAL.PAR_SUMA_FR),2),
        ROUND(SUM(PREPARE_PROVERKA_NAL.PAR_SUMA_SR),2),
        ROUND(SUM(PREPARE_PROVERKA_NAL.P_KOL),5),
        ROUND(SUM(PREPARE_PROVERKA_NAL.P_SUMA_FR),2)
    FROM 
        PREPARE_PROVERKA_NAL(:P_FLAG_FKT) 
    GROUP BY 1,2 
    INTO 
        :SIMPLE_ID,:SKLAD_ID,:F_KOL,:F_SUMA_FR,:F_SUMA_SR,:S_KOL,:S_SUMA_FR,:S_SUMA_SR, 
        :PAR_KOL,:PAR_SUMA_FR,:PAR_SUMA_SR,:P_KOL,:P_SUMA_FR
    DO 
        SUSPEND; 
END^


ALTER PROCEDURE GET_PROVERKA_POR (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY)
RETURNS (
    SIMPLE_ID TYPE OF DOM_KEY,
    CODE TYPE OF DOM_CHAR_50,
    NAME TYPE OF DOM_CHAR_100,
    ME_ID TYPE OF DOM_SMAL_INT,
    ME CHAR(2),
    NAL_KOL TYPE OF DOM_KOL,
    NAL_KOL_ZRV TYPE OF DOM_KOL)
AS
BEGIN 
  if (p_sklad_id = 0) then begin 
    FOR SELECT distinct 
      por_el.simple_id, 
      simple.code, 
      simple.name, 
      me.id as me_id, 
      me.name as me, 
      nal.kol_nal AS nal_kol, 
      nal.kol_rzv nal_kol_zrv 
    FROM por_el 
    JOIN simple ON simple.id = por_el.simple_id 
    JOIN por ON por.opr_id = por_el.opr_id AND por.opr_id = :p_opr_id 
    LEFT JOIN nal ON nal.simple_id = por_el.simple_id AND nal.sklad_id = por.sklad_id 
    LEFT JOIN por_el_raz_node ON por_el_raz_node.por_el_id = por_el.id 
    LEFT JOIN razfasovka ON razfasovka.id = por_el_raz_node.razfasovka_id 
    join me on me.id = simple.me_id 
    INTO :SIMPLE_ID,:CODE,:NAME,:ME_ID,:ME,:NAL_KOL,:NAL_KOL_ZRV 
    DO SUSPEND; 
  end 
  else begin 
    FOR SELECT distinct 
      por_el.simple_id, 
      simple.code, 
      simple.name, 
      me.id as me_id, 
      me.name as me, 
      nal.kol_nal AS nal_kol, 
      nal.kol_rzv nal_kol_zrv 
    FROM por_el 
    JOIN simple ON simple.id = por_el.simple_id 
    JOIN por ON por.opr_id = por_el.opr_id AND por.opr_id = :p_opr_id 
    LEFT JOIN nal ON nal.simple_id = por_el.simple_id AND nal.sklad_id = :p_sklad_id 
    LEFT JOIN por_el_raz_node ON por_el_raz_node.por_el_id = por_el.id 
    LEFT JOIN razfasovka ON razfasovka.id = por_el_raz_node.razfasovka_id 
    join me on me.id = simple.me_id 
    INTO :SIMPLE_ID,:CODE,:NAME,:ME_ID,:ME,:NAL_KOL,:NAL_KOL_ZRV 
    DO SUSPEND; 
  end 
END^


ALTER PROCEDURE GET_QUANTITY_CALC_PARAMS (
    P_REQUEST_EL_ID TYPE OF DOM_KEY,
    P_COUNT TYPE OF DOM_KOL)
RETURNS (
    R_PARAM_QTY TYPE OF DOM_KOL)
AS
declare variable L_PARAM_QTY type of DOM_KOL; 
declare variable L_TOTAL_QTY type of DOM_KOL; 
BEGIN 
    FOR 
        SELECT DISTINCT 
            PRFP.QUANTITY 
        FROM 
            PR_REQUEST_FORMULA_PARAMS PRFP 
        WHERE 
            PRFP.REQUEST_EL_ID =:P_REQUEST_EL_ID 
            AND UPPER(PRFP."VARIABLE") <> UPPER('C') 
        INTO :L_PARAM_QTY 
 
    DO 
        R_PARAM_QTY = COALESCE(:R_PARAM_QTY, 1) * :L_PARAM_QTY/100; 
 
    R_PARAM_QTY =ROUND(:R_PARAM_QTY * P_COUNT, 5); 
    SUSPEND; 
END^


ALTER PROCEDURE GET_QUANTITY_CALC_PARAMS_V1 (
    P_ORDER_EL_ID TYPE OF DOM_KEY,
    P_COUNT TYPE OF DOM_KOL)
RETURNS (
    R_PARAM_QTY TYPE OF DOM_KOL)
AS
declare variable L_PARAM_QTY type of DOM_KOL; 
declare variable L_TOTAL_QTY type of DOM_KOL; 
BEGIN 
    FOR 
        SELECT DISTINCT 
            PRFP.QUANTITY 
        FROM 
            POR_FORMULA_PARAMS PRFP 
        WHERE 
            PRFP.POR_EL_ID =:P_ORDER_EL_ID 
            AND UPPER(PRFP."VARIABLE") <> UPPER('C') 
        INTO :L_PARAM_QTY 
 
    DO 
        R_PARAM_QTY = COALESCE(:R_PARAM_QTY, 1) * :L_PARAM_QTY/100; 
 
    R_PARAM_QTY =ROUND(:R_PARAM_QTY * P_COUNT, 5); 
    SUSPEND; 
END^


ALTER PROCEDURE GET_RAZBITI (
    P_OT DATE,
    P_DO DATE,
    P_OBOB_OUT INTEGER,
    P_OBOB_IN INTEGER,
    P_FILTER VARCHAR(2000),
    P_OBOB_PROD INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_TIP INTEGER,
    R_DATE DATE,
    R_SKLAD_ID SMALLINT,
    R_NOM INTEGER)
AS
DECLARE VARIABLE L_DATE DATE; 
DECLARE VARIABLE L_H_SKLAD SMALLINT; 
DECLARE VARIABLE L_IMA INTEGER; 
DECLARE VARIABLE L_VARNATA_STOKA DOUBLE PRECISION; 
DECLARE VARIABLE L_NEXT_DATE DATE; 
DECLARE VARIABLE L_CHANGE_NUM SMALLINT; 
BEGIN 
  IF (P_FILTER = '' OR P_FILTER IS NULL) THEN 
    P_FILTER = '(1=1)'; 
 
  SELECT 
    SYSTEM.H_SKLAD 
  FROM 
    SYSTEM 
  INTO 
    :L_H_SKLAD; 
 
  R_NOM = 1;   /*ПОРЕДЕН НОМЕР НА КОЛОНА*/ 
  L_IMA = 0; 
 
  L_DATE = P_OT; 
 
  /*ДОСТАВКИ*/ 
  /*==========*/ 
  IF (P_OBOB_IN IN (1,2)) THEN BEGIN 
    WHILE (L_DATE <= P_DO) DO BEGIN 
      FOR EXECUTE STATEMENT 
      'SELECT 
        IN_EL.SIMPLE_ID, 
        OPR.SKLAD_ID, 
        SUM(IN_EL.KOL) 
      FROM 
        OPR INNER JOIN IN_EL ON OPR.ID = IN_EL.OPR_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
      WHERE 
        OPR.OPR_TIP = 1 AND 
        OPR.OPR_DATE = ''' || :L_DATE || ''' AND 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND NOT OPR.SKLAD_ID = ' || :L_H_SKLAD || ' 
        AND ' || :P_FILTER || 
      'GROUP BY 1, 2' 
      INTO 
        :R_SIMPLE_ID, R_SKLAD_ID,  :R_KOL 
      DO 
      BEGIN 
        L_IMA = 1; 
        R_DATE = L_DATE; 
        R_TIP = 1; 
        L_CHANGE_NUM = 0; 
 
        EXECUTE STATEMENT 
        'SELECT FIRST 1 
            OPR.OPR_DATE 
        FROM 
            OPR INNER JOIN IN_EL ON OPR.ID = IN_EL.OPR_ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
        WHERE 
            OPR.OPR_TIP = 1 AND 
            OPR.OPR_DATE >''' || :L_DATE || ''' AND OPR.OPR_DATE <= ''' ||:P_DO || 
            ''' AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND NOT OPR.SKLAD_ID = ' || :L_H_SKLAD || ' 
            AND ' || :P_FILTER 
 
        INTO :L_NEXT_DATE; 
 
        SUSPEND; 
      END 
 
      IF (L_IMA = 1) THEN BEGIN 
        IF (P_OBOB_IN = 2) THEN BEGIN 
            IF (NOT (EXTRACT(YEAR FROM :L_DATE) = EXTRACT(YEAR FROM :L_NEXT_DATE) 
            AND (EXTRACT(MONTH FROM :L_DATE) = EXTRACT(MONTH FROM :L_NEXT_DATE)))) THEN 
            BEGIN 
                R_NOM = R_NOM + 1; 
                L_CHANGE_NUM = 1; 
            END 
        END 
        ELSE 
        BEGIN 
            R_NOM = R_NOM + 1; 
            L_CHANGE_NUM = 1; 
        END 
        L_IMA = 0; 
      END 
 
      L_DATE = L_DATE + 1; 
      --R_TIP = 0; 
      --R_SIMPLE_ID = NULL; 
      --R_KOL = NULL; 
 
      --SUSPEND; 
    END 
  END 
  ELSE BEGIN 
      FOR EXECUTE STATEMENT 
      'SELECT 
        IN_EL.SIMPLE_ID, 
        OPR.SKLAD_ID, 
        SUM(IN_EL.KOL) 
      FROM 
        OPR INNER JOIN IN_EL ON OPR.ID = IN_EL.OPR_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
      WHERE 
        OPR.OPR_TIP = 1 AND 
        (OPR.OPR_DATE >= ''' || :P_OT || ''' AND OPR.OPR_DATE <=  ''' || :P_DO || ''' )  AND 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND NOT OPR.SKLAD_ID = ' || :L_H_SKLAD || ' 
        AND ' || :P_FILTER || 
      ' GROUP BY 1, 2' 
      INTO 
        :R_SIMPLE_ID, :R_SKLAD_ID, :R_KOL 
      DO 
      BEGIN 
        --R_NOM = R_NOM + 1; 
        L_IMA = 1; 
        R_DATE = L_DATE; 
        R_TIP = 1; 
        L_CHANGE_NUM = 0; 
        SUSPEND; 
      END 
 
 
      IF (L_IMA = 1) THEN BEGIN 
        R_NOM = R_NOM + 1; 
        L_IMA = 0; 
        L_CHANGE_NUM = 1; 
      END 
  END 
 
 
  /*ПРОДАЖБИ*/ 
  /*==========*/ 
  L_DATE = P_OT; 
 
  IF (P_OBOB_OUT IN (1,2)) THEN BEGIN 
 
    IF (L_CHANGE_NUM = 0) THEN R_NOM = R_NOM + 1; 
 
    WHILE (L_DATE <= P_DO) DO BEGIN 
      FOR EXECUTE STATEMENT 
      'SELECT 
        OUT_EL.SIMPLE_ID, 
        OPR.SKLAD_ID, 
        SUM(OUT_EL.KOL) 
      FROM 
        OPR INNER JOIN OUT_EL ON OPR.ID = OUT_EL.OPR_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
      WHERE 
        OPR.OPR_TIP = 2 AND 
        OPR.OPR_DATE = ''' || :L_DATE || ''' AND 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND NOT OPR.SKLAD_ID = ' || :L_H_SKLAD || ' 
        AND ' || :P_FILTER || 
      ' GROUP BY 1, 2' 
      INTO 
        :R_SIMPLE_ID, R_SKLAD_ID, :R_KOL 
      DO 
      BEGIN 
        L_VARNATA_STOKA = 0; 
        IF (P_OBOB_PROD = 0) THEN 
        SELECT 
            SUM(IN_EL.KOL) 
        FROM 
            OPR INNER JOIN IN_EL ON OPR.ID = IN_EL.OPR_ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
        WHERE 
            OPR.OPR_TIP = 26 AND OPR.OPR_DATE=(SELECT 
                                OPR1.OPR_DATE 
                            FROM 
                                OPR_RAZPAD_NODE 
                                INNER JOIN OUT_EL ON OUT_EL.ID = OPR_RAZPAD_NODE.OUT_EL_ID 
                                INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
                                INNER JOIN OPR OPR1 ON OPR1.ID = IN_EL.OPR_ID 
                                WHERE OPR_RAZPAD_NODE.IN_EL_ID =IN_EL.ID AND OPR.OPR_DATE=:L_DATE) AND 
            NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) AND 
            OPR.SKLAD_ID =:R_SKLAD_ID AND IN_EL.SIMPLE_ID =:R_SIMPLE_ID 
        INTO :L_VARNATA_STOKA; 
 
        R_KOL = R_KOL - COALESCE(L_VARNATA_STOKA,0); 
 
        L_IMA = 1; 
        R_DATE = L_DATE; 
        R_TIP = 2; 
        L_CHANGE_NUM = 0; 
        SUSPEND; 
      END 
 
 
      --R_TIP = 0; 
      --R_SIMPLE_ID = NULL; 
      --R_KOL = NULL; 
 
      --SUSPEND; 
 
    EXECUTE STATEMENT 
    'SELECT FIRST 1 
        OPR.OPR_DATE 
    FROM 
        OPR INNER JOIN OUT_EL ON OPR.ID = OUT_EL.OPR_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
    WHERE 
        OPR.OPR_TIP = 2 AND 
        OPR.OPR_DATE > ''' || :L_DATE || ''' AND OPR.OPR_DATE <= ''' || :P_DO || ''' 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND NOT OPR.SKLAD_ID = ' || :L_H_SKLAD || ' 
        AND ' || :P_FILTER 
 
    INTO :L_NEXT_DATE; 
 
      IF (L_IMA = 1) THEN BEGIN 
        IF (P_OBOB_OUT = 2) THEN BEGIN 
            IF (NOT (EXTRACT(YEAR FROM :L_DATE) = EXTRACT(YEAR FROM :L_NEXT_DATE) 
            AND (EXTRACT(MONTH FROM :L_DATE) = EXTRACT(MONTH FROM :L_NEXT_DATE)))) THEN 
            BEGIN 
                R_NOM = R_NOM + 1; 
                L_CHANGE_NUM = 1; 
            END 
        END 
        ELSE 
        BEGIN 
            R_NOM = R_NOM + 1; 
            L_CHANGE_NUM = 1; 
        END 
        L_IMA = 0; 
      END 
    L_DATE = L_DATE + 1; 
 
    END 
  END 
  ELSE BEGIN 
 
      IF (L_CHANGE_NUM = 0) THEN R_NOM = R_NOM + 1; 
 
      FOR EXECUTE STATEMENT 
      'SELECT 
        OUT_EL.SIMPLE_ID, 
        OPR.SKLAD_ID, 
        SUM(OUT_EL.KOL) 
      FROM 
        OPR INNER JOIN OUT_EL ON OPR.ID = OUT_EL.OPR_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
      WHERE 
        OPR.OPR_TIP = 2 AND 
        (OPR.OPR_DATE >= ''' || :P_OT || ''' AND OPR.OPR_DATE <= ''' || :P_DO || ''')  AND 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND NOT OPR.SKLAD_ID = ' || :L_H_SKLAD || ' 
        AND ' || P_FILTER || 
        ' GROUP BY 1, 2' 
      INTO 
        :R_SIMPLE_ID, R_SKLAD_ID, :R_KOL 
      DO   BEGIN 
 
      L_VARNATA_STOKA = 0; 
        IF (P_OBOB_PROD = 0) THEN 
        SELECT 
            SUM(IN_EL.KOL) 
        FROM 
            OPR INNER JOIN IN_EL ON OPR.ID = IN_EL.OPR_ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
        WHERE 
            OPR.OPR_TIP = 26 AND OPR.OPR_DATE=(SELECT 
                                OPR1.OPR_DATE 
                            FROM 
                                OPR_RAZPAD_NODE 
                                INNER JOIN OUT_EL ON OUT_EL.ID = OPR_RAZPAD_NODE.OUT_EL_ID 
                                INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
                                INNER JOIN OPR OPR1 ON OPR1.ID = IN_EL.OPR_ID 
                                WHERE OPR_RAZPAD_NODE.IN_EL_ID =IN_EL.ID AND OPR.OPR_DATE>:P_OT AND OPR.OPR_DATE <=:P_DO) AND 
            NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) AND 
            OPR.SKLAD_ID =:R_SKLAD_ID AND IN_EL.SIMPLE_ID =:R_SIMPLE_ID 
        INTO :L_VARNATA_STOKA; 
 
        R_KOL = R_KOL - COALESCE(L_VARNATA_STOKA,0); 
 
        L_IMA = 1; 
        R_DATE = L_DATE; 
        R_TIP = 2; 
        L_CHANGE_NUM = 0; 
        SUSPEND; 
      END 
 
      IF (L_IMA = 1) THEN BEGIN 
        --IF (NOT (EXTRACT(YEAR FROM :L_DATE) = EXTRACT(YEAR FROM :L_PREV_DATE) 
        --AND (EXTRACT(MONTH FROM :L_DATE) = EXTRACT(MONTH FROM :L_PREV_DATE)))) THEN 
            R_NOM = R_NOM + 1; 
            L_CHANGE_NUM = 1; 
        L_IMA = 0; 
      END 
  END 
 
 
  /*ИЗПИСВАНЕ*/ 
  /*==========*/ 
  L_DATE = P_OT; 
 
  IF (L_CHANGE_NUM = 0) THEN R_NOM = R_NOM + 1; 
 
  FOR EXECUTE STATEMENT 
  'SELECT 
    OUT_EL.SIMPLE_ID, 
    OPR.SKLAD_ID, 
    SUM(OUT_EL.KOL) 
  FROM 
    OPR INNER JOIN OUT_EL ON OPR.ID = OUT_EL.OPR_ID 
    INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
  WHERE 
    OPR.OPR_TIP = 11 AND 
    (OPR.OPR_DATE >= ''' || :P_OT || ''' AND OPR.OPR_DATE <= ''' || :P_DO || ''')  AND 
    NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
    AND NOT OPR.SKLAD_ID = ' || :L_H_SKLAD || ' 
    AND ' || P_FILTER || 
    ' GROUP BY 1, 2' 
  INTO 
    :R_SIMPLE_ID, R_SKLAD_ID, :R_KOL 
  DO 
  BEGIN 
    L_IMA = 1; 
    R_DATE = L_DATE; 
    R_TIP = 3; 
    L_CHANGE_NUM = 0; 
    SUSPEND; 
  END 
 
  IF (L_IMA = 1) THEN BEGIN 
    R_NOM = R_NOM + 1; 
    L_IMA = 0; 
    L_CHANGE_NUM = 1; 
  END 
 
  L_DATE = P_OT; 
 
 /*ВРЪЩАНЕ НА СТОКА ОТ КЛИЕНТ*/ 
 
IF (L_CHANGE_NUM = 0) THEN R_NOM = R_NOM + 1; 
IF (P_OBOB_PROD = 1) THEN 
 
  FOR EXECUTE STATEMENT 
  'SELECT 
    IN_EL.SIMPLE_ID, 
    OPR.SKLAD_ID, 
    SUM(IN_EL.KOL) 
  FROM 
    OPR INNER JOIN IN_EL ON OPR.ID = IN_EL.OPR_ID 
    INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
  WHERE 
    OPR.OPR_TIP = 26 AND 
    (OPR.OPR_DATE >= ''' || :P_OT || ''' AND OPR.OPR_DATE <= ''' || :P_DO || ''')  AND 
    NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
    AND NOT OPR.SKLAD_ID = ' || :L_H_SKLAD || ' 
    AND ' || P_FILTER || 
    ' GROUP BY 1, 2' 
  INTO 
    :R_SIMPLE_ID, R_SKLAD_ID, :R_KOL 
  DO 
  BEGIN 
    --R_NOM = R_NOM + 1; 
    L_IMA = 1; 
    R_DATE = L_DATE; 
    R_TIP = 4; 
    SUSPEND; 
  END 
 
 /*ПРЕХВЪРЛЯНЕ КЪМ*/ 
  /*==========*/ 
  L_DATE = P_OT; 
 
  IF (L_CHANGE_NUM = 0) THEN R_NOM = R_NOM + 1; 
 
  FOR EXECUTE STATEMENT 
  'SELECT 
    IN_EL.SIMPLE_ID, 
    OPR.SKLAD_ID, 
    SUM(IN_EL.KOL) 
  FROM 
    OPR INNER JOIN IN_EL ON OPR.ID = IN_EL.OPR_ID 
    INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
  WHERE 
    OPR.OPR_TIP = 4 AND 
    (OPR.OPR_DATE >= ''' || :P_OT || ''' AND OPR.OPR_DATE <= ''' || :P_DO || ''')  AND 
    NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
    AND NOT OPR.SKLAD_ID = ' || :L_H_SKLAD || ' 
    AND ' || P_FILTER || 
    ' GROUP BY 1, 2' 
  INTO 
    :R_SIMPLE_ID, R_SKLAD_ID, :R_KOL 
  DO 
  BEGIN 
    L_IMA = 1; 
    R_DATE = L_DATE; 
    R_TIP = 5; 
    L_CHANGE_NUM = 0; 
    SUSPEND; 
  END 
 
  IF (L_IMA = 1) THEN BEGIN 
    R_NOM = R_NOM + 1; 
    L_IMA = 0; 
    L_CHANGE_NUM = 1; 
  END 
 
  L_DATE = P_OT; 
 
  /*ПРЕХВЪРЛЯНЕ ОТ*/ 
  /*==========*/ 
  L_DATE = P_OT; 
 
  IF (L_CHANGE_NUM = 0) THEN R_NOM = R_NOM + 1; 
 
  FOR EXECUTE STATEMENT 
  'SELECT 
    OUT_EL.SIMPLE_ID, 
    OPR.SKLAD_ID, 
    SUM(OUT_EL.KOL) 
  FROM 
    OPR INNER JOIN OUT_EL ON OPR.ID = OUT_EL.OPR_ID 
    INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
  WHERE 
    OPR.OPR_TIP = 9 AND 
    (OPR.OPR_DATE >= ''' || :P_OT || ''' AND OPR.OPR_DATE <= ''' || :P_DO || ''')  AND 
    NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
    AND NOT OPR.SKLAD_ID = ' || :L_H_SKLAD || ' 
    AND ' || P_FILTER || 
    ' GROUP BY 1, 2' 
  INTO 
    :R_SIMPLE_ID, R_SKLAD_ID, :R_KOL 
  DO 
  BEGIN 
    L_IMA = 1; 
    R_DATE = L_DATE; 
    R_TIP = 6; 
    L_CHANGE_NUM = 0; 
    SUSPEND; 
  END 
 
  IF (L_IMA = 1) THEN BEGIN 
    R_NOM = R_NOM + 1; 
    L_IMA = 0; 
    L_CHANGE_NUM = 1; 
  END 
 
  L_DATE = P_OT; 
 
  /*ЛИПСА ОТ ИНВЕНТАРИЗАЦИЯ*/ 
  /*==========*/ 
  L_DATE = P_OT; 
 
  IF (L_CHANGE_NUM = 0) THEN R_NOM = R_NOM + 1; 
 
  FOR EXECUTE STATEMENT 
  'SELECT 
    OUT_EL.SIMPLE_ID, 
    OPR.SKLAD_ID, 
    SUM(OUT_EL.KOL) 
  FROM 
    OPR INNER JOIN OUT_EL ON OPR.ID = OUT_EL.OPR_ID 
    INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
  WHERE 
    OPR.OPR_TIP = 3 AND 
    (OPR.OPR_DATE >= ''' || :P_OT || ''' AND OPR.OPR_DATE <= ''' || :P_DO || ''')  AND 
    NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
    AND NOT OPR.SKLAD_ID = ' || :L_H_SKLAD || ' 
    AND ' || P_FILTER || 
    ' GROUP BY 1, 2' 
  INTO 
    :R_SIMPLE_ID, R_SKLAD_ID, :R_KOL 
  DO 
  BEGIN 
    L_IMA = 1; 
    R_DATE = L_DATE; 
    R_TIP = 7; 
    L_CHANGE_NUM = 0; 
    SUSPEND; 
  END 
 
  IF (L_IMA = 1) THEN BEGIN 
    R_NOM = R_NOM + 1; 
    L_IMA = 0; 
    L_CHANGE_NUM = 1; 
  END 
 
  L_DATE = P_OT; 
 
  /*ИЗЛИШЪК ОТ ИНВЕНТАРИЗАЦИЯ*/ 
  /*==========*/ 
  L_DATE = P_OT; 
 
  IF (L_CHANGE_NUM = 0) THEN R_NOM = R_NOM + 1; 
 
  FOR EXECUTE STATEMENT 
  'SELECT 
    IN_EL.SIMPLE_ID, 
    OPR.SKLAD_ID, 
    SUM(IN_EL.KOL) 
  FROM 
    OPR INNER JOIN IN_EL ON OPR.ID = IN_EL.OPR_ID 
    INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
  WHERE 
    OPR.OPR_TIP = 3 AND 
    (OPR.OPR_DATE >= ''' || :P_OT || ''' AND OPR.OPR_DATE <= ''' || :P_DO || ''')  AND 
    NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
    AND NOT OPR.SKLAD_ID = ' || :L_H_SKLAD || ' 
    AND ' || P_FILTER || 
    ' GROUP BY 1, 2' 
  INTO 
    :R_SIMPLE_ID, R_SKLAD_ID, :R_KOL 
  DO 
  BEGIN 
    L_IMA = 1; 
    R_DATE = L_DATE; 
    R_TIP = 8; 
    L_CHANGE_NUM = 0; 
    SUSPEND; 
  END 
 
END^


ALTER PROCEDURE GET_RAZHOD_KLI (
    P_PARI_IO INTEGER,
    P_FROM_DATE VARCHAR(30),
    TO_DATE VARCHAR(30),
    P_FILTER_KLI VARCHAR(1000),
    P_FILTER_OBEKTI VARCHAR(1000),
    P_VALUTA INTEGER,
    FLAG_CRYPT INTEGER,
    PASS VARCHAR(24),
    P_TIP INTEGER,
    P_BASE_VALUTA INTEGER,
    P_TIP_SPR INTEGER,
    P_DDS DOUBLE PRECISION)
RETURNS (
    R_SUMA DOUBLE PRECISION,
    PRIH_RAZH_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_SUMA_DDS DOUBLE PRECISION)
AS
declare variable L_SUMA_RAZHOD numeric(10,2); 
declare variable L_SUMA_PRIHOD numeric(10,2); 
declare variable L_SUMA_CRYPT numeric(10,2); 
declare variable L_SUMA_CRYPT_RAZH numeric(10,2); 
declare variable L_SUMA_CRYPT_PRIH numeric(10,2); 
declare variable L_SUMA_PERIOD numeric(10,2); 
declare variable L_KLI_ID integer; 
declare variable L_SUMA_RAZH_IZP double precision; 
declare variable L_PARI_IO_FAK integer; 
declare variable L_SUMA_RAZHOD_DDS double precision; 
declare variable L_SUMA_PRIHOD_DDS double precision; 
declare variable L_SUMA double precision; 
declare variable L_SUMA_DDS double precision; 
declare variable L_SUMA_CRYPT_RAZH_DDS double precision; 
declare variable L_SUMA_CRYPT_DDS double precision; 
declare variable L_SUMA_CRYPT_PRIH_DDS double precision; 
BEGIN 
    L_SUMA_CRYPT = 0; 
 
    SELECT 
        PARI_IO.FAK 
    FROM 
        PARI_IO 
    WHERE 
        PARI_IO.ID =:P_PARI_IO 
    INTO :L_PARI_IO_FAK; 
 
    IF (P_TIP = 0) THEN BEGIN 
        FOR EXECUTE STATEMENT 
            'SELECT 
                OPR.KLI_ID AS ID, 
                KLI.NAME 
            FROM 
                KLI 
                INNER JOIN OPR ON KLI.ID = OPR.KLI_ID 
                INNER JOIN PARI ON PARI.PARI_IO_ID ='||:P_PARI_IO || 'and pari.OPR_ID = opr.id 
            WHERE (1=1)'||:P_FILTER_KLI|| 
            'UNION 
            SELECT 
                -1 AS ID, 
                '' Без контрагент'' 
            FROM 
                RDB$DATABASE 
            UNION  SELECT 
                OPR.KLI_ID AS ID, 
                KLI.NAME 
            FROM 
                KLI 
                INNER JOIN OPR ON KLI.ID = OPR.KLI_ID 
                INNER JOIN PARI_CRYPT ON PARI_CRYPT.PARI_IO_ID ='||:P_PARI_IO || 'AND PARI_CRYPT.OPR_ID = OPR.ID 
            WHERE (1=1)'||:P_FILTER_KLI 
            INTO :L_KLI_ID, :R_KLI_NAME 
    DO BEGIN 
        IF (P_TIP_SPR = 0) THEN BEGIN 
            IF (L_KLI_ID <> -1) THEN 
                EXECUTE STATEMENT 
                    'SELECT 
                        SUM(PARI.SUMA) 
                    FROM 
                        PARI 
                        INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                        INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                    WHERE 
                        PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND opr.OPR_TIP =10 and OPR.KLI_ID ='||:L_KLI_ID||' 
                        AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                        ||:P_FILTER_OBEKTI ||:P_FILTER_KLI  /*Разход*/ 
                    INTO :L_SUMA_RAZHOD; 
            ELSE 
                EXECUTE STATEMENT 
                    'SELECT 
                        SUM(PARI.SUMA) 
                    FROM 
                        PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                        INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                    WHERE 
                        PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND OPR.KLI_ID is null 
                        AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                        ||:P_FILTER_OBEKTI ||:P_FILTER_KLI /*Разход*/ 
                    INTO :L_SUMA_RAZHOD; 
            END 
            ELSE BEGIN 
                L_SUMA = 0; 
                L_SUMA_DDS = 0; 
 
                IF (L_KLI_ID <> -1) THEN 
                FOR EXECUTE STATEMENT 
                    'SELECT 
                        SUM(PARI.SUMA), 
                        SUM(PARI.SUMA) 
                    FROM 
                        PARI 
                        INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                        INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                    WHERE 
                        PARI_IO.ID ='||:P_PARI_IO ||' 
                        AND PARI.TIP = 1 AND opr.OPR_TIP =10 AND OPR.KLI_ID ='||:L_KLI_ID||' 
                        AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                        AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                        ||:P_FILTER_OBEKTI ||:P_FILTER_KLI  /*Разход*/ 
                    || 
                    ' UNION 
                    SELECT 
                        ROUNDD(SUM(PARI.SUMA)/' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                        SUM(PARI.SUMA) 
                    FROM 
                        PARI 
                        INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                        INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                        INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
                    WHERE 
                        PARI_IO.ID ='||:P_PARI_IO ||' 
                        AND PARI.TIP = 1 AND opr.OPR_TIP =10 AND OPR.KLI_ID ='||:L_KLI_ID||' 
                        AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                        ||:P_FILTER_OBEKTI ||:P_FILTER_KLI  /*Разход*/ 
                    INTO :L_SUMA,:L_SUMA_DDS 
                    DO BEGIN 
                        L_SUMA_RAZHOD = COALESCE(:L_SUMA_RAZHOD,0) + COALESCE(:L_SUMA,0); 
                        L_SUMA_RAZHOD_DDS = COALESCE(:L_SUMA_RAZHOD_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
                    END 
            ELSE 
                FOR EXECUTE STATEMENT 
                    'SELECT 
                        SUM(PARI.SUMA), 
                        SUM(PARI.SUMA) 
                    FROM 
                        PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                        INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                    WHERE 
                        PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND OPR.KLI_ID IS NULL 
                        AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                        AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                        ||:P_FILTER_OBEKTI ||:P_FILTER_KLI /*Разход*/ 
                    || 
                    ' UNION 
                    SELECT 
                        ROUNDD(SUM(PARI.SUMA)/' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                        SUM(PARI.SUMA) 
                    FROM 
                        PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                        INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                        INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
                    WHERE 
                        PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND OPR.KLI_ID IS NULL 
                        AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                        ||:P_FILTER_OBEKTI ||:P_FILTER_KLI /*Разход*/ 
                    INTO :L_SUMA,:L_SUMA_DDS 
                DO BEGIN 
                    L_SUMA_RAZHOD = COALESCE(:L_SUMA_RAZHOD,0) + COALESCE(:L_SUMA,0); 
                    L_SUMA_RAZHOD_DDS = COALESCE(:L_SUMA_RAZHOD_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
                END 
            END 
 
            IF (:P_TIP_SPR = 0) THEN BEGIN 
                IF (L_KLI_ID <> -1) THEN 
                    EXECUTE STATEMENT 
                        'SELECT 
                            SUM(PARI.SUMA) 
                        FROM 
                            PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                            INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                        WHERE 
                            PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND OPR.KLI_ID ='||:L_KLI_ID ||' 
                            AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                            ||:P_FILTER_OBEKTI ||:P_FILTER_KLI /*Приход*/ 
                        INTO :L_SUMA_PRIHOD; 
                ELSE 
                    EXECUTE STATEMENT 
                        'SELECT 
                            SUM(PARI.SUMA) 
                        FROM 
                            PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                            INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                        WHERE 
                            PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND OPR.KLI_ID is NULL 
                            AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                            ||:P_FILTER_OBEKTI ||:P_FILTER_KLI/*Приход*/ 
                        INTO :L_SUMA_PRIHOD; 
        END 
        ELSE BEGIN 
            L_SUMA = 0; 
            L_SUMA_DDS = 0; 
 
            IF (L_KLI_ID <> -1) THEN 
                    FOR EXECUTE STATEMENT 
                        'SELECT 
                            SUM(PARI.SUMA), 
                            SUM(PARI.SUMA) 
                        FROM 
                            PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                            INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                        WHERE 
                            PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND OPR.KLI_ID ='||:L_KLI_ID ||' 
                            AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                            AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                            ||:P_FILTER_OBEKTI ||:P_FILTER_KLI /*Приход*/ 
                        || 
                        ' UNION 
                        SELECT 
                            ROUNDD(SUM(PARI.SUMA)/' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                            SUM(PARI.SUMA) 
                        FROM 
                            PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                            INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                            INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
                        WHERE 
                            PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND OPR.KLI_ID ='||:L_KLI_ID ||' 
                            AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                            ||:P_FILTER_OBEKTI ||:P_FILTER_KLI /*Приход*/ 
                        INTO :L_SUMA,:L_SUMA_DDS 
                        DO BEGIN 
                            L_SUMA_PRIHOD = COALESCE(:L_SUMA_PRIHOD,0) + COALESCE(:L_SUMA,0); 
                            L_SUMA_PRIHOD_DDS = COALESCE(:L_SUMA_PRIHOD_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
                        END 
                ELSE 
                    FOR EXECUTE STATEMENT 
                        'SELECT 
                            SUM(PARI.SUMA), 
                            SUM(PARI.SUMA) 
                        FROM 
                            PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                            INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                        WHERE 
                            PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND OPR.KLI_ID IS NULL 
                            AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                            AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                            ||:P_FILTER_OBEKTI ||:P_FILTER_KLI/*Приход*/ 
                        || 
                        ' UNION 
                        SELECT 
                            ROUNDD(SUM(PARI.SUMA)/' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                            SUM(PARI.SUMA) 
                        FROM 
                            PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                            INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                            INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
                        WHERE 
                            PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND OPR.KLI_ID IS NULL 
                            AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                            ||:P_FILTER_OBEKTI ||:P_FILTER_KLI/*Приход*/ 
                        INTO :L_SUMA,:L_SUMA_DDS 
                    DO BEGIN 
                        L_SUMA_PRIHOD = COALESCE(:L_SUMA_PRIHOD,0) + COALESCE(:L_SUMA,0); 
                        L_SUMA_PRIHOD_DDS = COALESCE(:L_SUMA_PRIHOD_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
                    END 
        END 
    if (FLAG_CRYPT = 1) THEN BEGIN 
 
    IF (:P_TIP_SPR = 0) THEN BEGIN 
        if (L_KLI_ID <> -1) THEN 
            EXECUTE STATEMENT 
                'SELECT 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND OPR.KLI_ID ='||:L_KLI_ID||' 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_OBEKTI /*Разход криптирана каса*/ 
                INTO :L_SUMA_CRYPT_RAZH; 
            ELSE 
            EXECUTE STATEMENT 
                'SELECT 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND OPR.KLI_ID IS NULL 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_OBEKTI /*Разход криптирана каса*/ 
                INTO :L_SUMA_CRYPT_RAZH; 
    END 
    ELSE BEGIN 
        L_SUMA = 0; 
        L_SUMA_DDS = 0; 
 
        if (L_KLI_ID <> -1) THEN 
            FOR EXECUTE STATEMENT 
                'SELECT 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND OPR.KLI_ID ='||:L_KLI_ID||' 
                    AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_OBEKTI /*Разход криптирана каса*/ 
                || 
                ' UNION 
                SELECT 
                    ROUNDD(SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2)))/' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                    INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND OPR.KLI_ID ='||:L_KLI_ID||' 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_OBEKTI /*Разход криптирана каса*/ 
                INTO :L_SUMA,:L_SUMA_DDS 
                DO BEGIN 
                    L_SUMA_CRYPT_RAZH = COALESCE(:L_SUMA_CRYPT_RAZH,0) + COALESCE(:L_SUMA,0); 
                    L_SUMA_CRYPT_RAZH_DDS = COALESCE(:L_SUMA_CRYPT_RAZH_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
                END 
            ELSE 
                FOR EXECUTE STATEMENT 
                'SELECT 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND OPR.KLI_ID IS NULL 
                    AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_OBEKTI /*Разход криптирана каса*/ 
                || 
                ' UNION 
                SELECT 
                    ROUNDD(SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2)))/' || CAST(:P_DDS AS VARCHAR(5)) || ') 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND OPR.KLI_ID IS NULL 
                    AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_OBEKTI /*Разход криптирана каса*/ 
                INTO :L_SUMA,:L_SUMA_DDS 
                DO BEGIN 
                    L_SUMA_CRYPT_RAZH = COALESCE(:L_SUMA_CRYPT_RAZH,0) + COALESCE(:L_SUMA,0); 
                    L_SUMA_CRYPT_RAZH_DDS = COALESCE(:L_SUMA_CRYPT_RAZH_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
                END 
    END 
 
    IF (:P_TIP_SPR = 0) THEN BEGIN 
        IF (L_KLI_ID <> -1) THEN 
            EXECUTE STATEMENT 
                'SELECT 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND OPR.KLI_ID ='||:L_KLI_ID||' 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_OBEKTI/*Приход криптирана каса*/ 
                INTO :L_SUMA_CRYPT_PRIH; 
        ELSE 
            EXECUTE STATEMENT 
                'SELECT 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND OPR.KLI_ID IS NULL 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_OBEKTI/*Приход криптирана каса*/ 
                INTO :L_SUMA_CRYPT_PRIH; 
        END 
        ELSE BEGIN 
            L_SUMA = 0; 
            L_SUMA_DDS = 0; 
 
            IF (L_KLI_ID <> -1) THEN 
            FOR EXECUTE STATEMENT 
                'SELECT 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND OPR.KLI_ID ='||:L_KLI_ID||' 
                    AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_OBEKTI/*Приход криптирана каса*/ 
                || 
                ' UNION 
                SELECT 
                    ROUNDD(SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2)))/' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND OPR.KLI_ID ='||:L_KLI_ID||' 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_OBEKTI/*Приход криптирана каса*/ 
                INTO :L_SUMA,:L_SUMA_DDS 
            DO BEGIN 
                L_SUMA_CRYPT_PRIH = COALESCE(:L_SUMA_CRYPT_PRIH,0) + COALESCE(:L_SUMA,0); 
                L_SUMA_CRYPT_PRIH_DDS = COALESCE(:L_SUMA_CRYPT_PRIH_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
            END 
        ELSE 
            FOR EXECUTE STATEMENT 
                'SELECT 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND OPR.KLI_ID IS NULL 
                    AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_OBEKTI/*Приход криптирана каса*/ 
                 || 
                 ' UNION 
                 SELECT 
                    ROUNDD(SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2)))/' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                    INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND OPR.KLI_ID IS NULL 
                    AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_OBEKTI/*Приход криптирана каса*/ 
 
                INTO :L_SUMA,:L_SUMA_DDS 
            DO BEGIN 
                L_SUMA_CRYPT_PRIH = COALESCE(:L_SUMA_CRYPT_PRIH,0) + COALESCE(:L_SUMA,0); 
                L_SUMA_CRYPT_PRIH_DDS = COALESCE(:L_SUMA_CRYPT_PRIH_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
            END 
        END 
 
 
        L_SUMA_CRYPT = COALESCE(L_SUMA_CRYPT_RAZH, 0) - COALESCE(:L_SUMA_CRYPT_PRIH, 0); 
        L_SUMA_CRYPT_DDS = COALESCE(:L_SUMA_CRYPT_RAZH_DDS,0) - COALESCE(:L_SUMA_CRYPT_PRIH_DDS,0); 
END 
 
    R_SUMA = COALESCE(L_SUMA_RAZHOD,0) - COALESCE(L_SUMA_PRIHOD,0) + COALESCE(L_SUMA_CRYPT,0); 
    R_SUMA_DDS = COALESCE(:L_SUMA_RAZHOD_DDS,0) - COALESCE(L_SUMA_PRIHOD_DDS,0) + COALESCE(L_SUMA_CRYPT_DDS,0); 
    L_SUMA_PERIOD = COALESCE(L_SUMA_PERIOD,0) + R_SUMA; 
    PRIH_RAZH_ID = P_PARI_IO; 
 
    IF (P_TIP_SPR = 0) THEN 
        R_SUMA_DDS =:R_SUMA; 
 
   SUSPEND; 
   L_SUMA_RAZHOD = 0; 
   L_SUMA_PRIHOD = 0; 
   L_SUMA_CRYPT  = 0; 
   L_SUMA_RAZHOD_DDS = 0; 
   L_SUMA_PRIHOD_DDS = 0; 
   L_SUMA_CRYPT_DDS  = 0; 
 END 
END 
ELSE 
BEGIN 
   FOR EXECUTE STATEMENT 
    'SELECT 
        OPR.KLI_ID, 
        KLI.NAME 
    FROM 
        OPR INNER JOIN IZP ON IZP.OPR_ID = OPR.ID AND IZP.IZP_TIP_ID ='||:P_PARI_IO||' 
        INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
    WHERE /*FILTER*/(1=1)' ||:P_FILTER_KLI|| 
    'UNION 
    SELECT 
        -1 AS ID, 
        '' Без контрагент'' 
    FROM 
        RDB$DATABASE' 
    INTO :L_KLI_ID, :R_KLI_NAME 
 
DO BEGIN 
if (P_BASE_VALUTA = 0) then 
    if (L_KLI_ID <> -1) then 
        EXECUTE STATEMENT 
        'SELECT 
            SUM(OPR_SUMI.SUMA_FR) 
        FROM 
            OPR_SUMI INNER JOIN OPR ON OPR.ID = OPR_SUMI.OPR_ID 
            INNER JOIN SKLAD PARI ON PARI.ID = OPR.SKLAD_ID 
            INNER JOIN IZP ON IZP.OPR_ID = OPR.ID 
        WHERE 
            OPR.OPR_DATE>='''||:P_FROM_DATE||''' AND OPR.OPR_DATE<='''||:TO_DATE||''' AND IZP.IZP_TIP_ID ='||:P_PARI_IO ||' 
            AND OPR.KLI_ID = '||:L_KLI_ID 
            ||:P_FILTER_OBEKTI ||:P_FILTER_KLI 
        INTO :L_SUMA_RAZH_IZP; 
    ELSE 
        EXECUTE STATEMENT 
        'SELECT 
            SUM(OPR_SUMI.SUMA_FR) 
        FROM 
            OPR_SUMI INNER JOIN OPR ON OPR.ID = OPR_SUMI.OPR_ID 
            INNER JOIN SKLAD PARI ON PARI.ID = OPR.SKLAD_ID 
            INNER JOIN IZP ON IZP.OPR_ID = OPR.ID 
        WHERE 
            OPR.OPR_DATE>='''||:P_FROM_DATE||''' AND OPR.OPR_DATE<='''||:TO_DATE||''' AND IZP.IZP_TIP_ID ='||:P_PARI_IO ||' 
            AND OPR.KLI_ID IS NULL ' 
            ||:P_FILTER_OBEKTI ||:P_FILTER_KLI 
        INTO :L_SUMA_RAZH_IZP; 
ELSE 
    L_SUMA_RAZH_IZP = 0; 
 
    R_SUMA = COALESCE(L_SUMA_RAZH_IZP,0); 
    L_SUMA_PERIOD = COALESCE(L_SUMA_PERIOD,0) + R_SUMA; 
    PRIH_RAZH_ID = P_PARI_IO; 
 
    R_SUMA_DDS =:R_SUMA; 
 
    SUSPEND; 
    END 
    END 
END^


ALTER PROCEDURE GET_RAZHOD_OBEKTI (
    P_PARI_IO INTEGER,
    P_FROM_DATE VARCHAR(30),
    TO_DATE VARCHAR(30),
    P_FILTER_KLI VARCHAR(1000),
    P_FILTER_OBEKTI VARCHAR(1000),
    P_VALUTA INTEGER,
    FLAG_CRYPT INTEGER,
    PASS VARCHAR(24),
    P_TIP_RAZH INTEGER,
    P_BASE_VALUTA INTEGER,
    P_TIP_SPR INTEGER,
    P_DDS DOUBLE PRECISION)
RETURNS (
    R_SUMA DOUBLE PRECISION,
    PRIH_RAZH_ID INTEGER,
    R_OBEKT_NAME VARCHAR(20),
    R_SUMA_DDS DOUBLE PRECISION)
AS
declare variable L_SUMA_RAZHOD numeric(10,2); 
declare variable L_SUMA_PRIHOD numeric(10,2); 
declare variable L_SUMA_CRYPT numeric(10,2); 
declare variable L_SUMA_CRYPT_RAZH numeric(10,2); 
declare variable L_SUMA_CRYPT_PRIH numeric(10,2); 
declare variable L_SUMA_PERIOD numeric(10,2); 
declare variable L_OBEKT_ID integer; 
declare variable L_SUMA_RAZH_IZP double precision; 
declare variable L_PARI_IO_FAK integer; 
declare variable L_SUMA_RAZHOD_DDS double precision; 
declare variable L_SUMA double precision; 
declare variable L_SUMA_DDS double precision; 
declare variable L_SUMA_PRIHOD_DDS double precision; 
declare variable L_SUMA_CRYPT_DDS double precision; 
declare variable L_SUMA_CRYPT_RAZH_DDS double precision; 
declare variable L_SUMA_CRYPT_PRIH_DDS double precision; 
BEGIN 
    SELECT 
        PARI_IO.FAK 
    FROM 
        PARI_IO 
    WHERE 
        PARI_IO.ID =:P_PARI_IO 
    INTO :L_PARI_IO_FAK; 
 
    FOR EXECUTE STATEMENT 
        'SELECT 
            OBEKT.ID, 
            OBEKT.NAME 
        FROM 
            OBEKT 
        WHERE /*FILTER*/ (1=1)' ||:P_FILTER_OBEKTI || 
        'UNION 
        SELECT 
            -1, 
            '' Без обект'' 
        FROM 
            rdb$database' 
        INTO :L_OBEKT_ID,:R_OBEKT_NAME 
 
DO BEGIN 
    if (P_TIP_RAZH = 0) THEN BEGIN 
        IF (P_TIP_SPR = 0) THEN 
            EXECUTE STATEMENT 
                'SELECT 
                    SUM(PARI.SUMA) 
                FROM 
                    PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND PARI.OBEKT_ID ='||:L_OBEKT_ID||' 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_KLI  /*Разход*/ 
                INTO :L_SUMA_RAZHOD; 
        ELSE BEGIN 
            L_SUMA     = 0; 
            L_SUMA_DDS = 0; 
 
            FOR EXECUTE STATEMENT 
            'SELECT 
                SUM(PARI.SUMA), 
                SUM(PARI.SUMA) 
            FROM 
                PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND PARI.OBEKT_ID ='||:L_OBEKT_ID||' 
                AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                ||:P_FILTER_KLI  /*Разход*/ 
            || 
            ' UNION ALL 
            SELECT 
                ROUNDD(SUM(PARI.SUMA)/' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                SUM(PARI.SUMA) 
            FROM 
                PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
            WHERE 
                PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND PARI.OBEKT_ID ='||:L_OBEKT_ID||' 
                AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                ||:P_FILTER_KLI  /*Разход*/ 
            INTO :L_SUMA, :L_SUMA_DDS 
            DO BEGIN 
                L_SUMA_RAZHOD = COALESCE(:L_SUMA_RAZHOD,0) + COALESCE(:L_SUMA,0); 
                L_SUMA_RAZHOD_DDS = COALESCE(:L_SUMA_RAZHOD_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
            END 
 
        END 
    IF (P_TIP_RAZH = 0) THEN 
        EXECUTE STATEMENT 
            'SELECT 
                SUM(PARI.SUMA) 
            FROM 
                PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND PARI.OBEKT_ID ='||:L_OBEKT_ID ||' 
                AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <= '''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                ||:P_FILTER_KLI/*Приход*/ 
            INTO :L_SUMA_PRIHOD; 
    ELSE BEGIN 
        L_SUMA     = 0; 
        L_SUMA_DDS = 0; 
 
        FOR EXECUTE STATEMENT 
            'SELECT 
                SUM(PARI.SUMA), 
                SUM(PARI.SUMA) 
            FROM 
                PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND PARI.OBEKT_ID ='||:L_OBEKT_ID ||' 
                AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <= '''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                ||:P_FILTER_KLI/*Приход*/ 
            || 
            ' UNION 
            SELECT 
                SUM(PARI.SUMA), 
                SUM(PARI.SUMA) 
            FROM 
                PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
            WHERE 
                PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND PARI.OBEKT_ID ='||:L_OBEKT_ID ||' 
                AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <= '''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                ||:P_FILTER_KLI/*Приход*/ 
            INTO :L_SUMA, :L_SUMA_DDS 
            DO BEGIN 
                L_SUMA_PRIHOD = COALESCE(:L_SUMA_PRIHOD,0) + COALESCE(:L_SUMA,0); 
                L_SUMA_PRIHOD_DDS = COALESCE(:L_SUMA_PRIHOD_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
            END 
    END 
    END 
ELSE 
    if (P_BASE_VALUTA = 0) then 
    if (L_OBEKT_ID <> -1) then 
    EXECUTE STATEMENT 
        'SELECT 
            SUM(OPR_SUMI.SUMA_FR) 
        FROM 
            OPR_SUMI INNER JOIN OPR ON OPR.ID = OPR_SUMI.OPR_ID 
            INNER JOIN SKLAD PARI ON PARI.ID = OPR.SKLAD_ID 
            INNER JOIN IZP ON IZP.OPR_ID = OPR.ID 
        WHERE 
            OPR.OPR_DATE>='''||:P_FROM_DATE||''' AND OPR.OPR_DATE<='''||:TO_DATE||''' AND IZP.IZP_TIP_ID ='||:P_PARI_IO ||' 
            AND PARI.OBEKT_ID ='||:L_OBEKT_ID 
            ||:P_FILTER_KLI 
        INTO :L_SUMA_RAZH_IZP;    /*Разход от изписване*/ 
    ELSE 
    if (L_OBEKT_ID = -1) then 
    EXECUTE STATEMENT 
        'SELECT 
            SUM(OPR_SUMI.SUMA_FR) 
        FROM 
            OPR_SUMI INNER JOIN OPR ON OPR.ID = OPR_SUMI.OPR_ID 
            INNER JOIN SKLAD PARI ON PARI.ID = OPR.SKLAD_ID 
            INNER JOIN IZP ON IZP.OPR_ID = OPR.ID 
        WHERE 
            OPR.OPR_DATE>='''||:P_FROM_DATE||''' AND OPR.OPR_DATE<='''||:TO_DATE||''' AND IZP.IZP_TIP_ID ='||:P_PARI_IO ||' 
            AND PARI.OBEKT_ID IS NULL' 
            ||:P_FILTER_KLI 
        INTO :L_SUMA_RAZH_IZP;    /*Разход от изписване*/ 
    ELSE 
        L_SUMA_RAZH_IZP = 0; 
 
    L_SUMA_CRYPT = 0; 
    IF (FLAG_CRYPT = 1) THEN BEGIN 
        IF (P_TIP_SPR = 0) THEN BEGIN 
            EXECUTE STATEMENT 
                'SELECT 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND PARI.OBEKT_ID ='||:L_OBEKT_ID||' 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_KLI /*Разход криптирана каса*/ 
                INTO :L_SUMA_CRYPT_RAZH; 
 
            EXECUTE STATEMENT 
                'SELECT 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND PARI.OBEKT_ID ='||:L_OBEKT_ID||' 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_KLI/*Приход криптирана каса*/ 
                INTO :L_SUMA_CRYPT_PRIH; 
        END 
        ELSE BEGIN 
            FOR EXECUTE STATEMENT 
                'SELECT 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND PARI.OBEKT_ID ='||:L_OBEKT_ID||' 
                    AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_KLI /*Разход криптирана каса*/ 
                || 
                ' UNION 
                SELECT 
                    ROUNDD(SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2)))/' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                    INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO ||' AND PARI.TIP = 1 AND PARI.OBEKT_ID ='||:L_OBEKT_ID||' 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_KLI /*Разход криптирана каса*/ 
                INTO :L_SUMA, :L_SUMA_DDS 
            DO BEGIN 
                L_SUMA_CRYPT_RAZH = COALESCE(:L_SUMA_CRYPT_RAZH,0) + COALESCE(:L_SUMA, 0); 
                L_SUMA_CRYPT_RAZH_DDS = COALESCE(:L_SUMA_CRYPT_RAZH_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
            END 
 
        IF (P_TIP_SPR = 0) THEN 
            EXECUTE STATEMENT 
                'SELECT 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND PARI.OBEKT_ID ='||:L_OBEKT_ID||' 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_KLI/*Приход криптирана каса*/ 
                INTO :L_SUMA_CRYPT_PRIH; 
        ELSE BEGIN 
            FOR EXECUTE STATEMENT 
                'SELECT 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND PARI.OBEKT_ID ='||:L_OBEKT_ID||' 
                    AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_KLI/*Приход криптирана каса*/ 
                || 
                ' UNION 
                SELECT 
                    ROUNDD(SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2)))/' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                    SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
                FROM 
                    PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                    INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
                WHERE 
                    PARI_IO.ID ='||:P_PARI_IO||' AND PARI.TIP = 0 AND PARI.OBEKT_ID ='||:L_OBEKT_ID||' 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_KLI/*Приход криптирана каса*/ 
 
                INTO :L_SUMA, :L_SUMA_DDS 
            DO BEGIN 
                L_SUMA_CRYPT_PRIH = COALESCE(:L_SUMA_CRYPT_PRIH,0) + COALESCE(:L_SUMA, 0); 
                L_SUMA_CRYPT_PRIH_DDS = COALESCE(:L_SUMA_CRYPT_PRIH_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
            END 
        END 
 
    END 
 
            L_SUMA_CRYPT = COALESCE(L_SUMA_CRYPT_RAZH, 0) - COALESCE(L_SUMA_CRYPT_PRIH, 0); 
            L_SUMA_CRYPT_DDS = COALESCE(L_SUMA_CRYPT_RAZH_DDS, 0) - COALESCE(L_SUMA_CRYPT_PRIH_DDS, 0); 
END 
 
    IF (P_TIP_RAZH = 0) THEN BEGIN 
        R_SUMA = COALESCE(:L_SUMA_RAZHOD,0) - COALESCE(:L_SUMA_PRIHOD,0) + :L_SUMA_CRYPT; 
        R_SUMA_DDS = COALESCE(:L_SUMA_RAZHOD_DDS,0) - COALESCE(:L_SUMA_PRIHOD_DDS,0) + COALESCE(:L_SUMA_CRYPT_DDS,0); 
    END 
    ELSE BEGIN 
        R_SUMA = COALESCE(:L_SUMA_RAZH_IZP,0); 
        R_SUMA_DDS = :R_SUMA; 
    END 
 
    IF (:P_TIP_SPR = 0) THEN R_SUMA_DDS =:R_SUMA; 
 
    L_SUMA_PERIOD = COALESCE(L_SUMA_PERIOD,0) + R_SUMA; 
 
    PRIH_RAZH_ID = P_PARI_IO; 
    SUSPEND; 
 
    L_SUMA_RAZHOD = 0; 
    L_SUMA_PRIHOD = 0; L_SUMA_CRYPT =0; L_SUMA_CRYPT_RAZH = 0; L_SUMA_CRYPT_PRIH = 0; L_SUMA_PERIOD = 0; L_SUMA_RAZH_IZP = 0; 
    L_SUMA_RAZHOD_DDS = 0; L_SUMA = 0; L_SUMA_DDS = 0; L_SUMA_PRIHOD_DDS = 0; L_SUMA_CRYPT_DDS = 0; L_SUMA_CRYPT_RAZH_DDS = 0; L_SUMA_CRYPT_PRIH_DDS = 0; 
 
    END 
END^


ALTER PROCEDURE GET_RAZPAD_IN (
    CL_ID TYPE OF DOM_KEY,
    OUT_EL_ID TYPE OF DOM_KEY)
RETURNS (
    R_KOL TYPE OF DOM_KOL,
    R_ME1 CHAR(2),
    R_CODE TYPE OF DOM_CHAR_50,
    R_NAME TYPE OF DOM_CHAR_100,
    SUMA TYPE OF DOM_SUMA,
    R_SUMAFR TYPE OF DOM_SUMA,
    CENA TYPE OF DOM_CENA,
    GR_NAME TYPE OF DOM_CHAR_50,
    R_ME2 CHAR(2),
    R_KOL2 DOUBLE PRECISION,
    R_CALC_RATIO TYPE OF DOM_PERCENT,
    R_SHAREHOLDING TYPE OF DOM_PERCENT,
    R_SN TYPE OF DOM_CHAR_100)
AS
declare variable L_CENA type of DOM_CENA; 
declare variable L_IN_ELID type of DOM_KEY; 
declare variable L_SIMPLE_ID type of DOM_KEY; 
declare variable L_OUT_EL_KOL type of DOM_KOL; 
BEGIN 
    FOR SELECT 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        SIMPLE.ID, 
        ME1.NAME, 
        IN_EL.KOL, 
        IIF (IN_EL.KOL = 0.00,0.00,ROUND(IN_EL.SUMA_FR/IN_EL.KOL,5)), 
        IIF (:CL_ID = 0, IN_EL.SUMA_FR,-1), 
        IN_EL.SUMA_FR, 
        SELEKCIQ.NAME, 
        ME2.NAME, 
        IN_EL2.KOL, 
        IN_EL.ID, 
        CFG_RAZPAD_CALC.RATIO, 
        out_el.KOL 
    FROM 
        OPR_RAZPAD_NODE ORN INNER JOIN IN_EL ON (ORN.IN_EL_ID = IN_EL.ID AND ORN.OUT_EL_ID = :OUT_EL_ID) 
        INNER JOIN SIMPLE ON IN_EL.SIMPLE_ID = SIMPLE.ID 
        INNER JOIN OUT_EL ON OUT_EL.ID = ORN.OUT_EL_ID 
        LEFT JOIN ME ME1 ON SIMPLE.ME_ID = ME1.ID 
        LEFT JOIN ME ME2 ON SIMPLE.ME2_ID = ME2.ID 
        LEFT JOIN IN_EL2 ON IN_EL2.IN_EL_ID=IN_EL.ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID=SIMPLE.SIMPLE_GROUP_ID 
        LEFT JOIN CFG_RAZPAD_CALC ON CFG_RAZPAD_CALC.TO_PRODUCT_ID = SIMPLE.ID AND CFG_RAZPAD_CALC.FROM_PRODUCT_ID = OUT_EL.SIMPLE_ID 
    INTO 
        :R_CODE,:R_NAME,:L_SIMPLE_ID,:R_ME1,:R_KOL,:CENA,:SUMA,:R_SUMAFR,:GR_NAME,:R_ME2,:R_KOL2,:L_IN_ELID, :R_CALC_RATIO, :L_OUT_EL_KOL 
 
    DO BEGIN 
        L_CENA = 0; 
        R_SHAREHOLDING = NULL; 
 
        IF (L_OUT_EL_KOL <> 0) THEN 
            R_SHAREHOLDING = R_KOL/L_OUT_EL_KOL * 100; 
 
        IF (SUMA = -1) THEN BEGIN 
            EXECUTE PROCEDURE GET_CENA_CL(:CL_ID,:L_SIMPLE_ID) RETURNING_VALUES(L_CENA); 
            SUMA = ROUND(:L_CENA*:R_KOL,2); 
            CENA = :L_CENA; 
        END 
 
        SELECT DISTINCT 
                SERIAL_NUM.SN 
            FROM 
                PARTIDA_NAL PN INNER JOIN PARTIDA_EL_NODE PEN ON PEN.PARTIDA_ID = PN.ID 
                INNER JOIN PARTIDA_IN_EL_NODE PIN ON (PIN.PARTIDA_NODE_ID = PEN.ID 
                AND PIN.IN_EL_ID = :L_IN_ELID) 
                INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID 
        INTO :R_SN; 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_RAZPAD_OUT (
    ID TYPE OF DOM_KEY,
    CL_ID TYPE OF DOM_KEY)
RETURNS (
    CENA TYPE OF DOM_CENA,
    SUMA TYPE OF DOM_SUMA,
    R_CODE TYPE OF DOM_CHAR_50,
    R_NAME TYPE OF DOM_CHAR_100,
    R_ME CHAR(2),
    R_KOL TYPE OF DOM_KOL,
    R_SUMAFR TYPE OF DOM_SUMA,
    GR_NAME TYPE OF DOM_CHAR_50,
    R_OUT_EL_ID TYPE OF DOM_KEY,
    R_SN TYPE OF DOM_CHAR_100)
AS
declare variable L_SIMPLE_ID type of DOM_KEY; 
declare variable L_OUT_ELID type of DOM_KEY; 
declare variable L_CENA type of DOM_CENA; 
BEGIN 
    FOR SELECT 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        SIMPLE.ID, 
        ME.NAME, 
        OUT_EL.KOL, 
        IIF(OUT_EL.KOL = 0.00, 0.00, ROUND(OUT_EL.SUMA_SR/OUT_EL.KOL,5)), 
        IIF(:CL_ID = 0,OUT_EL.SUMA_SR,-1), 
        OUT_EL.SUMA_FR, 
        SELEKCIQ.NAME, 
        OUT_EL.ID 
    FROM 
        OUT_EL INNER JOIN SIMPLE ON (SIMPLE.ID = OUT_EL.SIMPLE_ID AND OUT_EL.OPR_ID = :ID) 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
    INTO 
        :R_CODE,:R_NAME,:L_SIMPLE_ID,:R_ME,:R_KOL,:CENA,:SUMA,:R_SUMAFR,:GR_NAME,:R_OUT_EL_ID 
    DO BEGIN 
        L_CENA = 0; 
        L_OUT_ELID = R_OUT_EL_ID; 
 
        IF (SUMA = -1) THEN BEGIN 
            EXECUTE PROCEDURE GET_CENA_CL(:CL_ID,:L_SIMPLE_ID) RETURNING_VALUES(L_CENA); 
            SUMA = ROUND(:L_CENA*:R_KOL,2); 
            CENA = :L_CENA; 
        END 
        SELECT DISTINCT 
            SERIAL_NUM.SN 
        FROM 
            PARTIDA_NAL PN INNER JOIN PARTIDA_EL_NODE PEN ON PN.ID = PEN.PARTIDA_ID 
            INNER JOIN PARTIDA_OUT_EL_NODE PON ON (PON.OUT_EL_ID = :L_OUT_ELID 
            AND PEN.ID = PON.PARTIDA_NODE_ID) 
            INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID 
        INTO :R_SN; 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_RECIPIENTS_ALL
RETURNS (
    FLAG INTEGER)
AS
DECLARE VARIABLE ID INTEGER; 
DECLARE VARIABLE MUL INTEGER; 
DECLARE VARIABLE I INTEGER; 
begin 
  flag=0; 
  for 
   select id FROM off_obekti_list 
   into :id 
  do 
  begin 
   mul=1; 
   i=1; 
   while (i<id) do 
   begin 
     mul=mul*2; 
     i=i+1; 
   end 
   flag=bin_or(flag, mul); 
  end 
  suspend; 
end^


ALTER PROCEDURE GET_REKVIZITI (
    P_KLI_ID INTEGER)
RETURNS (
    R_SUMA DOUBLE PRECISION,
    R_BR_NPLATENI INTEGER)
AS
BEGIN 
    SELECT 
        -SUM(GET_PAY_OUT_PROD_SUMI.R_SUMA_OSTATAK) 
    FROM 
        GET_PAY_OUT_PROD_SUMI(:P_KLI_ID, NULL, NULL,1) 
    INTO 
        :R_SUMA; 
 
    SELECT 
        COUNT(OPR.SUMA) 
    FROM 
        OPR INNER JOIN OUT ON OUT.OPR_ID = OPR.ID AND OPR.KLI_ID = :P_KLI_ID 
    WHERE 
        OUT.PAY_TIP = 1 
        AND NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND OPR.SUMA > 0.00 
    INTO 
        :R_BR_NPLATENI; 
 
    IF (R_BR_NPLATENI IS NULL) THEN R_BR_NPLATENI = 0; 
    IF (R_SUMA IS NULL) THEN R_SUMA = 0.00; 
 
    SUSPEND; 
END^


ALTER PROCEDURE GET_RET_STOKA_DOST_SN (
    P_OPR_ID TYPE OF DOM_KEY,
    P_IS_FKT TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SN TYPE OF DOM_CHAR_30,
    R_ELEMENT_ID TYPE OF DOM_KEY,
    R_EL_ID TYPE OF DOM_KEY,
    R_IN_EL_ID TYPE OF DOM_KEY,
    R_REAL_IN_EL TYPE OF DOM_KEY,
    R_SKLAD_ID TYPE OF DOM_KEY_SMALL,
    R_KOL TYPE OF DOM_KOL)
AS
BEGIN 
    FOR SELECT 
        IN_EL.ID, 
        PN.ELEMENT_ID, 
        SN.SN 
    FROM 
        IN_EL INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = IN_EL.ID AND IN_EL.OPR_ID = :P_OPR_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID AND SIMPLE.RSN IN ('1', '3') 
        INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
        INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
        INNER JOIN SERIAL_NUM SN ON SN.PARTIDA_EL_ID = PN.ELEMENT_ID 
    INTO 
        :R_IN_EL_ID, :R_ELEMENT_ID, :R_SN 
    DO BEGIN 
        R_EL_ID = R_IN_EL_ID; 
 
        FOR SELECT 
            IN_EL.ID, 
            OPR.SKLAD_ID, 
            PN.KOL 
        FROM 
            IN_EL INNER JOIN PARTIDA_NAL PN ON PN.ELEMENT_ID = :R_ELEMENT_ID AND PN.IN_EL_ID = IN_EL.ID 
            INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
        WHERE 
            IN_EL.IS_F = :P_IS_FKT 
            AND PN.KOL > 0.00 
        INTO 
            :R_REAL_IN_EL,:R_SKLAD_ID, :R_KOL 
        DO 
            SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_RETURN_STOKA_DOST (
    P_OPR_ID INTEGER,
    P_FLAG_FKT SMALLINT)
RETURNS (
    R_EL_ID INTEGER,
    R_NAL_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER,
    R_ALL_IN_ORG_SKLAD SMALLINT,
    R_SKLAD_ID SMALLINT,
    R_FLAG_FAK_IN SMALLINT)
AS
DECLARE VARIABLE L_RSN SMALLINT; 
DECLARE VARIABLE L_ELEMENT_ID INTEGER; 
DECLARE VARIABLE L_SKLAD_ID SMALLINT; 
BEGIN 
    SELECT 
        OPR.SKLAD_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :R_SKLAD_ID; 
 
    FOR SELECT 
        IN_EL.ID, 
        SIMPLE.ID, 
        CAST (SIMPLE.RSN AS SMALLINT) 
    FROM 
        IN_EL INNER JOIN SIMPLE ON (IN_EL.OPR_ID = :P_OPR_ID AND SIMPLE.ID = IN_EL.SIMPLE_ID) 
    ORDER BY 1 
    INTO 
        :R_EL_ID,:R_SIMPLE_ID,:L_RSN 
    DO BEGIN 
        IF (P_FLAG_FKT = 0) THEN BEGIN 
            IF (NOT EXISTS (SELECT FAK_IN_EL_NODE.ID FROM FAK_IN_EL_NODE WHERE FAK_IN_EL_NODE.IN_EL_ID = :R_EL_ID)) THEN 
                R_FLAG_FAK_IN = 0; 
            ELSE 
                R_FLAG_FAK_IN = 1; 
        END 
        ELSE BEGIN 
            IF (NOT EXISTS (SELECT IN_TO_FAK_EL.ID FROM IN_TO_FAK_EL WHERE IN_TO_FAK_EL.FAK_IN_EL_ID = :R_EL_ID)) THEN 
                R_FLAG_FAK_IN = 0; 
            ELSE 
                R_FLAG_FAK_IN = 1; 
        END 
 
        IF (L_RSN = 1) THEN BEGIN 
            R_ALL_IN_ORG_SKLAD = 1; 
 
            SELECT 
                COALESCE(SUM(PN.KOL),0.00), 
                COALESCE(SUM(PN.SUMA_FR),0.00) 
            FROM 
                PARTIDA_IN_EL_NODE PIN INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
                AND PIN.IN_EL_ID = :R_EL_ID 
                INNER JOIN PARTIDA_NAL PN_IN ON PN_IN.ID = PEN.PARTIDA_ID 
                INNER JOIN PARTIDA_NAL PN ON PN.ELEMENT_ID = PN_IN.ELEMENT_ID 
                INNER JOIN IN_EL ON IN_EL.ID = PN.IN_EL_ID 
                INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
            WHERE 
                ((OPR.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) AND (:P_FLAG_FKT = 1)) 
                OR ((NOT OPR.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) AND (:P_FLAG_FKT = 0)) 
            INTO 
                :R_NAL_KOL,:R_SUMA; 
            --ПРОВЕРКА ДАЛИ Е В СКЛАДА НА ДОСТАВКАТА ИЛИ Е В ДРУГ И ТРЯБВА ДА СЕ ПРЕХВЪРЛИ 
            IF (R_NAL_KOL > 0.00) THEN BEGIN 
                FOR SELECT 
                    PN.ELEMENT_ID 
                FROM 
                    PARTIDA_IN_EL_NODE PIN INNER JOIN PARTIDA_EL_NODE PEN ON PIN.IN_EL_ID = :R_EL_ID AND 
                    PIN.PARTIDA_NODE_ID = PEN.ID 
                    INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
                INTO 
                    :L_ELEMENT_ID 
                DO BEGIN 
                    FOR SELECT 
                        OPR.SKLAD_ID 
                    FROM 
                        PARTIDA_NAL PN INNER JOIN IN_EL ON PN.ELEMENT_ID = :L_ELEMENT_ID AND IN_EL.ID = PN.IN_EL_ID 
                        INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
                    WHERE 
                        ((OPR.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) AND (:P_FLAG_FKT = 1)) 
                        OR ((NOT OPR.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) AND (:P_FLAG_FKT = 0)) 
                        AND PN.KOL > 0.00 
                    INTO 
                        :L_SKLAD_ID 
                    DO BEGIN 
                        IF (L_SKLAD_ID <> R_SKLAD_ID) THEN 
                            R_ALL_IN_ORG_SKLAD = 0; 
                    END 
                END 
            END 
            IF (R_NAL_KOL > 0.00) THEN 
                SUSPEND; 
        END 
        ELSE IF (L_RSN IN (0,2)) THEN BEGIN 
            SELECT 
                IN_EL.KOL, 
                IN_EL.SUMA_FR 
            FROM 
                IN_EL 
            WHERE 
                IN_EL.ID = :R_EL_ID 
            INTO 
                :R_NAL_KOL,:R_SUMA; 
 
            SELECT 
                ROUND(:R_NAL_KOL - COALESCE(SUM(OUT_EL.KOL),0.00),5), 
                ROUND(:R_SUMA - COALESCE(SUM(OUT_EL.SUMA),0.00),2) 
            FROM 
                OPR_RAZPAD_NODE ORN INNER JOIN OUT_EL ON (ORN.IN_EL_ID = :R_EL_ID AND ORN.OUT_EL_ID = OUT_EL.ID) 
            INTO 
                :R_NAL_KOL,:R_SUMA; 
            R_ALL_IN_ORG_SKLAD = 1;  --НЯМА ЗНАЧЕНИЕ НАЛИЧНОТО В СКЛАДА. ЗА ТЕЗИ МОЖЕ ДА ИМА ИЗЛИШЪК 
            IF (R_NAL_KOL > 0.00) THEN 
                SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_RETURN_STOKA_DOST_KI (
    P_OPR_ID INTEGER,
    P_FLAG_FKT SMALLINT)
RETURNS (
    R_EL_ID INTEGER,
    R_NAL_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER,
    R_ALL_IN_ORG_SKLAD SMALLINT,
    R_SKLAD_ID SMALLINT)
AS
DECLARE VARIABLE L_RSN SMALLINT; 
DECLARE VARIABLE L_ELEMENT_ID INTEGER; 
DECLARE VARIABLE L_SKLAD_ID SMALLINT; 
DECLARE VARIABLE L_OPR_ID INTEGER; 
BEGIN 
    P_FLAG_FKT = COALESCE(P_FLAG_FKT,0); 
 
    FOR SELECT 
        IN_EL.ID, 
        IN_EL.OPR_ID, 
        SIMPLE.ID, 
        CAST (SIMPLE.RSN AS SMALLINT), 
        OPR.SKLAD_ID 
    FROM 
        FAK_IN INNER JOIN FAK_IN_EL_NODE ON FAK_IN.OPR_ID = :P_OPR_ID AND FAK_IN.ID = FAK_IN_EL_NODE.FAK_IN_ID 
        INNER JOIN IN_EL ON IN_EL.ID = FAK_IN_EL_NODE.IN_EL_ID 
        INNER JOIN OPR ON IN_EL.OPR_ID = OPR.ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
    WHERE 
        IN_EL.IS_F = :P_FLAG_FKT 
 
    /* 
    UNION ALL 
 
    SELECT 
        IN_EL.ID, 
        IN_EL.OPR_ID, 
        SIMPLE.ID, 
        CAST (SIMPLE.RSN AS SMALLINT), 
        OPR.SKLAD_ID 
    FROM 
        FAK_IN INNER JOIN FAK_IN_EL_NODE ON FAK_IN.OPR_ID = :P_OPR_ID AND FAK_IN.ID = FAK_IN_EL_NODE.FAK_IN_ID 
        INNER JOIN IN_EL ON IN_EL.ID = FAK_IN_EL_NODE.IN_EL_ID 
        INNER JOIN OPR ON IN_EL.OPR_ID = OPR.ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
    WHERE 
        :P_FLAG_FKT = 1 
    */ 
 
    ORDER BY 1 
    INTO 
        :R_EL_ID,:L_OPR_ID,:R_SIMPLE_ID,:L_RSN,:R_SKLAD_ID 
    DO BEGIN 
        IF (L_RSN IN (1)) THEN BEGIN 
            R_ALL_IN_ORG_SKLAD = 1; 
 
            SELECT 
                COALESCE(SUM(PN_NAL.KOL),0.00), 
                COALESCE(SUM(PN_NAL.SUMA_FR),0.00) 
            FROM 
                PARTIDA_IN_EL_NODE PIN INNER JOIN PARTIDA_EL_NODE PEN ON PIN.IN_EL_ID = :R_EL_ID 
                AND PIN.PARTIDA_NODE_ID = PEN.ID 
                INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
                INNER JOIN PARTIDA_NAL PN_NAL ON PN_NAL.ELEMENT_ID = PN.ELEMENT_ID 
                INNER JOIN IN_EL ON IN_EL.ID = PN_NAL.IN_EL_ID 
                INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
                INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID --ФИЛТРИРАМ ПО СКЛAД, ВМЕСТО ОПР.СКЛАД, ЗАЩОТО ПОКАЗВА 
                --ПО-ДОБРА ПРОИЗВОДИТЕЛНОСТ. 
            WHERE 
                PN_NAL.KOL > 0.00 
                AND ((SKLAD.ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) AND (:P_FLAG_FKT = 1)) 
                OR ((NOT SKLAD.ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) AND (:P_FLAG_FKT = 0)) 
            INTO 
                :R_NAL_KOL,:R_SUMA; 
            --ПРОВЕРКА ДАЛИ Е В СКЛАДА НА ДОСТАВКАТА ИЛИ Е В ДРУГ И ТРЯБВА ДА СЕ ПРЕХВЪРЛИ 
            IF (R_NAL_KOL > 0.00) THEN BEGIN 
                FOR SELECT 
                    PN.ELEMENT_ID 
                FROM 
                    PARTIDA_IN_EL_NODE PIN INNER JOIN PARTIDA_EL_NODE PEN ON PIN.IN_EL_ID = :R_EL_ID 
                    AND PIN.PARTIDA_NODE_ID = PEN.ID 
                    INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
                INTO 
                    :L_ELEMENT_ID 
                DO BEGIN 
                    FOR SELECT 
                        OPR.SKLAD_ID 
                    FROM 
                        PARTIDA_NAL PN INNER JOIN IN_EL ON PN.ELEMENT_ID = :L_ELEMENT_ID AND IN_EL.ID = PN.IN_EL_ID 
                        INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
                        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
                    WHERE 
                        ((SKLAD.ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) AND (:P_FLAG_FKT = 1)) 
                        OR ((NOT SKLAD.ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) AND (:P_FLAG_FKT = 0)) 
                        AND PN.KOL > 0.00 
                    INTO 
                        :L_SKLAD_ID 
                    DO BEGIN 
                        IF (L_SKLAD_ID <> R_SKLAD_ID) THEN BEGIN 
                            R_ALL_IN_ORG_SKLAD = 0; 
                            LEAVE; 
                        END 
                    END 
                END 
            END 
            IF (R_NAL_KOL > 0.00) THEN 
                SUSPEND; 
        END 
        ELSE IF (L_RSN IN (0,2)) THEN BEGIN 
            SELECT 
                IN_EL.KOL, 
                IN_EL.SUMA_FR 
            FROM 
                IN_EL 
            WHERE 
                IN_EL.ID = :R_EL_ID 
            INTO 
                :R_NAL_KOL,:R_SUMA; 
 
            SELECT 
                ROUND(:R_NAL_KOL - COALESCE(SUM(OUT_EL.KOL),0.00),5), 
                ROUND(:R_SUMA - COALESCE(SUM(OUT_EL.SUMA),0.00),2) 
            FROM 
                OPR_RAZPAD_NODE ORN INNER JOIN OUT_EL ON (ORN.IN_EL_ID = :R_EL_ID AND ORN.OUT_EL_ID = OUT_EL.ID) 
                INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.OPR_TIP IN (27,39) 
            INTO 
                :R_NAL_KOL,:R_SUMA; 
            R_ALL_IN_ORG_SKLAD = 1;  --НЯМА ЗНАЧЕНИЕ НАЛИЧНОТО В СКЛАДА. ЗА ТЕЗИ МОЖЕ ДА ИМА ИЗЛИШЪК 
            IF (R_NAL_KOL > 0.00) THEN 
                SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_RETURN_STOKA_DOST_KI_SUMI (
    P_IS_F INTEGER)
RETURNS (
    R_EL_ID INTEGER,
    R_NAL_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER,
    R_ALL_IN_ORG_SKLAD SMALLINT,
    R_SKLAD_ID SMALLINT,
    R_RSN CHAR(1),
    R_OPR_ID TYPE OF DOM_KEY,
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_VAT_PERCENT DOUBLE PRECISION)
AS
declare variable L_RET_SUMA double precision; 
BEGIN 
  FOR SELECT 
    IN_EL.ID AS IN_EL_ID, 
    IN_EL.KOL, 
    IN_EL.SUMA_FR, 
    SIMPLE.ID AS SIMPLE_ID, 
    OPR.SKLAD_ID, 
    SIMPLE.RSN, 
    OPR.ID, 
    KLI.NAME, 
    COALESCE(IN_EL.VAT_PERCENT, SIMPLE.DDS) AS VAT_PERCENT, 
    COALESCE(SUM(OUT_EL.SUMA), 0) AS RET_SUMA 
  FROM 
    FAK_IN INNER JOIN FAK_IN_EL_NODE ON FAK_IN.ID = FAK_IN_EL_NODE.FAK_IN_ID 
    INNER JOIN TBL_TMP_FAK_IN_OPR_ID ON TBL_TMP_FAK_IN_OPR_ID.OPR_ID = FAK_IN.OPR_ID 
    INNER JOIN IN_EL ON FAK_IN_EL_NODE.IN_EL_ID = IN_EL.ID 
    INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
    INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
    LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
    LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
    LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
    LEFT JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
    LEFT JOIN OUT_EL ON OUT_EL.ID = OPR_RAZPAD_NODE.OUT_EL_ID 
  WHERE 
    IN_EL.IS_F = :P_IS_F 
  group by 1, 2, 3, 4, 5, 6, 7, 8, 9 
  ORDER BY 1 
  INTO :R_EL_ID, :R_NAL_KOL, :R_SUMA, :R_SIMPLE_ID, :R_SKLAD_ID, :R_RSN, :R_OPR_ID, :R_KLI_NAME, :R_VAT_PERCENT, :L_RET_SUMA 
  DO BEGIN 
    --IF ((SELECT FIRST 1 LOG.TIP_CENI FROM LOG_CENI_DDS LOG WHERE LOG.TIP_DDS = 0 AND LOG.OPR_ID < :R_OPR_ID ORDER BY LOG.OPR_ID DESC, LOG.ID DESC) = 0) THEN 
      R_SUMA = R_SUMA - L_RET_SUMA; 
    --ELSE 
    --  R_SUMA = ROUND((R_SUMA - L_RET_SUMA) / (1 + R_VAT_PERCENT / 100), 2); 
 
    R_ALL_IN_ORG_SKLAD = 1; 
 
    SUSPEND; 
  END 
END^


ALTER PROCEDURE GET_RETURN_STOKA_PROD (
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_EL_ID TYPE OF DOM_KEY,
    R_NAL_KOL TYPE OF DOM_KOL,
    R_SUMA TYPE OF DOM_SUMA,
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_SKLAD_ID TYPE OF DOM_SMAL_INT)
AS
DECLARE VARIABLE L_SUMA TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_KOL_OUT TYPE OF DOM_KOL; 
DECLARE VARIABLE L_KOL_IN TYPE OF DOM_KOL; 
BEGIN 
/*V.4 - ИЗВЛИАНЕ НА ДАННИТЕ ЗА КОЛИЧЕСТВА И СУМИ ОСТАНАЛИ "НЕВЪРНАТИ" ОТ ПРОДАЖБАТА*/ 
    SELECT 
        OPR.SKLAD_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :R_SKLAD_ID; 
 
    FOR SELECT 
        OUT_EL.ID, 
        OUT_EL.SIMPLE_ID, 
        OUT_EL.SUMA, 
        OUT_EL.KOL 
    FROM 
        OUT_EL INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
    WHERE 
        OUT_EL.OPR_ID = :P_OPR_ID 
    ORDER BY 1 
    INTO 
        :R_EL_ID,:R_SIMPLE_ID,:L_SUMA,:L_KOL_OUT 
    DO BEGIN 
        --ПОЛУЧАВАМ ЕДИНИЧНА ПРОДАЖНА ЦЕНА 
        IF (L_KOL_OUT = 0) THEN 
            R_SUMA = 0; 
        ELSE 
            R_SUMA = ROUND(L_SUMA / L_KOL_OUT,5); 
 
        SELECT 
            SUM(IN_EL.KOL) 
        FROM 
            IN_EL INNER JOIN OPR_RAZPAD_NODE ORN ON (ORN.OUT_EL_ID = :R_EL_ID AND ORN.IN_EL_ID = IN_EL.ID) 
            INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID AND OPR.OPR_TIP IN (26,41, 40) 
        INTO 
            :L_KOL_IN; 
 
        R_NAL_KOL = ROUND(L_KOL_OUT - COALESCE(L_KOL_IN,0.00),5); 
        R_SUMA = ROUND(R_SUMA * R_NAL_KOL,2); 
        IF (R_NAL_KOL > 0.00) THEN 
            SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_RETURN_STOKA_PROD_KI (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OPR_FAK_PROD TYPE OF DOM_KEY)
RETURNS (
    R_EL_ID TYPE OF DOM_KEY,
    R_NAL_KOL TYPE OF DOM_KOL,
    R_SUMA TYPE OF DOM_SUMA,
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_SKLAD_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_SUMA TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_KOL_OUT TYPE OF DOM_KOL; 
DECLARE VARIABLE L_KOL_IN TYPE OF DOM_KOL; 
BEGIN 
    FOR SELECT 
        OUT_EL.ID, 
        OUT_EL.SIMPLE_ID, 
        OUT_EL.SUMA, 
        OUT_EL.KOL, 
        OPR.SKLAD_ID 
    FROM 
        FAK_PROD INNER JOIN OUT_EL ON (FAK_PROD.FAK_ID = :P_OPR_ID AND FAK_PROD.OPR_ID = OUT_EL.OPR_ID) 
        INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        INNER JOIN OPR ON FAK_PROD.OPR_ID = OPR.ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
    WHERE 
        (:P_OPR_FAK_PROD = 0 AND SKLAD.ID <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) OR 
        (:P_OPR_FAK_PROD = 1 AND SKLAD.ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) 
    ORDER BY 1 
    INTO 
        :R_EL_ID,:R_SIMPLE_ID,:L_SUMA,:L_KOL_OUT, :R_SKLAD_ID 
    DO BEGIN 
        /*ПОЛУЧАВАМ ЕДИНИЧНА ПРОДАЖНА ЦЕНА*/ 
        IF (L_KOL_OUT = 0) THEN 
            R_SUMA = 0; 
        ELSE 
            R_SUMA = ROUND(L_SUMA / L_KOL_OUT,5); 
 
        SELECT 
            SUM(IN_EL.KOL) 
        FROM 
            IN_EL INNER JOIN OPR_RAZPAD_NODE ORN ON (ORN.OUT_EL_ID = :R_EL_ID AND ORN.IN_EL_ID = IN_EL.ID) 
            INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID AND OPR.OPR_TIP IN (26,41, 40) 
        INTO 
            :L_KOL_IN; 
 
        R_NAL_KOL = ROUND(L_KOL_OUT - COALESCE(L_KOL_IN,0.00),5); 
        R_SUMA = ROUND(R_SUMA * R_NAL_KOL,2); 
        IF (R_NAL_KOL > 0.00) THEN 
            SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_RETURN_STOKA_PROD_KI_SUMA (
    P_OPR_FAK_PROD TYPE OF DOM_KEY)
RETURNS (
    R_OUT_EL_ID TYPE OF DOM_KEY,
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_SKLAD_ID TYPE OF DOM_KEY,
    R_SUMA TYPE OF DOM_SUMA,
    R_NAL_KOL TYPE OF DOM_KOL,
    R_KLI_ID TYPE OF DOM_KEY,
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_UNP TYPE OF DOM_UNP,
    R_OPR_ID TYPE OF DOM_KEY,
    R_OUT_KOL TYPE OF DOM_KOL,
    R_OUT_SUMA TYPE OF DOM_SUMA,
    R_SUMA_LEFT TYPE OF DOM_SUMA)
AS
DECLARE VARIABLE L_SUMA TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_KOL_IN TYPE OF DOM_KOL; 
DECLARE VARIABLE L_SUMA_KI TYPE OF DOM_SUMA; 
BEGIN 
    FOR SELECT 
        OUT_EL.ID, 
        OUT_EL.SIMPLE_ID, 
        OUT_EL.SUMA, 
        OUT_EL.KOL, 
        OPR.SKLAD_ID, 
        OPR.KLI_ID, 
        kli.NAME, 
        UNP.UNP, 
        OPR.ID 
    FROM 
        FAK_PROD INNER JOIN TBL_TMP_FAK_IN_OPR_ID ON TBL_TMP_FAK_IN_OPR_ID.OPR_ID = FAK_PROD.FAK_ID 
        INNER JOIN OUT_EL ON FAK_PROD.OPR_ID = OUT_EL.OPR_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        INNER JOIN OPR ON FAK_PROD.OPR_ID = OPR.ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
        INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
        LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
        LEFT JOIN UNP ON UNP.ID = OUT.UNP_ID 
    WHERE 
        (:P_OPR_FAK_PROD = 0 AND SKLAD.ID <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) OR 
        (:P_OPR_FAK_PROD = 1 AND SKLAD.ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) 
    ORDER BY 1 
    INTO 
        :R_OUT_EL_ID, :R_SIMPLE_ID, :L_SUMA, :R_OUT_KOL, :R_SKLAD_ID, :R_KLI_ID, :R_KLI_NAME, :R_UNP, :R_OPR_ID 
    DO BEGIN 
        SELECT 
            SUM(KI_PROD_SUMA_EL.SUMA) 
        FROM 
            KI_PROD_SUMA_EL 
        WHERE 
            KI_PROD_SUMA_EL.OUT_EL_ID = :R_OUT_EL_ID 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = KI_PROD_SUMA_EL.OPR_ID) 
        INTO 
            :L_SUMA_KI; 
 
        -- ПОЛУЧАВАМ ЕДИНИЧНА ПРОДАЖНА ЦЕНА 
        IF (R_OUT_KOL = 0.00) THEN 
            R_SUMA = 0.00; 
        ELSE 
            R_SUMA = ROUND(L_SUMA / R_OUT_KOL, 5); 
 
        -- СЕГАШНАТА + ВЪРНАТОТО КАТО КИ ЗА СУМА ПРЕДИ Е ОРИГИНАЛНАТА СУМА 
        R_OUT_SUMA = ROUND(L_SUMA + COALESCE(L_SUMA_KI, 0.00), 2); 
 
        -- СУМА И КОЛИЧЕСТВО ОТ ПРЕДИШНИ ВРЪЩАНИЯ И КРЕДИТНИ 
        SELECT 
            SUM(ORN.SUMA_SR), 
            SUM(IN_EL.KOL) 
        FROM 
            IN_EL INNER JOIN OPR_RAZPAD_NODE ORN ON (ORN.OUT_EL_ID = :R_OUT_EL_ID AND ORN.IN_EL_ID = IN_EL.ID) 
            INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID AND OPR.OPR_TIP IN (26,40,41) 
        INTO 
            :R_SUMA_LEFT, :L_KOL_IN; 
 
        R_NAL_KOL = ROUND(R_OUT_KOL - COALESCE(L_KOL_IN, 0.00), 5); 
        R_SUMA = ROUND(R_SUMA * R_NAL_KOL,2); 
        -- ОРИГИНАЛНАТА СУМА - КИ ЗА СУМА - ВРЪЩАНИЯ И КРЕДИТНИ НА СТОКА Е ТЕКУЩИЯ ОСТАТЪК 
        R_SUMA_LEFT = R_OUT_SUMA - COALESCE(L_SUMA_KI, 0.00) - COALESCE(R_SUMA_LEFT, 0.00); 
 
        IF (R_NAL_KOL > 0.00) THEN 
            SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_SERIAL_NUM_SUB_PROD (
    P_SKLAD_IDS VARCHAR(200))
RETURNS (
    R_SKLAD_ID SMALLINT,
    R_SIMPLE_ID INTEGER,
    R_ELEMENT_ID INTEGER,
    R_IN_EL_ID INTEGER,
    R_SN VARCHAR(30))
AS
BEGIN
    FOR EXECUTE STATEMENT
    'SELECT
        OPR.SKLAD_ID,
        IN_EL.SIMPLE_ID,
        PARTIDA_NAL.ELEMENT_ID,
        PARTIDA_NAL.IN_EL_ID,
        SERIAL_NUM.SN
    FROM
        OPR INNER JOIN IN_EL ON (OPR.SKLAD_ID IN('||:P_SKLAD_IDS||') AND IN_EL.OPR_ID = OPR.ID)
        INNER JOIN PARTIDA_NAL ON IN_EL.ID = PARTIDA_NAL.IN_EL_ID
        INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PARTIDA_NAL.ELEMENT_ID
    WHERE
        PARTIDA_NAL.KOL >0'
    INTO
        :R_SKLAD_ID,:R_SIMPLE_ID,:R_ELEMENT_ID,:R_IN_EL_ID,:R_SN
    DO SUSPEND;
END^


ALTER PROCEDURE GET_SIMPLE_ET (
    ID_SIM INTEGER,
    ID_CL INTEGER)
RETURNS (
    NAME VARCHAR(100),
    NAME_SHORT TYPE OF DOM_CHAR_50,
    CODE TYPE OF DOM_CHAR_50,
    CENA_PROD DOUBLE PRECISION,
    ME_NAME CHAR(2),
    ME_NAME_LONG VARCHAR(15),
    SEL_NAME VARCHAR(50),
    BARCOD VARCHAR(13),
    BARCODKOL INTEGER,
    ME_IS_BROI INTEGER,
    ME_NAME2 CHAR(2),
    ME_NAME_LONG2 VARCHAR(15),
    ME_IS_BROI2 INTEGER,
    KOEF_ET INTEGER,
    KOEF_ET2 INTEGER,
    EXT1 TYPE OF DOM_CHAR_2000,
    NBARCODE INTEGER,
    SASTAV_NAME VARCHAR(100),
    CODE2 TYPE OF DOM_CHAR_50,
    NAME_LAT VARCHAR(100),
    R_EXT2 TYPE OF DOM_CHAR_1000)
AS
BEGIN 
  BARCOD = ''; 
  BARCODKOL = 0; 
    SELECT 
      SIMPLE.NAME, 
      COALESCE(SIMPLE.NAME_SHORT,''), 
      COALESCE(SIMPLE.CODE,''), 
      COALESCE(ME1.NAME,'') AS ME_NAME, 
      COALESCE(ME1.NAME_LONG,'') AS ME_NAME_LONG, 
      COALESCE(ME1.IS_BROI,0) AS IS_BROI, 
      COALESCE(ME1.KOEF_ET, 1000) AS KOEF_ET, 
      COALESCE(SELEKCIQ.NAME,'') AS SEL_NAME, 
      COALESCE(ME2.NAME,'') AS ME_NAME2, 
      COALESCE(ME2.NAME_LONG,'') AS ME_NAME_LONG2, 
      COALESCE(ME2.IS_BROI,0) AS IS_BROI2, 
      COALESCE(ME2.KOEF_ET, 1000) AS KOEF_ET2, 
      COALESCE(SIMPLE.EXT1, '') AS EXT1, 
      COALESCE(SASTAV.NAME, '') AS SASTAV_NAME, 
      COALESCE(SIMPLE.CODE2, ''), 
      COALESCE(SIMPLE.NAME_2, '') AS NAME_LAT, 
      coalesce(simple.EXT2, '') as EXT2 
    FROM SIMPLE 
      LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
      LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
      LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
      LEFT JOIN SASTAV ON SASTAV.ID = SIMPLE.SASTAV_ID 
    WHERE 
      SIMPLE.ID = :ID_SIM 
    INTO :NAME, 
         :NAME_SHORT, 
         :CODE, 
         :ME_NAME, 
         :ME_NAME_LONG, 
         :ME_IS_BROI, 
         :KOEF_ET, 
         :SEL_NAME, 
         :ME_NAME2, 
         :ME_NAME_LONG2, 
         :ME_IS_BROI2, 
         :KOEF_ET2, 
         :EXT1, 
         :SASTAV_NAME, 
         :CODE2, 
         :NAME_LAT, 
         :R_EXT2; 
 
    SELECT FIRST 1 
      COALESCE(BARCODE,''), 
      COALESCE(KOL,0) 
    FROM BARCODE 
    WHERE SIMPLE_ID = :ID_SIM 
    INTO :BARCOD, 
         :BARCODKOL; 
 
    NBARCODE = 0; 
    SELECT 
      COUNT(ID) 
    FROM 
      BARCODE 
    WHERE 
      SIMPLE_ID = :ID_SIM 
    INTO 
      :NBARCODE; 
 
    CENA_PROD = 0; 
    SELECT 
      CENOVA_LISTA_EL.CENA 
    FROM CENOVA_LISTA_EL 
    JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ID = :ID_CL 
    WHERE 
      CENOVA_LISTA_EL.SIMPLE_ID = :ID_SIM 
    INTO :CENA_PROD; 
 
    SUSPEND; 
END^


ALTER PROCEDURE GET_SIMPLE_GROUP (
    P_GROUP_ID INTEGER)
RETURNS (
    R_GROUP_NAME VARCHAR(1024))
AS
DECLARE VARIABLE L_GROUP_ID INTEGER;
DECLARE VARIABLE L_GROUP_NAME VARCHAR(1024);
DECLARE VARIABLE L_PARENT_ID INTEGER;
BEGIN
  SELECT
    SIMPLE_GROUP.ID,
    SIMPLE_GROUP.NAME,
    SIMPLE_GROUP.PARENT
  FROM
    SIMPLE_GROUP
  WHERE
    SIMPLE_GROUP.ID = :P_GROUP_ID
  INTO
    :L_GROUP_ID,  :L_GROUP_NAME, :L_PARENT_ID;
  IF (L_PARENT_ID IS NULL OR L_PARENT_ID = 0) THEN BEGIN
    R_GROUP_NAME = L_GROUP_NAME;
  END
  ELSE BEGIN
    EXECUTE PROCEDURE GET_SIMPLE_GROUP(L_PARENT_ID) RETURNING_VALUES R_GROUP_NAME;
    R_GROUP_NAME = R_GROUP_NAME || '/' || L_GROUP_NAME;
  END
END^


ALTER PROCEDURE GET_SIMPLE_GROUP_NAME
RETURNS (
    R_GROUP_ID INTEGER,
    R_GROUP_ID_IN VARCHAR(1024),
    R_GROUP_NAME VARCHAR(1024))
AS
DECLARE VARIABLE L_SIM_ID INTEGER;
DECLARE VARIABLE L_SEL_ID INTEGER;
DECLARE VARIABLE L_GROUP_NAME VARCHAR(1024);
DECLARE VARIABLE L_GROUP_ID INTEGER;
DECLARE VARIABLE L_PAT VARCHAR(50);
DECLARE VARIABLE L_LEN INTEGER;
DECLARE VARIABLE L_C INTEGER;
BEGIN
  L_C = 0;

  FOR SELECT
    SIMPLE_GROUP.ID
  FROM
    SIMPLE_GROUP
  ORDER BY SIMPLE_GROUP.PARENT NULLS FIRST, SIMPLE_GROUP.NAME
  INTO
    :R_GROUP_ID
  DO BEGIN
    /* Намира рекурсивно името на селекцията */
    EXECUTE PROCEDURE GET_SIMPLE_GROUP(R_GROUP_ID) RETURNING_VALUES :L_GROUP_NAME;
    /* Намира рекурсивно ID-тата на текущата група подгрупите */
    EXECUTE PROCEDURE GET_SIMPLE_SUB_GROUPS('', R_GROUP_ID) RETURNING_VALUES :R_GROUP_ID_IN;
    R_GROUP_ID_IN = ',' || R_GROUP_ID_IN || ',';             /* За да може да работи containing */
    R_GROUP_NAME = SUBSTRING(L_GROUP_NAME FROM 1 FOR 50);    /* Името на селекцията не може да е повече от 50 символа */
    /* Дължина на низ (името на групата) */
    L_PAT = '';
    L_LEN = 0;
    WHILE (NOT R_GROUP_NAME LIKE L_PAT) DO BEGIN
      L_PAT = L_PAT || '_';
      L_LEN = L_LEN + 1;
    END
    IF (L_LEN = 50) THEN BEGIN
      L_C = L_C + 1;
      R_GROUP_NAME = SUBSTRING(R_GROUP_NAME FROM 1 FOR 47) || '/' || CAST(L_C AS VARCHAR(2));
    END
    /* Създава селекция (потребителя не е известене) */
    L_SEL_ID = GEN_ID(GEN_SELEKCIQ_ID, 1);
    INSERT INTO SELEKCIQ (ID, NAME, TIP, ACTIVEN, USER_ID) VALUES (:L_SEL_ID, :R_GROUP_NAME,  1, 1, NULL);
    /* Добавя елементите към селекцията */
    FOR SELECT
      SIMPLE.ID
    FROM
        SIMPLE INNER JOIN SIMPLE_GROUP ON SIMPLE.SIMPLE_GROUP_ID = SIMPLE_GROUP.ID
    WHERE
      :R_GROUP_ID_IN CONTAINING ','||SIMPLE_GROUP.ID||','
    INTO
      :L_SIM_ID
    DO BEGIN
      INSERT INTO SELEKCIQ_SIM_EL (SIMPLE_ID, SELEKCIQ_ID) VALUES (:L_SIM_ID, :L_SEL_ID);
      /* Селекция по подрабзибарне */
      UPDATE SIMPLE
      SET SIMPLE.DEF_SEL_ID = :L_SEL_ID
      WHERE SIMPLE.ID = :L_SIM_ID;
    END
  END
END^


ALTER PROCEDURE GET_SIMPLE_HISTORY (
    P_SKLAD_ID TYPE OF DOM_SMAL_INT,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_FROM_DATE TYPE OF DOM_CHAR_10,
    P_TO_DATE TYPE OF DOM_CHAR_10,
    P_FILTER_ORDER TYPE OF DOM_CHAR_10)
RETURNS (
    R_SIMPLE_CODE TYPE OF DOM_CHAR_50,
    R_BARCODE VARCHAR(13),
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_OPR_ID TYPE OF DOM_KEY,
    R_OPR_TIP TYPE OF DOM_SMAL_INT,
    R_OPR_NAME TYPE OF DOM_CHAR_50,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_KOL_IN TYPE OF DOM_KOL,
    R_KOL_OUT TYPE OF DOM_KOL,
    R_KOL_SALDO TYPE OF DOM_KOL,
    R_SUMA_IN_FR TYPE OF DOM_KOL,
    R_SUMA_OUT_FR TYPE OF DOM_KOL,
    R_SUMA_SALDO_FR TYPE OF DOM_KOL,
    R_SUMA_IN_SR TYPE OF DOM_KOL,
    R_SUMA_OUT_SR TYPE OF DOM_KOL,
    R_SUMA_SALDO_SR TYPE OF DOM_KOL,
    R_SKLAD_NAME TYPE OF DOM_CHAR_20,
    R_ED_CENA_IN_FR TYPE OF DOM_CENA,
    R_ED_CENA_IN_SR TYPE OF DOM_CENA,
    R_ED_CENA_OUT_FR TYPE OF DOM_CENA,
    R_ED_CENA_OUT_SR TYPE OF DOM_CENA,
    R_ED_CENA_SALDO_FR TYPE OF DOM_CENA,
    R_ED_CENA_SALDO_SR TYPE OF DOM_CENA,
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_KLI_ID TYPE OF DOM_KEY,
    R_PN_SUMA_FR TYPE OF DOM_KOL,
    R_PN_SUMA_SR TYPE OF DOM_KOL,
    R_PN_KOL TYPE OF DOM_KOL,
    R_PN_SALDO_SUMA_FR TYPE OF DOM_KOL,
    R_PN_SALDO_SUMA_SR TYPE OF DOM_SUMA,
    R_PN_SALDO_KOL TYPE OF DOM_KOL)
AS
DECLARE VARIABLE L_OUT_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_IN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_IN_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_IN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_OUT_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_OUT_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_INV_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_INV_FIND_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_INV_CENA TYPE OF DOM_CENA; 
DECLARE VARIABLE L_KOL_MINUS TYPE OF DOM_KOL; 
DECLARE VARIABLE L_TEMP_ID TYPE OF DOM_KEY; 
BEGIN 
/*V.7*/ 
    SELECT 
        SIMPLE.NAME, 
        SIMPLE.CODE, 
       (SELECT FIRST 1 BAR."BARCODE"  FROM  BARCODE BAR WHERE BAR.SIMPLE_ID= :P_SIMPLE_ID)  AS BAR_CODE 
    FROM 
        SIMPLE 
    WHERE 
        SIMPLE.ID = :P_SIMPLE_ID 
    INTO 
        :R_SIMPLE_NAME, :R_SIMPLE_CODE, :R_BARCODE; 
 
    R_SIMPLE_ID = P_SIMPLE_ID; 
 
    -- НАЧАЛНО САЛДО 
 
    --НАМИРАМ СУМИ И ОБЩОТО ВЛЯЗЛО КОЛИЧЕСТВО 
    SELECT 
        COALESCE(SUM(IN_EL.KOL),0), 
        COALESCE(SUM(IN_EL.SUMA_FR),0), 
        COALESCE(SUM(IN_EL.SUMA_SR),0) 
    FROM 
        IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
    WHERE 
        IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
        AND OPR.SKLAD_ID = :P_SKLAD_ID 
        AND OPR.OPR_DATE < :P_FROM_DATE 
    INTO 
        :R_KOL_IN,:R_SUMA_IN_FR,:R_SUMA_IN_SR; 
 
    --ОТРИЦАТЕЛНО КОЛИЧЕСТВО ТЪРСЕНО ПРИ ИНВЕНАРИЗАЦИЯ И НЕМРЕНО 0.00 ИЛИ > 0.00 
    --ТО НЕ СЕ ОСТОЙНОСТЯВА, НО ИМАМЕ ПРОМЯНА НА НАЛИЧНОСТИТЕ 
    SELECT 
        COALESCE(SUM(ABS(INV_OPIS.KOL_S)),0.00) 
    FROM 
        INV_OPIS INNER JOIN OPR ON OPR.ID = INV_OPIS.OPR_ID 
    WHERE 
        INV_OPIS.SIMPLE_ID = :P_SIMPLE_ID 
        AND OPR.SKLAD_ID = :P_SKLAD_ID 
        AND OPR.OPR_DATE < :P_FROM_DATE 
        AND INV_OPIS.KOL_S < 0.00 
    INTO 
        :L_IN_KOL; 
 
    R_KOL_IN = ROUND(R_KOL_IN + L_IN_KOL,5); 
 
    SELECT 
        COALESCE(SUM(OUT_EL.KOL),0), 
        COALESCE(SUM(OUT_EL.SUMA_FR),0), 
        COALESCE(SUM(OUT_EL.SUMA_SR),0) 
    FROM 
        OUT_EL LEFT JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
    WHERE 
        OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
        AND OPR.SKLAD_ID = :P_SKLAD_ID 
        AND OPR.OPR_DATE < :P_FROM_DATE 
    INTO 
        :R_KOL_OUT,:R_SUMA_OUT_FR,:R_SUMA_OUT_SR; 
 
    R_KOL_SALDO = ROUND(R_KOL_IN - R_KOL_OUT,5); 
 
    R_OPR_NAME = 'Начално салдо'; 
    R_OPR_ID   = -1; 
    R_OPR_TIP  = -1; 
    R_OPR_DATE = P_FROM_DATE; 
    R_SUMA_SALDO_FR = ROUND(R_SUMA_IN_FR - R_SUMA_OUT_FR,2); 
    R_SUMA_SALDO_SR = ROUND(R_SUMA_IN_SR - R_SUMA_OUT_SR,2); 
 
    --САЛДО ПО ПАРТИДИ 
    SELECT 
        COALESCE(SUM(PEN.KOL),0.00), 
        COALESCE(SUM(PEN.SUMA_FR),0.00), 
        COALESCE(SUM(PEN.SUMA_SR),0.00) 
    FROM 
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
        INNER JOIN OPR ON OPR.ID = PEN.OPR_ID 
        INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.PARTIDA_NODE_ID = PEN.ID 
    WHERE 
        PN.SKLAD_ID = :P_SKLAD_ID 
        AND PN.SIMPLE_ID = :P_SIMPLE_ID 
        AND OPR.OPR_DATE < :P_FROM_DATE 
    INTO 
        :R_PN_SALDO_KOL,:R_PN_SALDO_SUMA_FR,:R_PN_SALDO_SUMA_SR; 
 
    SELECT 
        COALESCE(SUM(PEN.KOL),0.00), 
        COALESCE(SUM(PEN.SUMA_FR),0.00), 
        COALESCE(SUM(PEN.SUMA_SR),0.00) 
    FROM 
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
        INNER JOIN OPR ON OPR.ID = PEN.OPR_ID 
        INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.PARTIDA_NODE_ID = PEN.ID 
    WHERE 
        PN.SKLAD_ID = :P_SKLAD_ID 
        AND PN.SIMPLE_ID = :P_SIMPLE_ID 
        AND OPR.OPR_DATE < :P_FROM_DATE 
    INTO 
        :R_PN_KOL,:R_PN_SUMA_FR,:R_PN_SUMA_SR; 
 
    R_PN_SALDO_KOL = ROUND(R_PN_SALDO_KOL - R_PN_KOL,5); 
    R_PN_SALDO_SUMA_FR = ROUND(R_PN_SALDO_SUMA_FR - R_PN_SUMA_FR,2); 
    R_PN_SALDO_SUMA_SR = ROUND(R_PN_SALDO_SUMA_SR - R_PN_SUMA_SR,2); 
    R_PN_KOL = R_PN_SALDO_KOL; 
    R_PN_SUMA_FR = R_PN_SALDO_SUMA_FR; 
    R_PN_SUMA_SR = R_PN_SALDO_SUMA_SR; 
 
    SUSPEND; 
 
    L_OUT_KOL = 0; 
    L_IN_KOL = 0; 
    L_IN_SUMA_SR = 0; 
    L_IN_SUMA_FR = 0; 
    L_OUT_SUMA_SR = 0; 
    L_OUT_SUMA_FR = 0; 
    R_SIMPLE_ID = -1; 
    --ИСТОРИЯТА НА ПРОДУКТА ЗА ДАДЕНИЯ ПЕРИОД 
    R_SIMPLE_NAME = NULL; 
    R_SIMPLE_CODE = NULL; 
    R_BARCODE=NULL; 
    R_KLI_ID = NULL; 
    L_KOL_MINUS = 0.00; 
 
    R_PN_SALDO_KOL = 0.00; 
    R_PN_SALDO_SUMA_FR = 0.00; 
    R_PN_SALDO_SUMA_SR = 0.00; 
    R_PN_KOL = 0.00; 
    R_PN_SUMA_FR = 0.00; 
    R_PN_SUMA_SR = 0.00; 
 
    FOR EXECUTE STATEMENT 
    'SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.OPR_TIP, 
        CAST(NULL AS DOUBLE PRECISION), 
        CAST(NULL AS DOUBLE PRECISION), 
        CAST(NULL AS DOUBLE PRECISION), 
        OUT_EL.SUMA_SR, 
        OUT_EL.SUMA_FR, 
        OUT_EL.KOL, 
        OPR_TIP.NAME, 
        CAST (NULL AS VARCHAR(20)), 
        OPR.KLI_ID, 
        OUT_EL.ID 
    FROM 
        OPR INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OPR.ID 
        INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
        LEFT JOIN KLI ON OPR.KLI_ID = KLI.ID 
    WHERE 
        OPR.OPR_DATE BETWEEN '''||:P_FROM_DATE ||''' AND '''|| :P_TO_DATE ||''' 
        AND OPR.SKLAD_ID = '||:P_SKLAD_ID|| 
    '   AND OUT_EL.SIMPLE_ID = '||:P_SIMPLE_ID || 
    ' UNION ALL 
    SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.OPR_TIP, 
        IN_EL.SUMA_SR, 
        IN_EL.SUMA_FR, 
        IN_EL.KOL, 
        CAST(NULL AS DOUBLE PRECISION), 
        CAST(NULL AS DOUBLE PRECISION), 
        CAST(NULL AS DOUBLE PRECISION), 
        OPR_TIP.NAME, 
        CAST (NULL AS VARCHAR(20)), 
        OPR.KLI_ID, 
        IN_EL.ID 
    FROM 
        OPR INNER JOIN IN_EL ON IN_EL.OPR_ID = OPR.ID 
        INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
        LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
    WHERE 
        OPR.OPR_DATE BETWEEN '''|| :P_FROM_DATE ||''' AND '''||:P_TO_DATE||''' 
        AND OPR.SKLAD_ID = '||:P_SKLAD_ID|| 
    '   AND IN_EL.SIMPLE_ID = '||:P_SIMPLE_ID|| 
    '   AND OPR_TIP != 47 
 
    UNION ALL 
    SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.OPR_TIP, 
        CAST(NULL AS DOUBLE PRECISION), 
        CAST(NULL AS DOUBLE PRECISION), 
        CAST(0.00 AS DOUBLE PRECISION), 
        CAST(NULL AS DOUBLE PRECISION), 
        CAST(NULL AS DOUBLE PRECISION), 
        CAST(0.00 AS DOUBLE PRECISION), 
        OPR_TIP.NAME, 
        SKLAD.NAME, 
        OPR.KLI_ID, 
        0 
    FROM 
        OPR INNER JOIN INV_OPIS ON INV_OPIS.OPR_ID = OPR.ID AND INV_OPIS.SIMPLE_ID = '||:P_SIMPLE_ID ||' 
        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
        INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
        LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
    WHERE 
        OPR.OPR_DATE BETWEEN '''||:P_FROM_DATE ||''' AND  ''' ||:P_TO_DATE ||''' 
        AND OPR.SKLAD_ID = '||:P_SKLAD_ID ||' 
        AND NOT EXISTS(SELECT OUT_EL.ID FROM OUT_EL WHERE OPR_ID = OPR.ID AND OUT_EL.SIMPLE_ID = '||:P_SIMPLE_ID|| ') 
        AND NOT EXISTS(SELECT IN_EL.ID FROM IN_EL WHERE OPR_ID = OPR.ID AND IN_EL.SIMPLE_ID = '||:P_SIMPLE_ID||') 
    ORDER BY '|| :P_FILTER_ORDER || ',13' 
    INTO 
        :R_OPR_ID,:R_OPR_DATE,:R_OPR_TIP,:R_SUMA_IN_SR,:R_SUMA_IN_FR,:R_KOL_IN, 
        :R_SUMA_OUT_SR,:R_SUMA_OUT_FR,:R_KOL_OUT,:R_OPR_NAME,:R_SKLAD_NAME,:R_KLI_ID,:L_TEMP_ID 
    DO BEGIN 
 
        L_INV_ID = NULL; 
        IF (R_OPR_TIP = 3) THEN BEGIN 
            SELECT 
                INV_OPIS.ID, 
                INV_OPIS.KOL_F, 
                INV_OPIS.CENA_F 
             FROM 
                INV_OPIS 
             WHERE 
                INV_OPIS.OPR_ID = :R_OPR_ID 
                AND INV_OPIS.SIMPLE_ID = :P_SIMPLE_ID 
             INTO 
                 :L_INV_ID,:L_INV_FIND_KOL,:L_INV_CENA; 
        END 
 
        IF (L_INV_ID IS NOT NULL) THEN BEGIN 
            IF (L_INV_FIND_KOL = R_KOL_SALDO) THEN BEGIN 
            --НАМЕРЕНО ОТ ИНВ = ТЕКУЩОТО САЛДО -> НЯМА ПРОМЯНА 
                R_SUMA_IN_FR = NULL; 
                R_SUMA_OUT_FR = NULL; 
                R_KOL_IN = 0.00; 
                R_KOL_OUT = 0.00; 
            END 
            ELSE BEGIN 
            --ИМА РАЗЛИКА МЕЖДУ НАМЕРЕНОТО ОТ ИНВЕНТАРИЗАЦИЯ И ТЕКУЩОТО САЛДО 
            --ЩЕ СЕ ИЗЧИСЛИ КАКВО ТРЯБВА ДА Е САЛДОТО 
                IF (L_INV_FIND_KOL > R_KOL_SALDO) THEN BEGIN 
                --САЛДОТО Е ПО-МАЛКО ОТ НАМЕРЕНОТО 
                    IF (R_KOL_SALDO < 0.00) THEN BEGIN 
                        L_KOL_MINUS = ROUND(L_KOL_MINUS + R_KOL_SALDO,5); 
                    --ОТРИЦАТЕЛНО САЛДО - НОВОТ САЛДО Е РАВНО НА НАМЕРЕНОТО ОТ ИНВЕНТАРИЗАЦИЯ 
                        R_SUMA_SALDO_FR = ROUND(L_INV_FIND_KOL * L_INV_CENA,2); 
                        R_SUMA_SALDO_SR = R_SUMA_SALDO_FR; 
                        R_SUMA_IN_FR    = R_SUMA_SALDO_FR; 
                        R_SUMA_IN_SR    = R_SUMA_SALDO_FR; 
 
                        R_ED_CENA_IN_FR = L_INV_CENA; 
                        R_ED_CENA_IN_SR = L_INV_CENA; 
                        R_KOL_SALDO = L_INV_FIND_KOL; 
 
                        L_IN_KOL = ROUND(L_IN_KOL + R_KOL_IN,5); 
                        L_IN_SUMA_SR = ROUND(L_IN_SUMA_SR + R_SUMA_IN_SR,2) ; 
                        L_IN_SUMA_FR = ROUND(L_IN_SUMA_FR + R_SUMA_IN_FR,2) ; 
 
                        --R_PN_KOL = R_KOL_SALDO; 
                        --R_PN_SUMA_FR = R_SUMA_IN_FR; 
                        --R_PN_SUMA_SR = R_SUMA_IN_SR; 
                    END 
                    ELSE BEGIN 
                        --ИМА НАЛИЧНО, НО Е НАМЕРЕНО ПОВЕЧЕ ОТ НЕГО. ДОБАВЯМЕ РАЗЛИКАТА ПО ЦЕНИ ВЪВЕДЕНИ В ИНВЕНТАРИЗАЦИЯТА 
                        R_SUMA_SALDO_FR = ROUND(R_SUMA_SALDO_FR + ROUND(L_INV_CENA * ROUND(L_INV_FIND_KOL - R_KOL_SALDO,5),2),2); 
                        R_SUMA_SALDO_SR = ROUND(R_SUMA_SALDO_SR + ROUND(L_INV_CENA * ROUND(L_INV_FIND_KOL - R_KOL_SALDO,5),2),2); 
                        --ПОЛУЧАВАМ ВХОДЯЩАТА СУМА, КАТО НАМИРАМ ЕДИНИЧНАТА ЦЕНА НА ВХОДА И Я УМНОЖАВАМ ПО РАЗЛИКАТА МЕЖДУ 
                        --НАМЕРЕНОТО КОЛИЧЕСТВО И ТЕКУЩОТО САЛДО 
                        R_SUMA_IN_FR = ROUND(ROUND(R_SUMA_IN_FR / R_KOL_IN,5) * ROUND(L_INV_FIND_KOL - R_KOL_SALDO,5),2); 
                        --КОЛИЧЕСТВОТО ЗА ВХОДА Е РАЗЛИКАТА М/У НАМЕРЕНОТО ОТ ИНВ И САЛДОТО 
                        R_KOL_IN = ROUND(L_INV_FIND_KOL - R_KOL_SALDO,5); 
                        R_KOL_SALDO = L_INV_FIND_KOL;--НОВОТО САЛДО ЗА КОЛ Е = НАМЕРЕНОТО ОТ ИНВ 
                        R_ED_CENA_IN_FR = L_INV_CENA; 
                        R_ED_CENA_IN_SR = L_INV_CENA; 
 
                        L_IN_KOL = ROUND(L_IN_KOL + R_KOL_IN,5); 
                        L_IN_SUMA_SR = ROUND(L_IN_SUMA_SR + R_SUMA_IN_SR,2) ; 
                        L_IN_SUMA_FR = ROUND(L_IN_SUMA_FR + R_SUMA_IN_FR,2) ; 
 
                        --R_PN_KOL = ROUND(L_INV_FIND_KOL - R_KOL_SALDO,5); 
                        --R_PN_SUMA_FR = ROUND(L_INV_CENA * ROUND(L_INV_FIND_KOL - R_KOL_SALDO,5),2); 
                        --R_PN_SUMA_SR = ROUND(L_INV_CENA * ROUND(L_INV_FIND_KOL - R_KOL_SALDO,5),2); 
                    END 
                END 
                ELSE BEGIN 
                    IF (L_INV_FIND_KOL > 0.00) THEN BEGIN 
                        --ИМАМ НАЛИЧНО, НО Е НАМЕРЕНО ПО-МАЛКО ОТ НЕГО И НЕ Е 0.00 
                        --ТРЯБВА ДА СЕ ПОДВАДИ РАЗЛИКАТА 
                        R_SUMA_OUT_FR = ROUND( ROUND(R_SUMA_OUT_FR / R_KOL_OUT,5) * ROUND(R_KOL_SALDO - L_INV_FIND_KOL,5),2); 
 
                        R_KOL_OUT = ROUND(R_KOL_SALDO - L_INV_FIND_KOL,5); 
                        R_ED_CENA_OUT_FR = ROUND(R_SUMA_OUT_FR / R_KOL_OUT,5); 
                        R_SUMA_SALDO_FR = ROUND(R_SUMA_SALDO_FR - R_SUMA_OUT_FR,5); 
 
                        R_SUMA_OUT_SR = ROUND(R_KOL_OUT * R_ED_CENA_SALDO_SR,2); 
                        R_SUMA_SALDO_SR = ROUND(R_SUMA_SALDO_SR - R_SUMA_OUT_SR,2); 
                        R_ED_CENA_OUT_SR = ROUND(R_SUMA_OUT_SR / R_KOL_OUT,5); 
 
 
                        L_OUT_KOL = ROUND(L_OUT_KOL + R_KOL_OUT,5); 
                        L_OUT_SUMA_SR = ROUND(L_OUT_SUMA_SR + R_SUMA_OUT_SR,2); 
                        L_OUT_SUMA_FR = ROUND(L_OUT_SUMA_FR + R_SUMA_OUT_FR,2); 
 
                        R_KOL_SALDO = L_INV_FIND_KOL; 
                    END 
                    ELSE BEGIN 
                    --НАМЕРЕНО Е 0 - САЛДОТО СЕ ЗАНУЛЯВА 
                        R_KOL_OUT = R_KOL_SALDO; 
                        R_SUMA_OUT_FR = R_SUMA_SALDO_FR; 
                        R_SUMA_OUT_SR = R_SUMA_SALDO_SR; 
                        R_ED_CENA_OUT_FR = R_ED_CENA_SALDO_FR; 
                        R_ED_CENA_OUT_SR = R_ED_CENA_SALDO_SR; 
 
                        R_KOL_SALDO = 0.00; 
                        R_SUMA_SALDO_FR = 0.00; 
                        R_SUMA_SALDO_SR = 0.00; 
 
                        L_OUT_KOL = ROUND(L_OUT_KOL + R_KOL_OUT,5); 
                        L_OUT_SUMA_SR = ROUND(L_OUT_SUMA_SR + R_SUMA_OUT_SR,2) ; 
                        L_OUT_SUMA_FR = ROUND(L_OUT_SUMA_FR + R_SUMA_OUT_FR,2) ; 
 
                        R_KOL_IN = NULL; 
                        R_SUMA_IN_FR = NULL; 
                        R_SUMA_IN_SR = NULL; 
                        R_ED_CENA_IN_FR = NULL; 
                        R_ED_CENA_IN_SR = NULL; 
                    END 
                END 
 
            END 
 
--             R_PN_SALDO_KOL = ROUND(R_PN_SALDO_KOL + R_PN_KOL,5); 
--             R_PN_SALDO_SUMA_FR = ROUND(R_PN_SALDO_SUMA_FR + R_PN_SUMA_FR,2); 
--             R_PN_SALDO_SUMA_SR = ROUND(R_PN_SALDO_SUMA_SR + R_PN_SUMA_SR,2); 
 
            SELECT 
                COALESCE(SUM(KOL),0.00), 
                COALESCE(SUM(SUMA_FR),0.00), 
                COALESCE(SUM(SUMA_SR),0.00) 
            FROM 
                ( 
                SELECT 
                    -PEN.KOL AS KOL, 
                    -PEN.SUMA_FR AS SUMA_FR, 
                    -PEN.SUMA_SR AS SUMA_SR 
                FROM 
                        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
                        INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.PARTIDA_NODE_ID = PEN.ID 
                    WHERE 
                    PEN.OPR_ID = :R_OPR_ID 
                    AND PN.SIMPLE_ID = :P_SIMPLE_ID 
 
                UNION ALL 
 
                SELECT 
                    PEN.KOL, 
                    PEN.SUMA_FR, 
                    PEN.SUMA_SR 
                FROM 
                    PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
                    INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.PARTIDA_NODE_ID = PEN.ID 
                WHERE 
                    PEN.OPR_ID = :R_OPR_ID 
                    AND PN.SIMPLE_ID = :P_SIMPLE_ID) TMP 
            INTO 
                :R_PN_KOL,:R_PN_SUMA_FR,:R_PN_SUMA_SR; 
 
            R_PN_SALDO_KOL = ROUND(R_PN_SALDO_KOL + R_PN_KOL,5); 
            R_PN_SALDO_SUMA_FR = ROUND(R_PN_SALDO_SUMA_FR + R_PN_SUMA_FR,2); 
            R_PN_SALDO_SUMA_SR = ROUND(R_PN_SALDO_SUMA_SR + R_PN_SUMA_SR,2); 
 
        END 
        ELSE BEGIN 
            IF (R_SUMA_OUT_FR IS NOT NULL) THEN BEGIN 
                R_KOL_SALDO = ROUND(R_KOL_SALDO - R_KOL_OUT,5); 
                L_OUT_KOL = ROUND(L_OUT_KOL + R_KOL_OUT,5); 
                L_OUT_SUMA_SR = ROUND(L_OUT_SUMA_SR + R_SUMA_OUT_SR,2); 
                L_OUT_SUMA_FR = ROUND(L_OUT_SUMA_FR + R_SUMA_OUT_FR,2); 
                R_SUMA_SALDO_FR = ROUND(R_SUMA_SALDO_FR - R_SUMA_OUT_FR,2); 
                R_SUMA_SALDO_SR = ROUND(R_SUMA_SALDO_SR - R_SUMA_OUT_SR,2); 
                R_ED_CENA_OUT_FR = ROUND(R_SUMA_OUT_FR / R_KOL_OUT,5); 
                R_ED_CENA_OUT_SR = ROUND(R_SUMA_OUT_SR / R_KOL_OUT,5); 
                R_ED_CENA_IN_FR = NULL; 
                R_ED_CENA_IN_SR = NULL; 
 
                SELECT 
                    -COALESCE(SUM(PEN.KOL),0.00), 
                    -COALESCE(SUM(PEN.SUMA_FR),0.00), 
                    -COALESCE(SUM(PEN.SUMA_SR),0.00) 
                FROM 
                    PARTIDA_OUT_EL_NODE PON INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID 
                WHERE 
                    PON.OUT_EL_ID = :L_TEMP_ID 
                INTO 
                    :R_PN_KOL,:R_PN_SUMA_FR,:R_PN_SUMA_SR; 
 
 
                R_PN_SALDO_KOL = ROUND(R_PN_SALDO_KOL + R_PN_KOL,5); 
                R_PN_SALDO_SUMA_FR = ROUND(R_PN_SALDO_SUMA_FR + R_PN_SUMA_FR,2); 
                R_PN_SALDO_SUMA_SR = ROUND(R_PN_SALDO_SUMA_SR + R_PN_SUMA_SR,2); 
 
            END 
            ELSE IF (R_SUMA_IN_FR IS NOT NULL) THEN BEGIN 
                R_KOL_SALDO = ROUND(R_KOL_SALDO + R_KOL_IN,5); 
                L_IN_KOL = ROUND(L_IN_KOL + R_KOL_IN,5); 
                L_IN_SUMA_SR = ROUND(L_IN_SUMA_SR + R_SUMA_IN_SR,2); 
                L_IN_SUMA_FR = ROUND(L_IN_SUMA_FR + R_SUMA_IN_FR,2); 
 
                R_SUMA_SALDO_FR = ROUND(R_SUMA_SALDO_FR + R_SUMA_IN_FR,2); 
                R_SUMA_SALDO_SR = ROUND(R_SUMA_SALDO_SR + R_SUMA_IN_SR,2); 
                R_ED_CENA_IN_FR = IIF (R_KOL_IN <> 0,ROUND(R_SUMA_IN_FR / R_KOL_IN,5), R_SUMA_IN_FR); 
                R_ED_CENA_IN_SR = IIF (R_KOL_IN <> 0,ROUND(R_SUMA_IN_SR / R_KOL_IN,5), R_SUMA_IN_SR); 
                R_ED_CENA_OUT_FR = NULL; 
                R_ED_CENA_OUT_SR = NULL; 
 
                SELECT 
                    COALESCE(SUM(PEN.KOL),0.00), 
                    COALESCE(SUM(PEN.SUMA_FR),0.00), 
                    COALESCE(SUM(PEN.SUMA_SR),0.00) 
                FROM 
                    PARTIDA_IN_EL_NODE PIN INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
                WHERE 
                    PIN.IN_EL_ID = :L_TEMP_ID 
                INTO 
                    :R_PN_KOL,:R_PN_SUMA_FR,:R_PN_SUMA_SR; 
 
                R_PN_SALDO_KOL = ROUND(R_PN_SALDO_KOL + R_PN_KOL,5); 
                R_PN_SALDO_SUMA_FR = ROUND(R_PN_SALDO_SUMA_FR + R_PN_SUMA_FR,2); 
                R_PN_SALDO_SUMA_SR = ROUND(R_PN_SALDO_SUMA_SR + R_PN_SUMA_SR,2); 
 
            END 
 
        END 
 
        IF (R_KOL_SALDO <> 0) THEN BEGIN 
            R_ED_CENA_SALDO_FR = ABS(ROUND(R_SUMA_SALDO_FR / R_KOL_SALDO,5)); 
            R_ED_CENA_SALDO_SR = ABS(ROUND(R_SUMA_SALDO_SR / R_KOL_SALDO,5)); 
        END 
        ELSE BEGIN 
            R_ED_CENA_SALDO_FR = 0; 
                R_ED_CENA_SALDO_SR = 0; 
        END 
        R_SIMPLE_ID = P_SIMPLE_ID; 
        SUSPEND; 
    END 
 
    R_SIMPLE_NAME = NULL; 
    R_OPR_ID    = -1; 
    R_OPR_TIP   = -1; 
    R_SIMPLE_ID = -1; 
    R_OPR_NAME  = 'Общо излишъци:'; 
 
    R_KOL_OUT = L_KOL_MINUS; 
    R_SUMA_OUT_FR = 0.00; 
    R_SUMA_OUT_SR = 0.00; 
    R_ED_CENA_OUT_FR = 0.00; 
    R_ED_CENA_OUT_SR = 0.00; 
 
    R_KOL_IN = NULL; 
    R_SUMA_IN_FR = NULL; 
    R_SUMA_IN_SR = NULL; 
    R_ED_CENA_IN_FR = NULL; 
    R_ED_CENA_IN_SR = NULL; 
    SUSPEND; 
 
    R_OPR_DATE  = NULL; 
    R_KLI_ID = NULL; 
 
    R_OPR_NAME  = 'Общо в периода:'; 
    R_KOL_IN    = L_IN_KOL; 
    R_KOL_OUT   = L_OUT_KOL; 
    L_OUT_KOL = ROUND(L_OUT_KOL + L_KOL_MINUS,5); 
    R_KOL_SALDO = ROUND(L_IN_KOL - L_OUT_KOL,5); 
 
    R_SUMA_IN_FR    = L_IN_SUMA_FR; 
    R_SUMA_OUT_FR   = L_OUT_SUMA_FR; 
    R_SUMA_SALDO_FR = ROUND(L_IN_SUMA_FR - L_OUT_SUMA_FR,2); 
    R_SUMA_IN_SR    = L_IN_SUMA_SR; 
    R_SUMA_OUT_SR   = L_OUT_SUMA_SR; 
    R_SUMA_SALDO_SR = ROUND(L_IN_SUMA_SR - L_OUT_SUMA_SR,2); 
 
    R_SKLAD_NAME     = NULL; 
    R_ED_CENA_IN_FR  = NULL; 
    R_ED_CENA_IN_SR  = NULL; 
    R_ED_CENA_OUT_FR = NULL; 
    R_ED_CENA_OUT_SR = NULL; 
    R_ED_CENA_SALDO_FR = NULL; 
    R_ED_CENA_SALDO_SR = NULL; 
    SUSPEND; 
END ;^


ALTER PROCEDURE GET_SIMPLE_HISTORY_OBOB (
    P_SKLAD_ID TYPE OF DOM_KEY,
    P_FROM_DATE TYPE OF DOM_CHAR_10,
    P_TO_DATE TYPE OF DOM_CHAR_10,
    P_SIMPLE_ID TYPE OF DOM_KEY)
RETURNS (
    R_SIMPLE_CODE TYPE OF DOM_CHAR_50,
    R_BARCODE VARCHAR(13),
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_SUMANACH_FR TYPE OF DOM_SUMA,
    R_SUMA_SALDO_FR TYPE OF DOM_SUMA,
    R_SUMA_SALDO_SR TYPE OF DOM_SUMA,
    R_SUMANACH_SR TYPE OF DOM_SUMA,
    R_KOLNACH TYPE OF DOM_KOL,
    R_KOL_OB TYPE OF DOM_KOL,
    R_SUMA_FR_OB TYPE OF DOM_SUMA,
    R_SUMA_SR_OB TYPE OF DOM_SUMA,
    R_KOL_SALDO TYPE OF DOM_KOL,
    R_KOL_IN_OB TYPE OF DOM_KOL,
    R_KOL_OUT_OB TYPE OF DOM_KOL,
    R_SUMAIN_FR_OB TYPE OF DOM_SUMA,
    R_SUMA_OUT_FR_OB TYPE OF DOM_SUMA,
    R_SUMA_IN_SR_OB TYPE OF DOM_SUMA,
    R_SUMA_OUT_SR_OB TYPE OF DOM_SUMA,
    R_ED_CENA_IN_SR TYPE OF DOM_CENA)
AS
DECLARE VARIABLE L_SUM_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_SUM_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_QTY TYPE OF DOM_KOL; 
DECLARE VARIABLE L_KOLNACH_IN TYPE OF DOM_KOL; 
DECLARE VARIABLE L_SUMANACH_OUT_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_SUMANACH_OUT_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_SUMA_NACH_IN_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_SUMA_IN_SR_OB TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_KOL_IN_OB TYPE OF DOM_KOL; 
DECLARE VARIABLE L_KOL_OUT_OB TYPE OF DOM_KOL; 
DECLARE VARIABLE L_SUMA_OUT_FR_OB TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_SUMA_OUT_SR_OB TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_SUMA_IN_FR_OB TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_KOL_IZL TYPE OF DOM_KOL; 
BEGIN 
   FOR SELECT 
        SIMPLE.NAME, 
        SIMPLE.CODE, 
       (SELECT FIRST 1 BAR."BARCODE"  FROM  BARCODE BAR WHERE BAR.SIMPLE_ID=SIMPLE.ID)  AS BAR_CODE 
    FROM 
        SIMPLE 
    WHERE SIMPLE.ID =:P_SIMPLE_ID 
    INTO 
        :R_SIMPLE_NAME, :R_SIMPLE_CODE, :R_BARCODE 
    DO BEGIN 
        -- НАЧАЛНИ САЛДА 
        SELECT 
            COALESCE(SUM(IN_EL.KOL), 0.00), 
            COALESCE(SUM(IN_EL.SUMA_SR), 0.00), 
            COALESCE(SUM(IN_EL.SUMA_FR), 0.00) 
        FROM 
            IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
        WHERE 
            IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
            AND OPR.SKLAD_ID = :P_SKLAD_ID 
            AND OPR.OPR_DATE < :P_FROM_DATE 
        INTO 
            :R_KOLNACH, :R_SUMANACH_SR, :R_SUMANACH_FR; 
 
        SELECT 
            COALESCE(SUM(OUT_EL.KOL), 0.00), 
            COALESCE(SUM(OUT_EL.SUMA_FR), 0.00), 
            COALESCE(SUM(OUT_EL.SUMA_SR), 0.00) 
        FROM 
            OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
        WHERE 
            OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
            AND OPR.SKLAD_ID = :P_SKLAD_ID 
            AND OPR.OPR_DATE < :P_FROM_DATE 
        INTO 
            :L_QTY, :L_SUM_FR, :L_SUM_SR; 
 
        R_KOLNACH = ROUND(R_KOLNACH - L_QTY, 5); 
        R_SUMANACH_FR = ROUND(R_SUMANACH_FR - L_SUM_FR, 2); 
        R_SUMANACH_SR = ROUND(R_SUMANACH_SR - L_SUM_SR, 2); 
 
       --В ПЕРИОДА 
        L_SUMA_IN_SR_OB = 0; 
 
        WITH EL_T AS ( 
            SELECT 
                IIF(OPR.OPR_TIP IN (27, 39), -OUT_EL.SUMA_SR, CAST(NULL AS DOUBLE PRECISION)) AS IN_SUMA_SR, 
                IIF(OPR.OPR_TIP IN (27, 39), -OUT_EL.KOL, CAST(NULL AS DOUBLE PRECISION)) AS IN_KOL, 
                IIF(OPR.OPR_TIP IN (27, 39), -OUT_EL.SUMA_FR, CAST(NULL AS DOUBLE PRECISION)) AS IN_SUMA_FR, 
                IIF(OPR.OPR_TIP IN (27, 39), 0, OUT_EL.SUMA_SR) AS OUT_SUMA_SR, 
                IIF(OPR.OPR_TIP IN (27, 39), 0, OUT_EL.KOL) AS OUT_KOL, 
                IIF(OPR.OPR_TIP IN (27, 39), 0, OUT_EL.SUMA_FR) AS OUT_SUMA_FR, 
                COALESCE(IZL.KOL_IZL,0.00) AS IZL_OST 
            FROM 
                OPR INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OPR.ID 
                LEFT JOIN IZL ON IZL.OUT_EL_ID = OUT_EL.ID 
            WHERE 
                OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
                AND OPR.OPR_DATE BETWEEN :P_FROM_DATE AND :P_TO_DATE 
                AND OPR.SKLAD_ID = :P_SKLAD_ID 
                AND OPR.OPR_TIP < 100 
            PLAN JOIN (JOIN(OUT_EL INDEX(FK_OUT_EL_SIMPLE_ID), OPR INDEX(PK_OPR_ID, IDX_OPR_OPR_DATE, FK_OPR_OPR_TIP)), IZL INDEX (FK_IZL_OUT_EL_ID)) 
 
            UNION ALL 
 
            SELECT 
                IIF(OPR.OPR_TIP IN (26, 41), 0, IN_EL.SUMA_SR), 
                IIF(OPR.OPR_TIP IN (26, 41), 0, IN_EL.KOL), 
                IIF(OPR.OPR_TIP IN (26, 41), 0, IN_EL.SUMA_FR), 
                IIF(OPR.OPR_TIP IN (26, 41), - IN_EL.SUMA_SR, CAST(NULL AS DOUBLE PRECISION)), 
                IIF(OPR.OPR_TIP IN (26, 41), - IN_EL.KOL, CAST(NULL AS DOUBLE PRECISION)), 
                IIF(OPR.OPR_TIP IN (26, 41), - IN_EL.SUMA_FR, CAST(NULL AS DOUBLE PRECISION)), 
                NULL 
            FROM 
                OPR INNER JOIN IN_EL ON IN_EL.OPR_ID = OPR.ID 
            WHERE 
                IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
                AND OPR.OPR_DATE BETWEEN :P_FROM_DATE AND :P_TO_DATE 
                AND OPR.SKLAD_ID = :P_SKLAD_ID 
                AND OPR.OPR_TIP < 100 
            PLAN JOIN (IN_EL INDEX(FK_IN_EL_SIMPLE_ID), OPR INDEX (PK_OPR_ID, IDX_OPR_OPR_DATE,FK_OPR_OPR_TIP))) 
 
            SELECT 
                COALESCE(SUM(EL_T.IN_SUMA_SR),0.00), 
                COALESCE(SUM(EL_T.IN_KOL),0.00), 
                COALESCE(SUM(EL_T.IN_SUMA_FR),0.00), 
                COALESCE(SUM(EL_T.OUT_SUMA_SR),0.00), 
                COALESCE(SUM(EL_T.OUT_KOL),0.00), 
                COALESCE(SUM(EL_T.OUT_SUMA_FR),0.00), 
                COALESCE(SUM(EL_T.IZL_OST),0.00) 
            FROM 
                EL_T 
 
        INTO 
            :R_SUMA_IN_SR_OB, :R_KOL_IN_OB, :R_SUMAIN_FR_OB, :R_SUMA_OUT_SR_OB, :R_KOL_OUT_OB, :R_SUMA_OUT_FR_OB, :L_KOL_IZL; 
 
        R_KOL_OUT_OB = ROUND(:R_KOL_OUT_OB - COALESCE(:L_KOL_IZL, 0.00), 5); 
 
        R_KOL_OB = ROUND(COALESCE(:R_KOL_IN_OB, 0.00) - COALESCE(:R_KOL_OUT_OB, 0.00), 5); 
        R_SUMA_FR_OB = ROUND(COALESCE(:R_SUMAIN_FR_OB, 0.00) - COALESCE(:r_SUMA_OUT_FR_OB, 0.00), 2); 
        R_SUMA_SR_OB = ROUND(COALESCE(:R_SUMA_IN_SR_OB, 0.00) - COALESCE(:r_SUMA_OUT_SR_OB, 0.00), 2); 
 
        R_SUMA_SALDO_FR = ROUND(COALESCE(:R_SUMANACH_FR, 0.00) + COALESCE(:R_SUMA_FR_OB, 0.00), 2); 
        R_SUMA_SALDO_SR = ROUND(COALESCE(:R_SUMANACH_SR, 0.00) + COALESCE(:R_SUMA_SR_OB, 0.00), 2); 
        R_KOL_SALDO = ROUND(COALESCE(:R_KOLNACH, 0.00) + COALESCE(:R_KOL_OB, 0.00), 5); 
 
        IF (R_KOL_SALDO <> 0.00) THEN BEGIN 
          R_ED_CENA_IN_SR = ABS(ROUND(:R_SUMA_SALDO_SR /:R_KOL_SALDO, 5)); 
        END 
        ELSE 
          R_ED_CENA_IN_SR = 0; 
 
        SUSPEND; 
    END 
END;^


ALTER PROCEDURE GET_SIMPLE_IZP (
    P_SKLAD TYPE OF DOM_KEY,
    P_CL_ID TYPE OF DOM_KEY,
    P_TIP TYPE OF DOM_KEY)
RETURNS (
    KOL_NAL TYPE OF DOM_KOL,
    CENA TYPE OF DOM_CENA,
    CENA_SR TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    ME_ID TYPE OF DOM_SMAL_INT,
    RSN TYPE OF DOM_BOOLEAN,
    SIM_GROUP_ID TYPE OF DOM_KEY,
    RAZ_TIP_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    ME_KOEF TYPE OF DOM_INT,
    GR_NAME TYPE OF DOM_CHAR_50,
    KOL_NAL2 TYPE OF DOM_KOL,
    CODE2 TYPE OF DOM_CHAR_50,
    KOL_RZV TYPE OF DOM_KOL)
AS
DECLARE VARIABLE L_CENA DOM_CENA; 
BEGIN 
/*V.1*/ 
  FOR 
    SELECT 
      SIMPLE.ID, 
      SIMPLE.NAME, 
      SIMPLE.CODE, 
      SIMPLE.ME_ID, 
      SIMPLE.RSN, 
      SELEKCIQ.NAME AS GR_NAME, 
      SIMPLE.DEF_SEL_ID AS SIM_GROUP_ID, 
      COALESCE(SIMPLE.RAZ_TIP_ID,0) AS RAZ_TIP_ID, 
      ME.NAME AS ME, 
      COALESCE(ME.KOEF,0) AS ME_KOEF, 
      SIMPLE.CODE2, 
      NAL.KOL_NAL, 
      NAL.SUMA / NAL.KOL_NAL AS CENA_SR, 
      NAL.KOL_RZV 
    FROM 
      NAL LEFT JOIN SIMPLE ON SIMPLE.ID = NAL.SIMPLE_ID 
      LEFT JOIN ME ON SIMPLE.ME_ID = ME.ID 
      LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
    WHERE 
      NAL.SKLAD_ID = :P_SKLAD 
      AND NAL.KOL_NAL > 0 
      AND NOT SIMPLE.USLUGA = '1' 
      AND NOT SIMPLE."ACTIVE" = '0' 
    ORDER BY 2 
    INTO :ID,:NAME,:CODE,:ME_ID,:RSN, :GR_NAME, :SIM_GROUP_ID, 
         :RAZ_TIP_ID,:ME,:ME_KOEF,:CODE2,:KOL_NAL, :CENA_SR, :KOL_RZV 
  DO 
  BEGIN 
    IF (P_TIP = 2) THEN CENA = CENA_SR; 
    IF (P_TIP = 1) THEN BEGIN 
      CENA = NULL; 
      SELECT 
        CENOVA_LISTA_EL.CENA 
        FROM CENOVA_LISTA_EL 
        JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ID = :P_CL_ID 
        WHERE 
          CENOVA_LISTA_EL.SIMPLE_ID =:ID 
        INTO :CENA; 
    END 
    IF (P_TIP = 0) THEN BEGIN 
      CENA = NULL; 
      SELECT 
        CENOVA_LISTA_EL.CENA 
      FROM CENOVA_LISTA_EL 
      JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.DEF = 1 
      WHERE 
        CENOVA_LISTA_EL.SIMPLE_ID =:ID 
      INTO :CENA; 
    END 
    IF (CENA IS NULL) THEN CENA =L_CENA; 
    SUSPEND; 
  END 
END^


ALTER PROCEDURE GET_SIMPLE_KLI_CENI (
    P_SKLAD INTEGER,
    P_KLIENT INTEGER,
    P_DATE DATE,
    P_TIME TIME,
    P_SIMPLE_ID INTEGER,
    P_CENA_CURRENT DOUBLE PRECISION)
RETURNS (
    R_LINE VARCHAR(10000))
AS
declare variable L_SIMPLE_ID integer; 
declare variable L_CENA_CURRENT numeric(10,5); 
declare variable L_KLIENT integer; 
declare variable L_CENA numeric(10,5); 
BEGIN 
    L_CENA = -1.00; 
    L_SIMPLE_ID = 0; 
    R_LINE = ''; 
    FOR SELECT 
      CENA_CURRENT, 
      KLIENT, 
      SIMPLE_ID 
    FROM GET_CENI_SEL_POCKET_SIM_KLIENT (:P_SKLAD, :P_SIMPLE_ID,:P_DATE,:P_TIME, :P_CENA_CURRENT) 
    ORDER BY SIMPLE_ID, CENA_CURRENT, KLIENT 
    INTO 
      :L_CENA_CURRENT, :L_KLIENT, :P_SIMPLE_ID 
    DO BEGIN 
      IF ((L_CENA = L_CENA_CURRENT) AND (L_SIMPLE_ID = P_SIMPLE_ID)) THEN 
      BEGIN 
        R_LINE = R_LINE || L_KLIENT || '|'; 
      END 
      ELSE BEGIN 
        IF (R_LINE <> '') THEN 
          SUSPEND; 
 
        R_LINE = P_SIMPLE_ID || '|' || L_CENA_CURRENT || '|' || L_KLIENT || '|'; 
        L_CENA = L_CENA_CURRENT; 
        L_SIMPLE_ID = P_SIMPLE_ID; 
      END 
    END 
 
      SUSPEND; 
 
    L_CENA = -1.00; 
END^


ALTER PROCEDURE GET_SIMPLE_KONS (
    P_SKLAD TYPE OF DOM_KEY,
    P_TIP_PROD TYPE OF DOM_KEY,
    P_KLIENT TYPE OF DOM_KEY)
RETURNS (
    KOL_NAL TYPE OF DOM_KOL,
    CENA_SR TYPE OF DOM_CENA,
    LAST_CENA TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    CODE2 TYPE OF DOM_CHAR_50,
    USLUGA TYPE OF DOM_BOOLEAN,
    ME_ID TYPE OF DOM_SMAL_INT,
    DEF_SEL_ID TYPE OF DOM_KEY,
    LOCK_CENA_PROD TYPE OF DOM_BOOLEAN,
    D_D_S NUMERIC(4,2),
    RSN TYPE OF DOM_BOOLEAN,
    RAZ_TIP_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    ME_KOEF TYPE OF DOM_INT,
    GR_NAME TYPE OF DOM_CHAR_50,
    ME2_ID TYPE OF DOM_SMAL_INT,
    ME2 CHAR(2),
    KOL_NAL2 TYPE OF DOM_KOL,
    KOL_RZV TYPE OF DOM_KOL,
    DEF_RAZ_EL TYPE OF DOM_INT,
    KOL_RAZ_EL TYPE OF DOM_KOL,
    NAME_RAZ_EL TYPE OF DOM_CHAR_30,
    KOL_FKT TYPE OF DOM_KOL,
    KOEF_ET TYPE OF DOM_INT,
    KOEF_ET2 TYPE OF DOM_INT,
    IS_BROI TYPE OF DOM_SMAL_INT,
    IS_BROI2 TYPE OF DOM_SMAL_INT,
    IN_EL_ID TYPE OF DOM_KEY,
    CENA TYPE OF DOM_CENA,
    NEW_PARAM INTEGER)
AS
DECLARE VARIABLE L_KOL TYPE OF DOM_KOL; 
BEGIN 
  if (p_tip_prod = 0) then begin /* davane na konsignacia */ 
      FOR select 
            CAST (0 AS DOUBLE PRECISION) AS KOL_NAL, 
            CAST(0 AS DOUBLE PRECISION)  AS CENA_SR, 
            CAST (0 AS DOUBLE PRECISION), 
            SIMPLE.ID, 
            SIMPLE.NAME, 
            SIMPLE.CODE, 
            simple.code2, 
            SIMPLE.USLUGA, 
            SIMPLE.ME_ID, 
            SIMPLE.DEF_SEL_ID, 
            SIMPLE.LOCK_CENA_PROD, 
            SIMPLE.DDS AS D_D_S, 
            SIMPLE.RSN, 
            COALESCE(simple.raz_tip_id,0), 
            ME1.NAME AS ME, 
            COALESCE(ME1.KOEF,0) AS ME_KOEF, 
            SELEKCIQ.NAME AS GR_NAME, 
            SIMPLE.ME2_ID, 
            ME2.NAME, 
            CAST (0 AS DOUBLE PRECISION) AS KOL_NAL2, 
            CAST (0 AS DOUBLE PRECISION) AS kol_rzv, 
            COALESCE(def_raz_simple.razfasovka_id, 0) AS def_raz_el, 
            razfasovka.kol kol_raz_el, 
            raz_element.name name_raz_el, 
            null, 
            COALESCE(ME1.KOEF_ET, 1000) AS KOEF_ET, 
            COALESCE(ME2.KOEF_ET, 1000) AS KOEF_ET2, 
            ME1.IS_BROI AS IS_BROI, 
            ME2.IS_BROI AS IS_BROI2 
        FROM 
            SIMPLE INNER JOIN NAL ON NAL.SIMPLE_ID = SIMPLE.ID AND NAL.SKLAD_ID = :P_SKLAD AND NAL.KOL_NAL > 0.00 
            LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
            LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
            LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
            left join def_raz_simple on def_raz_simple.simple_id = simple.id and simple.raz_tip_id is not null 
            left join razfasovka on razfasovka.id = def_raz_simple.razfasovka_id 
            left join raz_element on raz_element.id = razfasovka.raz_element_id 
        WHERE 
            NOT SIMPLE."ACTIVE" = '0' 
            AND SIMPLE.USLUGA = '0' 
        ORDER BY 4 
    INTO :KOL_NAL,:CENA_SR,:LAST_CENA,:ID,:NAME,:CODE,:code2,:USLUGA,:ME_ID,:DEF_SEL_ID,:LOCK_CENA_PROD,:D_D_S,:RSN,:RAZ_TIP_ID,:ME, 
         :ME_KOEF,:GR_NAME,:ME2_ID,:ME2,:KOL_NAL2,:KOL_RZV,:DEF_RAZ_EL,:KOL_RAZ_EL,:NAME_RAZ_EL,:KOL_FKT,:KOEF_ET,:KOEF_ET2, 
         :IS_BROI,:IS_BROI2 
    DO 
      SUSPEND; 
  end 
  else begin /* vrashatne na konsignacia */ 
    for select 
      in_el.id in_el_id, 
      in_el.kol in_el_kol, 
      round5(out_el.suma/in_el.kol) cena, 
      SIMPLE1.ID, 
      SIMPLE1.NAME, 
      SIMPLE1.CODE, 
      simple1.code2, 
      SIMPLE1.USLUGA, 
      SIMPLE1.DEF_SEL_ID, 
      SIMPLE1.LOCK_CENA_PROD, 
      SIMPLE1.DDS AS D_D_S, 
      SIMPLE1.RSN, 
      COALESCE(simple1.raz_tip_id,0) AS raz_tip_id, 
      COALESCE(ME1.KOEF,0) AS ME_KOEF, 
      SELEKCIQ.NAME AS GR_NAME, 
      SIMPLE1.ME_ID, 
      ME1.NAME AS ME, 
      SIMPLE1.ME2_ID, 
      ME2.NAME ME2, 
      COALESCE(def_raz_simple.razfasovka_id, 0) AS def_raz_el, 
      razfasovka.kol kol_raz_el, 
      raz_element.name name_raz_el, 
      COALESCE(ME1.KOEF_ET, 1) AS KOEF_ET, 
      COALESCE(ME2.KOEF_ET, 1) AS KOEF_ET2, 
      ME1.IS_BROI AS IS_BROI, 
      ME2.IS_BROI AS IS_BROI2 
    from in_el 
    join opr opr_in on opr_in.id = in_el.opr_id and opr_in.opr_tip = 46 and opr_in.kli_id = :p_klient 
    join opr_razpad_node orn on orn.in_el_id = in_el.id 
    join out_el on out_el.id = orn.out_el_id 
    join opr opr_out on opr_out.id = out_el.opr_id and opr_out.opr_tip = 46 
    join simple simple1 on simple1.id = in_el.simple_id 
    left join me me1 on me1.id = simple1.me_id 
    LEFT JOIN ME ME2 ON ME2.ID = SIMPLE1.ME2_ID 
    LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE1.DEF_SEL_ID 
    left join def_raz_simple on def_raz_simple.simple_id = in_el.simple_id and (simple1.raz_tip_id is not null) 
    left join razfasovka on razfasovka.id = def_raz_simple.razfasovka_id 
    left join raz_element on raz_element.id = razfasovka.raz_element_id 
    where 
      opr_in.sklad_id = :p_sklad 
    order by in_el.simple_id 
    INTO :in_el_id,:kol_nal,:cena,:id,:name,:code,:code2,:usluga,:def_sel_id, 
         :lock_cena_prod,:d_d_s,:rsn,:raz_tip_id,:me_koef,:gr_name, 
         :me_id,:me,:me2_id,:me2, 
         :def_raz_el,:kol_raz_el,:name_raz_el, 
         :koef_et,:koef_et2, 
         :is_broi,:is_broi2 
  DO BEGIN 
    kol_fkt = null; 
    select 
      CASE WHEN NAL.KOL_NAL <> 0 THEN 
         CAST((NAL.SUMA/NAL.KOL_NAL) AS DOUBLE PRECISION) ELSE CAST(0 AS DOUBLE PRECISION)END, 
      CAST(COALESCE(NAL.LAST_CENA,0) AS DOUBLE PRECISION) 
    from nal 
    where 
      nal.simple_id = :id and 
      nal.sklad_id = :p_sklad 
    into :cena_sr,:last_cena; 
 
    select 
      sum(kol) 
    from 
      (select distinct 
        in_el.kol 
      from in_el 
      join opr on opr.id = in_el.opr_id and opr.opr_tip = 46 
      where 
        in_el.id = :in_el_id 
 
      union all 
 
      select 
        - coalesce(out_el.kol, 0.00) 
      from opr_razpad_node rn 
      join out_el on out_el.id = rn.out_el_id 
      join opr opr_out_el on opr_out_el.id = out_el.opr_id and opr_out_el.opr_tip = 2 
      where 
        rn.in_el_id = :in_el_id 
 
      union all 
 
      select 
        - coalesce(out_el.kol, 0.00) 
      from opr_razpad_node rn 
      join out_el on out_el.id = rn.out_el_id 
      join opr opr_out_el on opr_out_el.id = out_el.opr_id and opr_out_el.opr_tip = 48 
      where 
        rn.in_el_id = :in_el_id 
    ) 
    into :l_kol; 
 
    if (l_kol is not null) then 
      kol_nal = :l_kol; 
 
    if (kol_nal > 0) then 
      SUSPEND; 
  end 
  end 
 
END^


ALTER PROCEDURE GET_SIMPLE_MOVE (
    P_SKLAD TYPE OF DOM_KEY,
    P_CL_ID TYPE OF DOM_KEY,
    P_TIP TYPE OF DOM_KEY)
RETURNS (
    ME2_ID TYPE OF DOM_KEY,
    ME2 CHAR(2),
    KOL_NAL TYPE OF DOM_KOL,
    CENA TYPE OF DOM_CENA,
    CENA_SR TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    ME_ID TYPE OF DOM_SMAL_INT,
    D_D_S NUMERIC(4,2),
    RSN TYPE OF DOM_BOOLEAN,
    SIM_GROUP_ID TYPE OF DOM_KEY,
    RAZ_TIP_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    ME_KOEF TYPE OF DOM_INT,
    GR_NAME TYPE OF DOM_CHAR_50,
    KOL_NAL2 TYPE OF DOM_KOL,
    CODE2 TYPE OF DOM_CHAR_50,
    KOL_RZV TYPE OF DOM_KOL,
    DEF_RAZ_EL TYPE OF DOM_KEY,
    KOL_RAZ_EL TYPE OF DOM_KOL,
    NAME_RAZ_EL TYPE OF DOM_CHAR_30)
AS
DECLARE VARIABLE L_CENA TYPE OF DOM_CENA; 
BEGIN 
/*V.2*/ 
  FOR 
    SELECT 
        NAL.KOL_NAL, 
        NAL.SUMA / NAL.KOL_NAL AS CENA_SR, 
        SIMPLE.ID, 
        SIMPLE.NAME, 
        SIMPLE.CODE, 
        SIMPLE.ME_ID, 
        SIMPLE.DDS AS D_D_S, 
        SIMPLE.RSN, 
        SIMPLE.DEF_SEL_ID AS SIM_GROUP_ID, 
        COALESCE(SIMPLE.RAZ_TIP_ID,0) AS RAZ_TIP_ID, 
        ME1.NAME AS ME, 
        COALESCE(ME1.KOEF,0) AS ME_KOEF, 
        SELEKCIQ.NAME AS GR_NAME, 
        SIMPLE.CENA_PROD, 
        SIMPLE.ME2_ID, 
        ME2.NAME AS ME2, 
        NAL2.KOL AS KOL_NAL2, 
        SIMPLE.CODE2, 
        NAL.KOL_RZV, 
 
        COALESCE(DEF_RAZ_SIMPLE.RAZFASOVKA_ID, 0), 
        RAZFASOVKA.KOL KOL_RAZ_EL, 
        RAZ_ELEMENT.NAME NAME_RAZ_EL 
 
    FROM 
        NAL INNER JOIN SIMPLE ON (NAL.SKLAD_ID = :P_SKLAD AND SIMPLE.ID = NAL.SIMPLE_ID) 
        LEFT JOIN ME ME1 ON SIMPLE.ME_ID = ME1.ID 
        LEFT JOIN ME ME2 ON SIMPLE.ME2_ID = ME2.ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
        LEFT JOIN NAL2 ON NAL2.NAL_ID = NAL.ID 
 
        LEFT JOIN DEF_RAZ_SIMPLE ON DEF_RAZ_SIMPLE.SIMPLE_ID = NAL.SIMPLE_ID AND (SIMPLE.RAZ_TIP_ID IS NOT NULL) 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = DEF_RAZ_SIMPLE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
    WHERE 
        NOT SIMPLE.USLUGA = '1' 
        AND NAL.KOL_NAL > 0 
        AND NOT SIMPLE."ACTIVE" = '0' 
    ORDER BY 4 
    INTO :KOL_NAL,:CENA_SR,:ID,:NAME,:CODE,:ME_ID,:D_D_S,:RSN,:SIM_GROUP_ID, 
         :RAZ_TIP_ID,:ME,:ME_KOEF,:GR_NAME,:L_CENA,:ME2_ID,:ME2,:KOL_NAL2, :CODE2 ,:KOL_RZV, :DEF_RAZ_EL, :KOL_RAZ_EL, :NAME_RAZ_EL 
  DO 
  BEGIN 
    IF (P_TIP = 2) THEN CENA = CENA_SR; 
    IF (P_TIP = 1) THEN BEGIN 
      CENA = NULL; 
      SELECT 
        CENOVA_LISTA_EL.CENA 
        FROM CENOVA_LISTA_EL 
        JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ID = :P_CL_ID 
        WHERE 
          CENOVA_LISTA_EL.SIMPLE_ID =:ID 
        INTO :CENA; 
    END 
    IF (P_TIP = 0) THEN BEGIN 
      CENA = NULL; 
      SELECT 
        CENOVA_LISTA_EL.CENA 
      FROM CENOVA_LISTA_EL 
      JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.DEF = 1 
      WHERE 
        CENOVA_LISTA_EL.SIMPLE_ID =:ID 
      INTO :CENA; 
    END 
    IF (CENA IS NULL) THEN CENA =L_CENA; 
    SUSPEND; 
  END 
END^


ALTER PROCEDURE GET_SIMPLE_MOVEMENT (
    P_FROM_DATE TYPE OF DOM_DATE,
    P_TO_DATE TYPE OF DOM_DATE,
    P_DOST_FILTER TYPE OF DOM_INT)
RETURNS (
    R_KLI_ID TYPE OF DOM_INT,
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_SUMA_PROD TYPE OF DOM_SUMA,
    R_KOL_PROD TYPE OF DOM_KOL,
    R_SUMA_FR_PROD TYPE OF DOM_SUMA,
    R_KOL_IZP TYPE OF DOM_KOL,
    R_SUMA_PAY TYPE OF DOM_SUMA,
    R_SUMA_PAY_OLD TYPE OF DOM_SUMA,
    R_SUMA_DUE TYPE OF DOM_SUMA,
    R_SIMPLE_ID TYPE OF DOM_INT,
    R_KOL_PAY_OLD TYPE OF DOM_KOL,
    R_SUMA_PAY_OLD_FR TYPE OF DOM_SUMA,
    R_SUMA_IZP_FR TYPE OF DOM_SUMA,
    R_SIMPLE_NAME_PAY TYPE OF DOM_CHAR_100,
    R_SIMPLE_NAME_IZP TYPE OF DOM_CHAR_100,
    R_SORT_INDX TYPE OF DOM_INT,
    R_UNPAYED_KOL TYPE OF DOM_KOL,
    R_UNPAYED_SUMA TYPE OF DOM_SUMA,
    R_UNPAYED_SUMA_FR TYPE OF DOM_SUMA,
    R_UNPAYED_NAME TYPE OF DOM_CHAR_100,
    R_SIMPLE_TOTAL_SUMA TYPE OF DOM_SUMA,
    R_SIMPLE_TOTAL_KOL TYPE OF DOM_KOL,
    R_SIMPLE_TOTAL_SUMA_FR TYPE OF DOM_SUMA,
    R_DOST_NAME TYPE OF DOM_CHAR_100)
AS
declare variable L_TOTAL_SUMA_PROD type of DOM_SUMA; 
declare variable L_MAX_ID type of DOM_INT; 
declare variable L_TOTAL_SUMA_PAY_OLD type of DOM_SUMA; 
declare variable L_TOTAL_SUMA_IZP type of DOM_SUMA; 
declare variable L_TOTAL_SUMA_UNPAYED type of DOM_SUMA; 
declare variable L_SIMPLE_NAME type of DOM_CHAR_100; 
BEGIN 
    FOR 
        SELECT 
            KLI.ID, 
            KLI.NAME 
        FROM 
            KLI INNER JOIN TMP_SEL_2 ON TMP_SEL_2.ID = KLI.ID 
        WHERE 
            KLI.KLIENT = '1' 
            AND EXISTS (SELECT OPR.ID FROM OPR 
            WHERE 
                OPR.KLI_ID = KLI.ID AND OPR.OPR_TIP IN (2, 6, 11) 
                AND OPR.OPR_DATE >= :P_FROM_DATE AND OPR.OPR_DATE < :P_TO_DATE) 
 
        INTO :R_KLI_ID, :R_KLI_NAME 
 
    DO BEGIN 
        R_SIMPLE_NAME = ''; 
        R_KOL_IZP = NULL; 
        R_KOL_PROD = NULL; 
        R_SUMA_FR_PROD = NULL; 
        R_SUMA_PROD = NULL; 
        L_TOTAL_SUMA_PROD = 0; 
        R_SIMPLE_NAME_IZP = null; 
        R_KOL_IZP = null; 
        R_SUMA_IZP_FR = null; 
        R_SUMA_IZP_FR = NULL; 
 
        R_SUMA_DUE = NULL; 
        R_SUMA_PAY = NULL; 
        R_SUMA_PAY_OLD = NULL; 
        R_SUMA_PAY_OLD_FR = null; 
        R_KOL_PAY_OLD = NULL; 
        L_MAX_ID = COALESCE(:L_MAX_ID, 0); 
        R_SORT_INDX = 0; 
        L_TOTAL_SUMA_IZP = 0; 
        L_TOTAL_SUMA_PAY_OLD = 0; 
        L_TOTAL_SUMA_UNPAYED = 0; 
 
        FOR 
            WITH SEL_SIMPLES as 
                (SELECT DISTINCT 
                    SIMPLE.ID as SIMPLE_ID, 
                    SIMPLE.NAME as SIMPLE_NAME 
                 FROM 
                    SIMPLE INNER JOIN TMP_SEL_1 ON TMP_SEL_1.ID = SIMPLE.ID 
                WHERE 
                    SIMPLE."ACTIVE" = '1' 
                    AND EXISTS (SELECT OUT_EL.SIMPLE_ID FROM OUT_EL 
                    INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID WHERE 
                    OUT_EL.SIMPLE_ID = SIMPLE.ID AND OPR.OPR_TIP IN (2, 11) AND OPR.OPR_DATE >= :P_FROM_DATE AND OPR.OPR_DATE < :P_TO_DATE 
                    AND OPR.KLI_ID =:R_KLI_ID) 
 
                UNION 
 
                SELECT DISTINCT 
                    OUT_EL.SIMPLE_ID, 
                    SIMPLE.NAME 
                FROM 
                    OPR_PAYMENT_NODE INNER JOIN SUMI SUMI_PAY ON SUMI_PAY.ID = OPR_PAYMENT_NODE.PAYMENT_ID 
                    INNER JOIN SUMI SUMI_PROD ON SUMI_PROD.ID = OPR_PAYMENT_NODE.OPR_ID 
                    INNER JOIN OPR OPR_PAY ON OPR_PAY.ID = SUMI_PAY.OPR_ID 
                    INNER JOIN OPR OPR_PROD ON OPR_PROD.ID = SUMI_PROD.OPR_ID 
                    INNER JOIN OUT_EL ON OUT_EL.OPR_ID = SUMI_PROD.OPR_ID 
                    INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
                    INNER JOIN TMP_SEL_1 ON TMP_SEL_1.ID = SIMPLE.ID 
                WHERE 
                    OPR_PAY.KLI_ID =:R_KLI_ID AND 
                    OPR_PAY.OPR_DATE >= :P_FROM_DATE AND OPR_PAY.OPR_DATE < :P_TO_DATE 
                    AND NOT (OPR_PROD.OPR_DATE >= :P_FROM_DATE AND OPR_PROD.OPR_DATE < :P_TO_DATE) 
            ) 
            SELECT 
                SIMPLE_ID, 
                SIMPLE_NAME 
            FROM 
                SEL_SIMPLES 
            WHERE 
                EXISTS (SELECT KLI_DOST_NODE.SIMPLE_ID FROM KLI_DOST_NODE INNER JOIN TMP_SEL_KLI ON TMP_SEL_KLI.KLI_ID = KLI_DOST_NODE.KLI_ID 
                AND KLI_DOST_NODE.SIMPLE_ID = SEL_SIMPLES.SIMPLE_ID) 
 
            UNION 
 
            SELECT 
                SIMPLE_ID, 
                SIMPLE_NAME 
            FROM 
                SEL_SIMPLES 
            WHERE 
                NOT EXISTS (SELECT KLI_DOST_NODE.SIMPLE_ID FROM KLI_DOST_NODE 
                WHERE KLI_DOST_NODE.SIMPLE_ID = SEL_SIMPLES.SIMPLE_ID) 
                AND (:P_DOST_FILTER = 1) 
 
            ORDER BY 2 
 
        INTO :R_SIMPLE_ID, :L_SIMPLE_NAME 
 
        DO BEGIN 
            L_MAX_ID = MAXVALUE(COALESCE(:L_MAX_ID, 0), :R_SIMPLE_ID); 
 
            SELECT 
                SUM(OUT_EL.KOL) - SUM(COALESCE(IN_EL.KOL, 0)) AS KOL, 
                SUM(OUT_EL.SUMA) - SUM(coalesce((OUT_EL.SUMA/OUT_EL.KOL) * IN_EL.KOL, 0)) AS SUMA, 
                SUM(OUT_EL.SUMA_FR) - SUM(COALESCE(IN_EL.SUMA_FR, 0)) AS SUMA_FR 
            FROM 
                OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
                INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
                LEFT JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID 
                LEFT JOIN IN_EL ON IN_EL.ID = OPR_RAZPAD_NODE.IN_EL_ID 
            WHERE 
                OUT_EL.SIMPLE_ID =:R_SIMPLE_ID AND 
                OPR.KLI_ID =:R_KLI_ID 
                AND OPR.OPR_TIP = 2 
                AND ((OUT.PAY_TIP = 0) or 
                    (OUT.PAY_TIP = 3 AND (EXISTS (SELECT OPR_PAYMENT_NODE.PAYMENT_ID FROM OPR_PAYMENT_NODE 
                                            INNER JOIN SUMI ON SUMI.ID = OPR_PAYMENT_NODE.PAYMENT_ID 
                                            INNER JOIN OPR ON OPR.ID = SUMI.OPR_ID 
                                            INNER JOIN SUMI SUMI_PROD ON SUMI_PROD.ID = OPR_PAYMENT_NODE.OPR_ID 
                                            INNER JOIN OPR OPR_PROD ON OPR_PROD.ID = SUMI_PROD.OPR_ID AND SUMI_PROD.OPR_ID = out.OPR_ID 
                                            AND OPR.OPR_DATE >= :P_FROM_DATE AND OPR.OPR_DATE < :P_TO_DATE)))) 
                --and out.PAY_TIP in (0, 3) 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND OPR.OPR_DATE >= :P_FROM_DATE AND OPR.OPR_DATE < :P_TO_DATE 
            INTO :R_KOL_PROD, :R_SUMA_PROD, :R_SUMA_FR_PROD; 
 
            L_TOTAL_SUMA_PROD = COALESCE(L_TOTAL_SUMA_PROD, 0) + COALESCE(:R_SUMA_FR_PROD, 0); 
 
 
            IF (COALESCE(R_SUMA_FR_PROD, 0) <> 0) THEN 
                R_SIMPLE_NAME =:L_SIMPLE_NAME; 
            ELSE 
                R_SIMPLE_NAME =NULL; 
 
            SELECT 
                SUM(OUT_EL.KOL) AS KOL, 
                SUM(OUT_EL.SUMA_FR) AS SUMA_FR 
            FROM 
                OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
            WHERE 
                OUT_EL.SIMPLE_ID =:R_SIMPLE_ID AND OPR.KLI_ID =:R_KLI_ID 
                AND OPR.OPR_TIP = 11 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND OPR.OPR_DATE >= :P_FROM_DATE AND OPR.OPR_DATE < :P_TO_DATE 
 
            INTO :R_KOL_IZP, :R_SUMA_IZP_FR; 
 
            L_TOTAL_SUMA_IZP = COALESCE(L_TOTAL_SUMA_IZP, 0) + COALESCE(:R_SUMA_IZP_FR, 0); 
 
            IF (COALESCE(R_KOL_IZP, 0) <> 0) THEN 
                R_SIMPLE_NAME_IZP =:l_SIMPLE_NAME; 
            ELSE 
                R_SIMPLE_NAME_IZP =NULL; 
 
            SELECT 
                SUM(OUT_EL.KOL) AS KOL, 
                SUM(OUT_EL.SUMA) AS SUMA, 
                SUM(OUT_EL.SUMA_FR) AS SUMA_FR 
            FROM 
                OPR_PAYMENT_NODE INNER JOIN SUMI SUMI_PAY ON SUMI_PAY.ID = OPR_PAYMENT_NODE.PAYMENT_ID 
                INNER JOIN SUMI SUMI_PROD ON SUMI_PROD.ID = OPR_PAYMENT_NODE.OPR_ID 
                INNER JOIN OPR OPR_PAY ON OPR_PAY.ID = SUMI_PAY.OPR_ID 
                INNER JOIN OPR OPR_PROD ON OPR_PROD.ID = SUMI_PROD.OPR_ID 
                INNER JOIN OUT_EL ON OUT_EL.OPR_ID = SUMI_PROD.OPR_ID 
                INNER JOIN OUT ON OUT.OPR_ID = OPR_PROD.ID AND OUT.PAY_TIP = 3 
            WHERE 
                OUT_EL.SIMPLE_ID =:R_SIMPLE_ID AND 
                OPR_PAY.KLI_ID =:R_KLI_ID AND 
                OPR_PAY.OPR_DATE >= :P_FROM_DATE AND OPR_PAY.OPR_DATE < :P_TO_DATE 
                AND OPR_PAY.KLI_ID =:R_KLI_ID 
                AND NOT (OPR_PROD.OPR_DATE >= :P_FROM_DATE AND OPR_PROD.OPR_DATE < :P_TO_DATE) 
            INTO :R_KOL_PAY_OLD, :R_SUMA_PAY_OLD, :R_SUMA_PAY_OLD_FR; 
 
            L_TOTAL_SUMA_PAY_OLD = COALESCE(L_TOTAL_SUMA_PAY_OLD, 0) + COALESCE(:R_SUMA_PAY_OLD_FR, 0); 
 
            IF (COALESCE(R_KOL_PAY_OLD, 0) > 0) THEN 
                R_SIMPLE_NAME_PAY =:l_SIMPLE_NAME; 
            ELSE 
                R_SIMPLE_NAME_PAY =NULL; 
 
            SELECT 
                SUM(OUT_EL.KOL) AS KOL, 
                SUM(OUT_EL.SUMA) AS SUMA, 
                SUM(OUT_EL.SUMA_FR) AS SUMA_FR 
            FROM 
                OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
                INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
            WHERE 
                OUT_EL.SIMPLE_ID =:R_SIMPLE_ID AND 
                OPR.KLI_ID =:R_KLI_ID 
                AND OPR.OPR_TIP = 2 
                AND OUT.PAY_TIP = 1 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND OPR.OPR_DATE >= :P_FROM_DATE AND OPR.OPR_DATE < :P_TO_DATE 
            INTO :R_UNPAYED_KOL, :R_UNPAYED_SUMA, :R_UNPAYED_SUMA_FR; 
 
            if (COALESCE(R_UNPAYED_KOL, 0) <> 0) then 
                R_UNPAYED_NAME =:l_SIMPLE_NAME; 
            else 
                R_UNPAYED_NAME =NULL; 
 
            L_TOTAL_SUMA_UNPAYED = COALESCE(L_TOTAL_SUMA_UNPAYED, 0) + COALESCE(:R_UNPAYED_SUMA_FR, 0); 
 
            SELECT FIRST 1 
                KLI.NAME 
            FROM 
                KLI INNER JOIN KLI_DOST_NODE ON KLI_DOST_NODE.KLI_ID = KLI.ID AND KLI_DOST_NODE.SIMPLE_ID =:R_SIMPLE_ID 
            INTO :R_DOST_NAME; 
 
            R_SIMPLE_TOTAL_KOL = COALESCE(R_KOL_PAY_OLD, 0) + COALESCE(R_KOL_PROD, 0); 
            R_SIMPLE_TOTAL_SUMA = COALESCE(R_SUMA_PAY_OLD,0) + COALESCE(R_SUMA_PROD, 0); 
            R_SIMPLE_TOTAL_SUMA_FR = COALESCE(R_SUMA_PAY_OLD_FR,0) + COALESCE(R_SUMA_FR_PROD, 0); 
 
            IF (COALESCE(R_UNPAYED_KOL, 0) <> 0 or COALESCE(R_KOL_IZP, 0) <> 0 or coalesce(R_KOL_PROD, 0) <> 0 or COALESCE(R_KOL_PAY_OLD, 0) <> 0) then 
                SUSPEND; 
        END 
 
        R_SIMPLE_NAME = NULL; 
        R_SIMPLE_NAME_PAY = NULL; 
        R_SIMPLE_NAME_IZP = NULL; 
        R_SUMA_DUE = NULL; 
        R_SUMA_PAY = NULL; 
        R_SUMA_PAY_OLD = NULL; 
        R_SIMPLE_ID = COALESCE(:L_MAX_ID, 0) + 1; 
        R_KOL_IZP = NULL; 
        R_KOL_PROD = NULL; 
        R_SUMA_FR_PROD = :L_TOTAL_SUMA_PROD; 
        R_SUMA_PROD = NULL; 
        R_DOST_NAME = NULL; 
        R_SIMPLE_TOTAL_KOL = NULL; 
        R_SIMPLE_TOTAL_SUMA = NULL; 
        R_SIMPLE_TOTAL_SUMA_FR =(:L_TOTAL_SUMA_PROD + :L_TOTAL_SUMA_PAY_OLD); 
        R_UNPAYED_KOL = NULL; 
        R_UNPAYED_SUMA = null; 
        R_UNPAYED_SUMA_FR = NULL; 
        R_SUMA_PROD = NULL; 
        R_UNPAYED_NAME = NULL; 
        R_SORT_INDX = -1; 
        R_SUMA_IZP_FR =:L_TOTAL_SUMA_IZP; 
        R_SUMA_PAY_OLD_FR =:L_TOTAL_SUMA_PAY_OLD; 
        R_UNPAYED_SUMA_FR =:L_TOTAL_SUMA_UNPAYED; 
 
        IF (COALESCE(R_SUMA_IZP_FR, 0) <> 0 or COALESCE(R_SUMA_PAY_OLD_FR, 0) <> 0 or coalesce(R_UNPAYED_SUMA_FR, 0) <> 0 or COALESCE(R_SUMA_FR_PROD, 0) <> 0) then 
            SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_SIMPLE_NAL_BY_DATE (
    P_OPR_DATE TYPE OF DOM_DATE,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY)
RETURNS (
    R_KOL_NAL TYPE OF DOM_KOL)
AS
BEGIN 
    SELECT 
        SUM(ROUND(KOL_NAL, 5)) 
    FROM 
        ( 
            SELECT 
                ROUND(SUM(PEN.KOL),5) AS KOL_NAL 
            FROM 
                IN_EL INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = IN_EL.ID 
                INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
                INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
            where 
                OPR.OPR_DATE <= :P_OPR_DATE 
                AND OPR.SKLAD_ID =:P_SKLAD_ID 
                AND IN_EL.SIMPLE_ID =:P_SIMPLE_ID 
 
            UNION 
 
            SELECT 
 
                -ROUND(SUM(PEN.KOL),5) 
            FROM 
                OUT_EL INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = OUT_EL.ID 
                INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID 
                INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
            where 
                OPR.OPR_DATE <= :P_OPR_DATE 
                AND OPR.SKLAD_ID =:P_SKLAD_ID 
                AND OUT_EL.SIMPLE_ID =:P_SIMPLE_ID 
        ) 
    INTO :R_KOL_NAL; 
 
    SUSPEND; 
END^


ALTER PROCEDURE GET_SIMPLE_OT_CL (
    P_OPR_ID INTEGER,
    P_FAKT INTEGER)
RETURNS (
    R_OT_OPR_ID INTEGER,
    R_SIMPLE_ID INTEGER,
    R_TIP SMALLINT,
    R_PROCENT DOUBLE PRECISION,
    R_CENA DOUBLE PRECISION,
    R_OT_CENA DOUBLE PRECISION,
    R_OT_PROCENT DOUBLE PRECISION,
    R_SIMPLE_CODE TYPE OF DOM_CHAR_50,
    R_SIMPLE_NAME VARCHAR(100),
    R_TIP_OT_CENA INTEGER,
    R_DOSTAVNA DOUBLE PRECISION,
    R_CL_NAME VARCHAR(30),
    R_CENA_PROD DOUBLE PRECISION,
    R_SELEKCIQ_NAME VARCHAR(50),
    R_ID_CL_EL INTEGER,
    R_CENA_EDRO DOUBLE PRECISION,
    R_CENA_SR DOUBLE PRECISION,
    R_ROUND_TIP_ID INTEGER,
    R_ROUND_TIP_NAME VARCHAR(20),
    R_FLAG_LOCK TYPE OF DOM_FLAG,
    R_CENA_OS TYPE OF DOM_CENA)
AS
declare variable L_KOL_SR double precision; 
declare variable L_SUMA_SR double precision; 
declare variable L_SR double precision; 
declare variable L_FR double precision; 
declare variable L_LR double precision; 
BEGIN 
    FOR SELECT 
        CENOVA_LISTA_EL.ID, 
        CENOVA_LISTA_EL.OT_OPR_ID, 
        CENOVA_LISTA_EL.SIMPLE_ID, 
        CENOVA_LISTA_EL.TIP, 
        CENOVA_LISTA_EL.PROCENT, 
        CENOVA_LISTA_EL.CENA, 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        CENOVA_LISTA_EL.TIP_OT_CENA, 
        CL.NAME, 
        SELEKCIQ.NAME SELEKCIQ_NAME, 
        SIMPLE.CENA_EDRO, 
        CENOVA_LISTA_EL.ROUND_TIP_ID, 
        ROUND_TIP.NAME NAME_ROUND_TIP, 
        SIMPLE.CENA_PROD, 
        CENOVA_LISTA_EL.FLAG_LOCK 
    FROM 
        CENOVA_LISTA_EL JOIN SIMPLE ON SIMPLE.ID = CENOVA_LISTA_EL.SIMPLE_ID 
        LEFT JOIN CENOVA_LISTA CL ON CL.OPR_ID = CENOVA_LISTA_EL.OT_OPR_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
        LEFT JOIN ROUND_TIP ON ROUND_TIP.ID = CENOVA_LISTA_EL.ROUND_TIP_ID 
    WHERE 
        CENOVA_LISTA_EL.OPR_ID = :P_OPR_Id 
    INTO 
        :R_ID_CL_EL,:R_OT_OPR_ID,:R_SIMPLE_ID,:R_TIP,:R_PROCENT,:R_CENA,:R_SIMPLE_CODE, 
        :R_SIMPLE_NAME, :R_TIP_OT_CENA,:R_CL_NAME, :R_SELEKCIQ_NAME,:R_CENA_EDRO, 
        :R_ROUND_TIP_ID, :R_ROUND_TIP_NAME, :R_CENA_PROD,:R_FLAG_LOCK 
    DO BEGIN 
        IF (:R_OT_OPR_ID IS NOT NULL) THEN BEGIN 
            SELECT 
                CENOVA_LISTA_EL.PROCENT, 
                CENOVA_LISTA_EL.CENA 
            FROM CENOVA_LISTA_EL 
            WHERE 
                CENOVA_LISTA_EL.OPR_ID = :R_OT_OPR_ID 
                AND CENOVA_LISTA_EL.SIMPLE_ID = :R_SIMPLE_ID 
            INTO 
              :R_OT_PROCENT,:R_OT_CENA; 
        END 
        ELSE BEGIN 
            SELECT 
                SIMPLE.CENA_PROD 
            FROM 
                SIMPLE 
            WHERE 
                SIMPLE.ID = :R_SIMPLE_ID 
            INTO 
                :R_OT_CENA; 
        END 
 
        IF (P_FAKT  = 1) THEN BEGIN 
            EXECUTE PROCEDURE GET_SR_FR_LR(R_SIMPLE_ID) RETURNING_VALUES :L_SR,:L_FR,:L_LR; 
            R_DOSTAVNA = COALESCE(L_LR,0); 
            R_CENA_SR = COALESCE(L_SR,0); 
        END 
        ELSE BEGIN 
            R_DOSTAVNA = NULL; 
            EXECUTE PROCEDURE GET_DOSTAVNA_CENA_SKLAD(:P_OPR_ID,:R_SIMPLE_ID) RETURNING_VALUES :R_DOSTAVNA; 
            R_CENA_SR = NULL; 
            EXECUTE PROCEDURE GET_SR_CENA(:R_SIMPLE_ID,:P_OPR_ID,'') RETURNING_VALUES :R_CENA_SR,:L_KOL_SR,:L_SUMA_SR; 
        END 
        R_OT_PROCENT = NULL; 
 
        SELECT 
            CENOVA_LISTA_EL.CENA 
        FROM 
            CENOVA_LISTA_EL INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
        WHERE 
            CENOVA_LISTA_EL.SIMPLE_ID =:R_SIMPLE_ID AND CENOVA_LISTA.DEF = 1 
        INTO :R_CENA_OS; 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_SIMPLE_PRICE_LIST_PROMO (
    P_SIMPLE_ID TYPE OF DOM_INT,
    P_KLIENT_ID TYPE OF DOM_INT,
    P_SKLAD_ID TYPE OF DOM_INT)
RETURNS (
    R_CL_IS_PROMOTIONAL TYPE OF DOM_SMAL_INT)
AS
declare variable L_CENOVA_LISTA_OPR_ID type of DOM_INT; 
declare variable L_PRIORITET type of DOM_INT; 
declare variable L_OT_TIME type of DOM_TIME; 
declare variable L_DO_TIME type of DOM_TIME; 
declare variable L_WEEK type of DOM_INT; 
declare variable L_BIT_DAY_WEEK type of DOM_INT; 
declare variable L_IS_PROMOTIONAL type of DOM_SMAL_INT; 
BEGIN 
    IF ((SELECT KLI.CL_ID FROM KLI WHERE KLI.ID = :P_KLIENT_ID) IS NULL) THEN BEGIN 
        SELECT 
            CL.OPR_ID, 
            CL.IS_PROMOTIONAL 
        FROM 
            CENOVA_LISTA_EL CLE INNER JOIN CENOVA_LISTA CL ON CL.OPR_ID = CLE.OPR_ID AND CL.DEF = 1 
        WHERE 
            CLE.SIMPLE_ID = :P_SIMPLE_ID 
        INTO :L_CENOVA_LISTA_OPR_ID, :R_CL_IS_PROMOTIONAL; 
    END 
    ELSE BEGIN 
        SELECT 
            CENOVA_LISTA.OPR_ID, 
            CENOVA_LISTA.IS_PROMOTIONAL 
        FROM 
            CENOVA_LISTA_EL INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
        WHERE 
            CENOVA_LISTA_EL.OPR_ID = (SELECT KLI.CL_ID FROM KLI WHERE KLI.ID = :P_KLIENT_ID) AND 
            CENOVA_LISTA_EL.SIMPLE_ID = :P_SIMPLE_ID 
        INTO :L_CENOVA_LISTA_OPR_ID, :R_CL_IS_PROMOTIONAL; 
    END 
    FOR SELECT 
        CENOVA_LISTA.PRIORITET, 
        CENOVA_LISTA.OT_TIME, 
        CENOVA_LISTA.DO_TIME, 
        CENOVA_LISTA.WEEK, 
        CENOVA_LISTA.OPR_ID, 
        CENOVA_LISTA.IS_PROMOTIONAL 
    FROM 
        CENOVA_LISTA_EL JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID AND CENOVA_LISTA.ACTIVNA = 1 --AND CENOVA_LISTA.TIP IN (1,2) 
        AND (NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID)) 
    WHERE 
        ((CENOVA_LISTA.OT_DATE <= CURRENT_DATE) OR (CENOVA_LISTA.OT_DATE IS NULL)) 
        AND ((CENOVA_LISTA.DO_DATE >= CURRENT_DATE) OR (CENOVA_LISTA.DO_DATE IS NULL)) 
        AND (EXISTS (SELECT CENOVA_LISTA_SKLAD.ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.SKLAD_ID =:P_SKLAD_ID AND CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) 
        OR ((SELECT COUNT(ID) FROM CENOVA_LISTA_SKLAD WHERE  OPR_ID =CENOVA_LISTA_EL.OPR_ID)=0)) 
        AND ((EXISTS (SELECT CENOVA_LISTA_KLI.ID FROM CENOVA_LISTA_KLI WHERE CENOVA_LISTA_KLI.KLI_ID = :P_KLIENT_ID AND CENOVA_LISTA_KLI.OPR_ID = CENOVA_LISTA.OPR_ID)) 
        OR ((SELECT COUNT(ID) FROM CENOVA_LISTA_KLI WHERE  OPR_ID = CENOVA_LISTA_EL.OPR_ID) = 0 AND CENOVA_LISTA.tip <> 5) 
        OR (COALESCE(:P_KLIENT_ID, 0) = 0 AND CENOVA_LISTA.TIP IN (2, 4, 5))) 
        AND CENOVA_LISTA_EL.SIMPLE_ID = :P_SIMPLE_ID 
    ORDER BY 1 DESC 
    INTO :L_PRIORITET, :L_OT_TIME, :L_DO_TIME, :L_WEEK, :L_CENOVA_LISTA_OPR_ID, :L_IS_PROMOTIONAL 
    DO BEGIN 
        IF (L_WEEK IS NOT NULL) THEN BEGIN 
            L_BIT_DAY_WEEK = POWER(2, EXTRACT(WEEKDAY FROM CURRENT_DATE-1)); 
 
            IF (L_OT_TIME IS NULL) THEN BEGIN 
                IF (BIN_AND(:L_WEEK,:L_BIT_DAY_WEEK) = :L_BIT_DAY_WEEK) THEN BEGIN 
                    R_CL_IS_PROMOTIONAL =:L_IS_PROMOTIONAL; 
                    BREAK; 
                END 
            END 
            ELSE BEGIN 
                IF ((BIN_AND(:L_WEEK,:L_BIT_DAY_WEEK) = :L_BIT_DAY_WEEK) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) 
                THEN BEGIN 
                    R_CL_IS_PROMOTIONAL =:L_IS_PROMOTIONAL; 
                    BREAK; 
                END 
            END 
        END 
        ELSE IF ((:L_OT_TIME IS NOT NULL) AND (:L_OT_TIME <= CURRENT_TIME) AND (CURRENT_TIME <= :L_DO_TIME)) THEN BEGIN 
            R_CL_IS_PROMOTIONAL =:L_IS_PROMOTIONAL; 
            BREAK; 
        END 
        ELSE BEGIN 
            R_CL_IS_PROMOTIONAL =:L_IS_PROMOTIONAL; 
            BREAK; 
        END 
    END 
    SUSPEND; 
END^


ALTER PROCEDURE GET_SIMPLE_PROD (
    P_USER_ID TYPE OF DOM_KEY,
    P_SKLAD TYPE OF DOM_KEY,
    P_TIP_PROD TYPE OF DOM_SMAL_INT,
    P_KLIENT TYPE OF DOM_KEY,
    P_SKLADOVE TYPE OF DOM_CHAR_300,
    P_NUM_TR TYPE OF DOM_KEY,
    P_FLAG_SHOW_IZL TYPE OF DOM_FLAG = 0)
RETURNS (
    KOL_NAL TYPE OF DOM_KOL,
    CENA_SR TYPE OF DOM_CENA,
    LAST_CENA TYPE OF DOM_CENA,
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    USLUGA TYPE OF DOM_BOOLEAN,
    ME_ID TYPE OF DOM_SMAL_INT,
    DEF_SEL_ID TYPE OF DOM_KEY,
    LOCK_CENA_PROD TYPE OF DOM_BOOLEAN,
    D_D_S NUMERIC(4,2),
    RSN TYPE OF DOM_BOOLEAN,
    RAZ_TIP_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    ME_KOEF TYPE OF DOM_INT,
    GR_NAME TYPE OF DOM_CHAR_50,
    ME2_ID TYPE OF DOM_SMAL_INT,
    ME2 CHAR(2),
    KOL_NAL2 TYPE OF DOM_KOL,
    KOL_RZV TYPE OF DOM_KOL,
    DEF_RAZ_EL TYPE OF DOM_INT,
    KOL_RAZ_EL TYPE OF DOM_KOL,
    NAME_RAZ_EL TYPE OF DOM_CHAR_30,
    KOL_FKT TYPE OF DOM_KOL,
    KOEF_ET TYPE OF DOM_INT,
    KOEF_ET2 TYPE OF DOM_INT,
    IS_BROI TYPE OF DOM_SMAL_INT,
    IS_BROI2 TYPE OF DOM_SMAL_INT,
    IN_EL_ID TYPE OF DOM_KEY,
    CENA TYPE OF DOM_CENA,
    R_SKLAD_ID TYPE OF DOM_KEY,
    R_SKLAD_NAME TYPE OF DOM_CHAR_50,
    R_SKLAD_OTR_FLAG TYPE OF DOM_INT,
    R_ACTIVE_FAK TYPE OF DOM_CHAR_10,
    R_CODE2 TYPE OF DOM_CHAR_50,
    R_ADRESIRANE TYPE OF DOM_CHAR_50,
    R_FLAG_VAUCHER TYPE OF DOM_SMAL_INT,
    R_COEFF_ME TYPE OF DOM_PERCENT,
    R_SIMPLE_RAZPAD TYPE OF DOM_SMAL_INT,
    R_VAT_GROUP INTEGER)
AS
declare variable L_KOL type of DOM_KOL; 
declare variable L_SEL type of DOM_INT; 
BEGIN 
  IF (P_TIP_PROD = 0) THEN BEGIN /* PRODAJBA NORMALNA */ 
      IF ((P_SKLADOVE IS NULL) OR (P_SKLADOVE = ''))  THEN 
          P_SKLADOVE = ',' || P_SKLAD || ','; 
      ELSE 
          P_SKLADOVE = ',' || P_SKLADOVE || ','; 
 
      FOR SELECT 
          SKLAD.ID, 
          SKLAD.NAME, 
          SKLAD.F_OTR_KOL 
      FROM 
          SKLAD 
      WHERE 
          :P_SKLADOVE CONTAINING ',' || SKLAD.ID || ',' 
      INTO 
          :R_SKLAD_ID, :R_SKLAD_NAME, :R_SKLAD_OTR_FLAG 
      DO BEGIN 
 
          L_SEL = NULL; 
          SELECT FIRST 1 
              TMP_SIMPLE_SEL_PROD1.SIMPLE_ID 
          FROM 
              TMP_SIMPLE_SEL_PROD1 
          WHERE 
              TMP_SIMPLE_SEL_PROD1.NUM_TR = :P_NUM_TR 
              AND TMP_SIMPLE_SEL_PROD1.SKLAD_ID = :R_SKLAD_ID 
          INTO 
              :L_SEL; 
 
          IF (L_SEL IS NULL) THEN 
              L_SEL = 0; 
          ELSE 
              L_SEL = 1; 
 
          FOR SELECT 
              IIF(:P_FLAG_SHOW_IZL = 1, ROUND(NAL.KOL_NAL - NAL.KOL_IZL,5),NAL.KOL_NAL), 
              CASE WHEN NAL.KOL_NAL <> 0 THEN CAST(ROUND(NAL.SUMA/NAL.KOL_NAL,5) AS DOUBLE PRECISION) 
              ELSE CAST(0 AS DOUBLE PRECISION)END, 
              CAST(COALESCE(NAL.LAST_CENA,0) AS DOUBLE PRECISION), 
              SIMPLE1.ID, 
              SIMPLE1.NAME, 
              SIMPLE1.CODE, 
              SIMPLE1.USLUGA, 
              SIMPLE1.ME_ID, 
              SIMPLE1.DEF_SEL_ID, 
              SIMPLE1.LOCK_CENA_PROD, 
              SIMPLE1.DDS, 
              SIMPLE1.RSN, 
              COALESCE(SIMPLE1.RAZ_TIP_ID,0), 
              ME1.NAME, 
              COALESCE(ME1.KOEF,0), 
              SELEKCIQ.NAME, 
              SIMPLE1.ME2_ID, 
              ME2.NAME ME2, 
              COALESCE(NAL2.KOL, 0), 
              COALESCE(NAL.KOL_RZV, 0), 
              COALESCE(DEF_RAZ_SIMPLE.RAZFASOVKA_ID, 0), 
              RAZFASOVKA.KOL KOL_RAZ_EL, 
              RAZ_ELEMENT.NAME NAME_RAZ_EL, 
              GSN.R_KOL_NAL, 
              COALESCE(ME1.KOEF_ET, 1), 
              COALESCE(ME2.KOEF_ET, 1), 
              ME1.IS_BROI, 
              ME2.IS_BROI, 
              SIMPLE1.ACTIVE_FAK, 
              SIMPLE1.CODE2, 
              SIMPLE_SKLAD_KOD.TEXT, 
              SIMPLE1.FLAG_VAUCHER, 
              COALESCE(SIMPLE1.COEFF_ME, 0) AS COEFF_ME, 
              SIMPLE1.RAZPAD, 
              SIMPLE1.VAT_GROUP 
          FROM 
              NAL INNER JOIN SIMPLE SIMPLE1 ON SIMPLE1.ID = NAL.SIMPLE_ID  AND NOT SIMPLE1."ACTIVE" = '0' 
              INNER JOIN ME ME1 ON ME1.ID = SIMPLE1.ME_ID 
              LEFT JOIN ME ME2 ON ME2.ID = SIMPLE1.ME2_ID 
              LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE1.DEF_SEL_ID 
              LEFT JOIN NAL2 ON NAL2.NAL_ID = NAL.ID 
              LEFT JOIN DEF_RAZ_SIMPLE ON DEF_RAZ_SIMPLE.SIMPLE_ID = NAL.SIMPLE_ID AND (SIMPLE1.RAZ_TIP_ID IS NOT NULL) 
              LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = DEF_RAZ_SIMPLE.RAZFASOVKA_ID 
              LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
              LEFT JOIN GET_USER_SKLAD_NAL(:P_USER_ID,NAL.SIMPLE_ID) GSN ON GSN.R_SIMPLE_ID = NAL.SIMPLE_ID 
              INNER JOIN SKLAD ON SKLAD.ID =  NAL.SKLAD_ID 
              LEFT JOIN SIMPLE_SKLAD_KOD ON SIMPLE_SKLAD_KOD.SIMPLE_ID = SIMPLE1.ID AND SIMPLE_SKLAD_KOD.SKLAD_ID = :R_SKLAD_ID 
          WHERE 
              SIMPLE1.ID > 0 
              AND NAL.SKLAD_ID = :R_SKLAD_ID 
              AND (:L_SEL = 0 OR (:L_SEL = 1 
              AND (SIMPLE1.DEF_SEL_ID IS NULL OR 
                  (EXISTS ( 
                      SELECT 
                          TMP_SIMPLE_SEL_PROD1.SIMPLE_ID 
                      FROM 
                          TMP_SIMPLE_SEL_PROD1 
                      WHERE 
                          TMP_SIMPLE_SEL_PROD1.NUM_TR = :P_NUM_TR 
                          AND TMP_SIMPLE_SEL_PROD1.SIMPLE_ID = SIMPLE1.ID 
                          AND TMP_SIMPLE_SEL_PROD1.SKLAD_ID = :R_SKLAD_ID 
                       ) 
          )))) 
          UNION ALL 
          SELECT 
              CAST (0 AS DOUBLE PRECISION), 
              CAST(0 AS DOUBLE PRECISION), 
              CAST (0 AS DOUBLE PRECISION), 
              SIMPLE.ID, 
              SIMPLE.NAME, 
              SIMPLE.CODE, 
              SIMPLE.USLUGA, 
              SIMPLE.ME_ID, 
              SIMPLE.DEF_SEL_ID, 
              SIMPLE.LOCK_CENA_PROD, 
              SIMPLE.DDS, 
              SIMPLE.RSN, 
              COALESCE(SIMPLE.RAZ_TIP_ID,0), 
              ME1.NAME, 
              COALESCE(ME1.KOEF,0), 
              SELEKCIQ.NAME, 
              SIMPLE.ME2_ID, 
              ME2.NAME, 
              CAST (0 AS DOUBLE PRECISION), 
              CAST (0 AS DOUBLE PRECISION), 
              COALESCE(DEF_RAZ_SIMPLE.RAZFASOVKA_ID, 0), 
              RAZFASOVKA.KOL KOL_RAZ_EL, 
              RAZ_ELEMENT.NAME NAME_RAZ_EL, 
              GSN.R_KOL_NAL, 
              COALESCE(ME1.KOEF_ET, 1000), 
              COALESCE(ME2.KOEF_ET, 1000), 
              ME1.IS_BROI, 
              ME2.IS_BROI, 
              SIMPLE.ACTIVE_FAK, 
              SIMPLE.CODE2, 
              SIMPLE_SKLAD_KOD.TEXT, 
              SIMPLE.FLAG_VAUCHER, 
              COALESCE(SIMPLE.COEFF_ME, 0) AS COEFF_ME, 
              SIMPLE.RAZPAD, 
              SIMPLE.VAT_GROUP 
          FROM 
              SIMPLE 
              LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
              LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
              LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
              LEFT JOIN DEF_RAZ_SIMPLE ON DEF_RAZ_SIMPLE.SIMPLE_ID = SIMPLE.ID AND SIMPLE.RAZ_TIP_ID IS NOT NULL 
              LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = DEF_RAZ_SIMPLE.RAZFASOVKA_ID 
              LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
              LEFT JOIN GET_USER_SKLAD_NAL(:P_USER_ID,SIMPLE.ID) GSN ON GSN.R_SIMPLE_ID = SIMPLE.ID 
              LEFT JOIN SIMPLE_SKLAD_KOD ON SIMPLE_SKLAD_KOD.SIMPLE_ID = SIMPLE.ID AND SIMPLE_SKLAD_KOD.SKLAD_ID = :R_SKLAD_ID 
          WHERE 
              SIMPLE.ID > 0 
              AND NOT SIMPLE."ACTIVE" = '0' 
              AND NOT EXISTS (SELECT NAL.ID FROM NAL WHERE NAL.SIMPLE_ID = SIMPLE.ID AND NAL.SKLAD_ID = :R_SKLAD_ID) 
              AND (:L_SEL = 0 OR (:L_SEL = 1 AND 
              (SIMPLE.DEF_SEL_ID IS NULL OR ( 
              EXISTS ( SELECT TMP_SIMPLE_SEL_PROD1.SIMPLE_ID 
                       FROM 
                         TMP_SIMPLE_SEL_PROD1 
                       WHERE 
                         TMP_SIMPLE_SEL_PROD1.NUM_TR = :P_NUM_TR AND 
                         TMP_SIMPLE_SEL_PROD1.SIMPLE_ID = SIMPLE.ID AND 
                         TMP_SIMPLE_SEL_PROD1.SKLAD_ID = :R_SKLAD_ID 
                           ))))) 
          ORDER BY 4 
          INTO 
              :KOL_NAL,:CENA_SR,:LAST_CENA,:ID,:NAME,:CODE,:USLUGA,:ME_ID,:DEF_SEL_ID,:LOCK_CENA_PROD,:D_D_S,:RSN,:RAZ_TIP_ID,:ME, 
              :ME_KOEF,:GR_NAME,:ME2_ID,:ME2,:KOL_NAL2,:KOL_RZV,:DEF_RAZ_EL,:KOL_RAZ_EL,:NAME_RAZ_EL,:KOL_FKT,:KOEF_ET,:KOEF_ET2, 
              :IS_BROI,:IS_BROI2,:R_ACTIVE_FAK,:R_CODE2,:R_ADRESIRANE, :R_FLAG_VAUCHER, :R_COEFF_ME, :R_SIMPLE_RAZPAD, :R_VAT_GROUP 
          DO 
              SUSPEND; 
      END 
  END 
  ELSE BEGIN /* PRODAJBA OT KONSIGNACIA */ 
      FOR SELECT 
          IN_EL.ID IN_EL_ID, 
          IN_EL.KOL IN_EL_KOL, 
          ROUND(OUT_EL.SUMA/IN_EL.KOL,5), 
          SIMPLE1.ID, 
          SIMPLE1.NAME, 
          SIMPLE1.CODE, 
          SIMPLE1.USLUGA, 
          SIMPLE1.DEF_SEL_ID, 
          SIMPLE1.LOCK_CENA_PROD, 
          SIMPLE1.DDS, 
          SIMPLE1.RSN, 
          COALESCE(SIMPLE1.RAZ_TIP_ID,0), 
          COALESCE(ME1.KOEF,0), 
          SELEKCIQ.NAME, 
          SIMPLE1.ME_ID, 
          ME1.NAME, 
          SIMPLE1.ME2_ID, 
          ME2.NAME ME2, 
          COALESCE(DEF_RAZ_SIMPLE.RAZFASOVKA_ID, 0), 
          RAZFASOVKA.KOL KOL_RAZ_EL, 
          RAZ_ELEMENT.NAME NAME_RAZ_EL, 
          COALESCE(ME1.KOEF_ET, 1), 
          COALESCE(ME2.KOEF_ET, 1), 
          ME1.IS_BROI, 
          ME2.IS_BROI, 
          SIMPLE1.ACTIVE_FAK, 
          SIMPLE1.CODE2, 
          SIMPLE_SKLAD_KOD.TEXT, 
          SIMPLE1.FLAG_VAUCHER, 
          COALESCE(SIMPLE1.COEFF_ME, 0) AS COEFF_ME, 
          SIMPLE1.RAZPAD, 
          SIMPLE1.VAT_GROUP 
      FROM 
          IN_EL JOIN OPR OPR_IN ON OPR_IN.ID = IN_EL.OPR_ID AND OPR_IN.OPR_TIP = 46 AND OPR_IN.KLI_ID = :P_KLIENT 
          JOIN OPR_RAZPAD_NODE ORN ON ORN.IN_EL_ID = IN_EL.ID 
          JOIN OUT_EL ON OUT_EL.ID = ORN.OUT_EL_ID 
          JOIN OPR OPR_OUT ON OPR_OUT.ID = OUT_EL.OPR_ID AND OPR_OUT.OPR_TIP = 46 
          JOIN SIMPLE SIMPLE1 ON SIMPLE1.ID = IN_EL.SIMPLE_ID 
          LEFT JOIN ME ME1 ON ME1.ID = SIMPLE1.ME_ID 
          LEFT JOIN ME ME2 ON ME2.ID = SIMPLE1.ME2_ID 
          LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE1.DEF_SEL_ID 
          LEFT JOIN DEF_RAZ_SIMPLE ON DEF_RAZ_SIMPLE.SIMPLE_ID = IN_EL.SIMPLE_ID AND (SIMPLE1.RAZ_TIP_ID IS NOT NULL) 
          LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = DEF_RAZ_SIMPLE.RAZFASOVKA_ID 
          LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
          LEFT JOIN SIMPLE_SKLAD_KOD ON SIMPLE_SKLAD_KOD.SIMPLE_ID = SIMPLE1.ID AND SIMPLE_SKLAD_KOD.SKLAD_ID = :R_SKLAD_ID 
      WHERE 
          OPR_IN.SKLAD_ID = :P_SKLAD 
      ORDER BY IN_EL.SIMPLE_ID 
      INTO 
          :IN_EL_ID,:KOL_NAL,:CENA,:ID,:NAME,:CODE,:USLUGA,:DEF_SEL_ID,:LOCK_CENA_PROD,:D_D_S,:RSN,:RAZ_TIP_ID,:ME_KOEF,:GR_NAME, 
          :ME_ID,:ME,:ME2_ID,:ME2,:DEF_RAZ_EL,:KOL_RAZ_EL,:NAME_RAZ_EL,:KOEF_ET,:KOEF_ET2,:IS_BROI,:IS_BROI2,:R_ACTIVE_FAK, 
          :R_CODE2,:R_ADRESIRANE, :R_FLAG_VAUCHER, :R_COEFF_ME, :R_SIMPLE_RAZPAD, :R_VAT_GROUP 
      DO BEGIN 
          KOL_FKT = NULL; 
          SELECT 
              CASE WHEN NAL.KOL_NAL <> 0 THEN CAST((NAL.SUMA/NAL.KOL_NAL) AS DOUBLE PRECISION) 
              ELSE CAST(0 AS DOUBLE PRECISION)END, 
              CAST(COALESCE(NAL.LAST_CENA,0) AS DOUBLE PRECISION) 
          FROM 
              NAL 
          WHERE 
              NAL.SIMPLE_ID = :ID 
              AND NAL.SKLAD_ID = :P_SKLAD 
          INTO 
              :CENA_SR,:LAST_CENA; 
 
          SELECT 
              SUM(KOL) 
          FROM 
              (SELECT DISTINCT 
                  IN_EL.KOL 
              FROM 
                  IN_EL JOIN OPR ON OPR.ID = IN_EL.OPR_ID AND OPR.OPR_TIP = 46 
              WHERE 
                  IN_EL.ID = :IN_EL_ID 
 
              UNION ALL 
 
              SELECT 
                  - COALESCE(OUT_EL.KOL, 0.00) 
              FROM 
                  OPR_RAZPAD_NODE RN JOIN OUT_EL ON OUT_EL.ID = RN.OUT_EL_ID 
                  JOIN OPR OPR_OUT_EL ON OPR_OUT_EL.ID = OUT_EL.OPR_ID AND OPR_OUT_EL.OPR_TIP = 2 
              WHERE 
                  RN.IN_EL_ID = :IN_EL_ID 
 
              UNION ALL 
 
              SELECT 
                  - COALESCE(OUT_EL.KOL, 0.00) 
              FROM 
                  OPR_RAZPAD_NODE RN JOIN OUT_EL ON OUT_EL.ID = RN.OUT_EL_ID 
                  JOIN OPR OPR_OUT_EL ON OPR_OUT_EL.ID = OUT_EL.OPR_ID AND OPR_OUT_EL.OPR_TIP = 48 
              WHERE 
                  RN.IN_EL_ID = :IN_EL_ID ) 
          INTO 
              :L_KOL; 
 
          IF (L_KOL IS NOT NULL) THEN 
              KOL_NAL = :L_KOL; 
 
          IF (KOL_NAL > 0) THEN 
              SUSPEND; 
      END 
  END 
 
END^


ALTER PROCEDURE GET_SIMPLE_PROP (
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_PROP_NAME VARCHAR(1000))
AS
DECLARE VARIABLE L_PROP_NAME VARCHAR(50); 
BEGIN 
    R_PROP_NAME = ''; 
    FOR 
        SELECT 
            SIMPLE_PROP.NAME 
        FROM 
            SIMPLE_PROP 
            INNER JOIN SIMPLE_PROP_NODE ON SIMPLE_PROP.ID = SIMPLE_PROP_NODE.MAJOR_PROP_ID 
        WHERE 
            SIMPLE_PROP_NODE.SIMPLE_ID =:P_SIMPLE_ID 
        INTO :L_PROP_NAME 
 
        DO 
        BEGIN 
            R_PROP_NAME = R_PROP_NAME || L_PROP_NAME ||' ,'; 
        END 
        SUSPEND; 
END^


ALTER PROCEDURE GET_SIMPLE_SUB_GROUPS (
    P_GROUPS VARCHAR(255),
    P_PARENT_ID INTEGER)
RETURNS (
    R_GROUPS VARCHAR(255))
AS
DECLARE VARIABLE L_GROUP_ID INTEGER;
BEGIN
    IF (P_GROUPS = '') THEN
        R_GROUPS = CAST(P_PARENT_ID AS VARCHAR(255));
    ELSE
        R_GROUPS = P_GROUPS || ',' || CAST(P_PARENT_ID AS VARCHAR(255));
    FOR SELECT
        SIMPLE_GROUP.ID
    FROM
        SIMPLE_GROUP
    WHERE
        COALESCE(SIMPLE_GROUP.PARENT,0) = :P_PARENT_ID
    ORDER BY 1
    INTO
        :L_GROUP_ID
    DO BEGIN
        EXECUTE PROCEDURE GET_SIMPLE_SUB_GROUPS(R_GROUPS,L_GROUP_ID)
        RETURNING_VALUES :R_GROUPS;
    END
END^


ALTER PROCEDURE GET_SINGLE_LAST_PRICE (
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_FKT TYPE OF DOM_SMAL_INT)
RETURNS (
    R_PRICE TYPE OF DOM_CENA)
AS
DECLARE VARIABLE L_HSKLAD_ID TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_KSKLAD_ID TYPE OF DOM_SMAL_INT; 
BEGIN 
    SELECT 
        SYSTEM.H_SKLAD, 
        SYSTEM.K_SKLAD 
    FROM 
        SYSTEM 
    INTO 
        :L_HSKLAD_ID, :L_KSKLAD_ID; 
 
    R_PRICE = 0.00; 
    IF (:P_FKT = 1) THEN BEGIN 
        SELECT FIRST 1 
            COALESCE(NAL.LAST_CENA, 0) 
        FROM 
            NAL 
        WHERE 
            NAL.SIMPLE_ID = :P_SIMPLE_ID 
            AND NAL.SKLAD_ID = :L_HSKLAD_ID 
            AND NAL.LAST_CENA IS NOT NULL 
        INTO 
            :R_PRICE; 
    END 
    ELSE BEGIN 
        SELECT FIRST 1 
            COALESCE(NAL.LAST_CENA, 0.00) 
        FROM 
            NAL 
        WHERE 
            NAL.SIMPLE_ID = :P_SIMPLE_ID 
            AND NAL.SKLAD_ID NOT IN (:L_HSKLAD_ID, :L_KSKLAD_ID) 
            AND NAL.LAST_CENA IS NOT NULL 
        ORDER BY NAL.DATETIME_LASTCENA DESC 
        INTO 
            :R_PRICE; 
    END 
 
    R_PRICE = COALESCE(:R_PRICE,0.00); 
 
    SUSPEND; 
END^


ALTER PROCEDURE GET_SKLAD_ID_S (
    P_OPR_ID INTEGER)
RETURNS (
    R_SKLAD_ID_S VARCHAR(1000))
AS
declare variable l_sklad_id integer; 
begin 
  r_sklad_id_s = ''; 
  for select 
      cenova_lista_sklad.sklad_id as id 
  from cenova_lista_sklad 
  where cenova_lista_sklad.opr_id = :p_opr_id 
  into :l_sklad_id 
  do begin 
    r_sklad_id_s = r_sklad_id_s||cast(l_sklad_id as varchar(3))||','; 
  end 
  suspend; 
end^


ALTER PROCEDURE GET_SMR_PROTOCOL (
    P_BRZN_CENI TYPE OF DOM_INT)
RETURNS (
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_ME_NAME TYPE OF DOM_CHAR_15,
    R_KOL TYPE OF DOM_KOL,
    R_CENA TYPE OF DOM_CENA,
    R_SUMA TYPE OF DOM_SUMA)
AS
declare variable L_SIMPLE_ID type of DOM_KEY; 
declare variable L_OPR_ID type of DOM_KEY; 
declare variable L_TIP_CENI type of DOM_SMAL_INT; 
BEGIN 
    /*SELECT FIRST 1 
            LOG_CENI_DDS.TIP_CENI 
        FROM 
            LOG_CENI_DDS 
        WHERE 
            LOG_CENI_DDS.TIP_DDS = 1 AND LOG_CENI_DDS.OPR_ID < (SELECT FIRST 1 TMP_SEL_1.ID FROM TMP_SEL_1 ORDER BY TMP_SEL_1.ID DESC) 
        ORDER BY LOG_CENI_DDS.OPR_ID DESC 
    INTO :L_TIP_CENI; За Телекабел винаги трябва да се намаля ддс*/ 
 
    FOR SELECT 
        SIMPLE.ID, 
        SIMPLE.NAME, 
        ME.NAME, 
        ROUND(PROD_CENI_EL.CENA / (1 + SIMPLE.DDS / 100), :P_BRZN_CENI), 
        SUM(OUT_EL.KOL), 
        SUM(OUT_EL.SUMA) 
    FROM 
        OUT_EL INNER JOIN TMP_SEL_1 OP ON OP.ID = OUT_EL.OPR_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        INNER JOIN ME ON ME.ID = SIMPLE.ME_ID 
        INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID 
    GROUP BY 1,2,3,4 
    ORDER BY 2 
    INTO 
        :L_SIMPLE_ID, :R_SIMPLE_NAME, :R_ME_NAME, :R_CENA, :R_KOL, :R_SUMA 
    DO BEGIN 
        --R_CENA = ROUND(:R_CENA / 1.2, :P_BRZN_CENI); 
        R_SUMA = ROUND(R_CENA * R_KOL, 2); 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_SPEDITION
RETURNS (
    R_KLI_ID INTEGER,
    R_FIRMA_MOL VARCHAR(30),
    R_KLI_NAME VARCHAR(100),
    R_KLI_ADDRES VARCHAR(50),
    R_KLI_PLACE VARCHAR(30),
    R_FIRMA_NAME VARCHAR(50),
    R_FIRMA_PLACE VARCHAR(30),
    R_FIRMA_ADDRES VARCHAR(50),
    R_FIRMA_ID_NOM VARCHAR(13),
    R_FIRMA_ID_NOM_DDS VARCHAR(15),
    R_KLI_TEL VARCHAR(30),
    R_CODE VARCHAR(15),
    R_KLI_AGENT VARCHAR(50))
AS
DECLARE VARIABLE L_OPR_ID INTEGER; 
BEGIN 
    SELECT FIRST 1 OPR.ID FROM OPR INNER JOIN SEL_OPR ON SEL_OPR.OPR_ID = OPR.ID INTO :L_OPR_ID; 
 
    FOR SELECT 
            KLI.ID AS KLI_ID, 
            KLI.NAME AS KLI_NAME, 
            PLACE1.NAME AS KLI_PLACE, 
            KLI.ADRES, 
            COALESCE(FIRMI.NAME_FAK, KLI.NAME) AS FIRMA_NAME, 
            PLACE.NAME AS FAK_PLACE, 
            FIRMI.ADRES AS FAK_ADRES, 
            FIRMI.MOL AS KLI_MOL, 
            FIRMI.BULSTAT, 
            FIRMI.IDNOMDDS, 
            KLI.TEL as KLI_TEL, 
            KLI.CODE, 
            KLI_AGENTS.NAME AS AGENT_NAME 
        FROM 
            OPR INNER JOIN OUT ON (OPR.ID = :L_OPR_ID AND OPR.ID = OUT.OPR_ID) 
            LEFT JOIN KLI ON OPR.KLI_ID = KLI.ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
            LEFT JOIN PLACE ON PLACE.ID = FIRMI.PLACE_ID 
            LEFT JOIN PLACE PLACE1 ON PLACE1.ID = KLI.PLACE_ID 
            LEFT JOIN KLI_AGENTS ON KLI_AGENTS.KLI_ID = KLI.ID 
 
        UNION ALL 
 
        SELECT 
            OPR_EDIT.KLI_ID, 
            KLI.NAME, 
            PLACE1.NAME AS KLI_PLACE, 
            KLI.ADRES, 
            COALESCE(FIRMI.NAME_FAK, KLI.NAME), 
            PLACE.NAME AS FAK_PLACE, 
            FIRMI.ADRES AS FAK_ADRES, 
            FIRMI.MOL, 
            FIRMI.BULSTAT, 
            FIRMI.IDNOMDDS, 
            KLI.TEL, 
            KLI.CODE, 
            KLI_AGENTS.NAME AS AGENT_NAME 
        FROM 
            OPR 
            INNER JOIN OPR_EDIT ON (OPR_EDIT.OPR_ID = :L_OPR_ID AND OPR.ID = OPR_EDIT.ED_OPR_ID) 
            INNER JOIN OUT ON OPR_EDIT.ED_OPR_ID = OUT.OPR_ID 
            LEFT JOIN KLI ON OPR_EDIT.KLI_ID = KLI.ID 
            LEFT JOIN FIRMI ON KLI.FIRMA_ID = FIRMI.ID 
            LEFT JOIN PLACE ON PLACE.ID = FIRMI.PLACE_ID 
            LEFT JOIN PLACE PLACE1 ON PLACE1.ID = KLI.PLACE_ID 
            LEFT JOIN KLI_AGENTS ON KLI_AGENTS.KLI_ID = KLI.ID 
 
        INTO :R_KLI_ID,R_KLI_NAME,:R_KLI_PLACE,:R_KLI_ADDRES,:R_FIRMA_NAME,:R_FIRMA_PLACE,:R_FIRMA_ADDRES,:R_FIRMA_MOL,:R_FIRMA_ID_NOM,:R_FIRMA_ID_NOM_DDS,:R_KLI_TEL,:R_CODE,:R_KLI_AGENT 
        DO 
        BEGIN 
            SUSPEND; 
        END 
END^


ALTER PROCEDURE GET_SPR_DOST (
    P_OPR_TIP SMALLINT,
    P_FILTER VARCHAR(100),
    P_FLAG_ANNUL INTEGER,
    P_CENOVA_LISTA INTEGER,
    P_TIP INTEGER,
    P_FILTER_COLUMNS TYPE OF DOM_INT)
RETURNS (
    R_ID INTEGER,
    R_IN_ID INTEGER,
    R_OPR_DATE DATE,
    R_KLI_ID INTEGER,
    R_SUMA DOUBLE PRECISION,
    R_USER_ID SMALLINT,
    R_SKLAD_ID SMALLINT,
    R_PAY_TIP SMALLINT,
    R_PAY_TIP_1 VARCHAR(12),
    R_KLI VARCHAR(100),
    R_USERNAME VARCHAR(30),
    R_SKLAD TYPE OF DOM_CHAR_50,
    R_ANUL_FLAG SMALLINT,
    R_SUMA_OSTATAK DOUBLE PRECISION,
    R_TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_DATETIME TIMESTAMP,
    NOM_GAR VARCHAR(30),
    R_KLI_CODE VARCHAR(15),
    R_IS_LOCK INTEGER,
    R_OPR_TIP INTEGER,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    R_IS_FAK SMALLINT,
    R_SUMA_PROD DOUBLE PRECISION,
    R_SUMA_DDS TYPE OF DOM_SUMA,
    R_HAS_DOCUMENT TYPE OF DOM_INT,
    R_FAK_NUMBER TYPE OF DOM_CHAR_300,
    R_NAME_FAK TYPE OF DOM_CHAR_2000,
    R_BULSTAT TYPE OF DOM_CHAR_300,
    R_IDNOMDDS TYPE OF DOM_CHAR_300)
AS
declare variable L_SQL varchar(2048); 
BEGIN 
      L_SQL = 'SELECT 
          OPR.ID, 
          "IN".ID, 
          OPR.OPR_DATE, 
          OPR.KLI_ID, 
          OPR.SUMA, 
          OPR.DATETIME, 
          OPR.USER_ID, 
          CAST(COALESCE(OPR.SKLAD_ID,0) AS SMALLINT), 
          "IN".PAY_TIP, 
          CAST(CASE WHEN ("IN".PAY_TIP=1) THEN ''НЕПЛАТЕНО'' ELSE ''ПЛАТЕНО'' END AS VARCHAR(12)), 
          KLI.NAME, 
          "USER".NAME, 
          CAST(COALESCE(SKLAD.NAME,''С ПОДДОСТАВКИ'') AS VARCHAR(50)), 
          COALESCE((SELECT SUM(SUMI.SUMA_OST)FROM SUMI WHERE SUMI.OPR_ID = OPR.ID),0), 
          "IN".NOM_GAR, 
          KLI.CODE, 
          OPR.IS_LOCK, 
          OPR.OPR_TIP, 
          FIRMI.NAME_FAK, 
          FIRMI.BULSTAT, 
          FIRMI.IDNOMDDS 
      FROM 
          OPR INNER JOIN "IN" ON "IN".OPR_ID = OPR.ID AND OPR.OPR_TIP  = '|| :P_OPR_TIP ||' 
          INNER JOIN "USER" ON OPR.USER_ID = "USER".ID 
          INNER JOIN KLI ON OPR.KLI_ID = KLI.ID 
          LEFT JOIN FIRMI ON FIRMI.ID  = KLI.FIRMA_ID 
          LEFT JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
      WHERE    ' || :P_FILTER; 
      IF (P_FLAG_ANNUL = 0) THEN 
          L_SQL = L_SQL || ' NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)'; 
      ELSE 
          L_SQL = L_SQL || ' 1=1 '; 
 
      FOR EXECUTE STATEMENT :L_SQL 
      INTO 
          :R_ID,:R_IN_ID,:R_OPR_DATE,:R_KLI_ID,:R_SUMA,:R_DATETIME,:R_USER_ID,:R_SKLAD_ID,:R_PAY_TIP, 
          :R_PAY_TIP_1,:R_KLI,:R_USERNAME,:R_SKLAD,:R_SUMA_OSTATAK, :NOM_GAR, :R_KLI_CODE,:R_IS_LOCK,:R_OPR_TIP, 
          :R_NAME_FAK, :R_BULSTAT, :R_IDNOMDDS 
      DO BEGIN 
          R_LOCK_DT = NULL; 
          R_LOCK_USER_NAME = NULL; 
 
          R_TEXT = NULL; 
 
          /*IF (EXISTS (SELECT FAK_IN_EL_NODE.ID FROM FAK_IN_EL_NODE INNER JOIN 
          IN_EL ON IN_EL.ID = FAK_IN_EL_NODE.IN_EL_ID AND IN_EL.OPR_ID = :R_ID 
          UNION 
          SELECT FAK_IN_EL_NODE.ID FROM FAK_IN_EL_NODE INNER JOIN IN_EL ON IN_EL.ID = FAK_IN_EL_NODE.IN_EL_ID 
          INNER JOIN DOST_NODE ON DOST_NODE.DOST_ID = :R_ID AND DOST_NODE.RAZ_DOST_ID = IN_EL.OPR_ID 
          UNION 
          SELECT FAK_IN_EL_NODE.ID FROM FAK_IN_EL_NODE INNER JOIN IN_EL ON IN_EL.ID = FAK_IN_EL_NODE.IN_EL_ID 
          INNER JOIN IN_TO_FAK_EL ON IN_TO_FAK_EL.IN_EL_ID = IN_EL.ID 
          INNER JOIN IN_EL IN_EL1 ON IN_EL1.ID = IN_TO_FAK_EL.FAK_IN_EL_ID AND IN_EL1.OPR_ID = :R_ID)) THEN 
              R_IS_FAK = 1; 
          ELSE 
              R_IS_FAK = 0; */ 
 
          SELECT 
            CAST(SUBSTRING(LIST(DISTINCT NUMBER) FROM 1 FOR 300) AS DOM_CHAR_300) 
          FROM 
          ( 
            SELECT 
                FAK_IN.NUMBER 
            FROM 
                FAK_IN_EL_NODE 
                INNER JOIN IN_EL ON IN_EL.ID = FAK_IN_EL_NODE.IN_EL_ID AND IN_EL.OPR_ID = :R_ID 
                INNER JOIN FAK_IN ON FAK_IN.ID = FAK_IN_EL_NODE.FAK_IN_ID 
 
            UNION 
 
            SELECT 
                FAK_IN.NUMBER 
            FROM 
                FAK_IN_EL_NODE INNER JOIN IN_EL ON IN_EL.ID = FAK_IN_EL_NODE.IN_EL_ID 
                INNER JOIN DOST_NODE ON DOST_NODE.DOST_ID = :R_ID AND DOST_NODE.RAZ_DOST_ID = IN_EL.OPR_ID 
                INNER JOIN FAK_IN ON FAK_IN.ID = FAK_IN_EL_NODE.FAK_IN_ID 
            UNION 
 
            SELECT 
                FAK_IN.NUMBER 
            FROM 
                FAK_IN_EL_NODE INNER JOIN IN_EL ON IN_EL.ID = FAK_IN_EL_NODE.IN_EL_ID 
                INNER JOIN IN_TO_FAK_EL ON IN_TO_FAK_EL.IN_EL_ID = IN_EL.ID 
                INNER JOIN IN_EL IN_EL1 ON IN_EL1.ID = IN_TO_FAK_EL.FAK_IN_EL_ID AND IN_EL1.OPR_ID = :R_ID 
                INNER JOIN FAK_IN ON FAK_IN.ID = FAK_IN_EL_NODE.FAK_IN_ID 
        ) 
        INTO :R_FAK_NUMBER; 
 
        if (COALESCE(R_FAK_NUMBER, '') <> '') then 
            R_IS_FAK = 1; 
        ELSE 
            R_IS_FAK = 0; 
 
          SELECT FIRST 1 
              COMMENTS.NOTE 
          FROM 
              COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
          WHERE 
              COMMENT_OPR_NODE.OPR_ID = :R_ID 
          ORDER BY 
              COMMENT_OPR_NODE.ID DESC 
          INTO :R_TEXT; 
 
          SELECT FIRST 1 
              LOCK_OPR.DT, 
              US_L.NAME 
          FROM LOCK_OPR 
              JOIN LOCK_OPR_EL ON LOCK_OPR_EL.LOCK_ID = LOCK_OPR.ID AND LOCK_OPR_EL.OPR_ID = :R_ID 
              JOIN "USER" US_L ON US_L.ID = LOCK_OPR.USER_ID 
          ORDER BY LOCK_OPR.DT DESC 
          INTO :R_LOCK_DT,:R_LOCK_USER_NAME; 
 
          IF (EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = :R_ID)) THEN 
              R_ANUL_FLAG = 2; 
          ELSE IF (EXISTS (SELECT OPR_EDIT.ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID = :R_ID)) THEN 
              R_ANUL_FLAG = 1; 
          ELSE 
              R_ANUL_FLAG = 0; 
 
          EXECUTE PROCEDURE GET_DOST_CENA_PROD(:R_ID,:P_CENOVA_LISTA,:P_TIP) RETURNING_VALUES (:R_SUMA_PROD); 
 
          SELECT 
              IIF((SELECT FIRST 1 LOG_CENI_DDS.TIP_CENI FROM LOG_CENI_DDS WHERE LOG_CENI_DDS.TIP_DDS = 0 AND LOG_CENI_DDS.OPR_ID <:R_ID ORDER BY LOG_CENI_DDS.ID DESC) = 1, SUM(IN_EL.SUMA_FR), SUM((IN_EL.SUMA_FR * 
              IN_EL.VAT_PERCENT/100) + IN_EL.SUMA_FR)) 
          FROM 
              IN_EL INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
          WHERE 
              IN_EL.OPR_ID =:R_ID 
          INTO :R_SUMA_DDS; 
 
          R_HAS_DOCUMENT = 0; 
          --ПРИКАЧЕНИ ДОКУМЕНТИ 
          if (BIN_AND(P_FILTER_COLUMNS, 1) > 0) THEN 
          BEGIN 
              SELECT FIRST 1 
                  TMP.RECORD_ID 
              FROM 
              ( 
 
                  SELECT 
                      DOCUMENTS.RECORD_ID 
                  FROM 
                      DOCUMENTS INNER JOIN "USER" U ON U.ID = DOCUMENTS.USER_ID 
                      AND DOCUMENTS.RECORD_ID = :R_ID AND DOCUMENTS.STATUS = 0 
                      INNER JOIN DOCUMENTS_TIP ON DOCUMENTS_TIP.ID = DOCUMENTS.DOC_TYPE 
 
                  UNION 
 
                  SELECT 
                      DOCUMENTS.RECORD_ID 
                  FROM 
                      DOCUMENTS 
                      INNER JOIN "USER" U ON U.ID = DOCUMENTS.USER_ID 
                      INNER JOIN DOCUMENTS_TIP ON DOCUMENTS_TIP.ID = DOCUMENTS.DOC_TYPE 
                  WHERE 
                    DOCUMENTS.STATUS = 0 AND 
                    DOCUMENTS.RECORD_ID IN ( 
                      SELECT DISTINCT 
                        FAK_IN.OPR_ID 
                      FROM 
                        FAK_IN_EL_NODE 
                        INNER JOIN IN_EL ON IN_EL.ID = FAK_IN_EL_NODE.IN_EL_ID 
                        INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
                        INNER JOIN FAK_IN ON FAK_IN.ID = FAK_IN_EL_NODE.FAK_IN_ID 
                      WHERE 
                        OPR.ID = :R_ID) 
 
                  UNION 
 
                  SELECT 
                      DOCUMENTS.RECORD_ID 
                  FROM 
                      DOCUMENTS 
                      INNER JOIN "USER" U ON U.ID = DOCUMENTS.USER_ID 
                      INNER JOIN DOCUMENTS_TIP ON DOCUMENTS_TIP.ID = DOCUMENTS.DOC_TYPE 
                  WHERE 
                    DOCUMENTS.STATUS = 0 AND 
                    DOCUMENTS.RECORD_ID IN ( 
                      SELECT 
                        PARI.OPR_ID 
                      FROM 
                        PARI 
                        INNER JOIN PARI_SKLOPR_NODE ON PARI_SKLOPR_NODE.OPR_PARI_ID = PARI.OPR_ID 
                        INNER JOIN SUMI SUMI1 ON SUMI1.OPR_ID = PARI_SKLOPR_NODE.OPR_ID 
                        INNER JOIN OPR_PAYMENT_NODE ON SUMI1.ID = OPR_PAYMENT_NODE.PAYMENT_ID 
                        INNER JOIN SUMI SUMI2 ON SUMI2.ID = OPR_PAYMENT_NODE.OPR_ID 
                      WHERE 
                        SUMI2.OPR_ID = :R_ID 
 
                      UNION 
 
                      SELECT 
                        PARI_TMP.OPR_ID 
                      FROM 
                        PARI_TMP 
                        INNER JOIN SUMI SUMI1 ON SUMI1.OPR_ID = PARI_TMP.OPR_ID 
                        INNER JOIN OPR_PAYMENT_NODE ON SUMI1.ID = OPR_PAYMENT_NODE.PAYMENT_ID 
                        INNER JOIN SUMI SUMI2 ON SUMI2.ID = OPR_PAYMENT_NODE.OPR_ID 
                      WHERE 
                        SUMI2.OPR_ID = :R_ID) 
 
 
                      ) TMP 
              INTO :R_HAS_DOCUMENT; 
              IF (R_HAS_DOCUMENT IS NOT NULL AND (R_HAS_DOCUMENT <> 0) ) THEN 
                  R_HAS_DOCUMENT = 1; 
          END 
 
          SUSPEND; 
      END 
  END^


ALTER PROCEDURE GET_SPR_INV (
    P_ID INTEGER,
    P_CL INTEGER)
RETURNS (
    OPR_ID INTEGER,
    ID INTEGER,
    SUMA_IZLISHAK DOUBLE PRECISION,
    SUMA_LIPSA DOUBLE PRECISION,
    IN_DATETIME DATE,
    OPR_DATETIME TIMESTAMP,
    NAME VARCHAR(20),
    SKLAD_ID SMALLINT,
    USER_NAME VARCHAR(30),
    ANULIRANA INTEGER,
    COMMENT_TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80)
AS
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_CENA DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
BEGIN    
    FOR SELECT  
        OPR.ID,  
        OPR.OPR_DATE,  
        OPR.DATETIME,  
        INV.ID,  
        INV.SUMA_IZLISHAK,  
        INV.SUMA_LIPSA,  
        "USER".NAME,  
        SKLAD.NAME,  
        SKLAD.ID,  
        0 
    FROM  
        OPR INNER JOIN INV ON (OPR.ID = :P_ID AND INV.OPR_ID = OPR.ID)  
        INNER JOIN "USER" ON "USER".ID = OPR.USER_ID  
        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID    
    WHERE    
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)  
    UNION    
  
    SELECT    
        OPR.ID,  
        OPR.OPR_DATE,  
        OPR.DATETIME,  
        INV.ID,  
        INV.SUMA_IZLISHAK,    
        INV.SUMA_LIPSA,    
        "USER".NAME,  
        SKLAD.NAME,  
        SKLAD.ID,  
        1 
    FROM  
        OPR INNER JOIN INV ON (OPR.ID = :P_ID AND INV.OPR_ID = OPR.ID)  
        INNER  JOIN "USER" ON ("USER".ID = OPR.USER_ID)    
        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID    
    WHERE    
        EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)  
    INTO  
        :OPR_ID,:IN_DATETIME,:OPR_DATETIME,:ID,:SUMA_IZLISHAK,:SUMA_LIPSA,:USER_NAME,:NAME,  
        :SKLAD_ID,:ANULIRANA 
    DO BEGIN  
        COMMENT_TEXT = NULL; 
  
        SELECT FIRST 1  
            COMMENTS.NOTE  
        FROM  
            COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID  
        WHERE  
            COMMENT_OPR_NODE.OPR_ID = :OPR_ID 
        ORDER BY  
            COMMENT_OPR_NODE.ID DESC  
        INTO :COMMENT_TEXT; 
 
        IF (P_CL > 0) THEN BEGIN  
            SUMA_IZLISHAK = 0;    
            FOR SELECT  
                IN_EL.SIMPLE_ID,  
                IN_EL.KOL  
            FROM  
                IN_EL  
            WHERE  
                IN_EL.OPR_ID = :P_ID  
  
            UNION    
  
            SELECT    
                OLD_IN_EL.SIMPLE_ID,  
                OLD_IN_EL.KOL  
            FROM  
                OPR_ANUL INNER JOIN OLD_IN_EL ON (OPR_ANUL.AN_OPR_ID = :P_ID AND OPR_ANUL.OPR_ID = OLD_IN_EL.OPR_ID)  
            INTO  
                :L_SIMPLE_ID,:L_KOL    
            DO BEGIN    
                EXECUTE PROCEDURE GET_CENA_CL(:P_CL,:L_SIMPLE_ID) RETURNING_VALUES(L_CENA);    
                SUMA_IZLISHAK = ROUNDD(SUMA_IZLISHAK + ROUNDD(L_KOL * L_CENA));  
            END    
    
            SUMA_LIPSA = 0;    
            FOR SELECT  
                OUT_EL.SIMPLE_ID,  
                OUT_EL.KOL    
            FROM  
                OUT_EL  
            WHERE  
                OUT_EL.OPR_ID = :P_ID  
  
            UNION    
  
            SELECT    
                OLD_OUT_EL.SIMPLE_ID,  
                OLD_OUT_EL.KOL  
            FROM  
                OPR_ANUL INNER JOIN OLD_OUT_EL ON  
                (OLD_OUT_EL.OPR_ID = OPR_ANUL.OPR_ID AND OPR_ANUL.AN_OPR_ID = :P_ID)  
            INTO  
                :L_SIMPLE_ID,:L_KOL    
            DO BEGIN    
                EXECUTE PROCEDURE GET_CENA_CL(:P_CL,:L_SIMPLE_ID) RETURNING_VALUES(L_CENA);    
                SUMA_LIPSA = ROUNDD(SUMA_LIPSA + ROUNDD(L_KOL * L_CENA));  
            END    
        END    
   
        IF (P_CL = -1) THEN BEGIN   
            SUMA_LIPSA = 0;   
            FOR SELECT   
                SUMA_SR   
            FROM     
                OUT_EL   
            WHERE     
                OUT_EL.OPR_ID = :P_ID  
  
            UNION   
  
            SELECT   
                SUMA_SR   
            FROM  
                OPR_ANUL INNER JOIN OLD_OUT_EL ON (OPR_ANUL.AN_OPR_ID = :P_ID AND OLD_OUT_EL.OPR_ID = OPR_ANUL.OPR_ID)  
            INTO  
                :L_SUMA  
            DO BEGIN   
                SUMA_LIPSA = ROUNDD(SUMA_LIPSA + L_SUMA);  
            END   
        END   
        SUSPEND;    
    END    
END^


ALTER PROCEDURE GET_SPR_INV_EL (
    P_ID TYPE OF DOM_KEY,
    P_CL TYPE OF DOM_KEY)
RETURNS (
    CODE TYPE OF DOM_CHAR_50,
    NAME TYPE OF DOM_CHAR_100,
    ME CHAR(2),
    CENA TYPE OF DOM_CENA,
    KOL_LIPSA TYPE OF DOM_KOL,
    SUMA_LIPSA TYPE OF DOM_SUMA,
    KOL_IZLISHAK TYPE OF DOM_KOL,
    SUMA_IZLISHAK TYPE OF DOM_SUMA,
    BAR_CODE VARCHAR(13),
    ME2 CHAR(2),
    KOL2_LIPSA TYPE OF DOM_KOL,
    ME_LONG TYPE OF DOM_CHAR_15,
    KOL2_IZLISHAK TYPE OF DOM_KOL)
AS
DECLARE VARIABLE L_CENA_SR TYPE OF DOM_CENA; 
DECLARE VARIABLE L_CENA TYPE OF DOM_CENA; 
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_KEY; 
BEGIN 
    FOR SELECT 
        SIMPLE.ID, 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        ME1.NAME, 
        CASE WHEN IN_EL.KOL<>0 THEN ROUND5(IN_EL.SUMA_FR/IN_EL.KOL) ELSE 0 END, 
        CAST (NULL AS DOUBLE PRECISION), 
        CAST (NULL AS DOUBLE PRECISION), 
        IN_EL.KOL, 
        IN_EL.SUMA_FR, 
        ME2.NAME, 
        CAST(NULL AS DOUBLE PRECISION), 
        IN_EL2.KOL, 
        ME1.NAME_LONG, 
        (SELECT FIRST 1 BAR."BARCODE" FROM "BARCODE" BAR WHERE BAR.SIMPLE_ID = SIMPLE.ID ) 
    FROM 
        IN_EL INNER JOIN SIMPLE ON (IN_EL.OPR_ID = :P_ID AND IN_EL.SIMPLE_ID = SIMPLE.ID) 
        LEFT JOIN ME ME1 ON SIMPLE.ME_ID = ME1.ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN IN_EL2 ON IN_EL2.IN_EL_ID = IN_EL.ID 
    INTO 
        :L_SIMPLE_ID,:CODE,:NAME,:ME,:CENA,:KOL_LIPSA,:SUMA_LIPSA,:KOL_IZLISHAK, 
        :SUMA_IZLISHAK,:ME2,:KOL2_LIPSA,:KOL2_IZLISHAK, :ME_LONG, :BAR_CODE 
    DO BEGIN 
        IF (P_CL > 0) THEN BEGIN 
            EXECUTE PROCEDURE GET_CENA_CL(:P_CL,:L_SIMPLE_ID) RETURNING_VALUES(L_CENA); 
            SUMA_IZLISHAK = ROUNDD(L_CENA * KOL_IZLISHAK); 
            CENA = L_CENA; 
        END 
 
        SUSPEND; 
    END 
 
    FOR SELECT 
        SIMPLE.ID, 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        ME1.NAME, 
        CASE WHEN OUT_EL.KOL<>0 THEN ROUND5(OUT_EL.SUMA/OUT_EL.KOL) ELSE 0 END, 
        OUT_EL.KOL, 
        OUT_EL.SUMA, 
        CAST (NULL AS DOUBLE PRECISION), 
        CAST (NULL AS DOUBLE PRECISION), 
        ME2.NAME, 
        OUT_EL2.KOL, 
        CAST (NULL AS DOUBLE PRECISION), 
        ME1.NAME_LONG, 
        (SELECT FIRST 1 BAR."BARCODE" FROM "BARCODE" BAR WHERE BAR.SIMPLE_ID = SIMPLE.ID ), 
        CASE WHEN OUT_EL.KOL<>0 THEN ROUND5(OUT_EL.SUMA_SR / OUT_EL.KOL) ELSE 0 END 
    FROM 
        OUT_EL INNER JOIN SIMPLE ON (OUT_EL.OPR_ID = :P_ID AND OUT_EL.SIMPLE_ID=SIMPLE.ID) 
        LEFT JOIN ME ME1 ON SIMPLE.ME_ID = ME1.ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN OUT_EL2 ON OUT_EL2.OUT_EL_ID = OUT_EL.ID 
    INTO 
        :L_SIMPLE_ID,:CODE,:NAME,:ME,:CENA,:KOL_LIPSA,:SUMA_LIPSA,:KOL_IZLISHAK, 
        :SUMA_IZLISHAK,:ME2,:KOL2_LIPSA,:KOL2_IZLISHAK, :ME_LONG, :BAR_CODE, :L_CENA_SR 
    DO BEGIN 
        IF (P_CL > 0) THEN BEGIN 
            EXECUTE PROCEDURE GET_CENA_CL(:P_CL,:L_SIMPLE_ID) RETURNING_VALUES(L_CENA); 
            SUMA_LIPSA = ROUNDD(L_CENA * KOL_LIPSA); 
            CENA = L_CENA; 
        END 
 
        IF (P_CL = -1) THEN BEGIN 
            SUMA_LIPSA = roundd(L_CENA_SR * KOL_LIPSA); 
            CENA = L_CENA_SR; 
        END 
        SUSPEND; 
    END 
 
    FOR SELECT 
        SIMPLE.ID, 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        ME1.NAME, 
        CASE WHEN OLD_IN_EL.KOL<>0 THEN ROUND5(OLD_IN_EL.SUMA_FR/OLD_IN_EL.KOL) ELSE 0 END, 
        CAST (NULL AS DOUBLE PRECISION), 
        CAST (NULL AS DOUBLE PRECISION), 
        OLD_IN_EL.KOL, 
        OLD_IN_EL.SUMA_FR, 
        ME2.NAME, 
        CAST(NULL AS DOUBLE PRECISION), 
        OLD_IN_EL.KOL2, 
        ME1.NAME_LONG, 
        (SELECT FIRST 1 BAR."BARCODE" FROM "BARCODE" BAR WHERE BAR.SIMPLE_ID = SIMPLE.ID ) 
    FROM 
        OPR_ANUL INNER JOIN OLD_IN_EL ON (OPR_ANUL.AN_OPR_ID = :P_ID AND OPR_ANUL.OPR_ID = OLD_IN_EL.OPR_ID) 
        INNER JOIN SIMPLE ON OLD_IN_EL.SIMPLE_ID = SIMPLE.ID 
        LEFT JOIN ME ME1 ON SIMPLE.ME_ID = ME1.ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
    INTO 
        :L_SIMPLE_ID,:CODE,:NAME,:ME,:CENA,:KOL_LIPSA,:SUMA_LIPSA,:KOL_IZLISHAK, 
        :SUMA_IZLISHAK,:ME2,:KOL2_LIPSA,:KOL2_IZLISHAK, :ME_LONG, :BAR_CODE 
    DO BEGIN 
        IF (P_CL > 0) THEN BEGIN 
            EXECUTE PROCEDURE GET_CENA_CL(:P_CL,:L_SIMPLE_ID) RETURNING_VALUES(L_CENA); 
            SUMA_IZLISHAK = ROUNDD(L_CENA * KOL_IZLISHAK); 
            CENA = L_CENA; 
        END 
 
        SUSPEND; 
    END 
 
    FOR SELECT 
        SIMPLE.ID, 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        ME1.NAME, 
        CASE WHEN OLD_OUT_EL.KOL<>0 THEN ROUND5(OLD_OUT_EL.SUMA / OLD_OUT_EL.KOL) ELSE 0 END, 
        OLD_OUT_EL.KOL, 
        OLD_OUT_EL.SUMA, 
        CAST (NULL AS DOUBLE PRECISION), 
        CAST (NULL AS DOUBLE PRECISION), 
        ME2.NAME, 
        OLD_OUT_EL.KOL2, 
        CAST(NULL AS DOUBLE PRECISION), 
        ME1.NAME_LONG, 
        (SELECT FIRST 1 BAR."BARCODE" FROM "BARCODE" BAR WHERE BAR.SIMPLE_ID = SIMPLE.ID ), 
        CASE WHEN OLD_OUT_EL.KOL<>0 THEN ROUND5(OLD_OUT_EL.SUMA_SR / OLD_OUT_EL.KOL) ELSE 0 END 
    FROM 
        OPR_ANUL INNER JOIN OLD_OUT_EL ON (OPR_ANUL.AN_OPR_ID = :P_ID AND OLD_OUT_EL.OPR_ID = OPR_ANUL.OPR_ID) 
        INNER JOIN SIMPLE ON OLD_OUT_EL.SIMPLE_ID = SIMPLE.ID 
        LEFT JOIN ME ME1 ON SIMPLE.ME_ID = ME1.ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
    INTO 
        :L_SIMPLE_ID,:CODE,:NAME,:ME,:CENA,:KOL_LIPSA,:SUMA_LIPSA,:KOL_IZLISHAK, 
        :SUMA_IZLISHAK,:ME2,:KOL2_LIPSA,:KOL2_IZLISHAK, :ME_LONG, :BAR_CODE, :L_CENA_SR 
    DO BEGIN 
        IF (P_CL > 0) THEN BEGIN 
            EXECUTE PROCEDURE GET_CENA_CL(:P_CL,:L_SIMPLE_ID) RETURNING_VALUES(L_CENA); 
            SUMA_LIPSA = ROUNDD(L_CENA * KOL_LIPSA); 
            CENA = L_CENA; 
        END 
        IF (P_CL = -1) THEN BEGIN 
            SUMA_LIPSA = ROUNDD(L_CENA_SR * KOL_LIPSA); 
            CENA = L_CENA_SR; 
        END 
 
        SUSPEND; 
    END 
END;^


ALTER PROCEDURE GET_SPR_IZP_OPR (
    P_FILTER VARCHAR(1000),
    P_TIP INTEGER)
RETURNS (
    IZP_ID INTEGER,
    ID INTEGER,
    OPR_DATE DATE,
    USER_ID INTEGER,
    SUMA DOUBLE PRECISION,
    USERNAME VARCHAR(30),
    OT_SKLAD VARCHAR(20),
    KLINAME VARCHAR(100),
    KLI_ID INTEGER,
    IZPNAME VARCHAR(30),
    SUMA_SR DOUBLE PRECISION,
    SUMA_FR DOUBLE PRECISION,
    DATETIME TIMESTAMP,
    TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    OBEKT_NAME VARCHAR(20),
    R_IS_LOCK INTEGER,
    R_OPR_TIP INTEGER,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    FKT_OPR_ID INTEGER,
    R_SUMA_CL DOUBLE PRECISION,
    R_ANUL_TIP TYPE OF DOM_KEY_SMALL)
AS
declare variable L_SUMA double precision; 
declare variable L_KOL double precision; 
declare variable L_SIMPLE_ID integer; 
declare variable L_CENA double precision; 
declare variable L_OUT_EL_ID integer; 
declare variable L_CENA_CL double precision; 
BEGIN 
 
FOR EXECUTE STATEMENT 
    'SELECT 
        IZP.ID, 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.USER_ID, 
        OPR.SUMA, 
        "USER".NAME, 
        SKLAD.NAME, 
        KLI.NAME, 
        KLI.ID AS KLI_ID, 
        IZP_TIP.NAME AS IZPNAME, 
        OPR_SUMI.SUMA_SR, 
        OPR_SUMI.SUMA_FR, 
        OPR.DATETIME, 
        OBEKT.NAME AS OBEKT_NAME, 
        OPR.IS_LOCK, 
        opr.opr_tip, 
        real_izp_fakt_izp_node.fakt_opr_id 
    FROM 
        OPR INNER JOIN IZP ON OPR.ID = IZP.OPR_ID 
        INNER JOIN "USER" ON OPR.USER_ID = "USER".ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
        INNER JOIN IZP_TIP ON IZP.IZP_TIP_ID = IZP_TIP.ID 
        INNER JOIN OPR_SUMI ON OPR_SUMI.OPR_ID = OPR.ID 
        LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
        LEFT JOIN OBEKT ON OBEKT.ID = SKLAD.OBEKT_ID 
        LEFT JOIN real_izp_fakt_izp_node on real_izp_fakt_izp_node.real_opr_id = opr.id 
    WHERE ' 
 
        || :P_FILTER || '(1=1) 
    ORDER BY 1' 
    INTO :IZP_ID, :ID, :OPR_DATE, :USER_ID, :L_SUMA, :USERNAME, :OT_SKLAD, :KLINAME, 
         :KLI_ID, :IZPNAME, :SUMA_SR, :SUMA_FR, :DATETIME, :OBEKT_NAME,:r_is_lock,:r_opr_tip, :FKT_OPR_ID 
DO 
BEGIN 
  if (P_TIP = 1) then 
    L_SUMA = 0; 
  R_SUMA_CL = 0; 
  r_lock_dt = null; 
  r_lock_user_name = null; 
 
  TEXT = NULL; 
 
  IF (EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID =:ID)) THEN 
    R_ANUL_TIP = 1; 
  ELSE 
    IF (EXISTS (SELECT OPR_EDIT.OPR_ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID =:ID)) THEN 
        R_ANUL_TIP = 2; 
    ELSE 
        R_ANUL_TIP = 0; 
 
  SELECT FIRST 1 
    COMMENTS.NOTE 
  FROM 
    COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
  WHERE 
    COMMENT_OPR_NODE.OPR_ID = :ID 
  ORDER BY 
    COMMENT_OPR_NODE.ID DESC 
  INTO :TEXT; 
 
  select first 1 
    lock_opr.dt, 
    us_l.name 
  from lock_opr 
  join lock_opr_el on lock_opr_el.lock_id = lock_opr.id and lock_opr_el.opr_id = :ID 
  join "USER" us_l on us_l.id = lock_opr.user_id 
  order by lock_opr.dt desc 
  into :r_lock_dt,:r_lock_user_name; 
 
  FOR 
        SELECT 
            OUT_EL.SIMPLE_ID, 
            OUT_EL.KOL, 
            OUT_EL.ID 
        FROM 
            OUT_EL WHERE OUT_EL.OPR_ID =:ID 
 
        UNION ALL 
 
        SELECT 
            OLD_OUT_EL.SIMPLE_ID, 
            OLD_OUT_EL.KOL, 
            OLD_OUT_EL.ID 
        FROM 
            OLD_OUT_EL WHERE OLD_OUT_EL.OPR_ID = (SELECT FIRST 1 OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID =:ID order by 1 DESC) 
 
        INTO :L_SIMPLE_ID, :L_KOL, :L_OUT_EL_ID 
    DO BEGIN 
        L_CENA_CL = 0; 
 
        IF (P_TIP = 1) THEN 
        BEGIN 
          L_CENA = 0; 
 
          EXECUTE PROCEDURE GET_CENA_CL_OS(:L_SIMPLE_ID) RETURNING_VALUES (:L_CENA); 
 
          L_SUMA = L_SUMA + (L_CENA * L_KOL); 
        END 
 
        SELECT 
            PROD_CENI_EL.CENA_CL 
        FROM 
            PROD_CENI_EL 
        WHERE 
            PROD_CENI_EL.OUT_EL_ID =:L_OUT_EL_ID 
        INTO :L_CENA_CL; 
 
        R_SUMA_CL = COALESCE(R_SUMA_CL,0) + ROUNDD(L_CENA_CL * L_KOL); 
 
        SUMA = COALESCE(L_SUMA, 0); 
    END 
    SUSPEND; 
  END 
END^


ALTER PROCEDURE GET_SPR_IZP_SIM (
    P_TIP TYPE OF DOM_SMAL_INT,
    OPR_ID TYPE OF DOM_KEY)
RETURNS (
    CODE TYPE OF DOM_CHAR_50,
    NAME TYPE OF DOM_CHAR_100,
    SIMPLE_ID TYPE OF DOM_KEY,
    ME CHAR(2),
    KOL TYPE OF DOM_KOL,
    CENA TYPE OF DOM_CENA,
    SUMA TYPE OF DOM_SUMA,
    SUMA_SR TYPE OF DOM_SUMA,
    SUMA_FR TYPE OF DOM_SUMA,
    GR_NAME TYPE OF DOM_CHAR_50,
    CODE2 TYPE OF DOM_CHAR_50,
    R_CENA_CL TYPE OF DOM_CENA,
    R_SUMA_CL TYPE OF DOM_SUMA)
AS
declare variable L_CENA type of DOM_CENA; 
declare variable L_OUT_EL_ID type of DOM_KEY; 
BEGIN 
FOR 
    SELECT 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        SIMPLE.ID AS SIMPLE_ID, 
        ME.NAME AS ME, 
        OUT_EL.KOL, 
        OUT_EL.SUMA / OUT_EL.KOL AS CENA, 
        OUT_EL.SUMA, 
        OUT_EL.SUMA_SR, 
        OUT_EL.SUMA_FR, 
        SELEKCIQ.NAME AS GR_NAME, 
        SIMPLE.CODE2, 
        OUT_EL.ID 
    FROM 
        OUT_EL LEFT JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
    WHERE 
        OUT_EL.OPR_ID = :OPR_ID AND 
        OUT_EL.KOL > 0 
 
    UNION ALL 
 
    SELECT 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        SIMPLE.ID AS SIMPLE_ID, 
        ME.NAME AS ME, 
        OUT_EL.KOL, 
        OUT_EL.SUMA / OUT_EL.KOL AS CENA, 
        OUT_EL.SUMA, 
        OUT_EL.SUMA_SR, 
        OUT_EL.SUMA_FR, 
        SELEKCIQ.NAME AS GR_NAME, 
        SIMPLE.CODE2, 
        OUT_EL.ID 
    FROM 
        OLD_OUT_EL OUT_EL INNER JOIN OPR_ANUL ON OPR_ANUL.OPR_ID = OUT_EL.OPR_ID 
        LEFT JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
    WHERE 
        OPR_ANUL.AN_OPR_ID = :OPR_ID AND 
        OUT_EL.KOL > 0 
    INTO :CODE, :NAME, :SIMPLE_ID, :ME, :KOL, :CENA, :SUMA, :SUMA_SR, :SUMA_FR, :GR_NAME, :CODE2, :L_OUT_EL_ID 
    DO BEGIN 
    IF (P_TIP = 1) THEN 
    BEGIN 
        L_CENA = 0; 
        SELECT 
            CENOVA_LISTA_EL.CENA 
        FROM 
            CENOVA_LISTA_EL 
        WHERE CENOVA_LISTA_EL.SIMPLE_ID =:SIMPLE_ID AND CENOVA_LISTA_EL.OPR_ID = (SELECT CENOVA_LISTA.OPR_ID FROM CENOVA_LISTA WHERE CENOVA_LISTA.DEF = 1) 
        INTO :L_CENA; 
        CENA = COALESCE(L_CENA, 0); 
        SUMA = CENA * KOL; 
    END 
    SELECT 
        PROD_CENI_EL.CENA_CL 
    FROM 
        PROD_CENI_EL 
    WHERE 
        PROD_CENI_EL.OUT_EL_ID =:L_OUT_EL_ID 
    INTO :R_CENA_CL; 
 
    R_SUMA_CL = ROUNDD(COALESCE(R_CENA_CL,0) * KOL); 
 
    SUSPEND; 
END 
END^


ALTER PROCEDURE GET_SPR_KONS_OPR (
    P_FILTER VARCHAR(1000))
RETURNS (
    ID INTEGER,
    OPR_DATE DATE,
    USER_ID SMALLINT,
    KONS_ID INTEGER,
    SUMA_FR DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    SUMA_SR DOUBLE PRECISION,
    USERNAME VARCHAR(30),
    OT_SKLAD TYPE OF DOM_CHAR_50,
    W_SKLAD TYPE OF DOM_CHAR_50,
    TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DATETIME TIMESTAMP,
    R_IS_LOCK INTEGER,
    R_OPR_TIP INTEGER,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100))
AS
BEGIN 
FOR EXECUTE STATEMENT 
'SELECT 
    OPR1.ID, 
    OPR1.OPR_DATE AS OPR_DATE, 
    OPR1.USER_ID, 
    kons.ID AS MOVE_ID, 
    OPR_SUMI.SUMA_FR, 
    OPR_SUMI.SUMA_SR, 
    US.NAME AS USERNAME, 
    SKLAD_OT.NAME AS OT_SKLAD, 
    SKLAD_W.NAME AS W_SKLAD, 
    OPR1.DATETIME, 
    OPR1.IS_LOCK, 
    opr1.opr_tip, 
    kli.id as kli_id, 
    kli.name as kli_name 
FROM OPR OPR1 
JOIN konsignacia kons ON OPR1.ID = kons.opr_out_id 
JOIN OPR OPR2 ON OPR2.ID = kons.OPR_IN_ID 
JOIN "USER" us ON OPR1.USER_ID = us.ID 
JOIN SKLAD SKLAD_OT ON SKLAD_OT.ID = OPR1.SKLAD_ID 
JOIN SKLAD SKLAD_W ON SKLAD_W.ID  = OPR2.SKLAD_ID 
JOIN OPR_SUMI ON OPR_SUMI.OPR_ID = OPR1.ID 
join kli on kli.id = opr1.kli_id 
WHERE 
    NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR1.ID) and ' 
    ||coalesce(:P_FILTER,'')|| '(1=1) 
ORDER BY 1' 
    INTO :id,:opr_date,:user_id,:kons_ID, :suma_fr, :suma_sr, :username, :ot_sklad, 
         :w_sklad, :datetime,:r_is_lock,:r_opr_tip,:r_kli_id,:r_kli_name 
DO BEGIN 
  r_lock_dt = null; 
  r_lock_user_name = null; 
 
  TEXT = NULL; 
 
  SELECT SUM(OUT_EL.SUMA) FROM OUT_EL  WHERE  OUT_EL.OPR_ID =:ID INTO :SUMA; 
 
  SELECT FIRST 1 
    COMMENTS.NOTE 
  FROM 
    COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
  WHERE 
    COMMENT_OPR_NODE.OPR_ID = :ID 
  ORDER BY 
    COMMENT_OPR_NODE.ID DESC 
  INTO :TEXT; 
 
  select first 1 
    lock_opr.dt, 
    us_l.name 
  from lock_opr 
  join lock_opr_el on lock_opr_el.lock_id = lock_opr.id and lock_opr_el.opr_id = :ID 
  join "USER" us_l on us_l.id = lock_opr.user_id 
  order by lock_opr.dt desc 
  into :r_lock_dt,:r_lock_user_name; 
 
SUSPEND; 
END 
END^


ALTER PROCEDURE GET_SPR_MOVE_OPR (
    TIP INTEGER,
    P_FILTER VARCHAR(3000),
    P_CL_ID INTEGER)
RETURNS (
    ID INTEGER,
    OPR_DATE DATE,
    USER_ID SMALLINT,
    MOVE_ID INTEGER,
    SUMA_FR DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    SUMA_SR DOUBLE PRECISION,
    USERNAME VARCHAR(30),
    OT_SKLAD TYPE OF DOM_CHAR_50,
    W_SKLAD TYPE OF DOM_CHAR_50,
    TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DATETIME TIMESTAMP,
    R_IS_LOCK INTEGER,
    R_OPR_TIP INTEGER,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    R_STATUS_EDIT INTEGER)
AS
declare variable L_KOL double precision; 
declare variable L_SIMPLE_ID integer; 
declare variable L_CENA double precision; 
BEGIN 
    FOR EXECUTE STATEMENT 
    'SELECT 
        OPR1.ID, 
        OPR1.OPR_DATE, 
        OPR1.USER_ID, 
        MOVE.ID, 
        OPR_SUMI.SUMA_FR, 
        OPR_SUMI.SUMA_SR, 
        "USER".NAME, 
        SKLAD_OT.NAME, 
        SKLAD_W.NAME, 
        OPR1.DATETIME, 
        OPR1.IS_LOCK, 
        OPR1.OPR_TIP 
    FROM 
        OPR OPR1 INNER JOIN MOVE ON OPR1.ID = MOVE.OPR_OUT_ID 
        INNER JOIN OPR OPR2 ON OPR2.ID = MOVE.OPR_IN_ID 
        INNER JOIN "USER" ON OPR1.USER_ID = "USER".ID 
        INNER JOIN SKLAD SKLAD_OT ON SKLAD_OT.ID = OPR1.SKLAD_ID 
        INNER JOIN SKLAD SKLAD_W ON SKLAD_W.ID  = OPR2.SKLAD_ID 
        INNER JOIN OPR_SUMI ON OPR_SUMI.OPR_ID = OPR1.ID 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR1.ID) AND ' 
        ||:P_FILTER|| '(1=1) 
    ORDER BY 1' 
    INTO 
        :ID,:OPR_DATE,:USER_ID,:MOVE_ID,:SUMA_FR,:SUMA_SR,:USERNAME,:OT_SKLAD, 
        :W_SKLAD,:DATETIME,:R_IS_LOCK,:R_OPR_TIP 
    DO BEGIN 
        R_LOCK_DT = NULL; 
        R_LOCK_USER_NAME = NULL; 
 
        TEXT = NULL; 
        R_STATUS_EDIT = 0; 
 
        SELECT FIRST 1 
            COMMENTS.NOTE 
        FROM 
            COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
        WHERE 
            COMMENT_OPR_NODE.OPR_ID = :ID 
        ORDER BY 
            COMMENT_OPR_NODE.ID DESC 
        INTO 
            :TEXT; 
 
        SELECT FIRST 1 
            LOCK_OPR.DT, 
            US_L.NAME 
        FROM 
            LOCK_OPR JOIN LOCK_OPR_EL ON LOCK_OPR_EL.LOCK_ID = LOCK_OPR.ID AND LOCK_OPR_EL.OPR_ID = :ID 
            JOIN "USER" US_L ON US_L.ID = LOCK_OPR.USER_ID 
        ORDER BY LOCK_OPR.DT DESC 
        INTO 
            :R_LOCK_DT,:R_LOCK_USER_NAME; 
 
        IF (TIP = 0) THEN 
            SUMA = :SUMA_SR; 
        ELSE IF (TIP = 1) THEN BEGIN 
            SELECT 
                SUM(OUT_EL.SUMA) 
            FROM 
                OUT_EL 
            WHERE 
                OUT_EL.OPR_ID = :ID 
            INTO 
                :SUMA; 
        END 
        ELSE IF (TIP = 2) THEN BEGIN 
            SUMA = 0; 
            FOR SELECT 
                OUT_EL.KOL, 
                OUT_EL.SIMPLE_ID 
            FROM 
                OUT_EL 
            WHERE 
                OUT_EL.OPR_ID = :ID 
            INTO 
                :L_KOL,:L_SIMPLE_ID 
            DO BEGIN 
                EXECUTE PROCEDURE GET_CENA_CL(:P_CL_ID,:L_SIMPLE_ID) 
                RETURNING_VALUES(L_CENA); 
                SUMA = SUMA + COALESCE(:L_KOL*:L_CENA,0.00); 
            END 
        END 
 
        SUMA = COALESCE(SUMA,0.00); 
 
        SELECT FIRST 1 
            2 
        FROM 
            OPR 
        WHERE 
            OPR.ID =:ID 
            AND EXISTS (SELECT OPR_EDIT.ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID =:ID) 
        INTO 
            :R_STATUS_EDIT; 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_SPR_MOVE_SIM (
    TIP TYPE OF DOM_INT,
    OPR_ID TYPE OF DOM_KEY,
    P_CL_ID TYPE OF DOM_KEY)
RETURNS (
    CODE TYPE OF DOM_CHAR_50,
    NAME TYPE OF DOM_CHAR_100,
    ME1 CHAR(2),
    ME2 CHAR(2),
    SIMPLE_ID TYPE OF DOM_KEY,
    KOL TYPE OF DOM_KOL,
    SUMA_SR TYPE OF DOM_SUMA,
    SUMA_FR TYPE OF DOM_SUMA,
    GR_NAME TYPE OF DOM_CHAR_50,
    KOL2 TYPE OF DOM_KOL,
    CODE2 TYPE OF DOM_CHAR_50,
    CENA TYPE OF DOM_CENA,
    SUMA_MOVE TYPE OF DOM_SUMA,
    ME1_ID TYPE OF DOM_KEY,
    ME2_ID TYPE OF DOM_KEY)
AS
declare variable L_CENA type of DOM_CENA; 
declare variable L_SUMA_MUVE type of DOM_SUMA; 
BEGIN 
    FOR SELECT 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        SIMPLE.ID, 
        ME1.NAME, 
        ME2.NAME, 
        OUT_EL.KOL, 
        OUT_EL.SUMA_SR, 
        OUT_EL.SUMA_FR, 
        SELEKCIQ.NAME, 
        OUT_EL2.KOL, 
        SIMPLE.CODE2, 
        CASE 
            WHEN :TIP = 0 THEN CAST(COALESCE(OUT_EL.SUMA_FR/OUT_EL.KOL,0) AS DOUBLE PRECISION) 
            WHEN :TIP = 1 THEN CAST(COALESCE(OUT_EL.SUMA/OUT_EL.KOL,0) AS DOUBLE PRECISION) 
        END, 
        CASE 
            WHEN :TIP = 0 THEN OUT_EL.SUMA_FR 
            WHEN :TIP = 1 THEN OUT_EL.SUMA 
        END, 
        ME1.ID, 
        ME2.ID 
    FROM 
        OUT_EL INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        LEFT JOIN ME ME1 ON ME1.ID = SIMPLE.ME_ID 
        LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
        LEFT JOIN OUT_EL2 ON OUT_EL2.OUT_EL_ID = OUT_EL.ID 
    WHERE 
        OUT_EL.OPR_ID = :OPR_ID 
        AND OUT_EL.KOL > 0 
    INTO 
        :CODE,:NAME,:SIMPLE_ID,:ME1,:ME2,:KOL,:SUMA_SR,:SUMA_FR,:GR_NAME,:KOL2,:CODE2,:CENA, 
        :SUMA_MOVE,:ME1_ID,:ME2_ID 
    DO BEGIN 
 
        IF (TIP = 2) THEN BEGIN 
            EXECUTE PROCEDURE GET_CENA_CL(:P_CL_ID,:SIMPLE_ID) 
            RETURNING_VALUES(L_CENA); 
            SUMA_MOVE = L_CENA * KOL; 
            CENA = L_CENA; 
        END 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_SPR_PRIHOD (
    P_FILTER_PARI_IO VARCHAR(1000),
    P_FROM_DATE VARCHAR(1000),
    TO_DATE VARCHAR(1000),
    P_FILTER_KLI VARCHAR(1000),
    P_FILTER_OBEKTI VARCHAR(1000),
    P_VALUTA SMALLINT,
    FLAG_CRYPT INTEGER,
    PASS VARCHAR(25))
RETURNS (
    PRIH_RAZH_ID INTEGER,
    PRIH_RAZH_NAME VARCHAR(30),
    R_SUMA DOUBLE PRECISION)
AS
DECLARE VARIABLE L_PARI_IO_ID SMALLINT; 
DECLARE VARIABLE L_SUMA_RAZHOD DECIMAL(15,2); 
DECLARE VARIABLE L_SUMA_PRIHOD DECIMAL(15,2); 
DECLARE VARIABLE L_SUMA_NACH_PR DECIMAL(15,2); 
DECLARE VARIABLE L_SUMA_NACH_RAZ DECIMAL(15,2); 
DECLARE VARIABLE L_SUMA_NACH DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_PERIOD DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_SALDO DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_CRYPT NUMERIC(10,2); 
DECLARE VARIABLE L_SUMA_CRYPT_RAZH NUMERIC(10,2); 
DECLARE VARIABLE L_SUMA_CRYPT_PRIH NUMERIC(10,2); 
BEGIN    
  L_SUMA_NACH_PR = 0;    
  L_SUMA_NACH_RAZ = 0;    
  EXECUTE STATEMENT 'SELECT SUM(PARI.SUMA)    
      FROM PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID    
      INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID    
      WHERE     
       PARI.TIP = 1 AND (PARI_IO.SPR_TIP = 0 or PARI_IO.TIP =0) AND OPR.OPR_DATE <''' ||:P_FROM_DATE ||'''AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
       ||:P_FILTER_OBEKTI    
       ||:P_FILTER_KLI ||:P_FILTER_PARI_IO    /*Разход*/    
    
   INTO :L_SUMA_NACH_RAZ;    
    
  EXECUTE STATEMENT 'SELECT SUM(PARI.SUMA)    
      FROM PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID    
      INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID    
       WHERE     
       PARI.TIP = 0 AND (PARI_IO.SPR_TIP = 0 or PARI_IO.TIP =0) AND OPR.OPR_DATE <''' ||:P_FROM_DATE ||'''AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
       ||:P_FILTER_OBEKTI    
       ||:P_FILTER_KLI ||:P_FILTER_PARI_IO  /*Приход*/    
   INTO :L_SUMA_NACH_PR;    
    
   L_SUMA_CRYPT = 0;  
  if (FLAG_CRYPT = 1) then  
  BEGIN  
   EXECUTE STATEMENT 'SELECT SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2)))  
      FROM PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID  
      INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID    
      WHERE     
       PARI.TIP = 1 AND (PARI_IO.SPR_TIP = 0 or PARI_IO.TIP =0) AND OPR.OPR_DATE <''' ||:P_FROM_DATE ||'''AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
       ||:P_FILTER_OBEKTI    
       ||:P_FILTER_KLI ||:P_FILTER_PARI_IO    /*Разход криптирана каса*/  
    
   INTO :L_SUMA_CRYPT_RAZH;  
  
   EXECUTE STATEMENT 'SELECT SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2)))  
      FROM PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID  
      INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID    
      WHERE     
       PARI.TIP = 0 AND (PARI_IO.SPR_TIP = 0 or PARI_IO.TIP =0) AND OPR.OPR_DATE <'''|| :P_FROM_DATE ||'''AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
       ||:P_FILTER_OBEKTI    
       ||:P_FILTER_KLI ||:P_FILTER_PARI_IO  /*Приход криптирана каса*/  
   INTO :L_SUMA_CRYPT_PRIH;  
  
   L_SUMA_CRYPT =COALESCE(L_SUMA_CRYPT_PRIH, 0) - coalesce(L_SUMA_CRYPT_RAZH, 0);  
  
   END  
   L_SUMA_NACH = COALESCE(L_SUMA_NACH_PR,0) - COALESCE(L_SUMA_NACH_RAZ,0) + L_SUMA_CRYPT;  
   R_SUMA = L_SUMA_NACH;    
   PRIH_RAZH_ID = NULL;    
   PRIH_RAZH_NAME = 'Начално салдо';    
   SUSPEND;    
    
 PRIH_RAZH_NAME = NULL;    
    
 FOR EXECUTE STATEMENT 'SELECT    
                           PARI_IO.ID,    
                           PARI_IO.NAME    
                        FROM    
                           PARI_IO   
                        WHERE    
                        (PARI_IO.SPR_TIP = 0 or PARI_IO.TIP =0)'||:P_FILTER_PARI_IO||' 
                        ORDER BY 2' 
                        INTO :L_PARI_IO_ID, :PRIH_RAZH_NAME    
 DO BEGIN    
  EXECUTE STATEMENT 'SELECT SUM(PARI.SUMA)   
      FROM PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID    
      INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID    
      WHERE     
       PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 1   
       AND OPR.OPR_DATE>'''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA   
       ||:P_FILTER_OBEKTI ||:P_FILTER_KLI /*Разход*/   
   INTO :L_SUMA_RAZHOD;   
    
   EXECUTE STATEMENT 'SELECT SUM(PARI.SUMA)   
      FROM PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID    
      INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID    
      WHERE     
       PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 0   
       AND OPR.OPR_DATE>'''||:P_FROM_DATE||'''AND OPR.OPR_DATE <= '''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA   
       ||:P_FILTER_OBEKTI    
       ||:P_FILTER_KLI/*Приход*/   
   INTO :L_SUMA_PRIHOD;   
  
   L_SUMA_CRYPT = 0;  
   if (FLAG_CRYPT = 1) then  
   begin  
   EXECUTE STATEMENT 'SELECT SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2)))  
      FROM PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID  
      INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID    
      WHERE     
       PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 1   
       AND OPR.OPR_DATE>'''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA   
       ||:P_FILTER_OBEKTI ||:P_FILTER_KLI /*Разход криптирана каса*/  
   INTO :L_SUMA_CRYPT_RAZH;  
    
  EXECUTE STATEMENT 'SELECT SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2)))  
      FROM PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID  
      INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID    
      WHERE     
       PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 0   
       AND OPR.OPR_DATE>'''||:P_FROM_DATE||'''AND OPR.OPR_DATE <= '''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA   
       ||:P_FILTER_OBEKTI    
       ||:P_FILTER_KLI/*Приход криптирана каса*/  
   INTO :L_SUMA_CRYPT_PRIH;  
   L_SUMA_CRYPT = COALESCE(L_SUMA_CRYPT_PRIH, 0) - COALESCE(L_SUMA_CRYPT_RAZH, 0);  
  
   end  
 
   R_SUMA = COALESCE(L_SUMA_PRIHOD,0) - COALESCE(L_SUMA_RAZHOD,0) + L_SUMA_CRYPT; 
   L_SUMA_PERIOD = COALESCE(L_SUMA_PERIOD,0) + R_SUMA; 
   PRIH_RAZH_ID = L_PARI_IO_ID;    
   SUSPEND;    
   END 
    
  L_SUMA_SALDO = L_SUMA_NACH + L_SUMA_PERIOD;  
  PRIH_RAZH_ID = NULL;    
  PRIH_RAZH_NAME = 'Крайно салдо';    
  R_SUMA = L_SUMA_SALDO;    
  SUSPEND;    
END^


ALTER PROCEDURE GET_SPR_PROD (
    P_OPR_TIP SMALLINT,
    P_GET_RET_STOKA SMALLINT,
    P_FILTER VARCHAR(1000),
    P_FLAG_ANNUL INTEGER,
    P_SUMA_TIP SMALLINT,
    P_SEL_SIMPLE_ID INTEGER,
    P_SEL_KLI_ID INTEGER,
    P_FLAG_FILTER_KLI_NULL SMALLINT,
    P_COLUMN_SKLAD TYPE OF DOM_SMAL_INT)
RETURNS (
    R_ID INTEGER,
    R_OUT_ID INTEGER,
    R_DATETIME DATE,
    R_KLI_ID INTEGER,
    R_SUMA DOUBLE PRECISION,
    R_USER_ID SMALLINT,
    R_SKLAD_ID SMALLINT,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_SUMA_CL DOUBLE PRECISION,
    R_FP SMALLINT,
    R_PAY_TIP_2 SMALLINT,
    R_KLI VARCHAR(100),
    R_USERNAME VARCHAR(30),
    R_SKLAD VARCHAR(20),
    R_SUMA_RAZLIKA DOUBLE PRECISION,
    R_NADCENKA DOUBLE PRECISION,
    R_NUMBER VARCHAR(10),
    R_IS_FAKTURA SMALLINT,
    R_FROM_POCKET CHAR(1),
    R_DIST_SUMA DOUBLE PRECISION,
    R_DIST_PAY SMALLINT,
    R_SUMA_OSTATAK DOUBLE PRECISION,
    R_FAK_TOTAL DOUBLE PRECISION,
    R_SYSDATE TIMESTAMP,
    R_SUMA_RAZLIKA_FR DOUBLE PRECISION,
    R_NADCENKA_FR DOUBLE PRECISION,
    R_STATUS SMALLINT,
    R_OTKL_CL SMALLINT,
    R_SUMA_OS DOUBLE PRECISION,
    R_PROC_OTS_CL DOUBLE PRECISION,
    R_PROC_OTS_OS DOUBLE PRECISION,
    R_RAZLIKA_CL DOUBLE PRECISION,
    R_RAZLIKA_OS DOUBLE PRECISION,
    R_DIST_NAME VARCHAR(500),
    R_KLI_CODE VARCHAR(15),
    R_OBEKT_ID SMALLINT,
    R_IS_LOCK SMALLINT,
    R_OPT_TIP INTEGER,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    R_TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_REQUIRE_FAKT INTEGER,
    R_KLI_AGENT_ID SMALLINT,
    R_KLI_AGENT VARCHAR(50),
    R_SUMA_BEZ_DDS DOUBLE PRECISION,
    R_SUMA_DDS DOUBLE PRECISION,
    R_FAK_DATE DATE,
    R_FLAG_UNCOLLECT SMALLINT,
    R_SUMA_OS_NETO TYPE OF DOM_SUMA,
    R_SUMA_CL_NETO TYPE OF DOM_SUMA,
    R_PAY_TIP_NAME TYPE OF DOM_CHAR_50,
    R_POR_NUM TYPE OF DOM_CHAR_30,
    R_TS_SMETKA_ID INTEGER,
    R_FAK_OPR_ID TYPE OF DOM_KEY,
    R_PERCENT_DIST TYPE OF DOM_SMAL_INT)
AS
declare variable L_COUNTER1 integer;
declare variable L_COUNTER2 integer;
declare variable L_SQL varchar(2300);
declare variable L_DIST_NAME varchar(50);
declare variable L_SUMA double precision;
declare variable L_SUMA_IZL double precision;
declare variable L_OPR_ID integer;
declare variable L_SQL_RET varchar(2048);
declare variable L_SQL_FILTER_SIMPLE varchar(1000);
declare variable L_SQL_FILTER_KLI varchar(1000);
declare variable L_TIP_CENI_DDS integer;
declare variable L_SUMA_B_OTS double precision;
declare variable L_CNT_PAYMENT type of DOM_INT;
BEGIN 
  /*V.3*/ 
    L_SQL = ' 
    WITH OPR_T AS( 
    SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.KLI_ID, 
        OPR.SUMA, 
        OPR.USER_ID, 
        OPR.SKLAD_ID, 
        OPR_SUMI.SUMA_SR, 
        OPR_SUMI.SUMA_FR, 
        OPR.DATETIME, 
        OPR.IS_LOCK, 
        OPR.OPR_TIP, 
        OPR.ID AS PROD_OPR_ID 
    FROM 
        OPR INNER JOIN OPR_SUMI ON OPR_SUMI.OPR_ID = OPR.ID 
        AND OPR.OPR_TIP =  ' || :P_OPR_TIP || ' 
    WHERE 
        OPR.SKLAD_ID IS NOT NULL AND ' 
        || CAST(:P_FILTER AS VARCHAR(1000)) || ' 
        (1=1) 
 
    UNION 
 
    SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.KLI_ID, 
        OPR.SUMA, 
        OPR.USER_ID, 
        OPR.SKLAD_ID, 
        OPR_SUMI.SUMA_SR, 
        OPR_SUMI.SUMA_FR, 
        OPR.DATETIME, 
        OPR.IS_LOCK, 
        OPR.OPR_TIP, 
        PROD_NODE.OPR_PROD_ID 
    FROM 
        OPR INNER JOIN PROD_NODE ON PROD_NODE.OPR_SUB_PROD_ID = OPR.ID AND ' || :P_OPR_TIP || '= 2 
        INNER JOIN OPR_SUMI ON OPR_SUMI.OPR_ID = PROD_NODE.OPR_SUB_PROD_ID 
    WHERE 
    ' || CAST(:P_FILTER AS VARCHAR(1000)) || ' 
        (1=1) 
    ) 
 
    SELECT 
        OPR_T.ID, 
        OPR_T.OPR_DATE, 
        OPR_T.KLI_ID, 
        OPR_T.SUMA, 
        OPR_T.USER_ID, 
        OPR_T.SKLAD_ID, 
        "USER".NAME, 
        OUT.ID, 
        OPR_T.SUMA_SR, 
        OPR_T.SUMA_FR, 
        OUT.FP, 
        OUT.PSHOP, 
        OUT.PAY_TIP, 
        OPR_T.DATETIME, 
        OUT.OTKLONENIE, 
        OUT.OBEKT_ID, 
        OPR_T.IS_LOCK, 
        OPR_T.OPR_TIP, 
        OUT.REQUIRE_FAKT, 
        OUT.KLI_AGENT_ID, 
        OUT.FLAG_UNCOLLECT, 
        OUT.POR_NUM, 
        OUT.TS_SMETKA_ID 
    FROM 
        OPR_T INNER JOIN "USER" ON OPR_T.USER_ID = "USER".ID 
        INNER JOIN OUT ON OUT.OPR_ID = OPR_T.PROD_OPR_ID 
    WHERE '; 
 
    IF (P_FLAG_ANNUL = 0) THEN 
        L_SQL = L_SQL ||    ' NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR_T.ID)'; 
    ELSE 
        L_SQL = L_SQL || ' 1=1 '; 
 
    IF (COALESCE(P_SEL_SIMPLE_ID,0)<=0) THEN 
        L_SQL_FILTER_SIMPLE = ''; 
    ELSE 
        L_SQL_FILTER_SIMPLE = ' AND 
        (EXISTS( 
        SELECT 
            OUT_EL.ID 
        FROM 
            OUT_EL INNER JOIN SEL_SIM_QR ON SEL_SIM_QR.SIMPLE_ID = OUT_EL.SIMPLE_ID 
        WHERE 
            SEL_SIM_QR.SEL_ID = ' || :P_SEL_SIMPLE_ID || ' 
            AND OUT_EL.OPR_ID = OPR_T.ID))'; 
 
 
    IF (P_FLAG_FILTER_KLI_NULL = 0) THEN BEGIN 
        IF (COALESCE(P_SEL_KLI_ID,0) <= 0) THEN 
            L_SQL_FILTER_KLI = ''; 
        ELSE 
            L_SQL_FILTER_KLI = ' AND 
            (EXISTS( 
            SELECT 
                SEL_KLI_QR.KLI_ID 
            FROM 
                SEL_KLI_QR 
            WHERE 
                SEL_KLI_QR.SEL_ID = ' || :P_SEL_KLI_ID || ' 
                AND OPR_T.KLI_ID = SEL_KLI_QR.KLI_ID 
            )) '; 
    END 
    ELSE BEGIN 
        IF (COALESCE(P_SEL_KLI_ID,0) <= 0) THEN 
            L_SQL_FILTER_KLI = ' AND OPR_T.KLI_ID IS NULL '; 
        ELSE 
            L_SQL_FILTER_KLI = ' AND 
            (EXISTS( 
            SELECT 
                SEL_KLI_QR.KLI_ID 
            FROM 
                SEL_KLI_QR 
            WHERE 
                SEL_KLI_QR.SEL_ID = ' || :P_SEL_KLI_ID || ' 
                AND OPR_T.KLI_ID = SEL_KLI_QR.KLI_ID 
            ) OR OPR_T.KLI_ID IS NULL) '; 
 
    END 
 
    FOR EXECUTE STATEMENT L_SQL || L_SQL_FILTER_SIMPLE || L_SQL_FILTER_KLI 
    INTO 
        :R_ID,:R_DATETIME,:R_KLI_ID,:R_SUMA,:R_USER_ID,:R_SKLAD_ID,:R_USERNAME, 
        :R_OUT_ID,:R_SUMA_SR,:R_SUMA_FR,:R_FP,:R_FROM_POCKET, 
        :R_PAY_TIP_2,:R_SYSDATE, :R_OTKL_CL,:R_OBEKT_ID, :R_IS_LOCK,:R_OPT_TIP,:R_REQUIRE_FAKT,:R_KLI_AGENT_ID,:R_FLAG_UNCOLLECT,:R_POR_NUM,:R_TS_SMETKA_ID 
    DO BEGIN 
        R_SKLAD = 'С подпродажби'; 
        R_LOCK_DT = NULL; 
        R_LOCK_USER_NAME = NULL; 
        R_TEXT = NULL; 
 
        SELECT FIRST 1 
            COMMENTS.NOTE 
        FROM 
            COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
        WHERE 
            COMMENT_OPR_NODE.OPR_ID = :R_ID 
        ORDER BY 
            COMMENT_OPR_NODE.ID DESC 
        INTO :R_TEXT; 
 
        SELECT FIRST 1 
            LOCK_OPR.DT, 
            US_L.NAME 
        FROM LOCK_OPR 
            JOIN LOCK_OPR_EL ON LOCK_OPR_EL.LOCK_ID = LOCK_OPR.ID AND LOCK_OPR_EL.OPR_ID = :R_ID 
            JOIN "USER" US_L ON US_L.ID = LOCK_OPR.USER_ID 
        ORDER BY LOCK_OPR.DT DESC 
            INTO :R_LOCK_DT, :R_LOCK_USER_NAME;
 
        IF (R_SKLAD_ID IS NOT NULL) THEN BEGIN 
            SELECT 
                SKLAD.NAME 
            FROM 
                SKLAD 
            WHERE 
                SKLAD.ID = :R_SKLAD_ID 
            INTO :R_SKLAD;
        END
 
        IF (EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = :R_ID)) THEN 
            R_STATUS = 2; 
        ELSE IF (EXISTS (SELECT OPR_EDIT.ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID = :R_ID)) THEN 
            R_STATUS = 1; 
        ELSE 
            R_STATUS = 0; 
 
        R_KLI = NULL; 
        R_KLI_CODE = NULL; 
        SELECT 
            KLI.NAME, 
            KLI.CODE 
        FROM 
            KLI 
        WHERE 
            KLI.ID = :R_KLI_ID 
        INTO 
            :R_KLI, :R_KLI_CODE; 
 
        R_KLI_AGENT = NULL; 

        IF (R_KLI_AGENT_ID IS NOT NULL) THEN
            SELECT 
                KLI_AGENTS.NAME 
            FROM 
                KLI_AGENTS 
            WHERE 
                KLI_AGENTS.ID = :R_KLI_AGENT_ID 
            INTO :R_KLI_AGENT;
 
        SELECT 
            SUM(GET_SUMA_IZL.R_SUMA_IZL) 
        FROM 
            GET_SUMA_IZL(:L_OPR_ID) 
        INTO 
            :L_SUMA_IZL; 
 
        --IF (P_SUMA_TIP = 0) THEN 
        --    EXECUTE PROCEDURE GET_SUMI_PROD(:R_ID,2) RETURNING_VALUES(:R_SUMA_CL,:R_SUMA_OS,:L_SUMA,:R_SUMA_BEZ_DDS,:R_SUMA_OS_NETO,:R_SUMA_CL_NETO); 
        IF (P_SUMA_TIP = 0)  THEN 
            EXECUTE PROCEDURE GET_SUMI_PROD(:R_ID, 0) RETURNING_VALUES(:R_SUMA_CL, :R_SUMA_OS, :L_SUMA, :R_SUMA_BEZ_DDS, :R_SUMA_OS_NETO, :R_SUMA_CL_NETO);
        IF (P_SUMA_TIP = 1) THEN 
            IF ((R_FP IN (1,2,3)) OR (R_REQUIRE_FAKT = 1)) THEN 
                EXECUTE PROCEDURE GET_SUMI_PROD(:R_ID, 0) RETURNING_VALUES(:R_SUMA_CL, :R_SUMA_OS, :L_SUMA, :R_SUMA_BEZ_DDS, :R_SUMA_OS_NETO, :R_SUMA_CL_NETO);
            ELSE 
                EXECUTE PROCEDURE GET_SUMI_PROD(:R_ID, 2) RETURNING_VALUES(:R_SUMA_CL, :R_SUMA_OS, :L_SUMA, :R_SUMA_BEZ_DDS, :R_SUMA_OS_NETO, :R_SUMA_CL_NETO);
 
        SELECT FIRST 1 
            LOG_CENI_DDS.TIP_CENI 
        FROM 
            LOG_CENI_DDS 
        WHERE 
            LOG_CENI_DDS.TIP_DDS = 0
        ORDER BY LOG_CENI_DDS.DATETIME DESC 
        INTO :L_TIP_CENI_DDS; 
 
        R_SUMA = ROUND(L_SUMA, 2);
 
        IF (COALESCE(:L_TIP_CENI_DDS, 0) = 1) THEN
            L_SUMA_B_OTS = R_SUMA;
        ELSE 
            L_SUMA_B_OTS = R_SUMA_BEZ_DDS;
 
        --IF (P_SUMA_TIP = 0) THEN 
        --    R_SUMA_BEZ_DDS =:R_SUMA; 

        IF (P_SUMA_TIP = 1) THEN BEGIN
            IF ((R_FP IN (1,2,3)) OR (R_REQUIRE_FAKT = 1)) THEN 
                R_SUMA_BEZ_DDS = R_SUMA_BEZ_DDS;
            ELSE 
                R_SUMA_BEZ_DDS = R_SUMA;
        END
 
        R_SUMA_DDS = R_SUMA - R_SUMA_BEZ_DDS; 
 
        R_SUMA_SR = R_SUMA_SR + COALESCE(:L_SUMA_IZL,0); 
 
        R_SUMA_RAZLIKA = ROUND(:L_SUMA_B_OTS - R_SUMA_SR,2); 
 
        IF (R_SUMA_SR > 0) THEN 
            R_NADCENKA = ROUND((L_SUMA_B_OTS / R_SUMA_SR - 1) * 100, 2);
        ELSE 
            R_NADCENKA = NULL; 
 
        R_SUMA_RAZLIKA_FR = ROUND(L_SUMA_B_OTS - R_SUMA_FR, 2);
 
        IF (R_SUMA_FR > 0) THEN 
            R_NADCENKA_FR = ROUND(((L_SUMA_B_OTS / R_SUMA_FR) - 1) * 100, 2);
        ELSE 
            R_NADCENKA_FR = NULL; 
 
        R_NUMBER = NULL; 
        R_FAK_TOTAL = NULL; 
        R_FAK_DATE = NULL; 
        R_FAK_OPR_ID = NULL; 
 
        SELECT FIRST 1 
            FAK.NUMBER, 
            IIF(FAK.TIP = 4, (SELECT SUM(ROUND(FAK_EL.SUMA_TOTAL * FAK.KURS_VALUTA, 2)) FROM FAK_EL WHERE FAK_EL.OPR_ID = FAK.OPR_ID), FAK.TOTAL), 
            OPR.OPR_DATE, 
            FAK.OPR_ID 
        FROM 
            FAK INNER JOIN FAK_PROD ON (FAK_PROD.OPR_ID = :R_ID AND FAK_PROD.FAK_ID = FAK.ID) 
            INNER JOIN OPR ON OPR.ID = FAK.OPR_ID 
        INTO :R_NUMBER, :R_FAK_TOTAL,:R_FAK_DATE, :R_FAK_OPR_ID;
 
        R_IS_FAKTURA = IIF (R_NUMBER IS NULL,0,1); 
 
        R_DIST_SUMA = NULL; 
        SELECT 
            SUM(PARI_DIST.SUMA) 
        FROM 
            PARI_DIST 
        WHERE 
            PARI_DIST.OPR_PROD_ID = :R_ID 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = PARI_DIST.OPR_ID) 
        INTO :R_DIST_SUMA;
 
        R_PERCENT_DIST = NULL; 
        IF (R_SUMA_BEZ_DDS > 0) then 
            R_PERCENT_DIST = ROUND((R_DIST_SUMA / R_SUMA_BEZ_DDS) * 100);
 
        SELECT 
            COUNT(PARI_DIST.ID) 
        FROM 
            PARI_DIST 
        WHERE 
            PARI_DIST.OPR_PROD_ID = :R_ID 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = PARI_DIST.OPR_ID) 
        INTO 
            :L_COUNTER1; 
 
        IF (L_COUNTER1 < 4) THEN BEGIN 
            R_DIST_NAME = ''; 
            L_DIST_NAME = ''; 
            FOR SELECT 
                KLI.NAME 
            FROM 
                PARI_DIST INNER JOIN OPR ON OPR.ID = PARI_DIST.OPR_ID 
                INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            WHERE 
                PARI_DIST.OPR_PROD_ID =:R_ID 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = PARI_DIST.OPR_ID) 
            INTO 
                :L_DIST_NAME 
            DO BEGIN 
                R_DIST_NAME = R_DIST_NAME || L_DIST_NAME || ', ' ;
            END 
        END 
        ELSE BEGIN 
            SELECT FIRST 1 
                KLI.NAME 
            FROM 
                PARI_DIST INNER JOIN OPR ON OPR.ID = PARI_DIST.OPR_ID 
                INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            WHERE 
                PARI_DIST.OPR_PROD_ID = :R_ID
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = PARI_DIST.OPR_ID) 
            INTO :L_DIST_NAME;
            R_DIST_NAME = L_DIST_NAME || '...'; 
        END 
 
        IF (L_COUNTER1 = 0) THEN 
            R_DIST_PAY = -1; 
        ELSE BEGIN 
            SELECT 
                COUNT(PARI_DIST.ID) 
            FROM 
                PARI_DIST 
            WHERE 
                PARI_DIST.OPR_PROD_ID = :R_ID 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = PARI_DIST.OPR_ID) 
            INTO :L_COUNTER1;
 
            SELECT 
                COUNT(PARI_DIST.ID)
            FROM 
                PARI_DIST 
            WHERE 
                PARI_DIST.OPR_PROD_ID = :R_ID AND
                PARI_DIST.PAY_TIP = 1 AND
                NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = PARI_DIST.OPR_ID)
            INTO :L_COUNTER2;
 
            IF (L_COUNTER1 > L_COUNTER2) THEN 
              R_DIST_PAY = 0; 
            ELSE 
              R_DIST_PAY = 1; 
            END 
 
            R_SUMA_OSTATAK = NULL; 
 
            SELECT 
              SUM(SUMI.SUMA_OST) 
            FROM 
              SUMI 
            WHERE 
              SUMI.OPR_ID = :R_ID 
            INTO :R_SUMA_OSTATAK;
 
            R_SUMA_OSTATAK = COALESCE(R_SUMA_OSTATAK, 0);
 
            IF (R_SUMA_CL <> 0) THEN
              R_PROC_OTS_CL = ROUNDD(((R_SUMA / R_SUMA_CL) - 1) * 100);
            ELSE 
              R_PROC_OTS_CL = NULL; 
 
            IF (R_SUMA_OS <> 0) then
              R_PROC_OTS_OS = ROUNDD((R_SUMA / R_SUMA_OS - 1) * 100);
            ELSE 
              R_PROC_OTS_OS = NULL; 
 
            R_RAZLIKA_CL = ROUNDD(R_SUMA - R_SUMA_CL);
            R_RAZLIKA_OS = ROUNDD(R_SUMA - R_SUMA_OS);
 
            R_PAY_TIP_NAME = ''; 
 
            IF (R_PAY_TIP_2 = 3) THEN BEGIN
                SELECT 
                    COUNT(PAYMENT_TIP_ID) 
                FROM 
                ( 
                    SELECT DISTINCT 
                        PAYMENTS_EL.PAYMENT_TIP_ID 
                    FROM 
                        PAYMENTS_EL INNER JOIN CFG_PAYMENTS ON CFG_PAYMENTS.ID = PAYMENTS_EL.PAYMENT_TIP_ID 
                        INNER JOIN PAYMENT ON PAYMENTS_EL.PAYMENT_ID = PAYMENT.ID 
                        INNER JOIN SUMI SUMI_PAY ON SUMI_PAY.OPR_ID = PAYMENT.OPR_ID 
                        INNER JOIN OPR_PAYMENT_NODE ON OPR_PAYMENT_NODE.PAYMENT_ID = SUMI_PAY.ID 
                        INNER JOIN SUMI ON SUMI.ID = OPR_PAYMENT_NODE.OPR_ID 
                        INNER JOIN OPR ON SUMI.OPR_ID = OPR.ID 
                    WHERE 
                        OPR.ID = :R_ID AND
                        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID)
                )
                INTO :L_CNT_PAYMENT;
 
                IF (L_CNT_PAYMENT > 1) THEN R_PAY_TIP_NAME = 'СМЕСЕН'; ELSE BEGIN
                    SELECT DISTINCT 
                        CFG_PAYMENTS.NAME 
                    FROM 
                        PAYMENTS_EL
                        INNER JOIN CFG_PAYMENTS ON CFG_PAYMENTS.ID = PAYMENTS_EL.PAYMENT_TIP_ID 
                        INNER JOIN PAYMENT ON PAYMENTS_EL.PAYMENT_ID = PAYMENT.ID 
                        INNER JOIN SUMI SUMI_PAY ON SUMI_PAY.OPR_ID = PAYMENT.OPR_ID 
                        INNER JOIN OPR_PAYMENT_NODE ON OPR_PAYMENT_NODE.PAYMENT_ID = SUMI_PAY.ID 
                        INNER JOIN SUMI ON SUMI.ID = OPR_PAYMENT_NODE.OPR_ID 
                        INNER JOIN OPR ON SUMI.OPR_ID = OPR.ID 
                    WHERE 
                        OPR.ID = :R_ID AND
                        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                    INTO :R_PAY_TIP_NAME; 
                END 
        END
        ELSE IF (R_PAY_TIP_2 IN (0,2)) THEN R_PAY_TIP_NAME = 'В БРОЙ'; 

        IF (COALESCE(R_POR_NUM, '') = '') THEN BEGIN
            SELECT
                POR.NOMER
            FROM
                POR
                INNER JOIN POR_OUT_NODE ON POR_OUT_NODE.POR_ID = POR.ID AND POR_OUT_NODE.OUT_ID = :R_OUT_ID
                INTO :R_POR_NUM;
        END

        SUSPEND;
    END 
 
    IF (P_GET_RET_STOKA = 1) THEN BEGIN 
        IF (P_OPR_TIP = 2) THEN BEGIN 
            L_SQL_RET =  'AND SKLAD.ID <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM)' ; 
        END 
        ELSE BEGIN 
            L_SQL_RET =  'AND SKLAD.ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) '; 
        END 
 
        IF (COALESCE(P_SEL_SIMPLE_ID,0)<=0) THEN 
            L_SQL_FILTER_SIMPLE = ''; 
        ELSE 
            L_SQL_FILTER_SIMPLE = ' AND ( 
                (EXISTS( 
                    SELECT 
                        IN_EL.ID 
                    FROM 
                        IN_EL INNER JOIN SEL_SIM_QR ON SEL_SIM_QR.SIMPLE_ID = IN_EL.SIMPLE_ID 
                    WHERE 
                        SEL_SIM_QR.SEL_ID = ' || :P_SEL_SIMPLE_ID || ' 
                    AND IN_EL.OPR_ID = OPR.ID)) 
                OR 
                (EXISTS( 
                    SELECT 
                        IN_EL.ID 
                    FROM 
                        IN_EL INNER JOIN SEL_SIM_QR ON SEL_SIM_QR.SIMPLE_ID = IN_EL.SIMPLE_ID 
                        INNER JOIN DOST_NODE ON DOST_NODE.RAZ_DOST_ID = IN_EL.OPR_ID 
                    WHERE 
                        SEL_SIM_QR.SEL_ID = ' || :P_SEL_SIMPLE_ID || ' 
                        AND DOST_NODE.DOST_ID = OPR.ID))) '; 
 
        IF (P_FLAG_FILTER_KLI_NULL = 0) THEN BEGIN 
            IF (COALESCE(P_SEL_KLI_ID,0) <= 0) THEN 
                L_SQL_FILTER_KLI = ''; 
            ELSE 
                L_SQL_FILTER_KLI = ' AND 
                (EXISTS( 
                    SELECT 
                        SEL_KLI_QR.KLI_ID 
                    FROM 
                        SEL_KLI_QR 
                    WHERE 
                        SEL_KLI_QR.SEL_ID = ' || :P_SEL_KLI_ID || ' 
                        AND OPR.KLI_ID = SEL_KLI_QR.KLI_ID 
                    )) '; 
        END 
        ELSE BEGIN 
            IF (COALESCE(P_SEL_KLI_ID,0) <= 0) THEN 
                L_SQL_FILTER_KLI = ' AND OPR.KLI_ID IS NULL '; 
            ELSE 
                L_SQL_FILTER_KLI = ' AND 
                (EXISTS( 
                    SELECT 
                        SEL_KLI_QR.KLI_ID 
                    FROM 
                        SEL_KLI_QR 
                    WHERE 
                        SEL_KLI_QR.SEL_ID = ' || :P_SEL_KLI_ID || ' 
                        AND OPR.KLI_ID = SEL_KLI_QR.KLI_ID 
                    ) OR OPR.KLI_ID IS NULL) '; 
 
        END 
 
        R_FP = NULL; 
        R_IS_FAKTURA = 0; 
        R_NUMBER = NULL; 
        R_FROM_POCKET = 0; 
        R_DIST_SUMA = NULL; 
        R_DIST_PAY = -1; 
        R_SUMA_OSTATAK = NULL; 
        R_PAY_TIP_2 = NULL; 
        R_SUMA_CL = NULL; 
        R_OUT_ID = NULL; 
        R_SUMA_OS = NULL; 
        R_PROC_OTS_CL = NULL; 
        R_PROC_OTS_OS = NULL; 
        R_RAZLIKA_CL = NULL; 
        R_RAZLIKA_OS = NULL; 
        R_SUMA_BEZ_DDS = NULL; 
        R_SUMA_DDS = NULL; 
        R_FLAG_UNCOLLECT = NULL; 
        R_STATUS = 0; 
        R_PAY_TIP_NAME = ''; 
        FOR EXECUTE STATEMENT 
          'SELECT 
              OPR.ID, 
              OPR.USER_ID, 
              OPR.SKLAD_ID, 
              OPR.SUMA, 
              OPR.OPR_DATE, 
              OPR.KLI_ID, 
              SKLAD.NAME, 
              "USER".NAME, 
              KLI.NAME, 
              OPR.DATETIME, 
              KLI.CODE, 
              OPR.IS_LOCK, 
              opr.opr_tip, 
              0, 
              RET_STOKA_PROD.PAY_TIP 
          FROM 
              OPR INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID
              INNER JOIN "USER" ON "USER".ID = OPR.USER_ID 
              LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
              LEFT JOIN RET_STOKA_PROD ON RET_STOKA_PROD.OPR_ID = OPR.ID 
          WHERE ' 
          || :P_FILTER || 
              ' OPR.OPR_TIP = 26 AND
              NOT EXISTS (SELECT KI_NODE.ID  FROM KI_NODE WHERE KI_NODE.SUB_KI_OPR_ID = RET_STOKA_PROD.OPR_ID) 
              AND NOT EXISTS ( 
                  SELECT 
                      OPR_ANUL.ID 
                  FROM 
                      OPR_ANUL 
                  WHERE 
                      OPR_ANUL.AN_OPR_ID = OPR.ID) ' ||:L_SQL_FILTER_SIMPLE ||:L_SQL_FILTER_KLI ||:L_SQL_RET || 
          ' UNION 
          SELECT 
              OPR.ID, 
              OPR.USER_ID, 
              OPR.SKLAD_ID, 
              OPR.SUMA, 
              OPR3.OPR_DATE, 
              OPR.KLI_ID, 
              SKLAD.NAME, 
              "USER".NAME, 
              KLI.NAME, 
              OPR3.DATETIME, 
              KLI.CODE, 
              OPR3.IS_LOCK, 
              OPR3.OPR_TIP, 
              0, 
              RET_STOKA_PROD_KI.PAY_TIP 
          FROM 
              OPR OPR3 
              LEFT JOIN KI_NODE ON KI_NODE.KI_OPR_ID = OPR3.ID
              LEFT JOIN OPR ON OPR.ID = KI_NODE.SUB_KI_OPR_ID 
              LEFT JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
              LEFT JOIN "USER" ON "USER".ID = OPR3.USER_ID 
 
              LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
              LEFT JOIN RET_STOKA_PROD_KI ON RET_STOKA_PROD_KI.OPR_ID = OPR3.ID 
          WHERE ' 
          || :P_FILTER || 
             ' OPR3.OPR_TIP = 40 AND
             NOT EXISTS ( 
                  SELECT 
                      OPR_ANUL.ID 
                  FROM 
                      OPR_ANUL 
                  WHERE 
                      OPR_ANUL.AN_OPR_ID = OPR3.ID) '||:L_SQL_FILTER_SIMPLE ||:L_SQL_FILTER_KLI ||:L_SQL_RET || 
          'UNION 
          SELECT 
              RET_STOKA_PROD_KI.OPR_ID, 
              OPR.USER_ID, 
              OPR.SKLAD_ID, 
              OPR.SUMA, 
              OPR.OPR_DATE, 
              OPR.KLI_ID, 
              SKLAD.NAME, 
              "USER".NAME, 
              KLI.NAME, 
              OPR.DATETIME, 
              KLI.CODE, 
              OPR.IS_LOCK, 
              OPR.OPR_TIP, 
              0, 
              RET_STOKA_PROD_KI.PAY_TIP 
          FROM 
              OPR 
              INNER JOIN RET_STOKA_PROD_KI ON RET_STOKA_PROD_KI.OPR_ID = OPR.ID AND OPR.OPR_TIP = 79 
              LEFT JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
              LEFT JOIN "USER" ON "USER".ID = OPR.USER_ID 
              LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
          WHERE' 
          || :P_FILTER || 
             ' NOT EXISTS ( 
                  SELECT 
                      OPR_ANUL.ID 
                  FROM 
                      OPR_ANUL 
                  WHERE 
                      OPR_ANUL.AN_OPR_ID = OPR.ID) 
               AND NOT EXISTS( 
               SELECT 
                    PAYMENT.ID 
                FROM 
                    PAYMENT INNER JOIN FAK ON FAK.ID = PAYMENT.FAK_ID AND FAK.OPR_ID = RET_STOKA_PROD_KI.OPR_ID) ' 
               ||:L_SQL_FILTER_SIMPLE ||:L_SQL_FILTER_KLI 
          INTO 
              :R_ID, :R_USER_ID, :R_SKLAD_ID, :R_SUMA, :R_DATETIME, :R_KLI_ID, :R_SKLAD,
              :R_USERNAME, :R_KLI, :R_SYSDATE, :R_KLI_CODE, :R_IS_LOCK, :R_OPT_TIP, :R_REQUIRE_FAKT, :R_PAY_TIP_2
          DO BEGIN 
            R_LOCK_DT = NULL; 
            R_LOCK_USER_NAME = NULL; 
            R_TEXT = NULL; 
 
            IF (R_OPT_TIP <> 79) THEN BEGIN
                SELECT 
                    SUM((OUT_EL.SUMA / OUT_EL.KOL * IN_EL.KOL) / (PROD_CENI_EL.VAT_PERCENT / 100 + 1))
                FROM 
                    IN_EL INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
                    INNER JOIN OUT_EL ON OUT_EL.ID = OPR_RAZPAD_NODE.OUT_EL_ID 
                    INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID
                    INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID
                WHERE 
                    IN_EL.OPR_ID = :R_ID
                INTO :R_SUMA_BEZ_DDS;
            END

            IF (R_OPT_TIP = 79) THEN BEGIN
              SELECT
                SUM(KI_PROD_SUMA_EL.SUMA / (1 + PROD_CENI_EL.VAT_PERCENT / 100))
              FROM
                OUT_EL
                INNER JOIN KI_PROD_SUMA_EL ON KI_PROD_SUMA_EL.OUT_EL_ID = OUT_EL.ID AND KI_PROD_SUMA_EL.OPR_ID = :R_ID
                INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID
              INTO :R_SUMA_BEZ_DDS;

              R_SUMA_SR = 0;
              R_SUMA_FR = 0;
            END

            SELECT FIRST 1 
                LOG_CENI_DDS.TIP_CENI 
            FROM 
                LOG_CENI_DDS 
            WHERE 
                LOG_CENI_DDS.OPR_ID < :R_ID AND
                LOG_CENI_DDS.TIP_DDS = 0 
            ORDER BY LOG_CENI_DDS.DATETIME DESC 
            INTO :L_TIP_CENI_DDS; 
 
            IF (COALESCE(L_TIP_CENI_DDS, 0) = 1) THEN
                L_SUMA_B_OTS = R_SUMA;
            ELSE
                L_SUMA_B_OTS = R_SUMA_BEZ_DDS;
 
            R_SUMA_DDS = R_SUMA - R_SUMA_BEZ_DDS; 
 
            --R_SUMA_SR = R_SUMA_SR + COALESCE(:L_SUMA_IZL, 0);
 
            R_SUMA_RAZLIKA = ROUND(:L_SUMA_B_OTS - R_SUMA_SR, 2);
 
            IF (R_SUMA_SR > 0) THEN 
                R_NADCENKA = ROUND((:L_SUMA_B_OTS / R_SUMA_SR-1) * 100, 2);
            ELSE
                R_NADCENKA = NULL; 
 
            R_SUMA_RAZLIKA_FR = ROUND(:L_SUMA_B_OTS - R_SUMA_FR, 2);
 
            IF (R_SUMA_FR > 0) THEN 
                R_NADCENKA_FR = ROUND(((:L_SUMA_B_OTS / R_SUMA_FR) - 1) * 100, 2);
            ELSE 
                R_NADCENKA_FR = NULL; 
 
            IF (EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = :R_ID)) THEN
              R_STATUS = 2; 
            ELSE IF (EXISTS (SELECT OPR_EDIT.ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID = :R_ID)) THEN
              R_STATUS = 1; 
            ELSE
              R_STATUS = 0; 
 
            SELECT FIRST 1
              COMMENTS.NOTE 
            FROM
              COMMENTS
              INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
            WHERE
              COMMENT_OPR_NODE.OPR_ID = :R_ID
            ORDER BY COMMENT_OPR_NODE.ID DESC
            INTO :R_TEXT;
 
            SELECT FIRST 1
                LOCK_OPR.DT, 
                US_L.NAME 
            FROM
                LOCK_OPR
                INNER JOIN LOCK_OPR_EL ON LOCK_OPR_EL.LOCK_ID = LOCK_OPR.ID AND LOCK_OPR_EL.OPR_ID = :R_ID
                INNER JOIN "USER" US_L ON US_L.ID = LOCK_OPR.USER_ID
            ORDER BY LOCK_OPR.DT DESC
            INTO :R_LOCK_DT, :R_LOCK_USER_NAME;
 
            IF (R_OPT_TIP <> 79) THEN BEGIN
                SELECT
                  SUM(IN_EL.SUMA_SR),
                  SUM(IN_EL.SUMA_FR) 
                FROM
                  IN_EL
                  INNER JOIN OPR_RAZPAD_NODE ON IN_EL.OPR_ID = :R_ID AND OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID
                  INNER JOIN OUT_EL ON OUT_EL.ID = OPR_RAZPAD_NODE.OUT_EL_ID 
                INTO :R_SUMA_SR, :R_SUMA_FR;
            END

            R_FAK_TOTAL = NULL;
            R_NUMBER = NULL;
            R_FAK_TOTAL = NULL;
            R_FAK_DATE = NULL;
            R_FAK_OPR_ID = NULL;
            --R_SUMA_BEZ_DDS = NULL;
            SELECT
                  FAK.NUMBER, 
                  FAK.TOTAL, 
                  OPR.OPR_DATE, 
                  FAK.OPR_ID --,
                  --FAK.SUMA
            FROM
                  FAK 
                  INNER JOIN KI_NODE ON (KI_NODE.KI_OPR_ID = FAK.OPR_ID AND KI_NODE.SUB_KI_OPR_ID =:R_ID) 
                  INNER JOIN OPR ON OPR.ID = FAK.OPR_ID 
            UNION
            SELECT
                  FAK.NUMBER, 
                  FAK.TOTAL, 
                  OPR.OPR_DATE, 
                  FAK.OPR_ID  --,
                  --FAK.SUMA
            FROM
                  FAK 
                  INNER JOIN OPR ON OPR.ID = FAK.OPR_ID 
            WHERE
                  FAK.OPR_ID = :R_ID 
            INTO
                :R_NUMBER, :R_FAK_TOTAL, :R_FAK_DATE, :R_FAK_OPR_ID;  --, :R_SUMA_BEZ_DDS;
 
            R_OBEKT_ID = NULL;
 
            SELECT FIRST 1
                OUT.OBEKT_ID 
            FROM
                OUT INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OUT.OPR_ID 
                INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID 
                INNER JOIN IN_EL ON IN_EL.ID = OPR_RAZPAD_NODE.IN_EL_ID AND IN_EL.OPR_ID =:R_ID 
            INTO :R_OBEKT_ID;

            IF (R_PAY_TIP_2 IN (0,2)) then R_PAY_TIP_NAME = 'В БРОЙ';
 
              --SELECT FIRST 1 
              --  OUT.ID 
              --FROM 
              --  OPR_RAZPAD_NODE INNER JOIN IN_EL ON IN_EL.ID = OPR_RAZPAD_NODE.IN_EL_ID 
              --  INNER JOIN OUT_EL ON OUT_EL.ID = OPR_RAZPAD_NODE.OUT_EL_ID 
              --  INNER JOIN OUT ON OUT.OPR_ID = OUT_EL.OPR_ID 
              --WHERE 
              --  IN_EL.OPR_ID =:R_ID 
              --INTO :R_OUT_ID; 
 
            SELECT
                POR.NOMER
            FROM
                POR
                INNER JOIN POR_OUT_NODE ON POR_OUT_NODE.POR_ID = POR.ID AND POR_OUT_NODE.OUT_ID = :R_OUT_ID
            INTO :R_POR_NUM;
 
            --R_SUMA_RAZLIKA    = ROUNDD(R_SUMA_BEZ_DDS - R_SUMA_SR);
            --R_SUMA_RAZLIKA_FR = ROUNDD(R_SUMA_BEZ_DDS - R_SUMA_FR);

            R_SUMA_BEZ_DDS    = -R_SUMA_BEZ_DDS;
            R_SUMA_RAZLIKA_FR = -R_SUMA_RAZLIKA_FR;
            R_SUMA_RAZLIKA    = -R_SUMA_RAZLIKA;
            R_SUMA            = -R_SUMA;
            R_SUMA_SR         = -R_SUMA_SR;
            R_SUMA_FR         = -R_SUMA_FR;

            SUSPEND;
        END 
    END 
END^


ALTER PROCEDURE GET_SPR_PROD_1 (
    P_OPR_TIP SMALLINT,
    P_GET_RET_STOKA SMALLINT,
    P_FILTER VARCHAR(1000),
    P_FLAG_ANNUL INTEGER,
    P_SUMA_TIP SMALLINT,
    P_SEL_SIMPLE_ID INTEGER,
    P_SEL_KLI_ID INTEGER,
    P_FLAG_FILTER_KLI_NULL SMALLINT,
    P_COLUMN_SKLAD TYPE OF DOM_SMAL_INT)
RETURNS (
    R_ID INTEGER,
    R_OUT_ID INTEGER,
    R_DATETIME DATE,
    R_KLI_ID INTEGER,
    R_SUMA DOUBLE PRECISION,
    R_USER_ID SMALLINT,
    R_SKLAD_ID SMALLINT,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_SUMA_CL DOUBLE PRECISION,
    R_FP SMALLINT,
    R_PAY_TIP_2 SMALLINT,
    R_KLI VARCHAR(100),
    R_USERNAME VARCHAR(30),
    R_SKLAD VARCHAR(20),
    R_SUMA_RAZLIKA DOUBLE PRECISION,
    R_NADCENKA DOUBLE PRECISION,
    R_NUMBER VARCHAR(10),
    R_IS_FAKTURA SMALLINT,
    R_FROM_POCKET CHAR(1),
    R_DIST_SUMA DOUBLE PRECISION,
    R_DIST_PAY SMALLINT,
    R_SUMA_OSTATAK DOUBLE PRECISION,
    R_FAK_TOTAL DOUBLE PRECISION,
    R_SYSDATE TIMESTAMP,
    R_SUMA_RAZLIKA_FR DOUBLE PRECISION,
    R_NADCENKA_FR DOUBLE PRECISION,
    R_STATUS SMALLINT,
    R_OTKL_CL SMALLINT,
    R_SUMA_OS DOUBLE PRECISION,
    R_PROC_OTS_CL DOUBLE PRECISION,
    R_PROC_OTS_OS DOUBLE PRECISION,
    R_RAZLIKA_CL DOUBLE PRECISION,
    R_RAZLIKA_OS DOUBLE PRECISION,
    R_DIST_NAME VARCHAR(500),
    R_KLI_CODE VARCHAR(15),
    R_OBEKT_ID SMALLINT,
    R_IS_LOCK SMALLINT,
    R_OPT_TIP INTEGER,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    R_TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    R_REQUIRE_FAKT INTEGER,
    R_KLI_AGENT_ID SMALLINT,
    R_KLI_AGENT VARCHAR(50),
    R_SUMA_BEZ_DDS DOUBLE PRECISION,
    R_SUMA_DDS DOUBLE PRECISION,
    R_FAK_DATE DATE,
    R_FLAG_UNCOLLECT SMALLINT,
    R_SUMA_OS_NETO TYPE OF DOM_SUMA,
    R_SUMA_CL_NETO TYPE OF DOM_SUMA,
    R_PAY_TIP_NAME TYPE OF DOM_CHAR_50,
    R_POR_NUM TYPE OF DOM_CHAR_30,
    R_TS_SMETKA_ID INTEGER,
    R_FAK_OPR_ID TYPE OF DOM_KEY,
    R_PERCENT_DIST TYPE OF DOM_SMAL_INT)
AS
declare variable L_COUNTER1 integer;
declare variable L_COUNTER2 integer;
declare variable L_SQL varchar(2300);
declare variable L_DIST_NAME varchar(50);
declare variable L_SUMA double precision;
declare variable L_SUMA_IZL double precision;
declare variable L_OPR_ID integer;
declare variable L_SQL_RET varchar(2048);
declare variable L_SQL_FILTER_SIMPLE varchar(1000);
declare variable L_SQL_FILTER_KLI varchar(1000);
declare variable L_TIP_CENI_DDS integer;
declare variable L_SUMA_B_OTS double precision;
declare variable L_CNT_PAYMENT type of DOM_INT;
BEGIN 
  /*V.3*/ 
    L_SQL = ' 
    WITH OPR_T AS( 
    SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.KLI_ID, 
        OPR.SUMA, 
        OPR.USER_ID, 
        SKLAD.ID as sklad_id,
        OPR_SUMI.SUMA_SR, 
        OPR_SUMI.SUMA_FR, 
        OPR.DATETIME, 
        OPR.IS_LOCK, 
        OPR.OPR_TIP, 
        OPR.ID AS PROD_OPR_ID 
    FROM 
        OPR INNER JOIN OPR_SUMI ON OPR_SUMI.OPR_ID = OPR.ID 
        inner join sklad on sklad.ID = opr.SKLAD_ID
        AND OPR.OPR_TIP =  ' || :P_OPR_TIP || ' 
    WHERE 
        OPR.ID > 0 AND
        OPR.SKLAD_ID IS NOT NULL AND ' 
        || CAST(:P_FILTER AS VARCHAR(1000)) || ' 
        (1=1) 
 
    UNION 
 
    SELECT 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.KLI_ID, 
        OPR.SUMA, 
        OPR.USER_ID, 
        SKLAD.ID,
        OPR_SUMI.SUMA_SR, 
        OPR_SUMI.SUMA_FR, 
        OPR.DATETIME, 
        OPR.IS_LOCK, 
        OPR.OPR_TIP, 
        PROD_NODE.OPR_PROD_ID 
    FROM 
        OPR INNER JOIN PROD_NODE ON PROD_NODE.OPR_SUB_PROD_ID = OPR.ID AND ' || :P_OPR_TIP || '= 2 
        INNER JOIN OPR_SUMI ON OPR_SUMI.OPR_ID = PROD_NODE.OPR_SUB_PROD_ID 
        left join sklad on sklad.ID = opr.SKLAD_ID
    WHERE 
        OPR.ID > 0 AND
    ' || CAST(:P_FILTER AS VARCHAR(1000)) || ' 
        (1=1) 
    ) 
 
    SELECT 
        OPR_T.ID, 
        OPR_T.OPR_DATE, 
        OPR_T.KLI_ID, 
        OPR_T.SUMA, 
        OPR_T.USER_ID, 
        SKLAD.ID,
        "USER".NAME, 
        OUT.ID, 
        OPR_T.SUMA_SR, 
        OPR_T.SUMA_FR, 
        OUT.FP, 
        OUT.PSHOP, 
        OUT.PAY_TIP, 
        OPR_T.DATETIME, 
        OUT.OTKLONENIE, 
        OUT.OBEKT_ID, 
        OPR_T.IS_LOCK, 
        OPR_T.OPR_TIP, 
        OUT.REQUIRE_FAKT, 
        OUT.KLI_AGENT_ID, 
        OUT.FLAG_UNCOLLECT, 
        OUT.POR_NUM, 
        OUT.TS_SMETKA_ID 
    FROM 
        OPR_T INNER JOIN "USER" ON OPR_T.USER_ID = "USER".ID 
        INNER JOIN OUT ON OUT.OPR_ID = OPR_T.PROD_OPR_ID 
        inner join sklad on sklad.ID = opr_T.SKLAD_ID
    WHERE
      OPR_T.ID > 0 AND ';
 
    IF (P_FLAG_ANNUL = 0) THEN 
        L_SQL = L_SQL ||    ' NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR_T.ID)'; 
    ELSE 
        L_SQL = L_SQL || ' 1=1 '; 
 
    IF (COALESCE(P_SEL_SIMPLE_ID,0)<=0) THEN 
        L_SQL_FILTER_SIMPLE = ''; 
    ELSE 
        L_SQL_FILTER_SIMPLE = ' AND 
        (EXISTS( 
        SELECT 
            OUT_EL.ID 
        FROM 
            OUT_EL INNER JOIN SEL_SIM_QR ON SEL_SIM_QR.SIMPLE_ID = OUT_EL.SIMPLE_ID 
        WHERE 
            SEL_SIM_QR.SEL_ID = ' || :P_SEL_SIMPLE_ID || ' 
            AND OUT_EL.OPR_ID = OPR_T.ID))'; 
 
 
    IF (P_FLAG_FILTER_KLI_NULL = 0) THEN BEGIN 
        IF (COALESCE(P_SEL_KLI_ID,0) <= 0) THEN 
            L_SQL_FILTER_KLI = ''; 
        ELSE 
            L_SQL_FILTER_KLI = ' AND 
            (EXISTS( 
            SELECT 
                SEL_KLI_QR.KLI_ID 
            FROM 
                SEL_KLI_QR 
            WHERE 
                SEL_KLI_QR.SEL_ID = ' || :P_SEL_KLI_ID || ' 
                AND OPR_T.KLI_ID = SEL_KLI_QR.KLI_ID 
            )) '; 
    END 
    ELSE BEGIN 
        IF (COALESCE(P_SEL_KLI_ID,0) <= 0) THEN 
            L_SQL_FILTER_KLI = ' AND OPR_T.KLI_ID IS NULL '; 
        ELSE 
            L_SQL_FILTER_KLI = ' AND 
            (EXISTS( 
            SELECT 
                SEL_KLI_QR.KLI_ID 
            FROM 
                SEL_KLI_QR 
            WHERE 
                SEL_KLI_QR.SEL_ID = ' || :P_SEL_KLI_ID || ' 
                AND OPR_T.KLI_ID = SEL_KLI_QR.KLI_ID 
            ) OR OPR_T.KLI_ID IS NULL) '; 
 
    END 
 
    FOR EXECUTE STATEMENT L_SQL || L_SQL_FILTER_SIMPLE || L_SQL_FILTER_KLI 
    INTO 
        :R_ID,:R_DATETIME,:R_KLI_ID,:R_SUMA,:R_USER_ID,:R_SKLAD_ID,:R_USERNAME, 
        :R_OUT_ID,:R_SUMA_SR,:R_SUMA_FR,:R_FP,:R_FROM_POCKET, 
        :R_PAY_TIP_2,:R_SYSDATE, :R_OTKL_CL,:R_OBEKT_ID, :R_IS_LOCK,:R_OPT_TIP,:R_REQUIRE_FAKT,:R_KLI_AGENT_ID,:R_FLAG_UNCOLLECT,:R_POR_NUM,:R_TS_SMETKA_ID 
    DO BEGIN 
        R_SKLAD = 'С подпродажби'; 
        R_LOCK_DT = NULL; 
        R_LOCK_USER_NAME = NULL; 
        R_TEXT = NULL; 
 
        /*
        SELECT FIRST 1 
            COMMENTS.NOTE 
        FROM 
            COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
        WHERE 
            COMMENT_OPR_NODE.OPR_ID = :R_ID 
        ORDER BY 
            COMMENT_OPR_NODE.ID DESC 
        INTO :R_TEXT; 
 
        SELECT FIRST 1 
            LOCK_OPR.DT, 
            US_L.NAME 
        FROM LOCK_OPR 
            JOIN LOCK_OPR_EL ON LOCK_OPR_EL.LOCK_ID = LOCK_OPR.ID AND LOCK_OPR_EL.OPR_ID = :R_ID 
            JOIN "USER" US_L ON US_L.ID = LOCK_OPR.USER_ID 
        ORDER BY LOCK_OPR.DT DESC 
            INTO :R_LOCK_DT,:R_LOCK_USER_NAME; 
 
 
        IF (R_SKLAD_ID IS NOT NULL) THEN BEGIN 
            SELECT 
                SKLAD.NAME 
            FROM 
                SKLAD 
            WHERE 
                SKLAD.ID = :R_SKLAD_ID 
            INTO 
                :R_SKLAD; 
 
              --L_OPR_ID = R_ID; 
        END 
 
        IF (EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = :R_ID)) THEN 
            R_STATUS = 2; 
        ELSE IF (EXISTS (SELECT OPR_EDIT.ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID = :R_ID)) THEN 
            R_STATUS = 1; 
        ELSE 
            R_STATUS = 0; 
 
        R_KLI = NULL; 
        R_KLI_CODE = NULL; 
        SELECT 
            KLI.NAME, 
            KLI.CODE 
        FROM 
            KLI 
        WHERE 
            KLI.ID = :R_KLI_ID 
        INTO 
            :R_KLI, :R_KLI_CODE; 
 
        R_KLI_AGENT = NULL; 
        IF (:R_KLI_AGENT_ID IS NOT NULL) THEN 
            SELECT 
                KLI_AGENTS.NAME 
            FROM 
                KLI_AGENTS 
            WHERE 
                KLI_AGENTS.ID = :R_KLI_AGENT_ID 
            INTO 
                :R_KLI_AGENT; 
 
        SELECT 
            SUM(GET_SUMA_IZL.R_SUMA_IZL) 
        FROM 
            GET_SUMA_IZL(:L_OPR_ID) 
        INTO 
            :L_SUMA_IZL; 
 
        --IF (P_SUMA_TIP = 0) THEN 
        --    EXECUTE PROCEDURE GET_SUMI_PROD(:R_ID,2) RETURNING_VALUES(:R_SUMA_CL,:R_SUMA_OS,:L_SUMA,:R_SUMA_BEZ_DDS,:R_SUMA_OS_NETO,:R_SUMA_CL_NETO); 
        IF (P_SUMA_TIP = 0)  THEN 
            EXECUTE PROCEDURE GET_SUMI_PROD(:R_ID,0) RETURNING_VALUES(:R_SUMA_CL,:R_SUMA_OS,:L_SUMA,:R_SUMA_BEZ_DDS,:R_SUMA_OS_NETO,:R_SUMA_CL_NETO); 
        IF (P_SUMA_TIP = 1) THEN 
            IF ((R_FP IN (1,2,3)) OR (R_REQUIRE_FAKT = 1)) THEN 
                EXECUTE PROCEDURE GET_SUMI_PROD(:R_ID,0) RETURNING_VALUES(:R_SUMA_CL,:R_SUMA_OS,:L_SUMA,:R_SUMA_BEZ_DDS,:R_SUMA_OS_NETO,:R_SUMA_CL_NETO); 
            ELSE 
                EXECUTE PROCEDURE GET_SUMI_PROD(:R_ID,2) RETURNING_VALUES(:R_SUMA_CL,:R_SUMA_OS,:L_SUMA,:R_SUMA_BEZ_DDS,:R_SUMA_OS_NETO,:R_SUMA_CL_NETO); 
 
        SELECT FIRST 1 
            LOG_CENI_DDS.TIP_CENI 
        FROM 
            LOG_CENI_DDS 
        WHERE 
            --LOG_CENI_DDS.OPR_ID <:R_ID AND 
            LOG_CENI_DDS.TIP_DDS = 0 
        ORDER BY LOG_CENI_DDS.DATETIME DESC 
        INTO :L_TIP_CENI_DDS; 
 
        R_SUMA = ROUND(L_SUMA,2); 
 
        IF (COALESCE(:L_TIP_CENI_DDS,0) = 1) THEN 
            L_SUMA_B_OTS =: R_SUMA; 
        ELSE 
            L_SUMA_B_OTS =:R_SUMA_BEZ_DDS; 
 
        --IF (P_SUMA_TIP = 0) THEN 
        --    R_SUMA_BEZ_DDS =:R_SUMA; 
        IF (P_SUMA_TIP = 1) THEN 
            IF ((R_FP IN (1,2,3)) OR (R_REQUIRE_FAKT = 1)) THEN 
                R_SUMA_BEZ_DDS =:R_SUMA_BEZ_DDS; 
            ELSE 
                R_SUMA_BEZ_DDS =:R_SUMA; 
 
        R_SUMA_DDS = R_SUMA - R_SUMA_BEZ_DDS; 
 
        R_SUMA_SR = R_SUMA_SR + COALESCE(:L_SUMA_IZL,0); 
 
        R_SUMA_RAZLIKA = ROUND(:L_SUMA_B_OTS - R_SUMA_SR,2); 
 
        IF (R_SUMA_SR > 0) THEN 
            R_NADCENKA = ROUND((:L_SUMA_B_OTS/R_SUMA_SR-1)*100,2); 
        ELSE 
            R_NADCENKA = NULL; 
 
        R_SUMA_RAZLIKA_FR = ROUND(:L_SUMA_B_OTS - R_SUMA_FR,2); 
 
        IF (R_SUMA_FR > 0) THEN 
            R_NADCENKA_FR = ROUND(((:L_SUMA_B_OTS/R_SUMA_FR)-1)*100,2); 
        ELSE 
            R_NADCENKA_FR = NULL; 
 
        R_NUMBER = NULL; 
        R_FAK_TOTAL = NULL; 
        R_FAK_DATE = NULL; 
        R_FAK_OPR_ID = NULL; 
 
        SELECT FIRST 1 
            FAK.NUMBER, 
            IIF(FAK.TIP = 4, (SELECT SUM(ROUND(FAK_EL.SUMA_TOTAL * FAK.KURS_VALUTA, 2)) FROM FAK_EL WHERE FAK_EL.OPR_ID = FAK.OPR_ID), FAK.TOTAL), 
            OPR.OPR_DATE, 
            FAK.OPR_ID 
        FROM 
            FAK INNER JOIN FAK_PROD ON (FAK_PROD.OPR_ID = :R_ID AND FAK_PROD.FAK_ID = FAK.ID) 
            INNER JOIN OPR ON OPR.ID = FAK.OPR_ID 
        INTO 
            :R_NUMBER, :R_FAK_TOTAL,:R_FAK_DATE, :R_FAK_OPR_ID; 
 
        R_IS_FAKTURA = IIF (R_NUMBER IS NULL,0,1); 
 
        R_DIST_SUMA = NULL; 
        SELECT 
            SUM(PARI_DIST.SUMA) 
        FROM 
            PARI_DIST 
        WHERE 
            PARI_DIST.OPR_PROD_ID = :R_ID 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = PARI_DIST.OPR_ID) 
        INTO 
            :R_DIST_SUMA; 
 
        R_PERCENT_DIST = ROUND((R_DIST_SUMA/R_SUMA_BEZ_DDS)*100); 
 
        SELECT 
            COUNT(PARI_DIST.ID) 
        FROM 
            PARI_DIST 
        WHERE 
            PARI_DIST.OPR_PROD_ID = :R_ID 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = PARI_DIST.OPR_ID) 
        INTO 
            :L_COUNTER1; 
 
        IF (L_COUNTER1 < 4) THEN BEGIN 
            R_DIST_NAME = ''; 
            L_DIST_NAME = ''; 
            FOR SELECT 
                KLI.NAME 
            FROM 
                PARI_DIST INNER JOIN OPR ON OPR.ID = PARI_DIST.OPR_ID 
                INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            WHERE 
                PARI_DIST.OPR_PROD_ID =:R_ID 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = PARI_DIST.OPR_ID) 
            INTO 
                :L_DIST_NAME 
            DO BEGIN 
                R_DIST_NAME = R_DIST_NAME ||:L_DIST_NAME || ', ' ; 
            END 
        END 
        ELSE BEGIN 
            SELECT FIRST 1 
                KLI.NAME 
            FROM 
                PARI_DIST INNER JOIN OPR ON OPR.ID = PARI_DIST.OPR_ID 
                INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
            WHERE 
                PARI_DIST.OPR_PROD_ID =:R_ID 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = PARI_DIST.OPR_ID) 
            INTO 
                :L_DIST_NAME; 
            R_DIST_NAME = L_DIST_NAME || '...'; 
        END 
 
        IF (L_COUNTER1 = 0) THEN 
            R_DIST_PAY = -1; 
        ELSE BEGIN 
            SELECT 
                COUNT(PARI_DIST.ID) 
            FROM 
                PARI_DIST 
            WHERE 
                PARI_DIST.OPR_PROD_ID = :R_ID 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = PARI_DIST.OPR_ID) 
            INTO 
                :L_COUNTER1; 
 
          SELECT 
              COUNT(PARI_DIST.ID) 
          FROM 
              PARI_DIST 
          WHERE 
              PARI_DIST.OPR_PROD_ID = :R_ID 
              AND PARI_DIST.PAY_TIP = 1 
              AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = PARI_DIST.OPR_ID) 
          INTO 
              :L_COUNTER2; 
 
          IF (L_COUNTER1 > L_COUNTER2) THEN 
              R_DIST_PAY = 0; 
          ELSE 
              R_DIST_PAY = 1; 
          END 
 
          R_SUMA_OSTATAK = NULL; 
 
          SELECT 
              SUM(SUMI.SUMA_OST) 
          FROM 
              SUMI 
          WHERE 
              SUMI.OPR_ID = :R_ID 
          INTO 
              :R_SUMA_OSTATAK; 
 
 
          R_SUMA_OSTATAK = COALESCE(R_SUMA_OSTATAK,0); 
 
          if (R_SUMA_CL <> 0) then 
              R_PROC_OTS_CL = ROUNDD(((:R_SUMA/:R_SUMA_CL) - 1)*100); 
          ELSE 
              R_PROC_OTS_CL = NULL; 
 
          if (R_SUMA_OS <> 0) then 
              R_PROC_OTS_OS =ROUNDD((:R_SUMA/:R_SUMA_OS - 1)*100); 
          ELSE 
              R_PROC_OTS_OS = NULL; 
 
          R_RAZLIKA_CL = ROUNDD(:R_SUMA - R_SUMA_CL); 
          R_RAZLIKA_OS = ROUNDD(:R_SUMA - R_SUMA_OS); 
 
          R_PAY_TIP_NAME = ''; 
 
          IF (:R_PAY_TIP_2 = 3) THEN BEGIN 
            SELECT 
                COUNT(PAYMENT_TIP_ID) 
            FROM 
            ( 
            SELECT DISTINCT 
                PAYMENTS_EL.PAYMENT_TIP_ID 
            FROM 
                PAYMENTS_EL INNER JOIN CFG_PAYMENTS ON CFG_PAYMENTS.ID = PAYMENTS_EL.PAYMENT_TIP_ID 
                INNER JOIN PAYMENT ON PAYMENTS_EL.PAYMENT_ID = PAYMENT.ID 
                INNER JOIN SUMI SUMI_PAY ON SUMI_PAY.OPR_ID = PAYMENT.OPR_ID 
                INNER JOIN OPR_PAYMENT_NODE ON OPR_PAYMENT_NODE.PAYMENT_ID = SUMI_PAY.ID 
                INNER JOIN SUMI ON SUMI.ID = OPR_PAYMENT_NODE.OPR_ID 
                INNER JOIN OPR ON SUMI.OPR_ID = OPR.ID 
            WHERE 
                OPR.ID =:R_ID AND 
                NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
             ) 
            INTO :L_CNT_PAYMENT; 
 
            if (L_CNT_PAYMENT > 1) then R_PAY_TIP_NAME = 'СМЕСЕН'; ELSE BEGIN 
                SELECT DISTINCT 
                    CFG_PAYMENTS.NAME 
                FROM 
                    PAYMENTS_EL INNER JOIN CFG_PAYMENTS ON CFG_PAYMENTS.ID = PAYMENTS_EL.PAYMENT_TIP_ID 
                    INNER JOIN PAYMENT ON PAYMENTS_EL.PAYMENT_ID = PAYMENT.ID 
                    INNER JOIN SUMI SUMI_PAY ON SUMI_PAY.OPR_ID = PAYMENT.OPR_ID 
                    INNER JOIN OPR_PAYMENT_NODE ON OPR_PAYMENT_NODE.PAYMENT_ID = SUMI_PAY.ID 
                    INNER JOIN SUMI ON SUMI.ID = OPR_PAYMENT_NODE.OPR_ID 
                    INNER JOIN OPR ON SUMI.OPR_ID = OPR.ID 
                WHERE 
                    OPR.ID =:R_ID AND 
                    NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                INTO :R_PAY_TIP_NAME; 
            END 
        END ELSE IF (R_PAY_TIP_2 IN (0,2)) then R_PAY_TIP_NAME = 'В БРОЙ'; 
 
        IF (coalesce(:R_POR_NUM, '') = '') THEN 
            SELECT POR.NOMER FROM POR INNER JOIN POR_OUT_NODE ON POR_OUT_NODE.POR_ID =POR.ID AND POR_OUT_NODE.OUT_ID =:R_OUT_ID INTO :R_POR_NUM; 
        */
 
      SUSPEND; 
    END 
 
    IF (P_GET_RET_STOKA = 1) THEN BEGIN 
        IF (P_OPR_TIP = 2) THEN BEGIN 
            L_SQL_RET =  'AND SKLAD.ID <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM)' ; 
        END 
        ELSE BEGIN 
            L_SQL_RET =  'AND SKLAD.ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) '; 
        END 
 
        IF (COALESCE(P_SEL_SIMPLE_ID,0)<=0) THEN 
            L_SQL_FILTER_SIMPLE = ''; 
        ELSE 
            L_SQL_FILTER_SIMPLE = ' AND ( 
                (EXISTS( 
                    SELECT 
                        IN_EL.ID 
                    FROM 
                        IN_EL INNER JOIN SEL_SIM_QR ON SEL_SIM_QR.SIMPLE_ID = IN_EL.SIMPLE_ID 
                    WHERE 
                        SEL_SIM_QR.SEL_ID = ' || :P_SEL_SIMPLE_ID || ' 
                    AND IN_EL.OPR_ID = OPR.ID)) 
                OR 
                (EXISTS( 
                    SELECT 
                        IN_EL.ID 
                    FROM 
                        IN_EL INNER JOIN SEL_SIM_QR ON SEL_SIM_QR.SIMPLE_ID = IN_EL.SIMPLE_ID 
                        INNER JOIN DOST_NODE ON DOST_NODE.RAZ_DOST_ID = IN_EL.OPR_ID 
                    WHERE 
                        SEL_SIM_QR.SEL_ID = ' || :P_SEL_SIMPLE_ID || ' 
                        AND DOST_NODE.DOST_ID = OPR.ID))) '; 
 
        IF (P_FLAG_FILTER_KLI_NULL = 0) THEN BEGIN 
            IF (COALESCE(P_SEL_KLI_ID,0) <= 0) THEN 
                L_SQL_FILTER_KLI = ''; 
            ELSE 
                L_SQL_FILTER_KLI = ' AND 
                (EXISTS( 
                    SELECT 
                        SEL_KLI_QR.KLI_ID 
                    FROM 
                        SEL_KLI_QR 
                    WHERE 
                        SEL_KLI_QR.SEL_ID = ' || :P_SEL_KLI_ID || ' 
                        AND OPR.KLI_ID = SEL_KLI_QR.KLI_ID 
                    )) '; 
        END 
        ELSE BEGIN 
            IF (COALESCE(P_SEL_KLI_ID,0) <= 0) THEN 
                L_SQL_FILTER_KLI = ' AND OPR.KLI_ID IS NULL '; 
            ELSE 
                L_SQL_FILTER_KLI = ' AND 
                (EXISTS( 
                    SELECT 
                        SEL_KLI_QR.KLI_ID 
                    FROM 
                        SEL_KLI_QR 
                    WHERE 
                        SEL_KLI_QR.SEL_ID = ' || :P_SEL_KLI_ID || ' 
                        AND OPR.KLI_ID = SEL_KLI_QR.KLI_ID 
                    ) OR OPR.KLI_ID IS NULL) '; 
 
        END 
 
        R_FP = NULL; 
        R_IS_FAKTURA = 0; 
        R_NUMBER = NULL; 
        R_FROM_POCKET = 0; 
        R_DIST_SUMA = NULL; 
        R_DIST_PAY = -1; 
        R_SUMA_OSTATAK = NULL; 
        R_PAY_TIP_2 = NULL; 
        R_SUMA_CL = NULL; 
        R_OUT_ID = NULL; 
        R_SUMA_OS = NULL; 
        R_PROC_OTS_CL = NULL; 
        R_PROC_OTS_OS = NULL; 
        R_RAZLIKA_CL = NULL; 
        R_RAZLIKA_OS = NULL; 
        R_SUMA_BEZ_DDS = NULL; 
        R_SUMA_DDS = NULL; 
        R_FLAG_UNCOLLECT = NULL; 
        R_STATUS = 0; 
        R_PAY_TIP_NAME = ''; 
        FOR EXECUTE STATEMENT 
          'SELECT 
              OPR.ID, 
              OPR.USER_ID, 
              OPR.SKLAD_ID, 
              OPR.SUMA, 
              OPR.OPR_DATE, 
              OPR.KLI_ID, 
              SKLAD.NAME, 
              "USER".NAME, 
              KLI.NAME, 
              OPR.DATETIME, 
              KLI.CODE, 
              OPR.IS_LOCK, 
              opr.opr_tip, 
              0, 
              RET_STOKA_PROD.PAY_TIP 
          FROM 
              OPR INNER JOIN SKLAD ON (OPR.OPR_TIP = 26 AND SKLAD.ID = OPR.SKLAD_ID) 
              INNER JOIN "USER" ON "USER".ID = OPR.USER_ID 
              LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
              LEFT JOIN RET_STOKA_PROD ON RET_STOKA_PROD.OPR_ID = OPR.ID 
          WHERE ' 
          || :P_FILTER || 
              ' NOT EXISTS (SELECT KI_NODE.ID  FROM KI_NODE WHERE KI_NODE.SUB_KI_OPR_ID = RET_STOKA_PROD.OPR_ID) 
              AND NOT EXISTS ( 
                  SELECT 
                      OPR_ANUL.ID 
                  FROM 
                      OPR_ANUL 
                  WHERE 
                      OPR_ANUL.AN_OPR_ID = OPR.ID) ' ||:L_SQL_FILTER_SIMPLE ||:L_SQL_FILTER_KLI ||:L_SQL_RET || 
          ' UNION 
          SELECT 
              OPR.ID, 
              OPR.USER_ID, 
              OPR.SKLAD_ID, 
              OPR.SUMA, 
              OPR3.OPR_DATE, 
              OPR.KLI_ID, 
              SKLAD.NAME, 
              "USER".NAME, 
              KLI.NAME, 
              OPR3.DATETIME, 
              KLI.CODE, 
              OPR3.IS_LOCK, 
              OPR3.OPR_TIP, 
              0, 
              RET_STOKA_PROD_KI.PAY_TIP 
          FROM 
              OPR OPR3 
              LEFT JOIN KI_NODE ON (KI_NODE.KI_OPR_ID = OPR3.ID AND OPR3.OPR_TIP = 40) 
              LEFT JOIN OPR ON OPR.ID = KI_NODE.SUB_KI_OPR_ID 
              LEFT JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
              LEFT JOIN "USER" ON "USER".ID = OPR3.USER_ID 
 
              LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
              LEFT JOIN RET_STOKA_PROD_KI ON RET_STOKA_PROD_KI.OPR_ID = OPR3.ID 
          WHERE ' 
          || :P_FILTER || 
             ' NOT EXISTS ( 
                  SELECT 
                      OPR_ANUL.ID 
                  FROM 
                      OPR_ANUL 
                  WHERE 
                      OPR_ANUL.AN_OPR_ID = OPR3.ID) '||:L_SQL_FILTER_SIMPLE ||:L_SQL_FILTER_KLI ||:L_SQL_RET || 
          'UNION 
          SELECT 
              RET_STOKA_PROD_KI.OPR_ID, 
              OPR.USER_ID, 
              OPR.SKLAD_ID, 
              OPR.SUMA, 
              OPR.OPR_DATE, 
              OPR.KLI_ID, 
              SKLAD.NAME, 
              "USER".NAME, 
              KLI.NAME, 
              OPR.DATETIME, 
              KLI.CODE, 
              OPR.IS_LOCK, 
              OPR.OPR_TIP, 
              0, 
              RET_STOKA_PROD_KI.PAY_TIP 
          FROM 
              OPR 
              INNER JOIN RET_STOKA_PROD_KI ON RET_STOKA_PROD_KI.OPR_ID = OPR.ID AND OPR.OPR_TIP = 79 
              LEFT JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
              LEFT JOIN "USER" ON "USER".ID = OPR.USER_ID 
              LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
          WHERE' 
          || :P_FILTER || 
             ' NOT EXISTS ( 
                  SELECT 
                      OPR_ANUL.ID 
                  FROM 
                      OPR_ANUL 
                  WHERE 
                      OPR_ANUL.AN_OPR_ID = OPR.ID) 
               AND NOT EXISTS( 
               SELECT 
                    PAYMENT.ID 
                FROM 
                    PAYMENT INNER JOIN FAK ON FAK.ID = PAYMENT.FAK_ID AND FAK.OPR_ID = RET_STOKA_PROD_KI.OPR_ID) ' 
               ||:L_SQL_FILTER_SIMPLE ||:L_SQL_FILTER_KLI 
          INTO 
              :R_ID,:R_USER_ID,:R_SKLAD_ID,:R_SUMA,:R_DATETIME,:R_KLI_ID,:R_SKLAD, 
              :R_USERNAME,:R_KLI,:R_SYSDATE, :R_KLI_CODE,:r_is_lock,:r_opt_tip,:R_REQUIRE_FAKT, :R_PAY_TIP_2 
          DO BEGIN 
            R_LOCK_DT = NULL; 
            R_LOCK_USER_NAME = NULL; 
 
            R_TEXT = NULL; 
 
            SELECT 
                SUM(OUT_EL.SUMA / (SIMPLE.DDS/ 100 + 1)) 
            FROM 
                IN_EL INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
                INNER JOIN OUT_EL ON OUT_EL.ID = OPR_RAZPAD_NODE.OUT_EL_ID 
                INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
            WHERE 
                IN_EL.OPR_ID =:R_ID 
            into :R_SUMA_BEZ_DDS; 
 
 
            SELECT FIRST 1 
                LOG_CENI_DDS.TIP_CENI 
            FROM 
                LOG_CENI_DDS 
            WHERE 
                LOG_CENI_DDS.OPR_ID <:R_ID AND 
                LOG_CENI_DDS.TIP_DDS = 0 
            ORDER BY LOG_CENI_DDS.DATETIME DESC 
            INTO :L_TIP_CENI_DDS; 
 
            IF (COALESCE(:L_TIP_CENI_DDS,0) = 1) THEN 
            L_SUMA_B_OTS =: R_SUMA; 
        ELSE 
            L_SUMA_B_OTS =:R_SUMA_BEZ_DDS; 
 
        R_SUMA_DDS = R_SUMA - R_SUMA_BEZ_DDS; 
 
        R_SUMA_SR = R_SUMA_SR + COALESCE(:L_SUMA_IZL,0); 
 
        R_SUMA_RAZLIKA = ROUND(:L_SUMA_B_OTS - R_SUMA_SR,2); 
 
        IF (R_SUMA_SR > 0) THEN 
            R_NADCENKA = ROUND((:L_SUMA_B_OTS/R_SUMA_SR-1)*100,2); 
        ELSE 
            R_NADCENKA = NULL; 
 
        R_SUMA_RAZLIKA_FR = ROUND(:L_SUMA_B_OTS - R_SUMA_FR,2); 
 
        IF (R_SUMA_FR > 0) THEN 
            R_NADCENKA_FR = ROUND(((:L_SUMA_B_OTS/R_SUMA_FR)-1)*100,2); 
        ELSE 
            R_NADCENKA_FR = NULL; 
 
            IF (EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = :R_ID)) THEN 
              R_STATUS = 2; 
            ELSE IF (EXISTS (SELECT OPR_EDIT.ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID = :R_ID)) THEN 
              R_STATUS = 1; 
            ELSE 
              R_STATUS = 0; 
 
            SELECT FIRST 1 
              COMMENTS.NOTE 
            FROM 
              COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
            WHERE 
              COMMENT_OPR_NODE.OPR_ID = :R_ID 
            ORDER BY 
              COMMENT_OPR_NODE.ID DESC 
            INTO :R_TEXT; 
 
            SELECT FIRST 1 
              LOCK_OPR.DT, 
              US_L.NAME 
            FROM LOCK_OPR 
            JOIN LOCK_OPR_EL ON LOCK_OPR_EL.LOCK_ID = LOCK_OPR.ID AND LOCK_OPR_EL.OPR_ID = :R_ID 
            JOIN "USER" US_L ON US_L.ID = LOCK_OPR.USER_ID 
            ORDER BY LOCK_OPR.DT DESC 
            INTO :R_LOCK_DT,:R_LOCK_USER_NAME; 
 
              SELECT 
                  --OUT_EL.OPR_ID, 
                  SUM(IN_EL.SUMA_SR), 
                  SUM(IN_EL.SUMA_FR) 
              FROM 
                  IN_EL INNER JOIN OPR_RAZPAD_NODE ON IN_EL.OPR_ID = :R_ID 
                  AND OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
                  INNER JOIN OUT_EL ON OUT_EL.ID = OPR_RAZPAD_NODE.OUT_EL_ID 
              --GROUP BY 1 
              INTO 
                  /*:L_OUT_OPR_ID,*/:R_SUMA_SR,:R_SUMA_FR; 
 
              /*IF (R_SUMA_SR > 0) THEN 
                  R_NADCENKA = ROUNDD(((COALESCE(R_SUMA_BEZ_DDS,R_SUMA)/R_SUMA_SR)-1)*100); 
              ELSE 
                  R_NADCENKA = NULL; */ 
 
              R_FAK_TOTAL = NULL; 
              R_NUMBER = NULL; 
              R_FAK_TOTAL = NULL; 
              R_FAK_DATE = NULL; 
              R_FAK_OPR_ID = NULL; 
              R_SUMA_BEZ_DDS = NULL; 
              SELECT 
                  FAK.NUMBER, 
                  FAK.TOTAL, 
                  OPR.OPR_DATE, 
                  FAK.OPR_ID, 
                  FAK.SUMA 
              FROM 
                  FAK 
                  INNER JOIN KI_NODE ON (KI_NODE.KI_OPR_ID = FAK.OPR_ID AND KI_NODE.SUB_KI_OPR_ID =:R_ID) 
                  INNER JOIN OPR ON OPR.ID = FAK.OPR_ID 
              UNION 
              SELECT 
                  FAK.NUMBER, 
                  FAK.TOTAL, 
                  OPR.OPR_DATE, 
                  FAK.OPR_ID, 
                  FAK.SUMA 
              FROM 
                  FAK 
                  INNER JOIN OPR ON OPR.ID = FAK.OPR_ID 
              WHERE 
                  FAK.OPR_ID = :R_ID 
              INTO 
                :R_NUMBER, :R_FAK_TOTAL,:R_FAK_DATE, :R_FAK_OPR_ID, :R_SUMA_BEZ_DDS; 
 
              R_OBEKT_ID = NULL; 
 
              SELECT FIRST 1 
                OUT.OBEKT_ID 
              FROM 
                OUT INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OUT.OPR_ID 
                INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID 
                INNER JOIN IN_EL ON IN_EL.ID = OPR_RAZPAD_NODE.IN_EL_ID AND IN_EL.OPR_ID =:R_ID 
              into :R_OBEKT_ID; 
 
              IF (R_PAY_TIP_2 IN (0,2)) then R_PAY_TIP_NAME = 'В БРОЙ'; 
 
              --SELECT FIRST 1 
              --  OUT.ID 
              --FROM 
              --  OPR_RAZPAD_NODE INNER JOIN IN_EL ON IN_EL.ID = OPR_RAZPAD_NODE.IN_EL_ID 
              --  INNER JOIN OUT_EL ON OUT_EL.ID = OPR_RAZPAD_NODE.OUT_EL_ID 
              --  INNER JOIN OUT ON OUT.OPR_ID = OUT_EL.OPR_ID 
              --WHERE 
              --  IN_EL.OPR_ID =:R_ID 
              --INTO :R_OUT_ID; 
 
              SELECT POR.NOMER FROM POR INNER JOIN POR_OUT_NODE ON POR_OUT_NODE.POR_ID =POR.ID AND POR_OUT_NODE.OUT_ID =:R_OUT_ID INTO :R_POR_NUM; 
 
              R_SUMA_RAZLIKA = ROUNDD(R_SUMA - R_SUMA_SR); 
              R_SUMA_RAZLIKA = -R_SUMA_RAZLIKA; 
              R_SUMA_RAZLIKA_FR = ROUNDD(R_SUMA - R_SUMA_FR); 
              R_SUMA_RAZLIKA_FR = - R_SUMA_RAZLIKA_FR; 
              R_SUMA = -R_SUMA; 
              R_SUMA_SR = -R_SUMA_SR; 
              R_SUMA_FR = -R_SUMA_FR; 
              SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE GET_SPR_PROD2_KLI (
    SIMPLE_ID INTEGER,
    P_FILTER VARCHAR(1000))
RETURNS (
    R_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_KOL_V DOUBLE PRECISION,
    R_SUMA_SR_V DOUBLE PRECISION,
    R_KLI_NAME VARCHAR(100))
AS
DECLARE VARIABLE L_KLI_ID INTEGER; 
begin 
  FOR EXECUTE STATEMENT 
    'SELECT 
        CASE WHEN OPR.KLI_ID IS NULL THEN CAST('' Без клиент '' AS VARCHAR(100)) ELSE 
        KLI.NAME END, 
        OPR.KLI_ID, 
        SUM(OUT_EL.KOL) AS KOL, 
        SUM(OUT_EL.SUMA) AS SUMA, 
        SUM(OUT_EL.SUMA_SR) AS SUMA_SR, 
        SUM(OUT_EL.SUMA_FR) AS SUMA_FR 
    FROM 
        OPR 
        INNER JOIN OUT_EL ON OPR.ID = OUT_EL.OPR_ID 
        INNER JOIN SKLAD ON OPR.SKLAD_ID = SKLAD.ID 
        INNER JOIN SIMPLE ON OUT_EL.SIMPLE_ID = SIMPLE.ID 
        LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
    WHERE 
        SIMPLE.ID ='|| :SIMPLE_ID || 'AND 
        --OPR.OPR_TIP IN (2, 34) AND 
        NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) AND' 
        ||:P_FILTER || '(1=1) 
    GROUP BY 1,2' 
    INTO :R_KLI_NAME, :L_KLI_ID, :R_KOL, :R_SUMA, :R_SUMA_SR, :R_SUMA_FR 
 
    DO 
    BEGIN 
    if (L_KLI_ID IS NOT NULL) then 
    EXECUTE STATEMENT 
    'SELECT 
        -SUM(IN_EL.KOL), 
        -SUM(IN_EL.SUMA_FR) 
    FROM 
        OPR 
        INNER JOIN IN_EL ON IN_EL.OPR_ID = OPR.ID 
        INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
    WHERE 
        SIMPLE.ID =' || :SIMPLE_ID || 'AND 
        OPR.OPR_TIP = 26 AND OPR.KLI_ID =' || :L_KLI_ID || ' AND ' ||:P_FILTER || '(1=1)' 
    INTO :R_KOL_V, :R_SUMA_SR_V; 
    ELSE 
    EXECUTE STATEMENT 
    'SELECT 
        -SUM(IN_EL.KOL), 
        -SUM(IN_EL.SUMA_FR) 
    FROM 
        OPR 
        INNER JOIN IN_EL ON IN_EL.OPR_ID = OPR.ID 
        INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
    WHERE 
        SIMPLE.ID =' || :SIMPLE_ID || 'AND 
        OPR.OPR_TIP = 26 AND OPR.KLI_ID IS NULL  AND ' ||:P_FILTER || '(1=1)' 
    INTO :R_KOL_V, :R_SUMA_SR_V; 
 
    if ((R_kol IS NOT NULL) or (R_KOL_V is not null))  then 
    SUSPEND; 
   END 
end^


ALTER PROCEDURE GET_SPR_PROD2_SKLAD (
    SIMPLE_ID INTEGER,
    P_FILTER VARCHAR(1000),
    P_FAKT INTEGER,
    P_FILTER_SKLAD VARCHAR(1000),
    P_FILTER_RET_STOKA VARCHAR(1000))
RETURNS (
    R_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_NAME VARCHAR(50),
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_KOL_V DOUBLE PRECISION,
    R_SUMA_SR_V DOUBLE PRECISION)
AS
DECLARE VARIABLE L_SKLAD_ID INTEGER;
DECLARE VARIABLE L_SQL VARCHAR(1000) CHARACTER SET WIN1251;
BEGIN  
    if (P_FAKT = 0) then 
    L_SQL = 'SELECT 
            SKLAD.NAME,  
            SKLAD.ID  
        FROM  
            SKLAD  
        WHERE SKLAD.IS_SYSTEM <> 1 AND ' 
        ||:P_FILTER_SKLAD ||' (1=1) ' ; 
     ELSE 
     L_SQL = 'SELECT 
                SKLAD.NAME,  
                SKLAD.ID  
              FROM 
                SKLAD  
              WHERE SKLAD.IS_SYSTEM = 1'; 
 
     FOR EXECUTE STATEMENT L_SQL 
     INTO :R_NAME,:L_SKLAD_ID 
  
    DO BEGIN  
    EXECUTE STATEMENT  
    'SELECT  
        SUM(OUT_EL.KOL) AS KOL,  
        SUM(OUT_EL.SUMA) AS SUMA,  
        SUM(OUT_EL.SUMA_SR) AS SUMA_SR,  
        SUM(OUT_EL.SUMA_FR) AS SUMA_FR  
    FROM  
        OPR  
        INNER JOIN OUT_EL ON OPR.ID = OUT_EL.OPR_ID  
        INNER JOIN SKLAD ON OPR.SKLAD_ID = SKLAD.ID  
        INNER JOIN SIMPLE ON OUT_EL.SIMPLE_ID = SIMPLE.ID  
    WHERE  
        SIMPLE.ID ='|| :SIMPLE_ID || 'AND  
        --OPR.OPR_TIP IN (2, 34) AND 
        NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) AND  
        OPR.SKLAD_ID =' ||:L_SKLAD_ID || ' AND '  
        ||:P_FILTER || '(1=1)' 
    INTO :R_KOL, :R_SUMA, :R_SUMA_SR, :R_SUMA_FR;  
 
 
    EXECUTE STATEMENT  
    'SELECT  
        -SUM(IN_EL.KOL),  
        -SUM(IN_EL.SUMA_FR)
    FROM  
        OPR  
        INNER JOIN IN_EL ON IN_EL.OPR_ID = OPR.ID  
        INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID  
        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID  
    WHERE  
        SIMPLE.ID =' || :SIMPLE_ID || 'AND  
        OPR.OPR_TIP IN (26,41) AND OPR.SKLAD_ID =' || :L_SKLAD_ID || ' AND ' ||:P_FILTER_RET_STOKA || '(1=1)' 
    INTO :R_KOL_V, :R_SUMA_SR_V;  
  
    if ((R_kol IS NOT NULL) or (R_KOL_V is not null))  then  
    SUSPEND;  
 
    R_KOL = 0; 
    R_SUMA = 0; 
    R_SUMA_SR = 0; 
    R_SUMA_FR = 0; 
    R_KOL_V = 0; 
    R_SUMA_SR_V = 0; 
    END  
END^


ALTER PROCEDURE GET_SPR_PRODUCTION (
    P_FLAG_FKT TYPE OF DOM_SMAL_INT)
RETURNS (
    R_ID INTEGER,
    R_USERNAME VARCHAR(30),
    R_SKLAD_IN TYPE OF DOM_CHAR_50,
    R_SKLAD_OUT TYPE OF DOM_CHAR_50,
    R_OPR_DATE DATE,
    R_SUMA_FR DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_OPR_OUT_ID INTEGER,
    R_OPR_IN_ID INTEGER,
    R_DATETIME TIMESTAMP,
    R_SKLAD_IN_ID SMALLINT,
    R_SKLAD_OUT_ID SMALLINT,
    R_IS_LOCK SMALLINT,
    R_OPR_TIP SMALLINT,
    R_LOCK_DT TIMESTAMP,
    R_LOCK_USER_NAME VARCHAR(30),
    R_USER_ID INTEGER,
    R_CAR_NUM TYPE OF DOM_CHAR_10,
    R_CAR_MARKA TYPE OF DOM_CHAR_20,
    R_CAR_DRIVER TYPE OF DOM_CHAR_30)
AS
BEGIN 
    FOR SELECT 
        PRODUCTION.ID, 
        "USER".NAME AS USERNAME, 
        SKLAD_IN.NAME AS SKLAD_IN , 
        SKLAD_OUT.NAME AS SKLAD_OUT, 
        OPR_IN.OPR_DATE , 
        OPR_SUMI.SUMA_FR, 
        OPR_SUMI.SUMA_SR, 
        OPR_OUT.ID AS OPR_OUT_ID, 
        OPR_IN.ID AS OPR_IN_ID, 
        OPR_IN.DATETIME, 
        OPR_IN.SKLAD_ID AS SKLAD_IN_ID, 
        OPR_OUT.SKLAD_ID AS SKLAD_OUT_ID, 
        OPR_OUT.IS_LOCK, 
        OPR_OUT.OPR_TIP, 
        OPR_OUT.USER_ID, 
        PRODUCTION.CARNUM, 
        PRODUCTION.CARM_MARKA, 
        PRODUCTION.CAR_DRIVER 
    FROM 
        PRODUCTION INNER JOIN OPR OPR_IN ON OPR_IN.ID = PRODUCTION.OPR_IN_ID 
        INNER JOIN OPR OPR_OUT ON OPR_OUT.ID=PRODUCTION.OPR_OUT_ID 
        INNER JOIN SKLAD SKLAD_IN ON SKLAD_IN.ID = OPR_IN.SKLAD_ID 
        INNER JOIN SKLAD SKLAD_OUT ON SKLAD_OUT.ID = OPR_OUT.SKLAD_ID 
        INNER JOIN "USER" ON OPR_IN.USER_ID = "USER".ID 
        INNER JOIN OPR_SUMI ON OPR_SUMI.OPR_ID = OPR_OUT.ID 
        JOIN SYSTEM ON 1=1 
    WHERE 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR_OUT.ID) 
        AND (((0 = :P_FLAG_FKT) AND (SYSTEM.H_SKLAD <> OPR_OUT.SKLAD_ID)) OR ((1 = :P_FLAG_FKT) AND (SYSTEM.H_SKLAD = OPR_OUT.SKLAD_ID))) 
    ORDER BY 1 
    INTO :R_ID,:R_USERNAME ,:R_SKLAD_IN ,:R_SKLAD_OUT,:R_OPR_DATE ,:R_SUMA_FR,:R_SUMA_SR, 
         :R_OPR_OUT_ID,:R_OPR_IN_ID,:R_DATETIME,:R_SKLAD_IN_ID,:R_SKLAD_OUT_ID, 
         :R_IS_LOCK,:R_OPR_TIP,:R_USER_ID, :R_CAR_NUM, :R_CAR_MARKA, :R_CAR_DRIVER 
    DO BEGIN 
        R_LOCK_DT = NULL; 
        R_LOCK_USER_NAME = NULL; 
 
        SELECT FIRST 1 
            LOCK_OPR.DT, 
            US_L.NAME 
        FROM 
            LOCK_OPR JOIN LOCK_OPR_EL ON LOCK_OPR_EL.LOCK_ID = LOCK_OPR.ID AND LOCK_OPR_EL.OPR_ID = :R_OPR_OUT_ID 
            JOIN "USER" US_L ON US_L.ID = LOCK_OPR.USER_ID 
        ORDER BY LOCK_OPR.DT DESC 
        INTO 
            :R_LOCK_DT,:R_LOCK_USER_NAME; 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_SPR_RAZHOD (
    P_FILTER_PARI_IO VARCHAR(1000),
    P_FROM_DATE VARCHAR(1000),
    TO_DATE VARCHAR(1000),
    P_FILTER_KLI VARCHAR(1000),
    P_FILTER_OBEKTI VARCHAR(1000),
    P_VALUTA SMALLINT,
    FLAG_CRYPT INTEGER,
    PASS VARCHAR(25),
    P_FILTER_IZP VARCHAR(1000),
    P_BASE_VALUTA INTEGER,
    P_TIP_SPR INTEGER,
    P_DDS DOUBLE PRECISION)
RETURNS (
    PRIH_RAZH_ID INTEGER,
    PRIH_RAZH_NAME VARCHAR(50),
    R_SUMA DOUBLE PRECISION,
    R_TIP INTEGER,
    R_VALUTA CHAR(3),
    R_SUMA_DDS DOUBLE PRECISION)
AS
declare variable L_PARI_IO_ID smallint; 
declare variable L_SUMA_RAZHOD numeric(10,2); 
declare variable L_SUMA_PRIHOD numeric(10,2); 
declare variable L_SUMA_NACH_PR numeric(10,2); 
declare variable L_SUMA_NACH_RAZ numeric(10,2); 
declare variable L_SUMA_NACH double precision; 
declare variable L_SUMA_PERIOD double precision; 
declare variable L_SUMA_SALDO double precision; 
declare variable L_SUMA_CRYPT_RAZH numeric(10,2); 
declare variable L_SUMA_CRYPT_PRIH numeric(10,2); 
declare variable L_SUMA_CRYPT numeric(10,2); 
declare variable L_SUMA_RAZH_IZP double precision; 
declare variable L_SUMA_NACH_RAZH_DDS double precision; 
declare variable L_SUMA_RAZH_DDS double precision; 
declare variable L_SUMA_NACH_PR_DDS double precision; 
declare variable L_SUMA_PRIHOD_DDS double precision; 
declare variable L_SUMA_RAZH_IZP_DDS double precision; 
declare variable L_SUMA double precision; 
declare variable L_SUMA_DDS double precision; 
declare variable L_SUMA_CRYPT_RAZH_DDS numeric(10,2); 
declare variable L_PARI_IO_FAK integer; 
declare variable L_SUMA_CRYPT_PRIH_DDS numeric(10,2); 
declare variable L_SUMA_PERIOD_DDS double precision; 
declare variable L_SUMA_SALDO_DDS double precision; 
declare variable L_SUMA_NACH_DDS double precision; 
declare variable S_ varchar(10000); 
BEGIN 
    L_SUMA_NACH_PR = 0; 
    L_SUMA_NACH_RAZ = 0; 
 
    SELECT 
        VALUTA.CODE 
    FROM 
        VALUTA 
    WHERE 
        VALUTA.ID =:P_VALUTA 
    INTO :R_VALUTA; 
 
    R_SUMA     = 0; 
    R_SUMA_DDS = 0; 
 
    IF (P_TIP_SPR = 0) THEN 
        FOR EXECUTE STATEMENT 
            'SELECT 
                SUM(PARI.SUMA), 
                SUM(PARI.SUMA) 
            FROM 
                PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                (PARI.TIP = 1) AND (PARI_IO.SPR_TIP = 1) AND (PARI_IO.FAK = 1) AND (PARI_IO.IS_ACTIVE = 1) AND (OPR.OPR_DATE <''' ||:P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI ||:P_FILTER_PARI_IO   /*Разход фактурни*/ 
            || 
            ' UNION ALL 
            SELECT 
                SUM(PARI.SUMA), 
                SUM(PARI.SUMA) 
            FROM 
                PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                (PARI.TIP = 1) AND (PARI_IO.SPR_TIP = 1) AND (PARI_IO.FAK = 0) AND (PARI_IO.IS_ACTIVE = 1) AND (OPR.OPR_DATE <''' ||:P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI ||:P_FILTER_PARI_IO   /*Разход нефактурни*/ 
            INTO :L_SUMA_NACH_RAZ,:L_SUMA_NACH_RAZH_DDS 
 
        DO BEGIN 
            L_SUMA_RAZHOD   = COALESCE(:L_SUMA_RAZHOD,0) + :L_SUMA_NACH_RAZ; 
            L_SUMA_RAZH_DDS =COALESCE(:L_SUMA_RAZH_DDS,0) + :L_SUMA_NACH_RAZH_DDS; 
        END 
    ELSE BEGIN 
        --FOR EXECUTE STATEMENT 
        S_ = 
            'SELECT 
                SUM(PARI.SUMA), 
                SUM(PARI.SUMA) 
            FROM 
                PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                (PARI.TIP = 1) AND (PARI_IO.SPR_TIP = 1) AND (PARI_IO.IS_ACTIVE = 1) 
                AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                AND (OPR.OPR_DATE <''' ||:P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI ||:P_FILTER_PARI_IO   /*Разход фактурни*/ 
            || 
            ' UNION ALL 
            SELECT 
                ROUNDD(SUM(PARI.SUMA) / ' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                SUM(PARI.SUMA) 
            FROM 
                PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
            WHERE 
                (PARI.TIP = 1) AND (PARI_IO.SPR_TIP = 1) AND (PARI_IO.IS_ACTIVE = 1) AND (OPR.OPR_DATE <''' ||:P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI ||:P_FILTER_PARI_IO;   /*Разход нефактурни*/ 
 
 
        FOR EXECUTE STATEMENT 
        S_ 
            INTO :L_SUMA,:L_SUMA_DDS 
 
 
 
        DO BEGIN 
            L_SUMA_RAZHOD   = COALESCE(:L_SUMA_RAZHOD,0) + COALESCE(:L_SUMA,0); 
            L_SUMA_RAZH_DDS = COALESCE(:L_SUMA_RAZH_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
        END 
    END 
 
    IF (P_TIP_SPR = 0) THEN 
        FOR EXECUTE STATEMENT 
            'SELECT 
                SUM(PARI.SUMA), 
                SUM(PARI.SUMA) 
            FROM 
                PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                (PARI.TIP = 0) AND (PARI_IO.SPR_TIP = 1) AND (PARI_IO.FAK = 0) 
                 AND (PARI_IO.IS_ACTIVE = 1) AND (OPR.OPR_DATE <'''|| :P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI ||:P_FILTER_PARI_IO /*Приход с фактура*/ 
            || 
            ' UNION ALL 
            SELECT 
                SUM(PARI.SUMA), 
                SUM(PARI.SUMA) 
            FROM 
                PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                (PARI.TIP = 0) AND (PARI_IO.SPR_TIP = 1) AND (PARI_IO.FAK = 1) AND (PARI_IO.IS_ACTIVE = 1) AND (OPR.OPR_DATE <'''|| :P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI ||:P_FILTER_PARI_IO /*Приход без фактура*/ 
            INTO :L_SUMA_NACH_PR,:L_SUMA_NACH_PR_DDS 
        DO BEGIN 
            L_SUMA_PRIHOD     = COALESCE(:L_SUMA_PRIHOD,0) + COALESCE(:L_SUMA_NACH_PR,0); 
            L_SUMA_PRIHOD_DDS = COALESCE(:L_SUMA_PRIHOD_DDS,0) + COALESCE(:L_SUMA_NACH_PR_DDS,0); 
        END 
        ELSE BEGIN 
            R_SUMA     = 0; 
            R_SUMA_DDS = 0; 
 
            FOR EXECUTE STATEMENT 
            'SELECT 
                SUM(PARI.SUMA), 
                SUM(PARI.SUMA) 
            FROM 
                PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                (PARI.TIP = 0) AND (PARI_IO.SPR_TIP = 1) 
                AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                AND (PARI_IO.IS_ACTIVE = 1) AND (OPR.OPR_DATE <'''|| :P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI ||:P_FILTER_PARI_IO /*Приход без фактура*/ 
            || 
            ' UNION ALL 
            SELECT 
                ROUNDD(PARI.SUMA /' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                PARI.SUMA 
            FROM 
                PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
            WHERE 
                (PARI.TIP = 0) AND (PARI_IO.SPR_TIP = 1) AND (PARI_IO.IS_ACTIVE = 1) AND (OPR.OPR_DATE <'''|| :P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI ||:P_FILTER_PARI_IO /*Приход с фактура*/ 
            INTO :L_SUMA_NACH_PR,:L_SUMA_NACH_PR_DDS 
 
            DO BEGIN 
                L_SUMA_PRIHOD     =COALESCE(:L_SUMA_PRIHOD,0) + COALESCE(:L_SUMA_NACH_PR,0); 
                L_SUMA_PRIHOD_DDS =COALESCE(:L_SUMA_PRIHOD_DDS,0) + COALESCE(:L_SUMA_NACH_PR_DDS,0); 
            END 
        END 
 
    if (P_BASE_VALUTA = 0) then 
    EXECUTE STATEMENT 
        'SELECT 
            SUM(OPR_SUMI.SUMA_FR), 
            SUM(OPR_SUMI.SUMA_FR) 
        FROM 
            OPR_SUMI INNER JOIN OPR ON OPR.ID = OPR_SUMI.OPR_ID 
            INNER JOIN SKLAD PARI ON PARI.ID = OPR.SKLAD_ID 
            INNER JOIN IZP ON IZP.OPR_ID = OPR.ID 
            INNER JOIN IZP_TIP ON IZP_TIP.ID = IZP.IZP_TIP_ID 
        WHERE 
            (OPR.OPR_DATE<='''|| :P_FROM_DATE||''')' 
            ||:P_FILTER_OBEKTI 
            ||:P_FILTER_KLI ||:P_FILTER_IZP 
        INTO :L_SUMA_RAZH_IZP,:L_SUMA_RAZH_IZP_DDS;           /*Изписване*/ 
    else 
        L_SUMA_RAZH_IZP = 0; 
 
 
    L_SUMA_CRYPT = 0; 
    IF (FLAG_CRYPT = 1) then BEGIN 
        IF (P_TIP_SPR = 0) THEN 
            FOR EXECUTE STATEMENT 
            'SELECT 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
            FROM 
                PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                (PARI.TIP = 1) AND (PARI_IO.SPR_TIP = 1) AND (PARI_IO.FAK = 1) AND (PARI_IO.IS_ACTIVE = 1) AND (OPR.OPR_DATE <''' ||:P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI ||:P_FILTER_PARI_IO    /*Разход криптирана каса*/ 
            || 
            ' UNION ALL 
            SELECT 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
            FROM 
                PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                (PARI.TIP = 1) AND (PARI_IO.SPR_TIP = 1) AND (PARI_IO.FAK = 0) AND (PARI_IO.IS_ACTIVE = 1) AND (OPR.OPR_DATE <''' ||:P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
            INTO :L_SUMA,:L_SUMA_DDS 
            DO BEGIN 
                L_SUMA_CRYPT_RAZH =COALESCE(:L_SUMA_CRYPT_RAZH,0) + COALESCE(:L_SUMA,0); 
                L_SUMA_CRYPT_RAZH_DDS =COALESCE(:L_SUMA_CRYPT_RAZH_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
            END 
        ELSE BEGIN 
            R_SUMA     = 0; 
            R_SUMA_DDS = 0; 
 
            FOR EXECUTE STATEMENT 
            'SELECT 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
            FROM 
                PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                (PARI.TIP = 1) AND (PARI_IO.SPR_TIP = 1) 
                AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                AND (PARI_IO.IS_ACTIVE = 1) AND (OPR.OPR_DATE <''' ||:P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI ||:P_FILTER_PARI_IO    /*Разход криптирана каса*/ 
            || 
            ' UNION ALL 
            SELECT 
                ROUNDD(SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2)))/' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
            FROM 
                PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
            WHERE 
                (PARI.TIP = 1) AND (PARI_IO.SPR_TIP = 1) AND (PARI_IO.IS_ACTIVE = 1) AND (OPR.OPR_DATE <''' ||:P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
            INTO :L_SUMA,:L_SUMA_DDS 
            DO BEGIN 
                L_SUMA_CRYPT_RAZH =COALESCE(:L_SUMA_CRYPT_RAZH,0) + COALESCE(:L_SUMA,0); 
                L_SUMA_CRYPT_RAZH_DDS =COALESCE(:L_SUMA_CRYPT_RAZH_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
            END 
        END 
 
        IF (P_TIP_SPR = 0) THEN 
            FOR EXECUTE STATEMENT 
            'SELECT 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
            FROM 
                PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                (PARI.TIP = 0) AND (PARI_IO.SPR_TIP = 1) 
                AND (PARI_IO.IS_ACTIVE = 1) AND (OPR.OPR_DATE <'''|| :P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI ||:P_FILTER_PARI_IO /*Приход криптирана каса*/ 
            || 
            ' UNION ALL 
            SELECT 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
            FROM 
                PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                (PARI.TIP = 0) AND (PARI_IO.SPR_TIP = 1) 
                AND (PARI_IO.IS_ACTIVE = 1) AND (OPR.OPR_DATE <'''|| :P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI ||:P_FILTER_PARI_IO /*Приход криптирана каса*/ 
            INTO :L_SUMA, :L_SUMA_DDS 
            DO BEGIN 
                L_SUMA_CRYPT_PRIH     = COALESCE(:L_SUMA_CRYPT_PRIH,0) + COALESCE(:L_SUMA,0); 
                L_SUMA_CRYPT_PRIH_DDS = COALESCE(:L_SUMA_CRYPT_PRIH_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
            END 
 
        ELSE BEGIN 
            R_SUMA     = 0; 
            R_SUMA_DDS = 0; 
 
            FOR EXECUTE STATEMENT 
            'SELECT 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
            FROM 
                PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                (PARI.TIP = 0) AND (PARI_IO.SPR_TIP = 1) 
                AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                AND (PARI_IO.IS_ACTIVE = 1) AND (OPR.OPR_DATE <'''|| :P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI ||:P_FILTER_PARI_IO /*Приход криптирана каса*/ 
            || 
            ' UNION ALL 
            SELECT 
                ROUNDD(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))/' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2)) 
            FROM 
                PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
            WHERE 
                (PARI.TIP = 0) AND (PARI_IO.SPR_TIP = 1) AND (PARI_IO.IS_ACTIVE = 1) AND (OPR.OPR_DATE <'''|| :P_FROM_DATE ||''') AND PARI.VALUTA_ID ='||:P_VALUTA||'' 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI ||:P_FILTER_PARI_IO /*Приход криптирана каса*/ 
            INTO :L_SUMA, :L_SUMA_DDS 
            DO BEGIN 
                L_SUMA_CRYPT_PRIH     = COALESCE(:L_SUMA_CRYPT_PRIH,0) + COALESCE(:L_SUMA,0); 
                L_SUMA_CRYPT_PRIH_DDS = COALESCE(:L_SUMA_CRYPT_PRIH_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
            END 
        END 
        L_SUMA_CRYPT =coalesce(L_SUMA_CRYPT_RAZH, 0) - COALESCE(L_SUMA_CRYPT_PRIH, 0); 
 
    END 
 
    L_SUMA_NACH     = COALESCE(L_SUMA_RAZHOD,0) - COALESCE(L_SUMA_PRIHOD,0) + L_SUMA_CRYPT + :L_SUMA_RAZH_IZP; 
    R_SUMA          = L_SUMA_NACH; 
    R_SUMA_DDS      = COALESCE(L_SUMA_RAZH_DDS,0) - COALESCE(L_SUMA_PRIHOD_DDS,0) + (COALESCE(:L_SUMA_CRYPT_RAZH_DDS,0) - COALESCE(:L_SUMA_CRYPT_PRIH_DDS,0)) + COALESCE(:L_SUMA_RAZH_IZP_DDS,0); 
    L_SUMA_NACH_DDS = COALESCE(R_SUMA_DDS,0); 
    R_SUMA_DDS      = COALESCE(:R_SUMA_DDS,0); 
 
    PRIH_RAZH_ID = -1; 
    IF (:P_FROM_DATE <> '01.01.0100') THEN 
        PRIH_RAZH_NAME = 'Разход до:'||:P_FROM_DATE; 
    ELSE 
        PRIH_RAZH_NAME = 'Разход:'; 
    SUSPEND; 
 
    PRIH_RAZH_NAME = NULL; 
 
        FOR EXECUTE STATEMENT 
                        'SELECT 
                            PARI_IO.ID, 
                            PARI_IO.NAME, 
                            0, 
                            PARI_IO.FAK 
                        FROM 
                            PARI_IO 
                        WHERE 
                            ((PARI_IO.SPR_TIP = 1) AND (PARI_IO.IS_ACTIVE = 1))' ||:P_FILTER_PARI_IO ||' 
                        UNION 
                        SELECT 
                            IZP_TIP.ID, 
                            IZP_TIP.NAME, 
                            1, 
                            0 
                        FROM 
                            IZP_TIP 
                        WHERE 
                            (1=1) '||:P_FILTER_IZP|| 
                        'ORDER BY 2' 
                        INTO :L_PARI_IO_ID, :PRIH_RAZH_NAME, :R_TIP, :L_PARI_IO_FAK 
DO BEGIN 
    L_SUMA_RAZHOD   = 0; 
    L_SUMA_RAZH_DDS = 0; 
    L_SUMA_PRIHOD = 0; 
    L_SUMA_PRIHOD_DDS = 0; 
 
    IF (R_TIP = 0) THEN BEGIN 
        IF (:P_TIP_SPR = 0) THEN 
            EXECUTE STATEMENT 
                'SELECT 
                    SUM(PARI.SUMA), 
                    SUM(PARI.SUMA) 
                FROM 
                    PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 1 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_OBEKTI ||:P_FILTER_KLI /*Разход*/ 
                INTO :L_SUMA_RAZHOD,:L_SUMA_RAZH_DDS; 
        ELSE BEGIN 
            R_SUMA     = 0; 
            R_SUMA_DDS = 0; 
 
            FOR EXECUTE STATEMENT 
                'SELECT 
                    SUM(PARI.SUMA), 
                    SUM(PARI.SUMA) 
                FROM 
                    PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                WHERE 
                    PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 1 
                    AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_OBEKTI ||:P_FILTER_KLI /*Разход*/ 
                    || 
                ' UNION ALL 
                SELECT 
                    ROUNDD(SUM(PARI.SUMA) /' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                    SUM(PARI.SUMA) 
                FROM 
                    PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                    INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                    INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
                WHERE 
                    PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 1 
                    AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                    ||:P_FILTER_OBEKTI ||:P_FILTER_KLI /*Разход*/ 
                INTO :L_SUMA,:L_SUMA_DDS 
        DO BEGIN 
            L_SUMA_RAZHOD =COALESCE(:L_SUMA_RAZHOD,0) + COALESCE(:L_SUMA,0); 
            L_SUMA_RAZH_DDS =COALESCE(:L_SUMA_RAZH_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
        END 
    END 
 
    IF (:P_TIP_SPR = 0) THEN 
        EXECUTE STATEMENT 
        'SELECT 
            SUM(PARI.SUMA), 
            SUM(PARI.SUMA) 
        FROM 
            PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
            INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
        WHERE 
            PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 0 
            AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
            ||:P_FILTER_OBEKTI 
            ||:P_FILTER_KLI/*Приход*/ 
        INTO :L_SUMA_PRIHOD,:L_SUMA_PRIHOD_DDS; 
    ELSE BEGIN 
        R_SUMA     = 0; 
        R_SUMA_DDS = 0; 
 
        FOR EXECUTE STATEMENT 
        'SELECT 
            SUM(PARI.SUMA), 
            SUM(PARI.SUMA) 
        FROM 
            PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
            INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
        WHERE 
            PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 0 
            AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
            AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
            ||:P_FILTER_OBEKTI 
            ||:P_FILTER_KLI/*Приход*/ 
        || 
        ' UNION ALL 
        SELECT 
            ROUNDD(SUM(PARI.SUMA)/' || CAST(:P_DDS AS VARCHAR(5)) || '), 
            SUM(PARI.SUMA) 
        FROM 
            PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
            INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
        WHERE 
            PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 0 
            AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
            ||:P_FILTER_OBEKTI 
            ||:P_FILTER_KLI/*Приход*/ 
        INTO :L_SUMA,:L_SUMA_DDS 
        DO BEGIN 
            L_SUMA_PRIHOD = COALESCE(:L_SUMA_PRIHOD,0) + COALESCE(:L_SUMA,0); 
            L_SUMA_PRIHOD_DDS = COALESCE(:L_SUMA_PRIHOD_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
        END 
    END 
END 
ELSE 
    IF (P_BASE_VALUTA = 0) THEN 
        EXECUTE STATEMENT 
        'SELECT 
            SUM(OPR_SUMI.SUMA_FR), 
            SUM(OPR_SUMI.SUMA_FR) 
        FROM 
            OPR_SUMI INNER JOIN OPR ON OPR.ID = OPR_SUMI.OPR_ID 
            INNER JOIN SKLAD PARI ON PARI.ID = OPR.SKLAD_ID 
            INNER JOIN IZP ON IZP.OPR_ID = OPR.ID 
        WHERE OPR.OPR_DATE>='''||:P_FROM_DATE||''' AND OPR.OPR_DATE<='''||:TO_DATE||''' AND IZP.IZP_TIP_ID ='||:L_PARI_IO_ID 
            ||:P_FILTER_OBEKTI 
            ||:P_FILTER_KLI 
        INTO :L_SUMA_RAZH_IZP,:L_SUMA_RAZH_IZP_DDS; 
    ELSE 
        L_SUMA_RAZH_IZP = 0; 
 
    L_SUMA_CRYPT = 0; 
    if (FLAG_CRYPT = 1) then 
    BEGIN 
        IF (:P_TIP_SPR = 0) THEN BEGIN 
            EXECUTE STATEMENT 
            'SELECT 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
            FROM 
                PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 1 
                AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                ||:P_FILTER_OBEKTI ||:P_FILTER_KLI /*Разход криптирана каса*/ 
            INTO :L_SUMA_CRYPT_RAZH,:L_SUMA_CRYPT_RAZH_DDS; 
 
 
            EXECUTE STATEMENT 
            'SELECT 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
            FROM 
                PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 0 
                AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI/*Приход криптирана каса*/ 
            INTO :L_SUMA_CRYPT_PRIH, :L_SUMA_CRYPT_PRIH_DDS; 
        END 
        ELSE BEGIN 
            R_SUMA     = 0; 
            R_SUMA_DDS = 0; 
 
            FOR EXECUTE STATEMENT 
            'SELECT 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
            FROM 
                PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 1 
                AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                ||:P_FILTER_OBEKTI ||:P_FILTER_KLI /*Разход криптирана каса*/ 
            || 
            ' UNION ALL 
            SELECT 
                ROUNDD(SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2)))/' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
            FROM 
                PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = pari.OPR_ID 
            WHERE 
                PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 1 
                AND OPR.OPR_DATE>='''||:P_FROM_DATE ||'''AND OPR.OPR_DATE <='''||:TO_DATE ||''' and PARI.VALUTA_ID ='||:P_VALUTA 
                ||:P_FILTER_OBEKTI ||:P_FILTER_KLI /*Разход криптирана каса*/ 
 
            INTO :L_SUMA,:L_SUMA_DDS 
            DO BEGIN 
                L_SUMA_CRYPT_RAZH     = COALESCE(:L_SUMA_CRYPT_RAZH,0) + COALESCE(:L_SUMA,0); 
                L_SUMA_CRYPT_RAZH_DDS = COALESCE(:L_SUMA_CRYPT_RAZH_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
            END 
 
            FOR EXECUTE STATEMENT 
            'SELECT 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))), 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
            FROM 
                PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
            WHERE 
                PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 0 
                AND NOT EXISTS (SELECT PARI_FAKINUSLUGA_NODE.PARI_ID FROM PARI_FAKINUSLUGA_NODE WHERE PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID) 
                AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI/*Приход криптирана каса*/ 
 
            || 
            ' UNION ALL 
            SELECT 
                ROUNDD(SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2)))/' || CAST(:P_DDS AS VARCHAR(5)) || '), 
                SUM(CAST(DECRYPT_DOUBLE(PARI.SUMA, '''||:PASS||''') AS NUMERIC(10,2))) 
            FROM 
                PARI_CRYPT PARI INNER JOIN OPR ON PARI.OPR_ID = OPR.ID 
                INNER JOIN PARI_IO ON PARI_IO.ID = PARI.PARI_IO_ID 
                INNER JOIN PARI_FAKINUSLUGA_NODE ON PARI_FAKINUSLUGA_NODE.PARI_ID = PARI.OPR_ID 
            WHERE 
                PARI_IO.ID ='||:L_PARI_IO_ID ||' AND PARI.TIP = 0 
                AND OPR.OPR_DATE>='''||:P_FROM_DATE||'''AND OPR.OPR_DATE <='''||:TO_DATE ||'''and PARI.VALUTA_ID ='||:P_VALUTA 
                ||:P_FILTER_OBEKTI 
                ||:P_FILTER_KLI/*Приход криптирана каса*/ 
            INTO :L_SUMA,:L_SUMA_DDS 
 
            DO BEGIN 
                L_SUMA_CRYPT_PRIH     = COALESCE(:L_SUMA_CRYPT_PRIH,0) + COALESCE(:L_SUMA,0); 
                L_SUMA_CRYPT_PRIH_DDS = COALESCE(:L_SUMA_CRYPT_PRIH_DDS,0) + COALESCE(:L_SUMA_DDS,0); 
            END 
        END 
        L_SUMA_CRYPT = COALESCE(L_SUMA_CRYPT_RAZH, 0) - COALESCE(L_SUMA_CRYPT_PRIH, 0); 
    end 
 
    if (R_TIP = 0) then BEGIN 
        R_SUMA = COALESCE(L_SUMA_RAZHOD,0) - COALESCE(L_SUMA_PRIHOD,0) + L_SUMA_CRYPT; 
        R_SUMA_DDS = COALESCE(L_SUMA_RAZH_DDS,0) - COALESCE(:L_SUMA_PRIHOD_DDS,0) + (COALESCE(:L_SUMA_CRYPT_RAZH_DDS,0) - COALESCE(:L_SUMA_CRYPT_PRIH_DDS,0)); 
    END 
    ELSE BEGIN 
        R_SUMA = COALESCE(ROUNDD(L_SUMA_RAZH_IZP),0); 
        R_SUMA_DDS = COALESCE(ROUNDD(L_SUMA_RAZH_IZP_DDS),0); 
    END 
 
    L_SUMA_PERIOD = COALESCE(L_SUMA_PERIOD,0) + R_SUMA; 
    L_SUMA_PERIOD_DDS = COALESCE(:L_SUMA_PERIOD_DDS,0) + R_SUMA_DDS; 
    PRIH_RAZH_ID = L_PARI_IO_ID; 
    SUSPEND; 
END 
    L_SUMA_SALDO     = :L_SUMA_NACH + COALESCE(:L_SUMA_PERIOD,0); 
    L_SUMA_SALDO_DDS = COALESCE(:L_SUMA_NACH_DDS,0) + COALESCE(:L_SUMA_PERIOD_DDS,0); 
    PRIH_RAZH_ID = -2; 
 
    IF ((:P_FROM_DATE <> '01.01.0100') AND (:TO_DATE <> '31.12.9999')) THEN 
        PRIH_RAZH_NAME = 'Разход от '||:P_FROM_DATE ||' до '||:TO_DATE; 
    ELSE 
        PRIH_RAZH_NAME = 'Разход общо:'; 
 
    R_SUMA = L_SUMA_PERIOD; 
    R_SUMA_DDS = L_SUMA_PERIOD_DDS; 
    SUSPEND; 
END^


ALTER PROCEDURE GET_SPR_SALE (
    P_FROM_DATE TYPE OF DOM_DATE,
    P_TO_DATE TYPE OF DOM_DATE,
    P_FILTER TYPE OF DOM_INT64,
    P_OBEKT_ID TYPE OF DOM_KEY,
    P_PC_IDS TYPE OF DOM_CHAR_1000)
RETURNS (
    R_OPR_ID TYPE OF DOM_KEY,
    R_SUMA TYPE OF DOM_SUMA,
    R_DATE_TIME TYPE OF DOM_DATE_TIME,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_KLI_ID TYPE OF DOM_KEY,
    R_SKLAD_ID TYPE OF DOM_KEY,
    R_OUT_ID TYPE OF DOM_KEY,
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_SKLAD_NAME TYPE OF DOM_CHAR_50,
    R_USER_ID TYPE OF DOM_KEY,
    R_USER_NAME TYPE OF DOM_CHAR_30,
    R_PAY_TYPE TYPE OF DOM_FLAG,
    R_OPR_TIP TYPE OF DOM_SMAL_INT,
    R_TEXT TYPE OF DOM_CHAR_1000,
    R_FIRMA_ID TYPE OF DOM_KEY,
    R_FIRMA_NAME TYPE OF DOM_CHAR_100,
    R_OBEKT_ID TYPE OF DOM_KEY,
    R_OBEKT_NAME TYPE OF DOM_CHAR_50,
    R_DIST_NAME TYPE OF DOM_CHAR_1000,
    R_DIST_SUMA TYPE OF DOM_SUMA,
    R_INVOICE_NUMBER TYPE OF DOM_CHAR_10,
    R_INVOICE_TOTAL TYPE OF DOM_SUMA,
    R_INVOICE_DATE TYPE OF DOM_DATE,
    R_INVOICE_OPR_ID TYPE OF DOM_KEY,
    R_DIST_PAY TYPE OF DOM_SMAL_INT,
    R_IS_LOCK TYPE OF DOM_SMAL_INT,
    R_FP TYPE OF DOM_SMAL_INT,
    R_OTC_ID TYPE OF DOM_KEY,
    R_STATUS TYPE OF DOM_SMAL_INT,
    R_OWNER_ID TYPE OF DOM_KEY_SMALL,
    R_OWNER_NAME TYPE OF DOM_CHAR_50,
    R_TD_NUM TYPE OF DOM_INT,
    R_NET_AMOUNT TYPE OF DOM_SUMA,
    R_SUMA_SR TYPE OF DOM_SUMA,
    R_SUMA_FR TYPE OF DOM_SUMA,
    R_SUMA_RAZLIKA_SR TYPE OF DOM_SUMA,
    R_NADCENKA_SR TYPE OF CURRENCY,
    R_SUMA_RAZLIKA_FR TYPE OF DOM_SUMA,
    R_NADCENKA_FR TYPE OF CURRENCY,
    R_PAY_TYPE_NAME TYPE OF DOM_CHAR_300,
    R_USER_CREATE_POR_PRODUCTION TYPE OF DOM_CHAR_30)
AS
DECLARE VARIABLE L_COUNTER_1 TYPE OF DOM_INT; 
DECLARE VARIABLE L_PC_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_COUNTER_2 TYPE OF DOM_INT; 
DECLARE VARIABLE L_SUMA_IZL TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_TIP_CENI_DDS TYPE OF DOM_INT; 
DECLARE VARIABLE L_SUMA_B_OTS TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_FLAG_SUSPEND INTEGER; 
BEGIN 
    /* 
        p_filter 
        1 - със сторно операции; 
        2 - с анулирани; 
        4 - колона коментар видима; 
        8 - с филтър по дата; 
        16 - с филтър дата/час на операцията; 
        32 - колона фирми видима; 
        64 - колона обект видима; 
        128 - колона дистрибутор; 
        256 - колона фактура номер, дата ..; 
        512 - колона собственик; 
        1024 - колона нетна сума; 
        2048 - колони за сума средна и сума първа влязла, разлики и процент; 
        4096 - филтър по тип плащане; 
        8192 - фактурен склад; 
        16384 - колона смесен тип плащане; 
        32768 - колона оператор създал поръчка за производство 
    */ 
    P_FROM_DATE = COALESCE(P_FROM_DATE, '01.01.2000'); 
    P_TO_DATE = COALESCE(P_TO_DATE, '31.12.2100'); 
 
    FOR WITH OPR_DATE AS 
    (SELECT 
        OPR.ID, 
        OPR.SUMA, 
        OPR.DATETIME, 
        OPR.OPR_DATE, 
        OPR.KLI_ID, 
        OPR.SKLAD_ID, 
        OPR.USER_ID, 
        OPR.OPR_TIP, 
        OPR.PC_ID, 
        OPR.IS_LOCK, 
        OPR.OTC_ID 
    FROM 
        OPR 
    WHERE 
        OPR.OPR_DATE BETWEEN :P_FROM_DATE AND :P_TO_DATE AND BIN_AND(:P_FILTER, 8)>0 
        AND ((BIN_AND(:P_FILTER, 8192) > 0 AND OPR.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) and opr.OPR_TIP in (23)) 
            OR (BIN_AND(:P_FILTER, 8192) = 0 AND COALESCE(OPR.SKLAD_ID, 0) <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM) and opr.OPR_TIP in (2,34))) 
 
 
    UNION 
 
    SELECT 
        OPR.ID, 
        OPR.SUMA, 
        OPR.DATETIME, 
        OPR.OPR_DATE, 
        OPR.KLI_ID, 
        OPR.SKLAD_ID, 
        OPR.USER_ID, 
        OPR.OPR_TIP, 
        OPR.PC_ID, 
        OPR.IS_LOCK, 
        OPR.OTC_ID 
    FROM 
        OPR 
    WHERE 
        OPR.DATETIME BETWEEN CAST(:P_FROM_DATE as TIMESTAMP) AND DATEADD(23 HOUR TO cast(:P_TO_DATE as TIMESTAMP)) 
        AND BIN_AND(:P_FILTER, 16)>0 
        AND ((BIN_AND(:P_FILTER, 8192) > 0 AND OPR.SKLAD_ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) and opr.OPR_TIP in (23)) 
            OR (BIN_AND(:P_FILTER, 8192) = 0 AND COALESCE(OPR.SKLAD_ID, 0) <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM) and opr.OPR_TIP in (2,34))) 
 
    ) 
    SELECT 
        OPR_date.ID, 
        OPR_date.SUMA, 
        OPR_date.DATETIME, 
        OPR_date.OPR_DATE, 
        OPR_date.KLI_ID, 
        OPR_date.SKLAD_ID, 
        OUT.ID, 
        KLI.NAME, 
        SKLAD.NAME, 
        OPR_date.USER_ID, 
        "USER".NAME, 
        OUT.PAY_TIP, 
        OPR_DATE.OPR_TIP, 
        KLI.FIRMA_ID, 
        OPR_DATE.PC_ID, 
        OUT.OBEKT_ID, 
        OPR_DATE.IS_LOCK, 
        OUT.FP, 
        OPR_DATE.OTC_ID, 
        SKLAD.OWNER_ID, 
        OUT.TD 
    FROM 
        OUT INNER JOIN OPR_DATE ON OPR_DATE.ID = OUT.OPR_ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR_DATE.SKLAD_ID 
        INNER JOIN "USER" ON "USER".ID = OPR_DATE.USER_ID 
        INNER JOIN TMP_SEL_1 ON TMP_SEL_1.ID = OPR_DATE.USER_ID 
        LEFT JOIN KLI ON KLI.ID = OPR_DATE.KLI_ID 
 
    UNION ALL 
 
    SELECT 
        OPR_date.ID, 
        OPR_date.SUMA, 
        OPR_date.DATETIME, 
        OPR_date.OPR_DATE, 
        OPR_date.KLI_ID, 
        OPR_date.SKLAD_ID, 
        OUT.ID, 
        KLI.NAME, 
        'С подпродажби', 
        OPR_date.USER_ID, 
        "USER".NAME, 
        OUT.PAY_TIP, 
        OPR_DATE.OPR_TIP, 
        kli.FIRMA_ID, 
        OPR_DATE.PC_ID, 
        OUT.OBEKT_ID, 
        OPR_DATE.IS_LOCK, 
        OUT.FP, 
        OPR_DATE.OTC_ID, 
        SKLAD.OWNER_ID, 
        OUT.TD 
    FROM 
        PROD_NODE INNER JOIN OPR_DATE ON OPR_DATE.ID = PROD_NODE.OPR_PROD_ID 
        INNER JOIN OUT ON OUT.OPR_ID = OPR_DATE.ID 
        LEFT JOIN SKLAD ON SKLAD.ID = OPR_date.SKLAD_ID 
        INNER JOIN "USER" ON "USER".ID = OPR_date.USER_ID 
        INNER JOIN TMP_SEL_1 ON TMP_SEL_1.ID = OPR_date.USER_ID 
        LEFT JOIN KLI ON KLI.ID = OPR_date.KLI_ID 
 
 
    INTO :R_OPR_ID,:R_SUMA, :R_DATE_TIME, :R_OPR_DATE, :R_KLI_ID, :R_SKLAD_ID, :R_OUT_ID, :R_KLI_NAME, 
    :R_SKLAD_NAME, R_USER_ID, :R_USER_NAME, :R_PAY_TYPE, :R_OPR_TIP, :R_FIRMA_ID, :L_PC_ID, 
    :R_OBEKT_ID, :R_IS_LOCK, :R_FP, :R_OTC_ID, :R_OWNER_ID, :R_TD_NUM 
 
    DO BEGIN 
        R_INVOICE_NUMBER = null; 
        R_INVOICE_TOTAL = null; 
        R_INVOICE_DATE = null; 
        R_INVOICE_OPR_ID = null; 
        L_FLAG_SUSPEND = '1'; 
        R_USER_CREATE_POR_PRODUCTION = NULL; 
        --R_FP = NULL; 
 
        IF (EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = :R_OPR_ID)) THEN 
            R_STATUS = 2; 
        ELSE IF (EXISTS (SELECT OPR_EDIT.ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID = :R_OPR_ID)) THEN 
            R_STATUS = 1; 
        ELSE 
            R_STATUS = 0; 
 
        IF ((BIN_AND(P_FILTER, 2) > 0) OR (:R_STATUS <> 2))  THEN BEGIN 
            R_TEXT = NULL; 
            IF (BIN_AND(P_FILTER, 4) > 0) THEN 
                SELECT FIRST 1 
                    CAST(COMMENTS.NOTE as DOM_CHAR_1000) 
                FROM 
                    COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
                WHERE 
                    COMMENT_OPR_NODE.OPR_ID = :R_OPR_ID 
                ORDER BY 
                    COMMENT_OPR_NODE.ID DESC 
                INTO :R_TEXT; 
 
            IF (BIN_AND(:P_FILTER, 32) > 0) THEN 
                SELECT 
                    FIRMI.NAME_FAK 
                FROM 
                    FIRMI 
                WHERE 
                    FIRMI.ID =:R_FIRMA_ID 
                INTO :R_FIRMA_NAME; 
            IF (BIN_AND(:P_FILTER, 64) > 0) THEN 
                SELECT 
                    OBEKT.NAME 
                FROM 
                    OBEKT 
                WHERE 
                    OBEKT.ID = IIF(:P_OBEKT_ID = -1, :R_OBEKT_ID, IIF((:P_PC_IDS) CONTAINING :L_PC_ID, :P_OBEKT_ID, :R_OBEKT_ID)) 
                INTO :R_OBEKT_NAME; 
            IF (BIN_AND(:P_FILTER, 128) > 0) THEN 
                SELECT 
                    SUM(PARI_DIST.SUMA), 
                    CAST(SUBSTRING(LIST(KLI.NAME) from 1 FOR 1000) AS DOM_CHAR_1000) 
                FROM 
                    PARI_DIST INNER JOIN OPR ON OPR.ID = PARI_DIST.OPR_ID 
                    INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
                WHERE 
                    PARI_DIST.OPR_PROD_ID =:R_OPR_ID 
                    AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = PARI_DIST.OPR_ID) 
                INTO :R_DIST_SUMA, :R_DIST_NAME; 
 
            IF (BIN_AND(:P_FILTER, 256) > 0) THEN 
                SELECT FIRST 1 
                    FAK.NUMBER, 
                    IIF(FAK.TIP = 4, (SELECT SUM(ROUND(FAK_EL.SUMA_TOTAL * FAK.KURS_VALUTA, 2)) FROM FAK_EL WHERE FAK_EL.OPR_ID = FAK.OPR_ID), FAK.TOTAL), 
                    OPR.OPR_DATE, 
                    FAK.OPR_ID 
                FROM 
                    FAK INNER JOIN FAK_PROD ON (FAK_PROD.OPR_ID = :R_OPR_ID AND FAK_PROD.FAK_ID = FAK.ID) 
                    INNER JOIN OPR ON OPR.ID = FAK.OPR_ID 
                INTO 
                    :R_INVOICE_NUMBER, :R_INVOICE_TOTAL,:R_INVOICE_DATE, :R_INVOICE_OPR_ID; 
 
            SELECT 
                COUNT(PARI_DIST.ID) 
            FROM 
                PARI_DIST 
            WHERE 
                PARI_DIST.OPR_PROD_ID = :R_OPR_ID 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = PARI_DIST.OPR_ID) 
            INTO 
                :L_COUNTER_1; 
 
            SELECT 
                COUNT(PARI_DIST.ID) 
            FROM 
                PARI_DIST 
            WHERE 
                PARI_DIST.OPR_PROD_ID = :R_OPR_ID 
                AND PARI_DIST.PAY_TIP = 1 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = PARI_DIST.OPR_ID) 
            INTO 
                :L_COUNTER_2; 
 
            IF (L_COUNTER_1 > L_COUNTER_2) THEN 
                R_DIST_PAY = 0; 
            ELSE 
                R_DIST_PAY = 1; 
 
            IF (L_COUNTER_1 = 0) THEN 
                R_DIST_PAY = -1; 
 
            IF (BIN_AND(:P_FILTER, 512) > 0) THEN 
            BEGIN 
                SELECT 
                    OWNER.NAME 
                FROM 
                    OWNER 
                WHERE 
                    OWNER.ID =:R_OWNER_ID 
                INTO :R_OWNER_NAME; 
 
                --R_OWNER_NAME = NULL; 
            END 
 
            IF (BIN_AND(:P_FILTER, 1024) > 0) THEN 
            BEGIN 
 
                SELECT 
                    SUM(ROUND(OUT_EL.SUMA/(SIMPLE.DDS/100 + 1), 2)) 
                FROM 
                    OUT_EL INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
                WHERE 
                    OUT_EL.OPR_ID =:R_OPR_ID 
                INTO :R_NET_AMOUNT; 
            END 
            IF (BIN_AND(:P_FILTER, 2048) > 0) THEN 
            BEGIN 
                SELECT 
                    OPR_SUMI.SUMA_SR, 
                    OPR_SUMI.SUMA_FR 
                FROM 
                    OPR_SUMI 
                WHERE 
                    OPR_SUMI.OPR_ID =:R_OPR_ID 
                INTO :R_SUMA_SR, :R_SUMA_FR; 
 
                SELECT 
                    SUM(GET_SUMA_IZL.R_SUMA_IZL) 
                FROM 
                    GET_SUMA_IZL(:R_OPR_ID) 
                INTO :L_SUMA_IZL; 
 
                SELECT FIRST 1 
                    LOG_CENI_DDS.TIP_CENI 
                FROM 
                    LOG_CENI_DDS 
                WHERE 
                    LOG_CENI_DDS.OPR_ID <:R_OPR_ID AND LOG_CENI_DDS.TIP_DDS = 0 
                ORDER BY LOG_CENI_DDS.DATETIME DESC 
                INTO :L_TIP_CENI_DDS; 
 
                IF (COALESCE(:L_TIP_CENI_DDS,0) = 1) THEN 
                   L_SUMA_B_OTS =: R_SUMA; 
                ELSE 
                BEGIN 
                    SELECT 
                        SUM(ROUND(OUT_EL.SUMA/(SIMPLE.DDS/100 + 1), 2)) 
                    FROM 
                        OUT_EL INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
                    WHERE 
                        OUT_EL.OPR_ID =:R_OPR_ID 
                    INTO :L_SUMA_B_OTS; 
                END 
 
                R_SUMA_SR = R_SUMA_SR + COALESCE(:L_SUMA_IZL,0); 
 
                R_SUMA_RAZLIKA_SR = ROUND(:L_SUMA_B_OTS - R_SUMA_SR,2); 
 
                IF (R_SUMA_SR > 0) THEN 
                    R_NADCENKA_SR = ROUND((:L_SUMA_B_OTS/R_SUMA_SR-1)*100,2); 
                ELSE 
                    R_NADCENKA_SR = NULL; 
 
                R_SUMA_RAZLIKA_FR = ROUND(:L_SUMA_B_OTS - R_SUMA_FR,2); 
 
                IF (R_SUMA_FR > 0) THEN 
                    R_NADCENKA_FR = ROUND(((:L_SUMA_B_OTS/R_SUMA_FR)-1)*100,2); 
                ELSE 
                    R_NADCENKA_FR = NULL; 
            END 
            IF (BIN_AND(:P_FILTER, 4096) > 0) THEN 
            BEGIN 
                IF (NOT EXISTS(SELECT TMP_SEL_2.ID FROM TMP_SEL_2 WHERE TMP_SEL_2.ID = :R_PAY_TYPE)) THEN 
                begin 
                    L_FLAG_SUSPEND = '0'; 
                    --Continue; 
                END 
            END 
 
            IF (BIN_AND(:P_FILTER, 16384) > 0) THEN 
            BEGIN 
                R_PAY_TYPE_NAME = ''; 
 
                IF (:R_PAY_TYPE = 3) THEN BEGIN 
                    SELECT DISTINCT 
                        CAST(LIST(DISTINCT CFG_PAYMENTS.NAME) AS DOM_CHAR_300) 
                    FROM 
                        PAYMENTS_EL INNER JOIN CFG_PAYMENTS ON CFG_PAYMENTS.ID = PAYMENTS_EL.PAYMENT_TIP_ID 
                        INNER JOIN PAYMENT ON PAYMENTS_EL.PAYMENT_ID = PAYMENT.ID 
                        INNER JOIN SUMI SUMI_PAY ON SUMI_PAY.OPR_ID = PAYMENT.OPR_ID 
                        INNER JOIN OPR_PAYMENT_NODE ON OPR_PAYMENT_NODE.PAYMENT_ID = SUMI_PAY.ID 
                        INNER JOIN SUMI ON SUMI.ID = OPR_PAYMENT_NODE.OPR_ID 
                        INNER JOIN OPR ON SUMI.OPR_ID = OPR.ID 
                    WHERE 
                        OPR.ID =:R_OPR_ID AND 
                        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                    INTO :R_PAY_TYPE_NAME; 
                END 
                ELSE 
                    IF (:R_PAY_TYPE IN (0,2)) THEN R_PAY_TYPE_NAME = 'В БРОЙ'; 
            END 
 
            IF (BIN_AND(:P_FILTER, 32768) > 0) THEN 
            BEGIN 
                SELECT FIRST 1 
                    "USER".NAME 
                FROM 
                    OPR_EDIT INNER JOIN "USER" ON "USER".ID = OPR_EDIT.USER_ID 
                    INNER JOIN POR ON POR.OPR_ID = OPR_EDIT.ED_OPR_ID AND POR.SALE_OPR_ID =:R_OPR_ID 
                INTO :R_USER_CREATE_POR_PRODUCTION; 
            END 
 
            IF (L_FLAG_SUSPEND = '1') then 
                SUSPEND; 
        END 
    END 
    IF (BIN_AND(P_FILTER, 1) > 0) THEN BEGIN 
        R_OBEKT_ID = NULL; 
        R_OBEKT_NAME = NULL; 
        R_INVOICE_NUMBER = NULL; 
        R_INVOICE_TOTAL = NULL; 
        R_INVOICE_DATE = NULL; 
        R_INVOICE_OPR_ID = NULL; 
        R_DIST_SUMA = NULL; 
        R_DIST_PAY = NULL; 
        R_DIST_NAME = NULL; 
        R_OUT_ID = NULL; 
        R_TD_NUM = NULL; 
        R_USER_CREATE_POR_PRODUCTION = NULL; 
 
        FOR WITH OPR_DATE AS 
        (SELECT 
            OPR.ID, 
            OPR.SUMA, 
            OPR.DATETIME, 
            OPR.OPR_DATE, 
            OPR.KLI_ID, 
            OPR.SKLAD_ID, 
            OPR.USER_ID, 
            OPR.OPR_TIP, 
            OPR.PC_ID, 
            OPR.IS_LOCK, 
            OPR.OTC_ID 
        FROM 
            OPR 
        WHERE 
            OPR.OPR_DATE BETWEEN :P_FROM_DATE AND :P_TO_DATE AND BIN_AND(:P_FILTER, 8)>0 
            AND ((BIN_AND(:P_FILTER, 8192) > 0 AND COALESCE(OPR.SKLAD_ID, 0) = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) 
                OR (BIN_AND(:P_FILTER, 8192) = 0 AND COALESCE(OPR.SKLAD_ID, 0) <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM))) 
            and opr.OPR_TIP in (26, 40, 79) 
 
        UNION 
 
        SELECT 
            OPR.ID, 
            OPR.SUMA, 
            OPR.DATETIME, 
            OPR.OPR_DATE, 
            OPR.KLI_ID, 
            OPR.SKLAD_ID, 
            OPR.USER_ID, 
            OPR.OPR_TIP, 
            OPR.PC_ID, 
            OPR.IS_LOCK, 
            OPR.OTC_ID 
        FROM 
            OPR 
        WHERE 
            OPR.DATETIME BETWEEN CAST(:P_FROM_DATE as TIMESTAMP) AND DATEADD(23 HOUR TO cast(:P_TO_DATE as TIMESTAMP)) AND BIN_AND(:P_FILTER, 16)>0 
            AND ((BIN_AND(:P_FILTER, 8192) > 0 AND COALESCE(OPR.SKLAD_ID, 0) = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) 
                OR (BIN_AND(:P_FILTER, 8192) = 0 AND COALESCE(OPR.SKLAD_ID, 0) <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM))) 
            and opr.OPR_TIP in (26, 40, 79) 
        ) 
 
        SELECT 
            OPR_DATE.ID, 
            -OPR_DATE.SUMA, 
            OPR_DATE.DATETIME, 
            OPR_DATE.OPR_DATE, 
            OPR_DATE.KLI_ID, 
            OPR_DATE.SKLAD_ID, 
            KLI.NAME, 
            SKLAD.NAME, 
            OPR_DATE.USER_ID, 
            "USER".NAME, 
            RET_STOKA_PROD.PAY_TIP, 
            OPR_DATE.OPR_TIP, 
            kli.FIRMA_ID, 
            OPR_DATE.PC_ID, 
            OPR_DATE.IS_LOCK, 
            OPR_DATE.OTC_ID, 
            SKLAD.OWNER_ID 
        FROM 
            OPR_DATE INNER JOIN SKLAD ON (OPR_DATE.OPR_TIP = 26 AND SKLAD.ID = OPR_DATE.SKLAD_ID) 
            INNER JOIN "USER" ON "USER".ID = OPR_DATE.USER_ID 
            INNER JOIN TMP_SEL_1 ON TMP_SEL_1.ID = OPR_DATE.USER_ID 
            LEFT JOIN KLI ON KLI.ID = OPR_DATE.KLI_ID 
            LEFT JOIN RET_STOKA_PROD ON RET_STOKA_PROD.OPR_ID = OPR_DATE.ID 
        WHERE 
            NOT EXISTS (SELECT KI_NODE.ID  FROM KI_NODE WHERE KI_NODE.SUB_KI_OPR_ID = RET_STOKA_PROD.OPR_ID) 
            AND NOT EXISTS ( 
                  SELECT 
                      OPR_ANUL.ID 
                  FROM 
                      OPR_ANUL 
                  WHERE 
                      OPR_ANUL.AN_OPR_ID = OPR_DATE.ID) 
 
        UNION 
 
        SELECT 
            OPR1.ID, 
            -OPR1.SUMA, 
            OPR1.DATETIME, 
            OPR1.OPR_DATE, 
            OPR1.KLI_ID, 
            OPR1.SKLAD_ID, 
            KLI.NAME, 
            SKLAD.NAME, 
            OPR_DATE.USER_ID, 
            "USER".NAME, 
            RET_STOKA_PROD_KI.PAY_TIP, 
            OPR_DATE.OPR_TIP, 
            kli.FIRMA_ID, 
            OPR_DATE.PC_ID, 
            OPR_DATE.IS_LOCK, 
            OPR_DATE.OTC_ID, 
            SKLAD.OWNER_ID 
        FROM 
            OPR_DATE INNER JOIN "USER" ON "USER".ID = OPR_DATE.USER_ID 
            INNER JOIN TMP_SEL_1 ON TMP_SEL_1.ID = OPR_DATE.USER_ID 
            INNER JOIN KI_NODE ON (KI_NODE.KI_OPR_ID = OPR_DATE.ID AND OPR_DATE.OPR_TIP = 40) 
            LEFT JOIN OPR OPR1 ON OPR1.ID = KI_NODE.SUB_KI_OPR_ID 
            LEFT JOIN SKLAD ON SKLAD.ID = OPR1.SKLAD_ID 
            LEFT JOIN KLI ON KLI.ID = OPR1.KLI_ID 
            LEFT JOIN RET_STOKA_PROD_KI ON RET_STOKA_PROD_KI.OPR_ID = OPR_DATE.ID 
        WHERE 
            NOT EXISTS ( 
                SELECT 
                    OPR_ANUL.ID 
                FROM 
                    OPR_ANUL 
                WHERE 
                    OPR_ANUL.AN_OPR_ID = OPR_DATE.ID) 
 
        UNION 
 
        SELECT 
            OPR_DATE.ID, 
            -OPR_DATE.SUMA, 
            OPR_DATE.DATETIME, 
            OPR_DATE.OPR_DATE, 
            OPR_DATE.KLI_ID, 
            OPR_DATE.SKLAD_ID, 
            KLI.NAME, 
            SKLAD.NAME, 
            OPR_DATE.USER_ID, 
            "USER".NAME, 
            RET_STOKA_PROD_KI.PAY_TIP, 
            OPR_DATE.OPR_TIP, 
            kli.FIRMA_ID, 
            OPR_DATE.PC_ID, 
            OPR_DATE.IS_LOCK, 
            OPR_DATE.OTC_ID, 
            SKLAD.OWNER_ID 
        FROM 
            OPR_DATE INNER JOIN RET_STOKA_PROD_KI ON RET_STOKA_PROD_KI.OPR_ID = OPR_DATE.ID AND OPR_DATE.OPR_TIP = 79 
            INNER JOIN "USER" ON "USER".ID = OPR_DATE.USER_ID 
            INNER JOIN TMP_SEL_1 ON TMP_SEL_1.ID = OPR_DATE.USER_ID 
            LEFT JOIN SKLAD ON SKLAD.ID = OPR_DATE.SKLAD_ID 
            LEFT JOIN KLI ON KLI.ID = OPR_DATE.KLI_ID 
        WHERE 
            NOT EXISTS ( 
                  SELECT 
                      OPR_ANUL.ID 
                  FROM 
                      OPR_ANUL 
                  WHERE 
                      OPR_ANUL.AN_OPR_ID = OPR_DATE.ID) 
            AND NOT EXISTS( 
                SELECT 
                    PAYMENT.ID 
                FROM 
                    PAYMENT INNER JOIN FAK ON FAK.ID = PAYMENT.FAK_ID AND FAK.OPR_ID = RET_STOKA_PROD_KI.OPR_ID) 
 
        INTO :R_OPR_ID,:R_SUMA, :R_DATE_TIME, :R_OPR_DATE, :R_KLI_ID, :R_SKLAD_ID, :R_KLI_NAME, 
        :R_SKLAD_NAME, R_USER_ID, :R_USER_NAME, :R_PAY_TYPE, :R_OPR_TIP, :R_FIRMA_ID, 
        :L_PC_ID, :R_IS_LOCK, :R_OTC_ID, :R_OWNER_ID 
 
        DO BEGIN 
            L_FLAG_SUSPEND = '1'; 
 
            IF (EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = :R_OPR_ID)) THEN 
                R_STATUS = 2; 
            ELSE IF (EXISTS (SELECT OPR_EDIT.ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID = :R_OPR_ID)) THEN 
                R_STATUS = 1; 
            ELSE 
                R_STATUS = 0; 
            IF ((BIN_AND(P_FILTER, 2) > 0) OR (:R_STATUS <> 2))  THEN BEGIN 
                R_TEXT = NULL; 
                IF (BIN_AND(P_FILTER, 4) > 0) THEN 
                    SELECT FIRST 1 
                        CAST(COMMENTS.NOTE as DOM_CHAR_1000) 
                    FROM 
                        COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
                    WHERE 
                        COMMENT_OPR_NODE.OPR_ID = :R_OPR_ID 
                    ORDER BY 
                        COMMENT_OPR_NODE.ID DESC 
                    INTO :R_TEXT; 
 
                IF (BIN_AND(:P_FILTER, 32) > 0) THEN 
                    SELECT 
                        FIRMI.NAME_FAK 
                    FROM 
                        FIRMI 
                    WHERE 
                        FIRMI.ID =:R_FIRMA_ID 
                    INTO :R_FIRMA_NAME; 
                IF (BIN_AND(:P_FILTER, 512) > 0) THEN BEGIN 
                    SELECT 
                        OWNER.NAME 
                    FROM 
                        OWNER 
                    WHERE 
                        OWNER.ID =:R_OWNER_ID 
                    INTO :R_OWNER_NAME; 
 
                    IF (BIN_AND(:P_FILTER, 1024) > 0) THEN 
                    BEGIN 
                        SELECT 
                            SUM(ROUND(IN_EL.SUMA_FR/(SIMPLE.DDS/100 + 1), 2)) 
                        FROM 
                            IN_EL INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
                        WHERE 
                            IN_EL.OPR_ID =:R_OPR_ID 
                        INTO :R_NET_AMOUNT; 
                    END 
 
                END 
 
                IF (BIN_AND(:P_FILTER, 2048) > 0) THEN 
                BEGIN 
                    SELECT 
                        OPR_SUMI.SUMA_SR, 
                        OPR_SUMI.SUMA_FR 
                    FROM 
                        OPR_SUMI 
                    WHERE 
                        OPR_SUMI.OPR_ID =:R_OPR_ID 
                    INTO :R_SUMA_SR, :R_SUMA_FR; 
 
                    SELECT FIRST 1 
                        LOG_CENI_DDS.TIP_CENI 
                    FROM 
                        LOG_CENI_DDS 
                    WHERE 
                        LOG_CENI_DDS.OPR_ID <:R_OPR_ID AND LOG_CENI_DDS.TIP_DDS = 0 
                    ORDER BY LOG_CENI_DDS.DATETIME DESC 
                    INTO :L_TIP_CENI_DDS; 
 
 
                    IF (COALESCE(:L_TIP_CENI_DDS,0) = 1) THEN 
                        L_SUMA_B_OTS =: R_SUMA; 
                    ELSE 
                    begin 
                        SELECT 
                            SUM(ROUND(Round(out_el.SUMA/OUT_EL.KOL, 5) * in_el.KOL/(SIMPLE.DDS/100 + 1), 2)) 
                        FROM 
                            IN_EL INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
                            inner join opr_razpad_node on OPR_RAZPAD_NODE.IN_EL_ID = in_el.ID 
                            inner join OUT_EL on out_el.ID = opr_razpad_node.OUT_EL_ID 
                        WHERE 
                            IN_EL.OPR_ID =:R_OPR_ID 
                        INTO :L_SUMA_B_OTS; 
                    end 
 
                    R_SUMA_RAZLIKA_SR = ROUND(:L_SUMA_B_OTS - R_SUMA_SR,2); 
 
                    IF (R_SUMA_SR > 0) THEN 
                        R_NADCENKA_SR = ROUND((:L_SUMA_B_OTS/R_SUMA_SR-1)*100,2); 
                    ELSE 
                        R_NADCENKA_SR = NULL; 
 
                    R_SUMA_RAZLIKA_FR = ROUND(:L_SUMA_B_OTS - R_SUMA_FR,2); 
 
                    IF (R_SUMA_FR > 0) THEN 
                        R_NADCENKA_FR = ROUND(((:L_SUMA_B_OTS/R_SUMA_FR)-1)*100,2); 
                    ELSE 
                        R_NADCENKA_FR = NULL; 
 
                   r_suma_sr = - r_suma_sr; 
                   R_SUMA_FR = - R_SUMA_FR; 
                END 
                IF (BIN_AND(:P_FILTER, 4096) > 0) THEN 
                BEGIN 
                    IF (NOT EXISTS(SELECT TMP_SEL_2.ID FROM TMP_SEL_2 WHERE TMP_SEL_2.ID = :R_PAY_TYPE)) THEN 
                        L_FLAG_SUSPEND = '0'; 
                END 
 
                IF (BIN_AND(:P_FILTER, 16384) > 0) THEN 
                BEGIN 
                    R_PAY_TYPE_NAME = ''; 
 
                    IF (:R_PAY_TYPE = 3) THEN BEGIN 
                        SELECT DISTINCT 
                            CAST(LIST(DISTINCT CFG_PAYMENTS.NAME) AS DOM_CHAR_300) 
                        FROM 
                            PAYMENTS_EL INNER JOIN CFG_PAYMENTS ON CFG_PAYMENTS.ID = PAYMENTS_EL.PAYMENT_TIP_ID 
                            INNER JOIN PAYMENT ON PAYMENTS_EL.PAYMENT_ID = PAYMENT.ID 
                            INNER JOIN SUMI SUMI_PAY ON SUMI_PAY.OPR_ID = PAYMENT.OPR_ID 
                            INNER JOIN OPR_PAYMENT_NODE ON OPR_PAYMENT_NODE.PAYMENT_ID = SUMI_PAY.ID 
                            INNER JOIN SUMI ON SUMI.ID = OPR_PAYMENT_NODE.OPR_ID 
                            INNER JOIN OPR ON SUMI.OPR_ID = OPR.ID 
                        WHERE 
                            OPR.ID =:R_OPR_ID AND 
                            NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                        INTO :R_PAY_TYPE_NAME; 
                    END 
                    ELSE 
                        IF (:R_PAY_TYPE IN (0,2)) THEN R_PAY_TYPE_NAME = 'В БРОЙ'; 
                END 
 
                IF (L_FLAG_SUSPEND = '1') THEN 
                    SUSPEND; 
            END 
        END 
    END 
END ;^


ALTER PROCEDURE GET_SPR_SIMPLE_KLI (
    P_SEL_ID INTEGER,
    P_FILTER VARCHAR(1000),
    P_SIMPLES VARCHAR(10000),
    P_FLAG_SHOW_ALL SMALLINT,
    P_OBEKT_ID SMALLINT)
RETURNS (
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL DOUBLE PRECISION,
    R_KLI_ID INTEGER,
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_GROUP VARCHAR(100),
    R_SIMPLE_SEL_ID INTEGER,
    R_SKLAD_ID INTEGER,
    R_SUMA DOUBLE PRECISION)
AS
declare variable L_COUNTER integer; 
BEGIN 
    DELETE FROM SEL_SIMPLE; 
 
    FOR EXECUTE STATEMENT 
    'SELECT 
        SIMPLE.ID 
    FROM 
        SIMPLE 
    WHERE 
        SIMPLE.ID IN ('||:P_SIMPLES||')' 
    INTO :R_SIMPLE_ID 
    DO 
    BEGIN 
        INSERT INTO SEL_SIMPLE(SIMPLE_ID) VALUES (:R_SIMPLE_ID); 
    END 
 
    IF (P_FLAG_SHOW_ALL = 0) THEN BEGIN 
        FOR EXECUTE STATEMENT 
        'SELECT 
            SIMPLE.ID, 
            SIMPLE.NAME, 
            COALESCE(SELEKCIQ.NAME,''Без група''), 
            COALESCE(SIMPLE.DEF_SEL_ID,0), 
            OPR.KLI_ID, 
            OPR.SKLAD_ID, 
            SUM(OUT_EL.KOL), 
            SUM(OUT_EL.SUMA) 
        FROM 
            SIMPLE INNER JOIN SEL_SIMPLE ON SEL_SIMPLE.SIMPLE_ID = SIMPLE.ID 
            INNER JOIN OUT_EL ON OUT_EL.SIMPLE_ID = SIMPLE.ID 
            INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.OPR_TIP IN (2,34) 
            LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
        WHERE 
            OPR.SKLAD_ID <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.OPR_ID = OPR.ID) AND ' ||:P_FILTER || '(1=1) 
            AND 0 = ' || COALESCE(:P_OBEKT_ID,0) || ' 
        GROUP BY 1,2,3,4,5,6 
 
        UNION ALL 
 
        SELECT 
            SIMPLE.ID, 
            SIMPLE.NAME, 
            COALESCE(SELEKCIQ.NAME,''Без група''), 
            COALESCE(SIMPLE.DEF_SEL_ID,0), 
            OPR.KLI_ID, 
            OPR.SKLAD_ID, 
            SUM(OUT_EL.KOL), 
            SUM(OUT_EL.SUMA) 
        FROM 
            SIMPLE INNER JOIN SEL_SIMPLE ON SEL_SIMPLE.SIMPLE_ID = SIMPLE.ID 
            INNER JOIN OUT_EL ON OUT_EL.SIMPLE_ID = SIMPLE.ID 
            INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.OPR_TIP IN (2,34) 
            INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
            LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
        WHERE 
            OPR.SKLAD_ID <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.OPR_ID = OPR.ID) AND ' ||:P_FILTER || '(1=1) 
            AND OUT.OBEKT_ID = ' || COALESCE(:P_OBEKT_ID,0) || ' 
        GROUP BY 1,2,3,4,5,6' 
 
        INTO 
            :R_SIMPLE_ID,:R_SIMPLE_NAME,:R_SIMPLE_GROUP,:R_SIMPLE_SEL_ID,:R_KLI_ID,:R_SKLAD_ID,:R_KOL,:R_SUMA 
        DO SUSPEND; 
 
/*        FOR SELECT 
            SIMPLE.ID, 
            SIMPLE.NAME, 
            COALESCE(SELEKCIQ.NAME,'БЕЗ ГРУПА'), 
            COALESCE(SIMPLE.DEF_SEL_ID,0) 
        FROM 
            SIMPLE INNER JOIN SEL_SIMPLE ON SEL_SIMPLE.SIMPLE_ID = SIMPLE.ID 
 
            LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
 
        INTO 
            :R_SIMPLE_ID,:R_SIMPLE_NAME,:R_SIMPLE_GROUP,:R_SIMPLE_SEL_ID 
 
        DO BEGIN 
 
            FOR EXECUTE STATEMENT 
            'SELECT 
                OPR.KLI_ID, 
                SUM(OUT_EL.KOL), 
                SUM(OUT_EL.SUMA) 
            FROM 
                OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
            WHERE 
                OPR.OPR_TIP IN (2,34) AND OPR.SKLAD_ID <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
                AND OUT_EL.SIMPLE_ID ='||:R_SIMPLE_ID || 
                'AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.OPR_ID = OPR.ID) AND ' ||:P_FILTER || '(1=1) 
            GROUP BY 1' 
            INTO 
                :R_KLI_ID,:R_KOL,:R_SUMA 
 
            DO 
                SUSPEND; 
 
        END */ 
    END 
    ELSE BEGIN 
 
        FOR SELECT 
            OPR.KLI_ID, 
            OPR.SKLAD_ID 
        FROM 
            OPR INNER JOIN OUT ON OUT.OPR_ID = OPR.ID AND COALESCE(:P_OBEKT_ID,0) = 0 
        WHERE 
            EXISTS (SELECT OUT_EL.ID FROM OUT_EL INNER JOIN SEL_SIMPLE 
            ON SEL_SIMPLE.SIMPLE_ID = OUT_EL.SIMPLE_ID 
            AND OUT_EL.OPR_ID = OUT.OPR_ID AND OUT_EL.IS_F = 0) 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.OPR_ID = OUT.OPR_ID) 
 
        --GROUP BY 1 
 
        UNION ALL 
 
        SELECT 
            OPR.KLI_ID, 
            OPR.SKLAD_ID 
        FROM 
            OPR INNER JOIN OUT ON OUT.OPR_ID = OPR.ID AND OUT.OBEKT_ID = :P_OBEKT_ID 
        WHERE 
            EXISTS (SELECT OUT_EL.ID FROM OUT_EL INNER JOIN SEL_SIMPLE 
            ON SEL_SIMPLE.SIMPLE_ID = OUT_EL.SIMPLE_ID 
            AND OUT_EL.OPR_ID = OPR.ID AND OUT_EL.IS_F = 0) 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.OPR_ID = OPR.ID) 
            AND :P_OBEKT_ID > 0 
        --GROUP BY 1 
 
        INTO 
            :R_KLI_ID, :R_SKLAD_ID 
        DO BEGIN 
            L_COUNTER = 0; 
            FOR SELECT 
                SIMPLE.ID, 
                SIMPLE.NAME, 
                COALESCE(SELEKCIQ.NAME,'Без група'), 
                COALESCE(SIMPLE.DEF_SEL_ID,0) 
            FROM 
                SIMPLE INNER JOIN SEL_SIMPLE ON SEL_SIMPLE.SIMPLE_ID = SIMPLE.ID 
                LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
            INTO 
                :R_SIMPLE_ID,:R_SIMPLE_NAME,:R_SIMPLE_GROUP,:R_SIMPLE_SEL_ID 
            DO BEGIN 
                R_KOL = NULL; 
                R_SUMA = NULL; 
                IF (P_OBEKT_ID IS NULL) THEN 
                    EXECUTE STATEMENT 
                    'SELECT 
                        SUM(OUT_EL.KOL), 
                        SUM(OUT_EL.SUMA) 
                    FROM 
                        SIMPLE INNER JOIN OUT_EL ON OUT_EL.SIMPLE_ID = SIMPLE.ID AND SIMPLE.ID = ' 
                        || :R_SIMPLE_ID || ' 
                        INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
                    WHERE 
                        OPR.OPR_TIP IN (2,34) AND OPR.SKLAD_ID <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
                        AND OPR.KLI_ID = ' || COALESCE(:R_KLI_ID, 0) || ' 
                        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.OPR_ID = OPR.ID) AND ' ||:P_FILTER || '(1=1) ' 
                    INTO 
                        :R_KOL,:R_SUMA; 
                ELSE 
                    EXECUTE STATEMENT 
                    'SELECT 
                        SUM(OUT_EL.KOL), 
                        SUM(OUT_EL.SUMA) 
                    FROM 
                        SIMPLE INNER JOIN OUT_EL ON OUT_EL.SIMPLE_ID = SIMPLE.ID AND SIMPLE.ID = ' 
                        || :R_SIMPLE_ID || ' 
                        INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
                        INNER JOIN OUT ON OPR.ID = OUT.OPR_ID AND OUT.OBEKT_ID = ' || COALESCE(:P_OBEKT_ID,0) || ' 
                    WHERE 
                        OPR.OPR_TIP IN (2,34) AND OPR.SKLAD_ID <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
                        AND OPR.KLI_ID = ' || COALESCE(:R_KLI_ID, 0) || ' 
                        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.OPR_ID = OPR.ID) AND ' ||:P_FILTER || '(1=1) ' 
                    INTO 
                        :R_KOL,:R_SUMA; 
 
                R_KOL = R_KOL; 
                R_SUMA = R_SUMA; 
                SUSPEND; 
                L_COUNTER = L_COUNTER+1; 
            END 
            IF (L_COUNTER = 0) THEN BEGIN 
                R_SIMPLE_ID = NULL; 
                R_SIMPLE_NAME = NULL; 
                R_SIMPLE_GROUP = NULL; 
                R_SIMPLE_SEL_ID = NULL; 
                R_KOL = NULL; 
                R_SUMA = NULL; 
                SUSPEND; 
            END 
        END 
    END 
END^


ALTER PROCEDURE GET_SPR_SIMPLE_KLI_RAZ (
    P_SEL_ID TYPE OF DOM_KEY,
    P_FILTER VARCHAR(1000),
    P_SIMPLES VARCHAR(10000),
    P_FLAG_SHOW_ALL TYPE OF DOM_FLAG,
    P_OBEKT_ID TYPE OF DOM_SMAL_INT)
RETURNS (
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_KOL TYPE OF DOM_KOL,
    R_KLI_ID TYPE OF DOM_KEY,
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_SIMPLE_GROUP TYPE OF DOM_CHAR_100,
    R_SIMPLE_SEL_ID TYPE OF DOM_KEY,
    R_SUMA TYPE OF DOM_SUMA,
    R_SKLAD_ID INTEGER)
AS
declare variable L_COUNTER integer; 
declare variable L_KOL_RAZ double precision; 
BEGIN 
    DELETE FROM SEL_SIMPLE; 
 
    FOR EXECUTE STATEMENT 
    'SELECT 
        SIMPLE.ID 
    FROM 
        SIMPLE 
    WHERE 
        SIMPLE.ID IN ('||:P_SIMPLES||')' 
    INTO :R_SIMPLE_ID 
    DO 
    BEGIN 
        INSERT INTO SEL_SIMPLE(SIMPLE_ID) VALUES (:R_SIMPLE_ID); 
    END 
 
    IF (P_FLAG_SHOW_ALL = 0) THEN BEGIN 
        FOR EXECUTE STATEMENT 
        'SELECT 
            SIMPLE.ID, 
            SIMPLE.NAME, 
            COALESCE(SELEKCIQ.NAME,''Без група''), 
            COALESCE(SIMPLE.DEF_SEL_ID,0), 
            OPR.KLI_ID, 
            OPR.SKLAD_ID, 
            RAZFASOVKA.KOL, 
            SUM(OUT_EL.KOL), 
            SUM(OUT_EL.SUMA) 
        FROM 
            SIMPLE INNER JOIN SEL_SIMPLE ON SEL_SIMPLE.SIMPLE_ID = SIMPLE.ID 
            INNER JOIN OUT_EL ON OUT_EL.SIMPLE_ID = SIMPLE.ID 
            INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.OPR_TIP IN (2,34) 
            INNER JOIN DEF_RAZ_SIMPLE DEF ON DEF.SIMPLE_ID = SIMPLE.ID 
            INNER JOIN RAZFASOVKA ON RAZFASOVKA.ID = DEF.RAZFASOVKA_ID 
            LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
        WHERE 
            OPR.SKLAD_ID <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.OPR_ID = OPR.ID) AND ' ||:P_FILTER || '(1=1) 
            AND 0 = ' || COALESCE(:P_OBEKT_ID,0) || ' 
        GROUP BY 1,2,3,4,5,6,7 
 
        UNION ALL 
 
        SELECT 
            SIMPLE.ID, 
            SIMPLE.NAME, 
            COALESCE(SELEKCIQ.NAME,''Без група''), 
            COALESCE(SIMPLE.DEF_SEL_ID,0), 
            OPR.KLI_ID, 
            OPR.SKLAD_ID, 
            RAZFASOVKA.KOL, 
            SUM(OUT_EL.KOL), 
            SUM(OUT_EL.SUMA) 
        FROM 
            SIMPLE INNER JOIN SEL_SIMPLE ON SEL_SIMPLE.SIMPLE_ID = SIMPLE.ID 
            INNER JOIN OUT_EL ON OUT_EL.SIMPLE_ID = SIMPLE.ID 
            INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.OPR_TIP IN (2,34) 
            INNER JOIN OUT ON OUT.OPR_ID = OPR.ID 
            INNER JOIN DEF_RAZ_SIMPLE DEF ON DEF.SIMPLE_ID = SIMPLE.ID 
            INNER JOIN RAZFASOVKA ON RAZFASOVKA.ID = DEF.RAZFASOVKA_ID 
 
            LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
        WHERE 
            OPR.SKLAD_ID <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.OPR_ID = OPR.ID) AND ' ||:P_FILTER || '(1=1) 
            AND OUT.OBEKT_ID = ' || COALESCE(:P_OBEKT_ID,0) || ' 
        GROUP BY 1,2,3,4,5,6,7' 
 
        INTO 
            :R_SIMPLE_ID,:R_SIMPLE_NAME,:R_SIMPLE_GROUP,:R_SIMPLE_SEL_ID,:R_KLI_ID,:R_SKLAD_ID,:L_KOL_RAZ,:R_KOL,:R_SUMA 
        DO BEGIN 
            R_KOL = ROUND(R_KOL / L_KOL_RAZ,5); 
            SUSPEND; 
        END 
    END 
    ELSE BEGIN 
 
        FOR SELECT 
            OPR.KLI_ID, 
            OPR.SKLAD_ID 
        FROM 
            OPR INNER JOIN OUT ON OUT.OPR_ID = OPR.ID AND COALESCE(:P_OBEKT_ID,0) = 0 
        WHERE 
            EXISTS (SELECT OUT_EL.ID FROM OUT_EL INNER JOIN SEL_SIMPLE 
            ON SEL_SIMPLE.SIMPLE_ID = OUT_EL.SIMPLE_ID 
            AND OUT_EL.OPR_ID = OUT.OPR_ID AND OUT_EL.IS_F = 0) 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.OPR_ID = OUT.OPR_ID) 
 
        UNION ALL 
 
        SELECT 
            OPR.KLI_ID, 
            OPR.SKLAD_ID 
        FROM 
            OPR INNER JOIN OUT ON OUT.OPR_ID = OPR.ID AND OUT.OBEKT_ID = :P_OBEKT_ID 
        WHERE 
            EXISTS (SELECT OUT_EL.ID FROM OUT_EL INNER JOIN SEL_SIMPLE 
            ON SEL_SIMPLE.SIMPLE_ID = OUT_EL.SIMPLE_ID 
            AND OUT_EL.OPR_ID = OPR.ID AND OUT_EL.IS_F = 0) 
            AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.OPR_ID = OPR.ID) 
            AND :P_OBEKT_ID > 0 
 
        INTO 
            :R_KLI_ID, :R_SKLAD_ID 
        DO BEGIN 
            L_COUNTER = 0; 
            FOR SELECT 
                SIMPLE.ID, 
                SIMPLE.NAME, 
                COALESCE(SELEKCIQ.NAME,'Без група'), 
                COALESCE(SIMPLE.DEF_SEL_ID,0) 
            FROM 
                SIMPLE INNER JOIN SEL_SIMPLE ON SEL_SIMPLE.SIMPLE_ID = SIMPLE.ID 
                LEFT JOIN SELEKCIQ ON SELEKCIQ.ID = SIMPLE.DEF_SEL_ID 
            INTO 
                :R_SIMPLE_ID,:R_SIMPLE_NAME,:R_SIMPLE_GROUP,:R_SIMPLE_SEL_ID 
            DO BEGIN 
                R_KOL = NULL; 
                R_SUMA = NULL; 
                IF (P_OBEKT_ID IS NULL) THEN 
                    EXECUTE STATEMENT 
                    'SELECT 
                        RAZFASOVKA.KOL, 
                        SUM(OUT_EL.KOL), 
                        SUM(OUT_EL.SUMA) 
                    FROM 
                        SIMPLE INNER JOIN OUT_EL ON OUT_EL.SIMPLE_ID = SIMPLE.ID AND SIMPLE.ID = ' 
                        || :R_SIMPLE_ID || ' 
                        INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
                        INNER JOIN DEF_RAZ_SIMPLE DEF ON DEF.SIMPLE_ID = SIMPLE.ID 
                        INNER JOIN RAZFASOVKA ON RAZFASOVKA.ID = DEF.RAZFASOVKA_ID 
                    WHERE 
                        OPR.OPR_TIP IN (2,34) AND OPR.SKLAD_ID <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
                        AND OPR.KLI_ID = ' || :R_KLI_ID || ' 
                        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.OPR_ID = OPR.ID) AND ' ||:P_FILTER || '(1=1) 
                    GROUP BY 1' 
                    INTO 
                        :L_KOL_RAZ,:R_KOL,:R_SUMA; 
                ELSE 
                    EXECUTE STATEMENT 
                    'SELECT 
                        RAZFASOVKA.KOL, 
                        SUM(OUT_EL.KOL), 
                        SUM(OUT_EL.SUMA) 
                    FROM 
                        SIMPLE INNER JOIN OUT_EL ON OUT_EL.SIMPLE_ID = SIMPLE.ID AND SIMPLE.ID = ' 
                        || :R_SIMPLE_ID || ' 
                        INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
                        INNER JOIN OUT ON OPR.ID = OUT.OPR_ID AND OUT.OBEKT_ID = ' || COALESCE(:P_OBEKT_ID,0) || ' 
                        INNER JOIN DEF_RAZ_SIMPLE DEF ON DEF.SIMPLE_ID = SIMPLE.ID 
                        INNER JOIN RAZFASOVKA ON RAZFASOVKA.ID = DEF.RAZFASOVKA_ID 
                    WHERE 
                        OPR.OPR_TIP IN (2,34) AND OPR.SKLAD_ID <> (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
                        AND OPR.KLI_ID = ' || :R_KLI_ID || ' 
                        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.OPR_ID = OPR.ID) AND ' ||:P_FILTER || '(1=1) 
                    GROUP BY 1' 
                    INTO 
                        :L_KOL_RAZ,:R_KOL,:R_SUMA; 
 
                R_KOL = ROUND(R_KOL / L_KOL_RAZ,5); 
                R_SUMA = R_SUMA; 
                SUSPEND; 
                L_COUNTER = L_COUNTER+1; 
            END 
            IF (L_COUNTER = 0) THEN BEGIN 
                R_SIMPLE_ID = NULL; 
                R_SIMPLE_NAME = NULL; 
                R_SIMPLE_GROUP = NULL; 
                R_SIMPLE_SEL_ID = NULL; 
                R_KOL = NULL; 
                R_SUMA = NULL; 
                SUSPEND; 
            END 
        END 
    END 
END^


ALTER PROCEDURE GET_SPR_SROK (
    P_FILTER VARCHAR(1000),
    P_DAYS INTEGER)
RETURNS (
    R_SIMPLE_NAME VARCHAR(100),
    R_SKLAD_NAME VARCHAR(20),
    R_KOL_NAL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_ED_CENA DOUBLE PRECISION,
    R_SROK DATE,
    SN VARCHAR(30),
    R_CODE VARCHAR(15),
    R_CODE2 VARCHAR(15),
    DAYS_LEFT INTEGER,
    R_SIMPLE_ID INTEGER)
AS
declare variable L_IN_EL_ID integer; 
BEGIN 
FOR EXECUTE STATEMENT 
    'SELECT 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        IN_EL.SIMPLE_ID, 
        SKLAD.NAME, 
        SUM(PN.KOL), 
        PN.SUMA_FR, 
        CASE WHEN PN.KOL <> 0 THEN 
          PN.SUMA_FR / PN.KOL 
        ELSE 
          0 
        END AS ED_CENA, 
        PARTIDA_EL.SROK, 
        COALESCE(SERIAL_NUM.SN,''N/A'') AS SN, 
        PARTIDA_EL.SROK - CURRENT_DATE, 
        SIMPLE.CODE2 
     FROM 
        IN_EL 
        INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = IN_EL.ID 
        INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
        INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
        INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
        INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID 
        INNER JOIN PARTIDA_EL ON PARTIDA_EL.ID = PN.ELEMENT_ID 
        LEFT JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID 
     WHERE (NOT (SKLAD.ID = (SELECT SYSTEM.H_SKLAD FROM SYSTEM))) AND (SKLAD.IS_ACTIVE = 1) AND PN.KOL > 0 AND ' 
     ||:P_FILTER ||' group by 1,2,3,4,6,7,8,9,10,11 ' 
INTO :R_CODE, :R_SIMPLE_NAME, :R_SIMPLE_ID, :R_SKLAD_NAME, :R_KOL_NAL, :R_SUMA, :R_ED_CENA, :R_SROK, :SN, :DAYS_LEFT, :R_CODE2 
DO 
BEGIN 
  if (DAYS_LEFT <=:P_DAYS) then 
        SUSPEND; 
  END 
END^


ALTER PROCEDURE GET_SR_CENA (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_SKLAD_ID_S VARCHAR(1000))
RETURNS (
    CENA_SR DOUBLE PRECISION,
    R_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION)
AS
declare variable L_SUMA_SR double precision; 
declare variable L_KOL_NAL double precision; 
declare variable L_SKLAD_ID_S varchar(1000); 
declare variable L_FILTER_SKLAD type of DOM_CHAR_100; 
begin 
  r_suma = 0; 
  r_kol = 0; 
  L_FILTER_SKLAD = ''; 
 
  if (p_opr_id = -1) then begin 
    for select 
      nal.suma, 
      nal.kol_nal 
    from nal 
    where 
      nal.simple_id = :p_simple_id and 
      nal.suma > 0 and nal.kol_nal > 0 
      and NOT nal.sklad_id = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
    into :l_suma_sr,:l_kol_nal 
    do begin 
      r_suma = r_suma + l_suma_sr; 
      r_kol = r_kol + l_kol_nal; 
    end 
 
    if (r_kol > 0) then 
      cena_sr = round5(r_suma/r_kol); 
    else begin 
      cena_sr = 0; 
      r_suma = 0; 
    end 
 
    suspend; 
  end 
  else 
  if (p_opr_id <> 0) then begin 
    execute procedure get_sklad_id_s(:p_opr_id) returning_values :l_sklad_id_s; 
 
    if ((l_sklad_id_s = '') or (:L_SKLAD_ID_S is null)) then begin 
      for select 
        nal.suma, 
        nal.kol_nal 
      from nal 
      where 
        nal.simple_id = :p_simple_id and 
        nal.suma > 0 and nal.kol_nal > 0 
        and NOT nal.sklad_id = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
      into :l_suma_sr,:l_kol_nal 
      do begin 
        r_suma = r_suma + l_suma_sr; 
        r_kol = r_kol + l_kol_nal; 
      end 
      if (r_kol > 0) then 
        cena_sr = round5(r_suma/r_kol); 
      else begin 
        cena_sr = 0; 
        r_suma = 0; 
      end 
      suspend; 
    end 
    else begin 
      l_sklad_id_s = l_sklad_id_s||'0'; 
      for 
        execute statement  'select 
        nal.suma, 
        nal.kol_nal 
      from nal 
      where 
        nal.simple_id = '||:p_simple_id||' and 
        nal.suma > 0 and nal.kol_nal > 0 and 
        nal.sklad_id in ('||:l_sklad_id_s||') 
        and NOT nal.sklad_id = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)' 
      into :l_suma_sr,:l_kol_nal 
      do begin 
        r_suma = r_suma + l_suma_sr; 
        r_kol = r_kol + l_kol_nal; 
      end 
      if (r_kol > 0) then 
        cena_sr = round5(r_suma/r_kol); 
      else begin 
        cena_sr = 0; 
        r_suma = 0; 
      end 
      suspend; 
    end 
  end 
  else begin 
    if ((l_sklad_id_s = '') or (:L_SKLAD_ID_S is null)) then 
        L_FILTER_SKLAD = '(1=1)'; 
    else 
        L_FILTER_SKLAD = 'nal.sklad_id in ('''||:p_sklad_id_s||''')'; 
    for 
      execute statement  'select 
      nal.suma, 
      nal.kol_nal 
    from nal 
    where 
      nal.simple_id = '||:p_simple_id||' and 
      nal.suma > 0 and nal.kol_nal > 0 and ' 
      ||:L_FILTER_SKLAD || 
      'and NOT nal.sklad_id = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)' 
    into :l_suma_sr,:l_kol_nal 
    do begin 
      r_suma = r_suma + l_suma_sr; 
      r_kol = r_kol + l_kol_nal; 
    end 
    if (r_kol > 0) then 
        cena_sr = round5(r_suma/r_kol); 
    else begin 
      cena_sr = 0; 
      r_suma = 0; 
    end 
    suspend; 
  end 
end^


ALTER PROCEDURE GET_SR_FR_LR (
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_SR DOUBLE PRECISION,
    R_FR DOUBLE PRECISION,
    R_LR DOUBLE PRECISION)
AS
begin  
  select  
    case when nal.kol_nal > 0 then round5(nal.suma/nal.kol_nal) else 0 end, 
    coalesce(nal.suma_fr,0), 
    coalesce(nal.last_cena,0)  
  from nal  
  where  
    nal.simple_id = :p_simple_id and  
    nal.sklad_id = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)  
  into :r_sr,:r_fr,:r_lr;  
end^


ALTER PROCEDURE GET_STATUS_ZD (
    P_OPR_ID INTEGER)
RETURNS (
    R_TIP INTEGER)
AS
declare variable l_simple_id integer; 
declare variable l_kol double precision; 
declare variable l_kol_zd_node double precision; 
declare variable l_first smallint; 
declare variable l_ccc integer; 
BEGIN 
  select 
    count(id) 
  from zd_dost_move_node 
  where 
    opr_id_zd = :p_opr_id 
  into :l_ccc; 
 
  if (l_ccc = 0) then 
    r_tip = 0; 
  else begin 
    l_first = 0; 
    r_tip = 2; 
    FOR select 
      zd.simple_id, 
      sum(zd.kol_zaiavka) kol 
    from zaiavka_dostavka zd 
    where 
      zd.opr_id = :p_opr_id 
    group by zd.simple_id 
    INTO :l_simple_id,:l_kol 
    DO BEGIN 
      execute procedure get_kol_zd_node(:p_opr_id,:l_simple_id) returning_values :l_kol_zd_node; 
 
      l_first = l_first + 1; 
      if (l_kol_zd_node <> l_kol) then begin 
        if ((l_first > 1) and (r_tip = 2)) then begin 
          r_tip = 1; 
          break; 
        end 
        r_tip = 0; 
      end 
      else 
        if (r_tip = 0) then begin 
          r_tip = 1; 
          break; 
        end 
    END 
  end 
END^


ALTER PROCEDURE GET_SUMA_IZL (
    P_OPR_ID INTEGER)
RETURNS (
    R_KOL_IZL DOUBLE PRECISION,
    R_SUMA_IZL DOUBLE PRECISION,
    R_OPR_ID INTEGER,
    R_OUT_EL_ID INTEGER)
AS
DECLARE VARIABLE L_OUT_EL_ID INTEGER; 
DECLARE VARIABLE L_CENA_IZL DOUBLE PRECISION; 
DECLARE VARIABLE L_KOL_IZL DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_IZL DOUBLE PRECISION; 
DECLARE VARIABLE L_OPR_ID INTEGER; 
BEGIN 
    R_SUMA_IZL = 0; 
    FOR SELECT 
            OPR.ID 
        FROM 
            OPR 
        WHERE 
            OPR.ID =:P_OPR_ID AND NOT EXISTS(SELECT PROD_NODE.OPR_PROD_ID FROM PROD_NODE WHERE PROD_NODE.OPR_PROD_ID = OPR.ID) 
        UNION 
        SELECT 
            PROD_NODE.OPR_SUB_PROD_ID 
        FROM 
            PROD_NODE 
        WHERE 
            PROD_NODE.OPR_PROD_ID =:P_OPR_ID AND EXISTS(SELECT PROD_NODE.OPR_PROD_ID FROM PROD_NODE WHERE PROD_NODE.OPR_PROD_ID =:P_OPR_ID) 
        INTO :L_OPR_ID 
    DO 
    BEGIN 
    FOR 
        SELECT 
            OUT_EL.ID, 
            OUT_EL.OPR_ID 
        FROM 
            OUT_EL 
        WHERE OUT_EL.OPR_ID =:L_OPR_ID 
        INTO :R_OUT_EL_ID,:R_OPR_ID 
    DO 
    BEGIN 
        SELECT 
            (IZL.KOL_IZL), 
             IZL.LAST_CENA 
        FROM IZL 
        WHERE IZL.OUT_EL_ID =:L_OUT_EL_ID 
        INTO :L_KOL_IZL, :L_CENA_IZL; 
        L_SUMA_IZL = ROUNDD(L_KOL_IZL * L_CENA_IZL); 
        R_SUMA_IZL =COALESCE(L_SUMA_IZL,0); 
        SUSPEND; 
    END 
  END 
END^


ALTER PROCEDURE GET_SUMA_KLI_DATE (
    P_KLI_ID INTEGER,
    P_PERIOD SMALLINT,
    P_NUMBER_WMY SMALLINT,
    P_WMY SMALLINT,
    P_SUMA DOUBLE PRECISION)
RETURNS (
    SUMA DOUBLE PRECISION)
AS
declare variable l_date date; 
BEGIN 
  if (p_period is not null) then begin 
    if (p_period = 0) then l_date = current_date - 7; 
    else if (p_period = 1) then l_date = current_date - 30; 
    else if (p_period = 2) then l_date = current_date - 365; 
  end 
  else begin 
    if (p_wmy = 0) then l_date = current_date - p_number_wmy; 
    else if (p_wmy = 1) then l_date = current_date - p_number_wmy*7; 
    else if (p_wmy = 2) then l_date = current_date - p_number_wmy*30; 
  end 
 
  select 
    sum(suma) suma 
  from opr 
  where 
    opr.opr_tip = 2 and 
    opr.opr_date >= :l_date and 
    opr.kli_id = :p_kli_id 
  INTO :suma; 
 
  suma = suma + :p_suma; 
 
  suspend; 
END^


ALTER PROCEDURE GET_SUMA_SR (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID SMALLINT,
    P_KOL DOUBLE PRECISION)
RETURNS (
    R_SUMA_SR DOUBLE PRECISION)
AS
DECLARE VARIABLE L_NAL_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_NAL_SUMA DOUBLE PRECISION; 
BEGIN   
    SELECT   
        NAL.KOL_NAL,   
        NAL.SUMA   
    FROM   
        NAL   
    WHERE   
        NAL.SIMPLE_ID = :P_SIMPLE_ID   
        AND NAL.SKLAD_ID = :P_SKLAD_ID   
    INTO   
        :L_NAL_KOL,:L_NAL_SUMA;   
   
    IF (L_NAL_KOL IS NULL) THEN  
        R_SUMA_SR = 0;  
    ELSE IF ((L_NAL_KOL > P_KOL) AND (L_NAL_KOL > 0))  THEN 
        R_SUMA_SR = ROUNDD(ROUND5(L_NAL_SUMA / L_NAL_KOL) * P_KOL);   
    ELSE   
        R_SUMA_SR = L_NAL_SUMA;   
END^


ALTER PROCEDURE GET_SUMI_PROD (
    OPR_ID INTEGER,
    P_TIP INTEGER)
RETURNS (
    R_SUMA_CL DOUBLE PRECISION,
    R_SUMA_OS DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_SUMA_BEZ_DDS DOUBLE PRECISION,
    R_SUMA_OS_NETO TYPE OF DOM_SUMA,
    R_SUMA_CL_NETO TYPE OF DOM_SUMA)
AS
declare variable L_OPR_ID integer;
declare variable L_SUMA double precision;
declare variable L_SUMA_BEZ_DDS double precision;
declare variable L_SUMA_1 double precision;
declare variable L_SUMA_NETO type of DOM_SUMA;
declare variable L_SUMA_OS_NETO type of DOM_SUMA;
declare variable L_SUMA_CL_NETO type of DOM_SUMA;
declare variable L_SUMA_OS_BRUTO type of DOM_SUMA;
declare variable L_SUMA_CL_BRUTO type of DOM_SUMA;
declare variable L_TIP_DDS type of DOM_KEY_SMALL;
BEGIN 
    R_SUMA_CL = 0; 
    R_SUMA_OS = 0; 
    R_SUMA = 0; 
    R_SUMA_BEZ_DDS = 0; 

    FOR SELECT 
        OPR.ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :OPR_ID 
        AND EXISTS (SELECT OUT_EL.ID FROM OUT_EL WHERE OUT_EL.OPR_ID = OPR.ID) 
 
    UNION 
 
    SELECT 
        PROD_NODE.OPR_SUB_PROD_ID 
    FROM 
        PROD_NODE 
    WHERE 
        PROD_NODE.OPR_PROD_ID = :OPR_ID 
    INTO 
        :L_OPR_ID 
    DO BEGIN 
        SELECT FIRST 1 
            LOG_CENI_DDS.TIP_CENI 
        FROM 
            LOG_CENI_DDS 
        WHERE 
            LOG_CENI_DDS.TIP_DDS = 1 AND LOG_CENI_DDS.OPR_ID <:L_OPR_ID
        ORDER BY LOG_CENI_DDS.ID DESC
        INTO 
            :L_TIP_DDS; 
 
        L_SUMA_BEZ_DDS = 0; 

        SELECT 
            SUM(ROUNDd(IIF(OUT_EL.SUMA >= 0, 1, IIF(OUT_EL.KOL >= 0, -1, 1)) * PROD_CENI_EL.CENA * OUT_EL.KOL)), 
            CASE WHEN COALESCE(:L_TIP_DDS,1) = 1 THEN SUM(ROUNDD(IIF(OUT_EL.SUMA >= 0, 1, IIF(OUT_EL.KOL >= 0, -1, 1)) *  PROD_CENI_EL.CENA_OS * OUT_EL.KOL) / (ROUNDD(PROD_CENI_El.VAT_PERCENT/100) + 1))
            ELSE SUM(ROUNDD(IIF(OUT_EL.SUMA >=0,1,IIF(OUT_EL.KOL >= 0, -1, 1)) * PROD_CENI_EL.CENA_OS * OUT_EL.KOL)) END, 
            CASE WHEN COALESCE(:L_TIP_DDS,1) = 1 THEN SUM(ROUNDD(IIF(OUT_EL.SUMA >= 0, 1, IIF(OUT_EL.KOL >= 0, -1, 1)) * PROD_CENI_EL.CENA_CL * OUT_EL.KOL) / (ROUNDD(PROD_CENI_El.VAT_PERCENT/100) + 1))
            ELSE SUM(ROUNDD(IIF(OUT_EL.SUMA >= 0, 1, IIF(OUT_EL.KOL >= 0, -1, 1)) * PROD_CENI_EL.CENA_CL * OUT_EL.KOL)) END, 
            CASE WHEN COALESCE(:L_TIP_DDS,1) = 1 THEN SUM(ROUNDd(IIF(OUT_EL.SUMA >= 0, 1, IIF(OUT_EL.KOL >= 0, -1, 1)) * PROD_CENI_EL.CENA_OS * OUT_EL.KOL)) 
            ELSE SUM((ROUNDD(IIF(OUT_EL.SUMA >= 0, 1, IIF(OUT_EL.KOL >= 0, -1, 1)) * PROD_CENI_EL.CENA_OS * OUT_EL.KOL))* (ROUNDD(PROD_CENI_El.VAT_PERCENT/100) + 1)) END,
            CASE WHEN COALESCE(:L_TIP_DDS,1) = 1 THEN SUM(ROUNDd(IIF(OUT_EL.SUMA >= 0, 1, IIF(OUT_EL.KOL >= 0, -1, 1)) * PROD_CENI_EL.CENA_CL * OUT_EL.KOL)) 
            ELSE SUM((ROUNDD(IIF(OUT_EL.SUMA >= 0, 1, IIF(OUT_EL.KOL >= 0, -1, 1)) * PROD_CENI_EL.CENA_CL * OUT_EL.KOL))*(ROUNDD(PROD_CENI_El.VAT_PERCENT/100) + 1)) END,
            SUM((IIF(OUT_EL.SUMA >= 0, 1, IIF(OUT_EL.KOL >= 0, -1, 1)) * PROD_CENI_EL.CENA * OUT_EL.KOL) / (1 + PROD_CENI_El.VAT_PERCENT/100))
        FROM 
            PROD_CENI_EL INNER JOIN OUT_EL ON OUT_EL.ID = PROD_CENI_EL.OUT_EL_ID AND OUT_EL.OPR_ID = :L_OPR_ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        WHERE 
            PROD_CENI_EL.BONUS_ID IS NULL 
        INTO 
            :L_SUMA, :L_SUMA_OS_NETO, :L_SUMA_CL_NETO, :L_SUMA_OS_BRUTO, :L_SUMA_CL_BRUTO, :L_SUMA_1; 
 
        L_SUMA_BEZ_DDS = L_SUMA_1;
 
        R_SUMA         = COALESCE(R_SUMA,0)          + COALESCE(L_SUMA, 0);
        R_SUMA_CL      = COALESCE(R_SUMA_CL, 0)      + COALESCE(L_SUMA_CL_BRUTO, 0);
        R_SUMA_OS      = COALESCE(R_SUMA_OS, 0)      + COALESCE(L_SUMA_OS_BRUTO, 0);
        R_SUMA_BEZ_DDS = COALESCE(R_SUMA_BEZ_DDS, 0) + COALESCE(L_SUMA_BEZ_DDS, 0);
        R_SUMA_OS_NETO = COALESCE(R_SUMA_OS_NETO, 0) + COALESCE(L_SUMA_OS_NETO, 0);
        R_SUMA_CL_NETO = COALESCE(R_SUMA_CL_NETO, 0) + COALESCE(L_SUMA_CL_NETO, 0);
    END
     
    SUSPEND; 
END^


ALTER PROCEDURE GET_SUMI_PROD_DDS (
    P_OPR_ID INTEGER)
RETURNS (
    R_SUMA_S_DDS DOUBLE PRECISION,
    R_SUMA_BEZ_DDS DOUBLE PRECISION,
    R_SUMA_DDS DOUBLE PRECISION)
AS
declare variable L_SUMA double precision; 
declare variable L_DDS double precision; 
declare variable L_TIP_DDS integer; 
BEGIN 
    SELECT 
        FIRST 1 LOG.TIP_CENI 
    FROM 
        LOG_CENI_DDS LOG 
    WHERE 
        LOG.OPR_ID < :P_OPR_ID AND LOG.TIP_DDS = IIF(COALESCE((SELECT OPR.SKLAD_ID FROM OPR WHERE OPR.ID = :P_OPR_ID),0) = (SELECT FIRST 1 SYSTEM.H_SKLAD FROM SYSTEM),3,1) 
    ORDER BY LOG.OPR_ID DESC, LOG.ID DESC 
    INTO 
        :L_TIP_DDS; 
 
    FOR SELECT 
        OUT_EL.SUMA, 
        SIMPLE.DDS 
    FROM 
        OUT_EL INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
    WHERE 
        OUT_EL.OPR_ID =:P_OPR_ID 
    INTO 
        :L_SUMA, :L_DDS 
    DO BEGIN 
        R_SUMA_S_DDS = COALESCE(R_SUMA_S_DDS,0) + L_SUMA; 
        R_SUMA_BEZ_DDS = COALESCE(R_SUMA_BEZ_DDS,0) + ROUNDD(L_SUMA / ROUNDD(1 + COALESCE(L_DDS,0)/100)); 
    END 
    R_SUMA_DDS = R_SUMA_S_DDS - R_SUMA_BEZ_DDS; 
    SUSPEND; 
END^


ALTER PROCEDURE GET_SUMI_S_DDS (
    P_TIP SMALLINT,
    P_OUT_EL_ID INTEGER)
RETURNS (
    R_SUMA DOUBLE PRECISION,
    R_SUMA_BEZ_DDS DOUBLE PRECISION,
    R_SUMA_OTS DOUBLE PRECISION)
AS
declare variable L_SUMA double precision;
declare variable L_SIMPLE_DDS double precision;
declare variable L_OPR_ID integer;
declare variable L_FP smallint;
declare variable L_REQUIRE_FAK smallint;
declare variable L_TIP_DDS integer;
BEGIN 
    SELECT 
        ROUNDD(IIF(OUT_EL.SUMA >= 0, 1, IIF(OUT_EL.KOL >= 0, -1, 1)) * PROD_CENI_EL.CENA * OUT_EL.KOL),
        --IIF(OUT_EL.SUMA >= 0,1,-1) * PROD_CENI_EL.CENA * OUT_EL.KOL, 
        --SIMPLE.DDS,
        PROD_CENI_EL.VAT_PERCENT,
        OUT_EL.OPR_ID 
    FROM 
        OUT_EL 
        INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID AND OUT_EL.ID = :P_OUT_EL_ID
        INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
    INTO :L_SUMA, :L_SIMPLE_DDS, :L_OPR_ID; 
 
    SELECT 
        FIRST 1 LOG.TIP_CENI 
    FROM 
        LOG_CENI_DDS LOG 
    WHERE 
        LOG.OPR_ID < :L_OPR_ID AND LOG.TIP_DDS = 1
    ORDER BY LOG.OPR_ID DESC, LOG.ID DESC
    INTO :L_TIP_DDS; 
 
    L_TIP_DDS = COALESCE(L_TIP_DDS, 0);

    SELECT 
        OUT.FP, 
        OUT.REQUIRE_FAKT 
    FROM 
        OUT 
    WHERE 
        OUT.OPR_ID = :L_OPR_ID
    INTO :L_FP, :L_REQUIRE_FAK;
 
    IF (P_TIP = 0) THEN BEGIN
        R_SUMA = L_SUMA;
        R_SUMA_BEZ_DDS = NULL; 
    END 

    IF (P_TIP = 1) THEN BEGIN
        R_SUMA = L_SUMA;
        R_SUMA_BEZ_DDS = ROUNDD(L_SUMA / (1 + L_SIMPLE_DDS / 100));
    END 

    IF (P_TIP = 2) THEN 
    BEGIN 
        IF ((L_FP IN (1,2,3)) OR (L_REQUIRE_FAK = 1)) THEN 
        BEGIN 
            R_SUMA = L_SUMA; 
            R_SUMA_BEZ_DDS = ROUNDD(L_SUMA / (1 + L_SIMPLE_DDS / 100));
        END 
        ELSE 
        BEGIN 
            R_SUMA = L_SUMA;
            R_SUMA_BEZ_DDS = L_SUMA;
        END 
    END 
 
    IF (L_TIP_DDS = 1) THEN
        R_SUMA_OTS = R_SUMA;
    ELSE 
        R_SUMA_OTS = R_SUMA_BEZ_DDS;

    SUSPEND; 
END^


ALTER PROCEDURE GET_SUMI_ZARABOTKA (
    P_OPR_ID TYPE OF DOM_KEY,
    P_CL_ID TYPE OF DOM_INT)
RETURNS (
    R_SUMA_DUE TYPE OF DOM_SUMA,
    R_SUMA_PAY TYPE OF DOM_SUMA)
AS
declare variable L_CNT_MONTAJISTI type of DOM_INT; 
BEGIN 
    SELECT 
        SUM(PRODUCTION_ZARABOTKA.ZARABOTKA_SUMA) 
    FROM 
        PRODUCTION_ZARABOTKA INNER JOIN OPR_PRODUCTION_REQUEST ON OPR_PRODUCTION_REQUEST.ID = PRODUCTION_ZARABOTKA.PRODUCTION_ID 
    WHERE 
        OPR_PRODUCTION_REQUEST.OPR_ID =:P_OPR_ID 
    INTO :R_SUMA_DUE; 
 
    SELECT 
        SUM(PRODUCTION_ZARABOTKA_IZPLATENO.SUMA) 
    FROM 
        PRODUCTION_ZARABOTKA_IZPLATENO INNER JOIN PRODUCTION_ZARABOTKA ON PRODUCTION_ZARABOTKA.ID = PRODUCTION_ZARABOTKA_IZPLATENO.ZARABOTKA_ID 
        INNER JOIN OPR_PRODUCTION_REQUEST ON OPR_PRODUCTION_REQUEST.ID = PRODUCTION_ZARABOTKA.PRODUCTION_ID 
    WHERE 
        OPR_PRODUCTION_REQUEST.OPR_ID =:P_OPR_ID 
    INTO :R_SUMA_PAY; 
 
    SELECT 
        COUNT(PRODUCTION_MONTAJISTI.ID) 
    FROM 
        PRODUCTION_MONTAJISTI 
    WHERE 
        PRODUCTION_MONTAJISTI.PRODUCTION_REQUEST_ID = (SELECT FIRST 1 OPR_PRODUCTION_REQUEST.ID FROM 
        OPR_PRODUCTION_REQUEST WHERE OPR_PRODUCTION_REQUEST.OPR_ID = :P_OPR_ID ORDER BY ID DESC) 
    INTO :L_CNT_MONTAJISTI; 
 
    IF (:R_SUMA_DUE IS NULL) then begin 
 
        SELECT 
            SUM(PRODUCTION_REQUEST_EL.KOL * CENOVA_LISTA_EL.CENA) AS SUMA 
        FROM 
            PRODUCTION_REQUEST_EL INNER JOIN OPR_PRODUCTION_REQUEST ON OPR_PRODUCTION_REQUEST.OPR_ID = PRODUCTION_REQUEST_EL.OPR_REQUEST_ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = PRODUCTION_REQUEST_EL.SIMPLE_ID 
            INNER JOIN CENOVA_LISTA_EL ON CENOVA_LISTA_EL.SIMPLE_ID = SIMPLE.ID 
            INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
        WHERE 
            --OPR_PRODUCTION_REQUEST.MANUAL_COMPLETE = 1 AND 
            PRODUCTION_REQUEST_EL.OPR_REQUEST_ID = OPR_PRODUCTION_REQUEST.OPR_ID AND 
            CENOVA_LISTA.ID = :P_CL_ID 
            and OPR_PRODUCTION_REQUEST.OPR_ID =:P_OPR_ID 
        INTO :R_SUMA_DUE; 
    end 
 
    SUSPEND; 
 
END^


ALTER PROCEDURE GET_SUPTO_SIMPLE_HISTORY_OBOB (
    P_FROM_DATE TYPE OF DOM_CHAR_30,
    P_TO_DATE TYPE OF DOM_CHAR_30,
    P_FILTER_SIMPLES TYPE OF DOM_CHAR_300)
RETURNS (
    R_SIMPLE_CODE TYPE OF DOM_CHAR_50,
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_SUMA_SALDO_SR TYPE OF DOM_SUMA,
    R_SUMANACH_SR TYPE OF DOM_SUMA,
    R_KOLNACH TYPE OF DOM_KOL,
    R_KOL_OB TYPE OF DOM_KOL,
    R_SUMA_SR_OB TYPE OF DOM_SUMA,
    R_KOL_SALDO TYPE OF DOM_KOL,
    R_KOL_IN_OB TYPE OF DOM_KOL,
    R_KOL_OUT_OB TYPE OF DOM_KOL,
    R_SUMA_IN_SR_OB TYPE OF DOM_SUMA,
    R_SUMA_OUT_SR_OB TYPE OF DOM_SUMA)
AS
declare variable L_SUMANACH_SR1 type of DOM_SUMA; 
declare variable L_SUMANACH_SR2 type of DOM_SUMA; 
declare variable L_SUMANACH_SR3 type of DOM_SUMA; 
declare variable L_SUMAOB_SR1 type of DOM_SUMA; 
declare variable L_SUMAOB_SR2 type of DOM_SUMA; 
declare variable L_SUMAOB_SR3 type of DOM_SUMA; 
declare variable L_SUMANACH_IN_SR type of DOM_SUMA; 
declare variable L_KOLNACH_OUT type of DOM_KOL; 
declare variable L_KOLNACH_IN type of DOM_KOL; 
declare variable L_SUMANACH_OUT_SR type of DOM_SUMA; 
declare variable L_SUMA_NACH_IN_FR type of DOM_SUMA; 
declare variable L_SUMA_IN_SR_OB type of DOM_SUMA; 
declare variable L_KOL_IN_OB type of DOM_KOL; 
declare variable L_KOL_OUT_OB type of DOM_KOL; 
declare variable L_SUMA_OUT_SR_OB type of DOM_SUMA; 
declare variable L_KOL_IZL type of DOM_KOL; 
declare variable L_SIMPLE_ID integer; 
BEGIN 
  FOR EXECUTE STATEMENT 
    'SELECT 
        SIMPLE.ID, 
        SIMPLE.NAME, 
        SIMPLE.CODE 
    FROM 
        SIMPLE 
    WHERE 
        NOT SIMPLE.USLUGA = 1' || :P_FILTER_SIMPLES || 
    'ORDER BY SIMPLE.NAME' 
  INTO 
    :L_SIMPLE_ID,  :R_SIMPLE_NAME, :R_SIMPLE_CODE 
 
    DO BEGIN 
        L_SUMANACH_IN_SR = 0; 
        L_SUMANACH_SR1 = 0; 
 
        SELECT 
            COALESCE(SUM(PEN.SUMA_SR), 0) 
        FROM 
            IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
            INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = IN_EL.ID 
            INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
        WHERE 
            OPR.OPR_TIP IN (26,28) 
            AND IN_EL.SIMPLE_ID = :L_SIMPLE_ID 
            AND OPR.OPR_DATE < CAST(:P_FROM_DATE AS DATE) 
        INTO 
            :L_SUMANACH_SR1; 
 
        L_SUMANACH_IN_SR = ROUND(L_SUMANACH_IN_SR + L_SUMANACH_SR1, 2); 
 
        L_SUMANACH_SR2 = 0; 
 
        SELECT 
            COALESCE(SUM(IN_EL.SUMA_SR), 0) 
        FROM 
            MOVE INNER JOIN IN_EL ON IN_EL.OPR_ID = MOVE.OPR_IN_ID 
            INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
        WHERE 
            IN_EL.SIMPLE_ID =  :L_SIMPLE_ID 
            AND OPR.OPR_DATE < CAST(:P_FROM_DATE AS DATE) 
        INTO 
            :L_SUMANACH_SR2; 
 
        L_SUMANACH_IN_SR = ROUND(L_SUMANACH_IN_SR + L_SUMANACH_SR2, 2); 
 
        L_SUMANACH_SR3 = 0; 
 
        SELECT 
            COALESCE(SUM(IN_EL.SUMA_FR),0) 
        FROM 
            IN_EL INNER JOIN OPR ON (OPR.OPR_TIP NOT IN (4,26) AND OPR.ID = IN_EL.OPR_ID) 
        WHERE 
            IN_EL.SIMPLE_ID = :L_SIMPLE_ID 
            AND OPR.OPR_DATE < CAST(:P_FROM_DATE AS DATE) 
        INTO 
            :L_SUMANACH_SR3; 
 
        L_SUMANACH_IN_SR = ROUND(L_SUMANACH_IN_SR + L_SUMANACH_SR3, 2); 
 
        L_KOLNACH_IN = 0; 
        L_SUMA_NACH_IN_FR = 0; 
 
        SELECT 
            COALESCE(SUM(IN_EL.KOL), 0), 
            COALESCE(SUM(IN_EL.SUMA_FR), 0) 
        FROM 
            IN_EL LEFT JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
        WHERE 
            IN_EL.SIMPLE_ID = :L_SIMPLE_ID 
            AND OPR.OPR_DATE < CAST(:P_FROM_DATE AS DATE) 
        INTO 
            :L_KOLNACH_IN, :L_SUMA_NACH_IN_FR; 
 
        L_KOLNACH_OUT = 0; 
        L_SUMANACH_OUT_SR = 0; 
 
        SELECT 
            COALESCE(SUM(OUT_EL.KOL), 0), 
            COALESCE(SUM(OUT_EL.SUMA_SR), 0) 
        FROM 
            OUT_EL LEFT JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
        WHERE 
            OUT_EL.SIMPLE_ID = :L_SIMPLE_ID 
            AND OPR.OPR_DATE < CAST(:P_FROM_DATE AS DATE) 
        INTO 
            :L_KOLNACH_OUT, :L_SUMANACH_OUT_SR; 
 
        L_SUMANACH_IN_SR = L_SUMA_NACH_IN_FR; 
        R_KOLNACH = ROUND(L_KOLNACH_IN - L_KOLNACH_OUT,5); 
 
        R_SUMANACH_SR = ROUND(L_SUMANACH_IN_SR - L_SUMANACH_OUT_SR,2); 
 
        L_SUMA_IN_SR_OB = 0; 
        L_SUMAOB_SR1 = 0; 
 
        SELECT 
            COALESCE(SUM(PEN.SUMA_SR), 0) 
        FROM 
            IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
            INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = IN_EL.ID 
            INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
        WHERE 
            OPR.OPR_TIP IN (26,28) 
            AND IN_EL.SIMPLE_ID = :L_SIMPLE_ID 
            AND OPR.OPR_DATE >= CAST(:P_FROM_DATE AS DATE) 
            AND OPR.OPR_DATE < CAST(:P_TO_DATE AS DATE) + 1 
        INTO 
            :L_SUMAOB_SR1; 
 
        L_SUMA_IN_SR_OB = ROUND(COALESCE(:L_SUMA_IN_SR_OB,0) + COALESCE(:L_SUMAOB_SR1, 0),2); 
 
        L_SUMAOB_SR2 = 0; 
 
        SELECT 
            COALESCE(SUM(IN_EL.SUMA_SR), 0) 
        FROM 
            MOVE INNER JOIN IN_EL ON IN_EL.OPR_ID = MOVE.OPR_IN_ID 
            INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
        WHERE 
            IN_EL.SIMPLE_ID =  :L_SIMPLE_ID 
            AND OPR.OPR_DATE >= CAST(:P_FROM_DATE AS DATE) 
            AND OPR.OPR_DATE < CAST(:P_TO_DATE AS DATE) + 1 
        INTO 
            :L_SUMAOB_SR2; 
 
        L_SUMA_IN_SR_OB = ROUND(COALESCE(:L_SUMA_IN_SR_OB, 0) + COALESCE(:L_SUMAOB_SR2, 0),2); 
 
        L_SUMAOB_SR3 = 0; 
 
        SELECT 
            COALESCE(SUM(IN_EL.SUMA_FR),0) 
        FROM 
            IN_EL INNER JOIN OPR ON (OPR.OPR_TIP NOT IN (4,26) AND OPR.ID = IN_EL.OPR_ID) 
        WHERE 
            IN_EL.SIMPLE_ID = :L_SIMPLE_ID 
            AND OPR.OPR_DATE >= CAST(:P_FROM_DATE AS DATE) 
            AND OPR.OPR_DATE < CAST(:P_TO_DATE AS DATE) + 1 
        INTO 
            :L_SUMAOB_SR3; 
 
        L_SUMA_IN_SR_OB = ROUND(COALESCE(:L_SUMA_IN_SR_OB,0) + COALESCE(:L_SUMAOB_SR3, 0),2); 
 
        L_KOL_IN_OB = 0; 
 
        SELECT 
            COALESCE(SUM(IN_EL.KOL),0) 
        FROM 
            IN_EL LEFT JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
        WHERE 
            IN_EL.SIMPLE_ID = :L_SIMPLE_ID 
            AND OPR.OPR_DATE >= CAST(:P_FROM_DATE AS DATE) 
            AND OPR.OPR_DATE < CAST(:P_TO_DATE AS DATE) + 1 
        INTO 
            :L_KOL_IN_OB; 
 
        SELECT 
            COALESCE(SUM(OUT_EL.KOL),0), 
            COALESCE(SUM(OUT_EL.SUMA_SR),0) 
        FROM 
            OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
        WHERE 
            OUT_EL.SIMPLE_ID = :L_SIMPLE_ID 
            AND OPR.OPR_DATE >= CAST(:P_FROM_DATE AS DATE) 
            AND OPR.OPR_DATE < CAST(:P_TO_DATE AS DATE) + 1 
        INTO 
            :L_KOL_OUT_OB, :L_SUMA_OUT_SR_OB; 
 
        L_KOL_IZL = 0; 
 
        SELECT 
            COALESCE(SUM(IZL.KOL_IZL), 0) 
        FROM 
            IZL INNER JOIN OUT_EL ON OUT_EL.ID = IZL.OUT_EL_ID 
            INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
        WHERE 
            OUT_EL.SIMPLE_ID = :L_SIMPLE_ID 
            AND OPR.OPR_DATE >= CAST(:P_FROM_DATE AS DATE) 
            AND OPR.OPR_DATE < CAST(:P_TO_DATE AS DATE) + 1 
        INTO :L_KOL_IZL; 
 
        L_KOL_OUT_OB = :L_KOL_OUT_OB - COALESCE(:L_KOL_IZL,0); 
 
        R_KOL_IN_OB = COALESCE(:L_KOL_IN_OB,0); 
        R_KOL_OUT_OB = COALESCE(:L_KOL_OUT_OB,0); 
        R_KOL_OB = ROUND5(COALESCE(:L_KOL_IN_OB,0) - COALESCE(:L_KOL_OUT_OB,0)); 
        R_SUMA_IN_SR_OB = COALESCE(:L_SUMA_IN_SR_OB, 0); 
        R_SUMA_OUT_SR_OB = COALESCE(:L_SUMA_OUT_SR_OB,0); 
        R_SUMA_SR_OB = ROUNDD(COALESCE(:L_SUMA_IN_SR_OB,0) - COALESCE(:L_SUMA_OUT_SR_OB,0)); 
        R_SUMA_SALDO_SR = ROUNDD(COALESCE(:R_SUMANACH_SR,0) + COALESCE(:R_SUMA_IN_SR_OB,0) - COALESCE(:R_SUMA_OUT_SR_OB,0)); 
        R_KOL_SALDO = ROUNDD(COALESCE(:R_KOLNACH,0) + COALESCE(:R_KOL_IN_OB,0) - COALESCE(:R_KOL_OUT_OB,0)); 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE GET_USER_SKLAD_NAL (
    P_USER_ID INTEGER,
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_KOL_NAL DOUBLE PRECISION,
    R_SIMPLE_ID INTEGER)
AS
BEGIN 
    R_SIMPLE_ID = P_SIMPLE_ID; 
    SELECT 
        SUM(COALESCE(NAL.KOL_NAL,0.00)) 
    FROM 
        USER_SKLAD_NAL_NODE USN INNER JOIN NAL ON USN.USER_ID = :P_USER_ID 
        AND USN.SKLAD_ID = NAL.SKLAD_ID AND NAL.SIMPLE_ID = :R_SIMPLE_ID 
    INTO 
        :R_KOL_NAL; 
    R_KOL_NAL = COALESCE(R_KOL_NAL,0.00); 
    SUSPEND; 
END^


ALTER PROCEDURE GET_ZAIAVKA_DOSTAVKA (
    P_FLAG_IZP INTEGER,
    P_DOSTAVCHICI INTEGER,
    P_FROM_DATE TYPE OF DOM_DATE,
    P_TO_DATE TYPE OF DOM_DATE)
RETURNS (
    TIP INTEGER,
    OPR_ID INTEGER,
    OPR_DATE DATE,
    DATETIME TIMESTAMP,
    SUMA DOUBLE PRECISION,
    USER_ID SMALLINT,
    USERNAME VARCHAR(30),
    COMMENT BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    OPR_ID_OB INTEGER,
    R_IZPL VARCHAR(2000),
    R_TIP_ZD INTEGER,
    R_KLI_ID INTEGER,
    R_KLI_NAME VARCHAR(100),
    R_OBOB INTEGER,
    R_DAYS_DOST INTEGER,
    R_TIP SMALLINT)
AS
declare variable L_IZPL varchar(300); 
declare variable L_FLAG integer; 
declare variable L_OPR_DATE date; 
declare variable L_OPR_TIP_NAME varchar(45); 
BEGIN 
  IF (P_DOSTAVCHICI = 0) THEN BEGIN 
  FOR 
    SELECT 
        CAST(0 AS INTEGER) TIP, 
        OPR.ID AS OPR_ID, 
        OPR.OPR_DATE AS OPR_DATE, 
        OPR.DATETIME, 
        OPR.SUMA, 
        OPR.USER_ID, 
        COALESCE("USER".NAME ,'НЯМА') AS USERNAME, 
        KLI.ID KLI_ID, 
        KLI.NAME KLI_NAME, 
        NULL, 
        0 
    FROM 
        OPR INNER JOIN "USER" ON OPR.USER_ID = "USER".ID 
        --INNER JOIN (SELECT FIRST 1 ZAIAVKA_DOSTAVKA.OPR_ID FROM ZAIAVKA_DOSTAVKA INNER JOIN OPR_EDIT ON OPR_EDIT.OPR_ID = ZAIAVKA_DOSTAVKA.OPR_ID ORDER BY ZAIAVKA_DOSTAVKA.OPR_ID DESC) ZAIAVKA ON ZAIAVKA.OPR_ID = OPR.ID 
        LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
    WHERE 
        OPR.OPR_TIP = 236 
        AND OPR.OPR_DATE BETWEEN :P_FROM_DATE AND :P_TO_DATE 
        AND NOT EXISTS (SELECT OPR_EDIT.ED_OPR_ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID = OPR.ID) 
        AND NOT EXISTS (SELECT OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
 
    UNION 
 
    SELECT 
        CAST(0 AS INTEGER) TIP, 
        OPR.ID AS OPR_ID, 
        OPR.OPR_DATE AS OPR_DATE, 
        OPR.DATETIME, 
        OPR.SUMA, 
        OPR.USER_ID, 
        COALESCE("USER".NAME ,'НЯМА') AS USERNAME, 
        KLI.ID KLI_ID, 
        KLI.NAME KLI_NAME, 
        NULL, 
        0 
    FROM 
        OPR INNER JOIN "USER" ON OPR.USER_ID = "USER".ID 
        LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
    WHERE 
        OPR.OPR_TIP = 36 
        AND OPR.OPR_DATE BETWEEN :P_FROM_DATE AND :P_TO_DATE 
        AND NOT EXISTS (SELECT OPR_EDIT.ED_OPR_ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID = OPR.ID) 
        AND NOT EXISTS (SELECT OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
 
    UNION 
 
    SELECT 
        CAST(0 AS INTEGER) TIP, 
        OPR.ID AS OPR_ID, 
        OPR.OPR_DATE AS OPR_DATE, 
        OPR.DATETIME, 
        OPR.SUMA, 
        OPR.USER_ID, 
        "USER".NAME AS USERNAME, 
        KLI.ID KLI_ID, 
        KLI.NAME KLI_NAME, 
        NULL, 
        1 
    FROM 
        OPR INNER JOIN "USER" ON OPR.USER_ID = "USER".ID 
        INNER JOIN OPR_ANUL ON OPR_ANUL.AN_OPR_ID = OPR.ID 
        LEFT JOIN KLI ON KLI.ID = OPR.KLI_ID 
    WHERE 
        OPR.OPR_TIP IN (36, 236) 
        AND OPR.OPR_DATE BETWEEN :P_FROM_DATE AND :P_TO_DATE 
 
    INTO :TIP, :OPR_ID, :OPR_DATE, :DATETIME, :SUMA, :USER_ID, :USERNAME, :R_KLI_ID, :R_KLI_NAME, :R_DAYS_DOST, :R_TIP 
  DO 
  BEGIN 
    R_IZPL = ''; 
    L_FLAG = 0; 
 
    COMMENT = NULL; 
 
    SELECT FIRST 1 
        COMMENTS.NOTE 
    FROM 
        COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
    WHERE 
        COMMENT_OPR_NODE.OPR_ID = :OPR_ID 
    ORDER BY 
        COMMENT_OPR_NODE.ID DESC 
    INTO :COMMENT; 
 
    OPR_ID_OB = NULL; 
    SELECT DISTINCT 
     OPR_ID_OB 
    FROM ZAIAVKA_DOSTAVKA_NODE 
    WHERE 
      OPR_ID = :OPR_ID AND 
      NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR_ID_OB) AND 
      NOT EXISTS (SELECT OPR_EDIT.ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID = OPR_ID_OB) 
    INTO :OPR_ID_OB; 
 
    SELECT COUNT(ID) FROM ZAIAVKA_DOSTAVKA_NODE WHERE OPR_ID_OB = :OPR_ID 
    INTO :R_OBOB; 
 
    EXECUTE PROCEDURE GET_STATUS_ZD(:OPR_ID) RETURNING_VALUES :R_TIP_ZD; 
 
    IF (P_FLAG_IZP > 0) THEN BEGIN 
      FOR SELECT DISTINCT 
        CAST(OPR_ID_DOST_MOVE AS VARCHAR(10)) 
      FROM ZD_DOST_MOVE_NODE 
      WHERE 
        OPR_ID_ZD = :OPR_ID 
      INTO :L_IZPL 
      DO 
        L_FLAG = L_FLAG + 1; 
 
      FOR SELECT DISTINCT 
        CAST(ZD_DOST_MOVE_NODE.OPR_ID_DOST_MOVE AS VARCHAR(10)), 
        OPR.OPR_DATE, 
        OPR_TIP.NAME 
      FROM 
        ZD_DOST_MOVE_NODE 
        INNER JOIN OPR ON OPR.ID = ZD_DOST_MOVE_NODE.OPR_ID_DOST_MOVE 
        INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
      WHERE 
        ZD_DOST_MOVE_NODE.OPR_ID_ZD = :OPR_ID 
      INTO :L_IZPL,:L_OPR_DATE,:L_OPR_TIP_NAME 
      DO BEGIN 
        IF (R_IZPL = '') THEN BEGIN 
          IF (L_FLAG < 2) THEN 
            R_IZPL = L_IZPL||'/'||L_OPR_DATE||'-'||L_OPR_TIP_NAME; 
          ELSE 
            R_IZPL = L_IZPL; 
        END 
        ELSE 
          R_IZPL = R_IZPL ||','||L_IZPL; 
      END 
    END 
    SUSPEND; 
  END 
  END 
  ELSE BEGIN 
    FOR SELECT DISTINCT 
        CAST(0 AS INTEGER) TIP, 
        OPR.ID AS OPR_ID, 
        OPR.OPR_DATE AS OPR_DATE, 
        OPR.DATETIME, 
        OPR.SUMA, 
        OPR.USER_ID, 
        "USER".NAME AS USERNAME, 
        KLI.ID KLI_ID, 
        KLI.NAME KLI_NAME, 
        KLI.DAYS_DOST, 
        0 
    FROM 
        OPR 
        --INNER JOIN (SELECT FIRST 1 ZAIAVKA_DOSTAVKA.OPR_ID, ZAIAVKA_DOSTAVKA.KLI_ID FROM ZAIAVKA_DOSTAVKA INNER JOIN OPR_EDIT ON OPR_EDIT.OPR_ID = ZAIAVKA_DOSTAVKA.OPR_ID ORDER BY ZAIAVKA_DOSTAVKA.OPR_ID DESC) ZAIAVKA ON ZAIAVKA.OPR_ID = OPR.ID 
        INNER JOIN "USER" ON OPR.USER_ID = "USER".ID 
        LEFT JOIN KLI ON KLI.ID = (SELECT FIRST 1 ZAIAVKA_DOSTAVKA.KLI_ID FROM ZAIAVKA_DOSTAVKA WHERE ZAIAVKA_DOSTAVKA.OPR_ID = OPR.ID) 
    WHERE 
        OPR.OPR_TIP = 236 
        AND OPR.OPR_DATE BETWEEN :P_FROM_DATE AND :P_TO_DATE 
        AND NOT EXISTS (SELECT OPR_EDIT.ED_OPR_ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID = OPR.ID) 
        AND NOT EXISTS (SELECT OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
 
    UNION 
 
    SELECT DISTINCT 
        CAST(0 AS INTEGER) TIP, 
        OPR.ID AS OPR_ID, 
        OPR.OPR_DATE AS OPR_DATE, 
        OPR.DATETIME, 
        OPR.SUMA, 
        OPR.USER_ID, 
        "USER".NAME AS USERNAME, 
        KLI.ID KLI_ID, 
        KLI.NAME KLI_NAME, 
        KLI.DAYS_DOST, 
        0 
    FROM 
        OPR INNER JOIN ZAIAVKA_DOSTAVKA ZD ON OPR.ID = ZD.OPR_ID 
        INNER JOIN "USER" ON OPR.USER_ID = "USER".ID 
        LEFT JOIN KLI ON KLI.ID = ZD.KLI_ID 
    WHERE 
        OPR.OPR_TIP = 36 
        AND OPR.OPR_DATE BETWEEN :P_FROM_DATE AND :P_TO_DATE 
        AND NOT EXISTS (SELECT OPR_EDIT.ED_OPR_ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID = OPR.ID) 
        AND NOT EXISTS (SELECT OPR_ANUL.OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
 
    UNION 
 
    SELECT DISTINCT 
        CAST(0 AS INTEGER) TIP, 
        OPR.ID AS OPR_ID, 
        OPR.OPR_DATE AS OPR_DATE, 
        OPR.DATETIME, 
        OPR.SUMA, 
        OPR.USER_ID, 
        "USER".NAME AS USERNAME, 
        KLI.ID KLI_ID, 
        KLI.NAME KLI_NAME, 
        KLI.DAYS_DOST, 
        1 
    FROM 
        OPR 
        INNER JOIN ZAIAVKA_DOSTAVKA ZD ON OPR.ID = ZD.OPR_ID 
        INNER JOIN "USER" ON OPR.USER_ID = "USER".ID 
        INNER JOIN OPR_ANUL ON OPR_ANUL.AN_OPR_ID = OPR.ID 
        LEFT JOIN KLI ON KLI.ID = ZD.KLI_ID 
    WHERE 
        OPR.OPR_TIP IN (36, 236) 
        AND OPR.OPR_DATE BETWEEN :P_FROM_DATE AND :P_TO_DATE 
    ORDER BY 2 
    INTO :TIP, :OPR_ID, :OPR_DATE, :DATETIME, :SUMA, :USER_ID, :USERNAME, :R_KLI_ID, :R_KLI_NAME, :R_DAYS_DOST, :R_TIP 
  DO 
  BEGIN 
    R_IZPL = ''; 
    L_FLAG = 0; 
 
    COMMENT = NULL; 
 
    SELECT FIRST 1 
        COMMENTS.NOTE 
    FROM 
        COMMENTS INNER JOIN COMMENT_OPR_NODE ON COMMENT_OPR_NODE.COMMENT_ID = COMMENTS.ID 
    WHERE 
        COMMENT_OPR_NODE.OPR_ID = :OPR_ID 
    ORDER BY 
        COMMENT_OPR_NODE.ID DESC 
    INTO :COMMENT; 
 
    OPR_ID_OB = NULL; 
    SELECT DISTINCT 
     OPR_ID_OB 
    FROM ZAIAVKA_DOSTAVKA_NODE 
    WHERE 
      OPR_ID = :OPR_ID AND 
      NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR_ID_OB) AND 
      NOT EXISTS (SELECT OPR_EDIT.ID FROM OPR_EDIT WHERE OPR_EDIT.ED_OPR_ID = OPR_ID_OB) 
    INTO :OPR_ID_OB; 
 
    SELECT COUNT(ID) FROM ZAIAVKA_DOSTAVKA_NODE WHERE OPR_ID_OB = :OPR_ID 
    INTO :R_OBOB; 
 
    EXECUTE PROCEDURE GET_STATUS_ZD(:OPR_ID) RETURNING_VALUES :R_TIP_ZD; 
 
    IF (P_FLAG_IZP > 0) THEN BEGIN 
      FOR SELECT DISTINCT 
        CAST(OPR_ID_DOST_MOVE AS VARCHAR(10)) 
      FROM ZD_DOST_MOVE_NODE 
      WHERE 
        OPR_ID_ZD = :OPR_ID 
      INTO :L_IZPL 
      DO 
        L_FLAG = L_FLAG + 1; 
 
      FOR SELECT DISTINCT 
        CAST(ZD_DOST_MOVE_NODE.OPR_ID_DOST_MOVE AS VARCHAR(10)), 
        OPR.OPR_DATE, 
        OPR_TIP.NAME 
      FROM 
        ZD_DOST_MOVE_NODE 
        INNER JOIN OPR ON OPR.ID = ZD_DOST_MOVE_NODE.OPR_ID_DOST_MOVE 
        INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
      WHERE 
        ZD_DOST_MOVE_NODE.OPR_ID_ZD = :OPR_ID 
      INTO :L_IZPL,:L_OPR_DATE,:L_OPR_TIP_NAME 
      DO BEGIN 
        IF (R_IZPL = '') THEN BEGIN 
          IF (L_FLAG < 2) THEN 
            R_IZPL = L_IZPL||'/'||L_OPR_DATE||'-'||L_OPR_TIP_NAME; 
          ELSE 
            R_IZPL = L_IZPL; 
        END 
        ELSE 
          R_IZPL = R_IZPL ||','||L_IZPL; 
      END 
    END 
    SUSPEND; 
  END 
 
  END 
END^


ALTER PROCEDURE GET_ZAJAVKA_ZA_DOST_EL (
    P_ID TYPE OF DOM_KEY,
    P_TYPE_SORT TYPE OF DOM_INT)
RETURNS (
    CODE TYPE OF DOM_CHAR_50,
    CODE2 TYPE OF DOM_CHAR_50,
    SIMPLE_NAME VARCHAR(100),
    CENA_LAST DOUBLE PRECISION,
    CENA_CL DOUBLE PRECISION,
    KOL_ZAIAVKA DOUBLE PRECISION,
    KOL_NAL DOUBLE PRECISION,
    KOL_RAZ DOUBLE PRECISION,
    RAZ_NAME VARCHAR(30),
    ME VARCHAR(2),
    SKLAD_NAME VARCHAR(20),
    KLI_NAME VARCHAR(100),
    SUMA_LAST_CENA DOUBLE PRECISION,
    SUMA_CL DOUBLE PRECISION,
    DAYS_DOST SMALLINT,
    R_SIMPLE_PROP VARCHAR(1000),
    R_RAZ_ELEMENT VARCHAR(30))
AS
declare variable L_SIMP_MAJ_PROP varchar(50); 
declare variable L_SIMP_MIN_PROP varchar(50); 
declare variable L_ZD_ID integer; 
BEGIN 
   IF (P_TYPE_SORT = 0 ) THEN BEGIN 
     FOR SELECT 
        SIMPLE.CODE, 
        SIMPLE.CODE2, 
        SIMPLE.NAME AS SIMPLE_NAME, 
        ZAIAVKA_DOSTAVKA.CENA_LAST, 
        ZAIAVKA_DOSTAVKA.CENA_CL, 
        ZAIAVKA_DOSTAVKA.KOL_ZAIAVKA, 
        ZAIAVKA_DOSTAVKA.KOL_NAL, 
        ZAIAVKA_DOSTAVKA.KOL_RAZ, 
        RAZ_TIP.NAME AS RAZ_NAME, 
        ME.NAME AS ME, 
        SKLAD.NAME AS SKLAD_NAME, 
        KLI.NAME AS KLI_NAME, 
        (ZAIAVKA_DOSTAVKA.CENA_LAST * ZAIAVKA_DOSTAVKA.KOL_ZAIAVKA) AS SUMA_LAST_CENA, 
        (ZAIAVKA_DOSTAVKA.CENA_CL * ZAIAVKA_DOSTAVKA.KOL_ZAIAVKA) AS SUMA_CL, 
        KLI.DAYS_DOST, 
        ZAIAVKA_DOSTAVKA.ID, 
        RAZ_ELEMENT.NAME 
      FROM ZAIAVKA_DOSTAVKA INNER JOIN SIMPLE ON SIMPLE.ID = ZAIAVKA_DOSTAVKA.SIMPLE_ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = ZAIAVKA_DOSTAVKA.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
        LEFT JOIN RAZ_TIP ON RAZ_TIP.ID = RAZFASOVKA.RAZ_TIP_ID 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN SKLAD ON SKLAD.ID = ZAIAVKA_DOSTAVKA.SKLAD_ID 
        LEFT JOIN KLI ON KLI.ID = ZAIAVKA_DOSTAVKA.KLI_ID 
      WHERE ZAIAVKA_DOSTAVKA.OPR_ID =:P_ID 
      INTO :CODE, :CODE2, :SIMPLE_NAME, :CENA_LAST, :CENA_CL, :KOL_ZAIAVKA, :KOL_NAL, :KOL_RAZ, :RAZ_NAME, :ME, :SKLAD_NAME, :KLI_NAME, :SUMA_LAST_CENA, :SUMA_CL, :DAYS_DOST, :L_ZD_ID, :R_RAZ_ELEMENT 
      DO 
      BEGIN 
        L_SIMP_MAJ_PROP = ''; 
        L_SIMP_MIN_PROP = ''; 
        R_SIMPLE_PROP = ''; 
 
        EXECUTE PROCEDURE GET_ZD_PROPERTIES(:L_ZD_ID) RETURNING_VALUES (:R_SIMPLE_PROP); 
 
        SUSPEND; 
      END 
    END 
    ELSE 
    IF (P_TYPE_SORT = 1) THEN BEGIN 
      FOR SELECT 
        SIMPLE.CODE, 
        SIMPLE.CODE2, 
        SIMPLE.NAME AS SIMPLE_NAME, 
        ZAIAVKA_DOSTAVKA.CENA_LAST, 
        ZAIAVKA_DOSTAVKA.CENA_CL, 
        ZAIAVKA_DOSTAVKA.KOL_ZAIAVKA, 
        ZAIAVKA_DOSTAVKA.KOL_NAL, 
        ZAIAVKA_DOSTAVKA.KOL_RAZ, 
        RAZ_TIP.NAME AS RAZ_NAME, 
        ME.NAME AS ME, 
        SKLAD.NAME AS SKLAD_NAME, 
        KLI.NAME AS KLI_NAME, 
        (ZAIAVKA_DOSTAVKA.CENA_LAST * ZAIAVKA_DOSTAVKA.KOL_ZAIAVKA) AS SUMA_LAST_CENA, 
        (ZAIAVKA_DOSTAVKA.CENA_CL * ZAIAVKA_DOSTAVKA.KOL_ZAIAVKA) AS SUMA_CL, 
        KLI.DAYS_DOST, 
        ZAIAVKA_DOSTAVKA.ID, 
        RAZ_ELEMENT.NAME 
      FROM ZAIAVKA_DOSTAVKA INNER JOIN SIMPLE ON SIMPLE.ID = ZAIAVKA_DOSTAVKA.SIMPLE_ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = ZAIAVKA_DOSTAVKA.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
        LEFT JOIN RAZ_TIP ON RAZ_TIP.ID = RAZFASOVKA.RAZ_TIP_ID 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN SKLAD ON SKLAD.ID = ZAIAVKA_DOSTAVKA.SKLAD_ID 
        LEFT JOIN KLI ON KLI.ID = ZAIAVKA_DOSTAVKA.KLI_ID 
      WHERE ZAIAVKA_DOSTAVKA.OPR_ID =:P_ID 
      ORDER BY 1,3 
      INTO :CODE, :CODE2, :SIMPLE_NAME, :CENA_LAST, :CENA_CL, :KOL_ZAIAVKA, :KOL_NAL, :KOL_RAZ, :RAZ_NAME, :ME, :SKLAD_NAME, :KLI_NAME, :SUMA_LAST_CENA, :SUMA_CL, :DAYS_DOST, :L_ZD_ID, :R_RAZ_ELEMENT 
      DO 
      BEGIN 
        L_SIMP_MAJ_PROP = ''; 
        L_SIMP_MIN_PROP = ''; 
        R_SIMPLE_PROP = ''; 
 
        EXECUTE PROCEDURE GET_ZD_PROPERTIES(:L_ZD_ID) RETURNING_VALUES (:R_SIMPLE_PROP); 
 
        SUSPEND; 
      END 
    END 
    ELSE 
    IF (P_TYPE_SORT = 2) THEN BEGIN 
      FOR SELECT 
        SIMPLE.CODE, 
        SIMPLE.CODE2, 
        SIMPLE.NAME AS SIMPLE_NAME, 
        ZAIAVKA_DOSTAVKA.CENA_LAST, 
        ZAIAVKA_DOSTAVKA.CENA_CL, 
        ZAIAVKA_DOSTAVKA.KOL_ZAIAVKA, 
        ZAIAVKA_DOSTAVKA.KOL_NAL, 
        ZAIAVKA_DOSTAVKA.KOL_RAZ, 
        RAZ_TIP.NAME AS RAZ_NAME, 
        ME.NAME AS ME, 
        SKLAD.NAME AS SKLAD_NAME, 
        KLI.NAME AS KLI_NAME, 
        (ZAIAVKA_DOSTAVKA.CENA_LAST * ZAIAVKA_DOSTAVKA.KOL_ZAIAVKA) AS SUMA_LAST_CENA, 
        (ZAIAVKA_DOSTAVKA.CENA_CL * ZAIAVKA_DOSTAVKA.KOL_ZAIAVKA) AS SUMA_CL, 
        KLI.DAYS_DOST, 
        ZAIAVKA_DOSTAVKA.ID, 
        RAZ_ELEMENT.NAME 
      FROM ZAIAVKA_DOSTAVKA INNER JOIN SIMPLE ON SIMPLE.ID = ZAIAVKA_DOSTAVKA.SIMPLE_ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = ZAIAVKA_DOSTAVKA.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = RAZFASOVKA.RAZ_ELEMENT_ID 
        LEFT JOIN RAZ_TIP ON RAZ_TIP.ID = RAZFASOVKA.RAZ_TIP_ID 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN SKLAD ON SKLAD.ID = ZAIAVKA_DOSTAVKA.SKLAD_ID 
        LEFT JOIN KLI ON KLI.ID = ZAIAVKA_DOSTAVKA.KLI_ID 
      WHERE ZAIAVKA_DOSTAVKA.OPR_ID =:P_ID 
      ORDER BY 3 
      INTO :CODE, :CODE2, :SIMPLE_NAME, :CENA_LAST, :CENA_CL, :KOL_ZAIAVKA, :KOL_NAL, :KOL_RAZ, :RAZ_NAME, :ME, :SKLAD_NAME, :KLI_NAME, :SUMA_LAST_CENA, :SUMA_CL, :DAYS_DOST, :L_ZD_ID, :R_RAZ_ELEMENT 
      DO 
      BEGIN 
        L_SIMP_MAJ_PROP = ''; 
        L_SIMP_MIN_PROP = ''; 
        R_SIMPLE_PROP = ''; 
 
        EXECUTE PROCEDURE GET_ZD_PROPERTIES(:L_ZD_ID) RETURNING_VALUES (:R_SIMPLE_PROP); 
 
        SUSPEND; 
      END 
    END 
END ;^


ALTER PROCEDURE GET_ZD_DOST_REPORT_EL (
    OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    R_SIMPLE_CENA TYPE OF DOM_CENA,
    R_SIMPLE_CENA_CL TYPE OF DOM_CENA,
    R_KOL TYPE OF DOM_KOL,
    SKLAD_NAME TYPE OF DOM_CHAR_100,
    RAZ_NAME TYPE OF DOM_CHAR_50,
    RAZ_KOL TYPE OF DOM_KOL,
    ME CHAR(2),
    CODE TYPE OF DOM_CHAR_50,
    CODE2 TYPE OF DOM_CHAR_50,
    R_KOL_ZAIAVKA TYPE OF DOM_KOL,
    R_KOL_IZP TYPE OF DOM_KOL,
    R_SIMP_PROP TYPE OF DOM_CHAR_1000,
    R_KLI_ID TYPE OF DOM_KEY,
    R_KLI_NAME TYPE OF DOM_CHAR_100,
    R_KLI_ADDRESS TYPE OF DOM_CHAR_100,
    R_OBEKT_NAME TYPE OF DOM_CHAR_20,
    R_PLACE_NAME TYPE OF DOM_CHAR_30,
    R_DAYS_DOST TYPE OF DOM_INT,
    R_KLI_TEL TYPE OF DOM_CHAR_100,
    KOL_NAL TYPE OF DOM_KOL,
    KOL_RAZ TYPE OF DOM_KOL,
    RAZ_TIP_NAME TYPE OF DOM_CHAR_30)
AS
declare variable L_ZD_OPR_ID integer; 
declare variable L_OPR_ID integer; 
declare variable L_SIMPLE_ID integer; 
declare variable L_ZD_ID integer; 
BEGIN 
    FOR EXECUTE STATEMENT 
    'SELECT 
        OPR.ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID IN ('||:OPR_ID || ') ' 
    INTO :L_OPR_ID 
 
    DO BEGIN 
    FOR SELECT DISTINCT 
        COALESCE(ZAIAVKA_DOSTAVKA.KLI_ID, -1) 
     FROM 
        ZAIAVKA_DOSTAVKA INNER JOIN TMP_SEL_KLI ON TMP_SEL_KLI.KLI_ID = COALESCE(ZAIAVKA_DOSTAVKA.KLI_ID, -1) 
     WHERE 
        ZAIAVKA_DOSTAVKA.OPR_ID =:L_OPR_ID 
     INTO :R_KLI_ID 
 
    DO BEGIN 
    IF (R_KLI_ID <> -1) THEN 
    FOR SELECT 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        ZAIAVKA_DOSTAVKA.CENA_LAST, 
        ZAIAVKA_DOSTAVKA.CENA_CL, 
        SKLAD.NAME, 
        ZAIAVKA_DOSTAVKA.KOL_ZAIAVKA, 
        RAZ_ELEMENT.NAME, 
        ZAIAVKA_DOSTAVKA.KOL_RAZ, 
        ME.NAME, 
        SIMPLE.CODE2, 
        ZAIAVKA_DOSTAVKA.OPR_ID, 
        SIMPLE.ID, 
        ZAIAVKA_DOSTAVKA.ID, 
        ZAIAVKA_DOSTAVKA.KOL_NAL, 
        ZAIAVKA_DOSTAVKA.KOL_RAZ, 
        RAZ_TIP.NAME AS RAZ_NAME 
    FROM 
        ZAIAVKA_DOSTAVKA INNER JOIN SIMPLE ON SIMPLE.ID = ZAIAVKA_DOSTAVKA.SIMPLE_ID 
        LEFT JOIN SKLAD ON SKLAD.ID = ZAIAVKA_DOSTAVKA.SKLAD_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = ZAIAVKA_DOSTAVKA.RAZFASOVKA_ID 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = ZAIAVKA_DOSTAVKA.RAZFASOVKA_ID 
        LEFT JOIN RAZ_TIP ON RAZ_TIP.ID = RAZFASOVKA.RAZ_TIP_ID 
    WHERE 
        ZAIAVKA_DOSTAVKA.OPR_ID =:L_OPR_ID AND ZAIAVKA_DOSTAVKA.KLI_ID =:R_KLI_ID 
 
    INTO 
        :CODE, 
        :R_SIMPLE_NAME, 
        :R_SIMPLE_CENA, 
        :R_SIMPLE_CENA_CL, 
        :SKLAD_NAME, 
        :R_KOL_ZAIAVKA, 
        :RAZ_NAME, 
        :RAZ_KOL, 
        :ME, 
        :CODE2, 
        :L_ZD_OPR_ID, 
        :L_SIMPLE_ID, 
        :L_ZD_ID, 
        :KOL_NAL, 
        :KOL_RAZ, 
        :RAZ_TIP_NAME 
    DO 
    BEGIN 
        SELECT 
            SUM(ZD_DOST_MOVE_NODE.KOL) 
        FROM 
            ZD_DOST_MOVE_NODE 
        WHERE ZD_DOST_MOVE_NODE.OPR_ID_ZD =:L_ZD_OPR_ID AND ZD_DOST_MOVE_NODE.SIMPLE_ID =:L_SIMPLE_ID 
        INTO :R_KOL_IZP; 
 
        R_KOL = R_KOL_ZAIAVKA - COALESCE(R_KOL_IZP,0); 
 
        EXECUTE PROCEDURE GET_ZD_PROPERTIES(:L_ZD_ID) RETURNING_VALUES (:R_SIMP_PROP); 
 
        SELECT 
            KLI.NAME KLI_NAME, 
            KLI.ADRES, 
            KLI.TEL, 
            OBEKT.NAME AS OBEKT_NAME, 
            PLACE.NAME AS PLACE_NAME, 
            KLI.DAYS_DOST 
        FROM 
            KLI LEFT JOIN OBEKT ON OBEKT.ID = KLI.OBEKT_ID 
            LEFT JOIN PLACE ON PLACE.ID = KLI.PLACE_ID 
        WHERE KLI.ID =:R_KLI_ID 
        INTO :R_KLI_NAME, :R_KLI_ADDRESS,:R_KLI_TEL, :R_OBEKT_NAME, :R_PLACE_NAME, :R_DAYS_DOST; 
 
        IF (R_KOL <> 0) THEN 
            SUSPEND; 
    END 
    ELSE 
    FOR SELECT 
        SIMPLE.CODE, 
        SIMPLE.NAME, 
        ZAIAVKA_DOSTAVKA.CENA_LAST, 
        ZAIAVKA_DOSTAVKA.CENA_CL, 
        SKLAD.NAME, 
        ZAIAVKA_DOSTAVKA.KOL_ZAIAVKA, 
        RAZ_ELEMENT.NAME, 
        ZAIAVKA_DOSTAVKA.KOL_RAZ, 
        ME.NAME, 
        SIMPLE.CODE2, 
        ZAIAVKA_DOSTAVKA.OPR_ID, 
        SIMPLE.ID, 
        ZAIAVKA_DOSTAVKA.ID, 
        ZAIAVKA_DOSTAVKA.KOL_NAL, 
        ZAIAVKA_DOSTAVKA.KOL_RAZ, 
        RAZ_TIP.NAME AS RAZ_NAME 
    FROM 
        ZAIAVKA_DOSTAVKA 
        INNER JOIN SIMPLE ON SIMPLE.ID = ZAIAVKA_DOSTAVKA.SIMPLE_ID 
        LEFT JOIN SKLAD ON SKLAD.ID = ZAIAVKA_DOSTAVKA.SKLAD_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = ZAIAVKA_DOSTAVKA.RAZFASOVKA_ID 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = ZAIAVKA_DOSTAVKA.RAZFASOVKA_ID 
        LEFT JOIN RAZ_TIP ON RAZ_TIP.ID = RAZFASOVKA.RAZ_TIP_ID 
    WHERE 
        ZAIAVKA_DOSTAVKA.OPR_ID =:L_OPR_ID AND ZAIAVKA_DOSTAVKA.KLI_ID IS NULL 
 
    INTO 
        :CODE, 
        :R_SIMPLE_NAME, 
        :R_SIMPLE_CENA, 
        :R_SIMPLE_CENA_CL, 
        :SKLAD_NAME, 
        :R_KOL_ZAIAVKA, 
        :RAZ_NAME, 
        :RAZ_KOL, 
        :ME, 
        :CODE2, 
        :L_ZD_OPR_ID, 
        :L_SIMPLE_ID, 
        :L_ZD_ID, 
        :KOL_NAL, 
        :KOL_RAZ, 
        :RAZ_TIP_NAME 
    DO 
    BEGIN 
        SELECT 
            SUM(ZD_DOST_MOVE_NODE.KOL) 
        FROM 
            ZD_DOST_MOVE_NODE 
        WHERE ZD_DOST_MOVE_NODE.OPR_ID_ZD =:L_ZD_OPR_ID AND ZD_DOST_MOVE_NODE.SIMPLE_ID =:L_SIMPLE_ID 
        INTO :R_KOL_IZP; 
 
        R_KOL = R_KOL_ZAIAVKA - COALESCE(R_KOL_IZP,0); 
 
        EXECUTE PROCEDURE GET_ZD_PROPERTIES(:L_ZD_ID) RETURNING_VALUES (:R_SIMP_PROP); 
 
 
        SELECT 
            ' Без доставчик', 
            NULL, 
            NULL, 
            NULL, 
            NULL, 
            NULL 
        FROM 
            rdb$database 
        into :R_KLI_NAME, :R_KLI_ADDRESS,:R_KLI_TEL, :R_OBEKT_NAME, :R_PLACE_NAME, :R_DAYS_DOST; 
 
        R_KLI_ID = -1; 
        if (R_KOL <> 0) then 
            SUSPEND; 
        END 
    END 
    END 
END ;^


ALTER PROCEDURE GET_ZD_PROPERTIES (
    P_ZD_ID INTEGER)
RETURNS (
    R_SIMPLE_PROP VARCHAR(1000))
AS
DECLARE VARIABLE L_SIMP_MAJ_PROP VARCHAR(50); 
DECLARE VARIABLE L_SIMP_MIN_PROP VARCHAR(50); 
BEGIN 
    L_SIMP_MAJ_PROP = ''; 
    L_SIMP_MIN_PROP = ''; 
    R_SIMPLE_PROP = ''; 
       FOR 
        SELECT 
            SIMPLE_PROP.NAME, 
            SIMPLE_PROP_MINOR.NAME 
        FROM 
            ZD_POR_NODE 
            LEFT JOIN POR_EL ON POR_EL.ID = ZD_POR_NODE.POR_EL_ID 
            LEFT JOIN POR_PROP_NODE ON POR_PROP_NODE.POR_EL_ID = POR_EL.ID 
            LEFT JOIN SIMPLE_PROP ON SIMPLE_PROP.ID = POR_PROP_NODE.MAJOR_PROP_ID 
            LEFT JOIN SIMPLE_PROP_MINOR ON SIMPLE_PROP_MINOR.ID = POR_PROP_NODE.MINOR_PROP_ID 
        WHERE ZD_POR_NODE.OPR_ID_ZD =:P_ZD_ID 
 
        INTO : L_SIMP_MAJ_PROP, :L_SIMP_MIN_PROP 
       DO 
        R_SIMPLE_PROP = R_SIMPLE_PROP ||  L_SIMP_MAJ_PROP || ' - ' ||  L_SIMP_MIN_PROP || ', '; 
    SUSPEND; 
END^


ALTER PROCEDURE IMPORT_ELTRADE_DB (
    P_SERVER TYPE OF DOM_CHAR_100,
    P_DATABASE TYPE OF DOM_CHAR_100,
    P_PORT TYPE OF DOM_SMAL_INT,
    P_USER TYPE OF DOM_CHAR_100,
    P_PASSSWORD TYPE OF DOM_CHAR_10,
    P_CL_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_E_PRODUCT_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_E_PRODUCT_NAME TYPE OF DOM_CHAR_100; 
DECLARE VARIABLE L_E_PRODUCT_SHORT_NAME TYPE OF DOM_CHAR_15; 
DECLARE VARIABLE L_E_VAT_GROUP TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_E_ME_ID TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_E_ME_NAME TYPE OF DOM_CHAR_10; 
DECLARE VARIABLE L_E_GROUP_ID TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_E_GROUP_NAME TYPE OF DOM_CHAR_50; 
DECLARE VARIABLE L_E_BARCODE TYPE OF DOM_CHAR_15; 
DECLARE VARIABLE L_E_BARCODE_QTY TYPE OF DOM_KOL; 
DECLARE VARIABLE L_E_PRICE TYPE OF DOM_CENA; 
DECLARE VARIABLE L_TMP_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_INT; 
DECLARE VARIABLE L_CL_OPR_ID TYPE OF DOM_INT; 
BEGIN 
    SELECT 
        CENOVA_LISTA.OPR_ID 
    FROM 
        CENOVA_LISTA 
    WHERE 
        CENOVA_LISTA.ID = :P_CL_ID 
    INTO 
        :L_CL_OPR_ID; 
 
    DELETE FROM TMP_ELTRADE_IMPORT; 
    -- НАЛИВАМ ВСИЧКИ ПРОДУКТИ ОТ БАЗАТА НА ЕЛТРАДЕ ЗА ИМПОРТ 
    FOR EXECUTE STATEMENT ' 
    SELECT 
        PLUES.PLU_NUMB, 
        SUBSTRING(PLUES.PLU_NAME FROM 1 FOR 100), 
        SUBSTRING(PLUES.PLU_ECR_NAME  FROM 1 FOR 12), 
        PLUES.PLU_TAXGROUP_ID, 
        PLUES.PLU_MEASUREUNIT_ID, 
        SUBSTRING(N_PRIMARY_MEASUREUNITS.PRIMARYMUNIT_NAME FROM 1 FOR 2), 
        N_PLUGROUPS.PGRP_ID, 
       SUBSTRING( N_PLUGROUPS.PGRP_NAME FROM 1 FOR 50), 
        SUBSTRING(BARCODES.PLU_BARCODE FROM 1 FOR 13 ), 
        BARCODES.PLU_QUANTITY, 
        PLUES.PLU_SELL_PRICE 
    FROM 
        PLUES 
        JOIN N_PLUGROUPS ON PLUES.PLU_GROUP_ID = N_PLUGROUPS.PGRP_ID 
        JOIN BARCODES ON BARCODES.PLU_NUMB = PLUES.PLU_NUMB 
        INNER JOIN N_PRIMARY_MEASUREUNITS ON N_PRIMARY_MEASUREUNITS.PRIMARYMUNIT_ID = PLUES.PLU_MEASUREUNIT_ID 
    ORDER BY 2, 1' 
    ON EXTERNAL :P_SERVER || '/' || :P_PORT || ':' || :P_DATABASE 
    AS USER :P_USER 
    PASSWORD :P_PASSSWORD 
    INTO 
        :L_E_PRODUCT_ID, :L_E_PRODUCT_NAME, :L_E_PRODUCT_SHORT_NAME, :L_E_VAT_GROUP, :L_E_ME_ID, :L_E_ME_NAME, 
        :L_E_GROUP_ID, :L_E_GROUP_NAME, :L_E_BARCODE, :L_E_BARCODE_QTY, :L_E_PRICE 
    DO BEGIN 
        INSERT INTO TMP_ELTRADE_IMPORT (E_PRODUCT_ID, E_PRODUCT_NAME, E_PRODUCT_SHORT_NAME, E_VAT_GROUP, E_ME_ID, E_ME_NAME, 
                                        E_GROUP_ID, E_GROUP_NAME, E_BARCODE, E_BARCODE_QTY, E_PRICE) 
        VALUES (:L_E_PRODUCT_ID, :L_E_PRODUCT_NAME, :L_E_PRODUCT_SHORT_NAME, :L_E_VAT_GROUP, :L_E_ME_ID, :L_E_ME_NAME, :L_E_GROUP_ID, 
                :L_E_GROUP_NAME, :L_E_BARCODE, :L_E_BARCODE_QTY, :L_E_PRICE); 
    END 
 
    --НАМИРАМ ВСИЧКИ ВЕЧЕ СЪЩЕСТВУВАЩИ ПРОДУКТИ С БАРКОДОВЕ И ГИ ОТБЕЛЯЗВАМ КОИ СА 
    MERGE INTO TMP_ELTRADE_IMPORT AS TMP 
    USING 
        (SELECT 
            SIMPLE.NAME, 
            SIMPLE.ID, 
            BARCODE.BARCODE 
        FROM 
            SIMPLE INNER JOIN BARCODE ON BARCODE.SIMPLE_ID = SIMPLE.ID) 
        AS P 
    ON P.NAME = TMP.E_PRODUCT_NAME 
    AND P.BARCODE = TMP.E_BARCODE 
    WHEN MATCHED THEN UPDATE SET A_PRODUCT_ID = P.ID; 
 
    -- НАЛИВАМ МЕРНИТЕ ЕДИНИЦИ 
    FOR SELECT DISTINCT 
        TMP.E_ME_ID, 
        TMP.E_ME_NAME 
    FROM 
        TMP_ELTRADE_IMPORT TMP 
    INTO 
        :L_E_ME_ID, :L_E_ME_NAME 
    DO BEGIN 
        L_TMP_ID = NULL; 
        SELECT 
            ME.ID 
        FROM 
            ME 
        WHERE 
            ME.NAME = :L_E_ME_NAME 
        INTO 
            :L_TMP_ID; 
 
        IF (L_TMP_ID IS NULL) THEN BEGIN 
            INSERT INTO ME (NAME, NAME_LONG, IS_BROI) 
            VALUES (:L_E_ME_NAME, :L_E_ME_NAME, 1) 
            RETURNING (ID) INTO :L_TMP_ID; 
        END 
 
        UPDATE TMP_ELTRADE_IMPORT SET 
            A_ME_ID = :L_TMP_ID 
        WHERE 
            E_ME_ID = :L_E_ME_ID; 
    END 
 
    -- НАЛИВАМ ГРУПИТЕ ПРОДУКТИ 
    FOR SELECT DISTINCT 
        TMP.E_GROUP_ID, 
        TMP.E_GROUP_NAME 
    FROM 
        TMP_ELTRADE_IMPORT TMP 
    INTO 
        :L_E_GROUP_ID, :L_E_GROUP_NAME 
    DO BEGIN 
 
        L_TMP_ID = NULL; 
        SELECT 
            SELEKCIQ.ID 
        FROM 
            SELEKCIQ 
        WHERE 
            SELEKCIQ.NAME = :L_E_GROUP_NAME 
            AND SELEKCIQ.TIP = 1 
        INTO 
            :L_TMP_ID; 
 
        IF (L_TMP_ID IS NULL) THEN BEGIN 
            INSERT INTO SELEKCIQ (NAME, TIP, ACTIVEN) 
            VALUES (:L_E_GROUP_NAME, 1, 1) 
            RETURNING ID INTO :L_TMP_ID; 
        END 
 
        UPDATE TMP_ELTRADE_IMPORT SET 
            A_GROUP_ID = :L_TMP_ID 
        WHERE 
            E_GROUP_ID = :L_E_GROUP_ID; 
    END 
 
    -- НАЛИВАМ ПРОДУКТИТЕ С ТЕХНИТЕ ЦЕНИ 
    FOR SELECT DISTINCT 
        TMP.E_PRODUCT_NAME, 
        TMP.E_PRICE, 
        TMP.E_PRODUCT_ID 
    FROM 
        TMP_ELTRADE_IMPORT TMP 
    INTO 
        :L_E_PRODUCT_NAME, :L_E_PRICE, :L_E_PRODUCT_ID 
    DO BEGIN 
        L_SIMPLE_ID  = NULL; 
        --ТЪРСЯ ДА ЗА ПРОДУКТА И НЯКОИ ОТ НЕГОВИТЕ БАРКОДОВЕ ИМАМ СЪВПАДЕНИ СЪС СЪЩЕСТВУВАЩИ В БАЗАТА ПРОДУКТИ ПО ИМЕ И БАРКОД 
        SELECT FIRST 1 
            SIMPLE.ID 
        FROM 
            TMP_ELTRADE_IMPORT TMP INNER JOIN SIMPLE ON TMP.E_PRODUCT_ID = :L_E_PRODUCT_ID AND SIMPLE.NAME = TMP.E_PRODUCT_NAME 
            INNER JOIN BARCODE ON BARCODE.SIMPLE_ID = SIMPLE.ID AND BARCODE.BARCODE = TMP.E_BARCODE 
        INTO 
            :L_SIMPLE_ID; 
 
        IF (L_SIMPLE_ID IS NULL) THEN BEGIN 
            -- НЯМА СЪВПАДЕНИЕ НА ИМЕ И БАРКОД В БАЗАТА. ДОБАВЯМ ПРОДУКТА 
            SELECT FIRST 1 
                TMP.E_PRODUCT_SHORT_NAME, 
                TMP.E_VAT_GROUP, 
                TMP.A_ME_ID, 
                TMP.A_GROUP_ID 
            FROM 
                TMP_ELTRADE_IMPORT TMP 
            WHERE 
                TMP.E_PRODUCT_ID = :L_E_PRODUCT_ID 
            INTO 
                :L_E_PRODUCT_SHORT_NAME, :L_E_VAT_GROUP, :L_E_ME_ID, :L_E_GROUP_ID; 
 
            INSERT INTO SIMPLE (NAME, NAME_SHORT, CODE, ME_ID, "ACTIVE", ACTIVE_FAK, LOCK_CENA_PROD, DDS, USLUGA, RSN, FLAG_CHECK, 
                AMBALAJ, ACTIVE_SCALE, GODNOST, DEF_SEL_ID, RAZPAD, FLAF_AMBALAJ, VAT_GROUP) 
            VALUES (:L_E_PRODUCT_NAME, :L_E_PRODUCT_SHORT_NAME, NULL, :L_E_ME_ID, '1', '1', 0, 
                20, 0, 0, 1, 0, 0, 0, :L_E_GROUP_ID, 0, '0', :L_E_VAT_GROUP) 
            RETURNING ID INTO :L_SIMPLE_ID; 
 
        END 
 
        UPDATE TMP_ELTRADE_IMPORT SET 
           A_PRODUCT_ID = :L_SIMPLE_ID 
        WHERE 
           E_PRODUCT_ID = :L_E_PRODUCT_ID; 
 
        INSERT INTO CENOVA_LISTA_EL (OPR_ID, OT_OPR_ID, SIMPLE_ID, TIP, PROCENT, CENA, TIP_OT_CENA, ROUND_TIP_ID) 
        VALUES (:L_CL_OPR_ID, NULL, :L_SIMPLE_ID, 1, 0, :L_E_PRICE, 1, NULL); 
 
        -- ДОБАВЯМ/УПДЕЙТВАМ ВСИЧКИ БАРКОДОВЕ ЗА ПРОДУКТА В ТАБЛИЦАТА С БАРКОДОВЕ 
        FOR SELECT 
            TMP.E_BARCODE, 
            TMP.E_BARCODE_QTY 
        FROM 
            TMP_ELTRADE_IMPORT TMP 
        WHERE 
            TMP.E_PRODUCT_ID = :L_E_PRODUCT_ID 
        INTO 
            :L_E_BARCODE, :L_E_BARCODE_QTY 
        DO BEGIN 
            UPDATE OR INSERT INTO BARCODE(SIMPLE_ID, BARCODE, KOL) 
            VALUES (:L_SIMPLE_ID, :L_E_BARCODE, :L_E_BARCODE_QTY) 
            MATCHING(SIMPLE_ID, BARCODE); 
        END 
    END 
END^


ALTER PROCEDURE IMPORT_KLI_DOST (
    P_KLI_ID INTEGER)
AS
declare variable L_SIMPLE_ID integer; 
declare variable L_KLI_ID integer; 
declare variable L_ID integer; 
BEGIN 
  FOR SELECT DISTINCT 
    IN_EL.SIMPLE_ID, 
    OPR.KLI_ID 
  FROM 
    IN_EL INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
    INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
  WHERE 
    OPR.KLI_ID =:P_KLI_ID 
  INTO :L_SIMPLE_ID, :L_KLI_ID 
  DO BEGIN 
    L_ID = NULL; 
    SELECT KLI_DOST_NODE.ID 
    FROM 
      KLI_DOST_NODE 
    WHERE 
      KLI_DOST_NODE.SIMPLE_ID = :L_SIMPLE_ID AND 
      KLI_DOST_NODE.KLI_ID = :L_KLI_ID 
    INTO 
      :L_ID; 
 
    IF (L_ID IS NULL) THEN 
      INSERT INTO KLI_DOST_NODE(SIMPLE_ID, KLI_ID) VALUES (:L_SIMPLE_ID, :L_KLI_ID); 
  END 
END^


ALTER PROCEDURE IMPORT_LAST_CENA (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID INTEGER,
    P_LAST_DOST_CENA DOUBLE PRECISION)
AS
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
BEGIN  
  SELECT FIRST 1  
    NAL.SIMPLE_ID  
  FROM  
    NAL  
  WHERE  
    NAL.SIMPLE_ID = :P_SIMPLE_ID  
  INTO  
    L_SIMPLE_ID;  
  
  IF (L_SIMPLE_ID IS NULL) THEN  
    INSERT INTO NAL(SIMPLE_ID, SKLAD_ID, LAST_CENA, DATETIME_LASTCENA, KOL_NAL, SUMA, SUMA_FR) VALUES (:P_SIMPLE_ID, :P_SKLAD_ID, :P_LAST_DOST_CENA, CURRENT_TIMESTAMP, 0, 0, 0); 
  ELSE  
    UPDATE NAL  
    SET NAL.LAST_CENA = :P_LAST_DOST_CENA  
    WHERE NAL.SIMPLE_ID = :P_SIMPLE_ID;  
  
  SUSPEND;  
END^


ALTER PROCEDURE INC_OTC_SUMI (
    P_SUMA DOUBLE PRECISION,
    P_SKLAD_ID INTEGER,
    P_USER_ID INTEGER,
    P_OTC_OPR_ID INTEGER,
    P_OPR_TYPE SMALLINT)
AS
BEGIN
/*V.2 УВЕЛИЧАВА СУМИТЕ В ОТЧЕТА
P_SUMA СУМАТА, С КОЯТО СЕ УВЕЛИЧАВА
P_SKLAD_ID СУМАТА ЗА КОЙ СКЛАД ДА СЕ УВЕЛИЧИ
P_USER_ID СУМАТА НА КОЙ ОПЕРАТОР ДА СЕ УВЕЛИЧИ
P_OTC_OPR_ID ОПРЕДЕЛЯ КОЙ Е ОТЧЕТА, ЧИЙТО СУМИ СЕ РЕДАКТИРАТ
*/
    IF (P_OPR_TYPE = 1) THEN BEGIN
        /*УВЕЛИЧАВАМЕ СУМАТА ОТ ДОСТАВКИ*/
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + :P_SUMA)
        WHERE OTC_EL.TIP_SUMA = 2
        AND OTC_EL.OPR_ID = :P_OTC_OPR_ID;
    
        /*УВЕЛИЧАВАМЕ СУМАТА ОТ ПРОДАЖБИ ЗА ОПЕРАТОРА ИЗВЪРШИЛ ДОСТАВКАТА*/
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + :P_SUMA)
        WHERE OTC_EL.TIP_SUMA = 4
        AND OTC_EL.OPR_ID = :P_OTC_OPR_ID
        AND OTC_EL.SUMA_ID = :P_USER_ID;

        /*УВЕЛИЧАВАМЕ СУМАТА ОТ ДОСТАВКИ ЗА СКЛАДА, КЪМ КОЙТО Е ИЗВЪРШЕНА ДОСТАВКАТА*/
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + :P_SUMA)
        WHERE OTC_EL.TIP_SUMA = 6
        AND OTC_EL.OPR_ID = :P_OTC_OPR_ID
        AND OTC_EL.SUMA_ID = :P_SKLAD_ID;
    END
    ELSE IF (P_OPR_TYPE = 2) THEN BEGIN
        /*УВЕЛИЧАВАМЕ СУМАТА ОТ ПРОДАЖБИ*/
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + :P_SUMA)
        WHERE OTC_EL.TIP_SUMA = 1
        AND OTC_EL.OPR_ID = :P_OTC_OPR_ID;
    
        /*УВЕЛИЧАВАМЕ СУМАТА ОТ ПРОДАЖБИ ЗА ОПЕРАТОРА ИЗВЪРШИЛ ПРОДАЖБАТА*/
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + :P_SUMA)
        WHERE OTC_EL.TIP_SUMA = 3
        AND OTC_EL.OPR_ID = :P_OTC_OPR_ID
        AND OTC_EL.SUMA_ID = :P_USER_ID;

        /*УВЕЛИЧАВАМЕ СУМАТА ОТ ПРОДАЖБИ ЗА СКЛАДА, КЪМ КОЙТО Е ИЗВЪРШЕНА ПРОДАЖБАТА*/
        UPDATE OTC_EL SET
        OTC_EL.SUMA = ROUNDD(OTC_EL.SUMA + :P_SUMA)
        WHERE OTC_EL.TIP_SUMA = 5
        AND OTC_EL.OPR_ID = :P_OTC_OPR_ID
        AND OTC_EL.SUMA_ID = :P_SKLAD_ID;
    END
END^


ALTER PROCEDURE INC_PARI_OTC_EDIT (
    P_OPR_ID INTEGER,
    P_USER_EDIT INTEGER,
    P_IP INTEGER,
    P_SUMA DOUBLE PRECISION)
AS
DECLARE VARIABLE L_PARI_ID INTEGER; 
DECLARE VARIABLE L_DATETIME DATE; 
DECLARE VARIABLE L_ADD_OPR INTEGER; 
DECLARE VARIABLE L_USER INTEGER; 
DECLARE VARIABLE L_OPR_ID INTEGER; 
BEGIN 
/*V.5*/ 
    L_PARI_ID = NULL; 
    SELECT 
        PARI_SKLOPR_NODE.OPR_PARI_ID 
    FROM 
        PARI_SKLOPR_NODE 
    WHERE 
        PARI_SKLOPR_NODE.OPR_ID = :P_OPR_ID 
    INTO 
        :L_PARI_ID;/*ID НА РЕД ОТ КАСА, АКО ИМА ДОБАВЕН ЗА ОТЧЕТ*/ 
 
    IF (L_PARI_ID IS NOT NULL) THEN BEGIN 
        SELECT 
            OPR.USER_ID, 
            OPR.OPR_DATE 
        FROM     
            OPR  
        WHERE 
            OPR.ID = :L_PARI_ID 
        INTO 
            :L_USER,:L_DATETIME; 
        /*1 КОЯ Е РЕДАКТИРАНАТА ОПЕРАЦИЯ, 2. КОЕ Е IP-ТО, КОИ Е ПОТРЕБИТЕЛЯ НАПРАВИЛ 
        ТАЗИ ОПЕРАЦИЯ КАСА(ОТЧЕТ) И ДАТАТА НА ИЗВЪРШВАНЕ НА ОПЕРАЦИЯТА*/ 
 
        EXECUTE PROCEDURE ADD_OPR(210,CURRENT_DATE,P_IP,P_USER_EDIT,NULL, NULL,NULL) 
        RETURNING_VALUES :L_ADD_OPR;/*ID НА ОПЕРАЦИЯ РЕДАКЦИЯ КАСА*/ 
 
        EXECUTE PROCEDURE ADD_OPR_EDIT(L_ADD_OPR,L_PARI_ID,NULL,L_USER,NULL,NULL,L_DATETIME) 
        RETURNING_VALUES :L_OPR_ID; 
 
        /*УВЕЛИЧАВАМ СУМИТЕ ЗА РЕДА*/ 
        EXECUTE PROCEDURE EDIT_PARI(L_ADD_OPR,L_PARI_ID,P_SUMA,0); 
 
        UPDATE PARI_SKLOPR_NODE SET 
        PARI_SKLOPR_NODE.SUMA = ROUNDD(PARI_SKLOPR_NODE.SUMA + :P_SUMA) 
        WHERE PARI_SKLOPR_NODE.OPR_ID = :P_OPR_ID; 
    END 
END^


ALTER PROCEDURE INC_SUMA_KI_DOST (
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_SUMA TYPE OF DOM_SUMA)
AS
DECLARE VARIABLE L_PEN_ID INTEGER; 
DECLARE VARIABLE L_PEN_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_PEN_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_CENA DOUBLE PRECISION; 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
BEGIN 
    /*РАЗПРЕДЕЛЯ МЕЖДУ ПАРТИДИТЕ НА ПРОДУКТ СЪС СЕРИЙНИ НОМЕРА, СУМА ПОДАДЕНА ОТ 
    КРЕДИТНО ИЗВЕСТИЕ КЪМ ДОСТАВЧИК ЗА СУМА*/ 
 
    SELECT 
        IN_EL.KOL 
    FROM 
        IN_EL 
    WHERE 
        ID = :P_IN_EL_ID 
    INTO 
        :L_KOL; 
 
    L_CENA = ROUND(P_SUMA / L_KOL,5); 
 
    FOR SELECT 
        PEN.ID, 
        PEN.KOL 
    FROM 
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = :P_IN_EL_ID 
        AND PIN.PARTIDA_NODE_ID = PEN.ID 
    INTO 
        :L_PEN_ID,:L_PEN_KOL 
    DO BEGIN 
        L_KOL = ROUND(L_KOL - L_PEN_KOL,5); 
 
        IF (L_KOL > 0.00) THEN 
            L_PEN_SUMA = ROUND(L_CENA * L_PEN_KOL,2); 
        ELSE 
            L_PEN_SUMA = P_SUMA; 
 
        P_SUMA = ROUND(P_SUMA - L_PEN_SUMA,2); 
 
        UPDATE PARTIDA_EL_NODE SET 
        SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA,2), 
        SUMA_SR = ROUND(SUMA_SR + :L_PEN_SUMA,2) 
        WHERE ID = :L_PEN_ID; 
    END 
END^


ALTER PROCEDURE INFO_SIMPLE (
    P_ID TYPE OF DOM_KEY)
RETURNS (
    ID TYPE OF DOM_KEY,
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    CODE2 TYPE OF DOM_CHAR_50,
    NAME_SHORT VARCHAR(12),
    ME_ID TYPE OF DOM_SMAL_INT,
    "ACTIVE" TYPE OF DOM_BOOLEAN,
    ACTIVE_FAK TYPE OF DOM_BOOLEAN,
    ACTIVE_SCALE TYPE OF DOM_FLAG,
    USLUGA TYPE OF DOM_BOOLEAN,
    FLAG_CHECK TYPE OF DOM_FLAG,
    RSN TYPE OF DOM_BOOLEAN,
    KOL_KRI_MIN TYPE OF DOM_KOL,
    KOL_KRI_MAX TYPE OF DOM_KOL,
    DD_S NUMERIC(4,2),
    DEFAULT_RAZ_ID TYPE OF DOM_SMAL_INT,
    ME_LONG TYPE OF DOM_CHAR_20,
    ME CHAR(2),
    RAZ TYPE OF DOM_CHAR_15,
    RAZ_TIP_ID TYPE OF DOM_KEY,
    GODNOST TYPE OF DOM_SMAL_INT,
    BRUTO TYPE OF DOM_CENA,
    DEF_SEL_ID TYPE OF DOM_KEY,
    SEL_NAME TYPE OF DOM_CHAR_50,
    BAR_CODE TYPE OF DOM_CHAR_15,
    NAL_KOL TYPE OF DOM_KOL,
    LAST_CENA TYPE OF DOM_CENA,
    DATE_LAST_CENA TYPE OF DOM_DATE_TIME,
    CENA_SR TYPE OF DOM_CENA,
    NAL_KOL_FAK TYPE OF DOM_KOL,
    ADRESIRANE TYPE OF DOM_CHAR_1000,
    EXT1 TYPE OF DOM_CHAR_300,
    R_TEMPERATURE TYPE OF DOM_CHAR_20)
AS
DECLARE VARIABLE L_KOL_SR TYPE OF DOM_KOL; 
DECLARE VARIABLE L_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_TEXT TYPE OF DOM_CHAR_1000; 
DECLARE VARIABLE L_SKLAD TYPE OF DOM_CHAR_50; 
BEGIN 
  FOR 
    SELECT 
      m.ID, 
      m.NAME, 
      m.CODE, 
      m.CODE2, 
      m.NAME_SHORT, 
      m.ME_ID, 
      m."ACTIVE", 
      m.ACTIVE_FAK, 
      m.ACTIVE_SCALE, 
      m.USLUGA, 
      m.FLAG_CHECK, 
      m.RSN, 
      m.KOL_KRI_MIN, 
      m.KOL_KRI_MAX, 
      m.DDS as DD_S, 
      m.DEFAULT_RAZ_ID, 
      ME.NAME_LONG || ' (' || ME.NAME || ')'AS "ME_LONG", 
      ME.NAME AS "ME", 
      SIMPLE_RAZ.NAME AS "RAZ", 
      m.RAZ_TIP_ID, 
      m.GODNOST, 
      m.BRUTO, 
      m.DEF_SEL_ID, 
      SELEKCIQ.NAME AS "SEL_NAME", 
      BAR.R_BAR_CODE  AS BAR_CODE, 
      m.EXT1, 
      m.TEMPERATURA 
    FROM 
      SIMPLE m 
      LEFT JOIN ME ON m.ME_ID = ME.ID 
      LEFT JOIN SIMPLE_RAZ ON m.DEFAULT_RAZ_ID = SIMPLE_RAZ.ID 
      LEFT JOIN SELEKCIQ ON m.DEF_SEL_ID = SELEKCIQ.ID 
      LEFT JOIN GET_BARCODE(M.ID) BAR ON M.ID = BAR.R_SIMPLE_ID 
    where m.id = :p_id 
    INTO :ID,:NAME,:CODE,:CODE2,:NAME_SHORT,:ME_ID,:"ACTIVE",:ACTIVE_FAK,:ACTIVE_SCALE, 
         :USLUGA,:FLAG_CHECK,:RSN,:KOL_KRI_MIN,:KOL_KRI_MAX,:DD_S,:DEFAULT_RAZ_ID,:ME_LONG, 
         :ME,:RAZ,:RAZ_TIP_ID,:GODNOST,:BRUTO,:DEF_SEL_ID,:SEL_NAME,:BAR_CODE, EXT1, :R_TEMPERATURE 
  DO 
  BEGIN 
    select 
      sum(nal.kol_nal) kol_nal 
    from nal 
    where 
      (NOT nal.sklad_id = (SELECT SYSTEM.H_SKLAD FROM SYSTEM)) 
      and nal.simple_id = :id 
    into :nal_kol; 
 
    select 
      nal.kol_nal 
    from nal 
    where 
      nal.sklad_id = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
      and nal.simple_id = :id 
    into :nal_kol_fak; 
 
    select first 1 
      nal.last_cena, 
      nal.datetime_lastcena 
    from nal 
    where 
      nal.simple_id = :id and 
      nal.last_cena > 0 
      and NOT nal.sklad_id = (SELECT SYSTEM.H_SKLAD FROM SYSTEM) 
    order by nal.datetime_lastcena desc 
    into :last_cena,:date_last_cena; 
 
    execute procedure get_sr_cena(:id, -1,'') returning_values :cena_sr,:l_kol_sr,:l_suma_sr; 
 
    adresirane = ''; 
    for select 
      sklad.name, 
      simple_sklad_kod.text 
    from 
      simple_sklad_kod 
      inner join sklad on sklad.id = simple_sklad_kod.sklad_id 
    where 
      simple_sklad_kod.simple_id = :id 
    into 
      :l_sklad, :L_TEXT 
    do begin 
      if (adresirane <> '') then 
        adresirane = adresirane || ASCII_CHAR(13) || ASCII_CHAR(10); 
      adresirane = adresirane || l_sklad || ': ' || l_text; 
    end 
 
    SUSPEND; 
  END 
END^


ALTER PROCEDURE INIT_RDBS (
    P_SIMPLE_ID INTEGER)
AS
BEGIN
/*V.3*/
/*    DELETE FROM RDB$PARTIDA_NAL;

    --ИНИЦИАЛИЗИРАНЕ НА НАЛИЧНИТЕ ПАРТИДИ ЗА ПРОДУКТА
    INSERT INTO RDB$PARTIDA_NAL(IN_EL_ID,ELEMENT_ID,KOL_NAL,SUMA)
    SELECT
        PARTIDA_NAL.IN_EL_ID,
        PARTIDA_NAL.ELEMENT_ID,
        PARTIDA_NAL.KOL_NAL,
        PARTIDA_NAL.SUMA
    FROM
        PARTIDA_NAL INNER JOIN IN_EL ON IN_EL.ID = PARTIDA_NAL.IN_EL_ID
    WHERE
        IN_EL.SIMPLE_ID = :P_SIMPLE_ID;

    DELETE FROM RDB$NAL;

    --ИНИЦИАЛИЗИРАМ ДАННИТЕ ЗА НАЛИЧНИТЕ СКЛАДОВЕ И СУМИ 0
    INSERT INTO RDB$NAL (SKLAD_ID,SUMA,SUMA_FR,KOL,LAST_CENA)
    SELECT
        SKLAD.ID,
        COALESCE(NAL.SUMA,0),
        COALESCE(NAL.SUMA_FR,0),
        COALESCE(NAL.KOL_NAL,0),
        COALESCE(NAL.LAST_CENA,0)
    FROM
        SKLAD LEFT JOIN NAL ON NAL.SKLAD_ID = SKLAD.ID
    WHERE
        NAL.SIMPLE_ID = :P_SIMPLE_ID
    ORDER BY 1;*/
END^


ALTER PROCEDURE INS_TASK_EL
RETURNS (
    L_TASK_ID INTEGER,
    L_TEMPLATE_ID INTEGER,
    L_EL_ID INTEGER,
    L_SIMPLE_ID INTEGER)
AS
begin
  /* Procedure Text */

  FOR SELECT
    MAX(OPR_TEMPLATE_TASK_NODE.TASK_ID),
    OPR_TEMPLATE_TASK_NODE.TEMPLATE_ID
  FROM
    OPR_TEMPLATE_TASK_NODE
  WHERE
    OPR_TEMPLATE_TASK_NODE.TEMPLATE_ID IN (5639,5464,5846,5264,4805,5178,5088,5432,5775,4730,4869,5884,5136,4972,5841,5083,4792,4931,5152)
  GROUP BY 2
  ORDER BY 2,1
  into :L_TASK_ID, :L_TEMPLATE_ID
  do begin
    for SELECT
      SLEDI_TEMPLATE_EL.ID,
      SLEDI_TEMPLATE_EL.SIMPLE_ID
    from
      SLEDI_TEMPLATE_EL
    where
      SLEDI_TEMPLATE_EL.TEMPLATE_ID = :L_TEMPLATE_ID
    into :L_EL_ID, :L_SIMPLE_ID
    do begin
      insert into tasks_el(tasks_el.EL_ID, tasks_el.TASKS_ID, tasks_el.SIMPLE_ID, TASKS_EL.H) values (:L_EL_ID, :L_TASK_ID, :L_SIMPLE_ID, 0);
    end
  end
end^


ALTER PROCEDURE INSERT_NEW_PARI_DIST (
    P_OPR_PROD_ID INTEGER,
    P_IP INTEGER,
    P_USER_ID INTEGER,
    P_KLI_ID INTEGER,
    P_SUMA DOUBLE PRECISION)
RETURNS (
    R_OPR_ID INTEGER,
    R_PARI_DIST_ID INTEGER)
AS
DECLARE VARIABLE L_OPR_DATE DATE; 
BEGIN 
    SELECT 
        OPR.OPR_DATE 
    FROM 
        OPR 
    WHERE 
        ID = :P_OPR_PROD_ID 
    INTO 
        :L_OPR_DATE; 
 
    EXECUTE PROCEDURE ADD_OPR(15,:L_OPR_DATE,P_IP,P_USER_ID,NULL,P_KLI_ID,P_SUMA) 
    RETURNING_VALUES :R_OPR_ID; 
 
    EXECUTE PROCEDURE NEW_PARI_DIST(R_OPR_ID,P_OPR_PROD_ID,P_SUMA) 
    RETURNING_VALUES :R_PARI_DIST_ID; 
END^


ALTER PROCEDURE IS_NUMBER (
    STR VARCHAR(15))
RETURNS (
    NUM INTEGER)
AS
DECLARE VARIABLE I INTEGER; 
DECLARE VARIABLE SUBSTR2 VARCHAR(200); 
DECLARE VARIABLE TMP VARCHAR(215); 
DECLARE VARIABLE II INTEGER; 
DECLARE VARIABLE LL INTEGER; 
DECLARE VARIABLE PR VARCHAR(200); 
begin 
  IF (Str IS NULL) 
  THEN BEGIN Num = 0; EXIT; END 
  num = 0; 
  i = 0; 
  ii = 0; 
  pr=''; 
  ll=CHAR_LENGTH(str); 
  while (ii <= (ll-1)) do begin 
    while (i < 10) do begin 
      SubStr2 = null; 
      Tmp = null; 
      SubStr2 = pr||cast(i as char) || '%'; 
      Tmp = ''; 
      if (Str LIKE SubStr2) then begin 
        num=1; 
        break; 
      end 
      num=0; 
      i = i + 1; 
    end 
    if (num=0) then exit; 
    ii = ii + 1; 
    pr=pr||'_'; 
    i = 0; 
  end 
  suspend; 
end^


ALTER PROCEDURE IS_SUMA_CORRECT (
    P_OPR_ID INTEGER)
AS
DECLARE VARIABLE L_IN_EL_ID INTEGER; 
DECLARE VARIABLE L_IN_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_PAR_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_PAR_ID INTEGER; 
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
BEGIN 
    /*V.10*/ 
 
    /*ЩЕ СЕ ИЗПЪЛНЯВА САМО ЗА ПРОДУКТИ РАБОТЕЩИ СЪС СЕРИЙНИ НОМЕРА - ПРИ ТЯХ Е 
    ВЪЗМОЖНО СУМАТА ЗА ОТДЕЛНИТЕ БРОЙКИ ПО ЕД. ЦЕНА ДА ДАДЕРАЗЛИКА С ОБЩАТА СУМА*/ 
 
    /* 
        КОГАТО СЕ ВИКА ОТ РАЗПАД ТАЗИ ПРОЦЕДУРА НЯМА ДА НАМАЛЯВА СУМА СРЕДНА, А САМО ПЪРВА ВЛЯЗЛА В ПАРТИДИТЕ 
    */ 
    FOR SELECT 
        IN_EL.ID, 
        IN_EL.SUMA_FR, 
        IN_EL.SIMPLE_ID 
    FROM 
        IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
    WHERE 
        IN_EL.OPR_ID = :P_OPR_ID 
        AND SIMPLE.RSN = '1' 
    INTO 
        :L_IN_EL_ID,:L_IN_SUMA,:L_SIMPLE_ID 
    DO BEGIN 
        SELECT 
            SUM(PEN.SUMA_FR) 
        FROM 
            PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.PARTIDA_NODE_ID = PEN.ID 
            AND PIN.IN_EL_ID = :L_IN_EL_ID 
        INTO 
            :L_PAR_SUMA; 
 
        --ПОЛУЧАВАМ РАЗЛИКАТА МЕЖДУ ДВЕТЕ СУМИ - АКО ИМА РАЗЛИКА ЩЕ ОТНЕМАМ ПОСТЕПЕННО 
        L_PAR_SUMA = ROUND(L_IN_SUMA - L_PAR_SUMA,2); 
 
        --УКАЗВАМЕ ЗА КОЙ ПРОДУКТ Е СЕРИЙНИЯ НОМЕР. ПОЛЗВА СЕ ПРИ ПРОВЕРКИТЕ ЗА УНИКАЛЕН СЕРИЕН НОМЕР 
        FOR SELECT 
            PARTIDA_NAL.ELEMENT_ID 
        FROM 
            PARTIDA_NAL 
        WHERE 
            PARTIDA_NAL.IN_EL_ID = :L_IN_EL_ID 
        INTO 
            :L_PAR_ID 
        DO BEGIN 
            UPDATE SERIAL_NUM SET 
            SIMPLE_ID = :L_SIMPLE_ID 
            WHERE SERIAL_NUM.PARTIDA_EL_ID = :L_PAR_ID; 
        END 
 
        IF (L_PAR_SUMA <> 0) THEN BEGIN 
            FOR SELECT 
                PEN.ID 
            FROM 
                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.PARTIDA_NODE_ID = PEN.ID 
                AND PIN.IN_EL_ID = :L_IN_EL_ID 
            INTO 
                :L_PAR_ID 
            DO BEGIN 
                IF (L_PAR_SUMA = 0) THEN 
                    LEAVE; 
 
                IF (L_PAR_SUMA < 0) THEN BEGIN 
                    UPDATE PARTIDA_EL_NODE SET 
                    PARTIDA_EL_NODE.SUMA_FR = ROUND(PARTIDA_EL_NODE.SUMA_FR - 0.01,2), 
                    PARTIDA_EL_NODE.SUMA_SR = ROUND(PARTIDA_EL_NODE.SUMA_SR - 0.01,2) 
                    WHERE 
                    PARTIDA_EL_NODE.ID = :L_PAR_ID; 
 
                    L_PAR_SUMA = ROUND(L_PAR_SUMA + 0.01,2); 
                END 
                ELSE BEGIN 
                    UPDATE PARTIDA_EL_NODE SET 
                    PARTIDA_EL_NODE.SUMA_FR = ROUND(PARTIDA_EL_NODE.SUMA_FR + 0.01,2), 
                    PARTIDA_EL_NODE.SUMA_SR = ROUND(PARTIDA_EL_NODE.SUMA_SR + 0.01,2) 
                    WHERE 
                    PARTIDA_EL_NODE.ID = :L_PAR_ID; 
 
                    L_PAR_SUMA = ROUND(L_PAR_SUMA - 0.01,2); 
                END 
            END 
        END 
    END 
END^


ALTER PROCEDURE IS_USER_WORKED (
    P_USER_ID INTEGER)
AS
DECLARE VARIABLE L_MAX_OTC_ID INTEGER; 
DECLARE VARIABLE L_CNT INTEGER; 
BEGIN 
    SELECT 
        MAX(OTC.OPR_ID) 
    FROM 
        OTC 
    INTO 
        :L_MAX_OTC_ID; 
 
    SELECT 
        COUNT (OPR.ID) AS CNT 
    FROM 
        OPR 
    WHERE 
        OPR.USER_ID = :P_USER_ID 
        AND OPR.ID > :L_MAX_OTC_ID 
        /*операции доставка, продажба, прехвърляне, плащанията, изписване, връщане на стока или протокол за ценова листа 
        маркират потребителя като работил*/ 
        AND OPR.OPR_TIP IN (1,2,4,6,7,11,16,26,27,29,30,35) 
        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR.ID = OPR_ANUL.AN_OPR_ID) 
    INTO 
        :L_CNT; 
 
    IF ((L_CNT IS NOT NULL) AND (L_CNT > 0)) THEN 
        UPDATE "USER" SET "USER".IS_WORKED = 1 WHERE "USER".ID = :P_USER_ID; 
    ELSE 
        UPDATE "USER" SET "USER".IS_WORKED = 0 WHERE "USER".ID = :P_USER_ID; 
END^


ALTER PROCEDURE KIDOST_KUMFAK (
    P_OPR_ID INTEGER)
RETURNS (
    R_KUM_FAK VARCHAR(1024))
AS
declare variable L_FAK_NUM varchar(15); 
BEGIN 
    R_KUM_FAK = NULL; 
 
    FOR SELECT 
      FAK_IN.NUMBER 
    FROM 
      KI_DOST_SUMA 
      INNER JOIN KI_DOST_SUMA_FAK ON KI_DOST_SUMA.ID = KI_DOST_SUMA_FAK.KI_SUMA_ID 
      INNER JOIN FAK_IN ON KI_DOST_SUMA_FAK.FAK_IN_ID = FAK_IN.ID 
    WHERE 
       KI_DOST_SUMA.KI_OPR_ID = :P_OPR_ID 
    INTO 
        :L_FAK_NUM 
    DO BEGIN 
        IF (R_KUM_FAK IS NOT NULL) THEN 
            R_KUM_FAK = R_KUM_FAK || ','; 
 
        IF (R_KUM_FAK IS NULL) THEN 
            R_KUM_FAK = L_FAK_NUM; 
        ELSE 
            R_KUM_FAK = R_KUM_FAK || L_FAK_NUM; 
    END 
    SUSPEND; 
END^


ALTER PROCEDURE KLI_APPEND (
    NAME VARCHAR(100),
    KLIENT CHAR(1),
    DOSTAV CHAR(1),
    PROIZV CHAR(1),
    DIST CHAR(1),
    ZA_KASA CHAR(1),
    PADEJ SMALLINT,
    TIP_PRINT SMALLINT,
    PADEJ_DDS SMALLINT,
    FLAG_PAY SMALLINT,
    SLEDI SMALLINT,
    FLAG_PAY_FAKT SMALLINT,
    COEFF NUMERIC(3,2),
    DVSK_PRINT SMALLINT,
    DNI_FAK_PADEJ SMALLINT,
    CHECK_FAK SMALLINT,
    VOP SMALLINT)
RETURNS (
    R_ID INTEGER)
AS
begin 
  INSERT INTO KLI 
    (NAME, KLIENT, DOSTAV, PROIZV, DIST, ZA_KASA, PADEJ, TIP_PRINT, PADEJ_DDS, FLAG_PAY, SLEDI, FLAG_PAY_FAKT, COEFF, DVSK_PRINT, DNI_FAK_PADEJ, CHECK_FAK, VOP) 
  VALUES 
    (:NAME, :KLIENT, :DOSTAV, :PROIZV, :DIST, :ZA_KASA, :PADEJ, :TIP_PRINT, :PADEJ_DDS, :FLAG_PAY, :SLEDI, :FLAG_PAY_FAKT, :COEFF, :DVSK_PRINT, :DNI_FAK_PADEJ, :CHECK_FAK, :VOP) 
  RETURNING (ID) 
  INTO :R_ID; 
end^


ALTER PROCEDURE KLI_GROUP_TO_SEL
RETURNS (
    R_GROUP_ID INTEGER,
    R_GROUP_ID_IN VARCHAR(1024),
    R_GROUP_NAME VARCHAR(1024))
AS
DECLARE VARIABLE L_KLI_ID INTEGER;
DECLARE VARIABLE L_SEL_ID INTEGER;
DECLARE VARIABLE L_GROUP_NAME VARCHAR(1024);
DECLARE VARIABLE L_GROUP_ID INTEGER;
DECLARE VARIABLE L_PAT VARCHAR(50);
DECLARE VARIABLE L_LEN INTEGER;
DECLARE VARIABLE L_C INTEGER;
BEGIN
  L_C = 0;
  FOR SELECT
    KLI_GROUP.ID
  FROM
    KLI_GROUP
  ORDER BY KLI_GROUP.PARENT NULLS FIRST, KLI_GROUP.NAME
  INTO
    :R_GROUP_ID
  DO BEGIN
    /* Намира рекурсивно името на селекцията */
    EXECUTE PROCEDURE GET_KLI_GROUP(R_GROUP_ID) RETURNING_VALUES :L_GROUP_NAME;
    /* Намира рекурсивно ID-тата на текущата група подгрупите */
    EXECUTE PROCEDURE GET_KLI_SUB_GROUPS('', R_GROUP_ID) RETURNING_VALUES :R_GROUP_ID_IN;
    R_GROUP_ID_IN = ',' || R_GROUP_ID_IN || ',';             /* За да може да работи containing */
    R_GROUP_NAME = SUBSTRING(L_GROUP_NAME FROM 1 FOR 50);    /* Името на селекцията не може да е повече от 50 символа */
    /* Дължина на низ (името на групата) */
    L_PAT = '';
    L_LEN = 0;
    WHILE (NOT R_GROUP_NAME LIKE L_PAT) DO BEGIN
      L_PAT = L_PAT || '_';
      L_LEN = L_LEN + 1;
    END
    IF (L_LEN = 50) THEN BEGIN
      L_C = L_C + 1;
      R_GROUP_NAME = SUBSTRING(R_GROUP_NAME FROM 1 FOR 47) || '/' || CAST(L_C AS VARCHAR(2));
    END
    /* Създава селекция (потребителя не е известене) */
    L_SEL_ID = GEN_ID(GEN_SELEKCIQ_ID, 1);
    INSERT INTO SELEKCIQ (ID, NAME, TIP, ACTIVEN, USER_ID) VALUES (:L_SEL_ID, :R_GROUP_NAME,  2, 1, NULL);
    /* Добавя елементите към селекцията */
    FOR SELECT
      KLI.ID
    FROM
        KLI INNER JOIN KLI_GROUP ON KLI.KLI_GROUP_ID = KLI_GROUP.ID
    WHERE
      :R_GROUP_ID_IN CONTAINING ','||KLI_GROUP.ID||','
    INTO
      :L_KLI_ID
    DO BEGIN
      INSERT INTO SELEKCIQ_KLI_EL (KLI_ID, SELEKCIQ_ID) VALUES (:L_KLI_ID, :L_SEL_ID);
      /* Селекция по подразбибарне */
      UPDATE KLI
      SET KLI.DEF_SEL_ID = :L_SEL_ID
      WHERE KLI.ID = :L_KLI_ID;
    END
  END
END^


ALTER PROCEDURE KONS_ADD_OPR_RAZPAD (
    P_OPR_OUT_ID INTEGER)
AS
declare variable l_counter integer; 
declare variable l_opr_id integer; 
declare variable l_in_el_id integer; 
declare variable l_out_el_id integer; 
declare variable l_out_el_suma_sr double precision; 
BEGIN  
  
    FOR SELECT  
        konsignacia.OPR_IN_ID 
    FROM  
        konsignacia 
    WHERE  
        konsignacia.OPR_OUT_ID = :P_OPR_OUT_ID 
  
    INTO  
        :L_OPR_ID  
    DO BEGIN  
        L_COUNTER = 0;  
  
        FOR SELECT  
            OUT_EL.ID,  
            OUT_EL.SUMA_SR  
        FROM  
            OUT_EL INNER JOIN konsignacia ON konsignacia.OPR_OUT_ID = :P_OPR_OUT_ID  AND OUT_EL.OPR_ID = :P_OPR_OUT_ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID  
        WHERE  
            NOT EXISTS (SELECT OPR_RAZPAD_NODE.ID FROM OPR_RAZPAD_NODE WHERE OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID)  
        ORDER BY      
            OUT_EL.ID  
        INTO      
            :L_OUT_EL_ID,:L_OUT_EL_SUMA_SR  
        DO BEGIN  
            SELECT FIRST 1 SKIP (:L_COUNTER)  
                IN_EL.ID  
            FROM  
                IN_EL  
            WHERE  
                IN_EL.OPR_ID = :L_OPR_ID  
            ORDER BY  
                IN_EL.ID  
            INTO  
                :L_IN_EL_ID;  
  
            L_COUNTER = L_COUNTER + 1;  
  
            INSERT INTO OPR_RAZPAD_NODE(OUT_EL_ID,IN_EL_ID,SUMA_SR)  
            VALUES (:L_OUT_EL_ID,:L_IN_EL_ID,:L_OUT_EL_SUMA_SR);  
        END  
    END  
END^


ALTER PROCEDURE LOCK_ADD (
    P_USER_ID INTEGER,
    P_IS_LOCK INTEGER)
RETURNS (
    R_ID INTEGER)
AS
begin 
  insert into lock_opr (user_id, dt, is_lock) 
  values (:p_user_id, current_timestamp, :p_is_lock) 
  returning id into :r_id; 
end^


ALTER PROCEDURE LOCK_CONFLICT
AS
begin
  POST_EVENT 'LOCK_CONFLICT';
  suspend;
end^


ALTER PROCEDURE LOCK_EL_ADD (
    P_LOCK_ID INTEGER,
    P_OPR_ID INTEGER,
    P_IS_LOCK SMALLINT)
AS
declare variable l_opr_tip integer; 
declare variable l_opr_sub_prod_id integer; 
declare variable l_raz_dost_id integer; 
declare variable l_opr_in_id integer; 
begin  
  insert into lock_opr_el (lock_id, opr_id)  
  values (:p_lock_id, :p_opr_id);  
  
  update opr  
  set is_lock = :p_is_lock  
  where id = :p_opr_id;  
 
  for select 
    opr_tip 
  from opr 
  where 
    id = :p_opr_id and 
    opr_tip in (1,2,9,32) 
  into :l_opr_tip 
  do begin 
 
   if (l_opr_tip = 1) then begin 
      for select raz_dost_id 
      from dost_node 
      where dost_id = :p_opr_id 
      into :l_raz_dost_id 
      do begin 
        insert into lock_opr_el (lock_id, opr_id) values (:p_lock_id, :l_raz_dost_id); 
        update opr set is_lock = :p_is_lock where id = :l_raz_dost_id; 
      end 
   end 
   else 
   if (l_opr_tip = 2) then begin 
      for select opr_sub_prod_id 
      from prod_node 
      where opr_prod_id = :p_opr_id 
      into :l_opr_sub_prod_id 
      do begin 
        insert into lock_opr_el (lock_id, opr_id) values (:p_lock_id, :l_opr_sub_prod_id); 
        update opr set is_lock = :p_is_lock where id = :l_opr_sub_prod_id; 
      end 
   end 
   else 
   if (l_opr_tip = 9) then begin 
      for select opr_in_id 
      from move 
      where opr_out_id = :p_opr_id 
      into :l_opr_in_id 
      do begin 
        insert into lock_opr_el (lock_id, opr_id) values (:p_lock_id, :l_opr_in_id); 
        update opr set is_lock = :p_is_lock where id = :l_opr_in_id; 
      end 
   end 
   else 
   if (l_opr_tip = 32) then begin 
      for select opr_in_id 
      from production 
      where opr_out_id = :p_opr_id 
      into :l_opr_in_id 
      do begin 
        insert into lock_opr_el (lock_id, opr_id) values (:p_lock_id, :l_opr_in_id); 
        update opr set is_lock = :p_is_lock where id = :l_opr_in_id; 
      end 
   end 
 end 
end^


ALTER PROCEDURE MAINTENANCE_SELECTIVITY
AS
DECLARE VARIABLE S VARCHAR(200);
BEGIN
    FOR SELECT
        RDB$INDEX_NAME
    FROM
        RDB$INDICES
    INTO
        :S
    DO BEGIN
        EXECUTE STATEMENT 'SET STATISTICS INDEX ' || :S || ';';
    END
END^


ALTER PROCEDURE MEAT_CUTTING_CALC (
    P_IN_EL_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_RAZPAD_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_IN_EL_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_IN_EL_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_IN_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OUT_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_OUT_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_IN_EL_TOTAL_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_IN_EL_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PRICE_FR TYPE OF DOM_CENA; 
DECLARE VARIABLE L_PRICE_SR TYPE OF DOM_CENA; 
DECLARE VARIABLE L_COEF_SR TYPE OF DOM_PERCENT; 
DECLARE VARIABLE L_COEF_FR TYPE OF DOM_PERCENT; 
DECLARE VARIABLE L_RSN TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_PEN_ID TYPE OF DOM_KEY; 
BEGIN 
    SELECT 
        IN_EL.OPR_ID, 
        OUT_EL.SUMA_SR, 
        OUT_EL.SUMA_FR, 
        ORN.PERCENT_SUM 
    FROM 
        IN_EL INNER JOIN OPR_RAZPAD_NODE ORN ON ORN.IN_EL_ID = IN_EL.ID 
        INNER JOIN OUT_EL ON OUT_EL.ID = ORN.OUT_EL_ID 
    WHERE 
        IN_EL.ID = :P_IN_EL_ID 
    INTO 
        :L_RAZPAD_OPR_ID, :L_OUT_SUMA_SR, :L_OUT_SUMA_FR, :L_COEF_FR; 
 
    IF (L_COEF_FR = 0.00) THEN BEGIN 
        -- РЕДА Е ОТ ТЕЗИ, КОИТО СА С НУЛЕВ КОЕФИЦИЕНТ И НЕ СЕ ОСТОЙНОСТЯВАТ. 
        -- НЯМА НУЖДА ДА ПРАВЯ ВСИЧКИ СМЕТКИ ПО-ДОЛУ 
        UPDATE IN_EL SET 
            SUMA_FR = 0.00, 
            SUMA_SR = 0.00 
        WHERE 
            ID = :P_IN_EL_ID; 
 
        EXIT; 
    END 
 
    SELECT 
        SUM(IN_EL.KOL) 
    FROM 
        IN_EL INNER JOIN OPR_RAZPAD_NODE ORN ON ORN.IN_EL_ID = IN_EL.ID AND IN_EL.OPR_ID = :L_RAZPAD_OPR_ID 
    WHERE 
        ORN.PERCENT_SUM > 0.00 
    INTO 
        :L_IN_EL_TOTAL_KOL; 
 
    -- ЕДИНИЧНА ЦЕНА НА ВЛОЖЕНИЯ ПРОДУКТ 
    SELECT 
        ROUND(OUT_EL.SUMA_FR / OUT_EL.KOL, 2), 
        ROUND(OUT_EL.SUMA_SR / OUT_EL.KOL, 2) 
    FROM 
        OPR_RAZPAD_NODE ORN INNER JOIN OUT_EL ON OUT_EL.ID = ORN.OUT_EL_ID AND ORN.IN_EL_ID = :P_IN_EL_ID 
    INTO 
        :L_PRICE_FR, :L_PRICE_SR; 
 
    -- ТЕМПОРАЛНА СУМА НА ПОЛУЧЕНИТЕ ЕЛЕМЕНТИ СПРЯМО ПОЛУЧЕНОТО КОЛИЧЕСТВО, ЕДИНИЧНА ЦЕНА И КОЕФИЦИЕНТА КЪМ МОМЕНТА НА РАЗПАДА 
    SELECT 
        SUM(ROUND(IN_EL.KOL * :L_PRICE_FR * ORN.PERCENT_SUM, 2)), 
        SUM(ROUND(IN_EL.KOL * :L_PRICE_SR * ORN.PERCENT_SUM, 2)) 
    FROM 
        OPR_RAZPAD_NODE ORN INNER JOIN IN_EL ON IN_EL.ID = ORN.IN_EL_ID AND IN_EL.OPR_ID = :L_RAZPAD_OPR_ID 
    INTO 
        :L_COEF_FR, :L_COEF_SR; -- ПОЛЗВАМ ТАЗИ ПРОМЕНЛИВА, ДА НЕ ДЕКЛАРИМА ЕДНА САМО ЗА 1 СМЕТКА 
 
    -- ЕДИНИЧЕН КОЕФИЦИЕНТ, КОЙТО СЕ ПОЛЗВА ЗА КРАЙНО ОСТОЙНОСТЯВАНЕ НА ПОЛУЧЕНИЯ ПРОДУКТ 
    L_COEF_FR = 1 - ((L_COEF_FR - L_OUT_SUMA_FR) / L_COEF_FR); 
    L_COEF_SR = 1 - ((L_COEF_SR - L_OUT_SUMA_SR) / L_COEF_SR); 
 
    -- ИЗВЛИЧА СЕ ВСЕКИ ПОЛУЧЕН ЕЛЕМЕНТ, КОЙТО ТРЯБВА ДА СЕ ОСТОЙНОСТИ, ЗА ДАСЕ ВИДИ КОЯ ТОЧНО СУМА Е ЗА ТЕКУЩО ПРЕСМЯТАНИЯ. 
    -- МОЖЕ ДА Е ПОСЛЕДНИЯ И ДА ОБИРА РАЗЛИЧКАТА, ЗАТОВА НЕ МОЖЕ ПРОСТО ДА ГО УМНОЖА ПО КОЕФИЦИЕНТА И ДА СТАНЕ БЪРЗО 
    FOR SELECT 
        IN_EL.ID, 
        ROUND(IN_EL.KOL * :L_PRICE_FR * ORN.PERCENT_SUM * :L_COEF_FR , 2), 
        ROUND(IN_EL.KOL * :L_PRICE_SR * ORN.PERCENT_SUM * :L_COEF_SR , 2), 
        IN_EL.KOL, 
        SIMPLE.RSN 
    FROM 
        IN_EL INNER JOIN OPR_RAZPAD_NODE ORN ON ORN.IN_EL_ID = IN_EL.ID AND ORN.PERCENT_SUM > 0.00 
        AND IN_EL.OPR_ID = :L_RAZPAD_OPR_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
    ORDER BY 1 
    INTO 
        :L_IN_EL_ID, :L_IN_EL_SUMA_FR, :L_IN_EL_SUMA_SR, :L_IN_EL_KOL ,:L_RSN 
    DO BEGIN 
        L_IN_EL_TOTAL_KOL = ROUND(L_IN_EL_TOTAL_KOL - L_IN_EL_KOL, 5); 
 
        IF (L_IN_EL_TOTAL_KOL = 0.00) THEN BEGIN 
            -- ОБИРА РАЗЛИКАТА 
            L_IN_EL_SUMA_SR = L_OUT_SUMA_SR; 
            L_IN_EL_SUMA_FR = L_OUT_SUMA_FR; 
        END 
 
        L_OUT_SUMA_FR = ROUND(L_OUT_SUMA_FR - L_IN_EL_SUMA_FR, 2); 
        L_OUT_SUMA_SR = ROUND(L_OUT_SUMA_SR - L_IN_EL_SUMA_SR, 2); 
 
        IF (L_IN_EL_ID = P_IN_EL_ID) THEN BEGIN 
            UPDATE IN_EL SET 
                SUMA_FR = :L_IN_EL_SUMA_FR, 
                SUMA_SR = :L_IN_EL_SUMA_SR 
            WHERE 
                ID = :P_IN_EL_ID; 
 
            IF (L_RSN = 1) THEN BEGIN 
                FOR SELECT 
                    PEN.ID 
                FROM 
                    PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = :L_IN_EL_ID 
                    AND PEN.ID = PIN.PARTIDA_NODE_ID 
                INTO 
                    :L_PEN_ID 
                DO BEGIN 
                    UPDATE PARTIDA_EL_NODE SET 
                        SUMA_FR = ROUND(:L_IN_EL_SUMA_FR / :L_IN_EL_KOL, 2), 
                        SUMA_SR = ROUND(:L_IN_EL_SUMA_SR / :L_IN_EL_KOL, 2) 
                    WHERE 
                        ID = :L_PEN_ID; 
                END 
            END 
            ELSE BEGIN 
                MERGE INTO PARTIDA_EL_NODE 
                USING ( 
                SELECT 
                    PIN.PARTIDA_NODE_ID AS ID 
                FROM 
                    PARTIDA_IN_EL_NODE PIN 
                WHERE 
                    IN_EL_ID = :L_IN_EL_ID) TMP 
                ON TMP.ID = PARTIDA_EL_NODE.ID 
                WHEN MATCHED THEN UPDATE SET 
                    SUMA_FR = :L_IN_EL_SUMA_FR, 
                    SUMA_SR = :L_IN_EL_SUMA_SR; 
            END 
            EXIT; -- НЯМА НУЖДА ПОВЕЧЕ ДА ВЪРТЯ, ИЗЧИСЛИЛ СЪМ ЕЛЕМЕНТА, КОЙТО ТЪРСЯ 
        END 
    END 
END^


ALTER PROCEDURE MESTI_V_OLD_IN_EL (
    P_OPR_ID INTEGER,
    P_OPR_ID_KI INTEGER)
AS
DECLARE VARIABLE L_OPR_ID INTEGER;
BEGIN 
    FOR SELECT DISTINCT
        IN_EL.OPR_ID 
    FROM 
        FAK_IN INNER JOIN FAK_IN_EL_NODE ON FAK_IN.OPR_ID = :P_OPR_ID AND FAK_IN.ID = FAK_IN_EL_NODE.FAK_IN_ID 
        INNER JOIN IN_EL ON FAK_IN_EL_NODE.IN_EL_ID = IN_EL.ID 
        INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
    INTO
        :L_OPR_ID
    DO BEGIN 
        INSERT INTO OLD_IN_EL (OPR_ID,SIMPLE_ID,SUMA_FR,KOL,KOL2,SUMA_SR)
        SELECT
            :P_OPR_ID_KI,
            IN_EL.SIMPLE_ID,
            IN_EL.SUMA_FR,
            IN_EL.KOL,
            IN_EL2.KOL,
            IN_EL.SUMA_SR
        FROM 
            IN_EL LEFT JOIN IN_EL2 ON IN_EL2.IN_EL_ID = IN_EL.ID
        WHERE
            IN_EL.OPR_ID = :L_OPR_ID ;
    END
END^


ALTER PROCEDURE MOVE_ADD_OLD_EL (
    P_OPR_EDIT_OUT_ID INTEGER,
    P_OPR_EDIT_IN_ID INTEGER,
    P_OUT_EL_ID INTEGER)
AS
BEGIN 
    INSERT INTO OLD_OUT_EL (OPR_ID, SIMPLE_ID, SUMA_FR, SUMA_SR, SUMA, KOL, KOL2)
    SELECT 
        :P_OPR_EDIT_OUT_ID, 
        OUT_EL.SIMPLE_ID, 
        OUT_EL.SUMA_FR, 
        OUT_EL.SUMA_SR, 
        OUT_EL.SUMA, 
        OUT_EL.KOL, 
        OUT_EL2.KOL 
    FROM 
        OUT_EL LEFT JOIN OUT_EL2 ON OUT_EL2.OUT_EL_ID = OUT_EL.ID 
    WHERE 
        OUT_EL.ID = :P_OUT_EL_ID; 
 
    INSERT INTO OLD_IN_EL (OPR_ID, SIMPLE_ID, SUMA_FR, KOL, KOL2, SUMA_SR)
    SELECT 
        :P_OPR_EDIT_IN_ID, 
        IN_EL.SIMPLE_ID, 
        IN_EL.SUMA_FR,
        IN_EL.KOL, 
        IN_EL2.KOL ,
        IN_EL.SUMA_SR
    FROM 
        IN_EL INNER JOIN OPR_RAZPAD_NODE ORN ON ORN.IN_EL_ID = IN_EL.ID AND ORN.OUT_EL_ID = :P_OUT_EL_ID 
        LEFT JOIN IN_EL2 ON IN_EL2.IN_EL_ID = IN_EL.ID;
END^


ALTER PROCEDURE MOVE_ADD_OPR_RAZPAD (
    P_OPR_OUT_ID INTEGER)
AS
DECLARE VARIABLE L_COUNTER INTEGER; 
DECLARE VARIABLE L_OPR_ID INTEGER; 
DECLARE VARIABLE L_IN_EL_ID INTEGER; 
DECLARE VARIABLE L_OUT_EL_ID INTEGER; 
DECLARE VARIABLE L_OUT_EL_SUMA_SR DOUBLE PRECISION; 
DECLARE IN_EL_CUR CURSOR FOR ( 
  SELECT 
    IN_EL.ID 
  FROM 
    IN_EL 
  WHERE 
    IN_EL.OPR_ID = :L_OPR_ID 
  ORDER BY 
    IN_EL.ID); 
BEGIN 
   SELECT 
     MOVE.OPR_IN_ID 
   FROM 
     MOVE 
   WHERE 
     MOVE.OPR_OUT_ID = :P_OPR_OUT_ID 
  INTO 
     :L_OPR_ID; 
 
  OPEN IN_EL_CUR; 
 
  L_COUNTER = 0; 
 
  FOR SELECT 
    OUT_EL.ID, 
    OUT_EL.SUMA_SR 
  FROM 
    OUT_EL INNER JOIN MOVE ON MOVE.OPR_OUT_ID = :P_OPR_OUT_ID  AND OUT_EL.OPR_ID = :P_OPR_OUT_ID 
    INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
  WHERE 
    NOT EXISTS (SELECT OPR_RAZPAD_NODE.ID FROM OPR_RAZPAD_NODE WHERE OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID) 
  ORDER BY 
    OUT_EL.ID 
  INTO 
    :L_OUT_EL_ID,:L_OUT_EL_SUMA_SR 
  DO BEGIN 
      --SELECT FIRST 1 SKIP (:L_COUNTER) 
      --    IN_EL.ID 
      --FROM 
      --    IN_EL 
      --WHERE 
      --    IN_EL.OPR_ID = :L_OPR_ID 
      --ORDER BY 
      --   IN_EL.ID 
    FETCH IN_EL_CUR 
    INTO 
      :L_IN_EL_ID; 
 
      --L_COUNTER = L_COUNTER + 1; 
 
    INSERT INTO OPR_RAZPAD_NODE(OUT_EL_ID,IN_EL_ID,SUMA_SR) 
    VALUES (:L_OUT_EL_ID,:L_IN_EL_ID,:L_OUT_EL_SUMA_SR); 
  END 
 
  CLOSE IN_EL_CUR; 
END^


ALTER PROCEDURE MOVE_EDIT_GET_DETAILS (
    P_OPR_OUT_ID INTEGER)
RETURNS (
    R_ID INTEGER,
    R_NAME VARCHAR(100),
    R_RSN CHAR(1),
    R_ME CHAR(2),
    R_KOL DOUBLE PRECISION,
    R_SUMA DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_KOL2 DOUBLE PRECISION,
    R_OUT_EL2_ID INTEGER,
    R_OUT_EL_ID INTEGER,
    R_KOL_USED DOUBLE PRECISION)
AS
BEGIN 
    FOR SELECT
        SIMPLE.ID, 
        SIMPLE.NAME,  
        SIMPLE.RSN, 
        ME.NAME AS ME, 
        OUT_EL.KOL, 
        OUT_EL.SUMA, 
        OUT_EL.SUMA_SR, 
        OUT_EL.SUMA_FR, 
        OUT_EL2.KOL,
        OUT_EL2.ID,
        OUT_EL.ID
    FROM 
        OUT_EL INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID AND OUT_EL.OPR_ID = :P_OPR_OUT_ID 
        INNER JOIN ME ON ME.ID = SIMPLE.ME_ID
        LEFT JOIN OUT_EL2 ON OUT_EL2.OUT_EL_ID = OUT_EL.ID 
    ORDER BY OUT_EL.ID 
    INTO 
        :R_ID,:R_NAME,:R_RSN,:R_ME,:R_KOL,:R_SUMA,:R_SUMA_SR,:R_SUMA_FR,:R_KOL2,:R_OUT_EL2_ID,:R_OUT_EL_ID 
    DO BEGIN 
        IF (R_RSN = '1') THEN BEGIN 
            SELECT 
                SUM(PEN_OUT.KOL)
            FROM 
                OPR_RAZPAD_NODE ORN INNER JOIN PARTIDA_IN_EL_NODE PIN ON ORN.OUT_EL_ID = :R_OUT_EL_ID AND ORN.IN_EL_ID = PIN.IN_EL_ID
                INNER JOIN PARTIDA_EL_NODE PEN_IN ON PEN_IN.ID = PIN.PARTIDA_NODE_ID
                INNER JOIN PARTIDA_EL_NODE PEN_OUT ON PEN_OUT.PARTIDA_ID = PEN_IN.PARTIDA_ID
                INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.PARTIDA_NODE_ID = PEN_OUT.ID
            INTO
                :R_KOL_USED; 
        END 
        ELSE 
            R_KOL_USED = 0.00; 
 
        SUSPEND; 
    END
END^


ALTER PROCEDURE MOVE_EDIT_GET_SN (
    P_OPR_OUT_ID INTEGER,
    P_SKLAD_ID INTEGER)
RETURNS (
    R_SN VARCHAR(30),
    R_ELEMENT_ID INTEGER,
    R_SIMPLE_ID INTEGER,
    R_OUT_EL_ID INTEGER,
    R_IS_USED SMALLINT,
    R_IN_EL_ID INTEGER)
AS
DECLARE VARIABLE L_COUNT INTEGER; 
BEGIN 
    FOR SELECT 
        SERIAL_NUM.SN, 
        PN.ELEMENT_ID, 
        PN.SIMPLE_ID, 
        0, 
        PN.IN_EL_ID 
    FROM 
        OUT_EL INNER JOIN SIMPLE ON OUT_EL.OPR_ID = :P_OPR_OUT_ID AND SIMPLE.ID = OUT_EL.SIMPLE_ID 
        INNER JOIN PARTIDA_NAL PN ON PN.SIMPLE_ID = OUT_EL.SIMPLE_ID AND PN.SKLAD_ID = :P_SKLAD_ID 
 
        INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID 
    WHERE 
        IIF(PN.KOL > 0.00, PN.IN_EL_ID, NULL) > 0 
 
    UNION 
 
    SELECT 
        SERIAL_NUM.SN, 
        PN.ELEMENT_ID, 
        OUT_EL.SIMPLE_ID, 
        OUT_EL.ID, 
        PN.IN_EL_ID 
    FROM 
        OUT_EL INNER JOIN PARTIDA_OUT_EL_NODE PON ON (OUT_EL.OPR_ID = :P_OPR_OUT_ID AND PON.OUT_EL_ID = OUT_EL.ID) 
        INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID 
        INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
        INNER JOIN SERIAL_NUM ON PN.ELEMENT_ID = SERIAL_NUM.PARTIDA_EL_ID 
    ORDER BY 3 
    INTO 
        :R_SN,:R_ELEMENT_ID,:R_SIMPLE_ID,:R_OUT_EL_ID,:R_IN_EL_ID 
    DO BEGIN 
        IF (R_OUT_EL_ID = 0) THEN BEGIN 
            R_IS_USED = 0; 
        END 
        ELSE BEGIN 
            SELECT 
                COUNT(PEN.ID) 
            FROM 
                OPR_RAZPAD_NODE ORN INNER JOIN PARTIDA_NAL PN ON (ORN.OUT_EL_ID = :R_OUT_EL_ID 
                AND PN.IN_EL_ID = ORN.IN_EL_ID AND PN.ELEMENT_ID = :R_ELEMENT_ID) 
                INNER JOIN PARTIDA_EL_NODE PEN ON PEN.PARTIDA_ID = PN.ID 
                INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.PARTIDA_NODE_ID = PEN.ID 
            INTO 
                :L_COUNT; 
 
            IF (L_COUNT > 0) THEN 
                R_IS_USED = 1; 
            ELSE 
                R_IS_USED = 0; 
        END 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE MOVE_POR_MOVE (
    P_SKLAD_ID_OSN INTEGER,
    P_OPR_MOVE_ID INTEGER,
    P_IP INTEGER,
    P_USER_ID INTEGER,
    P_FL_IZL SMALLINT,
    P_FLAG_FUTURE_DATE SMALLINT)
RETURNS (
    R_STATUS TYPE OF DOM_INT,
    R_OPR_OUT_ID TYPE OF DOM_INT)
AS
declare variable L_SKLAD_ID integer; 
declare variable L_SIM_ID integer; 
declare variable L_KOL double precision; 
declare variable L_KOL_NAL double precision; 
declare variable L_KOL_MOVE double precision; 
declare variable L_OUT_EL_ID double precision; 
declare variable L_IN_EL_ID double precision; 
declare variable L_OPR_IN_ID integer; 
declare variable L_OPR_OUT_ID integer; 
declare variable L_SUMA double precision; 
declare variable LL integer; 
BEGIN 
    SELECT 
        OPR.SKLAD_ID 
    FROM MOVE 
        JOIN OPR ON OPR.ID = MOVE.OPR_IN_ID 
    WHERE 
        OPR_OUT_ID = :P_OPR_MOVE_ID 
    INTO 
        :L_SKLAD_ID; 
 
    L_SIM_ID = NULL; 
    SELECT FIRST 1 
        OUT_EL.SIMPLE_ID, 
        OUT_EL.KOL, 
        OUT_EL.SUMA, 
        NAL.KOL_NAL 
    FROM OUT_EL 
        JOIN NAL ON NAL.SIMPLE_ID = OUT_EL.SIMPLE_ID AND NAL.SKLAD_ID = :L_SKLAD_ID 
    WHERE 
        OPR_ID = :P_OPR_MOVE_ID AND 
        NAL.KOL_NAL > 0 
    ORDER BY OUT_EL.SIMPLE_ID 
    INTO 
        :L_SIM_ID,:L_KOL,:L_SUMA, :L_KOL_NAL; 
 
    IF (:L_SIM_ID IS NOT NULL) THEN BEGIN 
        EXECUTE PROCEDURE ADD_OPR(9,CURRENT_DATE,:P_IP,:P_USER_ID,:L_SKLAD_ID,NULL, 0.00) RETURNING_VALUES :L_OPR_OUT_ID; 
        EXECUTE PROCEDURE ADD_OPR(4,CURRENT_DATE,:P_IP,:P_USER_ID,:P_SKLAD_ID_OSN,NULL, 0.00) RETURNING_VALUES :L_OPR_IN_ID; 
 
        R_OPR_OUT_ID = L_OPR_OUT_ID; 
 
        INSERT INTO MOVE (OPR_OUT_ID, OPR_IN_ID)  VALUES(:L_OPR_OUT_ID, :L_OPR_IN_ID); 
 
        INSERT INTO OPR_SUMI(OPR_ID, SUMA_FR, SUMA_SR) 
        VALUES(:L_OPR_OUT_ID,0.00,0.00); 
 
        IF (:P_FLAG_FUTURE_DATE = 1) THEN BEGIN 
            FOR SELECT DISTINCT 
                OUT_EL.SIMPLE_ID 
            FROM 
                OUT_EL INNER JOIN NAL ON NAL.SIMPLE_ID = OUT_EL.SIMPLE_ID AND NAL.SKLAD_ID = :L_SKLAD_ID 
                INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID AND NOT SIMPLE.RSN = '1' 
            WHERE 
                OPR_ID = :P_OPR_MOVE_ID 
                AND NAL.KOL_NAL > 0 
            ORDER BY OUT_EL.SIMPLE_ID 
            INTO 
                :L_SIM_ID 
            DO 
                EXECUTE PROCEDURE PARTIDA_HISTORY_OLD_PARTIDA(:L_OPR_OUT_ID,:L_SIM_ID,NULL, NULL,NULL); 
        END 
 
        FOR SELECT 
            OUT_EL.SIMPLE_ID, 
            OUT_EL.KOL, 
            OUT_EL.SUMA, 
            NAL.KOL_NAL 
        FROM 
            OUT_EL INNER JOIN NAL ON NAL.SIMPLE_ID = OUT_EL.SIMPLE_ID AND NAL.SKLAD_ID = :L_SKLAD_ID 
        WHERE 
            OPR_ID = :P_OPR_MOVE_ID AND 
            NAL.KOL_NAL > 0 
        INTO 
            :L_SIM_ID,:L_KOL,:L_SUMA, :L_KOL_NAL 
        DO BEGIN 
            IF (L_KOL <= L_KOL_NAL) THEN 
                L_KOL_MOVE = ROUND(L_KOL,5); 
            ELSE BEGIN 
                L_KOL_MOVE = ROUND(L_KOL_NAL,5); 
                L_SUMA = ROUND(ROUND(L_SUMA/L_KOL,5) * L_KOL_NAL,2); 
            END 
 
            EXECUTE PROCEDURE ADD_OUT_EL(:L_OPR_OUT_ID,:L_SIM_ID,:L_KOL_MOVE,:L_SUMA,0.00,0.00,0,NULL) RETURNING_VALUES :L_OUT_EL_ID; 
            EXECUTE PROCEDURE ADD_IN_EL(:L_OPR_IN_ID,:L_SIM_ID,:L_KOL_MOVE,0.00,0.00,0,NULL,NULL) RETURNING_VALUES :L_IN_EL_ID; 
 
            IF (:P_FLAG_FUTURE_DATE = 0) THEN BEGIN 
                EXECUTE PROCEDURE PARTIDA_OUT_MOVE(:L_OPR_OUT_ID,:L_SIM_ID,:L_OUT_EL_ID,:L_KOL_MOVE,:L_SKLAD_ID,:P_FL_IZL,:L_IN_EL_ID) 
                RETURNING_VALUES :R_STATUS; 
 
                IF (R_STATUS = 1) THEN 
                    EXIT; 
            END 
 
            INSERT INTO OPR_RAZPAD_NODE(OUT_EL_ID,IN_EL_ID,SUMA_SR) 
            VALUES (:L_OUT_EL_ID,:L_IN_EL_ID,0.00); 
        END 
 
        IF (:P_FLAG_FUTURE_DATE = 1) THEN BEGIN 
            FOR SELECT DISTINCT 
                OUT_EL.SIMPLE_ID 
            FROM 
                OUT_EL INNER JOIN NAL ON NAL.SIMPLE_ID = OUT_EL.SIMPLE_ID AND NAL.SKLAD_ID = :L_SKLAD_ID 
                INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID AND NOT SIMPLE.RSN = '1' 
            WHERE 
                OPR_ID = :P_OPR_MOVE_ID 
                AND NAL.KOL_NAL > 0 
            ORDER BY OUT_EL.SIMPLE_ID 
            INTO 
                :L_SIM_ID 
            DO BEGIN 
                EXECUTE PROCEDURE PARTIDA_HISTORY_NEW_PARTIDA (:L_OPR_OUT_ID,:L_SIM_ID,NULL, NULL,:P_FL_IZL, NULL) RETURNING_VALUES :R_STATUS; 
 
                IF (R_STATUS > 0) THEN 
                    EXIT; 
            END 
        END 
 
        EXECUTE PROCEDURE ADD_COMMENT('Прехвърляне от поръчка','COMMENT_OPR_NODE','OPR_ID',:L_OPR_OUT_ID,:P_USER_ID,NULL) RETURNING_VALUES :LL; 
    END 
END^


ALTER PROCEDURE NAL_PARTIDA_EL_NODE (
    P_FLAG_FKT SMALLINT)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_SKLAD_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION)
AS
BEGIN 
/*V.2*/ 
    FOR SELECT
        IN_EL.SIMPLE_ID, 
        OPR.SKLAD_ID, 
        SUM(PEN.KOL),
        SUM(PEN.SUMA_FR)
    FROM 
        IN_EL INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = IN_EL.ID
        INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID
        INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID
    WHERE 
        IN_EL.IS_F = :P_FLAG_FKT AND IN_EL.ID > 0 
    GROUP BY 1,2
 
    UNION ALL 
 
    SELECT 
        OUT_EL.SIMPLE_ID,
        OPR.SKLAD_ID, 
        -SUM(PEN.KOL),
        -SUM(PEN.SUMA_FR)
    FROM 
        OUT_EL INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = OUT_EL.ID
        INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID
        INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID
    WHERE 
        OUT_EL.IS_F = :P_FLAG_FKT AND OUT_EL.ID > 0
    GROUP BY 
        1,2 
    INTO 
        :R_SIMPLE_ID,:R_SKLAD_ID,:R_KOL,:R_SUMA_FR 
    DO BEGIN 
        SUSPEND; 
    END
END^


ALTER PROCEDURE NEW_PARI_DIST (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OPR_PROD_ID TYPE OF DOM_KEY,
    P_SUMA_DIST TYPE OF DOM_SUMA)
RETURNS (
    R_ID TYPE OF DOM_KEY)
AS
BEGIN 
    INSERT INTO PARI_DIST(OPR_ID, OPR_PROD_ID, SUMA)
    VALUES (:P_OPR_ID, :P_OPR_PROD_ID, ROUND(:P_SUMA_DIST, 2))
    RETURNING ID INTO :R_ID;
END^


ALTER PROCEDURE NEW_PARTIDA_IN (
    P_KOL TYPE OF DOM_KOL,
    P_SUMA_FR TYPE OF DOM_SUMA,
    P_SUMA_SR TYPE OF DOM_SUMA,
    P_PARTIDA_NAL_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_IN_EL_ID INTEGER;
DECLARE VARIABLE L_OPR_ID INTEGER;
DECLARE VARIABLE L_GEN_NODE_ID INTEGER;
DECLARE VARIABLE L_GEN_PAR_NAL_ID INTEGER;
DECLARE VARIABLE L_SKLAD_ID INTEGER;
DECLARE VARIABLE L_SIMPLE_ID INTEGER;
DECLARE VARIABLE L_RSN CHAR(1);
DECLARE VARIABLE L_NAL_ID INTEGER;
DECLARE VARIABLE L_KOL_TEMP DOUBLE PRECISION;
DECLARE VARIABLE L_SUMA_SR_TEMP DOUBLE PRECISION;
BEGIN 
/*V.1*/
    SELECT
        IN_EL.ID,
        IN_EL.OPR_ID,
        IN_EL.SIMPLE_ID,
        OPR.SKLAD_ID,
        SIMPLE.RSN
    FROM
        PARTIDA_NAL INNER JOIN IN_EL ON PARTIDA_NAL.ID = :P_PARTIDA_NAL_ID AND PARTIDA_NAL.IN_EL_ID = IN_EL.ID
        INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID
    INTO
        :L_IN_EL_ID,:L_OPR_ID,:L_SIMPLE_ID,:L_SKLAD_ID,:L_RSN;

    INSERT INTO PARTIDA_EL_NODE(OPR_ID,KOL,SUMA_FR,SUMA_SR,PARTIDA_ID)
    VALUES (:L_OPR_ID,:P_KOL,:P_SUMA_FR,:P_SUMA_SR,:P_PARTIDA_NAL_ID)
    RETURNING ID INTO :L_GEN_NODE_ID;

    INSERT INTO PARTIDA_IN_EL_NODE(IN_EL_ID,PARTIDA_NODE_ID)
    VALUES (:L_IN_EL_ID,:L_GEN_NODE_ID);
 
    L_NAL_ID = NULL;
    SELECT 
        NAL.ID
     FROM 
        NAL 
     WHERE 
        NAL.SIMPLE_ID = :L_SIMPLE_ID 
        AND NAL.SKLAD_ID = :L_SKLAD_ID 
    INTO 
        :L_NAL_ID;
 
    IF (L_NAL_ID IS NULL) THEN BEGIN 
        INSERT INTO NAL(SUMA,SUMA_FR,KOL_NAL,LAST_CENA,SKLAD_ID,SIMPLE_ID,DATETIME_LASTCENA) 
        VALUES (0.00,0.00,0.00,ROUND(:P_SUMA_FR/:P_KOL,5),:L_SKLAD_ID,:L_SIMPLE_ID,CURRENT_TIMESTAMP);
    END 
/*    ELSE BEGIN
        UPDATE NAL SET
        NAL.KOL_NAL  = ROUND(NAL.KOL_NAL + :P_KOL,5),
        NAL.SUMA     = ROUND(NAL.SUMA + :P_SUMA_SR,2),
        NAL.SUMA_FR  = ROUND(NAL.SUMA_FR + :P_SUMA_FR,2)
        WHERE NAL.ID = :L_NAL_ID; 
 
        IF (L_RSN = '0') THEN BEGIN
            --АВТОМАТИЧНО РАЗПРЕДЕЛЯНЕ ПО ИЗЛИШЪЦИТЕ, АКО ИМА ТАКИВА
            EXECUTE PROCEDURE PARTIDA_IN_IZL(P_KOL,P_SUMA_FR,P_SUMA_SR,L_OPR_ID,L_SKLAD_ID,L_SIMPLE_ID,P_PARTIDA_NAL_ID);
        END
    END*/
END^


ALTER PROCEDURE NEW_PARTIDA_OUT (
    P_KOL TYPE OF DOM_KOL,
    P_OUT_EL_ID TYPE OF DOM_KEY)
RETURNS (
    R_KOL DOUBLE PRECISION)
AS
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
DECLARE VARIABLE L_SKLAD_ID SMALLINT; 
DECLARE VARIABLE L_OPR_ID INTEGER; 
DECLARE VARIABLE L_NAL_SUMA_SR DOUBLE PRECISION; 
DECLARE VARIABLE L_NAL_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_PN_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_PN_SUMA_FR DOUBLE PRECISION; 
DECLARE VARIABLE L_PN_ID INTEGER; 
DECLARE VARIABLE L_PEN_ID INTEGER; 
DECLARE VARIABLE L_PEN_SUMA_FR DOUBLE PRECISION; 
DECLARE VARIABLE L_PEN_SUMA_SR DOUBLE PRECISION; 
DECLARE VARIABLE L_PEN_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_IS_FKT TYPE OF DOM_SMAL_INT; 
BEGIN 
    R_KOL = P_KOL; 
 
    SELECT 
        OUT_EL.SIMPLE_ID, 
        OUT_EL.OPR_ID, 
        OPR.SKLAD_ID, 
        NAL.SUMA, 
        NAL.KOL_NAL, 
        OUT_EL.IS_F 
    FROM 
        OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OUT_EL.ID = :P_OUT_EL_ID 
        INNER JOIN NAL ON NAL.SIMPLE_ID = OUT_EL.SIMPLE_ID AND NAL.SKLAD_ID = OPR.SKLAD_ID 
    INTO 
        :L_SIMPLE_ID,:L_OPR_ID,:L_SKLAD_ID,:L_NAL_SUMA_SR,:L_NAL_KOL, :L_IS_FKT; 
 
    FOR WITH IN_PARTIDA AS ( 
    SELECT 
        PN.ELEMENT_ID, 
        OPR.ID AS OPR_ID, 
        OPR.OPR_DATE, 
        IN_EL.SIMPLE_ID, 
        IN_EL.IS_F 
    FROM 
        PARTIDA_NAL PN INNER JOIN IN_EL ON IN_EL.ID = PN.IN_EL_ID 
        INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
    WHERE 
        OPR.OPR_TIP IN (1,3,12,14,22,28,33,55,77) 
        AND IN_EL.SIMPLE_ID = :l_SIMPLE_ID 
        AND IN_EL.IS_F = :L_IS_FKT) 
 
    SELECT 
        PN.ID, 
        PN.KOL, 
        PN.SUMA_FR 
    FROM 
        PARTIDA_NAL PN INNER JOIN in_partida VPI ON VPI.ELEMENT_ID = PN.ELEMENT_ID AND PN.SKLAD_ID = :L_SKLAD_ID 
    WHERE 
        IIF(PN.KOL > 0.00, IN_EL_ID, NULL) > 0 
    ORDER BY VPI.OPR_DATE,VPI.OPR_ID,PN.IN_EL_ID 
    INTO 
        :L_PN_ID,:L_PN_KOL,:L_PN_SUMA_FR 
    DO BEGIN 
        --ОПРЕДЕЛЯМЕ КОЛИЧЕСТВОТО, КОЕТО ЩЕ СЕ ОТНЕМЕ ОТ ТАЗИ ПАРТИДА 
        IF (R_KOL >= L_PN_KOL) THEN BEGIN 
            L_PEN_KOL = ROUND(L_PN_KOL,5); 
            L_PEN_SUMA_FR = ROUND(L_PN_SUMA_FR,2); 
        END 
        ELSE BEGIN 
            L_PEN_KOL = ROUND(R_KOL,5); 
            L_PEN_SUMA_FR = ROUND(ROUND(L_PN_SUMA_FR / L_PN_KOL,5) * L_PEN_KOL,2); 
        END 
 
        R_KOL = ROUND(R_KOL - L_PEN_KOL,5); 
 
        --НА ТЕОРИЯ ИМА ЛИ НАЛИЧНИ ПАРТИДИ ЗНАЧИ ИМА И КОЛИЧЕСТВО В НАЛ И СУМИ 
        --ЗАТОВА НЕ ПРОВЕРЯВАМ ЗА ДЕЛЕНЕ НА 0 И ЛИПСА НА СУМА СРЕДНА 
        --АКО СЕ ПОЛУЧИ ЗНАЧИ ИМА ГРЕШКА НЯКЪДЕ 
        IF (L_NAL_KOL > L_PEN_KOL) THEN 
            L_PEN_SUMA_SR = ROUND(ROUND(L_NAL_SUMA_SR / L_NAL_KOL,5) * L_PEN_KOL,2); 
        ELSE 
            L_PEN_SUMA_SR = L_NAL_SUMA_SR; 
 
        L_NAL_SUMA_SR = ROUND(L_NAL_SUMA_SR - L_PEN_SUMA_SR,2); 
        L_NAL_KOL = ROUND(L_NAL_KOL - L_PEN_KOL,5); 
 
        --ДОБАВЯМЕ РЕД В ИСТОРИЯТА НА ПАРТИДАТА 
        INSERT INTO PARTIDA_EL_NODE(OPR_ID,PARTIDA_ID,KOL,SUMA_FR,SUMA_SR) 
        VALUES(:L_OPR_ID,:L_PN_ID,:L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR) 
        RETURNING ID INTO :L_PEN_ID; 
 
        --ВРЪЗКАТА НА OUT_EL-А С ИСТОРИЯТА НА ПАРТИДИ 
        INSERT INTO PARTIDA_OUT_EL_NODE(OUT_EL_ID, PARTIDA_NODE_ID) 
        VALUES (:P_OUT_EL_ID,:L_PEN_ID); 
 
        UPDATE PARTIDA_NAL SET 
        KOL = ROUND(KOL - :L_PEN_KOL,5), 
        SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR,2) 
        WHERE ID = :L_PN_ID; 
 
        IF (ROUND(R_KOL,5) <= 0.00) THEN 
            LEAVE; 
    END 
 
    SELECT 
        SUM(PEN.SUMA_FR), 
        SUM(PEN.SUMA_SR) 
    FROM 
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = :P_OUT_EL_ID 
        AND PON.PARTIDA_NODE_ID = PEN.ID 
    INTO 
        :L_PEN_SUMA_FR,:L_PEN_SUMA_SR; 
 
    L_PEN_SUMA_FR = COALESCE(L_PEN_SUMA_FR,0.00); 
    L_PEN_SUMA_SR = COALESCE(L_PEN_SUMA_SR,0.00); 
 
    IF (NOT EXISTS (SELECT NAL.ID FROM NAL WHERE SIMPLE_ID = :L_SIMPLE_ID AND SKLAD_ID = :L_SKLAD_ID)) THEN 
        INSERT INTO NAL (SIMPLE_ID, SKLAD_ID, KOL_NAL, SUMA, LAST_CENA, SUMA_FR, KOL_RZV, DATETIME_LASTCENA) 
        VALUES (:L_SIMPLE_ID, :L_SKLAD_ID, 0.00, 0.00, 0.00, 0.00, 0.00, NULL); 
 
    --ЪПДЕЙТВАМ ВЕДНЪЖ В КРАЯ. ПРИ СЕРИЙНИ И ПАРТИДНИ НОМЕРА Е НА ВСЯКА ПАРТИДА 
    UPDATE NAL SET 
    KOL_NAL = ROUND(KOL_NAL - :P_KOL,5), 
    SUMA = ROUND(SUMA - :L_PEN_SUMA_SR,2), 
    SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR,2) 
    WHERE 
    NAL.SIMPLE_ID = :L_SIMPLE_ID AND SKLAD_ID = :L_SKLAD_ID; 
 
    UPDATE OUT_EL SET 
    SUMA_FR = :L_PEN_SUMA_FR, 
    SUMA_SR = :L_PEN_SUMA_SR 
    WHERE ID = :P_OUT_EL_ID; 
END^


ALTER PROCEDURE NEW_PARTIDA_OUT_SN (
    P_KOL TYPE OF DOM_KOL,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_PARTIDA_NAL_ID TYPE OF DOM_KEY)
RETURNS (
    R_KOL TYPE OF DOM_KOL)
AS
DECLARE VARIABLE L_SIMPLE_ID INTEGER;
DECLARE VARIABLE L_SKLAD_ID SMALLINT;
DECLARE VARIABLE L_OPR_ID INTEGER;
DECLARE VARIABLE L_NAL_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_NAL_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_PN_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PN_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_PEN_ID INTEGER;
DECLARE VARIABLE L_PEN_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PEN_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_PEN_SUMA_SR DOUBLE PRECISION;
BEGIN
    SELECT
        OUT_EL.SIMPLE_ID,
        OUT_EL.OPR_ID,
        OPR.SKLAD_ID,
        NAL.SUMA,
        NAL.KOL_NAL
    FROM
        OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OUT_EL.ID = :P_OUT_EL_ID
        INNER JOIN NAL ON NAL.SIMPLE_ID = OUT_EL.SIMPLE_ID AND NAL.SKLAD_ID = OPR.SKLAD_ID
    INTO
        :L_SIMPLE_ID,:L_OPR_ID,:L_SKLAD_ID,:L_NAL_SUMA_SR,:L_NAL_KOL;
    
    R_KOL = P_KOL;

    SELECT
        PN.KOL, 
        PN.SUMA_FR
    FROM
        PARTIDA_NAL PN
    WHERE
        PN.ID = :P_PARTIDA_NAL_ID
    INTO
        :L_PN_KOL,:L_PN_SUMA_FR;

    IF (R_KOL >= L_PN_KOL) THEN BEGIN
        L_PEN_KOL = ROUND(L_PN_KOL,5);
        L_PEN_SUMA_FR = ROUND(L_PN_SUMA_FR,2);
    END
    ELSE BEGIN
        L_PEN_KOL = ROUND(R_KOL,5);
        L_PEN_SUMA_FR = ROUND(ROUND(L_PN_SUMA_FR / L_PN_KOL,5) * L_PEN_KOL,2);
    END

    IF (L_NAL_KOL > L_PEN_KOL) THEN
        L_PEN_SUMA_SR = ROUND(ROUND(L_NAL_SUMA_SR / L_NAL_KOL,5) * L_PEN_KOL,2);
    ELSE
        L_PEN_SUMA_SR = L_NAL_SUMA_SR;

    R_KOL = ROUND(R_KOL - L_PEN_KOL,5);

    --ДОБАВЯМЕ РЕД В ИСТОРИЯТА НА ПАРТИДАТА
    INSERT INTO PARTIDA_EL_NODE(OPR_ID,PARTIDA_ID,KOL,SUMA_FR,SUMA_SR)
    VALUES(:L_OPR_ID,:P_PARTIDA_NAL_ID,:L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR)
    RETURNING ID INTO :L_PEN_ID;

    --ВРЪЗКАТА НА OUT_EL-А С ИСТОРИЯТА НА ПАРТИДИ
    INSERT INTO PARTIDA_OUT_EL_NODE(OUT_EL_ID, PARTIDA_NODE_ID)
    VALUES (:P_OUT_EL_ID,:L_PEN_ID);

    UPDATE PARTIDA_NAL SET
    KOL = ROUND(KOL - :L_PEN_KOL,5),
    SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR,2)
    WHERE ID = :P_PARTIDA_NAL_ID;

    UPDATE NAL SET
    KOL_NAL = ROUND(KOL_NAL - :P_KOL,5),
    SUMA = ROUND(SUMA - :L_PEN_SUMA_SR,2),
    SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR,2)
    WHERE
    NAL.SIMPLE_ID = :L_SIMPLE_ID AND SKLAD_ID = :L_SKLAD_ID;

    SELECT
        SUM(PEN.SUMA_FR),
        SUM(PEN.SUMA_SR)
    FROM
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = :P_OUT_EL_ID
        AND PON.PARTIDA_NODE_ID = PEN.ID
    INTO
        :L_PEN_SUMA_FR,:L_PEN_SUMA_SR;

    UPDATE OUT_EL SET
    SUMA_FR = :L_PEN_SUMA_FR,
    SUMA_SR = :L_PEN_SUMA_SR
    WHERE ID = :P_OUT_EL_ID;
END^


ALTER PROCEDURE ORDER_TO_PR_REQUEST (
    P_ORDER_ID TYPE OF DOM_KEY,
    P_USER_ID TYPE OF DOM_KEY)
RETURNS (
    R_STATUS TYPE OF DOM_SMAL_INT)
AS
DECLARE VARIABLE L_REQUEST_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_ORDER_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_ORDER_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_ELEMENT_NUMBER TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_PR_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_KAPARO_OPR_ID TYPE OF DOM_KEY; 
BEGIN 
    -- STATUS 
    -- 0 - ВСИЧКО Е ОК 
    -- 1 - ПОРЪЧКАТА ВЕЧЕ Е ВЪРЗАНА СЪС ЗАЯВКА ЗА ПРОИЗВОДСТВО 
 
    R_STATUS = 0; 
 
    L_REQUEST_OPR_ID = NULL; 
 
    SELECT 
        PPR.PRODUCTION_REQUEST_ID 
    FROM 
        POR INNER JOIN POR_PRODUCTION_REQUEST_NODE PPR ON POR.OPR_ID = PPR.POR_OPR_ID AND POR.ID = :P_ORDER_ID 
    INTO 
        :L_REQUEST_OPR_ID; 
 
    IF (L_REQUEST_OPR_ID > 0) THEN BEGIN 
        R_STATUS = 1; 
        EXIT; 
    END 
 
    SELECT 
        POR.OPR_ID, 
        por.OPR_ID_KAPARO 
    FROM 
        POR 
    WHERE 
        ID = :P_ORDER_ID 
    INTO 
        :L_ORDER_OPR_ID, :L_KAPARO_OPR_ID; 
 
    INSERT INTO OPR (OPR_TIP, OPR_DATE, IP, USER_ID, SKLAD_ID, KLI_ID, SUMA) 
    SELECT 
        54, 
        POR.ZA_DATA, 
        OPR.IP, 
        :P_USER_ID, 
        OPR.SKLAD_ID, 
        OPR.KLI_ID, 
        OPR.SUMA 
    FROM 
        OPR INNER JOIN POR ON POR.OPR_ID = OPR.ID 
    WHERE 
        OPR.ID = :L_ORDER_OPR_ID 
    RETURNING ID INTO :L_REQUEST_OPR_ID; 
 
    INSERT INTO OPR_PRODUCTION_REQUEST(OPR_ID, SUMA_KAPARO, OT_SKLAD, V_SKLAD, FLAG_COMPLETE, KLIENT, MANUAL_COMPLETE, DT_MONTAJ, TIME_MONTAJ, POR_NUM) 
    SELECT 
        :L_REQUEST_OPR_ID, 
        (SELECT OPR.SUMA FROM OPR INNER JOIN POR ON POR.OPR_ID_KAPARO = OPR.ID AND POR.ID = :P_ORDER_ID), 
        POR.SKLAD_ID, 
        POR.SKLAD_ID, 
        0, 
        OPR.KLI_ID, 
        0, 
        IIF(CAST(POR.FOR_DATE_TIME AS DATE) = '0001-01-01', NULL, CAST(POR.FOR_DATE_TIME AS DATE)), 
        IIF(CAST(POR.FOR_DATE_TIME AS TIME) = '00:00:00', NULL, CAST(POR.FOR_DATE_TIME AS TIME)), 
        POR.ID 
    FROM 
        OPR INNER JOIN POR ON POR.OPR_ID = OPR.ID 
    WHERE 
        OPR.ID = :L_ORDER_OPR_ID; 
 
    IF (:L_KAPARO_OPR_ID IS NOT NULL) THEN 
        INSERT INTO PRODUCTION_KAPARO_NODE(REQUEST_ID, OPR_PAYMENT_ID) 
        VALUES(:L_REQUEST_OPR_ID, :L_KAPARO_OPR_ID); 
 
    INSERT INTO COMMENT_OPR_NODE (COMMENT_ID, OPR_ID) 
    SELECT 
        COMMENT_OPR_NODE.COMMENT_ID, 
        :L_REQUEST_OPR_ID 
    FROM 
        COMMENT_OPR_NODE 
    WHERE 
        COMMENT_OPR_NODE.OPR_ID = :L_ORDER_OPR_ID; 
 
 
    INSERT INTO POR_PRODUCTION_REQUEST_NODE (PRODUCTION_REQUEST_ID, POR_OPR_ID) 
    VALUES (:L_REQUEST_OPR_ID, :L_ORDER_OPR_ID); 
 
    L_ELEMENT_NUMBER = 1; 
 
    FOR SELECT 
        POR_EL.ID 
    FROM 
        POR_EL 
    WHERE 
        POR_EL.OPR_ID = :L_ORDER_OPR_ID 
    INTO 
        :L_ORDER_EL_ID 
    DO BEGIN 
        INSERT INTO PRODUCTION_REQUEST_EL (OPR_REQUEST_ID, NOMER, SIMPLE_ID, MASTER_SIMPLE_ID, KOL, TOT_SUM, CENA_CL) 
        SELECT 
            :L_REQUEST_OPR_ID, 
            :L_ELEMENT_NUMBER, 
            POR_EL.SIMPLE_ID, 
            IIF(EXISTS (SELECT POR_EL_PRODUCTION.ID FROM POR_EL_PRODUCTION WHERE POR_EL_PRODUCTION.POR_EL_ID = POR_EL.ID), POR_EL.SIMPLE_ID, NULL), 
            POR_EL.KOL, 
            0.00, 
            ROUND(POR_EL.SUMA / POR_EL.KOL, 5) 
        FROM 
            POR_EL 
        WHERE 
            POR_EL.ID = :L_ORDER_EL_ID 
        RETURNING ID INTO :L_PR_EL_ID; 
 
        INSERT INTO PRODUCTION_REQUEST_EL (OPR_REQUEST_ID, NOMER, SIMPLE_ID, MASTER_SIMPLE_ID, SIMPLE_CALC_ID, KOL, TOT_SUM) 
        SELECT 
            :L_REQUEST_OPR_ID, 
            :L_ELEMENT_NUMBER, 
            POR_EL_PRODUCTION.SIMPLE_ID, 
            POR_EL.SIMPLE_ID, 
            POR_EL_PRODUCTION.SIMPLE_CALAC_ID, 
            POR_EL_PRODUCTION.KOL, 
            0.00 
        FROM 
            POR_EL INNER JOIN POR_EL_PRODUCTION ON POR_EL.ID = :L_ORDER_EL_ID AND POR_EL.ID = POR_EL_PRODUCTION.POR_EL_ID; 
 
        INSERT INTO POR_EL_REQUEST_NODE(POR_EL_ID, REQUEST_EL_ID) 
        VALUES (:L_ORDER_EL_ID, :L_PR_EL_ID); 
 
        INSERT INTO PR_REQUEST_FORMULA_PARAMS (REQUEST_EL_ID, "VARIABLE", "COUNT", QUANTITY) 
        SELECT 
            :L_PR_EL_ID, 
            POR_FORMULA_PARAMS."VARIABLE", 
            POR_FORMULA_PARAMS."COUNT", 
            POR_FORMULA_PARAMS.QUANTITY 
        FROM 
            POR_FORMULA_PARAMS 
        WHERE 
            POR_FORMULA_PARAMS.POR_EL_ID = :L_ORDER_EL_ID; 
 
        INSERT INTO PR_REQUEST_EXPLANATORY (EXPLAN_ID, PR_REQUEST_EL_ID, MIN_KOL) 
        SELECT 
            POR_EL_EXPLANATORY.EXPLAN_ID, 
            :L_PR_EL_ID, 
            POR_EL_EXPLANATORY.MIN_KOL 
        FROM 
            POR_EL_EXPLANATORY 
        WHERE 
            POR_EL_EXPLANATORY.POR_EL_ID = :L_ORDER_EL_ID; 
 
        INSERT INTO PR_REQ_EL_PRICE_COEFICIENT (REQUEST_EL_ID, SIMPLE_ID, COEFICIENT) 
        SELECT 
            :L_PR_EL_ID, 
            SIMPLE_ID, 
            COEFICIENT 
        FROM 
            POR_EL_PRICE_COEFICIENT 
        WHERE 
            POR_EL_PRICE_COEFICIENT.POR_EL_ID = :L_ORDER_EL_ID; 
 
        L_ELEMENT_NUMBER = L_ELEMENT_NUMBER + 1; 
    END 
END^


ALTER PROCEDURE OTC_ARHIVE (
    P_OPR_ID INTEGER)
RETURNS (
    R_OTC_OPR_ID INTEGER)
AS
DECLARE VARIABLE L_TIP_SUMA SMALLINT; 
DECLARE VARIABLE L_SUMA_ID SMALLINT; 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_OTC_P_NOMER INTEGER; 
BEGIN 
    /*ПРЕХВЪРЛЯ СТАРИТЕ СУМИ НА АРХИВА В АРХИВНАТА ТАБЛИЦА И ВРЪЩА 
    ID НА ОПЕРАЦИЯТА, КОЯТО Е РЕДАКТИРАНИЯ ОТЧЕТ*/ 
    SELECT 
        OTC.OPR_ID 
    FROM 
        OTC INNER JOIN OPR ON OPR.OTC_ID = OTC.ID AND OPR.ID = :P_OPR_ID 
    INTO 
       :R_OTC_OPR_ID; 
 
    EXECUTE PROCEDURE SP_GEN_OTC_EL_EDIT_P_NOMER 
    RETURNING_VALUES :L_OTC_P_NOMER; 
 
    /*2.НАМИРАМ СУМИТЕ ЗА ТОЗИ ОТЧЕТ И ГИ ПРЕХВЪРЛЯМ В АРХИВНАТА ТАБЛИЦА*/ 
    FOR SELECT 
        OTC_EL.TIP_SUMA, 
        OTC_EL.SUMA_ID, 
        OTC_EL.SUMA 
    FROM 
        OTC_EL 
    WHERE 
        OTC_EL.OPR_ID = :R_OTC_OPR_ID 
    INTO 
        :L_TIP_SUMA, :L_SUMA_ID, :L_SUMA 
    DO BEGIN 
        INSERT INTO OTC_EL_EDIT(OPR_ID,TIP_SUMA,SUMA_ID,SUMA,P_NOMER) 
        VALUES(:R_OTC_OPR_ID,:L_TIP_SUMA,:L_SUMA_ID,:L_SUMA,:L_OTC_P_NOMER); 
    END 
END^


ALTER PROCEDURE OTC_MAX (
    P_OPR_ID INTEGER)
RETURNS (
    R_ID INTEGER)
AS
BEGIN 
    R_ID = NULL; 
    SELECT 
        OTC.OPR_ID 
    FROM 
        OPR INNER JOIN OTC ON OTC.ID = OPR.OTC_ID AND OPR.ID = :P_OPR_ID 
    INTO :R_ID; 
    IF (R_ID IS NULL) THEN 
        SELECT FIRST 1 
            OTC.OPR_ID 
        FROM 
            OTC 
        ORDER BY OTC.OPR_ID DESC 
        INTO 
            :R_ID; 
END^


ALTER PROCEDURE OUT_EL_UPDATE_FR (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_SUMA_FR DOUBLE PRECISION,
    P_SKLAD_ID INTEGER)
AS
DECLARE VARIABLE L_USLUGAORNOT CHAR(1);
BEGIN
/* V.4*/
    SELECT
        SIMPLE.USLUGA
    FROM
        SIMPLE
    WHERE
        SIMPLE.ID = :P_SIMPLE_ID
    INTO
        :L_USLUGAORNOT;

    IF (L_USLUGAORNOT <> '1') THEN
        UPDATE NAL SET
        NAL.SUMA_FR = ROUNDD(NAL.SUMA_FR - :P_SUMA_FR)
        WHERE NAL.SKLAD_ID = :P_SKLAD_ID
        AND NAL.SIMPLE_ID = :P_SIMPLE_ID;
END^


ALTER PROCEDURE OWNER_SEL (
    OPR_ID INTEGER,
    OWNER_BANKAID INTEGER)
RETURNS (
    ID SMALLINT,
    OWNER_NAME VARCHAR(50),
    OWNER_MOL VARCHAR(30),
    OWNER_ADRES VARCHAR(50),
    OWNER_BULSTAT VARCHAR(13),
    OWNER_IDNOMDDS VARCHAR(15),
    OWNER_LOGO BLOB SUB_TYPE 0 SEGMENT SIZE 1024,
    OWNER_BANKA VARCHAR(30),
    OWNER_BANK_SMETKA VARCHAR(30),
    OWNER_BANK_KOD VARCHAR(8))
AS
BEGIN 
IF (OWNER_BANKAID IS NOT NULL) THEN 
BEGIN 
SELECT 
  OWNER.ID, 
  OWNER.NAME AS OWNER_NAME, 
  OWNER.MOL AS OWNER_MOL, 
  OWNER.ADRES AS OWNER_ADRES, 
  OWNER.BULSTAT AS OWNER_BULSTAT, 
  OWNER.IDNOMDDS AS OWNER_IDNOMDDS, 
  OWNER.LOGO AS OWNER_LOGO, 
  OWNER_BANKI.BANKA AS OWNER_BANKA, 
  OWNER_BANKI.SMETKA AS OWNER_BANK_SMETKA, 
  OWNER_BANKI.KOD AS OWNER_BANK_KOD 
FROM 
  OPR 
  INNER JOIN FAK ON OPR.ID = FAK.OPR_ID 
  INNER JOIN FIRMI_FAK_DATA ON FIRMI_FAK_DATA.FAK_ID = FAK.ID 
  INNER JOIN OWNER ON OWNER.ID = FAK.OWNER_ID 
  LEFT JOIN OWNER_BANKI ON (OWNER_BANKI.ID = COALESCE(FIRMI_FAK_DATA.DEF_BANKA,:OWNER_BANKAID)) 
WHERE 
  OPR.ID = :OPR_ID 
INTO 
  :ID, 
  :OWNER_NAME, 
  :OWNER_MOL, 
  :OWNER_ADRES, 
  :OWNER_BULSTAT, 
  :OWNER_IDNOMDDS, 
  :OWNER_LOGO, 
  :OWNER_BANKA, 
  :OWNER_BANK_SMETKA, 
  :OWNER_BANK_KOD; 
 
SUSPEND; 
EXIT; 
END 
 
SELECT 
  OWNER.ID, 
  OWNER.NAME AS OWNER_NAME, 
  OWNER.MOL AS OWNER_MOL, 
  OWNER.ADRES AS OWNER_ADRES, 
  OWNER.BULSTAT AS OWNER_BULSTAT, 
  OWNER.IDNOMDDS AS OWNER_IDNOMDDS, 
  OWNER.LOGO AS OWNER_LOGO, 
  OWNER_BANKI.BANKA AS OWNER_BANKA, 
  OWNER_BANKI.SMETKA AS OWNER_BANK_SMETKA, 
  OWNER_BANKI.KOD AS OWNER_BANK_KOD 
FROM 
  OPR 
  INNER JOIN FAK ON OPR.ID = FAK.OPR_ID 
  INNER JOIN OWNER ON OWNER.ID = FAK.OWNER_ID 
  LEFT JOIN OWNER_BANKI ON (OWNER_BANKI.OWNER_ID = OWNER.ID AND OWNER_BANKI.ID =:OWNER_BANKAID) 
WHERE 
  OPR.ID = :OPR_ID 
INTO 
  :ID, 
  :OWNER_NAME, 
  :OWNER_MOL, 
  :OWNER_ADRES, 
  :OWNER_BULSTAT, 
  :OWNER_IDNOMDDS, 
  :OWNER_LOGO, 
  :OWNER_BANKA, 
  :OWNER_BANK_SMETKA, 
  :OWNER_BANK_KOD; 
 
  IF (OWNER_BANKA IS NOT NULL) THEN 
  BEGIN 
    SUSPEND; 
    EXIT; 
  END 
 
SELECT FIRST 1 
  OWNER.ID, 
  OWNER.NAME AS OWNER_NAME, 
  OWNER.MOL AS OWNER_MOL, 
  OWNER.ADRES AS OWNER_ADRES, 
  OWNER.BULSTAT AS OWNER_BULSTAT, 
  OWNER.IDNOMDDS AS OWNER_IDNOMDDS, 
  OWNER.LOGO AS OWNER_LOGO, 
  OWNER_BANKI.BANKA AS OWNER_BANKA, 
  OWNER_BANKI.SMETKA AS OWNER_BANK_SMETKA, 
  OWNER_BANKI.KOD AS OWNER_BANK_KOD 
FROM 
  OPR 
  INNER JOIN FAK ON OPR.ID = FAK.OPR_ID 
  INNER JOIN OWNER ON OWNER.ID = FAK.OWNER_ID 
  LEFT JOIN OWNER_BANKI ON (OWNER_BANKI.OWNER_ID = OWNER.ID) 
WHERE 
  OPR.ID = :OPR_ID 
INTO 
  :ID, 
  :OWNER_NAME, 
  :OWNER_MOL, 
  :OWNER_ADRES, 
  :OWNER_BULSTAT, 
  :OWNER_IDNOMDDS, 
  :OWNER_LOGO, 
  :OWNER_BANKA, 
  :OWNER_BANK_SMETKA, 
  :OWNER_BANK_KOD; 
 
 
  SUSPEND; 
 
END^


ALTER PROCEDURE PACK_OFFON_LOG
AS
DECLARE VARIABLE rid INTEGER;
DECLARE VARIABLE c_id INTEGER;
DECLARE VARIABLE g_id INTEGER;
begin
  /* Procedure Text */
  for
   select record_id from off_on_line_log
   where cmd='I'
  into :rid
  do
  begin
    delete from off_on_line_log
    where record_id=:rid and cmd='U' ;
  end
  for
   select record_id,id from off_on_line_log
   where cmd='U'
  into :rid,:c_id
  do
  begin
    delete from off_on_line_log
    where record_id=:rid and cmd='U' and id<>:c_id;
  end

  if (gen_id(gen_kli_id,0)>=0) then
  g_id= gen_id(gen_kli_id,-100000-gen_id(gen_kli_id,0));
  /*Наличностите ще си се появят от глобалната база тук са само временни и затова ги трием*/
  delete from nal where id<0;
  if (gen_id(gen_nal_id,0)>=0) then
  g_id= gen_id(gen_nal_id,-100000-gen_id(gen_nal_id,0));
  delete from nal2 where id<0;
  if (gen_id(gen_nal2_id,0)>=0) then
  g_id= gen_id(gen_nal2_id,-100000-gen_id(gen_nal2_id,0));
end^


ALTER PROCEDURE PARTIDA_DOST_FAST (
    P_OPR_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_SKLAD_ID SMALLINT; 
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
DECLARE VARIABLE L_PEN_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_PEN_SUMA_SR DOUBLE PRECISION; 
DECLARE VARIABLE L_PEN_SUMA_FR DOUBLE PRECISION; 
DECLARE VARIABLE L_PN_ID INTEGER; 
DECLARE VARIABLE L_RSN CHAR(1); 
DECLARE VARIABLE L_NAL_ID INTEGER; 
DECLARE VARIABLE L_OPR_TIP INTEGER; 
DECLARE VARIABLE L_UPDATE_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_UPDATE_SUMA_SR TYPE OF DOM_SUMA; 
BEGIN 
    SELECT 
        OPR.SKLAD_ID, 
        OPR.OPR_TIP 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :L_SKLAD_ID,:L_OPR_TIP; 
 
 
    L_UPDATE_SUMA_FR = 0.00; 
    L_UPDATE_SUMA_SR = 0.00; 
 
    FOR SELECT 
        IN_EL.SIMPLE_ID, 
        PEN.KOL, 
        PEN.SUMA_FR, 
        PEN.SUMA_SR, 
        PEN.PARTIDA_ID, 
        SIMPLE.RSN 
    FROM 
        IN_EL INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = IN_EL.ID 
        INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
    WHERE 
        IN_EL.OPR_ID = :P_OPR_ID 
    ORDER BY IN_EL.ID,PEN.ID 
    INTO 
        :L_SIMPLE_ID,:L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR,:L_PN_ID,:L_RSN 
    DO BEGIN 
        --ЗА ВСЕКИ ВХОД В ИСТОРИЯТА УВЕЛИЧАВАМЕ КОЛИЧЕСТВОТО И СУМАТА В ПАРТИДИ. ПРИ ДРУГИЯ ТИП ЗАПИС ТОВА СЕ ПРАВЕШЕ 
        --ОТ ПРОЦЕДУРИТЕ ЗА ПРЕИЗЧИСЛЕНИЕ И В БАЗАТА СЕ ЗАПИСВАТ 0.00 ПО ВРЕМЕ НА САМАТА ОПЕРАЦИЯ 
        L_PEN_KOL = ROUND(L_PEN_KOL,5); 
        L_PEN_SUMA_FR = ROUND(L_PEN_SUMA_FR,2); 
        L_PEN_SUMA_SR = ROUND(L_PEN_SUMA_SR,2); 
 
        UPDATE PARTIDA_NAL SET 
            KOL = :L_PEN_KOL, 
            SUMA_FR = :L_PEN_SUMA_FR 
        WHERE 
            ID = :L_PN_ID; 
 
        L_UPDATE_SUMA_FR = ROUND(L_UPDATE_SUMA_FR + L_PEN_SUMA_FR,2); 
        L_UPDATE_SUMA_SR = ROUND(L_UPDATE_SUMA_SR + L_PEN_SUMA_SR,2); 
 
 
        SELECT NAL.ID FROM NAL WHERE SIMPLE_ID = :L_SIMPLE_ID AND SKLAD_ID = :L_SKLAD_ID INTO :L_NAL_ID; 
 
        IF (L_NAL_ID IS NULL) THEN 
            INSERT INTO NAL(SIMPLE_ID,SKLAD_ID,KOL_NAL,SUMA,SUMA_FR) 
            VALUES(:L_SIMPLE_ID,:L_SKLAD_ID,0.00,0.00,0.00); 
 
        UPDATE NAL SET 
            KOL_NAL = ROUND(KOL_NAL + :L_PEN_KOL,5), 
            SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR,2), 
            SUMA = ROUND(SUMA + :L_PEN_SUMA_SR,2), 
            LAST_CENA = ROUND(:L_PEN_SUMA_SR / :L_PEN_KOL,5) 
        WHERE 
            SKLAD_ID = :L_SKLAD_ID 
            AND SIMPLE_ID = :L_SIMPLE_ID; 
 
        IF (L_RSN != '1') THEN BEGIN 
            --НЕ Е СЕРИЕН НОМЕР И ЩЕ СЕ КОРИГИРАТ ИЗЛИШЪЦИ 
 
            EXECUTE PROCEDURE PARTIDA_IN_IZL(:L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR,:P_OPR_ID,:L_SKLAD_ID, 
                :L_SIMPLE_ID,:L_PN_ID) 
            RETURNING_VALUES (:L_PEN_KOL, :L_PEN_SUMA_FR, :L_PEN_SUMA_SR); 
 
            UPDATE NAL SET 
                KOL_NAL = ROUND(KOL_NAL - :L_PEN_KOL, 5), 
                SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR, 2), 
                SUMA = ROUND(SUMA - :L_PEN_SUMA_SR, 2) 
            WHERE 
                SKLAD_ID = :L_SKLAD_ID 
                AND SIMPLE_ID = :L_SIMPLE_ID; 
        END 
 
        UPDATE TMP_SIMPLE_RECALC SET 
          TMP_SIMPLE_RECALC.FLAG_CALC = 2 
        WHERE 
          TMP_SIMPLE_RECALC.SIMPLE_ID = :L_SIMPLE_ID; 
    END 
 
    UPDATE OPR_SUMI SET 
        SUMA_FR = ROUND(:L_UPDATE_SUMA_FR,2), 
        SUMA_SR = ROUND(:L_UPDATE_SUMA_SR,2) 
    WHERE 
        OPR_SUMI.OPR_ID = :P_OPR_ID; 
 
    IF (L_OPR_TIP = 55) THEN 
        UPDATE SUMI SET 
            SUMA = ROUND(:L_UPDATE_SUMA_FR,2), 
            SUMA_OST = ROUND(:L_UPDATE_SUMA_FR,2) 
        WHERE 
            SUMI.OPR_ID = :P_OPR_ID; 
END^


ALTER PROCEDURE PARTIDA_HISTORY_NEW_PARTIDA (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_FLAG_IZL TYPE OF DOM_FLAG,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT = NULL,
    P_FLAG_LAST SMALLINT = 0)
RETURNS (
    R_RESULT TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_IS_FKT TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_OPR_DATE TYPE OF DOM_DATE; 
DECLARE VARIABLE L_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_IN_OUT TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_PN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PN_ELEMENT_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PEN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PEN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PEN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PEN_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_NAL_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_NAL_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_OUT_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_LAST_CENA TYPE OF DOM_CENA; 
DECLARE VARIABLE L_INV_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_INV_KOL_F TYPE OF DOM_KOL; 
DECLARE VARIABLE L_INV_CENA_F TYPE OF DOM_CENA; 
DECLARE VARIABLE L_FLAG_CHANGE_LAST_CENA TYPE OF DOM_CENA; 
DECLARE VARIABLE L_UPDATE_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_UPDATE_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_UPDATE_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_CENA_SR TYPE OF DOM_SUMA; 
BEGIN 
    --ПРИ РЕДАКЦИЯ ТРЯБВА ДА СЕ ВЪРНА ДО МОМЕНТА НА ПО-РАННАТА ОТ ДВЕТЕ ДАТИ, ЗА ДА ПРЕНАРЕДЯ ОТ ТАМ ДО КРАЯ 
    L_OPR_DATE = MINVALUE(COALESCE(P_NEW_OPR_DATE, CURRENT_DATE), COALESCE(P_OLD_OPR_DATE, CURRENT_DATE)); 
 
    IF (P_SKLAD_ID IS NULL) THEN BEGIN 
        SELECT FIRST 1 
            IIF (SYSTEM.H_SKLAD = OPR.SKLAD_ID, 1, 0) 
        FROM 
            SYSTEM,OPR 
        WHERE 
            OPR.ID = :P_OPR_ID 
        INTO 
            :L_IS_FKT; 
    END 
    ELSE BEGIN 
        SELECT FIRST 1 
            IIF (SYSTEM.H_SKLAD = :P_SKLAD_ID, 1, 0) 
        FROM 
            SYSTEM 
        INTO 
            :L_IS_FKT; 
    END 
 
    DELETE FROM TMP_PARTIDA_ORDER; 
 
    INSERT INTO TMP_PARTIDA_ORDER(ELEMENT_ID, OPR_ID, OPR_DATE, SIMPLE_ID) 
    SELECT 
        PN.ELEMENT_ID, 
        OPR.ID AS OPR_ID, 
        OPR.OPR_DATE, 
        IN_EL.SIMPLE_ID 
    FROM 
        PARTIDA_NAL PN INNER JOIN IN_EL ON IN_EL.ID = PN.IN_EL_ID 
        INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
    WHERE 
        OPR.OPR_TIP IN (1, 3, 12, 14, 22, 28, 33, 55, 77) 
        AND IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
        AND IN_EL.IS_F = :L_IS_FKT; 
 
    FOR SELECT 
        PH.R_KOL, 
        PH.R_EL_ID, 
        PH.R_OPR_ID, 
        PH.R_OPR_TIP, 
        PH.R_SKLAD_ID, 
        PH.R_OPR_DATE, 
        PH.R_IN_OUT, 
        IIF (:L_IS_FKT = 0, SKLAD.F_OTR_KOL, :P_FLAG_IZL) 
    FROM 
        PARTIDA_HISTORY_SUB_QUERY(:P_SIMPLE_ID, :P_OPR_ID, :L_OPR_DATE, :P_SKLAD_ID, :P_FLAG_LAST) PH 
        INNER JOIN SKLAD ON SKLAD.ID = PH.R_SKLAD_ID 
    ORDER BY R_OPR_DATE ASC, R_OPR_ID ASC 
    INTO 
        :L_KOL, :L_EL_ID, :L_OPR_ID, :L_OPR_TIP, :L_SKLAD_ID, :L_OPR_DATE, :L_IN_OUT, :P_FLAG_IZL 
    DO BEGIN 
        R_RESULT = L_OPR_ID; 
 
        IF (L_OPR_TIP = 3) THEN BEGIN 
        --ПРОВЕРКА ДАЛИ ТРЯБВА ДА ИМА IN ИЛИ OUT ЕЛЕМЕНТ. ПРОВЕРЯВА СЕ СЕГАШНОТО СЪСТОЯНИЕ 
        --И СЕ ОПРЕДЕЛЯ ДАЛИ ТРЯБВА ДА СЕ ТРИЕ НЕЩО И ДА СЕ СЪЗДАВА. СЛЕД КОЕТО ПРОДЪЛЖАВА 
            L_NAL_KOL = NULL; 
            L_NAL_SUMA_SR = NULL; 
 
            SELECT 
                TMP_NAL.KOL, 
                TMP_NAL.SUMA_SR 
            FROM 
                TMP_NAL 
            WHERE 
                TMP_NAL.SIMPLE_ID = :P_SIMPLE_ID 
                AND TMP_NAL.SKLAD_ID = :L_SKLAD_ID 
            INTO 
                :L_NAL_KOL, :L_NAL_SUMA_SR; 
 
            L_NAL_KOL = ROUND(COALESCE(L_NAL_KOL, 0.00), 5); 
            L_NAL_SUMA_SR = ROUND(COALESCE(L_NAL_SUMA_SR, 0.00), 2); 
            L_INV_ID = NULL; 
 
            SELECT 
                INV_OPIS.ID, 
                INV_OPIS.KOL_F, 
                INV_OPIS.CENA_F 
            FROM 
                INV_OPIS 
            WHERE 
                INV_OPIS.SIMPLE_ID = :P_SIMPLE_ID 
                AND INV_OPIS.OPR_ID = :L_OPR_ID 
            INTO 
                :L_INV_ID, :L_INV_KOL_F, :L_INV_CENA_F; 
 
            L_INV_CENA_F = ROUND(L_INV_CENA_F, 5); 
 
            IF (L_INV_ID IS NOT NULL) THEN BEGIN 
                IF (ROUND(L_NAL_KOL, 5) = ROUND(L_INV_KOL_F, 5)) THEN BEGIN 
                --ТЪРСЕНО = НА НАМЕРЕНОТО В ИНВ - НЯМА ДА ДОБАВЯ ИЛИ МАХА НЕЩО 
                --АКО ИМА ВХОД ИЛИ ИЗХОД КЪМ ТАЗИ ОПЕРАЦИЯ СЕ МАХА 
                    IF (L_IN_OUT = 0) THEN BEGIN 
                        --ИЗТРИВАМЕ В ИСТОРИЯТА НА ПАРТИДИТЕ 
                        EXECUTE PROCEDURE DEL_OUT_EL_FROM_INV(L_EL_ID); 
                    END 
                    ELSE IF (L_IN_OUT = 1) THEN BEGIN 
                        EXECUTE PROCEDURE DEL_IN_EL_FROM_INV(L_EL_ID); 
                    END 
                    L_IN_OUT = 2; --ДА НЕ СЕ ИЗЧИСЛЯВА ДОПЪЛНИТЕЛНО 
                END 
                ELSE IF (ROUND(L_NAL_KOL, 5) > ROUND(L_INV_KOL_F, 5)) THEN BEGIN 
                --НАЛИЧНОТО Е ПО-ГОЛЯМО ОТ НАМЕРЕНОТО - ЩЕ ИМА ИЗХОД 
                    L_KOL = ROUND(L_NAL_KOL - L_INV_KOL_F, 5); 
 
                    IF (L_IN_OUT = 0) THEN BEGIN 
                        UPDATE OUT_EL SET 
                            KOL = ROUND(:L_KOL, 5) 
                        WHERE 
                            ID = :L_EL_ID; 
                    END 
                    ELSE IF (L_IN_OUT = 1) THEN BEGIN 
                        EXECUTE PROCEDURE DEL_IN_EL_FROM_INV(L_EL_ID); 
 
                        INSERT INTO OUT_EL(SIMPLE_ID, OPR_ID, KOL, SUMA, SUMA_SR, SUMA_FR, IS_F) 
                        VALUES(:P_SIMPLE_ID,:L_OPR_ID, ROUND(:L_KOL, 5), 0.00, 0.00, 0.00, :L_IS_FKT) 
                        RETURNING ID INTO :L_EL_ID; 
                    END 
                    ELSE IF (L_IN_OUT = 2) THEN BEGIN 
                        INSERT INTO OUT_EL(SIMPLE_ID, OPR_ID, KOL, SUMA, SUMA_SR, SUMA_FR, IS_F) 
                        VALUES(:P_SIMPLE_ID, :L_OPR_ID, ROUND(:L_KOL, 5), 0.00, 0.00, 0.00, :L_IS_FKT) 
                        RETURNING ID INTO :L_EL_ID; 
                    END 
 
                    L_IN_OUT = 0;--ЩЕ СЕ ОБРАБОТИ ИЗХОД 
                END 
                ELSE IF (ROUND(L_NAL_KOL, 5) < ROUND(L_INV_KOL_F, 5)) THEN BEGIN 
                    L_KOL = ROUND(L_INV_KOL_F - IIF(L_NAL_KOL < 0.00, 0.00, L_NAL_KOL), 5); 
 
                    IF (L_IN_OUT = 0) THEN BEGIN 
                        EXECUTE PROCEDURE DEL_OUT_EL_FROM_INV(:L_EL_ID); 
 
                        IF (L_INV_KOL_F > 0.00) THEN BEGIN 
                            INSERT INTO IN_EL(SIMPLE_ID,OPR_ID,KOL,SUMA_SR,SUMA_FR,IS_F) 
                            VALUES(:P_SIMPLE_ID, :L_OPR_ID, ROUND(:L_KOL, 5), ROUND(:L_KOL * :L_INV_CENA_F, 2), ROUND(:L_KOL * :L_INV_CENA_F, 2), :L_IS_FKT) 
                            RETURNING ID INTO :L_EL_ID; 
 
                            INSERT INTO PARTIDA_EL (SROK) VALUES(NULL) 
                            RETURNING ID INTO :L_PN_ELEMENT_ID; 
 
                            INSERT INTO PARTIDA_NAL(IN_EL_ID, ELEMENT_ID, KOL, SUMA_FR, SIMPLE_ID, SKLAD_ID) 
                            VALUES (:L_EL_ID, :L_PN_ELEMENT_ID, 0.00, 0.00, :P_SIMPLE_ID, :L_SKLAD_ID) 
                            RETURNING ID INTO :L_PN_ID; 
 
                            INSERT INTO PARTIDA_EL_NODE(PARTIDA_ID, KOL, SUMA_SR, SUMA_FR, OPR_ID) 
                            VALUES (:L_PN_ID, ROUND(:L_KOL,5), ROUND(:L_KOL * :L_INV_CENA_F, 2), ROUND(:L_KOL * :L_INV_CENA_F, 2), :L_OPR_ID) 
                            RETURNING ID INTO :L_PEN_ID; 
 
                            INSERT INTO PARTIDA_IN_EL_NODE(IN_EL_ID, PARTIDA_NODE_ID) 
                            VALUES (:L_EL_ID, :L_PEN_ID); 
 
                            INSERT INTO TMP_PARTIDA_ORDER(ELEMENT_ID, OPR_ID, OPR_DATE, SIMPLE_ID) 
                            VALUES(:L_PN_ELEMENT_ID, :L_OPR_ID, :L_OPR_DATE, :P_SIMPLE_ID); 
 
                            L_IN_OUT = 1; 
                        END 
                    END 
                    ELSE IF (L_IN_OUT = 1) THEN BEGIN 
                        IF (L_INV_KOL_F > 0.00) THEN BEGIN 
                            UPDATE IN_EL SET 
                                KOL = ROUND(:L_KOL, 5), 
                                SUMA_FR = ROUND(:L_KOL * :L_INV_CENA_F, 2), 
                                SUMA_SR = ROUND(:L_KOL * :L_INV_CENA_F, 2) 
                            WHERE 
                                ID = :L_EL_ID; 
 
                            SELECT FIRST 1 
                                PEN.ID 
                            FROM 
                                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = :L_EL_ID 
                                AND PIN.PARTIDA_NODE_ID = PEN.ID 
                            INTO 
                                :L_PEN_ID; 
 
                            UPDATE PARTIDA_EL_NODE SET 
                                KOL = ROUND(:L_KOL, 5), 
                                SUMA_FR = ROUND(:L_KOL * :L_INV_CENA_F, 2), 
                                SUMA_SR = ROUND(:L_KOL * :L_INV_CENA_F, 2) 
                            WHERE 
                                ID = :L_PEN_ID; 
 
                            FOR SELECT 
                                PEN.ID 
                            FROM 
                                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = :L_EL_ID 
                                AND PIN.PARTIDA_NODE_ID = PEN.ID AND PEN.ID <> :L_PEN_ID 
                            INTO 
                                :L_PEN_ID 
                            DO 
                                DELETE FROM PARTIDA_EL_NODE WHERE ID = :L_PEN_ID; 
                        END 
                        ELSE BEGIN 
                            EXECUTE PROCEDURE DEL_IN_EL_FROM_INV(L_EL_ID); 
                            L_IN_OUT = 2;--ДА НЕ СЕ ИЗЧИСЛЯВА ДОПЪЛНИТЕЛНО 
                        END 
                    END 
                    ELSE IF (L_IN_OUT = 2) THEN BEGIN 
                        INSERT INTO IN_EL(SIMPLE_ID, OPR_ID, KOL, SUMA_SR, SUMA_FR, IS_F) 
                        VALUES(:P_SIMPLE_ID, :L_OPR_ID, ROUND(:L_KOL, 5), ROUND(:L_KOL * :L_INV_CENA_F, 2), ROUND(:L_KOL * :L_INV_CENA_F, 2), :L_IS_FKT) 
                        RETURNING ID INTO :L_EL_ID; 
 
                        INSERT INTO PARTIDA_EL (SROK) VALUES(NULL) 
                        RETURNING ID INTO :L_PN_ELEMENT_ID; 
 
                        INSERT INTO PARTIDA_NAL(IN_EL_ID, ELEMENT_ID, KOL, SUMA_FR, SIMPLE_ID, SKLAD_ID) 
                        VALUES (:L_EL_ID, :L_PN_ELEMENT_ID, 0.00, 0.00, :P_SIMPLE_ID, :L_SKLAD_ID) 
                        RETURNING ID INTO :L_PN_ID; 
 
                        INSERT INTO PARTIDA_EL_NODE(PARTIDA_ID, KOL, SUMA_SR, SUMA_FR, OPR_ID) 
                        VALUES (:L_PN_ID, ROUND(:L_KOL, 5), ROUND(:L_KOL * :L_INV_CENA_F, 2), ROUND(:L_KOL * :L_INV_CENA_F, 2), :L_OPR_ID) 
                        RETURNING ID INTO :L_PEN_ID; 
 
                        INSERT INTO PARTIDA_IN_EL_NODE(IN_EL_ID, PARTIDA_NODE_ID) 
                        VALUES (:L_EL_ID, :L_PEN_ID); 
 
                        INSERT INTO TMP_PARTIDA_ORDER(ELEMENT_ID, OPR_ID, OPR_DATE, SIMPLE_ID) 
                        VALUES(:L_PN_ELEMENT_ID, :L_OPR_ID, :L_OPR_DATE, :P_SIMPLE_ID); 
                    END 
 
                    IF (L_INV_KOL_F > 0.00) THEN BEGIN 
                        UPDATE OR INSERT INTO INV_IZL (IN_EL_ID, KOL, KOL_IZL, ED_CENA) 
                        VALUES (:L_EL_ID, ROUND(:L_KOL, 5), ROUND(:L_KOL,5), ROUND(:L_INV_CENA_F, 5)) 
                        MATCHING (IN_EL_ID); 
 
                        L_IN_OUT = 1;--ЩЕ СЕ ОБРАБОТИ ВХОД 
                    END 
                END 
 
                IF (L_NAL_KOL <= 0.00) THEN BEGIN 
                    SELECT 
                        COALESCE(TMP_NAL.LAST_CENA, 0.00) 
                    FROM 
                        TMP_NAL 
                    WHERE 
                        TMP_NAL.SIMPLE_ID = :P_SIMPLE_ID 
                        AND TMP_NAL.SKLAD_ID = :L_SKLAD_ID 
                    INTO 
                        :L_NAL_SUMA_SR; 
 
                    SELECT 
                        -SUM(IZL.KOL_IZL) 
                    FROM 
                        IZL INNER JOIN OUT_EL ON OUT_EL.ID = IZL.OUT_EL_ID AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
                        INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.SKLAD_ID = :L_SKLAD_ID 
                    WHERE 
                        IZL.FLAG_LOCK_KOR = 0 
                    INTO 
                        :L_NAL_KOL; 
                END 
                ELSE BEGIN 
                    L_NAL_SUMA_SR = ROUND(L_NAL_SUMA_SR / L_NAL_KOL, 5); 
                END 
 
                UPDATE INV_OPIS SET 
                    KOL_S = ROUND(COALESCE(:L_NAL_KOL, 0.00), 5), 
                    CENA_S = ROUND(:L_NAL_SUMA_SR, 5) 
                WHERE 
                    ID = :L_INV_ID; 
            END 
 
            FOR SELECT 
                OUT_EL.ID 
            FROM 
                OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.SKLAD_ID = :L_SKLAD_ID 
                AND ((OPR.OPR_DATE < :L_OPR_DATE) OR (OPR.OPR_DATE = :L_OPR_DATE AND OPR.ID < :L_OPR_ID)) 
                INNER JOIN IZL ON IZL.OUT_EL_ID = OUT_EL.ID AND IZL.FLAG_LOCK_KOR = 0 
                AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
            INTO 
                :L_OUT_EL_ID 
            DO BEGIN 
                UPDATE IZL SET 
                    FLAG_LOCK_KOR = 1 
                WHERE 
                    OUT_EL_ID = :L_OUT_EL_ID; 
            END 
        END 
 
        L_UPDATE_KOL = 0.00; 
        L_UPDATE_SUMA_FR = 0.00; 
        L_UPDATE_SUMA_SR = 0.00; 
 
        IF (L_IN_OUT = 0) THEN BEGIN --ИЗХОД ОТ СКЛАДА 
            SELECT 
                TMP_NAL.KOL, 
                TMP_NAL.SUMA_SR 
            FROM 
                TMP_NAL 
            WHERE 
                SIMPLE_ID = :P_SIMPLE_ID 
                AND SKLAD_ID = :L_SKLAD_ID 
            INTO 
                :L_NAL_KOL, :L_NAL_SUMA_SR; 
 
            IF (L_OPR_TIP = 56) THEN BEGIN 
                --ВРЪЩАНЕ НА АМБАЛАЖ КЪМ ДОСТАВЧИК 
                EXECUTE PROCEDURE RETURN_DOST_AMBALAJ(:L_OPR_ID, :L_SKLAD_ID, :L_EL_ID, :L_KOL) 
                RETURNING_VALUES :R_RESULT; 
                IF (R_RESULT <> 0) THEN BEGIN 
                    R_RESULT = L_OPR_ID; 
                    EXIT; 
                END 
                ELSE 
                    R_RESULT = L_OPR_ID; 
            END 
            ELSE BEGIN 
 
                FOR SELECT DISTINCT 
                    PN.ID, 
                    PN.KOL, 
                    PN.SUMA_FR 
                FROM 
                    PARTIDA_NAL PN INNER JOIN TMP_PARTIDA_ORDER VPI ON VPI.ELEMENT_ID = PN.ELEMENT_ID AND PN.SKLAD_ID = :L_SKLAD_ID 
                WHERE 
                    IIF(PN.KOL > 0.00, IN_EL_ID, NULL) > 0 
                    ORDER BY VPI.OPR_DATE, VPI.OPR_ID, PN.IN_EL_ID 
                INTO 
                    :L_PN_ID, :L_PN_KOL, :L_PN_SUMA_FR 
                DO BEGIN 
                    IF (L_PN_KOL > L_KOL) THEN BEGIN 
                        L_PEN_KOL = ROUND(L_KOL, 5); 
                        L_PEN_SUMA_FR = ROUND(ROUND(L_PN_SUMA_FR / L_PN_KOL,5) * L_PEN_KOL, 2); 
                    END 
                    ELSE BEGIN 
                        L_PEN_KOL = ROUND(L_PN_KOL, 5); 
                        L_PEN_SUMA_FR = ROUND(L_PN_SUMA_FR, 2); 
                    END 
 
                    IF (L_NAL_KOL > L_PEN_KOL) THEN BEGIN 
                        L_PEN_SUMA_SR = ROUND(ROUND(L_NAL_SUMA_SR / L_NAL_KOL, 5) * L_PEN_KOL, 2); 
                    END 
                    ELSE BEGIN 
                        L_PEN_SUMA_SR = ROUND(L_NAL_SUMA_SR, 2); 
                    END 
 
                    INSERT INTO PARTIDA_EL_NODE(PARTIDA_ID,KOL,SUMA_FR,SUMA_SR,OPR_ID) 
                    VALUES (:L_PN_ID, ROUND(:L_PEN_KOL, 5), ROUND(:L_PEN_SUMA_FR, 2), ROUND(:L_PEN_SUMA_SR, 2), :L_OPR_ID) 
                    RETURNING ID INTO :L_PEN_ID; 
 
                    INSERT INTO PARTIDA_OUT_EL_NODE(PARTIDA_NODE_ID, OUT_EL_ID) 
                    VALUES (:L_PEN_ID, :L_EL_ID); 
 
                    UPDATE PARTIDA_NAL SET 
                        KOL = ROUND(KOL - :L_PEN_KOL, 5), 
                        SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR, 2) 
                    WHERE 
                        ID = :L_PN_ID; 
 
                    L_KOL = ROUND(L_KOL - L_PEN_KOL, 5); 
                    L_NAL_KOL = ROUND(L_NAL_KOL - L_PEN_KOL, 5); 
                    L_NAL_SUMA_SR = ROUND(L_NAL_SUMA_SR - L_PEN_SUMA_SR, 2); 
 
                    L_UPDATE_KOL = ROUND(L_UPDATE_KOL + :L_PEN_KOL, 5); 
                    L_UPDATE_SUMA_FR = ROUND(L_UPDATE_SUMA_FR + :L_PEN_SUMA_FR, 2); 
                    L_UPDATE_SUMA_SR = ROUND(L_UPDATE_SUMA_SR + :L_PEN_SUMA_SR, 2); 
 
                    IF (ROUND(L_KOL, 5) <= 0.00) THEN 
                        LEAVE; 
                END 
 
                IF (ROUND(L_KOL, 5) > 0.00) THEN BEGIN 
                    --ИМА НЯКАКВО НЕРАЗПРЕДЕЛЕНО КОЛ. ИЛИ НЯМА ЗАПАЗЕНИ КОЛИЧЕСТВА 
                    --ИЛИ ОПЕРАЦИЯТА НЕ МОЖЕ ДА ИЗПЛЗВА ЗАПАЗЕНИТЕ И ЩЕ СЕ ГЕНЕРИРА 
                    --ЗИЛИШЪК. ПРАВИ СЕ ПРОВЕРКА ДАЛИ МОЖЕ - АКО НЕ ИЗХОД. 
                    IF ((L_OPR_TIP IN (3, 9, 11, 28, 46, 48, 57)) OR (P_FLAG_IZL = 0)) THEN BEGIN 
                    --НЕ ДОСТИГА КОЛИЧЕСТВО, А ОПЕРАЦИЯТА НЕ МОЖЕ ДА ИМА ИЗЛИШЪК 
                        EXIT; 
                    END 
                    ELSE BEGIN 
 
                        SELECT 
                            TMP_NAL.LAST_CENA 
                        FROM 
                            TMP_NAL 
                        WHERE 
                            SKLAD_ID = :L_SKLAD_ID 
                            AND SIMPLE_ID = :P_SIMPLE_ID 
                        INTO 
                            :L_LAST_CENA; 
 
                        INSERT INTO IZL (KOL, OUT_EL_ID, LAST_CENA, FLAG_LOCK_KOR, SIMPLE_ID, SKLAD_ID) 
                        VALUES (ROUND(:L_KOL, 5), :L_EL_ID, ROUND(:L_LAST_CENA, 5), 0, :P_SIMPLE_ID, :L_SKLAD_ID); 
                    END 
                END 
 
                UPDATE TMP_NAL SET 
                    KOL = ROUND(KOL - :L_UPDATE_KOL, 5), 
                    SUMA_SR = ROUND(SUMA_SR - :L_UPDATE_SUMA_SR, 2), 
                    SUMA_FR = ROUND(SUMA_FR - :L_UPDATE_SUMA_FR, 2) 
                WHERE 
                    SIMPLE_ID = :P_SIMPLE_ID 
                    AND SKLAD_ID = :L_SKLAD_ID; 
 
                UPDATE OUT_EL SET 
                    SUMA_FR = ROUND(:L_UPDATE_SUMA_FR, 2), 
                    SUMA_SR = ROUND(:L_UPDATE_SUMA_SR, 2) 
                WHERE 
                    ID = :L_EL_ID; 
 
                UPDATE OPR_SUMI SET 
                    SUMA_FR = ROUND(SUMA_FR + :L_UPDATE_SUMA_FR, 2), 
                    SUMA_SR = ROUND(SUMA_SR + :L_UPDATE_SUMA_SR, 2) 
                WHERE 
                    OPR_ID = :L_OPR_ID; 
 
                IF (L_OPR_TIP = 57) THEN 
                    UPDATE SUMI SET 
                        SUMI.SUMA = ROUND(SUMI.SUMA + :L_UPDATE_SUMA_FR, 2), 
                        SUMI.SUMA_OST = ROUND(SUMI.SUMA_OST + :L_UPDATE_SUMA_FR, 2) 
                    WHERE 
                        SUMI.OPR_ID = :L_OPR_ID; 
            END 
        END 
        ELSE IF (L_IN_OUT = 1) THEN BEGIN --ВХОД ОТ СКЛАДА 
            L_FLAG_CHANGE_LAST_CENA = 1; 
            IF (L_OPR_TIP IN (4, 46, 48)) THEN BEGIN 
                SELECT SKLAD.F_MOVE_CENA FROM SKLAD WHERE SKLAD.ID = :L_SKLAD_ID INTO :L_FLAG_CHANGE_LAST_CENA; 
                IF (L_OPR_TIP = 4) THEN 
                    SELECT 
                        OUT_EL_ID 
                    FROM 
                        OPR_RAZPAD_NODE 
                    WHERE 
                        IN_EL_ID = :L_EL_ID 
                    INTO 
                        :L_OUT_EL_ID; 
                ELSE 
                --ПРИ ДААНЕ И ВРЪЩАНЕ НА КОСИГНАЦИЯ ЕДИН И СЪЩИ IN_EL ИМА 2 ВРЪЗКИ В ТАБЛИЦАТА. 
                --ЗАТОВА ФИЛТРИРАМ ПО ТИПА НА ОПЕРАЦИЯ. ТЕ СА ЕДНАКВИ ЗА ДВАТА СКЛАДА (46-46; 48-48) 
                --НЕ КАТО ПРЕХВЪРЛЯНЕ (9-4) 
                    SELECT 
                        ORN.OUT_EL_ID 
                    FROM 
                        OPR_RAZPAD_NODE ORN INNER JOIN OUT_EL ON ORN.OUT_EL_ID = OUT_EL.ID 
                        INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.OPR_TIP = :L_OPR_TIP 
                    WHERE 
                        ORN.IN_EL_ID = :L_EL_ID 
                    INTO 
                        :L_OUT_EL_ID; 
 
                FOR SELECT 
                    PEN.KOL, 
                    PEN.SUMA_FR, 
                    PEN.SUMA_SR, 
                    PN.ELEMENT_ID 
                FROM 
                    PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = :L_OUT_EL_ID 
                    AND PEN.ID = PON.PARTIDA_NODE_ID 
                    INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
                ORDER BY PEN.ID 
                INTO 
                    :L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR,:L_PN_ELEMENT_ID 
                DO BEGIN 
                    L_PN_ID = NULL; 
                    SELECT 
                        ID 
                    FROM 
                        PARTIDA_NAL 
                    WHERE 
                        IN_EL_ID = :L_EL_ID 
                        AND ELEMENT_ID = :L_PN_ELEMENT_ID 
                    INTO 
                        :L_PN_ID; 
 
                    IF (L_PN_ID IS NULL) THEN 
                        INSERT INTO PARTIDA_NAL (IN_EL_ID, ELEMENT_ID, KOL, SUMA_FR, SIMPLE_ID, SKLAD_ID) 
                        VALUES(:L_EL_ID, :L_PN_ELEMENT_ID, ROUND(0.00, 5), ROUND(0.00, 2), :P_SIMPLE_ID, :L_SKLAD_ID) 
                        RETURNING ID INTO :L_PN_ID; 
 
                    INSERT INTO PARTIDA_EL_NODE(OPR_ID, PARTIDA_ID, KOL, SUMA_FR, SUMA_SR) 
                    VALUES(:L_OPR_ID, :L_PN_ID, ROUND(:L_PEN_KOL,5), ROUND(:L_PEN_SUMA_FR, 2), ROUND(:L_PEN_SUMA_SR, 2)) 
                    RETURNING ID INTO :L_PEN_ID; 
 
                    INSERT INTO PARTIDA_IN_EL_NODE(IN_EL_ID, PARTIDA_NODE_ID) 
                    VALUES(:L_EL_ID, :L_PEN_ID); 
 
                    UPDATE PARTIDA_NAL SET 
                        KOL = ROUND(KOL + :L_PEN_KOL, 5), 
                        SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR, 2) 
                    WHERE 
                        ID = :L_PN_ID; 
                END 
            END 
            ELSE IF (L_OPR_TIP IN (26, 41)) THEN BEGIN 
                --ВРЪЩАНЕ ИЛИ КРЕДИТНО ОТ КЛИЕНТ 
                --АКО ИМА ИЗЛИШЪЦИ И ОПР Е СЛЕД ИНВ НАЛ. КОЛ. СЕ УВЕЛИЧАВА САМО С ТОВА НА РЕАЛНО ВЪРНАТИТЕ ПАРТИДИ 
                --АКО НЯМА ИНВ НАЛ СЕ УВЕЛИЧАВА С КОЛИЧЕСТВОТО НА ВРЪЩАНОТО 
                EXECUTE PROCEDURE PARTIDA_HISTORY_RETURN_PROD(L_EL_ID, L_KOL, L_OPR_ID) 
                RETURNING_VALUES :L_KOL; 
                L_FLAG_CHANGE_LAST_CENA = 0; 
            END 
            ELSE IF (L_OPR_TIP = 58) THEN BEGIN 
                EXECUTE PROCEDURE PARTIDA_HISTORY_RETURN_PR_AMBL(:L_EL_ID, :L_KOL, :L_OPR_ID) 
                RETURNING_VALUES :L_KOL, :R_RESULT; 
                IF (R_RESULT = 1) THEN BEGIN 
                    R_RESULT = L_OPR_ID; 
                    EXIT; 
                END 
                L_FLAG_CHANGE_LAST_CENA = 0; 
 
            END 
            ELSE BEGIN 
                IF (L_OPR_TIP IN (33, 77)) THEN BEGIN 
                    EXECUTE PROCEDURE PROIZVODSTVO_NO_SN(L_EL_ID); 
                END 
                ELSE IF (L_OPR_TIP = 28) THEN BEGIN 
                    EXECUTE PROCEDURE RAZPAD_CALC(L_EL_ID); 
                END 
 
                FOR SELECT 
                    PEN.KOL, 
                    PEN.SUMA_FR, 
                    PEN.SUMA_SR, 
                    PEN.PARTIDA_ID 
                FROM 
                    PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = :L_EL_ID 
                    AND PIN.PARTIDA_NODE_ID = PEN.ID 
                INTO 
                    :L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR,:L_PN_ID 
                DO BEGIN 
                    UPDATE PARTIDA_NAL SET 
                        KOL = ROUND(KOL + :L_PEN_KOL, 5), 
                        SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR, 2) 
                    WHERE 
                        ID = :L_PN_ID; 
                END 
            END 
 
            SELECT 
                SUM(PEN.KOL), 
                SUM(PEN.SUMA_FR), 
                SUM(PEN.SUMA_SR) 
            FROM 
                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = :L_EL_ID 
                AND PIN.PARTIDA_NODE_ID = PEN.ID 
            INTO 
                :L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR; 
 
            L_PEN_SUMA_FR = ROUND(COALESCE(L_PEN_SUMA_FR,0.00), 2); 
            L_PEN_SUMA_SR = ROUND(COALESCE(L_PEN_SUMA_SR, 0.00), 2); 
            L_PEN_KOL     = ROUND(COALESCE(L_PEN_KOL, 0.00), 5); 
 
            UPDATE IN_EL SET 
                SUMA_FR = ROUND(:L_PEN_SUMA_FR, 2), 
                SUMA_SR = ROUND(:L_PEN_SUMA_SR, 2) 
            WHERE ID = :L_EL_ID; 
 
            IF (L_OPR_TIP != 28) THEN 
                UPDATE OPR_SUMI SET 
                    SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR, 2), 
                    SUMA_SR = ROUND(SUMA_SR + :L_PEN_SUMA_SR, 2) 
                WHERE OPR_ID = :L_OPR_ID; 
 
            IF (L_OPR_TIP = 55) THEN 
                UPDATE SUMI SET 
                    SUMI.SUMA = ROUND(SUMI.SUMA + :L_PEN_SUMA_FR, 2), 
                    SUMI.SUMA_OST = ROUND(SUMI.SUMA_OST + :L_PEN_SUMA_FR, 2) 
                WHERE 
                    SUMI.OPR_ID = :L_OPR_ID; 
 
            IF (L_FLAG_CHANGE_LAST_CENA = 1) THEN 
                UPDATE TMP_NAL SET 
                    KOL = ROUND(KOL + :L_PEN_KOL, 5), 
                    SUMA_SR = ROUND(SUMA_SR + :L_PEN_SUMA_SR, 2), 
                    SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR, 2), 
                    LAST_CENA = ROUND(IIF(:L_PEN_KOL > 0.00,:L_PEN_SUMA_SR / :L_PEN_KOL, LAST_CENA), 5) 
                WHERE 
                    SIMPLE_ID = :P_SIMPLE_ID 
                    AND SKLAD_ID = :L_SKLAD_ID; 
            ELSE 
                UPDATE TMP_NAL SET 
                    KOL = ROUND(KOL + :L_PEN_KOL,5), 
                    SUMA_SR = ROUND(SUMA_SR + :L_PEN_SUMA_SR,2), 
                    SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR,2) 
                WHERE 
                    SIMPLE_ID = :P_SIMPLE_ID 
                    AND SKLAD_ID = :L_SKLAD_ID; 
 
            SELECT 
                TMP_NAL.KOL, 
                TMP_NAL.SUMA_SR 
            FROM 
                TMP_NAL 
            WHERE 
                SIMPLE_ID = :P_SIMPLE_ID 
                AND SKLAD_ID = :L_SKLAD_ID 
            INTO 
                :L_NAL_KOL, :L_NAL_SUMA_SR; 
 
            IF (L_NAL_KOL > 0.00) THEN 
                L_NAL_SUMA_SR = ROUND(L_NAL_SUMA_SR / L_NAL_KOL,5); 
            ELSE 
                L_NAL_SUMA_SR = 0.00; 
 
            FOR SELECT 
                PEN.KOL, 
                PEN.SUMA_FR, 
                PEN.PARTIDA_ID 
            FROM 
                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = :L_EL_ID 
                AND PEN.ID = PIN.PARTIDA_NODE_ID 
            ORDER BY PEN.ID 
            INTO 
                :L_PEN_KOL,:L_PEN_SUMA_FR,:L_PN_ID 
            DO BEGIN 
                EXECUTE PROCEDURE PARTIDA_IN_IZL(L_PEN_KOL,L_PEN_SUMA_FR,ROUND(L_NAL_SUMA_SR * L_PEN_KOL,2), 
                L_OPR_ID,L_SKLAD_ID,P_SIMPLE_ID,L_PN_ID) 
                RETURNING_VALUES (:L_PEN_KOL, :L_PEN_SUMA_FR, :L_PEN_SUMA_SR); 
 
                UPDATE TMP_NAL SET 
                    KOL = ROUND(KOL - :L_PEN_KOL, 5), 
                    SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR, 2), 
                    SUMA_SR = ROUND(SUMA_SR - :L_PEN_SUMA_SR, 2) 
                WHERE 
                    TMP_NAL.SKLAD_ID = :L_SKLAD_ID 
                    AND TMP_NAL.SIMPLE_ID = :P_SIMPLE_ID; 
            END 
        END 
    END 
 
    R_RESULT = 0; 
 
    UPDATE TMP_SIMPLE_RECALC SET 
        FLAG_CALC = 2 
    WHERE 
        SIMPLE_ID = :P_SIMPLE_ID; 
 
    MERGE INTO NAL 
    USING 
        TMP_NAL 
    ON 
        TMP_NAL.SIMPLE_ID = NAL.SIMPLE_ID AND NAL.SKLAD_ID = TMP_NAL.SKLAD_ID 
    WHEN MATCHED THEN UPDATE SET 
        KOL_NAL = ROUND(TMP_NAL.KOL, 5), 
        SUMA = ROUND(TMP_NAL.SUMA_SR, 2), 
        SUMA_FR = ROUND(TMP_NAL.SUMA_FR, 2), 
        LAST_CENA = ROUND(TMP_NAL.LAST_CENA, 5); 
END^


ALTER PROCEDURE PARTIDA_HISTORY_NEW_PARTIDA_SN (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT = NULL,
    P_FLAG_LAST TYPE OF DOM_SMAL_INT = 0)
RETURNS (
    R_RESULT TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_OPR_DATE TYPE OF DOM_DATE; 
DECLARE VARIABLE L_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_IN_OUT TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_PN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PN_ELEMENT_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PEN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PEN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PEN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PEN_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_NAL_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_NAL_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_OUT_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_INV_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_INV_KOL_S TYPE OF DOM_KOL; 
DECLARE VARIABLE L_INV_KOL_F TYPE OF DOM_KOL; 
DECLARE VARIABLE L_RETURN_RESULT TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_LAST_CENA TYPE OF DOM_CENA; 
DECLARE VARIABLE L_UPDATE_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_UPDATE_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_UPDATE_SUMA_SR TYPE OF DOM_SUMA; 
BEGIN 
    --ПРИ РЕДАКЦИЯ ТРЯБВА ДА СЕ ВЪРНА ДО МОМЕНТА НА ПО-РАННАТА ОТ ДВЕТЕ ДАТИ, ЗА ДА ПРЕНАРЕДЯ ОТ ТАМ ДО КРАЯ 
    L_OPR_DATE = MINVALUE(COALESCE(P_NEW_OPR_DATE, CURRENT_DATE), COALESCE(P_OLD_OPR_DATE, CURRENT_DATE)); 
 
    FOR SELECT 
        PH.R_KOL, 
        PH.R_EL_ID, 
        PH.R_OPR_ID, 
        PH.R_OPR_TIP, 
        PH.R_SKLAD_ID, 
        PH.R_OPR_DATE, 
        PH.R_IN_OUT 
    FROM 
        PARTIDA_HISTORY_SUB_QUERY(:P_SIMPLE_ID, :P_OPR_ID, :L_OPR_DATE, :P_SKLAD_ID, :P_FLAG_LAST) PH 
    ORDER BY R_OPR_DATE ASC, R_OPR_ID ASC 
    INTO 
        :L_KOL,:L_EL_ID,:L_OPR_ID,:L_OPR_TIP,:L_SKLAD_ID,:L_OPR_DATE,:L_IN_OUT 
    DO BEGIN 
        R_RESULT = L_OPR_ID; 
 
        IF (L_OPR_TIP = 3) THEN BEGIN 
        --ПРОВЕРКА ДАЛИ ТРЯБВА ДА ИМА IN ИЛИ OUT ЕЛЕМЕНТ. ПРОВЕРЯВА СЕ СЕГАШНОТО СЪСТОЯНИЕ 
        --И СЕ ОПРЕДЕЛЯ ДАЛИ ТРЯБВА ДА СЕ ТРИЕ НЕЩО И ДА СЕ СЪЗДАВА. СЛЕД КОЕТО ПРОДЪЛЖАВА 
 
            SELECT 
                TMP_NAL.KOL 
            FROM 
                TMP_NAL 
            WHERE 
                TMP_NAL.SIMPLE_ID = :P_SIMPLE_ID 
                AND TMP_NAL.SKLAD_ID = :L_SKLAD_ID 
            INTO 
                :L_NAL_KOL; 
 
            L_NAL_KOL = ROUND(COALESCE(L_NAL_KOL, 0.00), 5); 
            L_INV_ID = NULL; 
 
            SELECT 
                INV_OPIS.ID, 
                INV_OPIS.KOL_S, 
                INV_OPIS.KOL_F 
            FROM 
                INV_OPIS 
            WHERE 
                INV_OPIS.SIMPLE_ID = :P_SIMPLE_ID 
                AND INV_OPIS.OPR_ID = :L_OPR_ID 
            INTO 
                :L_INV_ID, :L_INV_KOL_S, :L_INV_KOL_F; 
 
            IF (L_INV_ID IS NOT NULL) THEN BEGIN 
                IF (ROUND(L_INV_KOL_S, 5) != ROUND(L_NAL_KOL, 5)) THEN 
                    EXIT;--ИМА РАЗЛИКИ ПО ТЪРСЕНОТО НА ИНВЕНТАРИЗАЦИЯ ПРЕДИШНИ ПЪТ И СЕГА 
                    --ПОНЕЖЕ НЕ МОЖЕ ДА СЕ СЛАГАТ И МАХАТ СН КАКТО ДОЙДЕ СЕ СПИРА ОПЕРАЦИЯТА 
                    --ВСИЧКО ОСТАНАЛО - ВХОД/ИЗХОД СЕ ОБРАБОТВА ДОЛУ ПО НОРМЛАНИЯ НАЧИН 
            END 
 
            MERGE INTO IZL 
            USING ( 
                SELECT 
                    OUT_EL.ID 
                FROM 
                    OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.SKLAD_ID = :L_SKLAD_ID 
                    AND ((OPR.OPR_DATE < :L_OPR_DATE) OR (OPR.OPR_DATE = :L_OPR_DATE AND OPR.ID < :L_OPR_ID)) 
                    INNER JOIN IZL ON IZL.OUT_EL_ID = OUT_EL.ID AND IZL.FLAG_LOCK_KOR = 0 AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID) TMP 
            ON TMP.ID = IZL.OUT_EL_ID 
            WHEN MATCHED THEN 
                UPDATE SET FLAG_LOCK_KOR = 1; 
 
        END 
 
        L_UPDATE_KOL = 0.00; 
        L_UPDATE_SUMA_FR = 0.00; 
        L_UPDATE_SUMA_SR = 0.00; 
 
        IF (L_IN_OUT = 0) THEN BEGIN --ИЗХОД ОТ СКЛАДА 
            SELECT 
                TMP_NAL.KOL, 
                TMP_NAL.SUMA_SR 
            FROM 
                TMP_NAL 
            WHERE 
                SIMPLE_ID = :P_SIMPLE_ID 
                AND SKLAD_ID = :L_SKLAD_ID 
            INTO 
                :L_NAL_KOL, :L_NAL_SUMA_SR; 
 
            --ПЪРВА ПРОВЕРКА ДАЛИ ИМА ДОСТАТЪЧНО НАЛИЧНО ЗА ИЗХОДА, БЕЗ ДА СЕ ГЕЛДАТ ПАРТИДИТЕ КОНКРЕТНО 
            --АКО НЯМА ЗНАЧИ ИМА ИЗЛШЪК И ОПЕРАЦИЯТА СЕ ПРЕКРАТЯВА 
            IF (L_NAL_KOL < L_KOL) THEN 
                EXIT; 
 
            --ТОВА Е РАБОТА СЪС СЕРИЙНИ НОМЕРА - ОТБЕЛЯЗАНО Е ТОЧНО КАКВО Е ИЗЛЯЗЛО. ЗА ВСЯКА ИЗПОЛЗВАНА 
            --ПАРТИДА СЕ ПРАВИ ПРОВЕРКА ДАЛИ ВЕЧЕ Я ИМА КАТО ВХОД В СКЛАДА ИЛИ ОПЕРАЦИЯТА ПО ИЗХОДА Е 
            --ИЗПРЕВАРИЛА ВХОДА. 
 
            FOR SELECT 
                PN.ID, 
                PN.KOL, 
                PN.SUMA_FR, 
                PEN.KOL, 
                PEN.ID 
            FROM 
                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = :L_EL_ID AND PEN.ID = PON.PARTIDA_NODE_ID 
                INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
            INTO 
                :L_PN_ID, :L_PN_KOL, :L_PN_SUMA_FR, :L_PEN_KOL, :L_PEN_ID 
            DO BEGIN 
                IF (L_PN_KOL < L_PEN_KOL) THEN 
                    --В ПАРТИДАТА НЯМА ДОСТАТЪЧНО КОЛИЧЕСТВО ЗА СЪОТВЕТНИЯ ИЗХОД 
                    EXIT; 
 
                IF (L_PN_KOL > L_KOL) THEN BEGIN 
                    L_PEN_KOL = ROUND(L_KOL, 5); 
                    L_PEN_SUMA_FR = ROUND(ROUND(L_PN_SUMA_FR / L_PN_KOL, 5) * L_PEN_KOL, 2); 
                END 
                ELSE BEGIN 
                    L_PEN_KOL = ROUND(L_PN_KOL, 5); 
                    L_PEN_SUMA_FR = ROUND(L_PN_SUMA_FR, 2); 
                END 
 
                IF (L_NAL_KOL > L_PEN_KOL) THEN BEGIN 
                    L_PEN_SUMA_SR = ROUND(ROUND(L_NAL_SUMA_SR / L_NAL_KOL, 5) * L_PEN_KOL, 2); 
                END 
                ELSE BEGIN 
                   L_PEN_SUMA_SR = ROUND(L_NAL_SUMA_SR, 2); 
                END 
 
                UPDATE PARTIDA_EL_NODE SET 
                    SUMA_FR = :L_PEN_SUMA_FR, 
                    SUMA_SR = :L_PEN_SUMA_SR 
                WHERE 
                    ID = :L_PEN_ID; 
 
                UPDATE PARTIDA_NAL SET 
                    KOL = ROUND(KOL - :L_PEN_KOL, 5), 
                    SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR, 2) 
                WHERE 
                    ID = :L_PN_ID; 
 
                L_KOL = ROUND(L_KOL - L_PEN_KOL, 5); 
                L_NAL_KOL = ROUND(L_NAL_KOL - L_PEN_KOL, 5); 
                L_NAL_SUMA_SR = ROUND(L_NAL_SUMA_SR - L_PEN_SUMA_SR, 2); 
 
                L_UPDATE_KOL = ROUND(L_UPDATE_KOL + :L_PEN_KOL, 5); 
                L_UPDATE_SUMA_FR = ROUND(L_UPDATE_SUMA_FR + L_PEN_SUMA_FR, 2); 
                L_UPDATE_SUMA_SR = ROUND(L_UPDATE_SUMA_SR + L_PEN_SUMA_SR, 2); 
 
            END 
 
            UPDATE TMP_NAL SET 
                KOL = ROUND(KOL - :L_UPDATE_KOL, 5), 
                SUMA_SR = ROUND(SUMA_SR - :L_UPDATE_SUMA_SR, 2), 
                SUMA_FR = ROUND(SUMA_FR - :L_UPDATE_SUMA_FR, 2) 
            WHERE 
                SIMPLE_ID = :P_SIMPLE_ID 
                AND SKLAD_ID = :L_SKLAD_ID; 
 
            UPDATE OUT_EL SET 
                SUMA_FR = ROUND(:L_UPDATE_SUMA_FR, 2), 
                SUMA_SR = ROUND(:L_UPDATE_SUMA_SR, 2) 
            WHERE 
                ID = :L_EL_ID; 
 
            UPDATE OPR_SUMI SET 
                SUMA_FR = ROUND(SUMA_FR + :L_UPDATE_SUMA_FR, 2), 
                SUMA_SR = ROUND(SUMA_SR + :L_UPDATE_SUMA_SR, 2) 
            WHERE 
                OPR_ID = :L_OPR_ID; 
 
        END 
        ELSE IF (L_IN_OUT = 1) THEN BEGIN --ВХОД ОТ СКЛАДА 
            L_LAST_CENA = 1; 
            IF (L_OPR_TIP IN (4, 46, 48)) THEN BEGIN 
 
                SELECT SKLAD.F_MOVE_CENA FROM SKLAD WHERE ID = :L_SKLAD_ID INTO :L_LAST_CENA; 
 
                IF (L_OPR_TIP = 4) THEN 
                    SELECT 
                        OUT_EL_ID 
                    FROM 
                        OPR_RAZPAD_NODE 
                    WHERE 
                        IN_EL_ID = :L_EL_ID 
                    INTO 
                        :L_OUT_EL_ID; 
                ELSE 
                --ПРИ ДААНЕ И ВРЪЩАНЕ НА КОСИГНАЦИЯ ЕДИН И СЪЩИ IN_EL ИМА 2 ВРЪЗКИ В ТАБЛИЦАТА. 
                --ЗАТОВА ФИЛТРИРАМ ПО ТИПА НА ОПЕРАЦИЯ. ТЕ СА ЕДНАКВИ ЗА ДВАТА СКЛАДА (46-46; 48-48) 
                --НЕ КАТО ПРЕХВЪРЛЯНЕ (9-4) 
                    SELECT 
                        ORN.OUT_EL_ID 
                    FROM 
                        OPR_RAZPAD_NODE ORN INNER JOIN OUT_EL ON ORN.OUT_EL_ID = OUT_EL.ID 
                        INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.OPR_TIP = :L_OPR_TIP 
                    WHERE 
                        ORN.IN_EL_ID = :L_EL_ID 
                    INTO 
                        :L_OUT_EL_ID; 
 
                FOR SELECT 
                    PEN.KOL, 
                    PEN.SUMA_FR, 
                    PEN.SUMA_SR, 
                    PN.ELEMENT_ID 
                FROM 
                    PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.PARTIDA_NODE_ID = PEN.ID 
                    AND PON.OUT_EL_ID = :L_OUT_EL_ID 
                    INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
                INTO 
                    :L_PEN_KOL, :L_PEN_SUMA_FR, :L_PEN_SUMA_SR, :L_PN_ELEMENT_ID 
                DO BEGIN 
                    SELECT 
                        PEN.ID, 
                        PEN.PARTIDA_ID 
                    FROM 
                        PARTIDA_IN_EL_NODE PIN INNER JOIN PARTIDA_EL_NODE PEN ON PIN.IN_EL_ID = :L_EL_ID 
                        AND PIN.PARTIDA_NODE_ID = PEN.ID 
                        INNER JOIN PARTIDA_NAL PN ON PN.ELEMENT_ID = :L_PN_ELEMENT_ID AND PN.ID = PEN.PARTIDA_ID 
                    INTO 
                        :L_PEN_ID,:L_PN_ID; 
 
                    UPDATE PARTIDA_NAL SET 
                        KOL = ROUND(KOL + :L_PEN_KOL, 5), 
                        SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR, 2) 
                    WHERE 
                        ID = :L_PN_ID; 
 
                    UPDATE PARTIDA_EL_NODE SET 
                        SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR, 2), 
                        SUMA_SR = ROUND(SUMA_SR + :L_PEN_SUMA_SR, 2) 
                    WHERE 
                        ID = :L_PEN_ID; 
                END 
            END 
            ELSE IF (L_OPR_TIP IN (26, 41) ) THEN BEGIN 
                --ВРЪЩАНЕ ИЛИ КРЕДИТНО ОТ КЛИЕНТ 
                --АКО ИМА ИЗЛИШЪЦИ И ОПР Е СЛЕД ИНВ НАЛ. КОЛ. СЕ УВЕЛИЧАВА САМО С ТОВА НА РЕАЛНО ВЪРНАТИТЕ ПАРТИДИ 
                --АКО НЯМА ИНВ НАЛ СЕ УВЕЛИЧАВА С КОЛИЧЕСТВОТО НА ВРЪЩАНОТО 
                EXECUTE PROCEDURE PARTIDA_HISTORY_RETURN_PROD_SN(L_EL_ID) 
                RETURNING_VALUES :L_RETURN_RESULT; 
                IF (L_RETURN_RESULT = 1) THEN 
                    EXIT; --НЕ Е ДОСТИГНАЛО КОЛИЧЕСТВО ЗА ВРЪЩАНЕ В НЯКОЯ ПАРТИДА 
                L_LAST_CENA = 0; 
            END 
            ELSE BEGIN 
                IF (L_OPR_TIP in (33, 77)) THEN BEGIN 
                    EXECUTE PROCEDURE PROIZVODSTVO_SN(L_EL_ID); 
                END 
                ELSE IF (L_OPR_TIP = 28) THEN BEGIN 
                    EXECUTE PROCEDURE RAZPAD_CALC(L_EL_ID); 
                END 
 
                FOR SELECT 
                    PEN.KOL, 
                    PEN.SUMA_FR, 
                    PEN.SUMA_SR, 
                    PEN.PARTIDA_ID 
                FROM 
                    PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = :L_EL_ID 
                    AND PIN.PARTIDA_NODE_ID = PEN.ID 
                INTO 
                    :L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR,:L_PN_ID 
                DO BEGIN 
                    UPDATE PARTIDA_NAL SET 
                        KOL = ROUND(KOL + :L_PEN_KOL, 5), 
                        SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR, 2) 
                    WHERE 
                        ID = :L_PN_ID; 
                END 
            END 
 
            SELECT 
                SUM(PEN.KOL), 
                SUM(PEN.SUMA_FR), 
                SUM(PEN.SUMA_SR) 
            FROM 
                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = :L_EL_ID 
                AND PIN.PARTIDA_NODE_ID = PEN.ID 
            INTO 
                :L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR; 
 
            L_PEN_SUMA_FR = ROUND(COALESCE(L_PEN_SUMA_FR, 0.00), 2); 
            L_PEN_SUMA_SR = ROUND(COALESCE(L_PEN_SUMA_SR, 0.00), 2); 
 
            UPDATE IN_EL SET 
                SUMA_FR = ROUND(:L_PEN_SUMA_FR, 2), 
                SUMA_SR = ROUND(:L_PEN_SUMA_SR, 2) 
            WHERE 
                ID = :L_EL_ID; 
 
            IF (L_OPR_TIP != 28) THEN 
                UPDATE OPR_SUMI SET 
                    SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR, 2), 
                    SUMA_SR = ROUND(SUMA_SR + :L_PEN_SUMA_SR, 2) 
                WHERE 
                    OPR_ID = :L_OPR_ID; 
 
            IF (L_LAST_CENA = 1) THEN BEGIN 
                --ДОСТАВКА - ПРОМЕНЯМЕ ПОСЛЕДНА ДОСТАВНА ЦЕНА 
                UPDATE TMP_NAL SET 
                    KOL = ROUND(KOL + :L_KOL, 5), 
                    SUMA_SR = ROUND(SUMA_SR + :L_PEN_SUMA_SR, 2), 
                    SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR, 2), 
                    LAST_CENA = ROUND(:L_PEN_SUMA_SR / :L_PEN_KOL, 5) 
                WHERE 
                    SIMPLE_ID = :P_SIMPLE_ID 
                    AND SKLAD_ID = :L_SKLAD_ID; 
            END 
            ELSE BEGIN 
                UPDATE TMP_NAL SET 
                    KOL = ROUND(KOL + :L_KOL, 5), 
                    SUMA_SR = ROUND(SUMA_SR + :L_PEN_SUMA_SR, 2), 
                    SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR, 2) 
                WHERE 
                    SIMPLE_ID = :P_SIMPLE_ID 
                    AND SKLAD_ID = :L_SKLAD_ID; 
            END 
        END 
 
        IF (L_OPR_TIP = 3 AND L_INV_ID IS NOT NULL) THEN BEGIN 
        --ИНВЕНТАРИЗАЦИЯ И В НАЧАЛОТО Е НАМЕРЕН ЕЛЕМЕНТ ОПИСВАЩ ИНВЕНТАРИЗАЦИЯТА 
        --НАЛИЧНОСТИТЕ СТАВАТ РАВНИ НА НАМЕРЕНОТО, ЗАЩОТО МОЖЕ ДА Е ОТ '-' -> '+' 
            UPDATE TMP_NAL SET 
                KOL = :L_INV_KOL_F 
            WHERE 
                SIMPLE_ID = :P_SIMPLE_ID 
                AND SKLAD_ID = :L_SKLAD_ID; 
        END 
    END 
    R_RESULT = 0; 
 
    UPDATE TMP_SIMPLE_RECALC SET 
        FLAG_CALC = 2 
    WHERE 
        SIMPLE_ID = :P_SIMPLE_ID; 
 
    MERGE INTO NAL 
    USING 
        TMP_NAL 
    ON 
        TMP_NAL.SIMPLE_ID = NAL.SIMPLE_ID AND NAL.SKLAD_ID = TMP_NAL.SKLAD_ID 
    WHEN MATCHED THEN UPDATE SET 
        KOL_NAL = ROUND(TMP_NAL.KOL, 5), 
        SUMA = ROUND(TMP_NAL.SUMA_SR, 2), 
        SUMA_FR = ROUND(TMP_NAL.SUMA_FR, 2), 
        LAST_CENA = ROUND(TMP_NAL.LAST_CENA, 5); 
END;^


ALTER PROCEDURE PARTIDA_HISTORY_OLD_PARTIDA (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT = NULL)
AS
DECLARE VARIABLE L_OPR_DATE TYPE OF DOM_DATE; 
DECLARE VARIABLE L_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_IN_OUT TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_PEN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PEN_PARTIDA_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PEN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PEN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PEN_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PEN_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OUT_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_INV_KOL_S TYPE OF DOM_KOL; 
DECLARE VARIABLE L_DATE TYPE OF DOM_DATE; 
DECLARE VARIABLE L_UPDATE_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_UPDATE_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_UPDATE_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_INV_DATA DATE; 
DECLARE VARIABLE L_INV_OPR_ID INTEGER; 
BEGIN 
    MERGE INTO NAL 
    USING 
        SKLAD 
    ON 
        SKLAD.ID = NAL.SKLAD_ID 
        AND NAL.SIMPLE_ID = :P_SIMPLE_ID 
    WHEN NOT MATCHED THEN INSERT 
        (SIMPLE_ID,SKLAD_ID,KOL_NAL,SUMA,SUMA_FR) 
         VALUES(:P_SIMPLE_ID, SKLAD.ID, 0.00, 0.00, 0.00); 
 
    IF (NOT EXISTS (SELECT TMP_NAL.SIMPLE_ID FROM TMP_NAL WHERE TMP_NAL.SIMPLE_ID =:P_SIMPLE_ID)) THEN 
        INSERT INTO TMP_NAL(SKLAD_ID, KOL, SUMA_SR, SUMA_FR, LAST_CENA, SIMPLE_ID) 
        SELECT 
            NAL.SKLAD_ID, 
            NAL.KOL_NAL, 
            NAL.SUMA, 
            NAL.SUMA_FR, 
            COALESCE(NAL.LAST_CENA,0.00), 
            :P_SIMPLE_ID 
        FROM 
            NAL 
        WHERE 
            NAL.SIMPLE_ID = :P_SIMPLE_ID; 
 
    --ПРИ РЕДАКЦИЯ ТРЯБВА ДА СЕ ВЪРНА ДО МОМЕНТА НА ПО-РАННАТА ОТ ДВЕТЕ ДАТИ, ЗА ДА ПРЕНАРЕДЯ ОТ ТАМ ДО КРАЯ 
    L_DATE = MINVALUE(COALESCE(P_NEW_OPR_DATE, CURRENT_DATE), COALESCE(P_OLD_OPR_DATE, CURRENT_DATE)); 
 
    FOR SELECT 
        PH.R_KOL, 
        PH.R_EL_ID, 
        PH.R_OPR_ID, 
        PH.R_OPR_TIP, 
        PH.R_SKLAD_ID, 
        PH.R_OPR_DATE, 
        PH.R_IN_OUT 
    FROM 
        PARTIDA_HISTORY_SUB_QUERY(:P_SIMPLE_ID,:P_OPR_ID,:L_DATE,:P_SKLAD_ID) PH 
    ORDER BY R_OPR_DATE DESC, R_OPR_ID DESC 
    INTO 
        :L_KOL,:L_EL_ID,:L_OPR_ID,:L_OPR_TIP,:L_SKLAD_ID,:L_OPR_DATE,:L_IN_OUT 
    DO BEGIN 
        L_UPDATE_KOL = 0.00; 
        L_UPDATE_SUMA_FR = 0.00; 
        L_UPDATE_SUMA_SR = 0.00; 
 
        IF (L_IN_OUT = 0) THEN BEGIN --ИЗХОД ОТ СКЛАДА 
            FOR SELECT 
                PEN.PARTIDA_ID, 
                PEN.KOL, 
                PEN.SUMA_FR, 
                PEN.ID, 
                PEN.SUMA_SR 
            FROM 
                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PEN.ID = PON.PARTIDA_NODE_ID AND 
                PON.OUT_EL_ID = :L_EL_ID 
            INTO 
                :L_PEN_PARTIDA_ID,:L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_ID,:L_PEN_SUMA_SR 
            DO BEGIN 
                UPDATE PARTIDA_NAL SET 
                    SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR,2), 
                    KOL = ROUND(KOL + :L_PEN_KOL,5) 
                WHERE 
                    ID = :L_PEN_PARTIDA_ID; 
 
                L_UPDATE_KOL = ROUND(L_UPDATE_KOL + :L_PEN_KOL,5); 
                L_UPDATE_SUMA_FR = ROUND(L_UPDATE_SUMA_FR + :L_PEN_SUMA_FR,2); 
                L_UPDATE_SUMA_SR = ROUND(L_UPDATE_SUMA_SR + :L_PEN_SUMA_SR,2); 
 
                DELETE FROM PARTIDA_EL_NODE 
                WHERE 
                    ID = :L_PEN_ID; 
            END 
 
            UPDATE TMP_NAL SET 
                SUMA_SR = ROUND(SUMA_SR + :L_UPDATE_SUMA_SR,2), 
                SUMA_FR = ROUND(SUMA_FR + :L_UPDATE_SUMA_FR,2), 
                KOL = ROUND(KOL + :L_UPDATE_KOL,5) 
            WHERE 
                SKLAD_ID = :L_SKLAD_ID AND SIMPLE_ID = :P_SIMPLE_ID; 
 
            UPDATE OPR_SUMI SET 
                SUMA_FR = ROUND(SUMA_FR - :L_UPDATE_SUMA_FR,2), 
                SUMA_SR = ROUND(SUMA_SR - :L_UPDATE_SUMA_SR,2) 
            WHERE 
                OPR_ID = :L_OPR_ID; 
 
            IF (L_OPR_TIP IN (56,57)) THEN 
                UPDATE SUMI SET 
                    SUMI.SUMA = ROUND(SUMI.SUMA - :L_UPDATE_SUMA_FR,2), 
                    SUMI.SUMA_OST = ROUND(SUMI.SUMA_OST - :L_UPDATE_SUMA_FR,2) 
                WHERE 
                    SUMI.OPR_ID = :L_OPR_ID; 
 
            UPDATE OUT_EL SET 
                SUMA_SR = 0.00, 
                SUMA_FR = 0.00 
            WHERE 
                ID = :L_EL_ID; 
 
            DELETE FROM IZL WHERE OUT_EL_ID = :L_EL_ID; 
         END 
        ELSE IF (L_IN_OUT = 1) THEN BEGIN --ВХОД ОТ СКЛАДА 
            --НАМИРАМЕ ИЗЛИЗЩЪЦИ КОРЕГИРАНИ В ОПЕРАЦИИ 
            --ВРЪЩАМЕ КОЛИЧЕСТВОТО В ПАРТИДАТА И НАМАЛЯМЕ СУМИТЕ В OUT_EL И OPR_SUMI 
 
             FOR SELECT 
                PEN.ID, 
                PEN.PARTIDA_ID, 
                PEN.SUMA_FR, 
                PEN.SUMA_SR, 
                PEN.KOL, 
                PON.OUT_EL_ID, 
                PEN.OPR_ID 
            FROM 
                PARTIDA_NAL PN INNER JOIN PARTIDA_EL_NODE PEN ON PEN.PARTIDA_ID = PN.ID AND PN.IN_EL_ID = :L_EL_ID 
                INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.PARTIDA_NODE_ID = PEN.ID 
                INNER JOIN PARTIDA_IZL_NODE PIZLN ON PIZLN.PARTIDA_EL_ID = PEN.ID 
            INTO 
                :L_PEN_ID,:L_PEN_PARTIDA_ID,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR,:L_PEN_KOL,:L_OUT_EL_ID,:L_PEN_OPR_ID 
            DO BEGIN 
                L_PEN_SUMA_FR = ROUND(COALESCE(L_PEN_SUMA_FR,0.00),2); 
                L_PEN_SUMA_SR = ROUND(COALESCE(L_PEN_SUMA_SR,0.00),2); 
                L_PEN_KOL     = ROUND(COALESCE(L_PEN_KOL,0.00),5); 
 
                UPDATE OUT_EL SET 
                    SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR,2), 
                    SUMA_SR = ROUND(SUMA_SR - :L_PEN_SUMA_SR,2) 
                WHERE 
                    ID = :L_OUT_EL_ID; 
 
                IF (L_OPR_TIP != 28) THEN 
                    UPDATE OPR_SUMI SET 
                        SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR,2), 
                        SUMA_SR = ROUND(SUMA_SR - :L_PEN_SUMA_SR,2) 
                    WHERE 
                        OPR_ID = :L_PEN_OPR_ID; 
 
                UPDATE PARTIDA_NAL SET 
                    SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR,2), 
                    KOL = ROUND(KOL + :L_PEN_KOL,5) 
                WHERE 
                    ID = :L_PEN_PARTIDA_ID; 
 
                DELETE FROM PARTIDA_EL_NODE WHERE ID = :L_PEN_ID; 
 
                L_UPDATE_KOL = ROUND(L_UPDATE_KOL + :L_PEN_KOL,5); 
                L_UPDATE_SUMA_FR = ROUND(L_UPDATE_SUMA_FR + :L_PEN_SUMA_FR,2); 
                L_UPDATE_SUMA_SR = ROUND(L_UPDATE_SUMA_SR + :L_PEN_SUMA_SR,2); 
            END 
 
            IF (L_UPDATE_KOL > 0.00) THEN BEGIN 
                UPDATE TMP_NAL SET 
                    SUMA_FR = ROUND(SUMA_FR + :L_UPDATE_SUMA_FR,2), 
                    SUMA_SR = ROUND(SUMA_SR + :L_UPDATE_SUMA_SR,2), 
                    KOL = ROUND(KOL + :L_UPDATE_KOL,5) 
                WHERE 
                    SKLAD_ID = :L_SKLAD_ID 
                    AND SIMPLE_ID = :P_SIMPLE_ID; 
 
                L_UPDATE_KOL = 0.00; 
                L_UPDATE_SUMA_FR = 0.00; 
                L_UPDATE_SUMA_SR = 0.00; 
            END 
 
            FOR SELECT 
                PEN.PARTIDA_ID, 
                PEN.KOL, 
                PEN.SUMA_FR, 
                PEN.SUMA_SR 
            FROM 
                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PEN.ID = PIN.PARTIDA_NODE_ID AND 
                PIN.IN_EL_ID = :L_EL_ID 
            INTO 
                :L_PEN_PARTIDA_ID,:L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR 
            DO BEGIN 
                UPDATE PARTIDA_NAL SET 
                    SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR,2), 
                    KOL = ROUND(KOL - :L_PEN_KOL,5) 
                WHERE 
                    ID = :L_PEN_PARTIDA_ID; 
 
                L_UPDATE_KOL = ROUND(L_UPDATE_KOL + :L_PEN_KOL,5); 
                L_UPDATE_SUMA_FR = ROUND(L_UPDATE_SUMA_FR + :L_PEN_SUMA_FR,2); 
                L_UPDATE_SUMA_SR = ROUND(L_UPDATE_SUMA_SR + :L_PEN_SUMA_SR,2); 
            END 
 
            IF (L_OPR_TIP IN (55,58)) THEN 
                UPDATE SUMI SET 
                    SUMI.SUMA = ROUND(SUMI.SUMA - :L_UPDATE_SUMA_FR,2), 
                    SUMI.SUMA_OST = ROUND(SUMI.SUMA_OST - :L_UPDATE_SUMA_FR,2) 
                WHERE 
                    SUMI.OPR_ID = :L_OPR_ID; 
 
            IF (L_OPR_TIP IN (26,41) ) THEN BEGIN 
            --АКО Е ВРЩЪАНЕ, КОЕТО МЕЖДУ НЕГО И ПРОДАЖБАТА ИМА ИНВ, ЩЕ ВЪРНА САМО КОЛ ОТ ПАРТИДИ 
            --АКО НЯМА - ЦЯЛОТО КОЛ. АКО КОЛ > КОЛ ПАРТИДИ - УВЕЛИЧАВАМ ИЗЛИШЪКА ЗА ПРОДАЖБАТА 
                EXECUTE PROCEDURE PARTIDA_HISTORY_RETURN_PROD_OLD(L_EL_ID,L_KOL) 
                RETURNING_VALUES :L_KOL; 
            END 
 
            UPDATE TMP_NAL SET 
                SUMA_SR = ROUND(SUMA_SR - :L_UPDATE_SUMA_SR,2), 
                SUMA_FR = ROUND(SUMA_FR - :L_UPDATE_SUMA_FR,2), 
                KOL = ROUND(KOL - :L_UPDATE_KOL,5) 
            WHERE 
                SKLAD_ID = :L_SKLAD_ID 
                AND SIMPLE_ID = :P_SIMPLE_ID; 
 
            UPDATE OPR_SUMI SET 
                SUMA_FR = ROUND(SUMA_FR - :L_UPDATE_SUMA_FR,2), 
                SUMA_SR = ROUND(SUMA_SR - :L_UPDATE_SUMA_SR,2) 
            WHERE 
                OPR_ID = :L_OPR_ID; 
 
 
            IF (L_OPR_TIP IN (4,26,41,46,48,58)) THEN BEGIN 
                --ЗА ТОЗИ ВХОД ПАРТИДИТЕ ЩЕ СЕ ИЗЧИСЛЯТ НАНОВО, ЗАТОВА ГО ТРИЕМ КАТО ИСТОРИЯ 
                FOR SELECT 
                    PEN.ID 
                FROM 
                    PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PEN.ID = PIN.PARTIDA_NODE_ID AND 
                    PIN.IN_EL_ID = :L_EL_ID 
                INTO 
                    :L_PEN_ID 
                DO 
                    DELETE FROM PARTIDA_EL_NODE 
                    WHERE 
                        ID = :L_PEN_ID; 
 
                IF (L_OPR_TIP = 58) THEN 
                    DELETE FROM OPR_RAZPAD_NODE 
                    WHERE 
                        OPR_RAZPAD_NODE.IN_EL_ID = :L_EL_ID; 
            END 
        END 
 
        IF (L_OPR_TIP = 3) THEN BEGIN 
            --ОТКЛЮЧВАНЕ ЗА ЗАКЛЮЧЕНИТЕ ОТ ИНВЕНТАРИЗАЦИЯТА ИЗЛИШЪЦИ 
            L_INV_OPR_ID = NULL; 
            SELECT FIRST 1 
                INV_OPIS.OPR_ID, 
                OPR.OPR_DATE 
            FROM 
                INV_OPIS INNER JOIN OPR ON OPR.ID = INV_OPIS.OPR_ID AND INV_OPIS.SIMPLE_ID = :P_SIMPLE_ID 
                AND OPR.SKLAD_ID = :L_SKLAD_ID 
                AND ((OPR.OPR_DATE < :L_OPR_DATE) OR (OPR.OPR_DATE = :L_OPR_DATE AND OPR.ID < :L_OPR_ID)) 
            ORDER BY OPR.ID DESC 
            INTO 
                :L_INV_OPR_ID,:L_INV_DATA; 
 
            IF (L_INV_OPR_ID IS NULL) THEN BEGIN 
                FOR SELECT 
                    OUT_EL.ID 
                FROM 
                    OUT_EL INNER JOIN OPR ON OPR.SKLAD_ID = :L_SKLAD_ID AND OUT_EL.OPR_ID = OPR.ID 
                    AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
                WHERE 
                    OPR.OPR_DATE < :L_OPR_DATE 
                    OR (OPR.OPR_DATE = :L_OPR_DATE AND OPR.ID < :L_OPR_ID) 
                INTO 
                    :L_OUT_EL_ID 
                DO BEGIN 
                    UPDATE IZL SET 
                        IZL.FLAG_LOCK_KOR = 0 
                    WHERE 
                        OUT_EL_ID = :L_OUT_EL_ID; 
                END 
            END 
            ELSE BEGIN 
                FOR SELECT 
                    OUT_EL.ID 
                FROM 
                    OUT_EL INNER JOIN OPR ON OPR.SKLAD_ID = :L_SKLAD_ID AND OUT_EL.OPR_ID = OPR.ID 
                    AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
                WHERE 
                    (OPR.OPR_DATE > :L_INV_DATA AND OPR.OPR_DATE < :L_OPR_DATE) --НАМИРА СЕ МЕЖДУ ДВЕТЕ ДАТИ 
                    OR (OPR.OPR_DATE = :L_INV_DATA AND OPR.ID > :L_INV_OPR_ID)--ИЛИ Е НА ДАТА НА ПРЕДНА ИНВ НО Е СЛЕД НЕЯ 
                    OR (OPR.OPR_DATE = :L_OPR_DATE AND OPR.ID < :L_OPR_ID)--ИЛИ Е НА ДАТА НА ТЕКУЩАТА ИНВ НО Е ПРЕДИ НЕЯ 
                INTO 
                    :L_OUT_EL_ID 
                DO BEGIN 
                    UPDATE IZL SET 
                        IZL.FLAG_LOCK_KOR = 0 
                    WHERE 
                        OUT_EL_ID = :L_OUT_EL_ID; 
                END 
            END 
 
            L_INV_KOL_S = NULL; 
            SELECT 
               INV_OPIS.KOL_S 
            FROM 
                INV_OPIS 
            WHERE 
                INV_OPIS.OPR_ID = :L_OPR_ID 
                AND INV_OPIS.SIMPLE_ID = :P_SIMPLE_ID 
            INTO 
                :L_INV_KOL_S; 
 
            L_INV_KOL_S = COALESCE(L_INV_KOL_S,0.00); 
 
            IF (L_INV_KOL_S <= 0.00) THEN BEGIN 
                UPDATE NAL SET 
                    KOL_NAL = ROUND(0.00, 5), 
                    SUMA = ROUND(0.00, 2), 
                    SUMA_FR = ROUND(0.00, 2) 
                WHERE 
                    SKLAD_ID = :L_SKLAD_ID 
                    AND SIMPLE_ID = :P_SIMPLE_ID; 
            END 
        END 
 
    END 
 
    UPDATE TMP_SIMPLE_RECALC SET 
        FLAG_CALC = 1 
    WHERE 
        SIMPLE_ID = :P_SIMPLE_ID; 
END^


ALTER PROCEDURE PARTIDA_HISTORY_OLD_PARTIDA_SN (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT = null)
AS
declare variable L_KOL type of DOM_KOL; 
declare variable L_EL_ID type of DOM_KEY; 
declare variable L_OPR_ID type of DOM_KEY; 
declare variable L_SKLAD_ID type of DOM_SMAL_INT; 
declare variable L_IN_OUT type of DOM_SMAL_INT; 
declare variable L_PEN_ID type of DOM_KEY; 
declare variable L_PEN_PARTIDA_ID type of DOM_KEY; 
declare variable L_PEN_KOL type of DOM_KOL; 
declare variable L_PEN_SUMA_FR type of DOM_SUMA; 
declare variable L_PEN_SUMA_SR type of DOM_SUMA; 
declare variable L_DATE type of DOM_DATE; 
declare variable L_OPR_TIP type of DOM_SMAL_INT; 
declare variable L_UPDATE_KOL type of DOM_KOL; 
declare variable L_UPDATE_SUMA_FR type of DOM_SUMA; 
declare variable L_UPDATE_SUMA_SR type of DOM_SUMA; 
BEGIN 
    MERGE INTO NAL 
    USING 
        SKLAD 
    ON 
        SKLAD.ID = NAL.SKLAD_ID 
        AND NAL.SIMPLE_ID = :P_SIMPLE_ID 
    WHEN NOT MATCHED THEN INSERT 
        (SIMPLE_ID,SKLAD_ID,KOL_NAL,SUMA,SUMA_FR) 
         VALUES(:P_SIMPLE_ID, SKLAD.ID, 0.00, 0.00, 0.00); 
 
    IF (NOT EXISTS (SELECT TMP_NAL.SIMPLE_ID FROM TMP_NAL WHERE TMP_NAL.SIMPLE_ID =:P_SIMPLE_ID)) THEN 
      INSERT INTO TMP_NAL(SKLAD_ID, KOL, SUMA_SR, SUMA_FR, LAST_CENA, SIMPLE_ID) 
      SELECT 
          NAL.SKLAD_ID, 
          NAL.KOL_NAL, 
          NAL.SUMA, 
          nal.SUMA_FR, 
          COALESCE(NAL.LAST_CENA,0.00), 
          :P_SIMPLE_ID 
      FROM 
          NAL 
      WHERE 
          NAL.SIMPLE_ID = :P_SIMPLE_ID; 
 
    --ПРИ РЕДАКЦИЯ ТРЯБВА ДА СЕ ВЪРНА ДО МОМЕНТА НА ПО-РАННАТА ОТ ДВЕТЕ ДАТИ, ЗА ДА ПРЕНАРЕДЯ ОТ ТАМ ДО КРАЯ 
    L_DATE = MINVALUE(COALESCE(P_NEW_OPR_DATE, CURRENT_DATE), COALESCE(P_OLD_OPR_DATE, CURRENT_DATE)); 
 
    FOR SELECT 
        PH.R_KOL, 
        PH.R_EL_ID, 
        PH.R_OPR_ID, 
        PH.R_SKLAD_ID, 
        PH.R_IN_OUT, 
        PH.R_OPR_TIP 
    FROM 
        PARTIDA_HISTORY_SUB_QUERY(:P_SIMPLE_ID,:P_OPR_ID,:L_DATE,:P_SKLAD_ID) PH 
    ORDER BY R_OPR_DATE DESC, R_OPR_ID DESC 
    INTO 
        :L_KOL, :L_EL_ID, :L_OPR_ID, :L_SKLAD_ID, :L_IN_OUT, :L_OPR_TIP 
    DO BEGIN 
        L_UPDATE_KOL = 0.00; 
        L_UPDATE_SUMA_FR = 0.00; 
        L_UPDATE_SUMA_SR = 0.00; 
 
        IF (L_IN_OUT = 0) THEN BEGIN 
            FOR SELECT 
                PEN.ID, 
                PEN.PARTIDA_ID, 
                PEN.KOL, 
                PEN.SUMA_FR, 
                PEN.SUMA_SR 
            FROM 
                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PEN.ID = PON.PARTIDA_NODE_ID 
                AND PON.OUT_EL_ID = :L_EL_ID 
            INTO 
                :L_PEN_ID,:L_PEN_PARTIDA_ID,:L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR 
            DO BEGIN 
                UPDATE PARTIDA_NAL SET 
                    SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR,2), 
                    KOL = ROUND(KOL + :L_PEN_KOL,5) 
                WHERE 
                    ID = :L_PEN_PARTIDA_ID; 
 
                UPDATE PARTIDA_EL_NODE SET 
                    SUMA_SR = 0.00, 
                    SUMA_FR = 0.00 
                WHERE 
                    ID = :L_PEN_ID; 
 
                L_UPDATE_KOL = ROUND(L_UPDATE_KOL + L_PEN_KOL,5); 
                L_UPDATE_SUMA_FR = ROUND(L_UPDATE_SUMA_FR + L_PEN_SUMA_FR,2); 
                L_UPDATE_SUMA_SR = ROUND(L_UPDATE_SUMA_SR + L_PEN_SUMA_SR,2); 
            END 
 
            UPDATE TMP_NAL SET 
                SUMA_SR = ROUND(SUMA_SR + :L_UPDATE_SUMA_SR,2), 
                SUMA_FR = ROUND(SUMA_FR + :L_UPDATE_SUMA_FR,2), 
                KOL = ROUND(KOL + :L_UPDATE_KOL,5) 
            WHERE 
                SKLAD_ID = :L_SKLAD_ID 
                AND SIMPLE_ID = :P_SIMPLE_ID; 
 
            UPDATE OPR_SUMI SET 
                SUMA_FR = ROUND(SUMA_FR - :L_UPDATE_SUMA_FR,2), 
                SUMA_SR = ROUND(SUMA_SR - :L_UPDATE_SUMA_SR,2) 
            WHERE 
                OPR_ID = :L_OPR_ID; 
 
            UPDATE OUT_EL SET 
                SUMA_SR = 0.00, 
                SUMA_FR = 0.00 
            WHERE 
                ID = :L_EL_ID; 
        END 
        ELSE IF (L_IN_OUT = 1) THEN BEGIN 
 
            FOR SELECT 
                PEN.ID, 
                PEN.PARTIDA_ID, 
                PEN.KOL, 
                PEN.SUMA_FR, 
                PEN.SUMA_SR 
            FROM 
                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PEN.ID = PIN.PARTIDA_NODE_ID AND 
                PIN.IN_EL_ID = :L_EL_ID 
            INTO 
                :L_PEN_ID,:L_PEN_PARTIDA_ID,:L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR 
            DO BEGIN 
                UPDATE PARTIDA_NAL SET 
                    SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR,2), 
                    KOL = ROUND(KOL - :L_PEN_KOL,5) 
                WHERE 
                    ID = :L_PEN_PARTIDA_ID; 
 
                IF (L_OPR_TIP IN (4,26,41,46,48)) THEN 
                    UPDATE PARTIDA_EL_NODE SET 
                        SUMA_FR = 0.00, 
                        SUMA_SR = 0.00 
                    WHERE 
                        ID = :L_PEN_ID; 
 
                L_UPDATE_KOL = ROUND(L_UPDATE_KOL + L_PEN_KOL,5); 
                L_UPDATE_SUMA_FR = ROUND(L_UPDATE_SUMA_FR + L_PEN_SUMA_FR,2); 
                L_UPDATE_SUMA_SR = ROUND(L_UPDATE_SUMA_SR + L_PEN_SUMA_SR,2); 
            END 
 
            --НАМАЛЯВАМЕ СУМИТЕ И КОЛИЧЕСТВАТА В NAL 
            UPDATE TMP_NAL SET 
                SUMA_SR = ROUND(SUMA_SR - :L_UPDATE_SUMA_SR,2), 
                SUMA_FR = ROUND(SUMA_FR - :L_UPDATE_SUMA_FR,2), 
                KOL = ROUND(KOL - :L_UPDATE_KOL,5) 
            WHERE 
                SKLAD_ID = :L_SKLAD_ID 
                AND SIMPLE_ID = :P_SIMPLE_ID; 
 
            IF (L_OPR_TIP != 28) THEN 
                UPDATE OPR_SUMI SET 
                    SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR,2), 
                    SUMA_SR = ROUND(SUMA_SR - :L_PEN_SUMA_SR,2) 
                WHERE 
                    OPR_ID = :L_OPR_ID; 
 
            IF (L_OPR_TIP IN (4,26,41,46,48)) THEN 
                UPDATE IN_EL SET 
                    SUMA_FR = 0.00, 
                    SUMA_SR = 0.00 
                WHERE 
                    ID = :L_EL_ID; 
        END 
    END 
 
    UPDATE TMP_SIMPLE_RECALC SET 
        FLAG_CALC = 1 
    WHERE 
        SIMPLE_ID = :P_SIMPLE_ID; 
END^


ALTER PROCEDURE PARTIDA_HISTORY_RETURN_PR_AMBL (
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL,
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_KOL TYPE OF DOM_KOL,
    R_RESULT TYPE OF DOM_FLAG)
AS
DECLARE VARIABLE L_OUT_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PEN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PEN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PEN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PEN_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PN_ELEMENT_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PEN_FROM_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_RET_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_RET_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_RET_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OPR_DATE TYPE OF DOM_DATE; 
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_KLI_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_RET_OPR_DATE TYPE OF DOM_DATE; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_KEY; 
BEGIN 
/* 
    НАМИРАНЕ НА ПАРТИДИ - КОЛ И СУМИ, КОИТО СЕ ВРЪЩАТ В СКЛАДА ОТ ОПЕРАЦИЯ ВРЪЩАНЕ НА АМБАЛАЖ ОТ КЛИЕНТ 
    НАМИРА СЕ ИЗХОДЯЩИЯ ЕЛЕМЕНТ, С КОЙТО Е ИЗПИСАН АМБАЛАЖА ОТ СКЛАДА И ВРЪЩА ОТ ИЗПОЛЗВАНИТЕ ПАРТИДИ 
    ЗА СЕГА НЕ МОЖЕ ДА ИМА АМБАЛАЖ НА ОТРИЦАТЕЛНО Т.Е С ИЗЛИШЪЦИ. ЗАТОВА ТЕЗИ ПРОВЕРКИ НЕ СА СЛОЖЕНИ 
*/ 
    R_RESULT = 1; 
 
    SELECT 
        OPR.KLI_ID, 
        OPR.OPR_DATE, 
        OPR.SKLAD_ID, 
        IN_EL.SIMPLE_ID 
    FROM 
        IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
    WHERE 
        IN_EL.ID = :P_IN_EL_ID 
        AND OPR.ID = :P_OPR_ID 
    INTO 
        :L_KLI_ID, :L_OPR_DATE, :L_SKLAD_ID, :L_SIMPLE_ID; 
 
    --НАМИРАМ ПОСЛЕДНАТА ОПЕРАЦИЯ ОТ КОЯТО Е ВРЪЩАН АМБАЛАЖ ОТ КЛИЕНТА. ОТ НЕЯ НАСАМ ТЪРСЯ ПАРТИДИ В ОПЕРАЦИИТЕ ДАДЕН АМБАЛАЖ 
    SELECT FIRST 1 
        OPR.ID, 
        OPR.OPR_DATE 
    FROM 
        OPR INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OPR.ID 
       INNER JOIN OPR_RAZPAD_NODE ORN ON ORN.OUT_EL_ID = OUT_EL.ID 
    WHERE 
        OPR.KLI_ID = :L_KLI_ID 
        AND OPR.OPR_TIP = 57 
        AND OUT_EL.SIMPLE_ID = :L_SIMPLE_ID 
        AND ((OPR.OPR_DATE < :L_OPR_DATE) OR (OPR.OPR_DATE = :L_OPR_DATE AND OPR.ID < :L_OPR_ID)) 
    ORDER BY OPR.OPR_DATE DESC, OPR.ID DESC 
    INTO 
        :L_OPR_ID, :L_RET_OPR_DATE; 
 
    L_OPR_ID = COALESCE(L_OPR_ID,0); 
    L_RET_OPR_DATE = COALESCE(L_RET_OPR_DATE, CAST('01.01.2000' AS DATE)); 
 
    R_KOL = P_KOL; 
 
    FOR SELECT 
        OUT_EL.ID 
    FROM 
        OUT_EL INNER JOIN OPR ON OUT_EL.OPR_ID = OPR.ID 
    WHERE 
        OPR.OPR_TIP = 57 
        AND OPR.SKLAD_ID = :L_SKLAD_ID 
        AND OPR.KLI_ID = :L_KLI_ID 
        AND (OPR.OPR_DATE BETWEEN :L_RET_OPR_DATE AND :L_OPR_DATE) 
        AND IIF (OPR.OPR_DATE = CAST(:L_RET_OPR_DATE AS DATE), IIF (OPR.ID >= :L_OPR_ID,1,0),1) = 1 
        AND IIF(OPR.OPR_DATE = CAST(:L_OPR_DATE AS DATE), IIF(OPR.ID < :P_OPR_ID,1,0),1) = 1 
        AND OUT_EL.SIMPLE_ID = :L_SIMPLE_ID 
    ORDER BY OPR.OPR_DATE, OPR.ID, OUT_EL.ID 
    INTO 
        :L_OUT_EL_ID 
    DO BEGIN 
        IF (P_KOL <= 0.00) THEN 
            LEAVE; 
 
        FOR SELECT 
            PEN.ID, 
            PEN.KOL, 
            PEN.SUMA_FR, 
            PEN.SUMA_SR, 
            PN.ELEMENT_ID 
        FROM 
            PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = :L_OUT_EL_ID 
            AND PON.PARTIDA_NODE_ID = PEN.ID 
            INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
--        ORDER BY PEN.ID DESC --В ОБРАТЕН РЕД НА ИЗВЕЖДАНЕТО, ЗА ДА ВЪРНЕМ ПЪРВО ПОСЛЕДНИТЕ 
        INTO 
            :L_PEN_FROM_ID,:L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR,:L_PN_ELEMENT_ID 
        DO BEGIN 
            --НАМИРАМЕ КОЛКО ОТ ТАЗИ ПАРТИДА Я ИМА ВЪВ ДРУГО ВРЪЩАНЕ ПРЕДИ ТОВА 
            IF (P_KOL <= 0.00) THEN 
                LEAVE; 
 
            SELECT 
                SUM(PEN.KOL), 
                SUM(PEN.SUMA_FR), 
                SUM(PEN.SUMA_SR) 
            FROM 
                PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_RETURN_NODE PRN ON PRN.FROM_ID = :L_PEN_FROM_ID 
                AND PRN.TO_ID = PEN.ID 
            INTO 
                :L_RET_KOL,:L_RET_SUMA_FR,:L_RET_SUMA_SR; 
 
            L_RET_KOL = COALESCE(L_RET_KOL,0.00); 
 
            L_PEN_KOL = ROUND(L_PEN_KOL - COALESCE(L_RET_KOL,0.00),5); 
            L_PEN_SUMA_FR = ROUND(L_PEN_SUMA_FR - COALESCE(L_RET_SUMA_FR,0.00),2); 
            L_PEN_SUMA_SR = ROUND(L_PEN_SUMA_SR - COALESCE(L_RET_SUMA_SR,0.00),2); 
 
            --МОЖЕ ДА СЕ ВРЪЩА ОТ ТАЗИ ПАРТИДА 
            IF (L_PEN_KOL > 0.00) THEN BEGIN 
 
                IF (P_KOL < L_PEN_KOL) THEN BEGIN 
                    L_PEN_SUMA_FR = ROUND(ROUND(L_PEN_SUMA_FR / L_PEN_KOL,5) * P_KOL,2); 
                    L_PEN_SUMA_SR = ROUND(ROUND(L_PEN_SUMA_SR / L_PEN_KOL,5) * P_KOL,2); 
                    L_PEN_KOL = P_KOL; 
                END 
 
                P_KOL = ROUND(P_KOL - L_PEN_KOL,5);--КОЛКО ОСТАВА ЗА ТЪРСЕНЕ 
 
                L_PN_ID = NULL; 
 
                SELECT 
                    PN.ID 
                FROM 
                    PARTIDA_NAL PN 
                WHERE 
                    IN_EL_ID = :P_IN_EL_ID 
                    AND ELEMENT_ID = :L_PN_ELEMENT_ID 
                INTO 
                    :L_PN_ID; 
 
                IF (L_PN_ID IS NULL) THEN 
                    INSERT INTO PARTIDA_NAL (IN_EL_ID,ELEMENT_ID,KOL,SUMA_FR, SIMPLE_ID, SKLAD_ID) 
                    VALUES (:P_IN_EL_ID,:L_PN_ELEMENT_ID,0.00,0.00, :L_SIMPLE_ID,:L_SKLAD_ID) 
                    RETURNING ID INTO :L_PN_ID; 
 
                UPDATE PARTIDA_NAL SET 
                    KOL = ROUND(KOL + :L_PEN_KOL,5), 
                    SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR,2) 
                WHERE 
                    ID = :L_PN_ID; 
 
                UPDATE SUMI SET 
                    SUMI.SUMA = ROUND(SUMI.SUMA + :L_PEN_SUMA_FR,2), 
                    SUMI.SUMA_OST = ROUND(SUMI.SUMA_OST + :L_PEN_SUMA_FR,2) 
                WHERE 
                    SUMI.OPR_ID = :P_OPR_ID; 
 
                INSERT INTO PARTIDA_El_NODE(OPR_ID,KOL,SUMA_FR,SUMA_SR,PARTIDA_ID) 
                VALUES (:P_OPR_ID,:L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR,:L_PN_ID) 
                RETURNING ID INTO :L_PEN_ID; 
 
                INSERT INTO PARTIDA_IN_EL_NODE(IN_EL_ID,PARTIDA_NODE_ID) 
                VALUES (:P_IN_EL_ID,:L_PEN_ID); 
 
                INSERT INTO PARTIDA_RETURN_NODE(FROM_ID,TO_ID) 
                VALUES (:L_PEN_FROM_ID,:L_PEN_ID); 
 
                UPDATE OR INSERT INTO OPR_RAZPAD_NODE(IN_EL_ID, OUT_EL_ID) 
                VALUES (:P_IN_EL_ID, :L_OUT_EL_ID) 
                MATCHING (IN_EL_ID, OUT_EL_ID); 
            END 
        END 
    END 
 
 
    IF (P_KOL = 0.00) THEN BEGIN 
        R_RESULT = 0;--ВСИЧКО Е ВЪРНАТО, ЗНАЧИ Е НАРЕД 
 
        SELECT 
            SUMI.SUMA_OST 
        FROM 
            SUMI 
        WHERE 
            SUMI.OPR_ID = :P_OPR_ID 
        INTO 
            :L_PEN_SUMA_FR; 
 
        IF (L_PEN_SUMA_FR < 0.00) THEN 
            DELETE FROM OPR_PAYMENT_NODE 
            WHERE 
                ID IN (SELECT PAYMENT_NODE.NODE_ID FROM PAYMENT_NODE INNER JOIN SUMI ON SUMI.ID = PAYMENT_NODE.OPR_ID WHERE SUMI.OPR_ID = :P_OPR_ID); 
    END 
END^


ALTER PROCEDURE PARTIDA_HISTORY_RETURN_PROD (
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL,
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    R_KOL TYPE OF DOM_KOL)
AS
DECLARE VARIABLE L_OUT_EL_ID INTEGER;
DECLARE VARIABLE L_IZL_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_FLAG SMALLINT;
DECLARE VARIABLE L_PEN_ID INTEGER;
DECLARE VARIABLE L_PEN_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PEN_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_PEN_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_PN_ELEMENT_ID INTEGER;
DECLARE VARIABLE L_PEN_FROM_ID INTEGER;
DECLARE VARIABLE L_PN_ID INTEGER;
DECLARE VARIABLE L_RET_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_RET_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_RET_SUMA_SR DOUBLE PRECISION;
BEGIN
    SELECT
        OUT_EL_ID
    FROM
        OPR_RAZPAD_NODE ORN
    WHERE
        ORN.IN_EL_ID = :P_IN_EL_ID
    INTO
        :L_OUT_EL_ID;
                
    L_IZL_KOL = NULL;
    L_FLAG = NULL;

    SELECT
        IZL.KOL_IZL,
        IZL.FLAG_LOCK_KOR
    FROM
        IZL
    WHERE
        IZL.OUT_EL_ID = :L_OUT_EL_ID
    INTO
        :L_IZL_KOL,:L_FLAG;

    IF (L_FLAG IS NOT NULL) THEN BEGIN
        IF (P_KOL >= L_IZL_KOL) THEN
            UPDATE IZL SET
            KOL_IZL = 0.00
            WHERE OUT_EL_ID = :L_OUT_EL_ID;
        ELSE
            UPDATE IZL SET
            KOL_IZL = ROUND(KOL_IZL - :P_KOL,5)
            WHERE OUT_EL_ID = :L_OUT_EL_ID;
    END

    L_IZL_KOL = COALESCE(L_IZL_KOL,0.00);
    L_FLAG    = COALESCE(L_FLAG,0);

    IF (L_FLAG = 0) THEN BEGIN
        R_KOL = P_KOL;
    END
    ELSE BEGIN
        R_KOL = MAXVALUE(ROUND(P_KOL - L_IZL_KOL,5),0.00);--КОЛКО ТРЯБВА ДА СЕ ТЪРСИ ПО ПАРТИДИ
    END

    P_KOL = ROUND(P_KOL - L_IZL_KOL,5);--КОЛКО ТРЯБВА ДА СЕ ТЪРСИ ПО ПАРТИДИ

    FOR SELECT
        PEN.ID,
        PEN.KOL,
        PEN.SUMA_FR,
        PEN.SUMA_SR,
        PN.ELEMENT_ID
    FROM
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = :L_OUT_EL_ID
        AND PON.PARTIDA_NODE_ID = PEN.ID
        INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID
    ORDER BY PEN.ID DESC --В ОБРАТЕН РЕД НА ИЗВЕЖДАНЕТО, ЗА ДА ВЪРНЕМ ПЪРВО ПОСЛЕДНИТЕ
    INTO
        :L_PEN_FROM_ID,:L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR,:L_PN_ELEMENT_ID
    DO BEGIN
        --НАМИРАМЕ КОЛКО ОТ ТАЗИ ПАРТИДА Я ИМА ВЪВ ДРУГО ВРЪЩАНЕ ПРЕДИ ТОВА
        IF (P_KOL <= 0.00) THEN
            LEAVE;

        SELECT
            SUM(PEN.KOL),
            SUM(PEN.SUMA_FR),
            SUM(PEN.SUMA_SR)
        FROM
            PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_RETURN_NODE PRN ON PRN.FROM_ID = :L_PEN_FROM_ID
            AND PRN.TO_ID = PEN.ID
        INTO
            :L_RET_KOL,:L_RET_SUMA_FR,:L_RET_SUMA_SR;

        L_RET_KOL = COALESCE(L_RET_KOL,0.00);

        L_PEN_KOL = ROUND(L_PEN_KOL - COALESCE(L_RET_KOL,0.00),5);
        L_PEN_SUMA_FR = ROUND(L_PEN_SUMA_FR - COALESCE(L_RET_SUMA_FR,0.00),2);
        L_PEN_SUMA_SR = ROUND(L_PEN_SUMA_SR - COALESCE(L_RET_SUMA_SR,0.00),2);

        --МОЖЕ ДА СЕ ВРЪЩА ОТ ТАЗИ ПАРТИДА
        IF (L_PEN_KOL > 0.00) THEN BEGIN

            IF (P_KOL < L_PEN_KOL) THEN BEGIN
                L_PEN_SUMA_FR = ROUND(ROUND(L_PEN_SUMA_FR / L_PEN_KOL,5) * P_KOL,2);
                L_PEN_SUMA_SR = ROUND(ROUND(L_PEN_SUMA_SR / L_PEN_KOL,5) * P_KOL,2);
                L_PEN_KOL = P_KOL;
            END

            P_KOL = ROUND(P_KOL - L_PEN_KOL,5);--КОЛКО ОСТАВА ЗА ТЪРСЕНЕ

            SELECT
                PN.ID
            FROM
                PARTIDA_NAL PN
            WHERE
                IN_EL_ID = :P_IN_EL_ID
                AND ELEMENT_ID = :L_PN_ELEMENT_ID
            INTO
                :L_PN_ID;

            IF (L_PN_ID IS NULL) THEN
                INSERT INTO PARTIDA_NAL (IN_EL_ID,ELEMENT_ID,KOL,SUMA_FR)
                VALUES (:P_IN_EL_ID,:L_PN_ELEMENT_ID,0.00,0.00)
                RETURNING ID INTO :L_PN_ID;

            UPDATE PARTIDA_NAL SET
            KOL = ROUND(KOL + :L_PEN_KOL,5),
            SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR,2)
            WHERE ID = :L_PN_ID;

            INSERT INTO PARTIDA_El_NODE(OPR_ID,KOL,SUMA_FR,SUMA_SR,PARTIDA_ID)
            VALUES (:P_OPR_ID,:L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR,:L_PN_ID)
            RETURNING ID INTO :L_PEN_ID;

            INSERT INTO PARTIDA_IN_EL_NODE(IN_EL_ID,PARTIDA_NODE_ID)
            VALUES (:P_IN_EL_ID,:L_PEN_ID);

            INSERT INTO PARTIDA_RETURN_NODE(FROM_ID,TO_ID)
            VALUES (:L_PEN_FROM_ID,:L_PEN_ID);
        END
    END
END^


ALTER PROCEDURE PARTIDA_HISTORY_RETURN_PROD_OLD (
    P_IN_EL_ID INTEGER,
    P_KOL DOUBLE PRECISION)
RETURNS (
    R_KOL DOUBLE PRECISION)
AS
DECLARE VARIABLE L_OUT_EL_ID INTEGER; 
DECLARE VARIABLE L_FLAG SMALLINT; 
DECLARE VARIABLE L_PEN_KOL DOUBLE PRECISION; 
BEGIN 
    R_KOL = P_KOL; 
    SELECT 
        ORN.OUT_EL_ID 
    FROM 
        OPR_RAZPAD_NODE ORN 
    WHERE 
        ORN.IN_EL_ID = :P_IN_EL_ID 
    INTO 
        :L_OUT_EL_ID; 
 
    SELECT 
        SUM(PEN.KOL) 
    FROM 
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = :P_IN_EL_ID 
        AND PIN.PARTIDA_NODE_ID = PEN.ID 
    INTO 
        :L_PEN_KOL; 
 
    L_PEN_KOL = COALESCE(L_PEN_KOL,0.00); 
 
    IF (L_PEN_KOL >= R_KOL) THEN 
        EXIT;--НЯМА ИЗЛИШЪЦИ ИЗЛИЗА 
 
    --ПО ПАРТИДИ Е ВЛЕЗНАЛО ПО-МАЛКО ОТ КОЛИЕСТВОТО НА ЕЛЕМЕНТА. ЗНАЧИ Е НАМАЛИЛО НЯКАКВИ ИЗЛИШЪЦИ 
    L_FLAG = NULL; 
 
    SELECT 
        IZL.FLAG_LOCK_KOR 
    FROM 
        IZL 
    WHERE 
        IZL.OUT_EL_ID = :L_OUT_EL_ID 
    INTO 
        :L_FLAG; 
 
    UPDATE IZL SET 
    KOL_IZL = ROUND(KOL_IZL + ROUND(:P_KOL - :L_PEN_KOL,5),5) 
    WHERE OUT_EL_ID = :L_OUT_EL_ID; 
 
    IF (L_FLAG = 1) THEN 
        R_KOL = L_PEN_KOL; 
END^


ALTER PROCEDURE PARTIDA_HISTORY_RETURN_PROD_SN (
    P_IN_EL_ID TYPE OF DOM_KEY)
RETURNS (
    R_RESULT SMALLINT)
AS
DECLARE VARIABLE L_OUT_EL_ID INTEGER;
DECLARE VARIABLE L_RET_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_RET_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_PEN_IN_ID INTEGER;
DECLARE VARIABLE L_PEN_IN_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_PN_IN_ID INTEGER;
DECLARE VARIABLE L_PN_ELEMENT_ID INTEGER;
BEGIN
    R_RESULT = 1;

    SELECT
        ORN.OUT_EL_ID
    FROM
        OPR_RAZPAD_NODE ORN
    WHERE
        ORN.IN_EL_ID = :P_IN_EL_ID
    INTO
        :L_OUT_EL_ID;
                
    FOR SELECT
        PEN.ID,
        PEN.KOL,
        PEN.PARTIDA_ID,
        PN.ELEMENT_ID
    FROM
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.PARTIDA_NODE_ID = PEN.ID
        AND PIN.IN_EL_ID = :P_IN_EL_ID
        INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID
    INTO
        :L_PEN_IN_ID,:L_PEN_IN_KOL,:L_PN_IN_ID,:L_PN_ELEMENT_ID
    DO BEGIN

        SELECT
            PEN.SUMA_FR,
            PEN.SUMA_SR
        FROM
            PARTIDA_OUT_EL_NODE PON INNER JOIN PARTIDA_EL_NODE PEN ON PON.OUT_EL_ID = :L_OUT_EL_ID
            AND PON.PARTIDA_NODE_ID = PEN.ID
            INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID AND PN.ELEMENT_ID = :L_PN_ELEMENT_ID
        INTO
            :L_RET_SUMA_FR,:L_RET_SUMA_SR;

        UPDATE PARTIDA_EL_NODE SET
        SUMA_FR = ROUND(:L_RET_SUMA_FR,2),
        SUMA_SR = ROUND(:L_RET_SUMA_SR,2)
        WHERE ID = :L_PEN_IN_ID;

        UPDATE PARTIDA_NAL SET
        KOL = ROUND(KOL + :L_PEN_IN_KOL,5),
        SUMA_FR = ROUND(:L_RET_SUMA_FR,2)
        WHERE ID = :L_PN_IN_ID;
    END
    R_RESULT = 0;
END^


ALTER PROCEDURE PARTIDA_HISTORY_SUB_QUERY (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_DATE DATE,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT = NULL,
    P_FLAG_LAST SMALLINT = 0)
RETURNS (
    R_KOL DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_EL_ID INTEGER,
    R_OPR_ID INTEGER,
    R_OPR_TIP INTEGER,
    R_SKLAD_ID INTEGER,
    R_OPR_DATE DATE,
    R_IN_OUT SMALLINT)
AS
DECLARE VARIABLE L_SKLAD_FKT SMALLINT;
DECLARE VARIABLE L_SKLAD_OPR SMALLINT;
DECLARE VARIABLE L_IS_FKT SMALLINT;
BEGIN 
    IF (P_SKLAD_ID IS NULL) THEN BEGIN
        SELECT
            COALESCE(OPR.SKLAD_ID,0),
            SYSTEM.H_SKLAD 
        FROM 
            OPR,SYSTEM 
        WHERE 
            OPR.ID = :P_OPR_ID 
        INTO 
            :L_SKLAD_OPR,:L_SKLAD_FKT; 
    END
    ELSE BEGIN
        SELECT
            :P_SKLAD_ID,
            SYSTEM.H_SKLAD 
        FROM 
            OPR,SYSTEM 
        WHERE 
            OPR.ID = :P_OPR_ID 
        INTO 
            :L_SKLAD_OPR,:L_SKLAD_FKT; 
    END
        
 
    L_IS_FKT = IIF(L_SKLAD_FKT = L_SKLAD_OPR,1,0);
    
    IF (P_FLAG_LAST = 0) THEN BEGIN

        FOR SELECT 
            OUT_EL.KOL, 
            OUT_EL.SUMA_FR,
            OUT_EL.SUMA_SR,
            OUT_EL.ID, 
            OPR.ID, 
            OPR.OPR_TIP, 
            OPR.SKLAD_ID, 
            OPR.OPR_DATE, 
            CAST (0 AS SMALLINT) 
        FROM 
            OUT_EL INNER JOIN OPR ON OUT_EL.OPR_ID = OPR.ID
        WHERE 
            OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
            AND OUT_EL.IS_F = :L_IS_FKT 
            AND ((OPR.OPR_DATE > :P_DATE) OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID >= :P_OPR_ID)))
            AND OPR.OPR_TIP <> 47

        UNION ALL

        SELECT 
            IN_EL.KOL, 
            IN_EL.SUMA_FR,
            IN_EL.SUMA_SR,
            IN_EL.ID, 
            OPR.ID, 
            OPR.OPR_TIP, 
            OPR.SKLAD_ID, 
            OPR.OPR_DATE, 
            CAST (1 AS SMALLINT) 
        FROM 
            IN_EL INNER JOIN OPR ON IN_EL.OPR_ID = OPR.ID 
        WHERE 
            IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
            AND IN_EL.IS_F = :L_IS_FKT 
            AND ((OPR.OPR_DATE > :P_DATE) OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID >= :P_OPR_ID)))
            AND OPR.OPR_TIP <> 47

        UNION ALL
        --КОЛИЧЕСТВА КОИТО СА НЯМЕРЕНИ В ИНВЕНТАРИЗАЦИЯ ВЪВ ФАКТУРЕН ИЛИ НОРМАЛНИ СЛАДОВЕ,
        --ЗА КОИТО НЯМА ЕЛЕМЕНТИ В IN_EL ИЛИ OUT_EL
        SELECT 
            0.00, 
            0.00, 
            0.00, 
            0, 
            OPR.ID, 
            OPR.OPR_TIP, 
            OPR.SKLAD_ID, 
            OPR.OPR_DATE, 
            CAST (2 AS SMALLINT)
        FROM     
            INV_OPIS INNER JOIN OPR ON (INV_OPIS.OPR_ID = OPR.ID AND INV_OPIS.SIMPLE_ID = :P_SIMPLE_ID) 
        WHERE 
            OPR.SKLAD_ID = :L_SKLAD_FKT AND :L_SKLAD_FKT = :L_SKLAD_OPR
            AND ((OPR.OPR_DATE > :P_DATE)OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID >= :P_OPR_ID))) 
 
            AND NOT((EXISTS(SELECT OUT_EL.ID FROM OUT_EL WHERE OPR_ID = OPR.ID AND SIMPLE_ID = INV_OPIS.SIMPLE_ID)) 
            OR (EXISTS (SELECT IN_EL.ID FROM IN_EL WHERE OPR_ID = OPR.ID AND SIMPLE_ID = INV_OPIS.SIMPLE_ID))) 

        UNION ALL 
 
        SELECT 
            0.00, 
            0.00, 
            0.00, 
            0, 
            OPR.ID, 
            OPR.OPR_TIP, 
            OPR.SKLAD_ID, 
            OPR.OPR_DATE, 
            CAST (2 AS SMALLINT)
        FROM 
            INV_OPIS INNER JOIN OPR ON (INV_OPIS.OPR_ID = OPR.ID AND INV_OPIS.SIMPLE_ID = :P_SIMPLE_ID) 
        WHERE 
            NOT (:L_SKLAD_OPR = :L_SKLAD_FKT) 
            AND NOT (OPR.SKLAD_ID = :L_SKLAD_FKT) 
            AND ((OPR.OPR_DATE > :P_DATE)OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID >= :P_OPR_ID))) 
 
            AND NOT((EXISTS(SELECT OUT_EL.ID FROM OUT_EL WHERE OPR_ID = OPR.ID AND SIMPLE_ID = INV_OPIS.SIMPLE_ID)) 
            OR (EXISTS (SELECT IN_EL.ID FROM IN_EL WHERE OPR_ID = OPR.ID AND SIMPLE_ID = INV_OPIS.SIMPLE_ID))) 
        ORDER BY 8 DESC,5 DESC
        INTO 
            :R_KOL,:R_SUMA_SR,:R_SUMA_FR,:R_EL_ID,:R_OPR_ID, 
            :R_OPR_TIP,:R_SKLAD_ID,:R_OPR_DATE,:R_IN_OUT 
        DO 
            SUSPEND;
    END
    ELSE BEGIN
        FOR SELECT 
            OUT_EL.KOL, 
            OUT_EL.SUMA_FR,
            OUT_EL.SUMA_SR,
            OUT_EL.ID, 
            OPR.ID, 
            OPR.OPR_TIP, 
            OPR.SKLAD_ID, 
            OPR.OPR_DATE, 
            CAST (0 AS SMALLINT) 
        FROM 
            OUT_EL INNER JOIN OPR ON OUT_EL.OPR_ID = OPR.ID
        WHERE 
            OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
            AND OUT_EL.IS_F = :L_IS_FKT 
            AND ((OPR.OPR_DATE > :P_DATE) OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID >= :P_OPR_ID)))
            AND OPR.OPR_TIP <> 47
        PLAN
            JOIN (OPR INDEX (IDX_OPR_OPR_DATE, IDX_OPR_OPR_DATE, PK_OPR_ID), OUT_EL INDEX (FK_OUT_EL_OPR_ID,FK_OUT_EL_SIMPLE_ID))

        UNION ALL
        SELECT 
            IN_EL.KOL, 
            IN_EL.SUMA_FR,
            IN_EL.SUMA_SR,
            IN_EL.ID, 
            OPR.ID, 
            OPR.OPR_TIP, 
            OPR.SKLAD_ID, 
            OPR.OPR_DATE, 
            CAST (1 AS SMALLINT) 
        FROM 
            IN_EL INNER JOIN OPR ON IN_EL.OPR_ID = OPR.ID 
        WHERE 
            IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
            AND IN_EL.IS_F = :L_IS_FKT 
            AND ((OPR.OPR_DATE > :P_DATE) OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID >= :P_OPR_ID)))
            AND OPR.OPR_TIP <> 47
        PLAN
            JOIN (OPR INDEX (IDX_OPR_OPR_DATE, IDX_OPR_OPR_DATE, PK_OPR_ID), IN_EL INDEX (FK_IN_EL_OPR_ID, FK_IN_EL_SIMPLE_ID))

        UNION ALL
        --КОЛИЧЕСТВА КОИТО СА НЯМЕРЕНИ В ИНВЕНТАРИЗАЦИЯ ВЪВ ФАКТУРЕН ИЛИ НОРМАЛНИ СЛАДОВЕ,
        --ЗА КОИТО НЯМА ЕЛЕМЕНТИ В IN_EL ИЛИ OUT_EL
        SELECT 
            0.00, 
            0.00, 
            0.00, 
            0, 
            OPR.ID, 
            OPR.OPR_TIP, 
            OPR.SKLAD_ID, 
            OPR.OPR_DATE, 
            CAST (2 AS SMALLINT)
        FROM     
            INV_OPIS INNER JOIN OPR ON (INV_OPIS.OPR_ID = OPR.ID AND INV_OPIS.SIMPLE_ID = :P_SIMPLE_ID) 
        WHERE 
            OPR.SKLAD_ID = :L_SKLAD_FKT AND :L_SKLAD_FKT = :L_SKLAD_OPR
            AND ((OPR.OPR_DATE > :P_DATE)OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID >= :P_OPR_ID))) 
 
            AND NOT((EXISTS(SELECT OUT_EL.ID FROM OUT_EL WHERE OPR_ID = OPR.ID AND SIMPLE_ID = INV_OPIS.SIMPLE_ID)) 
            OR (EXISTS (SELECT IN_EL.ID FROM IN_EL WHERE OPR_ID = OPR.ID AND SIMPLE_ID = INV_OPIS.SIMPLE_ID))) 

        UNION ALL 
 
        SELECT 
            0.00, 
            0.00, 
            0.00, 
            0, 
            OPR.ID, 
            OPR.OPR_TIP, 
            OPR.SKLAD_ID, 
            OPR.OPR_DATE, 
            CAST (2 AS SMALLINT)
        FROM 
            INV_OPIS INNER JOIN OPR ON (INV_OPIS.OPR_ID = OPR.ID AND INV_OPIS.SIMPLE_ID = :P_SIMPLE_ID) 
        WHERE 
            NOT (:L_SKLAD_OPR = :L_SKLAD_FKT) 
            AND NOT (OPR.SKLAD_ID = :L_SKLAD_FKT) 
            AND ((OPR.OPR_DATE > :P_DATE)OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID >= :P_OPR_ID))) 
 
            AND NOT((EXISTS(SELECT OUT_EL.ID FROM OUT_EL WHERE OPR_ID = OPR.ID AND SIMPLE_ID = INV_OPIS.SIMPLE_ID)) 
            OR (EXISTS (SELECT IN_EL.ID FROM IN_EL WHERE OPR_ID = OPR.ID AND SIMPLE_ID = INV_OPIS.SIMPLE_ID))) 
        ORDER BY 8 DESC,5 DESC
        INTO 
            :R_KOL,:R_SUMA_SR,:R_SUMA_FR,:R_EL_ID,:R_OPR_ID, 
            :R_OPR_TIP,:R_SKLAD_ID,:R_OPR_DATE,:R_IN_OUT 
        DO 
            SUSPEND;
    END
END^


ALTER PROCEDURE PARTIDA_IN_DOST (
    P_KOL TYPE OF DOM_KOL,
    P_SUMA TYPE OF DOM_SUMA,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_SROK_DATE TYPE OF DOM_DATE)
RETURNS (
    R_PARTIDA_EL_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_PARTIDA_NAL_ID INTEGER;
BEGIN
    --ПРИ ДОСТАВКА И ДВЕТЕ СУМИ СА ЕДНАКВИ. ЗАТОВА СЕ ПОДАВА САМО ЕДНА СУМА

    --ДОБАВЯНЕ НА НОВ ЕЛЕМЕНТ НА ПАРТИДА

    INSERT INTO PARTIDA_EL (SROK) VALUES (:P_SROK_DATE)
    RETURNING ID INTO :R_PARTIDA_EL_ID;
 
    --ДОБАВЯНЕ НА НОВА ПАРТИДА
/*    INSERT INTO PARTIDA_NAL(KOL,SUMA_FR,IN_EL_ID,ELEMENT_ID)
    VALUES(:P_KOL,:P_SUMA,:P_IN_EL_ID,:R_PARTIDA_EL_ID)
    RETURNING ID INTO :L_PARTIDA_NAL_ID;*/

    INSERT INTO PARTIDA_NAL(KOL,SUMA_FR,IN_EL_ID,ELEMENT_ID)
    VALUES(0.00,0.00,:P_IN_EL_ID,:R_PARTIDA_EL_ID)
    RETURNING ID INTO :L_PARTIDA_NAL_ID;


    EXECUTE PROCEDURE NEW_PARTIDA_IN(P_KOL,P_SUMA,P_SUMA,L_PARTIDA_NAL_ID);
END^


ALTER PROCEDURE PARTIDA_IN_DOST_SN (
    P_KOL TYPE OF DOM_KOL,
    P_SUMA TYPE OF DOM_SUMA,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_SN TYPE OF DOM_CHAR_30,
    P_SROK_DATE TYPE OF DOM_DATE)
RETURNS (
    R_ELEMENT_ID INTEGER)
AS
DECLARE VARIABLE L_PARTIDA_NAL_ID INTEGER;
BEGIN
/*V.3*/
    INSERT INTO PARTIDA_EL (SROK) VALUES (:P_SROK_DATE)
    RETURNING ID INTO :R_ELEMENT_ID;

    INSERT INTO SERIAL_NUM(PARTIDA_EL_ID,SN)
    VALUES(:R_ELEMENT_ID,:P_SN);

    --ДОБАВЯНЕ НА НОВА ПАРТИДА
    INSERT INTO PARTIDA_NAL(KOL,SUMA_FR,IN_EL_ID,ELEMENT_ID)
    VALUES(0.00,0.00,:P_IN_EL_ID,:R_ELEMENT_ID)
    RETURNING ID INTO :L_PARTIDA_NAL_ID;

    EXECUTE PROCEDURE NEW_PARTIDA_IN(P_KOL,P_SUMA,P_SUMA,L_PARTIDA_NAL_ID);
END^


ALTER PROCEDURE PARTIDA_IN_FKT_DOST (
    P_OPR_ID INTEGER,
    P_FAKT_ID INTEGER,
    P_FLAG_IZL SMALLINT,
    P_REAL_DDS SMALLINT,
    P_FKT_DDS SMALLINT)
AS
declare variable L_IN_EL_ID integer; 
declare variable L_SIMPLE_ID integer; 
declare variable L_KOL double precision; 
declare variable L_SUMA double precision; 
declare variable L_SIMPLE_RSN char(1); 
declare variable L_PN_EL_ID integer; 
declare variable L_PN_KOL double precision; 
declare variable L_PN_SUMA double precision; 
declare variable L_GEN_FAK_IN_ID integer; 
declare variable L_GEN_PAR_NAL_ID integer; 
declare variable L_GEN_NODE_ID integer; 
declare variable L_FKT_SKLAD_ID smallint; 
declare variable L_FKT_OPR_DATE date; 
declare variable L_RESULT integer; 
declare variable L_DDS numeric(4,2); 
BEGIN 
/*V.3*/ 
 
    --ПЪРВО ПРЕИЗЧИСЛЯВАМ ДО МОМЕНТА НА ДОСТАВКАТА ОТ ФАКТУРЕН СКЛАД ЗА ПРОДУКТИТЕ С КОЛИЧЕСТВЕНИ ПАРТИДИ 
    --ИЗВЛИЧАМ ДАННИТЕ ЗА Ф.ДОСТАВКА ЗА ДА ЗНАМ КАТО ДАТА ДО КОГА ДА ВРЪЩАМ 
 
    SELECT 
        OPR.SKLAD_ID, 
        OPR.OPR_DATE 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :L_FKT_SKLAD_ID,:L_FKT_OPR_DATE; 
 
    FOR SELECT 
        IN_EL.SIMPLE_ID, 
        SIMPLE.RSN 
    FROM 
        FAK_IN INNER JOIN FAK_IN_EL_NODE ON (FAK_IN.OPR_ID = :P_FAKT_ID AND FAK_IN.ID = FAK_IN_EL_NODE.FAK_IN_ID) 
        INNER JOIN IN_EL ON (IN_EL.ID = FAK_IN_EL_NODE.IN_EL_ID) 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
    WHERE 
        IN_EL.IS_F = 0 
    GROUP BY 1,2 
    INTO 
        :L_SIMPLE_ID,:L_SIMPLE_RSN 
    DO BEGIN 
        IF (L_SIMPLE_RSN = '1') THEN 
            EXECUTE PROCEDURE PARTIDA_HISTORY_OLD_PARTIDA_SN(P_OPR_ID,L_SIMPLE_ID,L_FKT_OPR_DATE, 
            L_FKT_OPR_DATE,L_FKT_SKLAD_ID); 
        ELSE 
            EXECUTE PROCEDURE PARTIDA_HISTORY_OLD_PARTIDA(P_OPR_ID,L_SIMPLE_ID,L_FKT_OPR_DATE, 
                              L_FKT_OPR_DATE,L_FKT_SKLAD_ID); 
    END 
 
    --НАМИРАМ ИН_ЕЛ УЧАСТВАЩИ ВЪВ ФАКТУРАТА И ЗА ВСЕКИ ОТ ТЯХ ТЪРСЯ ДАННИТЕ ЗА ПАРТИДА 
 
    FOR SELECT 
        IN_EL.ID, 
        IN_EL.SIMPLE_ID, 
        IN_EL.KOL, 
        IN_EL.SUMA_FR, 
        SIMPLE.RSN, 
        SIMPLE.DDS 
    FROM 
        FAK_IN INNER JOIN FAK_IN_EL_NODE ON (FAK_IN.OPR_ID = :P_FAKT_ID AND FAK_IN.ID = FAK_IN_EL_NODE.FAK_IN_ID) 
        INNER JOIN IN_EL ON (IN_EL.ID = FAK_IN_EL_NODE.IN_EL_ID) 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
    WHERE 
        IN_EL.IS_F = 0 
    INTO 
        :L_IN_EL_ID,:L_SIMPLE_ID,:L_KOL,:L_SUMA,:L_SIMPLE_RSN, :L_DDS 
    DO BEGIN 
        IF (P_REAL_DDS <> P_FKT_DDS) THEN BEGIN 
            IF (P_REAL_DDS > P_FKT_DDS) THEN 
                L_SUMA = ROUND(L_SUMA / (1 + L_DDS / 100), 2); --РЕАЛЕН С ДДС, ФАКТУРЕН БЕЗ 
            ELSE 
                L_SUMA = ROUND(L_SUMA * (1 + L_DDS / 100), 2); 
        END 
 
        INSERT INTO IN_EL(SIMPLE_ID,OPR_ID,SUMA_FR,SUMA_SR,KOL,IS_F) 
        VALUES(:L_SIMPLE_ID,:P_OPR_ID,:L_SUMA,:L_SUMA,:L_KOL,1) 
        RETURNING (ID) INTO :L_GEN_FAK_IN_ID; 
 
        INSERT INTO IN_TO_FAK_EL(IN_EL_ID,FAK_IN_EL_ID) 
        VALUES(:L_IN_EL_ID,:L_GEN_FAK_IN_ID); 
 
        FOR SELECT 
            PN.ELEMENT_ID, 
            PEN.KOL, 
            PEN.SUMA_FR 
        FROM 
            PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.PARTIDA_NODE_ID = PEN.ID 
            AND PIN.IN_EL_ID = :L_IN_EL_ID 
            INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
        INTO 
            :L_PN_EL_ID,:L_PN_KOL,:L_PN_SUMA 
        DO BEGIN 
            --ДОБАВЯНЕ НА НОВА ПАРТИДА 
 
            L_GEN_PAR_NAL_ID = GEN_ID(GEN_PARTIDA_NAL_ID,1); 
            IF (P_REAL_DDS <> P_FKT_DDS) THEN BEGIN 
                IF (P_REAL_DDS > P_FKT_DDS) THEN 
                    L_PN_SUMA = ROUND(L_PN_SUMA / (1 + L_DDS / 100), 2); --РЕАЛЕН С ДДС, ФАКТУРЕН БЕЗ 
                ELSE 
                    L_PN_SUMA = ROUND(L_PN_SUMA * (1 + L_DDS / 100),2); 
            END 
 
            IF (L_SIMPLE_RSN = '0') THEN 
                INSERT INTO PARTIDA_NAL(KOL,SUMA_FR,IN_EL_ID,ELEMENT_ID,SIMPLE_ID, SKLAD_ID) 
                VALUES(0.00,0.00,:L_GEN_FAK_IN_ID,:L_PN_EL_ID, :L_SIMPLE_ID, :L_FKT_SKLAD_ID) 
                RETURNING (ID) INTO :L_GEN_PAR_NAL_ID; 
 
            ELSE 
                INSERT INTO PARTIDA_NAL(KOL,SUMA_FR,IN_EL_ID,ELEMENT_ID,SIMPLE_ID, SKLAD_ID) 
                VALUES(0,0.00,:L_GEN_FAK_IN_ID,:L_PN_EL_ID, :L_SIMPLE_ID, :L_FKT_SKLAD_ID) 
                RETURNING (ID) INTO :L_GEN_PAR_NAL_ID; 
 
            --СВЪРЗВАНЕ НА НОВИЯ ЕЛЕМНТ С ОПЕРАЦИЯТА, КОЯТО ГО Е СЪЗДАЛА И 
            INSERT INTO PARTIDA_EL_NODE(OPR_ID,KOL,SUMA_FR,SUMA_SR,PARTIDA_ID) 
            VALUES (:P_OPR_ID,:L_PN_KOL,:L_PN_SUMA,:L_PN_SUMA,:L_GEN_PAR_NAL_ID) 
            RETURNING (ID) INTO :L_GEN_NODE_ID; 
 
            INSERT INTO PARTIDA_IN_EL_NODE(IN_EL_ID,PARTIDA_NODE_ID) 
            VALUES(:L_GEN_FAK_IN_ID,:L_GEN_NODE_ID); 
 
        END 
    END 
 
    FOR SELECT 
        IN_EL.SIMPLE_ID, 
        SIMPLE.RSN 
    FROM 
        FAK_IN INNER JOIN FAK_IN_EL_NODE ON (FAK_IN.OPR_ID = :P_FAKT_ID AND FAK_IN.ID = FAK_IN_EL_NODE.FAK_IN_ID) 
        INNER JOIN IN_EL ON (IN_EL.ID = FAK_IN_EL_NODE.IN_EL_ID) 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
    WHERE 
        IN_EL.IS_F = 0 
    GROUP BY 1,2 
    INTO 
        :L_SIMPLE_ID,:L_SIMPLE_RSN 
    DO BEGIN 
        IF (L_SIMPLE_RSN = '1') THEN 
            EXECUTE PROCEDURE PARTIDA_HISTORY_NEW_PARTIDA_SN(P_OPR_ID,L_SIMPLE_ID,L_FKT_OPR_DATE, 
                              L_FKT_OPR_DATE,L_FKT_SKLAD_ID) 
            RETURNING_VALUES :L_RESULT; 
        ELSE 
            EXECUTE PROCEDURE PARTIDA_HISTORY_NEW_PARTIDA(P_OPR_ID,L_SIMPLE_ID,L_FKT_OPR_DATE, 
                              L_FKT_OPR_DATE,P_FLAG_IZL,L_FKT_SKLAD_ID) 
            RETURNING_VALUES :L_RESULT; 
 
    END 
 
    UPDATE OPR SET SUMA = (SELECT SUM(IN_EL.SUMA_FR) FROM IN_EL WHERE IN_EL.OPR_ID = :P_OPR_ID) 
    WHERE OPR.ID = :P_OPR_ID; 
END^


ALTER PROCEDURE PARTIDA_IN_IZL (
    P_KOL TYPE OF DOM_KOL,
    P_SUMA_FR TYPE OF DOM_SUMA,
    P_SUMA_SR TYPE OF DOM_KOL,
    P_OPR_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_PARTIDA_NAL_ID TYPE OF DOM_KEY,
    P_CMP_RZV TYPE OF DOM_SMAL_INT = 1)
RETURNS (
    R_KOL TYPE OF DOM_KOL,
    R_SUMA_FR TYPE OF DOM_SUMA,
    R_SUMA_SR TYPE OF DOM_SUMA)
AS
DECLARE VARIABLE L_IZL_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_IZL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OUT_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OUT_EL_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_GEN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_IZL_METOD TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_OPR_DATE TYPE OF DOM_DATE; 
DECLARE VARIABLE L_UPDATE_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_UPDATE_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_UPDATE_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_IS_FKT TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_IZL_TYPE TYPE OF DOM_FLAG; 
DECLARE VARIABLE L_IZL_DATE TYPE OF DOM_DATE; 
DECLARE VARIABLE L_DEPTH TYPE OF DOM_SMAL_INT; 
BEGIN 
/*V.15*/ 
-- ВРЪЩА КОЛИЕСТВА И СУМИ С КОИТО Е КОМПЕНСИРАЛО ИЗЛИШЪЦИ 
 
    L_KOL = NULL; 
 
    SELECT 
        OPR.OPR_DATE 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :L_OPR_DATE; 
 
    SELECT 
        SYSTEM.IZL_METOD, 
        SYSTEM.IZL_TYPE 
    FROM 
        SYSTEM 
    INTO 
        :L_IZL_METOD, :L_IZL_TYPE; 
 
    L_UPDATE_KOL = 0.00; 
    L_UPDATE_SUMA_FR = 0.00; 
    L_UPDATE_SUMA_SR = 0.00; 
 
    IF (L_IZL_METOD = 0) THEN BEGIN 
        FOR SELECT 
            IZL.ID, 
            IZL.OUT_EL_ID, 
            IZL.KOL_IZL, 
            OUT_EL.OPR_ID, 
            OPR.OPR_TIP, 
            OUT_EL.IS_F, 
            OPR.OPR_DATE 
        FROM 
            OUT_EL INNER JOIN IZL ON IZL.OUT_EL_ID = OUT_EL.ID AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
            INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
            INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID AND SKLAD.ID = :P_SKLAD_ID 
        WHERE 
            IZL.KOL_IZL > 0 
            AND IZL.FLAG_LOCK_KOR = 0 
             AND ((:L_IZL_TYPE = 0 AND  OPR.OPR_DATE = :L_OPR_DATE) OR (:L_IZL_TYPE = 1)) 
        ORDER BY 
            OPR.OPR_DATE,OPR.ID 
        INTO 
            :L_IZL_ID,:L_OUT_EL_ID,:L_IZL_KOL,:L_OUT_EL_OPR_ID,:L_OPR_TIP,:L_IS_FKT,:L_IZL_DATE 
        DO IF(ROUND(P_KOL,5) > 0.00) THEN BEGIN 
 
            IF (P_KOL > L_IZL_KOL) THEN BEGIN 
                L_SUMA_FR = ROUND(ROUND(:P_SUMA_FR / :P_KOL,5) * :L_IZL_KOL,2); 
                L_SUMA_SR = ROUND(ROUND(:P_SUMA_SR / :P_KOL,5) * :L_IZL_KOL,2); 
                L_KOL = ROUND(L_IZL_KOL,5); 
 
                P_SUMA_FR = ROUND(P_SUMA_FR - L_SUMA_FR,2); 
                P_SUMA_SR = ROUND(P_SUMA_SR - L_SUMA_SR,2); 
                P_KOL = ROUND(P_KOL - L_IZL_KOL,5); 
            END 
            ELSE BEGIN 
                L_SUMA_SR = ROUND(P_SUMA_SR,2); 
                L_SUMA_FR = ROUND(P_SUMA_FR,2); 
                L_KOL = ROUND(P_KOL,5); 
 
                P_SUMA_FR = 0.00; 
                P_SUMA_SR = 0.00; 
                P_KOL = 0.00; 
            END 
 
            UPDATE OUT_EL SET 
                SUMA_FR = ROUND(SUMA_FR + :L_SUMA_FR,2), 
                SUMA_SR = ROUND(SUMA_SR + :L_SUMA_SR,2) 
            WHERE 
                ID = :L_OUT_EL_ID; 
 
            IF (P_OPR_ID <> L_OUT_EL_OPR_ID) THEN BEGIN 
                UPDATE OPR_SUMI SET 
                SUMA_FR = ROUND(SUMA_FR + COALESCE(:L_SUMA_FR,0.00),2), 
                SUMA_SR = ROUND(SUMA_SR + COALESCE(:L_SUMA_SR,0.00),2) 
                WHERE OPR_ID = :L_OUT_EL_OPR_ID; 
            END 
 
            UPDATE PARTIDA_NAL SET 
                KOL = ROUND(KOL - :L_KOL,5), 
                SUMA_FR = ROUND(SUMA_FR - :L_SUMA_FR,2) 
            WHERE 
                ID = :P_PARTIDA_NAL_ID; 
 
            --ДОБАВЯНЕ НА НОВ ЗАПИС В PARTIDA_EL_NODE 
            INSERT INTO PARTIDA_EL_NODE(OPR_ID,KOL,SUMA_FR,SUMA_SR,PARTIDA_ID) 
            VALUES (:L_OUT_EL_OPR_ID,ROUND(:L_KOL,5),ROUND(:L_SUMA_FR,2),ROUND(:L_SUMA_SR,2),:P_PARTIDA_NAL_ID) 
            RETURNING ID INTO :L_GEN_ID; 
 
            INSERT INTO PARTIDA_OUT_EL_NODE(OUT_EL_ID,PARTIDA_NODE_ID) 
            VALUES(:L_OUT_EL_ID, :L_GEN_ID); 
 
            INSERT INTO PARTIDA_IZL_NODE(PARTIDA_EL_ID,IZL_ID) 
            VALUES(:L_GEN_ID,:L_IZL_ID); 
 
            L_UPDATE_KOL = ROUND(L_UPDATE_KOL + L_KOL,5); 
            L_UPDATE_SUMA_FR = ROUND(L_UPDATE_SUMA_FR + L_SUMA_FR,5); 
            L_UPDATE_SUMA_SR = ROUND(L_UPDATE_SUMA_SR + L_SUMA_SR,5); 
 
            IF (L_OPR_TIP IN (32,76)) /*AND (:L_IZL_TYPE = 0))*/ THEN BEGIN 
                SELECT 
                    TMP_SIMPLE_RECALC.DEPTH 
                FROM 
                    TMP_SIMPLE_RECALC 
                WHERE 
                    TMP_SIMPLE_RECALC.SIMPLE_ID = :P_SIMPLE_ID 
                INTO 
                    :L_DEPTH; 
 
                EXECUTE PROCEDURE FIND_SIMPLES_FOR_RECALC(:L_OUT_EL_OPR_ID,:P_SIMPLE_ID,:L_OPR_DATE,:L_IZL_DATE,:L_IS_FKT, COaLESCE(:L_DEPTH, 0)) 
                RETURNING_VALUES :L_IZL_ID; 
            END 
        END 
    END 
    ELSE BEGIN 
        FOR SELECT 
            IZL.ID, 
            IZL.OUT_EL_ID, 
            IZL.KOL_IZL, 
            OUT_EL.OPR_ID, 
            OPR.OPR_TIP, 
            OUT_EL.IS_F, 
            OPR.OPR_DATE 
        FROM 
            OUT_EL INNER JOIN IZL ON IZL.OUT_EL_ID+0 = OUT_EL.ID AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
            INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
            INNER JOIN SKLAD ON SKLAD.ID = OPR.SKLAD_ID AND SKLAD.ID = :P_SKLAD_ID 
        WHERE 
            IZL.KOL_IZL > 0 
            AND IZL.FLAG_LOCK_KOR = 0 
            AND ((:L_IZL_TYPE = 0 AND  OPR.OPR_DATE = :L_OPR_DATE) OR (:L_IZL_TYPE = 1)) 
        ORDER BY OPR.OPR_DATE,OPR.ID 
        INTO 
        :L_IZL_ID,:L_OUT_EL_ID,:L_IZL_KOL,:L_OUT_EL_OPR_ID,:L_OPR_TIP,:L_IS_FKT,:L_IZL_DATE 
        DO IF(ROUND(P_KOL,5) > 0.00) THEN BEGIN 
 
            IF (P_KOL > L_IZL_KOL) THEN BEGIN 
                L_SUMA_FR = ROUND(ROUND(:P_SUMA_FR / :P_KOL,5) * :L_IZL_KOL,2); 
                L_SUMA_SR = ROUND(ROUND(:P_SUMA_SR / :P_KOL,5) * :L_IZL_KOL,2); 
                L_KOL = ROUND(L_IZL_KOL,5); 
 
                P_SUMA_FR = ROUND(P_SUMA_FR - L_SUMA_FR,2); 
                P_SUMA_SR = ROUND(P_SUMA_SR - L_SUMA_SR,2); 
                P_KOL = ROUND(P_KOL - L_IZL_KOL,5); 
            END 
            ELSE BEGIN 
                L_SUMA_SR = ROUND(P_SUMA_SR,2); 
                L_SUMA_FR = ROUND(P_SUMA_FR,2); 
                L_KOL = ROUND(P_KOL,5); 
 
                P_SUMA_FR = 0.00; 
                P_SUMA_SR = 0.00; 
                P_KOL = 0.00; 
            END 
 
            UPDATE OUT_EL SET 
                SUMA_FR = ROUND(SUMA_FR + :L_SUMA_FR,2), 
                SUMA_SR = ROUND(SUMA_SR + :L_SUMA_SR,2) 
            WHERE 
                ID = :L_OUT_EL_ID; 
 
            IF (P_OPR_ID <> L_OUT_EL_OPR_ID) THEN BEGIN 
                UPDATE OPR_SUMI SET 
                    SUMA_FR = ROUND(SUMA_FR + COALESCE(:L_SUMA_FR,0.00),2), 
                    SUMA_SR = ROUND(SUMA_SR + COALESCE(:L_SUMA_SR,0.00),2) 
                WHERE 
                    OPR_ID = :L_OUT_EL_OPR_ID; 
            END 
 
            UPDATE PARTIDA_NAL SET 
                KOL = ROUND(KOL - :L_KOL,5), 
                SUMA_FR = ROUND(SUMA_FR - :L_SUMA_FR,2) 
            WHERE 
                ID = :P_PARTIDA_NAL_ID; 
 
            --ДОБАВЯНЕ НА НОВ ЗАПИС В PARTIDA_EL_NODE 
            INSERT INTO PARTIDA_EL_NODE(OPR_ID,KOL,SUMA_FR,SUMA_SR,PARTIDA_ID) 
            VALUES (:L_OUT_EL_OPR_ID,ROUND(:L_KOL,5),ROUND(COALESCE(:L_SUMA_FR,0.00),2), ROUND(COALESCE(:L_SUMA_SR,0.00),2), :P_PARTIDA_NAL_ID) 
            RETURNING ID INTO :L_GEN_ID; 
 
            INSERT INTO PARTIDA_OUT_EL_NODE(OUT_EL_ID,PARTIDA_NODE_ID) 
            VALUES(:L_OUT_EL_ID, :L_GEN_ID); 
 
            INSERT INTO PARTIDA_IZL_NODE(PARTIDA_EL_ID,IZL_ID) 
            VALUES(:L_GEN_ID,:L_IZL_ID); 
 
            L_UPDATE_KOL = ROUND(L_UPDATE_KOL + L_KOL,5); 
            L_UPDATE_SUMA_FR = ROUND(L_UPDATE_SUMA_FR + L_SUMA_FR,5); 
            L_UPDATE_SUMA_SR = ROUND(L_UPDATE_SUMA_SR + L_SUMA_SR,5); 
 
            IF (L_OPR_TIP IN (32,76)) /*AND (:L_IZL_TYPE = 0))*/ THEN BEGIN 
                SELECT 
                    TMP_SIMPLE_RECALC.DEPTH 
                FROM 
                    TMP_SIMPLE_RECALC 
                WHERE 
                    TMP_SIMPLE_RECALC.SIMPLE_ID = :P_SIMPLE_ID 
                INTO 
                    :L_DEPTH; 
 
                EXECUTE PROCEDURE FIND_SIMPLES_FOR_RECALC(:L_OUT_EL_OPR_ID,:P_SIMPLE_ID,:L_OPR_DATE,:L_IZL_DATE,:L_IS_FKT, COALESCE(:L_DEPTH, 0)) 
                RETURNING_VALUES :L_IZL_ID; 
            END 
        END 
    END 
 
    R_KOL = L_UPDATE_KOL; 
    R_SUMA_SR = L_UPDATE_SUMA_SR; 
    R_SUMA_FR = L_UPDATE_SUMA_FR; 
 
--    UPDATE TMP_NAL SET 
--        KOL = ROUND(KOL - :L_UPDATE_KOL,5), 
--        SUMA_FR = ROUND(SUMA_FR - :L_UPDATE_SUMA_FR,2), 
--        SUMA_SR = ROUND(SUMA_SR - :L_UPDATE_SUMA_SR,2) 
--    WHERE 
--        TMP_NAL.SKLAD_ID = :P_SKLAD_ID 
--        AND TMP_NAL.SIMPLE_ID = :P_SIMPLE_ID; 
END^


ALTER PROCEDURE PARTIDA_IN_PRODUCTION (
    P_IN_EL_ID TYPE OF DOM_KEY)
RETURNS (
    R_RESULT TYPE OF DOM_SMAL_INT)
AS
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_RSN TYPE OF DOM_BOOLEAN; 
DECLARE VARIABLE L_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_IN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PEN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PEN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PEN_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_UPDATE_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_UPDATE_SUMA_SR TYPE OF DOM_SUMA; 
BEGIN 
    SELECT 
        IN_EL.OPR_ID, 
        IN_EL.KOL, 
        OPR.SKLAD_ID, 
        SIMPLE.ID, 
        SIMPLE.RSN 
    FROM 
        IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
    WHERE 
        IN_EL.ID = :P_IN_EL_ID 
    INTO 
        :L_OPR_ID,:L_IN_KOL,:L_SKLAD_ID,:L_SIMPLE_ID,:L_RSN; 
 
    IF (L_RSN = '1') THEN 
        EXECUTE PROCEDURE PROIZVODSTVO_SN(:P_IN_EL_ID); 
    ELSE 
        EXECUTE PROCEDURE PROIZVODSTVO_NO_SN(:P_IN_EL_ID); 
 
    L_UPDATE_SUMA_FR = 0.00; 
    L_UPDATE_SUMA_SR = 0.00; 
 
    FOR SELECT 
        PEN.PARTIDA_ID, 
        PEN.KOL, 
        PEN.SUMA_FR, 
        PEN.SUMA_SR 
    FROM 
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = :P_IN_EL_ID 
        AND PIN.PARTIDA_NODE_ID = PEN.ID 
    INTO 
        :L_PN_ID,:L_PEN_KOL,:L_PEN_SUMA_FR, :L_PEN_SUMA_SR 
    DO BEGIN 
        UPDATE PARTIDA_NAL SET 
            KOL = ROUND(:L_PEN_KOL,5), 
            SUMA_FR = ROUND(:L_PEN_SUMA_FR,2) 
        WHERE 
            ID = :L_PN_ID; 
 
        L_UPDATE_SUMA_FR = ROUND(L_UPDATE_SUMA_FR + L_PEN_SUMA_FR,2); 
        L_UPDATE_SUMA_SR = ROUND(L_UPDATE_SUMA_SR + L_PEN_SUMA_SR,2); 
    END 
 
 
    UPDATE NAL SET 
        KOL_NAL = ROUND(KOL_NAL + :L_IN_KOL,5), 
        SUMA = ROUND(SUMA + :L_UPDATE_SUMA_SR,2), 
        SUMA_FR = ROUND(SUMA_FR + :L_UPDATE_SUMA_FR,2) 
    WHERE 
        SIMPLE_ID = :L_SIMPLE_ID 
        AND SKLAD_ID = :L_SKLAD_ID; 
 
    UPDATE IN_EL SET 
        SUMA_FR = ROUND(:L_UPDATE_SUMA_FR,2), 
        SUMA_SR = ROUND(:L_UPDATE_SUMA_SR, 2) 
    WHERE 
        ID = :P_IN_EL_ID; 
 
    UPDATE OPR_SUMI SET 
        SUMA_FR = ROUND(SUMA_FR + :L_UPDATE_SUMA_FR,2), 
        SUMA_SR = ROUND(SUMA_SR + :L_UPDATE_SUMA_SR,2) 
    WHERE 
        OPR_ID = :L_OPR_ID; 
 
    IF (L_RSN != '1') THEN BEGIN 
        FOR SELECT 
            PEN.KOL, 
            PEN.SUMA_FR, 
            PEN.SUMA_SR, 
            PEN.PARTIDA_ID 
        FROM 
            PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = :P_IN_EL_ID 
            AND PEN.ID = PIN.PARTIDA_NODE_ID 
        ORDER BY PEN.ID 
        INTO 
            :L_IN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR,:L_PN_ID 
        DO BEGIN 
            EXECUTE PROCEDURE PARTIDA_IN_IZL(L_IN_KOL,L_PEN_SUMA_FR,L_PEN_SUMA_SR, L_OPR_ID,L_SKLAD_ID,L_SIMPLE_ID,L_PN_ID) 
            RETURNING_VALUES (:L_IN_KOL, :L_PEN_SUMA_FR, :L_PEN_SUMA_SR); 
 
            UPDATE NAL SET 
                KOL_NAL = ROUND(KOL_NAL - :L_IN_KOL, 5), 
                SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR, 2), 
                SUMA = ROUND(SUMA - :L_PEN_SUMA_SR, 2) 
            WHERE 
                SKLAD_ID = :L_SKLAD_ID 
                AND SIMPLE_ID = :L_SIMPLE_ID; 
        END 
    END 
 
    R_RESULT = 0; 
END^


ALTER PROCEDURE PARTIDA_IZL_KI_DOST (
    P_IN_EL_ID TYPE OF DOM_KEY)
RETURNS (
    R_RESULT TYPE OF DOM_SMAL_INT)
AS
DECLARE VARIABLE L_IN_EL_SIMPLE_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_IN_EL_SKLAD_ID TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_IN_EL_OPR_DATE TYPE OF DOM_DATE; 
DECLARE VARIABLE L_PEN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PEN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PEN_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PEN_PARTIDA_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_NAL_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_NAL_CENA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_OUT_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OUT_EL_PEN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OUT_EL_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OUT_EL_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_OUT_EL_PEN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_OUT_EL_PEN_SUMA_SR TYPE OF DOM_SUMA; 
BEGIN 
    R_RESULT = 0; 
 
    SELECT 
        OPR.OPR_DATE, 
        OPR.SKLAD_ID, 
        IN_EL.SIMPLE_ID 
    FROM 
        IN_EL INNER JOIN OPR ON IN_EL.ID = :P_IN_EL_ID AND IN_EL.OPR_ID = OPR.ID 
    INTO 
        :L_IN_EL_OPR_DATE,:L_IN_EL_SKLAD_ID,:L_IN_EL_SIMPLE_ID; 
 
    IF(NOT EXISTS ( 
        SELECT 
            OPR.ID 
        FROM 
            OPR_RAZPAD_NODE ORN INNER JOIN OUT_EL ON OUT_EL.ID = ORN.OUT_EL_ID AND ORN.IN_EL_ID = :P_IN_EL_ID 
            INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.OPR_TIP = 39 AND OPR.OPR_DATE < :L_IN_EL_OPR_DATE)) 
    THEN 
        EXIT; 
        --НЯМА КРЕДИТНИ ЗА ТОЗИ ЕЛЕМЕНТ, КОИТО ДА СА ПРЕДИ НЕГОВАТА ОПЕРАЦИЯ. ПРОВЕРКАТА Е ПО ДАТА, ЗАЩОТО 
        --АКО Е НА СЪЩАТА ДАТА ИЛИ ПО-НОВА ТОГАВА КРЕДИТНОТО ЩЕ Е СЛЕДВАЩО В ИСТОРИЯТА НА ОПЕРАЦИИТЕ 
 
    SELECT 
        ROUND(NAL.KOL_NAL,5), 
        ROUND(NAL.SUMA,2) 
    FROM 
        NAL 
    WHERE 
        NAL.SKLAD_ID = :L_IN_EL_SKLAD_ID 
        AND NAL.SIMPLE_ID = :L_IN_EL_SIMPLE_ID 
    INTO 
        :L_NAL_KOL,:L_NAL_CENA_SR; 
 
    L_NAL_CENA_SR = ROUND(L_NAL_CENA_SR / L_NAL_KOL,5);--ПОЛУЧАВАМЕ СРЕДАНА ЦЕНА, С КОЯТО ДА СЕ ОСТОЙНОСТЯТ ИЗХОДИТЕ 
 
    SELECT 
        ROUND(PEN.KOL,5), 
        ROUND(PEN.SUMA_FR,2), 
        PEN.PARTIDA_ID 
    FROM 
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.PARTIDA_NODE_ID = PEN.ID 
        AND PIN.IN_EL_ID = :P_IN_EL_ID 
    INTO 
        :L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_PARTIDA_ID; 
 
    L_PEN_SUMA_SR = ROUND(L_PEN_KOL * L_NAL_CENA_SR,2); --СУМА СРЕДНА ЗА ПАРТИДИТА. ИЗЧИСЛЯВА СЕ ТАКА, ЗАЩОТО 
    --В НАЛИЧНОСТИ МОЖЕ ДА ИМА ДРУГИ КОЛИЧЕСТВА И СУМИ 
 
    FOR SELECT 
        OUT_EL.ID, 
        OUT_EL.OPR_ID, 
        ROUND(OUT_EL.KOL,5) 
    FROM 
        OUT_EL INNER JOIN OPR_RAZPAD_NODE ORN ON ORN.IN_EL_ID = :P_IN_EL_ID AND OUT_EL.ID = ORN.OUT_EL_ID 
        INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.OPR_TIP = 39 AND OPR.OPR_DATE < :L_IN_EL_OPR_DATE 
    ORDER BY 
        OPR.OPR_DATE,OPR.ID, OUT_EL.ID 
    INTO 
        :L_OUT_EL_ID,:L_OUT_EL_OPR_ID,:L_OUT_EL_KOL 
    DO BEGIN 
        IF (L_PEN_KOL = 0.00) THEN BEGIN 
            --КОЛИЧЕСТВОТО ЗА ПАРТИДАТА Е СВЪРШИЛО, НО ИМА ОЩЕ ЕЛЕМЕНТИ ЗА ВРЪЩАНЕ 
            R_RESULT = L_OUT_EL_OPR_ID; 
            EXIT; 
        END 
 
        IF (L_OUT_EL_KOL < L_PEN_KOL) THEN BEGIN 
            L_OUT_EL_PEN_SUMA_FR = ROUND(ROUND(L_PEN_SUMA_FR / L_PEN_KOL,5) * L_OUT_EL_KOL,2); 
            L_OUT_EL_PEN_SUMA_SR = ROUND(ROUND(L_PEN_SUMA_SR / L_PEN_KOL,5) * L_OUT_EL_KOL,2); 
        END 
        ELSE BEGIN 
            --ОБИРАТ СЕ РАЗЛИКИТЕ 
            L_OUT_EL_PEN_SUMA_FR = ROUND(L_PEN_SUMA_FR,2); 
            L_OUT_EL_PEN_SUMA_SR = ROUND(L_PEN_SUMA_SR,2); 
        END 
 
        L_PEN_KOL = ROUND(L_PEN_KOL - :L_OUT_EL_KOL,5); 
        L_PEN_SUMA_FR = ROUND(L_PEN_SUMA_FR - :L_OUT_EL_PEN_SUMA_FR,2); 
        L_PEN_SUMA_SR = ROUND(L_PEN_SUMA_SR - :L_OUT_EL_PEN_SUMA_SR,2); 
 
 
        INSERT INTO PARTIDA_EL_NODE (OPR_ID,KOL,SUMA_FR,SUMA_SR,PARTIDA_ID) 
        VALUES (:L_OUT_EL_OPR_ID,:L_OUT_EL_KOL,:L_OUT_EL_PEN_SUMA_FR,:L_OUT_EL_PEN_SUMA_SR,:L_PEN_PARTIDA_ID) 
        RETURNING ID INTO :L_OUT_EL_PEN_ID; 
 
        INSERT INTO PARTIDA_OUT_EL_NODE(OUT_EL_ID,PARTIDA_NODE_ID) 
        VALUES (:L_OUT_EL_ID,:L_OUT_EL_PEN_ID); 
 
        UPDATE NAL SET 
        KOL_NAL = ROUND(KOL_NAL - :L_OUT_EL_KOL,5), 
        SUMA = ROUND(SUMA - :L_OUT_EL_PEN_SUMA_SR,2), 
        SUMA_FR = ROUND(SUMA_FR - :L_OUT_EL_PEN_SUMA_FR,2) 
        WHERE SKLAD_ID = :L_IN_EL_SKLAD_ID 
        AND SIMPLE_ID = :L_IN_EL_SIMPLE_ID; 
 
        UPDATE PARTIDA_NAL SET 
        KOL = ROUND(KOL - :L_OUT_EL_KOL,5), 
        SUMA_FR = ROUND(SUMA_FR - :L_OUT_EL_PEN_SUMA_FR,2) 
        WHERE ID = :L_PEN_PARTIDA_ID; 
 
        UPDATE OPR_SUMI SET 
        SUMA_FR = ROUND(SUMA_FR + :L_OUT_EL_PEN_SUMA_FR,2), 
        SUMA_SR = ROUND(SUMA_SR + :L_OUT_EL_PEN_SUMA_SR,2) 
        WHERE OPR_ID = :L_OUT_EL_OPR_ID; 
 
        UPDATE OUT_EL SET 
        SUMA_FR = ROUND(SUMA_FR + :L_OUT_EL_PEN_SUMA_FR,2), 
        SUMA_SR = ROUND(SUMA_SR + :L_OUT_EL_PEN_SUMA_SR,2) 
        WHERE ID = :L_OUT_EL_ID; 
    END 
END^


ALTER PROCEDURE PARTIDA_OUT_MOVE (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT,
    P_FLAG_IZL TYPE OF DOM_FLAG,
    P_IN_EL_ID TYPE OF DOM_KEY)
RETURNS (
    R_RESULT TYPE OF DOM_SMAL_INT)
AS
DECLARE VARIABLE L_IN_EL_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_IN_EL_SKLAD_ID TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_PN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PN_ELEMENT_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PEN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PEN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PEN_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PEN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_NAL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_UPDATE_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_UPDATE_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_UPDATE_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_CENA_SR TYPE OF DOM_CENA; 
BEGIN 
    EXECUTE PROCEDURE PARTIDA_OUT_NEW(P_OPR_ID,P_SIMPLE_ID,P_OUT_EL_ID,P_KOL,P_SKLAD_ID,P_FLAG_IZL) 
    RETURNING_VALUES :R_RESULT; 
 
    IF (R_RESULT = 1) THEN 
        EXIT; 
 
    SELECT 
        IN_EL.OPR_ID, 
        OPR.SKLAD_ID 
    FROM 
        IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
    WHERE 
        IN_EL.ID = :P_IN_EL_ID 
    INTO 
        :L_IN_EL_OPR_ID,:L_IN_EL_SKLAD_ID; 
 
    L_UPDATE_KOL = 0.00; 
    L_UPDATE_SUMA_FR = 0.00; 
    L_UPDATE_SUMA_SR = 0.00; 
 
    FOR SELECT 
        PEN.KOL, 
        PEN.SUMA_FR, 
        PEN.SUMA_SR, 
        PEN.PARTIDA_ID 
    FROM 
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.PARTIDA_NODE_ID = PEN.ID 
        AND PON.OUT_EL_ID = :P_OUT_EL_ID 
    INTO 
        :L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR,:L_PN_ID 
    DO BEGIN 
        SELECT 
            ELEMENT_ID 
        FROM 
            PARTIDA_NAL 
        WHERE 
            ID = :L_PN_ID 
        INTO 
            :L_PN_ELEMENT_ID; 
 
        L_PN_ID = NULL; 
 
        SELECT 
            ID 
        FROM 
            PARTIDA_NAL 
        WHERE 
            IN_EL_ID = :P_IN_EL_ID 
            AND ELEMENT_ID = :L_PN_ELEMENT_ID 
        INTO 
            :L_PN_ID; 
 
        IF (L_PN_ID IS NULL) THEN 
            INSERT INTO PARTIDA_NAL (IN_EL_ID,ELEMENT_ID,KOL,SUMA_FR, SIMPLE_ID, SKLAD_ID) 
            VALUES(:P_IN_EL_ID,:L_PN_ELEMENT_ID,ROUND(0.00,5),ROUND(0.00,2), :P_SIMPLE_ID,:L_IN_EL_SKLAD_ID) 
            RETURNING ID INTO :L_PN_ID; 
 
        INSERT INTO PARTIDA_EL_NODE(OPR_ID,PARTIDA_ID,KOL,SUMA_FR,SUMA_SR) 
        VALUES(:L_IN_EL_OPR_ID,:L_PN_ID,ROUND(:L_PEN_KOL,5),ROUND(:L_PEN_SUMA_FR,2),ROUND(:L_PEN_SUMA_SR,2)) 
        RETURNING ID INTO :L_PEN_ID; 
 
        INSERT INTO PARTIDA_IN_EL_NODE(IN_EL_ID,PARTIDA_NODE_ID) 
        VALUES(:P_IN_EL_ID,:L_PEN_ID); 
 
        UPDATE PARTIDA_NAL SET 
            KOL = ROUND(KOL + :L_PEN_KOL,5), 
            SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR,2) 
        WHERE 
            ID = :L_PN_ID; 
 
        L_UPDATE_KOL = ROUND(L_UPDATE_KOL + L_PEN_KOL,5); 
        L_UPDATE_SUMA_FR = ROUND(L_UPDATE_SUMA_FR + L_PEN_SUMA_FR,2); 
        L_UPDATE_SUMA_SR = ROUND(L_UPDATE_SUMA_SR + L_PEN_SUMA_SR,2); 
    END 
 
    SELECT 
        NAL.ID 
    FROM 
        NAL 
    WHERE 
        SIMPLE_ID = :P_SIMPLE_ID 
        AND SKLAD_ID = :P_SKLAD_ID 
    INTO 
        :L_NAL_ID; 
 
    IF (L_NAL_ID IS NULL) THEN 
        INSERT INTO NAL(SIMPLE_ID,SKLAD_ID,KOL_NAL,SUMA,SUMA_FR,LAST_CENA) 
        VALUES(:P_SIMPLE_ID,:P_SKLAD_ID,0.00,0.00,0.00,ROUND(:L_PEN_SUMA_SR / :L_PEN_KOL,5)); 
 
    UPDATE NAL SET 
        KOL_NAL = ROUND(KOL_NAL + :L_UPDATE_KOL,5), 
        SUMA = ROUND(SUMA + :L_UPDATE_SUMA_SR,2), 
        SUMA_FR = ROUND(SUMA_FR + :L_UPDATE_SUMA_FR,2) 
    WHERE 
        SIMPLE_ID = :P_SIMPLE_ID 
        AND SKLAD_ID = :L_IN_EL_SKLAD_ID; 
 
    UPDATE IN_EL SET 
        SUMA_FR = ROUND(:L_UPDATE_SUMA_FR,2), 
        SUMA_SR = ROUND(:L_UPDATE_SUMA_SR, 2) 
    WHERE 
        ID = :P_IN_EL_ID; 
 
    UPDATE OPR_SUMI SET 
        SUMA_FR = ROUND(SUMA_FR + :L_UPDATE_SUMA_FR,2), 
        SUMA_SR = ROUND(SUMA_SR + :L_UPDATE_SUMA_SR,2) 
    WHERE 
        OPR_ID = :L_IN_EL_OPR_ID; 
 
    SELECT 
        NAL.KOL_NAL, 
        NAL.SUMA 
    FROM 
        NAL 
    WHERE 
        SIMPLE_ID = :P_SIMPLE_ID 
        AND SKLAD_ID = :L_IN_EL_SKLAD_ID 
    INTO 
        :L_PEN_KOL, :L_CENA_SR; 
 
    L_CENA_SR = ROUND(L_CENA_SR / L_PEN_KOL,5); 
 
    FOR SELECT 
        PEN.KOL, 
        PEN.SUMA_FR, 
        PEN.PARTIDA_ID 
    FROM 
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = :P_IN_EL_ID 
        AND PEN.ID = PIN.PARTIDA_NODE_ID 
    ORDER BY PEN.ID 
    INTO 
        :L_PEN_KOL,:L_PEN_SUMA_FR,:L_PN_ID 
    DO BEGIN 
        EXECUTE PROCEDURE PARTIDA_IN_IZL(L_PEN_KOL,L_PEN_SUMA_FR,ROUND(L_CENA_SR * L_PEN_KOL,2), L_IN_EL_OPR_ID, 
        L_IN_EL_SKLAD_ID,P_SIMPLE_ID,L_PN_ID, 0) 
        RETURNING_VALUES (:L_PEN_KOL, :L_PEN_SUMA_FR, :L_PEN_SUMA_SR); 
 
        UPDATE NAL SET 
            KOL_NAL = ROUND(KOL_NAL - :L_PEN_KOL, 5), 
            SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR, 2), 
            SUMA = ROUND(SUMA - :L_PEN_SUMA_SR, 2) 
        WHERE 
            SKLAD_ID = :L_IN_EL_SKLAD_ID 
            AND SIMPLE_ID = :P_SIMPLE_ID; 
    END 
 
    R_RESULT = 0; 
END^


ALTER PROCEDURE PARTIDA_OUT_NEW (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SIMPLE_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT,
    P_FLAG_IZL TYPE OF DOM_SMAL_INT)
RETURNS (
    R_RESULT TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_NAL_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_NAL_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PEN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PEN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PEN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PEN_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_LAST_CENA TYPE OF DOM_CENA; 
DECLARE VARIABLE L_RSN TYPE OF DOM_BOOLEAN; 
DECLARE VARIABLE L_NAL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_IS_FKT TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_UPDATE_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_UPDATE_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_UPDATE_SUMA_SR TYPE OF DOM_SUMA; 
BEGIN 
    SELECT 
        OPR.OPR_TIP 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :L_OPR_TIP; 
 
    R_RESULT = 1; 
 
    SELECT 
        SIMPLE.RSN 
    FROM 
        SIMPLE 
    WHERE 
        ID = :P_SIMPLE_ID 
    INTO 
        :L_RSN; 
 
    SELECT FIRST 1 
        IIF (SYSTEM.H_SKLAD = :P_SKLAD_ID,1,0) 
    FROM 
        SYSTEM 
    INTO 
        :L_IS_FKT; 
 
    SELECT 
        NAL.ID 
    FROM 
        NAL 
    WHERE 
        SIMPLE_ID = :P_SIMPLE_ID 
        AND SKLAD_ID = :P_SKLAD_ID 
    INTO 
        :L_NAL_ID; 
 
    IF (L_NAL_ID IS NULL) THEN 
        INSERT INTO NAL(SIMPLE_ID,SKLAD_ID,KOL_NAL,SUMA,SUMA_FR) 
        VALUES(:P_SIMPLE_ID,:P_SKLAD_ID,0.00,0.00,0.00); 
 
    SELECT 
        NAL.KOL_NAL, 
        NAL.SUMA , 
        IIF(:L_IS_FKT = 0,SKLAD.F_OTR_KOL,:P_FLAG_IZL) 
    FROM 
        NAL INNER JOIN SKLAD ON SKLAD.ID = NAL.SKLAD_ID 
    WHERE 
        SIMPLE_ID = :P_SIMPLE_ID 
        AND SKLAD_ID = :P_SKLAD_ID 
    INTO 
        :L_NAL_KOL,:L_NAL_SUMA_SR, :P_FLAG_IZL; 
 
    IF (L_OPR_TIP = 57) THEN 
        P_FLAG_IZL = 0; 
 
    L_UPDATE_KOL = 0.00; 
    L_UPDATE_SUMA_FR = 0.00; 
    L_UPDATE_SUMA_SR = 0.00; 
 
    --ПЪРВО ПРОБВАМЕ СВОБОДНИТЕ ПАРТИДИ. 
    IF (L_RSN <> '1') THEN BEGIN 
        FOR WITH IN_PARTIDA AS ( 
        SELECT 
            PN.ELEMENT_ID, 
            OPR.ID AS OPR_ID, 
            OPR.OPR_DATE, 
            IN_EL.SIMPLE_ID, 
            IN_EL.IS_F 
        FROM 
            PARTIDA_NAL PN INNER JOIN IN_EL ON IN_EL.ID = PN.IN_EL_ID 
            INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
        WHERE 
            OPR.OPR_TIP IN (1,3,12,14,22,28,33,55,77) 
            AND IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
            AND IN_EL.IS_F = :L_IS_FKT) 
 
        SELECT 
            PN.ID, 
            PN.KOL, 
            PN.SUMA_FR 
        FROM 
            PARTIDA_NAL PN INNER JOIN IN_PARTIDA VPI ON VPI.ELEMENT_ID = PN.ELEMENT_ID AND PN.SKLAD_ID = :P_SKLAD_ID 
        WHERE 
            IIF(PN.KOL > 0.00, IN_EL_ID, NULL) > 0 
            ORDER BY VPI.OPR_DATE,VPI.OPR_ID,PN.IN_EL_ID 
 
        INTO 
            :L_PN_ID,:L_PN_KOL,:L_PN_SUMA_FR 
        DO IF (P_KOL > 0.00) THEN BEGIN 
            --НАМИРАМЕ КОЛКО ОТ КОЛИЧЕСТВОТО Е ЗАПАЗЕНО ЗА ВРЪЩАНЕ 
 
            IF (L_PN_KOL > P_KOL) THEN BEGIN 
                L_PEN_KOL = ROUND(P_KOL,5); 
                L_PEN_SUMA_FR = ROUND(ROUND(L_PN_SUMA_FR / L_PN_KOL,5) * L_PEN_KOL,2); 
            END 
            ELSE BEGIN 
                L_PEN_KOL = ROUND(L_PN_KOL,5); 
                L_PEN_SUMA_FR = ROUND(L_PN_SUMA_FR,2); 
            END 
 
            IF (L_NAL_KOL > L_PEN_KOL) THEN BEGIN 
                L_PEN_SUMA_SR = ROUND(ROUND(L_NAL_SUMA_SR / L_NAL_KOL,5) * L_PEN_KOL,2); 
            END 
            ELSE BEGIN 
                L_PEN_SUMA_SR = ROUND(L_NAL_SUMA_SR,2); 
            END 
 
            INSERT INTO PARTIDA_EL_NODE(PARTIDA_ID,KOL,SUMA_FR,SUMA_SR,OPR_ID) 
            VALUES (:L_PN_ID,:L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR,:P_OPR_ID) 
            RETURNING ID INTO :L_PEN_ID; 
 
            INSERT INTO PARTIDA_OUT_EL_NODE(PARTIDA_NODE_ID,OUT_EL_ID) 
            VALUES (:L_PEN_ID,:P_OUT_EL_ID); 
 
            UPDATE PARTIDA_NAL SET 
                KOL = ROUND(KOL - :L_PEN_KOL,5), 
                SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR,2) 
            WHERE 
                ID = :L_PN_ID; 
 
            P_KOL = ROUND(P_KOL - L_PEN_KOL,5); 
            L_NAL_KOL = ROUND(L_NAL_KOL - L_PEN_KOL,5); 
            L_NAL_SUMA_SR = ROUND(L_NAL_SUMA_SR - L_PEN_SUMA_SR,2); 
 
            L_UPDATE_KOL = ROUND(L_UPDATE_KOL + L_PEN_KOL,5); 
            L_UPDATE_SUMA_FR = ROUND(L_UPDATE_SUMA_FR + L_PEN_SUMA_FR,2); 
            L_UPDATE_SUMA_SR = ROUND(L_UPDATE_SUMA_SR + L_PEN_SUMA_SR,2); 
        END 
 
        IF (ROUND(P_KOL, 5) > 0.00) THEN BEGIN 
            IF (P_FLAG_IZL = 0) THEN 
                EXIT; 
 
            --ИМА НЯКАКВО НЕРАЗПРЕДЕЛЕНО КОЛ. ИЛИ НЯМА ЗАПАЗЕНИ КОЛИЧЕСТВА 
            --ИЛИ ОПЕРАЦИЯТА НЕ МОЖЕ ДА ИЗПЛЗВА ЗАПАЗЕНИТЕ И ЩЕ СЕ ГЕНЕРИРА 
            --ИЗЛИШЪК. ПРАВИ СЕ ПРОВЕРКА ДАЛИ МОЖЕ - АКО НЕ ИЗХОД. 
            SELECT 
                NAL.LAST_CENA 
            FROM 
                NAL 
            WHERE 
                SKLAD_ID = :P_SKLAD_ID 
                AND SIMPLE_ID = :P_SIMPLE_ID 
            INTO 
                :L_LAST_CENA; 
 
            INSERT INTO IZL (KOL,OUT_EL_ID,LAST_CENA,SIMPLE_ID,SKLAD_ID) 
            VALUES (ROUND(:P_KOL,5),:P_OUT_EL_ID,ROUND(:L_LAST_CENA,5),:P_SIMPLE_ID,:P_SKLAD_ID); 
        END 
    END 
    ELSE BEGIN 
        IF (L_NAL_KOL < P_KOL) THEN 
            EXIT; 
 
        FOR SELECT 
            PN.ID, 
            PN.KOL, 
            PN.SUMA_FR, 
            PEN.KOL, 
            PEN.ID 
        FROM 
            PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = :P_OUT_EL_ID AND PEN.ID = PON.PARTIDA_NODE_ID 
            INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
        INTO 
            :L_PN_ID,:L_PN_KOL,:L_PN_SUMA_FR,:L_PEN_KOL,:L_PEN_ID 
        DO BEGIN 
 
            IF (L_PN_KOL < L_PEN_KOL) THEN 
                --В ПАРТИДАТА НЯМА ДОСТАТЪЧНО КОЛИЧЕСТВО ЗА СЪОТВЕТНИЯ ИЗХОД 
                EXIT; 
 
            IF (L_PN_KOL > P_KOL) THEN BEGIN 
                L_PEN_KOL = ROUND(P_KOL,5); 
                L_PEN_SUMA_FR = ROUND(ROUND(L_PN_SUMA_FR / L_PN_KOL,5) * L_PEN_KOL,2); 
            END 
            ELSE BEGIN 
                L_PEN_KOL = ROUND(L_PN_KOL,5); 
                L_PEN_SUMA_FR = ROUND(L_PN_SUMA_FR,2); 
            END 
 
            IF (L_NAL_KOL > L_PEN_KOL) THEN BEGIN 
                L_PEN_SUMA_SR = ROUND(ROUND(L_NAL_SUMA_SR / L_NAL_KOL,5) * L_PEN_KOL,2); 
            END 
            ELSE BEGIN 
                L_PEN_SUMA_SR = ROUND(L_NAL_SUMA_SR,2); 
            END 
 
            UPDATE PARTIDA_EL_NODE SET 
                SUMA_FR = ROUND(:L_PEN_SUMA_FR,2), 
                SUMA_SR = ROUND(:L_PEN_SUMA_SR,2) 
            WHERE 
                ID = :L_PEN_ID; 
 
            UPDATE PARTIDA_NAL SET 
                KOL = ROUND(KOL - :L_PEN_KOL,5), 
                SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR,2) 
            WHERE 
                ID = :L_PN_ID; 
 
            P_KOL = ROUND(P_KOL - L_PEN_KOL,5); 
            L_NAL_KOL = ROUND(L_NAL_KOL - L_PEN_KOL,5); 
            L_NAL_SUMA_SR = ROUND(L_NAL_SUMA_SR - L_PEN_SUMA_SR,2); 
 
            L_UPDATE_KOL = ROUND(L_UPDATE_KOL + L_PEN_KOL,5); 
            L_UPDATE_SUMA_FR = ROUND(L_UPDATE_SUMA_FR + L_PEN_SUMA_FR,2); 
            L_UPDATE_SUMA_SR = ROUND(L_UPDATE_SUMA_SR + L_PEN_SUMA_SR,2); 
        END 
    END 
 
 
    UPDATE NAL SET 
        KOL_NAL = ROUND(KOL_NAL - :L_UPDATE_KOL,5), 
        SUMA = ROUND(SUMA - :L_UPDATE_SUMA_SR,2), 
        SUMA_FR = ROUND(SUMA_FR - :L_UPDATE_SUMA_FR,2) 
    WHERE 
        SIMPLE_ID = :P_SIMPLE_ID 
        AND SKLAD_ID = :P_SKLAD_ID; 
 
 
    UPDATE OUT_EL SET 
        SUMA_FR = ROUND(:L_UPDATE_SUMA_FR,2), 
        SUMA_SR = ROUND(:L_UPDATE_SUMA_SR, 2) 
    WHERE 
        ID = :P_OUT_EL_ID; 
 
    UPDATE OPR_SUMI SET 
        SUMA_FR = ROUND(SUMA_FR + :L_UPDATE_SUMA_FR,2), 
        SUMA_SR = ROUND(SUMA_SR + :L_UPDATE_SUMA_SR,2) 
    WHERE 
        OPR_ID = :P_OPR_ID; 
 
    IF (L_OPR_TIP = 57) THEN BEGIN 
        UPDATE SUMI SET 
            SUMA = ROUND(SUMA + :L_UPDATE_SUMA_FR,2), 
            SUMA_OST = ROUND(SUMA_OST + :L_UPDATE_SUMA_FR,2) 
        WHERE 
            SUMI.OPR_ID = :P_OPR_ID; 
    END 
 
    R_RESULT = 0; 
END^


ALTER PROCEDURE PARTIDA_OUT_SN_INV (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL)
AS
DECLARE VARIABLE L_PEN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PN_ID TYPE OF DOM_KEY; 
BEGIN 
-- V.7 
-- ПРОДУКТ С ДАДЕН СЕРИЕН НОМЕР СЕ ОТБЕЛЯЗВА ЗА ИЗХОД ОТ СКЛАД 
-- ЗА ЦЕЛТА 
-- 1. НАМИРАМ ПАРТИДАТА ПО ЕЛЕМЕНТА СЪС СЕРИЙНИЯ НОМЕР - ОТ НЕЯ ИЗВЛИЧАМ СУМАТА И IN_EL_ID 
-- 2. ДОБАВЯМ В ТАБЛИЦА PARTIDA_EL_NODE ЗАПИС, ЧЕ ДАДЕНИЯ ЕЛЕМЕНТ Е ИЗПОЛЗВАН В ОПЕРАЦИЯ ЗА 
-- ИЗХОД ОТ СКЛАДА(ПАРАМЕТЪР P_OPR_ID) 
-- 3. ДОБАВЯМ ВРЪЗКАТА МЕЖДУ ЕЛЕМЕНТ ОТ ИЗХОДА(В СЛУЧАЯ ИНВЕНТАРИЗАЦИЯ - ЛИПСИ) 
-- И ИЗВАЖДАМ ОТ ДАДЕНАТА ПАРТИДА, СЪДЪРЖАЩА ТОЗИ ЕЛЕМЕНТ 
-- 
-- НЕ ПРАВЯ ПРОВЕРКА ДАЛИ IN_EL Е ЗА ФАКТУРЕН СКЛАД ИЛИ НЕ, ЗАЩОТО ТУК СЕ ПОДАВА 
-- ДИРЕКТНО ЕЛЕМЕНТА НА СЕРИЙНИЯ НОМЕР. ПРЕДПОЛАГА СЕ ЧЕ СМАТА ИНВЕНТАРИЗАЦИЯ 
-- Е ЗАРЕДИЛА ИЛИ ФАКТУРЕН СКЛАД Е НЕГОВИТЕ ЕЛЕМЕНТИ ИЛИ НЯКОЙ РЕАЛЕН И СЕ ПОДАВАТ 
-- САМО ФАКТУРНИ ИЛИ НЕФАКТУРНИ ЕЛЕМЕНТИ 
 
    SELECT 
        PN.ID 
    FROM 
        PARTIDA_NAL PN 
    WHERE 
        PN.ELEMENT_ID = :P_ELEMENT_ID 
        AND PN.IN_EL_ID = :P_IN_EL_ID 
    INTO 
        :L_PN_ID; 
 
    INSERT INTO PARTIDA_EL_NODE (OPR_ID, KOL, SUMA_FR, SUMA_SR, PARTIDA_ID) 
    VALUES(:P_OPR_ID, :P_KOL, 0.00, 0.00, :L_PN_ID) 
    RETURNING ID INTO :L_PEN_ID; 
 
    INSERT INTO PARTIDA_OUT_EL_NODE(OUT_EL_ID, PARTIDA_NODE_ID) 
    VALUES(:P_OUT_EL_ID, :L_PEN_ID); 
END^


ALTER PROCEDURE PARTIDA_OUT_SN_IZP (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL)
AS
BEGIN 
-- V.4 
-- ПРОДУКТ С ДАДЕН СЕРИЕН НОМЕР СЕ ОТБЕЛЯЗВА ЗА ИЗХОД ОТ СКЛАД 
-- ЗА ЦЕЛТА ИЗВИКВАМ ПРОЦЕДУРАТА ЗА СЕРИЙНИ НОМЕРА ПРИ ИНВЕНТАРИЗАЦИЯ 
-- ТЕ СА АНАЛОГИЧНИ. 
    EXECUTE PROCEDURE PARTIDA_OUT_SN_INV(:P_OPR_ID, :P_OUT_EL_ID, :P_ELEMENT_ID, :P_IN_EL_ID, :P_KOL); 
END^


ALTER PROCEDURE PARTIDA_OUT_SN_MOVE (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_OUT_IN_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL)
AS
DECLARE VARIABLE L_PN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PEN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_IN_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_KEY; 
BEGIN 
--V.9 
-- ПРОДУКТ С ДАДЕН СЕРИЕН НОМЕР СЕ ОТБЕЛЯЗВА ЗА ИЗХОД ОТ СКЛАД 
-- ЗА ЦЕЛТА 
-- 1. НАМИРАМ ПАРТИДАТА ПО ЕЛЕМЕНТА СЪС СЕРИЙНИЯ НОМЕР - ОТ НЕЯ ИЗВЛИЧАМ СУМАТА И IN_EL_ID 
-- 2. ДОБАВЯМ В ТАБЛИЦА PARTIDA_EL_NODE ЗАПИС, ЧЕ ДАДЕНИЯ ЕЛЕМЕНТ Е ИЗПОЛЗВАН В ОПЕРАЦИЯ ЗА 
-- ИЗХОД ОТ СКЛАДА(ПАРАМЕТЪР P_OPR_ID) 
-- 3. ДОБАВЯМ ВРЪЗКАТА МЕЖДУ ЕЛЕМЕНТ ОТ ИЗХОДА(В СЛУЧАЯ ПРЕХВЪРЛЯНЕ) 
-- И ИЗВАЖДАМ ОТ ДАДЕНАТА ПАРТИДА, СЪДЪРЖАЩА ТОЗИ ЕЛЕМЕНТ 
-- 4. ДОБАВЯМ ЗАПИСИ ЗА ВХОДЯЩИТЕ ЕЛЕМЕНТИ ВЪВ СКЛАДА КЪМ КОЙТО СЕ ПРЕХВЪРЛЯ: 
--  СЪЗДАВАМ ПАРТИДА, ПРОМЯНАМ NAL 
-- 
-- ПРЕХВЪРЛЯНЕТО НЕ РАБОТИ С ФАКТУРЕН СКЛАД 
    SELECT 
        PN.ID 
    FROM 
        PARTIDA_NAL PN 
    WHERE 
        PN.ELEMENT_ID = :P_ELEMENT_ID 
        AND PN.IN_EL_ID = :P_OUT_IN_EL_ID 
    INTO 
        :L_PN_ID; 
 
    INSERT INTO PARTIDA_EL_NODE (OPR_ID, KOL, SUMA_FR, SUMA_SR, PARTIDA_ID) 
    VALUES(:P_OPR_ID, :P_KOL, 0.00, 0.00, :L_PN_ID) 
    RETURNING ID INTO :L_PEN_ID; 
 
    INSERT INTO PARTIDA_OUT_EL_NODE (OUT_EL_ID, PARTIDA_NODE_ID) 
    VALUES(:P_OUT_EL_ID, :L_PEN_ID); 
 
    --ВЪВЕЖДАМ ПАРТИДИТЕ ЗА ВХОД НА ДРУГИЯ СКЛАД 
 
    SELECT 
        OPR.ID, 
        OPR.SKLAD_ID, 
        IN_EL.SIMPLE_ID 
    FROM 
       IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
    WHERE 
        IN_EL.ID = :P_IN_EL_ID 
    INTO 
        :L_IN_OPR_ID, :L_SKLAD_ID, :L_SIMPLE_ID; 
 
    UPDATE OR INSERT INTO PARTIDA_NAL(ELEMENT_ID, IN_EL_ID, KOL, SUMA_FR, SIMPLE_ID, SKLAD_ID) 
    VALUES (:P_ELEMENT_ID, :P_IN_EL_ID, 0.00, 0.00, :L_SIMPLE_ID, :L_SKLAD_ID) 
    MATCHING(ELEMENT_ID, IN_EL_ID) 
    RETURNING ID INTO :L_PN_ID; 
 
    INSERT INTO PARTIDA_EL_NODE(OPR_ID, KOL, SUMA_FR, SUMA_SR, PARTIDA_ID) 
    VALUES(:L_IN_OPR_ID, :P_KOL, 0.00, 0.00, :L_PN_ID) 
    RETURNING ID INTO :L_PEN_ID; 
 
    INSERT INTO PARTIDA_IN_EL_NODE (PARTIDA_NODE_ID, IN_EL_ID) 
    VALUES (:L_PEN_ID, :P_IN_EL_ID); 
END^


ALTER PROCEDURE PARTIDA_OUT_SN_PROD (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL)
AS
DECLARE VARIABLE L_PEN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PARTIDA_ID TYPE OF DOM_KEY; 
BEGIN 
-- V.6 
-- ПРОДУКТ С ДАДЕН СЕРИЕН НОМЕР СЕ ОТБЕЛЯЗВА ЗА ИЗХОД ОТ СКЛАДА 
    SELECT 
        PN.ID 
    FROM 
        PARTIDA_NAL PN 
    WHERE 
        PN.ELEMENT_ID = :P_ELEMENT_ID 
        AND PN.IN_EL_ID = :P_IN_EL_ID 
    INTO 
        :L_PARTIDA_ID; 
 
    INSERT INTO PARTIDA_EL_NODE(OPR_ID, PARTIDA_ID, KOL, SUMA_FR, SUMA_SR) 
    VALUES(:P_OPR_ID, :L_PARTIDA_ID, :P_KOL, 0.00, 0.00) 
    RETURNING ID INTO :L_PEN_ID; 
 
    INSERT INTO PARTIDA_OUT_EL_NODE(PARTIDA_NODE_ID, OUT_EL_ID) 
    VALUES(:L_PEN_ID, :P_OUT_EL_ID); 
END^


ALTER PROCEDURE PARTIDA_OUT_SN_PRODUCTION (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL)
AS
BEGIN 
-- V.3 
    EXECUTE PROCEDURE PARTIDA_OUT_SN_PROD(:P_OPR_ID, :P_OUT_EL_ID, :P_ELEMENT_ID, :P_IN_EL_ID, :P_KOL); 
END^


ALTER PROCEDURE PLASTANE_S_AVANSOVI_SUMI (
    P_SUMI_ID INTEGER,
    P_KLI_ID INTEGER,
    P_SUMA DOUBLE PRECISION)
AS
declare variable L_PAYMENT_ID integer; 
declare variable L_SUMI_ID integer; 
declare variable L_SUMA_OSTATAK double precision; 
declare variable L_SUMA_ZA_RAZPREDELIANE double precision; 
BEGIN 
  L_SUMA_ZA_RAZPREDELIANE = P_SUMA; 
 
  FOR SELECT 
    SUMI.ID AS SUMI_ID, 
    PAYMENT.ID AS PAYMENT_ID, 
    SUMI.SUMA_OST AS SUMA_OST 
  FROM 
    PAYMENT 
    INNER JOIN OPR ON OPR.ID = PAYMENT.OPR_ID 
    INNER JOIN SUMI ON SUMI.OPR_ID = PAYMENT.OPR_ID 
  WHERE 
    PAYMENT.FLAG_AVANS = 1 AND 
    SUMI.SUMA_OST > 0 AND 
    OPR.KLI_ID = :P_KLI_ID AND 
    NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
  ORDER BY SUMI.ID 
  INTO 
    :L_SUMI_ID, L_PAYMENT_ID,  :L_SUMA_OSTATAK 
  DO BEGIN 
    IF (L_SUMA_ZA_RAZPREDELIANE > 0.00) THEN BEGIN 
      IF (L_SUMA_ZA_RAZPREDELIANE >= L_SUMA_OSTATAK) THEN 
      BEGIN 
        EXECUTE PROCEDURE ADD_OPR_PAYMENT_NODE(L_SUMI_ID, P_SUMI_ID,  L_SUMA_OSTATAK); 
        L_SUMA_ZA_RAZPREDELIANE = L_SUMA_ZA_RAZPREDELIANE - L_SUMA_OSTATAK; 
      END 
      ELSE BEGIN 
        EXECUTE PROCEDURE ADD_OPR_PAYMENT_NODE(L_SUMI_ID, P_SUMI_ID,  L_SUMA_ZA_RAZPREDELIANE); 
        L_SUMA_ZA_RAZPREDELIANE = 0; 
      END 
    END 
  END 
 
  if (L_SUMA_ZA_RAZPREDELIANE = 0) then 
    UPDATE OUT SET OUT.PAY_TIP = 3 WHERE OUT.OPR_ID = (SELECT FIRST 1 OPR.ID FROM OPR INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID WHERE SUMI.ID =:P_SUMI_ID); 
END^


ALTER PROCEDURE PLASTANE_S_BONUSI (
    P_SUMI_ID INTEGER,
    P_KLI_ID INTEGER,
    P_SUMA DOUBLE PRECISION)
AS
declare variable L_PAYMENT_ID integer; 
declare variable L_SUMI_ID integer; 
declare variable L_SUMA_OSTATAK double precision; 
declare variable L_SUMA_ZA_RAZPREDELIANE double precision; 
declare variable L_SUMA_SALE type of DOM_SUMA; 
declare variable L_SALE_OPR_ID type of DOM_KEY; 
BEGIN 
    L_SUMA_ZA_RAZPREDELIANE = P_SUMA; 
 
    SELECT 
        SUMI.OPR_ID, 
        SUMI.SUMA_OST 
    FROM 
        SUMI 
    WHERE 
        SUMI.ID =:P_SUMI_ID 
    INTO :L_SALE_OPR_ID, :L_SUMA_SALE; 
 
    FOR SELECT 
        SUMI.ID AS SUMI_ID, 
        PAYMENT.ID AS PAYMENT_ID, 
        SUMI.SUMA_OST AS SUMA_OST 
    FROM 
        PAYMENT 
        INNER JOIN OPR ON OPR.ID = PAYMENT.OPR_ID 
        INNER JOIN SUMI ON SUMI.OPR_ID = PAYMENT.OPR_ID 
    WHERE 
        PAYMENT.FLAG_BONUS = 1 
        AND OPR.KLI_ID = :P_KLI_ID 
    ORDER BY SUMI.ID 
    INTO 
        :L_SUMI_ID, L_PAYMENT_ID,  :L_SUMA_OSTATAK 
    DO BEGIN 
        IF (L_SUMA_ZA_RAZPREDELIANE > 0.00) THEN BEGIN 
            IF (L_SUMA_ZA_RAZPREDELIANE >= L_SUMA_OSTATAK) THEN 
            BEGIN 
                EXECUTE PROCEDURE ADD_OPR_PAYMENT_NODE(L_SUMI_ID, P_SUMI_ID,  L_SUMA_OSTATAK); 
                L_SUMA_ZA_RAZPREDELIANE = L_SUMA_ZA_RAZPREDELIANE - L_SUMA_OSTATAK; 
            END 
            ELSE BEGIN 
                EXECUTE PROCEDURE ADD_OPR_PAYMENT_NODE(L_SUMI_ID, P_SUMI_ID,  L_SUMA_ZA_RAZPREDELIANE); 
                L_SUMA_ZA_RAZPREDELIANE = 0; 
            END 
        END 
    END 
 
    IF (:P_SUMA >= :L_SUMA_SALE) THEN 
        UPDATE OUT SET OUT.PAY_TIP = 3 WHERE OUT.OPR_ID =:L_SALE_OPR_ID; 
END^


ALTER PROCEDURE PN_TMP_ADD (
    P_SKLAD_ID INTEGER)
AS
declare variable L_PN_ID integer; 
declare variable L_PN_KOL double precision; 
declare variable L_PN_SUMA_FR double precision; 
declare variable L_PN_IN_EL_ID integer; 
declare variable L_PN_SIMPLE_ID integer; 
declare variable L_TRUST integer; 
BEGIN 
    SELECT FIRST 1 SYSTEM.TRUST FROM SYSTEM INTO :L_TRUST; 
 
    IF (L_TRUST = 1) THEN BEGIN 
        DELETE FROM PN_TMP; 
        INSERT INTO PN_TMP(PN_ID, PN_KOL, PN_SUMA_FR, PN_SIMPLE_ID, PN_IN_EL_ID, PN_ELEMENT_ID) 
        SELECT 
            PN.ID, 
            PN.KOL, 
            PN.SUMA_FR, 
            IN_EL.SIMPLE_ID, 
            PN.IN_EL_ID, 
            PN.ELEMENT_ID 
        FROM 
            PARTIDA_NAL PN INNER JOIN IN_EL ON IN_EL.ID = PN.IN_EL_ID 
            INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
        WHERE 
            PN.KOL > 0.00 AND 
            OPR.SKLAD_ID = :P_SKLAD_ID; 
    END 
END^


ALTER PROCEDURE POCKET_GET_NEPLATENI_KI_PROD (
    P_SKLAD_ID INTEGER)
RETURNS (
    R_OPR_ID INTEGER,
    R_KLI_ID INTEGER,
    R_DATETIME TIMESTAMP,
    R_SUMA_OSTATAK DOUBLE PRECISION)
AS
DECLARE VARIABLE L_COUNTER INTEGER; 
BEGIN 
    L_COUNTER = 0; 
    FOR SELECT 
        SUMI.ID, 
        OPR.KLI_ID, 
        OPR.DATETIME, 
        -SUMI.SUMA_OST 
        ---(OPR.SUMA - COALESCE((SELECT SUM(OPR_PAYMENT_NODE.SUMA) 
        --FROM OPR_PAYMENT_NODE INNER JOIN PAYMENT_NODE ON PAYMENT_NODE.OPR_ID = OPR.ID AND PAYMENT_NODE.NODE_ID = 
        --OPR_PAYMENT_NODE.ID),0)) 
    FROM 
        OPR INNER JOIN RET_STOKA_PROD_KI ON OPR.ID = RET_STOKA_PROD_KI.OPR_ID 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        OPR.OPR_TIP = 40 AND 
        RET_STOKA_PROD_KI.PAY_TIP = 1 AND 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        AND OPR.KLI_ID IN (SELECT KLI_SKLAD_NODE.KLI_ID FROM KLI_SKLAD_NODE WHERE KLI_SKLAD_NODE.SKLAD_ID = :P_SKLAD_ID) 
        AND ROUNDD(SUMI.SUMA_OST) > 0.00 
    ORDER BY OPR.KLI_ID 
    INTO 
        :R_OPR_ID,:R_KLI_ID,:R_DATETIME,:R_SUMA_OSTATAK 
    DO BEGIN 
        L_COUNTER = L_COUNTER + 1; 
        SUSPEND; 
    END 
 
    IF (L_COUNTER = 0) THEN BEGIN 
        FOR SELECT 
            SUMI.ID, 
            OPR.KLI_ID, 
            OPR.DATETIME, 
            SUMI.SUMA_OST 
            ---(OPR.SUMA - COALESCE((SELECT SUM(OPR_PAYMENT_NODE.SUMA) 
            --FROM OPR_PAYMENT_NODE INNER JOIN PAYMENT_NODE ON PAYMENT_NODE.OPR_ID = OPR.ID AND PAYMENT_NODE.NODE_ID = 
            --OPR_PAYMENT_NODE.ID),0)) AS SUMA_OSTATAK 
        FROM 
            OPR INNER JOIN RET_STOKA_PROD_KI ON OPR.ID = RET_STOKA_PROD_KI.OPR_ID 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE 
            OPR.OPR_TIP = 40 AND 
            RET_STOKA_PROD_KI.PAY_TIP = 1 AND 
            NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ROUNDD(SUMI.SUMA_OST) > 0.00 
        ORDER BY OPR.KLI_ID 
        INTO 
            :R_OPR_ID,:R_KLI_ID,:R_DATETIME,:R_SUMA_OSTATAK 
        DO BEGIN 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE POCKET_GET_NEPLATENI_PROD (
    P_SKLAD_ID INTEGER)
RETURNS (
    R_OPR_ID INTEGER,
    R_KLI_ID INTEGER,
    R_DATETIME TIMESTAMP,
    R_SUMA_OSTATAK DOUBLE PRECISION)
AS
DECLARE VARIABLE L_COUNTER INTEGER; 
BEGIN 
    L_COUNTER = 0; 
    FOR SELECT 
        SUMI.ID, 
        OPR.KLI_ID, 
        OPR.DATETIME, 
        SUMI.SUMA_OST 
        --OPR.SUMA - COALESCE((SELECT SUM(OPR_PAYMENT_NODE.SUMA) 
        --FROM OPR_PAYMENT_NODE INNER JOIN PAYMENT_NODE ON PAYMENT_NODE.OPR_ID = OPR.ID AND PAYMENT_NODE.NODE_ID = 
        --OPR_PAYMENT_NODE.ID),0) 
    FROM 
        OPR INNER JOIN OUT ON OPR.ID = OUT.OPR_ID 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        OPR.OPR_TIP = 2 AND 
        OUT.PAY_TIP = 1 AND 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        --AND (OPR.KLI_ID IN (SELECT KLI_SKLAD_NODE.KLI_ID FROM KLI_SKLAD_NODE WHERE KLI_SKLAD_NODE.SKLAD_ID = :P_SKLAD_ID 
        AND (OPR.KLI_ID IN ( 
                 SELECT 
                   KLI.ID 
                 FROM 
                   KLI INNER JOIN SELEKCIQ_KLI_EL ON SELEKCIQ_KLI_EL.KLI_ID = KLI.ID 
                   INNER JOIN KLI_SKLAD_NODE ON (KLI_SKLAD_NODE.SELEKCIQ_ID = SELEKCIQ_KLI_EL.SELEKCIQ_ID AND KLI_SKLAD_NODE.SKLAD_ID = :P_SKLAD_ID) 
                 WHERE 
                   KLI.KLIENT = 1) 
 
             OR 
 
             OPR.KLI_ID IN ( 
                 SELECT 
                   KLI.ID 
                 FROM 
                   KLI INNER JOIN KLI_SKLAD_NODE ON (KLI_SKLAD_NODE.KLI_ID = KLI.ID AND KLI_SKLAD_NODE.SKLAD_ID = :P_SKLAD_ID) 
                 WHERE 
                   KLI.KLIENT = 1)) 
        AND ROUNDD(SUMI.SUMA_OST) > 0.00 
    ORDER BY OPR.KLI_ID 
    INTO 
        :R_OPR_ID,:R_KLI_ID,:R_DATETIME,:R_SUMA_OSTATAK 
    DO BEGIN 
        L_COUNTER = L_COUNTER + 1; 
        SUSPEND; 
    END 
 
    IF (L_COUNTER = 0) THEN BEGIN 
        FOR SELECT 
            SUMI.ID, 
            OPR.KLI_ID, 
            OPR.DATETIME, 
            SUMI.SUMA_OST 
            --OPR.SUMA - COALESCE((SELECT SUM(OPR_PAYMENT_NODE.SUMA) 
            --FROM OPR_PAYMENT_NODE INNER JOIN PAYMENT_NODE ON PAYMENT_NODE.OPR_ID = OPR.ID AND PAYMENT_NODE.NODE_ID = 
            --OPR_PAYMENT_NODE.ID),0) 
        FROM 
            OPR INNER JOIN OUT ON OPR.ID = OUT.OPR_ID 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE 
            OPR.OPR_TIP = 2 AND 
            OUT.PAY_TIP = 1 AND 
            NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ROUNDD(SUMI.SUMA_OST) > 0.00 
        ORDER BY OPR.KLI_ID 
        INTO 
            :R_OPR_ID,:R_KLI_ID,:R_DATETIME,:R_SUMA_OSTATAK 
        DO BEGIN 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE POCKET_GET_NEPLATENI_RET_PROD (
    P_SKLAD_ID INTEGER)
RETURNS (
    R_OPR_ID INTEGER,
    R_KLI_ID INTEGER,
    R_DATETIME TIMESTAMP,
    R_SUMA_OSTATAK DOUBLE PRECISION)
AS
DECLARE VARIABLE L_COUNTER INTEGER; 
BEGIN 
    L_COUNTER = 0; 
    FOR SELECT 
        SUMI.ID, 
        OPR.KLI_ID, 
        OPR.DATETIME, 
        -SUMI.SUMA_OST 
        ---(OPR.SUMA - COALESCE((SELECT SUM(OPR_PAYMENT_NODE.SUMA) 
        --FROM OPR_PAYMENT_NODE INNER JOIN PAYMENT_NODE ON PAYMENT_NODE.OPR_ID = OPR.ID AND PAYMENT_NODE.NODE_ID = 
        --OPR_PAYMENT_NODE.ID),0)) 
    FROM 
        OPR INNER JOIN RET_STOKA_PROD ON OPR.ID = RET_STOKA_PROD.OPR_ID 
        INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
    WHERE 
        OPR.OPR_TIP = 26 AND 
        RET_STOKA_PROD.PAY_TIP = 1 AND 
        NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
        --AND OPR.KLI_ID IN (SELECT KLI_SKLAD_NODE.KLI_ID FROM KLI_SKLAD_NODE WHERE KLI_SKLAD_NODE.SKLAD_ID = :P_SKLAD_ID) 
        AND (OPR.KLI_ID IN ( 
                 SELECT 
                   KLI.ID 
                 FROM 
                   KLI INNER JOIN SELEKCIQ_KLI_EL ON SELEKCIQ_KLI_EL.KLI_ID = KLI.ID 
                   INNER JOIN KLI_SKLAD_NODE ON (KLI_SKLAD_NODE.SELEKCIQ_ID = SELEKCIQ_KLI_EL.SELEKCIQ_ID AND KLI_SKLAD_NODE.SKLAD_ID = :P_SKLAD_ID) 
                 WHERE 
                   KLI.KLIENT = 1) 
 
             OR 
 
             OPR.KLI_ID IN ( 
                 SELECT 
                   KLI.ID 
                 FROM 
                   KLI INNER JOIN KLI_SKLAD_NODE ON (KLI_SKLAD_NODE.KLI_ID = KLI.ID AND KLI_SKLAD_NODE.SKLAD_ID = :P_SKLAD_ID) 
                 WHERE 
                   KLI.KLIENT = 1)) 
        AND ROUNDD(SUMI.SUMA_OST) > 0.00 
    ORDER BY OPR.KLI_ID 
    INTO 
        :R_OPR_ID,:R_KLI_ID,:R_DATETIME,:R_SUMA_OSTATAK 
    DO BEGIN 
        L_COUNTER = L_COUNTER + 1; 
        SUSPEND; 
    END 
 
    IF (L_COUNTER = 0) THEN BEGIN 
        FOR SELECT 
            SUMI.ID, 
            OPR.KLI_ID, 
            OPR.DATETIME, 
            -SUMI.SUMA_OST 
            ---(OPR.SUMA - COALESCE((SELECT SUM(OPR_PAYMENT_NODE.SUMA) 
            --FROM OPR_PAYMENT_NODE INNER JOIN PAYMENT_NODE ON PAYMENT_NODE.OPR_ID = OPR.ID AND PAYMENT_NODE.NODE_ID = 
            --OPR_PAYMENT_NODE.ID),0)) AS SUMA_OSTATAK 
        FROM 
            OPR INNER JOIN RET_STOKA_PROD ON OPR.ID = RET_STOKA_PROD.OPR_ID 
            INNER JOIN SUMI ON SUMI.OPR_ID = OPR.ID 
        WHERE 
            OPR.OPR_TIP = 26 AND 
            RET_STOKA_PROD.PAY_TIP = 1 AND 
            NOT EXISTS (SELECT OPR_ANUL.AN_OPR_ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            AND ROUNDD(SUMI.SUMA_OST) > 0.00 
        ORDER BY OPR.KLI_ID 
        INTO 
            :R_OPR_ID,:R_KLI_ID,:R_DATETIME,:R_SUMA_OSTATAK 
        DO BEGIN 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE POR_ANUL_DOST_KOL_RZV (
    P_OPR_ID_DOST INTEGER)
AS
declare variable l_id integer; 
declare variable l_opr_id_por integer; 
declare variable l_simple_id integer; 
declare variable l_kol double precision; 
declare variable l_sklad_id smallint; 
BEGIN 
  FOR 
    select 
      pdkr.id, 
      pdkr.opr_id_por, 
      pdkr.simple_id, 
      pdkr.kol, 
      opr.sklad_id 
    from por_dost_kol_rzv pdkr 
    join opr on opr.id = pdkr.opr_id_dost 
    where 
      pdkr.opr_id_dost = :p_opr_id_dost 
    INTO :l_id,:l_opr_id_por,:l_simple_id,:l_kol,:l_sklad_id 
  DO 
  BEGIN 
    update nal 
    set 
        kol_rzv = kol_rzv - :l_kol 
    where 
      simple_id = :l_simple_id and 
      sklad_id = :l_sklad_id; 
 
    update por_el 
    set 
        kol_rzv = kol_rzv - :l_kol 
    where 
      simple_id = :l_simple_id and 
      opr_id = :l_opr_id_por; 
 
    delete from por_dost_kol_rzv where id = :l_id; 
  END 
END^


ALTER PROCEDURE POR_CHANGE_STAUS (
    P_STA INTEGER,
    P_OPR_ID INTEGER)
AS
declare variable l_kol_por double precision; 
declare variable l_kol double precision; 
declare variable l_por_el_id integer; 
begin 
  update por 
  set 
    status = :p_sta 
  where opr_id = :p_opr_id; 
 
  if (p_sta in (0,1)) then begin 
    for select 
      por_el.id,  
      por_el.kol_por, 
      por_el.kol 
    from por_el 
    where 
      por_el.opr_id = :p_opr_id 
    into :l_por_el_id, :l_kol_por,:l_kol 
    do begin 
      if (l_kol <> l_kol_por) then 
        update por_el 
        set 
          kol_por = :l_kol_por 
        where 
        id = :l_por_el_id; 
    end 
  end 
end^


ALTER PROCEDURE POR_NEPALNA (
    P_OPR_ID INTEGER,
    P_SIM_ID INTEGER,
    P_KOL_RAZ DOUBLE PRECISION,
    P_RAZFASOVKA_ID INTEGER)
RETURNS (
    R_KOL_OSTAVA_RAZ DOUBLE PRECISION)
AS
declare variable l_kol_raz double precision; 
declare variable kol double precision; 
declare variable kol_por double precision; 
declare variable kol_raz double precision; 
declare variable kol_v_raz double precision; 
declare variable l_id integer; 
BEGIN  
  l_kol_raz = p_kol_raz;  
  if (p_razfasovka_id = 0) then begin  
    select  
      por_el.id,  
      por_el.kol,  
      por_el.kol_por,  
      por_el_raz_node.kol kol_raz,  
      razfasovka.kol kol_v_raz  
    from por_el  
    left join por_el_raz_node on por_el_raz_node.por_el_id = por_el.id  
    left join razfasovka on razfasovka.id = por_el_raz_node.razfasovka_id  
    where  
      not exists (select por_el_raz_node.id from por_el_raz_node where por_el_raz_node.por_el_id = por_el.id) and  
      por_el.opr_id = :p_opr_id and  
      por_el.simple_id = :p_sim_id  
  
    order by  
    razfasovka.kol  
    INTO :l_id,:KOL,:KOL_POR,:KOL_RAZ,:KOL_V_RAZ;  
  end  
  else begin  
    select  
      por_el.id,  
      por_el.kol,  
      por_el.kol_por,  
      por_el_raz_node.kol kol_raz,  
      razfasovka.kol kol_v_raz  
    from por_el  
    left join por_el_raz_node on por_el_raz_node.por_el_id = por_el.id  
    left join razfasovka on razfasovka.id = por_el_raz_node.razfasovka_id  
    where  
      por_el.opr_id = :p_opr_id and  
      por_el.simple_id = :p_sim_id and  
      razfasovka.id = :p_razfasovka_id  
  
    order by  
    razfasovka.kol  
    INTO :l_id,:KOL,:KOL_POR,:KOL_RAZ,:KOL_V_RAZ;  
  end  
  
    if (l_kol_raz >= KOL) then begin  
      update por_el  
      set KOL_MUVE = coalesce(KOL_MUVE,0) + :kol 
      where  
         por_el.id = :l_id;  
  
      l_kol_raz = p_kol_raz - kol;  
    end  
    else begin  
      update por_el  
      set KOL_MUVE = coalesce(KOL_MUVE,0) + :l_kol_raz 
      where  
        por_el.id = :l_id;  
  
      l_kol_raz = 0;  
    end  
  
    r_kol_ostava_raz = l_kol_raz;  
    SUSPEND;  
END^


ALTER PROCEDURE POR_PREIZCISLI_CENI (
    P_OPR_ID INTEGER,
    P_SKLA_ID_OS INTEGER,
    P_PREIZCHISLI INTEGER)
RETURNS (
    R_CENA_OLD DOUBLE PRECISION,
    R_CENA_NEW DOUBLE PRECISION,
    R_SIM_ID INTEGER,
    R_VAT_PERCENT NUMERIC(4,2),
    R_VAT_GROUP TYPE OF DOM_SMAL_INT,
    R_IS_BONUS TYPE OF DOM_SMAL_INT)
AS
declare variable L_P_KLI_ID integer; 
declare variable L_PE_ID integer; 
declare variable L_PE_SIMPLE_ID integer; 
declare variable L_PE_KOL double precision; 
declare variable L_PE_SUMA double precision; 
declare variable L_PE_CENA double precision; 
declare variable L_LC_SIM_ID integer; 
declare variable L_LC_CENA_CURRENT double precision; 
declare variable L_LC_PRI double precision; 
declare variable L_LC_CENA_OS double precision; 
declare variable L_CL_ID integer; 
declare variable L_VALUTA_ID type of DOM_KEY_SMALL; 
declare variable L_CENA_VALUTA type of DOM_CENA; 
declare variable L_FLAG_LOCK type of DOM_FLAG; 
BEGIN 
  select 
    kli_id 
  from opr 
  where 
      id = :p_opr_id 
  into :l_p_kli_id; 
 
  for 
    select 
      id, 
      simple_id, 
      kol, 
      suma, 
      ROUND5(PRICE), 
      COALESCE(POR_EL.IS_BONUS, 0) 
    from 
        por_el 
    where 
        opr_id = :p_opr_id 
        AND POR_EL.KOL > 0 
    INTO :L_PE_ID, :L_PE_SIMPLE_ID,:L_PE_KOL,:L_PE_SUMA,:L_PE_CENA, :R_IS_BONUS 
  do begin 
    execute procedure GET_CENA_SIMPLE(:p_skla_id_os,:l_p_kli_id,:l_pe_simple_id) returning_values :l_lc_sim_id,:l_lc_cena_current,:l_lc_pri,:l_lc_cena_os,:l_cl_id, :L_VALUTA_ID, :L_CENA_VALUTA, :L_FLAG_LOCK, :R_VAT_PERCENT, :R_VAT_GROUP; 
    IF (:R_IS_BONUS = 1) THEN 
        l_lc_cena_current = 0.00; 
 
    if (ROUNDD(l_pe_suma) <> roundd(l_lc_cena_current*l_pe_kol)) then 
        if (p_preizchisli <> 1) then begin 
          r_cena_new = l_lc_cena_current; 
          r_cena_old = l_pe_cena; 
          r_sim_id = l_pe_simple_id; 
          suspend; 
        end 
        else begin 
          --R_SUMA = roundd(round(:l_lc_cena_current, 5) * :l_pe_kol); 
          SUSPEND; 
          update 
            por_el 
          set 
            SUMA = ROUNDD(ROUND(:L_LC_CENA_CURRENT, 5) * :L_PE_KOL), 
            price = ROUND5(:L_LC_CENA_CURRENT) 
          where id = :l_pe_id; 
        end 
  end 
END^


ALTER PROCEDURE POR_PROVERKA_MOVE (
    P_OPR_ID INTEGER,
    P_SKLAD_ID INTEGER)
RETURNS (
    R_SIMPLE_ID INTEGER)
AS
declare variable l_razpad smallint; 
declare variable l_kol double precision; 
declare variable l_por_el_id integer; 
declare variable l_id integer; 
BEGIN   
  FOR   
    SELECT   
        POR_EL.id,  
        POR_EL.SIMPLE_ID,   
        simple.razpad,   
        (SUM(coalesce(nal.kol_nal,0)) - SUM(POR_EL.KOL)) AS KOL   
    FROM   
        POR_EL   
    JOIN SIMPLE ON SIMPLE.ID = POR_EL.SIMPLE_ID and SIMPLE.USLUGA <> '1'   
    JOIN POR ON POR.OPR_ID = POR_EL.OPR_ID and por.opr_id = :p_opr_id   
    left join nal on nal.simple_id = por_el.simple_id and nal.sklad_id = :p_sklad_id   
    GROUP BY POR_EL.id, POR_EL.SIMPLE_ID, simple.razpad  
    having (SUM(coalesce(nal.kol_nal,0)) - SUM(POR_EL.KOL)) < 0   
    ORDER BY 1   
    INTO :l_por_el_id, :r_simple_id,:l_razpad,:l_kol  
  DO   
  BEGIN   
    if ((:l_razpad = 2) or (:l_razpad = 3) ) then   
        for select   
            por_el_production.id  
        from por_el_production  
        join simple on simple.id = por_el_production.simple_id and simple.usluga <> '1'  
        left join nal on nal.simple_id = por_el_production.simple_id and nal.sklad_id = :p_sklad_id  
        where   
            por_el_production.por_el_id = :l_por_el_id  
            and (coalesce(nal.kol_nal,0) - por_el_production.kol) < 0  
        into :l_id   
        do suspend;   
    else 
        suspend;   
  END   
END^


ALTER PROCEDURE POR_SAVE_PROD_CENI (
    P_SKLAD INTEGER,
    P_KLIENT INTEGER,
    P_SIMPLE_ID INTEGER,
    P_OUT_EL_ID INTEGER,
    P_CENA DOUBLE PRECISION)
AS
declare variable L_ID integer; 
declare variable L_PRI double precision; 
declare variable L_CENA_CURRENT double precision; 
declare variable L_CENA_OS double precision; 
declare variable L_CL_ID integer; 
declare variable L_VALUTA_ID type of DOM_KEY_SMALL; 
declare variable L_CENA_VALUTA type of DOM_CENA; 
declare variable L_FLAG_LOCK type of DOM_FLAG; 
declare variable L_VAT_PERCENT numeric(4,2); 
declare variable L_VAT_GROUP type of DOM_SMAL_INT; 
begin 
  execute procedure get_cena_simple(:p_sklad,:p_klient,:p_simple_id) returning_values :l_id,:l_cena_current,:l_pri,:l_cena_os,:l_cl_id,:L_VALUTA_ID,:L_CENA_VALUTA, :L_FLAG_LOCK, :L_VAT_PERCENT, :L_VAT_GROUP; 
 
  insert into prod_ceni_el (out_el_id, cena, cena_os, cena_cl) 
  values (:p_out_el_id, :p_cena, :l_cena_os, :l_cena_current); 
end^


ALTER PROCEDURE POR_UP_POR_EL (
    OPR_ID INTEGER)
AS
declare variable id integer; 
declare variable simple_id integer; 
declare variable kol double precision; 
BEGIN 
  FOR 
    SELECT 
      por_el.id, 
      por_el.simple_id, 
      por_el.kol 
    FROM por_el 
    where 
      por_el.opr_id = :opr_id 
    INTO :ID, :SIMPLE_ID,:KOL 
  DO BEGIN 
    update por_el 
    set 
      kol_por = :kol 
    where 
      por_el.id = :id; 
  END 
END^


ALTER PROCEDURE POR_UPDATE_PROVERKA (
    KOL DOUBLE PRECISION,
    SUMA DOUBLE PRECISION,
    KOL_POR DOUBLE PRECISION,
    KOL_RZV DOUBLE PRECISION,
    KOL_RZF DOUBLE PRECISION,
    POR_EL_ID INTEGER,
    SKLAD_ID INTEGER)
AS
declare variable l_kol_rzv double precision; 
declare variable l_sim_id integer; 
begin 
  select 
    coalesce(kol_rzv,0), 
    simple_id 
  from por_el 
  where 
    por_el.id = :por_el_id 
  into :l_kol_rzv,:l_sim_id; 
 
  if (:l_kol_rzv <> :kol_rzv) then begin 
    update nal 
    set 
      nal.kol_rzv = nal.kol_rzv + (:kol_rzv - :l_kol_rzv) 
    where 
      nal.simple_id = :l_sim_id and 
      nal.sklad_id  = :sklad_id; 
  end 
 
  update por_el 
  set 
    kol = :kol, 
    suma = :suma, 
    kol_por = :kol_por, 
    kol_rzv = :kol_rzv 
  where 
  por_el.id = :por_el_id; 
 
 
  if (:kol_rzf <> :kol) then begin 
    update por_el_raz_node 
    set kol = :kol_rzf 
    where por_el_id = :por_el_id; 
  end 
end^


ALTER PROCEDURE POST_EVENT_PARAMETER (
    EVN VARCHAR(255))
AS
begin
 POST_EVENT :EVN;
end^


ALTER PROCEDURE PREPARE_CALCULATION (
    P_SIMPLE_ID INTEGER,
    P_OPR_ID INTEGER,
    P_DATE DATE)
AS
DECLARE VARIABLE L_EL_ID INTEGER;
DECLARE VARIABLE L_OPR_TIP INTEGER;
DECLARE VARIABLE L_IN_OUT INTEGER;
DECLARE VARIABLE L_PN_ID INTEGER;
DECLARE VARIABLE L_OUT_EL_ID INTEGER;
BEGIN    
/*V.1*/ 
/*    FOR SELECT
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_EL_ID, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_OPR_TIP, 
        DO_EDIT_DOST_PARTIDI_SUB_QUERY.R_IN_OUT 
    FROM    
        DO_EDIT_DOST_PARTIDI_SUB_QUERY(:P_SIMPLE_ID,:P_OPR_ID,:P_DATE) 
    ORDER BY R_IN_OUT ASC,R_OPR_DATE DESC    
    INTO    
        :L_EL_ID,:L_OPR_TIP,:L_IN_OUT 
    DO BEGIN    
        IF (L_IN_OUT = 0) THEN BEGIN 
            FOR SELECT 
                P1.ID 
            FROM        
                PARTIDA_EL_NODE P1 INNER JOIN PARTIDA_OUT_EL_NODE PO1 ON 
                (PO1.OUT_EL_ID = :L_EL_ID AND P1.ID = PO1.PARTIDA_NODE_ID) 
            INTO    
                :L_PN_ID 
            DO BEGIN    
                DELETE FROM PARTIDA_EL_NODE WHERE 
                PARTIDA_EL_NODE.ID = :L_PN_ID;    
            END    
            --МАХАМЕ ИЗЛИЗШЪЦИ ЗА ТОЗИ ЕЛЕМЕНТ АКО ИМА ТАКИВА
            DELETE FROM IZL    
            WHERE IZL.OUT_EL_ID = :L_EL_ID;    
        END 
        ELSE IF (L_IN_OUT = 1) THEN BEGIN  
            IF ((L_OPR_TIP = 1)OR(L_OPR_TIP = 22)) THEN BEGIN 
                FOR SELECT 
                    PEN.ID 
                FROM    
                    OPR_RAZPAD_NODE ORN INNER JOIN PARTIDA_OUT_EL_NODE PON ON    
                    (ORN.IN_EL_ID = :L_EL_ID AND ORN.OUT_EL_ID = PON.OUT_EL_ID)    
                    INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID    
                INTO    
                    :L_PN_ID 
                DO BEGIN    
                    DELETE FROM PARTIDA_EL_NODE WHERE 
                    PARTIDA_EL_NODE.ID = :L_PN_ID;    
                END    
            END    
    
            FOR SELECT 
                OUT_EL.ID 
            FROM    
                PARTIDA_EL_NODE INNER JOIN PARTIDA_OUT_EL_NODE ON    
                (PARTIDA_EL_NODE.IN_EL_ID = :L_EL_ID AND PARTIDA_EL_NODE.ID = PARTIDA_OUT_EL_NODE.PARTIDA_NODE_ID)    
                INNER JOIN OPR ON ( ((OPR.OPR_DATE < :P_DATE) OR ((OPR.OPR_DATE = :P_DATE) AND OPR.ID < :P_OPR_ID)) AND OPR.ID = PARTIDA_EL_NODE.OPR_ID) 
                INNER JOIN OUT_EL ON OUT_EL.ID = PARTIDA_OUT_EL_NODE.OUT_EL_ID    
            ORDER BY 1    
            INTO    
                :L_OUT_EL_ID 
            DO BEGIN 
                FOR SELECT 
                    PEN.ID 
                FROM    
                    PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON    
                    (PON.OUT_EL_ID = :L_OUT_EL_ID AND PEN.ID = PON.PARTIDA_NODE_ID AND PEN.IN_EL_ID = :L_EL_ID)    
                    INNER JOIN OPR ON OPR.ID = PEN.OPR_ID    
                WHERE    
                    ((OPR.OPR_DATE < :P_DATE)OR ((OPR.OPR_DATE = :P_DATE) AND (OPR.ID < :P_OPR_ID))) 
                INTO    
                    :L_PN_ID 
                DO 
                    DELETE FROM PARTIDA_EL_NODE 
                    WHERE ID = :L_PN_ID;    
            END    
            IF (:L_OPR_TIP IN (4,26,41)) THEN 
                DELETE FROM PARTIDA_EL_NODE WHERE    
                PARTIDA_EL_NODE.IN_EL_ID = :L_EL_ID;    
        END    
    END */
 
END^


ALTER PROCEDURE PREPARE_PROVERKA_NAL (
    P_FLAG_FKT SMALLINT)
RETURNS (
    SIMPLE_ID INTEGER,
    SKLAD_ID SMALLINT,
    F_KOL DOUBLE PRECISION,
    F_SUMA_FR DOUBLE PRECISION,
    F_SUMA_SR DOUBLE PRECISION,
    S_KOL DOUBLE PRECISION,
    S_SUMA_FR DOUBLE PRECISION,
    S_SUMA_SR DOUBLE PRECISION,
    PAR_KOL DOUBLE PRECISION,
    PAR_SUMA_FR DOUBLE PRECISION,
    PAR_SUMA_SR DOUBLE PRECISION,
    P_KOL DOUBLE PRECISION,
    P_SUMA_FR DOUBLE PRECISION)
AS
DECLARE VARIABLE L_FKT_SKLAD SMALLINT; 
BEGIN 
/*V.1 - ПОДГОТВЯ ДАННИТЕ ЗА ИЗВЛИЧАНЕ ОТ GET_PROVERKA_NAL*/ 
    SELECT 
        SYSTEM.H_SKLAD 
    FROM 
        SYSTEM 
    INTO 
        :L_FKT_SKLAD; 
 
    IF (P_FLAG_FKT = 0) THEN BEGIN 
        --ПЪРВО КОЛИЧЕСТВА И СУМИ ПО ВХОД И ИЗХОД 
        F_KOL = 0.00; 
        F_SUMA_FR = 0.00; 
        F_SUMA_SR = 0.00; 
        S_KOL = 0.00; 
        S_SUMA_FR = 0.00; 
        S_SUMA_SR = 0.00; 
        PAR_KOL = 0.00; 
        PAR_SUMA_FR = 0.00; 
        PAR_SUMA_SR = 0.00; 
        P_KOL = 0.00; 
        P_SUMA_FR = 0.00; 
 
        FOR SELECT 
            IN_EL.SIMPLE_ID, 
            OPR.SKLAD_ID, 
            SUM(IN_EL.KOL), 
            SUM(IN_EL.SUMA_FR), 
            SUM(IN_EL.SUMA_SR) 
        FROM 
            SKLAD INNER JOIN OPR ON OPR.SKLAD_ID = SKLAD.ID AND NOT SKLAD.ID = :L_FKT_SKLAD 
            INNER JOIN IN_EL ON OPR.ID = IN_EL.OPR_ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID AND SIMPLE.USLUGA = '0' 
        GROUP BY 1,2 
        INTO 
            :SIMPLE_ID,:SKLAD_ID,:S_KOL,:S_SUMA_FR,:S_SUMA_SR 
        DO 
            SUSPEND; 
 
        FOR SELECT 
            OUT_EL.SIMPLE_ID, 
            OPR.SKLAD_ID, 
            SUM(-OUT_EL.KOL), 
            SUM(-OUT_EL.SUMA_FR), 
            SUM(-OUT_EL.SUMA_SR) 
        FROM 
            SKLAD INNER JOIN OPR ON OPR.SKLAD_ID = SKLAD.ID AND NOT SKLAD.ID = :L_FKT_SKLAD 
            INNER JOIN OUT_EL ON OPR.ID = OUT_EL.OPR_ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        WHERE 
            SIMPLE.USLUGA = '0' 
        GROUP BY 1,2 
        INTO 
            :SIMPLE_ID,:SKLAD_ID,:S_KOL,:S_SUMA_FR,:S_SUMA_SR 
        DO 
            SUSPEND; 
 
        F_KOL = 0.00; 
        F_SUMA_FR = 0.00; 
        F_SUMA_SR = 0.00; 
        S_KOL = 0.00; 
        S_SUMA_FR = 0.00; 
        S_SUMA_SR = 0.00; 
        PAR_KOL = 0.00; 
        PAR_SUMA_FR = 0.00; 
        PAR_SUMA_SR = 0.00; 
        P_KOL = 0.00; 
        P_SUMA_FR = 0.00; 
        --ДОБАВЯМЕ И КОЛИЧЕСТВА НА НЕКОМПЕНСИРАНИТЕ ИЗЛИШЪЦИ ЗА ИЗРАВНЯВАНЕ 
        FOR SELECT 
            OUT_EL.SIMPLE_ID, 
            OPR.SKLAD_ID, 
            SUM(IZL.KOL_IZL) 
        FROM 
            SKLAD INNER JOIN OPR ON OPR.SKLAD_ID = SKLAD.ID AND NOT SKLAD.ID = :L_FKT_SKLAD 
            INNER JOIN OUT_EL  ON OPR.ID = OUT_EL.OPR_ID 
            INNER JOIN IZL ON IZL.OUT_EL_ID = OUT_EL.ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        WHERE 
            IZL.KOL_IZL > 0.00 
            AND SIMPLE.USLUGA = '0' 
        GROUP BY 1,2 
        INTO 
            :SIMPLE_ID,:SKLAD_ID,:S_KOL 
        DO 
            SUSPEND; 
 
        F_KOL = 0.00; 
        F_SUMA_FR = 0.00; 
        F_SUMA_SR = 0.00; 
        S_KOL = 0.00; 
        S_SUMA_FR = 0.00; 
        S_SUMA_SR = 0.00; 
        PAR_KOL = 0.00; 
        PAR_SUMA_FR = 0.00; 
        PAR_SUMA_SR = 0.00; 
        P_KOL = 0.00; 
        P_SUMA_FR = 0.00; 
 
        --2 НАЛИЧНОСТИТЕ ОТ NAL 
        FOR SELECT 
            NAL.SIMPLE_ID, 
            NAL.SKLAD_ID, 
            NAL.KOL_NAL, 
            NAL.SUMA_FR, 
            NAL.SUMA 
        FROM 
            NAL 
        WHERE 
            NOT SKLAD_ID = :L_FKT_SKLAD 
        INTO 
            :SIMPLE_ID,:SKLAD_ID,:F_KOL,:F_SUMA_FR,:F_SUMA_SR 
        DO 
            SUSPEND; 
 
        F_KOL = 0.00; 
        F_SUMA_FR = 0.00; 
        F_SUMA_SR = 0.00; 
        S_KOL = 0.00; 
        S_SUMA_FR = 0.00; 
        S_SUMA_SR = 0.00; 
        PAR_KOL = 0.00; 
        PAR_SUMA_FR = 0.00; 
        PAR_SUMA_SR = 0.00; 
        P_KOL = 0.00; 
        P_SUMA_FR = 0.00; 
 
        --НАЛИЧНОСТИ ПО ПАРТИДИ 
        FOR SELECT 
            PARTIDA_NAL.SIMPLE_ID, 
            PARTIDA_NAL.SKLAD_ID, 
            SUM(PARTIDA_NAL.KOL), 
            SUM(PARTIDA_NAL.SUMA_FR) 
        FROM 
            PARTIDA_NAL 
        WHERE 
            NOT PARTIDA_NAL.SKLAD_ID = :L_FKT_SKLAD 
            AND IIF(PARTIDA_NAL.KOL > 0.00, IN_EL_ID, NULL) > 0 
        GROUP BY 1,2 
        INTO 
            :SIMPLE_ID,:SKLAD_ID,:P_KOL,:P_SUMA_FR 
        DO 
            SUSPEND; 
 
        SIMPLE_ID = 0; 
        SKLAD_ID = 0; 
        S_KOL = 0.00; 
        S_SUMA_FR = 0.00; 
        S_SUMA_SR = 0.00; 
        F_KOL = 0.00; 
        F_SUMA_FR = 0.00; 
        F_SUMA_SR = 0.00; 
        PAR_KOL = 0.00; 
        PAR_SUMA_FR = 0.00; 
        PAR_SUMA_SR = 0.00; 
        P_KOL = 0.00; 
        P_SUMA_FR = 0.00; 
 
        FOR SELECT 
            IN_EL.SIMPLE_ID, 
            OPR.SKLAD_ID, 
            SUM(PEN.KOL), 
            SUM(PEN.SUMA_FR), 
            SUM(PEN.SUMA_SR) 
        FROM 
            IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
            INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = IN_EL.ID 
            INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID AND SIMPLE.USLUGA = '0' 
        WHERE 
            IN_EL.IS_F = :P_FLAG_FKT 
        GROUP BY 1,2 
        INTO 
            :SIMPLE_ID,:SKLAD_ID,:PAR_KOL,:PAR_SUMA_FR,:PAR_SUMA_SR 
        DO 
            SUSPEND; 
 
        FOR SELECT 
            OUT_EL.SIMPLE_ID, 
            OPR.SKLAD_ID, 
            SUM(-PEN.KOL), 
            SUM(-PEN.SUMA_FR), 
            SUM(-PEN.SUMA_SR) 
        FROM 
            SKLAD INNER JOIN OPR ON SKLAD.ID <> :L_FKT_SKLAD AND SKLAD.ID = OPR.SKLAD_ID 
            INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OPR.ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
            INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = OUT_EL.ID 
            INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID 
        WHERE 
            SIMPLE.USLUGA = '0' 
        GROUP BY 1,2 
        PLAN 
            JOIN (SKLAD NATURAL, OPR INDEX (FK_OPR_SKLAD_ID), OUT_EL INDEX (FK_OUT_EL_OPR_ID), PON INDEX (FK_PARTIDA_OUT_EL_OUT_EL_ID), PEN INDEX (PK_PARTIDA_EL_NODE_ID), SIMPLE NATURAL) 
 
        INTO 
            :SIMPLE_ID,:SKLAD_ID,:PAR_KOL,:PAR_SUMA_FR,:PAR_SUMA_SR 
        DO 
            SUSPEND; 
    END 
    ELSE BEGIN 
        --ПЪРВО КОЛИЧЕСТВА И СУМИ ПО ВХОД И ИЗХОД 
        SIMPLE_ID = 0; 
        SKLAD_ID = 0; 
        S_KOL = 0.00; 
        S_SUMA_FR = 0.00; 
        S_SUMA_SR = 0.00; 
        F_KOL = 0.00; 
        F_SUMA_FR = 0.00; 
        F_SUMA_SR = 0.00; 
        PAR_KOL = 0.00; 
        PAR_SUMA_FR = 0.00; 
        PAR_SUMA_SR = 0.00; 
        P_KOL = 0.00; 
        P_SUMA_FR = 0.00; 
        FOR SELECT 
            IN_EL.SIMPLE_ID, 
            OPR.SKLAD_ID, 
            SUM(IN_EL.KOL), 
            SUM(IN_EL.SUMA_FR), 
            SUM(IN_EL.SUMA_SR) 
        FROM 
            OPR INNER JOIN IN_EL ON OPR.ID = IN_EL.OPR_ID AND OPR.SKLAD_ID = :L_FKT_SKLAD 
            INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID AND SIMPLE.USLUGA = '0' 
        GROUP BY 1,2 
        INTO 
            :SIMPLE_ID,:SKLAD_ID,:S_KOL,:S_SUMA_FR,:S_SUMA_SR 
        DO 
            SUSPEND; 
 
        SIMPLE_ID = 0; 
        SKLAD_ID = 0; 
        S_KOL = 0.00; 
        S_SUMA_FR = 0.00; 
        S_SUMA_SR = 0.00; 
        F_KOL = 0.00; 
        F_SUMA_FR = 0.00; 
        F_SUMA_SR = 0.00; 
        PAR_KOL = 0.00; 
        PAR_SUMA_FR = 0.00; 
        PAR_SUMA_SR = 0.00; 
        P_KOL = 0.00; 
        P_SUMA_FR = 0.00; 
 
        FOR SELECT 
            OUT_EL.SIMPLE_ID, 
            OPR.SKLAD_ID, 
            -SUM(OUT_EL.KOL), 
            -SUM(OUT_EL.SUMA_FR), 
            -SUM(OUT_EL.SUMA_SR) 
        FROM 
            OPR INNER JOIN OUT_EL ON OPR.ID = OUT_EL.OPR_ID AND OPR.SKLAD_ID = :L_FKT_SKLAD 
            INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        WHERE 
            SIMPLE.USLUGA = '0' 
        GROUP BY 1,2 
        INTO 
            :SIMPLE_ID,:SKLAD_ID, :S_KOL,:S_SUMA_FR,:S_SUMA_SR 
        DO 
            SUSPEND; 
 
        SIMPLE_ID = 0; 
        SKLAD_ID = 0; 
        S_KOL = 0.00; 
        S_SUMA_FR = 0.00; 
        S_SUMA_SR = 0.00; 
        F_KOL = 0.00; 
        F_SUMA_FR = 0.00; 
        F_SUMA_SR = 0.00; 
        PAR_KOL = 0.00; 
        PAR_SUMA_FR = 0.00; 
        PAR_SUMA_SR = 0.00; 
        P_KOL = 0.00; 
        P_SUMA_FR = 0.00; 
 
        --ДОБАВЯМЕ И КОЛИЧЕСТВА НА НЕКОМПЕНСИРАНИТЕ ИЗЛИШЪЦИ ЗА ИЗРАВНЯВАНЕ 
        FOR SELECT 
            OUT_EL.SIMPLE_ID, 
            OPR.SKLAD_ID, 
            SUM(IZL.KOL_IZL) 
        FROM 
            OPR INNER JOIN OUT_EL  ON OPR.ID = OUT_EL.OPR_ID AND OPR.SKLAD_ID = :L_FKT_SKLAD 
            INNER JOIN IZL ON IZL.OUT_EL_ID = OUT_EL.ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        WHERE 
            SIMPLE.USLUGA = '0' 
        GROUP BY 1,2 
        INTO 
             :SIMPLE_ID,:SKLAD_ID,:S_KOL 
        DO 
            SUSPEND; 
 
        SIMPLE_ID = 0; 
        SKLAD_ID = 0; 
        S_KOL = 0.00; 
        S_SUMA_FR = 0.00; 
        S_SUMA_SR = 0.00; 
        F_KOL = 0.00; 
        F_SUMA_FR = 0.00; 
        F_SUMA_SR = 0.00; 
        PAR_KOL = 0.00; 
        PAR_SUMA_FR = 0.00; 
        PAR_SUMA_SR = 0.00; 
        P_KOL = 0.00; 
        P_SUMA_FR = 0.00; 
 
        --2 НАЛИЧНОСТИТЕ ОТ NAL 
        FOR SELECT 
            NAL.SIMPLE_ID, 
            NAL.SKLAD_ID, 
            NAL.KOL_NAL, 
            NAL.SUMA, 
            NAL.SUMA_FR 
        FROM 
            NAL 
        WHERE 
            SKLAD_ID = :L_FKT_SKLAD 
        INTO 
            :SIMPLE_ID,:SKLAD_ID,:F_KOL,:F_SUMA_SR,:F_SUMA_FR 
        DO 
            SUSPEND; 
 
        SIMPLE_ID = 0; 
        SKLAD_ID = 0; 
        S_KOL = 0.00; 
        S_SUMA_FR = 0.00; 
        S_SUMA_SR = 0.00; 
        F_KOL = 0.00; 
        F_SUMA_FR = 0.00; 
        F_SUMA_SR = 0.00; 
        PAR_KOL = 0.00; 
        PAR_SUMA_FR = 0.00; 
        PAR_SUMA_SR = 0.00; 
        P_KOL = 0.00; 
        P_SUMA_FR = 0.00; 
 
        --НАЛИЧНОСТИ ПО ПАРТИДИ 
        FOR SELECT 
            PARTIDA_NAL.SIMPLE_ID, 
            PARTIDA_NAL.SKLAD_ID, 
            SUM(PARTIDA_NAL.KOL), 
            SUM(PARTIDA_NAL.SUMA_FR) 
        FROM 
            PARTIDA_NAL 
        WHERE 
            PARTIDA_NAL.SKLAD_ID = :L_FKT_SKLAD 
            AND IIF(PARTIDA_NAL.KOL > 0.00, IN_EL_ID, NULL) > 0 
        GROUP BY 1,2 
        INTO 
            :SIMPLE_ID,:SKLAD_ID,:P_KOL,:P_SUMA_FR 
        DO 
            SUSPEND; 
 
        SIMPLE_ID = 0; 
        SKLAD_ID = L_FKT_SKLAD; 
        S_KOL = 0.00; 
        S_SUMA_FR = 0.00; 
        S_SUMA_SR = 0.00; 
        F_KOL = 0.00; 
        F_SUMA_FR = 0.00; 
        F_SUMA_SR = 0.00; 
        PAR_KOL = 0.00; 
        PAR_SUMA_FR = 0.00; 
        PAR_SUMA_SR = 0.00; 
        P_KOL = 0.00; 
        P_SUMA_FR = 0.00; 
        --НАЛИЧНОСТИ ПО ИСТОРИЯ НА ПАРТИДИТЕ 
        FOR SELECT 
            IN_EL.SIMPLE_ID, 
            SUM(PEN.KOL), 
            SUM(PEN.SUMA_FR), 
            SUM(PEN.SUMA_SR) 
        FROM 
            OPR INNER JOIN IN_EL ON OPR.SKLAD_ID = :L_FKT_SKLAD AND OPR.ID = IN_EL.OPR_ID 
            INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = IN_EL.ID 
            INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID AND SIMPLE.USLUGA = '0' 
        GROUP BY 1 
        INTO 
            :SIMPLE_ID,:PAR_KOL,:PAR_SUMA_FR,:PAR_SUMA_SR 
        DO 
            SUSPEND; 
 
        FOR SELECT 
            OUT_EL.SIMPLE_ID, 
            -SUM(PEN.KOL), 
            -SUM(PEN.SUMA_FR), 
            -SUM(PEN.SUMA_SR) 
        FROM 
            OPR INNER JOIN OUT_EL ON OPR.SKLAD_ID = :SKLAD_ID AND OPR.ID = OUT_EL.OPR_ID 
            INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = OUT_EL.ID 
            INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        WHERE 
            SIMPLE.USLUGA = '0' 
        GROUP BY 1 
        INTO 
            :SIMPLE_ID,:PAR_KOL,:PAR_SUMA_FR,:PAR_SUMA_SR 
        DO 
            SUSPEND; 
    END 
END^


ALTER PROCEDURE PREPARE_SPR_SEL (
    P_TIP INTEGER,
    P_ALL_IDS BLOB SUB_TYPE 0)
RETURNS (
    R_SEL_ID INTEGER)
AS
declare variable L_POSITION_TO integer; 
declare variable L_POSITION_FROM integer; 
declare variable L_ID integer; 
declare variable L_LEN integer; 
declare variable L_POSITION_START integer; 
begin 
  EXECUTE PROCEDURE SP_GEN_SEL_SIM_QR_ID RETURNING_VALUES :R_SEL_ID; 
 
  L_POSITION_FROM = 1; 
  L_LEN = CHAR_LENGTH(P_ALL_IDS); 
 
  WHILE (L_POSITION_FROM <= L_LEN) DO BEGIN 
    --L_POSITION_TO = POSITION(',', P_ALL_IDS, L_POSITION_FROM); 
 
    --IF (L_POSITION_TO = 0) THEN 
      --L_POSITION_TO = L_LEN + 1; 
 
    L_POSITION_START = L_POSITION_FROM; 
    --WHILE ((SUBSTRING(L_ALL_IDS FROM L_POSITION_START FOR 1) <> ',') AND (L_POSITION_START <= L_LEN)) DO BEGIN 
    --  L_POSITION_START = L_POSITION_START + 6; 
    --END 
    L_POSITION_TO = L_POSITION_START + 10; 
 
    L_ID = SUBSTRING(P_ALL_IDS FROM L_POSITION_FROM FOR L_POSITION_TO - L_POSITION_FROM); 
 
    if (P_TIP = 1) then 
      INSERT INTO SEL_SIM_QR (SEL_ID, SIMPLE_ID) VALUES (:R_SEL_ID, :L_ID); 
    else if (P_TIP = 2) then 
      INSERT INTO SEL_KLI_QR (SEL_ID, KLI_ID) VALUES (:R_SEL_ID, :L_ID); 
    else if (P_TIP = 3) then 
      INSERT INTO SEL_IO_QR (SEL_ID, IO_ID) VALUES (:R_SEL_ID, :L_ID); 
    else if (P_TIP = 4) then 
      INSERT INTO SEL_SKLAD_QR (SEL_ID, SKLAD_ID) VALUES (:R_SEL_ID, :L_ID); 
    else if (P_TIP = 5) then 
      INSERT INTO SEL_FIRMI_QR (SEL_ID, FIRMA_ID) VALUES (:R_SEL_ID, :L_ID); 
    else if (P_TIP = 6) then 
      INSERT INTO SEL_IO_IZP_QR (SEL_ID, IO_IZP_TIP) VALUES (:R_SEL_ID, :L_ID); 
    else if (P_TIP = 7) then 
      INSERT INTO SEL_MAJOR_PROP_QR (SEL_ID, MAJOR_PROP_ID) VALUES (:R_SEL_ID, :L_ID); 
    else if (P_TIP = 8) then 
      INSERT INTO SEL_MINOR_PROP_QR (SEL_ID, MINOR_PROP_ID) VALUES (:R_SEL_ID, :L_ID); 
    else if (P_TIP = 9) then 
      INSERT INTO SEL_KASI_QR (SEL_ID, KASA_ID) VALUES (:R_SEL_ID, :L_ID); 
    else if (P_TIP = 10) then 
      INSERT INTO SEL_OBEKT_QR (SEL_ID, OBEKT_ID) VALUES (:R_SEL_ID, :L_ID); 
 
    L_POSITION_FROM = L_POSITION_TO  + 1; 
  END 
end^


ALTER PROCEDURE PROD_CHANGE_KLI_AMBALAJ_IN (
    P_AMB_IN_OPR_ID INTEGER,
    P_OPR_EDIT_ID INTEGER,
    P_OLD_KLI INTEGER,
    P_NEW_KLI INTEGER)
AS
DECLARE VARIABLE L_SIMPLE_ID INTEGER;
DECLARE VARIABLE L_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_ID INTEGER;
DECLARE VARIABLE L_EDIT_ID INTEGER;
BEGIN
    SELECT
        OPR_EDIT.ID
    FROM
        OPR_EDIT
    WHERE
        OPR_EDIT.OPR_ID = :P_OPR_EDIT_ID
    INTO
        :L_EDIT_ID;

    FOR SELECT
        AMBALAJ_HISTORY.SIMPLE_ID,
        AMBALAJ_HISTORY.KOL
    FROM
        AMBALAJ_HISTORY
    WHERE
        AMBALAJ_HISTORY.OPR_ID = :P_AMB_IN_OPR_ID
    INTO
        :L_SIMPLE_ID, :L_KOL
    DO BEGIN
        INSERT INTO AMBALAJ_HISTORY_EDIT(EDIT_ID,SIMPLE_ID,KOL) VALUES (:L_EDIT_ID,:L_SIMPLE_ID,:L_KOL);

        UPDATE AMBALAJ SET
        KOL = ROUND5(KOL + :L_KOL)
        WHERE SIMPLE_ID = :L_SIMPLE_ID AND KLI_ID = :P_OLD_KLI;

        L_ID = NULL;
        SELECT
            AMBALAJ.ID
        FROM
            AMBALAJ
        WHERE
            KLI_ID = :P_NEW_KLI
            AND SIMPLE_ID = :L_SIMPLE_ID
        INTO
            :L_ID;
        IF (L_ID IS NULL) THEN
            INSERT INTO AMBALAJ(KLI_ID,SIMPLE_ID,KOL) VALUES (:P_NEW_KLI,:L_SIMPLE_ID,-:L_KOL);
        ELSE
            UPDATE AMBALAJ SET
            KOL = ROUND5(KOL - :L_KOL)
            WHERE SIMPLE_ID = :L_SIMPLE_ID AND KLI_ID = :P_NEW_KLI;
    END

    UPDATE OPR SET
    KLI_ID = :P_NEW_KLI
    WHERE ID = :P_AMB_IN_OPR_ID;
END^


ALTER PROCEDURE PROD_CHANGE_KLI_AMBALAJ_OUT (
    P_AMB_OUT_OPR_ID INTEGER,
    P_OPR_EDIT_ID INTEGER,
    P_OLD_KLI INTEGER,
    P_NEW_KLI INTEGER)
AS
DECLARE VARIABLE L_SIMPLE_ID INTEGER;
DECLARE VARIABLE L_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_ID INTEGER;
DECLARE VARIABLE L_EDIT_ID INTEGER;
BEGIN
    SELECT
        OPR_EDIT.ID
    FROM
        OPR_EDIT
    WHERE
        OPR_EDIT.OPR_ID = :P_OPR_EDIT_ID
    INTO
        :L_EDIT_ID;

    FOR SELECT
        AMBALAJ_HISTORY.SIMPLE_ID,
        AMBALAJ_HISTORY.KOL
    FROM
        AMBALAJ_HISTORY
    WHERE
        AMBALAJ_HISTORY.OPR_ID = :P_AMB_OUT_OPR_ID
    INTO
        :L_SIMPLE_ID, :L_KOL
    DO BEGIN
        INSERT INTO AMBALAJ_HISTORY_EDIT(EDIT_ID,SIMPLE_ID,KOL) VALUES (:L_EDIT_ID,:L_SIMPLE_ID,:L_KOL);

        UPDATE AMBALAJ SET
        KOL = ROUND5(KOL - :L_KOL)
        WHERE SIMPLE_ID = :L_SIMPLE_ID AND KLI_ID = :P_OLD_KLI;

        L_ID = NULL;
        SELECT
            AMBALAJ.ID
        FROM
            AMBALAJ
        WHERE
            KLI_ID = :P_NEW_KLI
            AND SIMPLE_ID = :L_SIMPLE_ID
        INTO
            :L_ID;
        IF (L_ID IS NULL) THEN
            INSERT INTO AMBALAJ(KLI_ID,SIMPLE_ID,KOL) VALUES (:P_NEW_KLI,:L_SIMPLE_ID,:L_KOL);
        ELSE
            UPDATE AMBALAJ SET
            KOL = ROUND5(KOL + :L_KOL)
            WHERE SIMPLE_ID = :L_SIMPLE_ID AND KLI_ID = :P_NEW_KLI;
    END

    UPDATE OPR SET
    KLI_ID = :P_NEW_KLI
    WHERE ID = :P_AMB_OUT_OPR_ID;
END^


ALTER PROCEDURE PRODUCTION_ANNUL (
    P_OPR_OUT_ID INTEGER,
    P_USER_ID INTEGER,
    P_IP INTEGER)
AS
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_SUMA TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_OPR_DATE TYPE OF DOM_DATE; 
DECLARE VARIABLE L_ANNUL_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_ANNUL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OPR_IN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_KEY; 
BEGIN 
    SELECT 
        OPR.SKLAD_ID, 
        OPR.SUMA, 
        opr.OPR_TIP 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_OUT_ID 
    INTO 
        :L_SKLAD_ID,:L_SUMA,:L_OPR_TIP; 
 
    EXECUTE PROCEDURE ADD_OPR(100 + :L_OPR_TIP,NULL,P_IP,P_USER_ID,L_SKLAD_ID,NULL,L_SUMA) 
    RETURNING_VALUES :L_ANNUL_OPR_ID; 
 
    EXECUTE PROCEDURE ADD_OPR_ANUL(L_ANNUL_OPR_ID,P_OPR_OUT_ID) 
    RETURNING_VALUES :L_ANNUL_ID; 
 
    INSERT INTO OLD_OUT_EL(OPR_ID,SIMPLE_ID,KOL,SUMA,SUMA_FR,SUMA_SR,KOL2) 
    SELECT 
        CAST(:L_ANNUL_OPR_ID AS INTEGER), 
        OUT_EL.SIMPLE_ID, 
        OUT_EL.KOL, 
        OUT_EL.SUMA, 
        OUT_EL.SUMA_FR, 
        OUT_EL.SUMA_SR, 
        OUT_EL2.KOL 
     FROM 
        OUT_EL LEFT JOIN OUT_EL2 ON OUT_EL.ID = OUT_EL2.OUT_EL_ID 
     WHERE 
        OUT_EL.OPR_ID = :P_OPR_OUT_ID; 
 
    SELECT 
        OPR.SKLAD_ID, 
        OPR.SUMA, 
        OPR.ID 
    FROM 
        OPR INNER JOIN PRODUCTION ON PRODUCTION.OPR_OUT_ID = :P_OPR_OUT_ID AND OPR.ID = PRODUCTION.OPR_IN_ID 
    INTO 
        :L_SKLAD_ID,:L_SUMA,:L_OPR_IN_ID; 
 
    EXECUTE PROCEDURE ADD_OPR(101+:L_OPR_TIP,NULL,P_IP,P_USER_ID,L_SKLAD_ID,NULL,L_SUMA) 
    RETURNING_VALUES :L_ANNUL_OPR_ID; 
 
    EXECUTE PROCEDURE ADD_OPR_ANUL(L_ANNUL_OPR_ID,L_OPR_IN_ID) 
    RETURNING_VALUES :L_ANNUL_ID; 
 
    INSERT INTO OLD_IN_EL(OPR_ID,SIMPLE_ID,KOL,SUMA_FR,SUMA_SR,KOL2) 
    SELECT 
        CAST (:L_ANNUL_OPR_ID AS INTEGER), 
        IN_EL.SIMPLE_ID, 
        IN_EL.KOL, 
        IN_EL.SUMA_FR, 
        IN_EL.SUMA_SR, 
        IN_EL2.KOL 
     FROM 
        IN_EL LEFT JOIN IN_EL2 ON IN_EL.ID = IN_EL2.IN_EL_ID 
     WHERE 
        IN_EL.OPR_ID = :L_OPR_IN_ID; 
END^


ALTER PROCEDURE PRODUCTION_EDIT (
    P_OPR_OUT_ID INTEGER,
    P_USER_ID INTEGER,
    P_IP INTEGER)
AS
DECLARE VARIABLE L_SKLAD_ID SMALLINT; 
DECLARE VARIABLE L_USER_ID SMALLINT; 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_OPR_DATE DATE; 
DECLARE VARIABLE L_EDIT_OPR_ID INTEGER; 
DECLARE VARIABLE L_EDIT_ID INTEGER; 
DECLARE VARIABLE L_OPR_IN_ID INTEGER; 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_KEY; 
BEGIN 
    SELECT 
        OPR.SKLAD_ID, 
        OPR.SUMA, 
        OPR.USER_ID, 
        OPR.OPR_DATE, 
        OPR.OPR_TIP 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_OUT_ID 
    INTO 
        :L_SKLAD_ID,:L_SUMA,:L_USER_ID,:L_OPR_DATE,:L_OPR_TIP; 
 
    EXECUTE PROCEDURE ADD_OPR(200+ :L_OPR_TIP,NULL,P_IP,P_USER_ID,L_SKLAD_ID,NULL,L_SUMA) 
    RETURNING_VALUES :L_EDIT_OPR_ID; 
 
    EXECUTE PROCEDURE ADD_OPR_EDIT(L_EDIT_OPR_ID,P_OPR_OUT_ID,L_SKLAD_ID,L_USER_ID,NULL,L_SUMA,L_OPR_DATE) 
    RETURNING_VALUES :L_EDIT_ID; 
 
    INSERT INTO OLD_OUT_EL(OPR_ID,SIMPLE_ID,KOL,SUMA,SUMA_FR,SUMA_SR,KOL2) 
    SELECT 
        CAST(:L_EDIT_OPR_ID AS INTEGER), 
        OUT_EL.SIMPLE_ID, 
        OUT_EL.KOL, 
        OUT_EL.SUMA, 
        OUT_EL.SUMA_FR, 
        OUT_EL.SUMA_SR, 
        OUT_EL2.KOL 
     FROM 
        OUT_EL LEFT JOIN OUT_EL2 ON OUT_EL.ID = OUT_EL2.OUT_EL_ID 
     WHERE 
        OUT_EL.OPR_ID = :P_OPR_OUT_ID; 
 
    SELECT 
        OPR.SKLAD_ID, 
        OPR.SUMA, 
        OPR.ID, 
        OPR.OPR_DATE, 
        OPR.USER_ID 
    FROM 
        OPR INNER JOIN PRODUCTION ON PRODUCTION.OPR_OUT_ID = :P_OPR_OUT_ID AND OPR.ID = PRODUCTION.OPR_IN_ID 
    INTO 
        :L_SKLAD_ID,:L_SUMA,:L_OPR_IN_ID,:L_OPR_DATE,:L_USER_ID; 
 
    EXECUTE PROCEDURE ADD_OPR(201 + :L_OPR_TIP,NULL,P_IP,P_USER_ID,L_SKLAD_ID,NULL,L_SUMA) 
    RETURNING_VALUES :L_EDIT_OPR_ID; 
 
    EXECUTE PROCEDURE ADD_OPR_EDIT(L_EDIT_OPR_ID,L_OPR_IN_ID,L_SKLAD_ID,L_USER_ID,NULL,L_SUMA,L_OPR_DATE) 
    RETURNING_VALUES :L_EDIT_ID; 
 
    INSERT INTO OLD_IN_EL(OPR_ID,SIMPLE_ID,KOL,SUMA_FR,SUMA_SR,KOL2) 
    SELECT 
        CAST (:L_EDIT_OPR_ID AS INTEGER), 
        IN_EL.SIMPLE_ID, 
        IN_EL.KOL, 
        IN_EL.SUMA_FR, 
        IN_EL.SUMA_SR, 
        IN_EL2.KOL 
     FROM 
        IN_EL LEFT JOIN IN_EL2 ON IN_EL.ID = IN_EL2.IN_EL_ID 
     WHERE 
        IN_EL.OPR_ID = :L_OPR_IN_ID; 
END^


ALTER PROCEDURE PRODUCTION_SWITCH (
    P_OUT_OPR_ID INTEGER,
    P_USER_ID SMALLINT,
    P_IP INTEGER,
    P_FLAG_IS_EDIT SMALLINT)
RETURNS (
    R_RESULT SMALLINT)
AS
BEGIN 
    R_RESULT = 1; 
 
    IF (P_FLAG_IS_EDIT = 0) THEN 
        EXECUTE PROCEDURE PRODUCTION_ANNUL(P_OUT_OPR_ID,P_USER_ID,P_IP); 
    ELSE IF (P_FLAG_IS_EDIT = 1) THEN 
        EXECUTE PROCEDURE PRODUCTION_EDIT(P_OUT_OPR_ID,P_USER_ID,P_IP); 
    ELSE 
        R_RESULT = 0; 
END^


ALTER PROCEDURE PROIZVODSTVO_CALC_SUMA_SR (
    P_OPR_IN_ID INTEGER,
    P_OPR_OUT_ID INTEGER)
AS
DECLARE VARIABLE L_SKLAD_OUT_ID INTEGER;
DECLARE VARIABLE L_SKLAD_IN_ID INTEGER;
DECLARE VARIABLE L_OUT_ID INTEGER;
DECLARE VARIABLE L_OUT_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_SIMPLE_ID INTEGER;
DECLARE VARIABLE L_OUT_SUMA_SR DOUBLE PRECISION;
DECLARE VARIABLE L_OUT_SUM_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_NAL_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_NAL_SUMA DOUBLE PRECISION;
BEGIN
    SELECT
        OPR.SKLAD_ID
    FROM
        OPR
    WHERE
        OPR.ID = :P_OPR_OUT_ID
    INTO
        :L_SKLAD_OUT_ID;

    SELECT
        OPR.SKLAD_ID
    FROM

        OPR
    WHERE
        OPR.ID = :P_OPR_IN_ID
    INTO
        :L_SKLAD_IN_ID;

    FOR SELECT
        SUM(OUT_EL.KOL),
        OUT_EL.SIMPLE_ID
    FROM
        IN_EL INNER JOIN SIMPLE ON (IN_EL.OPR_ID = :P_OPR_IN_ID AND SIMPLE.ID = IN_EL.SIMPLE_ID)
        INNER JOIN OPR_RAZPAD_NODE ORN ON ORN.IN_EL_ID = IN_EL.ID
        INNER JOIN OUT_EL ON OUT_EL.ID = ORN.OUT_EL_ID
    GROUP BY 2
    INTO
        :L_OUT_SUM_KOL,:L_OUT_SIMPLE_ID
    DO BEGIN
        SELECT
            NAL.KOL_NAL + :L_OUT_SUM_KOL,
            NAL.SUMA
        FROM
            NAL
        WHERE
            NAL.SIMPLE_ID = :L_OUT_SIMPLE_ID
            AND NAL.SKLAD_ID = :L_SKLAD_OUT_ID
        INTO
            :L_NAL_KOL,:L_NAL_SUMA;

        /*АКО ИМА НАЛИЧНО КОЛИЧЕСТВО ЗА ТОЗИ ПРОДУКТ*/
        IF (L_NAL_KOL > 0) THEN BEGIN
            FOR SELECT
                OUT_EL.ID,
                OUT_EL.KOL
            FROM
                IN_EL INNER JOIN OPR_RAZPAD_NODE ORN ON (IN_EL.OPR_ID = :P_OPR_IN_ID AND ORN.IN_EL_ID = IN_EL.ID)
                INNER JOIN OUT_EL ON OUT_EL.ID = ORN.OUT_EL_ID
            WHERE
                OUT_EL.SIMPLE_ID = :L_OUT_SIMPLE_ID
            INTO
                :L_OUT_ID,:L_OUT_KOL
            DO IF (ROUND5(L_NAL_KOL) > 0) THEN BEGIN
                IF (L_NAL_KOL > L_OUT_KOL) THEN
                    L_OUT_SUMA_SR = ROUNDD(ROUND5(L_NAL_SUMA / L_NAL_KOL) * L_OUT_KOL);
                ELSE
                    L_OUT_SUMA_SR = L_NAL_SUMA;--ОБИРА РАЗЛИКИТЕ

                L_NAL_KOL = ROUND5(L_NAL_KOL - L_OUT_KOL);
                L_NAL_SUMA = ROUNDD(L_NAL_SUMA - L_OUT_SUMA_SR);

                UPDATE OUT_EL SET
                SUMA_SR = :L_OUT_SUMA_SR
                WHERE ID = :L_OUT_ID;
                
                UPDATE NAL SET
                SUMA = ROUNDD(SUMA - :L_OUT_SUMA_SR)
                WHERE SIMPLE_ID = :L_OUT_SIMPLE_ID
                AND SKLAD_ID = :L_SKLAD_OUT_ID;
            END
        END
    END
END^


ALTER PROCEDURE PROIZVODSTVO_NO_SN (
    P_IN_EL_ID INTEGER)
AS
DECLARE VARIABLE L_PEN_ID INTEGER;
DECLARE VARIABLE L_IN_SUMA_FR DOUBLE PRECISION;
DECLARE VARIABLE L_IN_SUMA_SR DOUBLE PRECISION;
BEGIN 
    SELECT
        SUM(OUT_EL.SUMA_FR),
        SUM(OUT_EL.SUMA_SR)
    FROM
        OPR_RAZPAD_NODE ORN INNER JOIN OUT_EL ON (ORN.IN_EL_ID = :P_IN_EL_ID
        AND ORN.OUT_EL_ID = OUT_EL.ID)
    INTO
        :L_IN_SUMA_FR,:L_IN_SUMA_SR;
 
    SELECT
        PIN.PARTIDA_NODE_ID
    FROM
        PARTIDA_IN_EL_NODE PIN
    WHERE
        PIN.IN_EL_ID = :P_IN_EL_ID
    INTO
        :L_PEN_ID;

    UPDATE PARTIDA_EL_NODE SET
    SUMA_FR = ROUND(COALESCE(:L_IN_SUMA_FR,0.00),2),
    SUMA_SR = ROUND(COALESCE(:L_IN_SUMA_SR,0.00),2)
    WHERE ID = :L_PEN_ID;
END^


ALTER PROCEDURE PROIZVODSTVO_SN (
    P_IN_EL_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_IN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_IN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_IN_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PEN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PEN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_IN_CENA_FR TYPE OF DOM_CENA; 
DECLARE VARIABLE L_IN_CENA_SR TYPE OF DOM_CENA; 
BEGIN 
/*ЗА РАЗЛИКА ОТ ПРОЦЕДУРАТА ЗА 
КОЛИЧЕСТВЕНИ ПАРТИДИ, ЗА СН ЩЕ ПОЛЗВАНЕ СТАНДАРТНАТА ПРОЦЕДУРА ЗА ВХОД. 
ТУК ЩЕ ИЗПОЛЗВАМЕ САМО ДА НАМЕРИМ СУМА СРЕДНА НА ИЗХОДА И ВХОДА И ЩЕ РАЗПРЕДЕЛЯ ПЪРВА ВЛЯЗЛА 
ПО ВЕЧЕ СЪЗДАДЕНИТЕ ПАРТИДИ.*/ 
    SELECT 
        IN_EL.KOL 
    FROM 
        IN_EL 
    WHERE 
        IN_EL.ID = :P_IN_EL_ID 
    INTO 
        :L_IN_KOL; 
 
    --НАМИРАМЕ СУМА СРЕДНА ЗА ИЗХОДЯЩИТЕ ЕЛЕМЕНТИ ЗА ВСЕКИ ЕЛЕМЕНТ НА ВХОДА 
    SELECT 
        SUM(OUT_EL.SUMA_FR), 
        SUM(OUT_EL.SUMA_SR) 
    FROM 
        OPR_RAZPAD_NODE INNER JOIN OUT_EL ON (OPR_RAZPAD_NODE.IN_EL_ID = :P_IN_EL_ID 
        AND OUT_EL.ID = OPR_RAZPAD_NODE.OUT_EL_ID) 
    INTO 
        :L_IN_SUMA_FR, :L_IN_SUMA_SR; 
 
    L_IN_CENA_FR = ROUND(L_IN_SUMA_FR / L_IN_KOL,5); 
    L_IN_CENA_SR = ROUND(L_IN_SUMA_SR / L_IN_KOL,5); 
 
    FOR SELECT 
        PIN.PARTIDA_NODE_ID, 
        PEN.KOL 
    FROM 
        PARTIDA_IN_EL_NODE PIN INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
    WHERE 
        PIN.IN_EL_ID = :P_IN_EL_ID 
    INTO 
        :L_PEN_ID, :L_PEN_KOL 
    DO BEGIN 
        IF (L_IN_KOL - L_PEN_KOL <= 0.00) THEN BEGIN 
            --ПОСЛЕДНОТО КОЛИЧЕСТВО ОТ РАЗПРЕДЕЛЯНЕТО НА СЕРИЙНИ НОМЕРА. ПОЛУЧАВА ОСТАТЪКА(ВСИЧКО) В ПАРТИДАТА 
            UPDATE PARTIDA_EL_NODE SET 
                SUMA_FR = ROUND(:L_IN_SUMA_FR, 2), 
                SUMA_SR = ROUND(:L_IN_SUMA_SR, 2) 
            WHERE 
                ID = :L_PEN_ID; 
 
            L_IN_SUMA_FR  = 0.00; 
            L_IN_KOL = 0.00; 
        END 
        ELSE BEGIN 
            UPDATE PARTIDA_EL_NODE SET 
                SUMA_FR = ROUND(:L_IN_CENA_FR, 2), 
                SUMA_SR = ROUND(:L_IN_CENA_SR, 2) 
            WHERE 
                ID = :L_PEN_ID; 
 
            L_IN_SUMA_FR  = ROUND(L_IN_SUMA_FR - ROUND(L_IN_CENA_FR, 2), 2); 
            L_IN_SUMA_SR  = ROUND(L_IN_SUMA_SR - ROUND(L_IN_CENA_SR, 2), 2); 
            L_IN_KOL = ROUND(L_IN_KOL - L_PEN_KOL, 5); 
        END 
    END 
END^


ALTER PROCEDURE PROV_CL_EL
RETURNS (
    AA INTEGER)
AS
declare variable nomr integer; 
declare variable opr_id integer; 
declare variable simple_id integer; 
declare variable ii integer; 
BEGIN 
  FOR 
    select 
      count(cenova_lista_el.id) nomR, 
      cenova_lista_el.opr_id, 
      cenova_lista_el.simple_id 
    from cenova_lista_el 
    group by cenova_lista_el.opr_id, cenova_lista_el.simple_id 
    having count(cenova_lista_el.id) > 1 
    INTO :nomr,:opr_id,:simple_id 
  DO 
  BEGIN 
    ii = 0; 
   for select 
      cenova_lista_el.id 
    from cenova_lista_el 
    where 
      cenova_lista_el.opr_id = :opr_id and 
      cenova_lista_el.simple_id = :simple_id 
    into :aa 
    do begin 
      if (ii > 0) then begin 
        delete from cenova_lista_el 
        where (id = :aa); 
      end 
      ii = ii + 1; 
      SUSPEND; 
    end 
  END 
END^


ALTER PROCEDURE PROVERKA_TRANSFER_POR (
    P_SKLAD_ID TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY)
RETURNS (
    SIMPLE_ID TYPE OF DOM_KEY,
    KOL TYPE OF DOM_KOL,
    NAME TYPE OF DOM_CHAR_100,
    KOL_RAZ TYPE OF DOM_KOL,
    RAZFASOVKA_ID TYPE OF DOM_KEY,
    NAME_RAZ TYPE OF DOM_CHAR_30,
    SUMA TYPE OF DOM_SUMA,
    KOL_NAL TYPE OF DOM_KOL,
    KOL_V_RAZ TYPE OF DOM_KOL,
    PRODUCT TYPE OF DOM_KEY,
    DDS TYPE OF DOM_PERCENT)
AS
declare variable L_POR_EL_ID type of DOM_KEY; 
declare variable L_ID type of DOM_KEY; 
BEGIN 
    FOR SELECT 
        POR_EL.ID, 
        POR_EL.SIMPLE_ID, 
        POR_EL.KOL, 
        SIMPLE.NAME, 
        POR_EL_RAZ_NODE.KOL KOL_RAZ, 
        POR_EL_RAZ_NODE.RAZFASOVKA_ID, 
        RAZ_ELEMENT.NAME, 
        POR_EL.SUMA, 
        NAL.KOL_NAL, 
        RAZFASOVKA.KOL, 
        SIMPLE.DDS, 
        COALESCE((SELECT FIRST 1 POR_EL_ID FROM POR_EL_PRODUCTION WHERE POR_EL_ID = POR_EL.ID), 0) 
    FROM 
        POR_EL INNER JOIN SIMPLE ON SIMPLE.ID = POR_EL.SIMPLE_ID AND SIMPLE.USLUGA <> '1' 
        LEFT JOIN POR_EL_RAZ_NODE ON POR_EL_RAZ_NODE.POR_EL_ID = POR_EL.ID 
        LEFT JOIN RAZFASOVKA ON RAZFASOVKA.ID = POR_EL_RAZ_NODE.RAZFASOVKA_ID 
        LEFT JOIN RAZ_ELEMENT ON RAZ_ELEMENT.ID = POR_EL_RAZ_NODE.RAZFASOVKA_ID 
        LEFT JOIN NAL ON NAL.SIMPLE_ID = POR_EL.SIMPLE_ID AND NAL.SKLAD_ID = :P_SKLAD_ID 
    WHERE 
        POR_EL.OPR_ID = :P_OPR_ID 
    ORDER BY 1 
    INTO 
        :L_POR_EL_ID, :SIMPLE_ID, :KOL, :NAME, :KOL_RAZ, :RAZFASOVKA_ID, :NAME_RAZ, :SUMA, :KOL_NAL, :KOL_V_RAZ, :DDS, :PRODUCT 
    DO BEGIN 
        IF (:PRODUCT > 0) THEN BEGIN 
            L_ID = 0; 
            SELECT FIRST 1 
                POR_EL_PRODUCTION.ID 
            FROM 
                POR_EL_PRODUCTION INNER JOIN SIMPLE ON SIMPLE.ID = POR_EL_PRODUCTION.SIMPLE_ID 
                LEFT JOIN NAL ON NAL.SIMPLE_ID = POR_EL_PRODUCTION.SIMPLE_ID AND NAL.SKLAD_ID = :P_SKLAD_ID 
            WHERE 
                POR_EL_ID = :L_POR_EL_ID 
                AND (COALESCE(NAL.KOL_NAL,0) - POR_EL_PRODUCTION.KOL)<0 
            INTO 
                :L_ID; 
 
            IF (L_ID = 0) THEN 
                KOL_NAL = :KOL; 
            SUSPEND; 
        END 
        ELSE 
            SUSPEND; 
    END 
END^


ALTER PROCEDURE RAZCHET_FAKTURI (
    P_FROM_DATE TYPE OF DOM_DATE,
    P_TO_DATE TYPE OF DOM_DATE,
    P_PAYMENT_DATE TYPE OF DOM_DATE)
RETURNS (
    R_INVOICE_ID TYPE OF DOM_KEY,
    R_OPR_ID TYPE OF DOM_KEY,
    R_INVOICE_NUMBER TYPE OF DOM_CHAR_10,
    R_NETO TYPE OF DOM_SUMA,
    R_DDS TYPE OF DOM_SUMA,
    R_TOTAL TYPE OF DOM_SUMA,
    R_OPR_DATE TYPE OF DOM_DATE,
    R_CUSTOMER_ID TYPE OF DOM_KEY,
    R_CUSTOMER_NAME TYPE OF DOM_CHAR_100,
    R_COMPANY_NAME TYPE OF DOM_CHAR_100,
    R_PAY_TYPE TYPE OF DOM_SMAL_INT,
    R_IDNOMDDS TYPE OF DOM_CHAR_15,
    R_IDNOM TYPE OF DOM_CHAR_15,
    R_SUMA_PL TYPE OF DOM_SUMA,
    R_FAK_TYPE TYPE OF DOM_SMAL_INT,
    R_SUMA_PL_NETO TYPE OF DOM_SUMA,
    R_SUMA_PL_DDS TYPE OF DOM_SUMA)
AS
DECLARE VARIABLE L_OPR_SUMA TYPE OF DOM_SUMA; 
BEGIN 
    P_FROM_DATE = COALESCE(P_FROM_DATE, '01.01.2000'); 
    P_TO_DATE = COALESCE(P_TO_DATE, '31.12.2100'); 
    P_PAYMENT_DATE = COALESCE(P_PAYMENT_DATE, P_TO_DATE); 
 
    FOR WITH TMP_FAK AS ( 
    SELECT DISTINCT 
        FAK.ID AS FAK_ID, 
        IIF(EXISTS(SELECT T.ID FROM FAK_PROD T WHERE T.FAK_ID = FAK.ID), 1, IIF(EXISTS(SELECT T.ID FROM PAYMENT T WHERE T.FAK_ID = FAK.ID), 2, 0)) AS FAK_TYPE 
    FROM 
        FAK INNER JOIN OPR ON OPR.ID = FAK.OPR_ID AND OPR.OPR_DATE BETWEEN :P_FROM_DATE AND :P_TO_DATE AND OPR.OPR_TIP = 5 
    WHERE 
        NOT EXISTS(SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = FAK.OPR_ID) 
    ) 
    SELECT 
        FAK.ID, 
        FAK.OPR_ID, 
        FAK.NUMBER, 
        ROUND(FAK.SUMA * COALESCE(FAK.KURS_VALUTA, 1.00), 2), 
        ROUND(FAK.DDS * COALESCE(FAK.KURS_VALUTA, 1.00),2), 
        ROUND(FAK.TOTAL * COALESCE(FAK.KURS_VALUTA, 1.00),2), 
        OPR.OPR_DATE, 
        KLI.ID, 
        KLI.NAME, 
        FF.NAME_FAK, 
        FAK.PAY_TYPE, 
        FF.IDNOMDDS, 
        FF.IDNOM , 
        TMP_FAK.FAK_TYPE 
    FROM 
        FAK INNER JOIN TMP_FAK ON TMP_FAK.FAK_ID = FAK.ID 
        INNER JOIN FIRMI_FAK_DATA FF ON FF.FAK_ID = FAK.ID 
        INNER JOIN OPR ON OPR.ID = FAK.OPR_ID 
        INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
    ORDER BY 3 
    INTO 
        :R_INVOICE_ID, :R_OPR_ID, :R_INVOICE_NUMBER, :R_NETO, :R_DDS, :R_TOTAL, :R_OPR_DATE, 
        :R_CUSTOMER_ID, :R_CUSTOMER_NAME, :R_COMPANY_NAME, :R_PAY_TYPE, :R_IDNOMDDS, :R_IDNOM, :R_FAK_TYPE 
    DO BEGIN 
        IF (R_FAK_TYPE = 1) THEN BEGIN 
            R_SUMA_PL = 0.00; 
            L_OPR_SUMA = 0.00; 
            -- СУМА НА ПЛАТЕНИТЕ ВЕДНАГА ПРОДАЖБИ КЪМ ФАКТУРАТА 
            SELECT 
                SUM(OPR.SUMA) 
            FROM 
                FAK_PROD INNER JOIN OUT ON OUT.OPR_ID = FAK_PROD.OPR_ID AND FAK_PROD.FAK_ID = :R_INVOICE_ID AND OUT.PAY_TIP IN (0, 2) 
                INNER JOIN OPR ON OPR.ID = OUT.OPR_ID AND OPR.DATETIME < :P_PAYMENT_DATE+1 
            WHERE 
                NOT EXISTS(SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
            INTO 
                :L_OPR_SUMA; 
 
            R_SUMA_PL = ROUND(R_SUMA_PL + COALESCE(L_OPR_SUMA, 0.00), 2); 
 
            -- СУМА НА КРЕДИТНИТЕ ИЗВЕСТИЯ КЪМ ФАКТУРАТА 
            L_OPR_SUMA = 0.00; 
            SELECT 
                SUM(OPR.SUMA) 
            FROM 
                RET_STOKA_PROD_KI RET INNER JOIN OPR ON OPR.ID = RET.OPR_ID AND RET.FAK_OPR_ID = :R_INVOICE_ID 
            WHERE 
                NOT EXISTS(SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = OPR.ID) 
                AND OPR.OPR_DATE <= :P_PAYMENT_DATE 
            INTO 
                :L_OPR_SUMA; 
 
            R_SUMA_PL = ROUND(R_SUMA_PL + COALESCE(L_OPR_SUMA, 0.00), 2); 
 
            -- СУМА НА ПЛАЩАНИЯТА КЪМ ПРОДАЖБИ КЪМ ФАКТУРАТА 
            L_OPR_SUMA = 0.00; 
            SELECT 
                SUM(OPN.SUMA) 
            FROM 
                FAK_PROD INNER JOIN SUMI ON SUMI.OPR_ID = FAK_PROD.OPR_ID AND FAK_PROD.FAK_ID = :R_INVOICE_ID 
                INNER JOIN OPR_PAYMENT_NODE OPN ON OPN.OPR_ID = SUMI.ID 
                INNER JOIN SUMI SUMI_P ON SUMI_P.ID = OPN.PAYMENT_ID 
                INNER JOIN PAYMENT ON PAYMENT.OPR_ID = SUMI_P.OPR_ID AND PAYMENT.FLAG_AVANS = 0 
                INNER JOIN OPR OPR_P ON OPR_P.ID = SUMI_P.OPR_ID AND OPR_P.OPR_DATE <= :P_PAYMENT_DATE 
            WHERE 
                NOT EXISTS(SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = FAK_PROD.OPR_ID) 
            INTO 
                :L_OPR_SUMA; 
 
            R_SUMA_PL = ROUND(R_SUMA_PL + COALESCE(L_OPR_SUMA, 0.00), 2); 
 
            -- СУМА НА ПЛАЩАНИЯТА КЪМ КРЕДИТНИ ИЗВЕСТИЯ КЪМ ФАКТУРАТА 
            L_OPR_SUMA = 0.00; 
            WITH TMP AS ( 
            SELECT 
                SUMI.OPR_ID 
            FROM 
                RET_STOKA_PROD_KI RET INNER JOIN SUMI ON SUMI.OPR_ID = RET.OPR_ID AND RET.FAK_OPR_ID = :R_INVOICE_ID 
            WHERE 
                NOT EXISTS(SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = RET.OPR_ID) 
            UNION ALL 
 
            SELECT 
                SUMI.OPR_ID 
            FROM 
                RET_STOKA_PROD_KI RET INNER JOIN KI_NODE ON KI_NODE.KI_OPR_ID = RET.OPR_ID AND RET.FAK_OPR_ID = :R_INVOICE_ID 
                INNER JOIN SUMI ON SUMI.OPR_ID = KI_NODE.SUB_KI_OPR_ID 
            WHERE 
                NOT EXISTS(SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = KI_NODE.SUB_KI_OPR_ID)) 
            SELECT 
                -SUM(OPN.SUMA) AS SUMA 
            FROM 
                TMP INNER JOIN SUMI ON SUMI.OPR_ID = TMP.OPR_ID 
                INNER JOIN OPR_PAYMENT_NODE OPN ON OPN.OPR_ID = SUMI.ID 
                INNER JOIN SUMI SUMI_P ON SUMI_P.ID = OPN.PAYMENT_ID 
                INNER JOIN OPR OPR_P ON OPR_P.ID = SUMI_P.OPR_ID AND OPR_P.OPR_DATE <= :P_PAYMENT_DATE AND OPR_P.OPR_TIP = 29 
            INTO 
                :L_OPR_SUMA; 
 
            R_SUMA_PL = ROUND(R_SUMA_PL + COALESCE(L_OPR_SUMA, 0.00), 2); 
        END 
        ELSE IF (R_FAK_TYPE = 2) THEN BEGIN 
            R_SUMA_PL = 0.00; 
            L_OPR_SUMA = 0.00; 
 
            WITH TMP AS ( 
            SELECT 
                ABS(SUM(FAK_EL.SUMA_DDS)) AS DDS, 
                ABS(SUM(FAK_EL.SUMA_TOTAL))  AS TOTAL 
            FROM 
                FAK_EL INNER JOIN OPR ON OPR.ID = FAK_EL.OPR_ID AND OPR.OPR_DATE <= :P_PAYMENT_DATE 
            WHERE 
                FAK_EL.AVANS_OPR_ID = :R_OPR_ID 
                AND NOT EXISTS(SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = FAK_EL.OPR_ID) 
 
            UNION ALL 
 
            SELECT 
                ABS(SUM(FAK_EL.SUMA_DDS)), 
                ABS(SUM(FAK_EL.SUMA_TOTAL)) 
            FROM 
                RET_STOKA_PROD_KI RT INNER JOIN OPR ON RT.OPR_ID = OPR.ID AND RT.FAK_OPR_ID = :R_INVOICE_ID AND OPR.OPR_DATE <= :P_PAYMENT_DATE 
                INNER JOIN  FAK_EL ON RT.OPR_ID = FAK_EL.OPR_ID 
            WHERE 
                NOT EXISTS(SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = FAK_EL.OPR_ID)) 
            SELECT 
                ABS(SUM(TMP.DDS)), 
                ABS(SUM(TMP.TOTAL)) 
            FROM 
                TMP 
            INTO 
                :R_SUMA_PL_DDS, :R_SUMA_PL; 
 
            R_SUMA_PL_NETO = ROUND(R_SUMA_PL - R_SUMA_PL_DDS, 2); 
        END 
        ELSE 
            R_SUMA_PL = 0.00; 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE RAZF_INSERT (
    P_NAME VARCHAR(30),
    P_AMBALAJ SMALLINT)
RETURNS (
    R_ID INTEGER)
AS
begin 
  insert into raz_tip (name, ambalaj) 
  values (:p_name, :p_ambalaj) 
  RETURNING ID INTO :r_id; 
  suspend; 
end^


ALTER PROCEDURE RAZPAD_CALC (
    P_IN_EL_ID INTEGER)
AS
DECLARE VARIABLE L_RAZPAD_TYPE TYPE OF DOM_KEY; 
BEGIN 
/*V.4*/ 
    SELECT 
        RAZPAD.R_TYPE 
    FROM 
        RAZPAD INNER JOIN IN_EL ON IN_EL.OPR_ID = RAZPAD.OPR_ID AND IN_EL.ID = :P_IN_EL_ID 
    INTO 
        :L_RAZPAD_TYPE; 
 
    IF (L_RAZPAD_TYPE IS NULL) THEN 
        EXIT; 
 
    IF (L_RAZPAD_TYPE = 0) THEN 
        EXECUTE PROCEDURE RAZPAD_CALC_ORIGINAL(:P_IN_EL_ID); 
    ELSE 
        EXECUTE PROCEDURE MEAT_CUTTING_CALC(:P_IN_EL_ID); 
END;^


ALTER PROCEDURE RAZPAD_CALC_ORIGINAL (
    P_IN_EL_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_OUT_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OUT_EL_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_OUT_EL_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_SUMA_IN_KOL TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_ED_CENA_SR TYPE OF DOM_CENA; 
DECLARE VARIABLE L_ED_CENA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_IN_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_IN_EL_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_IN_EL_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_IN_EL_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_RSN TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_OPR_ID TYPE OF DOM_KEY; 
BEGIN 
-- V.1 
    -- ПОДАВА СЕ ПОЛУЧЕНИЯ ОТ РАЗПАД ЕЛЕМЕНТ. ЗА НЕГО СЕ ИЗВЛИЧАТ ДАННИТЕ ОТ РАЗПАДА - 
    -- ОТ КОЙ ЕЛЕМЕНТ Е ПОЛУЧЕН И С КОИ ДРУГИ ЕЛЕМЕНТИ Е ПОЛУЧЕН. 
    -- СУМИТЕ СЕ ИЗЧИСЛЯВАТ ЗА ВСИЧКИ, НО САМО ЗА ПОДАДЕНИЯ ЕЛЕМЕНТ СЕ ЗАПИСВАТ В БАЗАТА 
    -- СЪЩО КАКТО ПРОИЗВОДСТВО И ПРЕХВЪРЛЯНИЯТА ВХОДОВЕТЕ СЕ ИЗЧИСЛЯВАТ НА БАЗА ИЗХОДИТЕ, 
    -- А НЕ ИЗХОДА ДА ПРОМЕНЯ ВХОДОВЕТЕ. 
    SELECT 
        IN_EL.OPR_ID 
    FROM 
        IN_EL 
    WHERE 
        ID = :P_IN_EL_ID 
    INTO 
        :L_OPR_ID; 
 
    SELECT 
        ORN.OUT_EL_ID 
    FROM 
        OPR_RAZPAD_NODE ORN 
    WHERE 
        ORN.IN_EL_ID = :P_IN_EL_ID 
    INTO 
        :L_OUT_EL_ID; 
 
    FOR SELECT 
        OUT_EL.SUMA_SR, 
        OUT_EL.SUMA_FR, 
        SUM(IN_EL.KOL) 
    FROM 
        OUT_EL INNER JOIN OPR_RAZPAD_NODE ORN ON ORN.OUT_EL_ID = OUT_EL.ID AND ORN.OUT_EL_ID = :L_OUT_EL_ID 
        INNER JOIN IN_EL ON IN_EL.ID = ORN.IN_EL_ID 
    GROUP BY 1,2 
    INTO 
        :L_OUT_EL_SUMA_SR, :L_OUT_EL_SUMA_FR, :L_SUMA_IN_KOL 
    DO BEGIN 
        --ПОЛУАВАМЕ ЕДИНИЧНА СРЕДНА ЦЕНА - ДА СЕ ЗНАЕ ЗА КОЙ 
        --ВХОДЯЩ ЕЛЕМЕНТ КАКВА СУМА ОТИВА В НАЛИЧНОСТИ 
 
        L_ED_CENA_SR = ROUND(L_OUT_EL_SUMA_SR / L_SUMA_IN_KOL, 5); 
        L_ED_CENA_FR = ROUND(L_OUT_EL_SUMA_FR / L_SUMA_IN_KOL, 5); 
 
        --РАЗПРЕДЕЛЕНИЯ НА СУМИТЕ ПО СРЕДНО ПРЕТЕГЛЕНА ЗА ЕЛЕМЕНТИТЕ НА ВХОДА 
        FOR SELECT 
            IN_EL.ID, 
            IN_EL.KOL, 
            CAST(SIMPLE.RSN AS SMALLINT) 
        FROM 
            IN_EL INNER JOIN OPR_RAZPAD_NODE RZN ON RZN.IN_EL_ID = IN_EL.ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
        WHERE 
            RZN.OUT_EL_ID = :L_OUT_EL_ID 
        INTO 
            :L_IN_EL_ID, :L_IN_EL_KOL, :L_RSN 
        DO BEGIN 
            L_SUMA_IN_KOL = ROUND(L_SUMA_IN_KOL - L_IN_EL_KOL, 5); 
 
            IF (L_SUMA_IN_KOL > 0) THEN BEGIN 
                L_IN_EL_SUMA_SR = ROUND(L_IN_EL_KOL * L_ED_CENA_SR, 2); 
                L_IN_EL_SUMA_FR = ROUND(L_IN_EL_KOL * L_ED_CENA_FR, 2); 
            END 
            ELSE BEGIN 
            --ПОСЛЕДНИЯ ЕЛЕМЕНТ ВЗИМА ОСТАТЪКА ОТ СУМАТА - ТЯ МОЖЕ ДА НЕ 
            --СЪВПАДА С ЕДИНИЧНАТА ЦЕНА * НЕГОВОТО КОЛИЧЕСТВО - ОБИРА РАЗЛИКИТЕ 
                L_IN_EL_SUMA_SR = L_OUT_EL_SUMA_SR; 
                L_IN_EL_SUMA_FR = L_OUT_EL_SUMA_FR; 
            END 
 
            L_OUT_EL_SUMA_FR = ROUND(L_OUT_EL_SUMA_FR - L_IN_EL_SUMA_SR, 2); 
            L_OUT_EL_SUMA_SR = ROUND(L_OUT_EL_SUMA_SR - L_IN_EL_SUMA_SR, 2); 
 
            IF (L_IN_EL_ID = P_IN_EL_ID) THEN BEGIN 
                --ПРОМЕНЯМЕ ДАННИТЕ САМО ЗА ПОДАДЕНИЯ ЕЛЕМЕНТ 
 
                UPDATE IN_EL SET 
                    SUMA_FR = :L_IN_EL_SUMA_FR, 
                    SUMA_SR = :L_IN_EL_SUMA_SR 
                WHERE 
                    ID = :L_IN_EL_ID; 
 
               IF (L_RSN = 1) THEN BEGIN 
                    FOR SELECT 
                        PEN.ID 
                    FROM 
                        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = :L_IN_EL_ID 
                        AND PEN.ID = PIN.PARTIDA_NODE_ID 
                    INTO 
                        :L_PN_ID 
                    DO BEGIN 
                        UPDATE PARTIDA_EL_NODE SET 
                            SUMA_FR = ROUND(:L_IN_EL_SUMA_FR / :L_IN_EL_KOL, 2), 
                            SUMA_SR = ROUND(:L_IN_EL_SUMA_SR / :L_IN_EL_KOL, 2) 
                        WHERE 
                            ID = :L_PN_ID; 
                    END 
                END 
                ELSE BEGIN 
                    MERGE INTO PARTIDA_EL_NODE 
                    USING ( 
                    SELECT 
                        PIN.PARTIDA_NODE_ID AS ID 
                    FROM 
                        PARTIDA_IN_EL_NODE PIN 
                    WHERE 
                        IN_EL_ID = :L_IN_EL_ID) TMP 
                    ON TMP.ID = PARTIDA_EL_NODE.ID 
                    WHEN MATCHED THEN UPDATE SET 
                        SUMA_FR = :L_IN_EL_SUMA_FR, 
                        SUMA_SR = :L_IN_EL_SUMA_SR; 
                END 
            END 
        END 
 
        EXECUTE PROCEDURE IS_SUMA_CORRECT(L_OPR_ID); 
    END 
END;^


ALTER PROCEDURE RECALCULATE_SIMPLES_REC_SUB (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_FLAG_IZL TYPE OF DOM_FLAG,
    P_SKLAD_ID DOM_SMAL_INT)
RETURNS (
    R_RESULT INTEGER,
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100))
AS
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
DECLARE VARIABLE L_FLAG_CALC SMALLINT; 
DECLARE VARIABLE L_RSN SMALLINT; 
BEGIN 
    R_SIMPLE_ID = 0; 
    R_RESULT = 0; 
    --НАЙ ГЛУПАВИЯ НАЧИН, ДЕТО СЕ СЕТИХ ДА ОПРАВЯ ПРОБЛЕМА С ИЗЛИЗШЪЦИ ОТ П-ВО И ТЯХНОТО ИЗЧИСЛЕНИЕ 
    --ДА НЕ МЕ ПУВАТЕ МНОГО - PLEASE 
 
    FOR SELECT 
        TMP.SIMPLE_ID, 
        COALESCE(TMP.FLAG_CALC,0), 
        CAST(SIMPLE.RSN AS SMALLINT), 
        SIMPLE.NAME 
    FROM 
        TMP_SIMPLE_RECALC TMP INNER JOIN SIMPLE ON SIMPLE.ID = TMP.SIMPLE_ID 
    WHERE 
        TMP.FLAG_CALC <> 2 
    ORDER BY TMP.DEPTH ASC 
    INTO 
        :L_SIMPLE_ID,:L_FLAG_CALC,:L_RSN,:R_SIMPLE_NAME 
        --в процедурата find_simples_for_recalc в полетата за операция и дата по подразбиране са сложени тези на операицята 
        --и по ранната от двете дати. При продукти получени от производство със съставки някои от продуктите в основната операция 
        --датата и операцията може да са по-ранни, ако се случи компенсиране на минус в производство в операция, която е по-рано 
        --от диапазона, в който се работи при извикване на тези процедури 
        --т.е ако се връщам заради доставка на 10.01 и има компенсиране на производство за 09.01, или на 10.01 но поранна операция за деня, 
        --за получения продукт ще се върна до 09.01/10.01 за да вземе новите допълнени суми и да си сметне по-вярно 
    DO BEGIN 
        R_SIMPLE_ID = L_SIMPLE_ID; 
 
        SELECT 
            TMP.OPR_ID, 
            TMP.OPR_DATE 
        FROM 
            TMP_SIMPLE_RECALC TMP 
        WHERE 
            TMP.SIMPLE_ID = :L_SIMPLE_ID 
        INTO 
            :P_OPR_ID,:P_NEW_OPR_DATE; 
 
        IF (L_RSN IN (1, 3)) THEN BEGIN 
            IF (L_FLAG_CALC = 0) THEN BEGIN 
                EXECUTE PROCEDURE PARTIDA_HISTORY_OLD_PARTIDA_SN(P_OPR_ID,L_SIMPLE_ID,P_OLD_OPR_DATE,P_NEW_OPR_DATE, 
                P_SKLAD_ID); 
            END 
 
            EXECUTE PROCEDURE PARTIDA_HISTORY_NEW_PARTIDA_SN(P_OPR_ID,L_SIMPLE_ID,P_OLD_OPR_DATE, 
            P_NEW_OPR_DATE,P_SKLAD_ID,0) 
            RETURNING_VALUES (R_RESULT); 
 
            IF (R_RESULT > 0) THEN 
                EXIT; 
        END 
        ELSE BEGIN 
            IF (L_FLAG_CALC = 0) THEN BEGIN 
                EXECUTE PROCEDURE PARTIDA_HISTORY_OLD_PARTIDA(P_OPR_ID,L_SIMPLE_ID,P_OLD_OPR_DATE, 
                P_NEW_OPR_DATE,P_SKLAD_ID); 
            END 
 
            EXECUTE PROCEDURE PARTIDA_HISTORY_NEW_PARTIDA(P_OPR_ID,L_SIMPLE_ID,P_OLD_OPR_DATE, 
            P_NEW_OPR_DATE,P_FLAG_IZL,P_SKLAD_ID,0) 
            RETURNING_VALUES (R_RESULT); 
 
            IF (R_RESULT > 0) THEN 
                EXIT; 
        END 
    END 
END^


ALTER PROCEDURE RECALCULATE_SIMPLES_RECURSIVE (
    P_OPR_ID TYPE OF DOM_KEY,
    P_OLD_OPR_DATE TYPE OF DOM_DATE,
    P_NEW_OPR_DATE TYPE OF DOM_DATE,
    P_FLAG_IZL TYPE OF DOM_FLAG,
    P_SKLAD_ID DOM_SMAL_INT)
RETURNS (
    R_RESULT INTEGER,
    R_SIMPLE_ID INTEGER,
    R_SIMPLE_NAME VARCHAR(100))
AS
BEGIN 
    EXECUTE PROCEDURE RECALCULATE_SIMPLES_REC_SUB(:P_OPR_ID,:P_OLD_OPR_DATE,:P_NEW_OPR_DATE,:P_FLAG_IZL,:P_SKLAD_ID) 
    RETURNING_VALUES :R_RESULT,:R_SIMPLE_ID,:R_SIMPLE_NAME; 
    IF (R_RESULT > 0) THEN 
        EXIT; 
 
    --НАЙ-ГЛУПАВИЯ И СИГУРНО ЛОШ НАЧИН ДА РЕША ПРОБЛЕМА С МИНУСИТЕ В П-ВО И ТЯХНОТО ИЗЧИСЛЕНИЕ, НО ТОВА Е ПОЛОЖЕНИЕТО 
    --БЕЗ ДА МЕ ПСУВАТЕ МОЛЯ 
    EXECUTE PROCEDURE RECALCULATE_SIMPLES_REC_SUB(:P_OPR_ID,:P_OLD_OPR_DATE,:P_NEW_OPR_DATE,:P_FLAG_IZL,:P_SKLAD_ID) 
    RETURNING_VALUES :R_RESULT,:R_SIMPLE_ID,:R_SIMPLE_NAME; 
    IF (R_RESULT > 0) THEN 
        EXIT; 
 
END^


ALTER PROCEDURE RECREATE_KI_PROD_SUMI (
    P_OPR_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_SUMI_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_KLI_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SUMA TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_ID TYPE OF DOM_KEY; 
BEGIN 
    DELETE FROM SUMI WHERE OPR_ID = :P_OPR_ID; 
    DELETE FROM TMP_LAST_CENA; 
 
    INSERT INTO TMP_LAST_CENA(SIMPLE_ID, LAST_CENA) 
    SELECT 
        OPR.KLI_ID, 
        SUM(KS.SUMA) 
    FROM 
        KI_PROD_SUMA_EL KS INNER JOIN OUT_EL ON OUT_EL.ID = KS.OUT_EL_ID AND KS.OPR_ID = :P_OPR_ID 
        INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
    GROUP BY 1; 
 
    FOR SELECT 
        TMP.SIMPLE_ID, 
        TMP.LAST_CENA 
    FROM 
        TMP_LAST_CENA TMP 
    INTO 
        :L_KLI_ID, :L_SUMA 
    DO BEGIN 
        INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST) 
        VALUES (:P_OPR_ID,:L_SUMA,:L_SUMA) 
        RETURNING ID INTO :L_SUMI_ID; 
 
        MERGE INTO KI_PROD_SUMA_EL 
        USING (SELECT KI_PROD_SUMA_EL.ID 
        FROM 
            KI_PROD_SUMA_EL INNER JOIN OUT_EL ON OUT_EL.ID = KI_PROD_SUMA_EL.OUT_EL_ID AND KI_PROD_SUMA_EL.OPR_ID = :P_OPR_ID 
            INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OPR.KLI_ID = :L_KLI_ID) AS TM 
        ON TM.ID = KI_PROD_SUMA_EL.ID 
        WHEN MATCHED THEN UPDATE SET SUMI_ID = :l_SUMI_ID; 
    END 
END^


ALTER PROCEDURE RENUM_TABLE (
    P_START_ID INTEGER,
    P_TABLE VARCHAR(50))
AS
declare variable OLD_ID integer; 
declare variable NEW_ID integer; 
BEGIN 
  NEW_ID = P_START_ID; 
 
  FOR EXECUTE STATEMENT 'SELECT ID FROM ' || :P_TABLE || ' ORDER BY 1 ' 
  INTO :OLD_ID 
  DO BEGIN 
    IF (:NEW_ID <> :OLD_ID) THEN 
      EXECUTE STATEMENT 'UPDATE ' || :P_TABLE || ' SET ID = ' || :NEW_ID || ' WHERE ID = ' || :OLD_ID; 
      NEW_ID = NEW_ID + 1; 
  END 
 
  EXECUTE STATEMENT 'SELECT MAX(ID) FROM ' || :P_TABLE INTO :NEW_ID; 
 
  IF (NEW_ID IS NULL) 
    THEN NEW_ID = 0; 
 
  EXECUTE STATEMENT 'ALTER SEQUENCE GEN_OPR_ID RESTART WITH ' || :NEW_ID; 
END^


ALTER PROCEDURE RESTORE_ANNUL_FAK_PROD (
    P_FKT_PROD_OPR_ID TYPE OF DOM_KEY,
    P_FAK_OPR_ID TYPE OF DOM_KEY,
    P_FLAG_IZL TYPE OF DOM_FLAG)
RETURNS (
    R_RESULT TYPE OF DOM_INT)
AS
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_RSN TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_USLUGA TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_KOL2 TYPE OF DOM_KOL; 
DECLARE VARIABLE L_SUMA TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PROD_CENA TYPE OF DOM_CENA; 
DECLARE VARIABLE L_CENA_OS TYPE OF DOM_CENA; 
DECLARE VARIABLE L_CENA_CL TYPE OF DOM_CENA; 
DECLARE VARIABLE L_FKT_SKLAD_ID TYPE OF DOM_KEY_SMALL; 
DECLARE VARIABLE L_OUT_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OLD_OUT_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PARTIDA_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_ANNUL_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_FAK_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_IN_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OPR_DATE TYPE OF DOM_DATE; 
BEGIN 
    R_RESULT = 0; 
    SELECT FIRST 1 
        SYSTEM.H_SKLAD 
    FROM 
        SYSTEM 
    INTO 
        :L_FKT_SKLAD_ID; 
 
    SELECT 
        FAK.ID 
    FROM 
        FAK 
    WHERE 
        FAK.OPR_ID = :P_FAK_OPR_ID 
    INTO 
        :L_FAK_ID; 
 
    SELECT 
        OPR_ANUL.OPR_ID 
    FROM 
        OPR_ANUL 
    WHERE 
        OPR_ANUL.AN_OPR_ID = :P_FKT_PROD_OPR_ID 
    INTO 
        :L_ANNUL_OPR_ID; 
 
    SELECT 
        OPR.OPR_DATE 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_FKT_PROD_OPR_ID 
    INTO 
        :L_OPR_DATE; 
 
    FOR SELECT 
        OO.SIMPLE_ID, 
        SIMPLE.RSN 
    FROM 
        OLD_OUT_EL OO INNER JOIN SIMPLE ON SIMPLE.ID = OO.SIMPLE_ID AND OO.OPR_ID = :L_ANNUL_OPR_ID 
    WHERE 
        SIMPLE.USLUGA = 0 
    GROUP BY 1,2 
    INTO 
        :L_SIMPLE_ID, :L_RSN 
    DO BEGIN 
        IF (L_RSN = 1) THEN 
            EXECUTE PROCEDURE PARTIDA_HISTORY_OLD_PARTIDA_SN(:P_FKT_PROD_OPR_ID, :L_SIMPLE_ID, :L_OPR_DATE, :L_OPR_DATE, :L_FKT_SKLAD_ID); 
        ELSE 
            EXECUTE PROCEDURE PARTIDA_HISTORY_OLD_PARTIDA(:P_FKT_PROD_OPR_ID, :L_SIMPLE_ID, :L_OPR_DATE, :L_OPR_DATE, :L_FKT_SKLAD_ID); 
    END 
 
    FOR SELECT 
        OO.SIMPLE_ID, 
        OO.SUMA, 
        OO.KOL, 
        OO.KOL2, 
        OO.PROD_CENA, 
        OO.CENA_OS, 
        OO.CENA_CL, 
        CAST (SIMPLE.USLUGA AS SMALLINT), 
        CAST (SIMPLE.RSN AS SMALLINT), 
        OO.ID 
    FROM 
        OLD_OUT_EL OO INNER JOIN SIMPLE ON SIMPLE.ID = OO.SIMPLE_ID AND OO.OPR_ID = :L_ANNUL_OPR_ID 
    ORDER BY 1 
    INTO 
        :L_SIMPLE_ID, :L_SUMA, :L_KOL, :L_KOL2, :L_PROD_CENA, :L_CENA_OS, :L_CENA_CL, 
        :L_USLUGA, :L_RSN, :L_OLD_OUT_EL_ID 
    DO BEGIN 
        IF (L_USLUGA = 0) THEN BEGIN 
            EXECUTE PROCEDURE ADD_OUT_EL(:P_FKT_PROD_OPR_ID, :L_SIMPLE_ID, :L_KOL, :L_SUMA, 0.00, 0.00, 1, NULL) 
            RETURNING_VALUES :L_OUT_EL_ID; 
 
            INSERT INTO PROD_CENI_EL(OUT_EL_ID,CENA,CENA_OS,CENA_CL) 
            VALUES (:L_OUT_EL_ID, :L_PROD_CENA, :L_CENA_OS, :L_CENA_CL); 
 
            IF (L_KOL2 IS NOT NULL) THEN 
                EXECUTE PROCEDURE ADD_OUT_EL2(:L_OUT_EL_ID, :L_KOL2); 
 
            IF (L_RSN = 1) THEN BEGIN 
                FOR SELECT 
                    OON.PARTIDA_EL_ID, 
                    OON.IN_EL_ID 
                FROM 
                    OLD_OUT_EL_PE_NODE OON 
                WHERE 
                    OON.OLD_OUT_EL_ID = :L_OLD_OUT_EL_ID 
                INTO 
                    :L_PARTIDA_EL_ID, :L_IN_EL_ID 
                DO BEGIN 
                    EXECUTE PROCEDURE PARTIDA_OUT_SN_PROD(:P_FKT_PROD_OPR_ID, :L_OUT_EL_ID, :L_PARTIDA_EL_ID, :L_IN_EL_ID, 1.00); 
                END 
            END 
        END 
        ELSE BEGIN 
            EXECUTE PROCEDURE ADD_OUT_EL(:P_FKT_PROD_OPR_ID, :L_SIMPLE_ID, :L_KOL, :L_SUMA, 0.00, 0.00, 1, NULL) 
            RETURNING_VALUES :L_OUT_EL_ID; 
 
            INSERT INTO PROD_CENI_EL(OUT_EL_ID, CENA ,CENA_OS, CENA_CL) 
            VALUES (:L_OUT_EL_ID, :L_PROD_CENA, :L_CENA_OS, :L_CENA_CL); 
        END 
    END 
 
    DELETE FROM OLD_OUT_EL WHERE OPR_ID = :L_ANNUL_OPR_ID; 
    DELETE FROM OPR_ANUL WHERE OPR_ID = :L_ANNUL_OPR_ID; 
    DELETE FROM COMMENT WHERE OPR_ID = :L_ANNUL_OPR_ID; 
    DELETE FROM OPR WHERE ID = :L_ANNUL_OPR_ID; 
 
    FOR SELECT 
        OO.SIMPLE_ID, 
        SIMPLE.RSN 
    FROM 
        OUT_EL OO INNER JOIN SIMPLE ON SIMPLE.ID = OO.SIMPLE_ID AND OO.OPR_ID = :P_FKT_PROD_OPR_ID 
    WHERE 
        SIMPLE.USLUGA = 0 
    GROUP BY 1, 2 
    INTO 
        :L_SIMPLE_ID,:L_RSN 
    DO BEGIN 
        IF (L_RSN = 1) THEN 
            EXECUTE PROCEDURE PARTIDA_HISTORY_NEW_PARTIDA_SN(:P_FKT_PROD_OPR_ID, :L_SIMPLE_ID, :L_OPR_DATE, :L_OPR_DATE, :L_FKT_SKLAD_ID) 
            RETURNING_VALUES :R_RESULT; 
        ELSE 
            EXECUTE PROCEDURE PARTIDA_HISTORY_NEW_PARTIDA(:P_FKT_PROD_OPR_ID, :L_SIMPLE_ID, :L_OPR_DATE, :L_OPR_DATE, :P_FLAG_IZL, :L_FKT_SKLAD_ID) 
            RETURNING_VALUES :R_RESULT; 
 
        IF (R_RESULT > 0) THEN 
            EXIT; 
    END 
 
    IF (NOT EXISTS (SELECT FAK_PROD.ID FROM FAK_PROD WHERE FAK_ID = :L_FAK_ID AND OPR_ID = :P_FKT_PROD_OPR_ID)) THEN 
        INSERT INTO FAK_PROD(FAK_ID, OPR_ID) 
        VALUES (:L_FAK_ID, :P_FKT_PROD_OPR_ID); 
END;^


ALTER PROCEDURE RETURN_DOST_AMBALAJ (
    P_OPR_ID TYPE OF DOM_KEY,
    P_SKLAD_ID TYPE OF DOM_SMAL_INT,
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL)
RETURNS (
    R_RESULT TYPE OF DOM_SMAL_INT)
AS
DECLARE VARIABLE L_KLI_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_ZAP_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PEN_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PEN_SUMA_FR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PEN_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_NAL_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_NAL_SUMA_SR TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_PEN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_KOL TYPE OF DOM_KOL; 
BEGIN 
 
    R_RESULT = 0; 
    L_KOL = P_KOL; 
 
    SELECT 
        OPR.KLI_ID, 
        OUT_EL.SIMPLE_ID 
    FROM 
        OPR INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OPR.ID 
    WHERE 
        OPR.ID = :P_OPR_ID 
        AND OUT_EL.ID = :P_OUT_EL_ID 
    INTO 
        :L_KLI_ID, :L_SIMPLE_ID; 
 
    SELECT 
        TMP_NAL.KOL, 
        TMP_NAL.SUMA_SR 
    FROM 
        TMP_NAL 
    WHERE 
        SIMPLE_ID = :L_SIMPLE_ID 
        AND SKLAD_ID = :P_SKLAD_ID 
    INTO 
        :L_NAL_KOL,:L_NAL_SUMA_SR; 
 
    FOR WITH IN_PARTIDA AS ( 
    SELECT 
        PN.ELEMENT_ID, 
        OPR.ID AS OPR_ID, 
        OPR.OPR_DATE, 
        IN_EL.SIMPLE_ID, 
        IN_EL.IS_F 
    FROM 
        PARTIDA_NAL PN INNER JOIN IN_EL ON IN_EL.ID = PN.IN_EL_ID 
        INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
    WHERE 
        OPR.OPR_TIP IN (1, 3,12, 14, 22, 28, 33, 55, 77) 
        AND IN_EL.SIMPLE_ID = :l_SIMPLE_ID) 
 
    SELECT 
        PN.ID, 
        PN.KOL, 
        PN.SUMA_FR 
    FROM 
        IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID AND IN_EL.SIMPLE_ID = :L_SIMPLE_ID AND OPR.SKLAD_ID = :P_SKLAD_ID 
        INNER JOIN PARTIDA_NAL PN ON IN_EL.ID = PN.IN_EL_ID AND PN.KOL > 0.00 
        INNER JOIN IN_PARTIDA VPI ON VPI.ELEMENT_ID = PN.ELEMENT_ID AND VPI.IS_F = IN_EL.IS_F 
        INNER JOIN OPR O ON O.ID = VPI.OPR_ID 
    WHERE 
        O.KLI_ID = :L_KLI_ID 
    ORDER BY VPI.OPR_DATE, VPI.OPR_ID, IN_EL.ID 
    INTO 
        :L_PN_ID,:L_PN_KOL,:L_PN_SUMA_FR 
    DO BEGIN 
        IF (:P_KOL > 0.00) THEN BEGIN 
 
            L_ZAP_KOL = NULL; 
 
            SELECT 
                TMP.KOL 
            FROM 
                TMP_PARTIDA_RZV_KOL TMP 
            WHERE 
                TMP.PARTIDA_ID = :L_PN_ID 
            INTO 
                :L_ZAP_KOL; 
 
            L_ZAP_KOL = COALESCE(L_ZAP_KOL, 0.00); 
            IF (L_ZAP_KOL > 0.00) THEN 
                L_PN_SUMA_FR = ROUND(ROUND(L_PN_SUMA_FR / L_PN_KOL, 5) * ROUND(L_PN_KOL - L_ZAP_KOL, 5), 2); 
 
            L_PN_KOL = ROUND(L_PN_KOL - L_ZAP_KOL,5); 
 
            IF (L_PN_KOL > 0.00) THEN BEGIN 
                IF (L_PN_KOL > P_KOL) THEN BEGIN 
                    L_PEN_KOL = ROUND(P_KOL, 5); 
                    L_PEN_SUMA_FR = ROUND(ROUND(L_PN_SUMA_FR / L_PN_KOL, 5) * L_PEN_KOL, 2); 
                END 
                ELSE BEGIN 
                    L_PEN_KOL = ROUND(L_PN_KOL, 5); 
                    L_PEN_SUMA_FR = L_PN_SUMA_FR; 
                END 
 
                IF (L_NAL_KOL > L_PEN_KOL) THEN BEGIN 
                    L_PEN_SUMA_SR = ROUND(ROUND(L_NAL_SUMA_SR / L_NAL_KOL, 5) * L_PEN_KOL, 2); 
                END 
                ELSE BEGIN 
                    L_PEN_SUMA_SR = ROUND(L_NAL_SUMA_SR, 2); 
                END 
 
                INSERT INTO PARTIDA_EL_NODE(PARTIDA_ID, KOL, SUMA_FR, SUMA_SR, OPR_ID) 
                VALUES (:L_PN_ID,:L_PEN_KOL,:L_PEN_SUMA_FR,:L_PEN_SUMA_SR,:P_OPR_ID) 
                RETURNING ID INTO :L_PEN_ID; 
 
                INSERT INTO PARTIDA_OUT_EL_NODE(PARTIDA_NODE_ID, OUT_EL_ID) 
                VALUES (:L_PEN_ID, :P_OUT_EL_ID); 
 
                UPDATE PARTIDA_NAL SET 
                    KOL = ROUND(KOL - :L_PEN_KOL, 5), 
                    SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR, 2) 
                WHERE 
                    ID = :L_PN_ID; 
 
                P_KOL = ROUND(P_KOL - L_PEN_KOL, 5); 
                L_NAL_KOL = ROUND(L_NAL_KOL - L_PEN_KOL, 5); 
                L_NAL_SUMA_SR = ROUND(L_NAL_SUMA_SR - L_PEN_SUMA_SR, 2); 
            END 
        END 
    END 
 
    IF (P_KOL > 0.00) THEN BEGIN 
        R_RESULT = 1; 
        EXIT; 
    END 
 
    SELECT 
        SUM(PEN.SUMA_FR), 
        SUM(PEN.SUMA_SR) 
    FROM 
        PARTIDA_EL_NODE PEN INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.PARTIDA_NODE_ID = PEN.ID 
        AND PON.OUT_EL_ID = :P_OUT_EL_ID 
    INTO 
        :L_PEN_SUMA_FR,:L_PEN_SUMA_SR; 
 
    L_PEN_SUMA_FR = COALESCE(L_PEN_SUMA_FR, 0.00); 
    L_PEN_SUMA_SR = COALESCE(L_PEN_SUMA_SR, 0.00); 
 
    UPDATE TMP_NAL SET 
        KOL = ROUND(KOL - :L_KOL, 5), 
        SUMA_SR = ROUND(SUMA_SR - :L_PEN_SUMA_SR, 2), 
        SUMA_FR = ROUND(SUMA_FR - :L_PEN_SUMA_FR, 2) 
    WHERE 
        SIMPLE_ID = :L_SIMPLE_ID 
        AND SKLAD_ID = :P_SKLAD_ID; 
 
    UPDATE OUT_EL SET 
        SUMA_FR = ROUND(:L_PEN_SUMA_FR, 2), 
        SUMA_SR = ROUND(:L_PEN_SUMA_SR, 2) 
    WHERE 
        ID = :P_OUT_EL_ID; 
 
    UPDATE OPR_SUMI SET 
        SUMA_FR = ROUND(SUMA_FR + :L_PEN_SUMA_FR,2), 
        SUMA_SR = ROUND(SUMA_SR + :L_PEN_SUMA_SR,2) 
    WHERE 
        OPR_ID = :P_OPR_ID; 
 
    UPDATE SUMI SET 
        SUMI.SUMA = ROUND(SUMI.SUMA + :L_PEN_SUMA_FR,2), 
        SUMI.SUMA_OST = ROUND(SUMI.SUMA_OST + :L_PEN_SUMA_FR,2) 
    WHERE 
        SUMI.OPR_ID = :P_OPR_ID; 
 
    SELECT 
        SUMI.SUMA_OST 
    FROM 
        SUMI 
    WHERE 
        SUMI.OPR_ID = :P_OPR_ID 
    INTO 
        :L_NAL_SUMA_SR; 
 
    IF (L_NAL_SUMA_SR < 0.00) THEN 
        DELETE FROM OPR_PAYMENT_NODE 
        WHERE 
            ID IN (SELECT PAYMENT_NODE.NODE_ID FROM PAYMENT_NODE INNER JOIN SUMI ON SUMI.ID = PAYMENT_NODE.OPR_ID WHERE SUMI.OPR_ID = :P_OPR_ID); 
 
END^


ALTER PROCEDURE RETURN_STOKA_DOST_SN (
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY,
    P_FLAG_FKT TYPE OF DOM_FLAG,
    P_ORG_IN_EL_ID TYPE OF DOM_KEY,
    P_SUMA TYPE OF DOM_SUMA,
    P_KOL TYPE OF DOM_KOL)
AS
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_OUT_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PEN_ID TYPE OF DOM_KEY; 
BEGIN 
-- V.5 
    SELECT 
        IN_EL.SIMPLE_ID 
    FROM 
        IN_EL INNER JOIN OPR ON (IN_EL.ID = :P_IN_EL_ID AND OPR.ID = IN_EL.OPR_ID) 
    INTO 
        :L_SIMPLE_ID; 
 
    SELECT 
        PN.ID 
    FROM 
        PARTIDA_NAL PN 
    WHERE 
        PN.IN_EL_ID = :P_IN_EL_ID 
        AND PN.ELEMENT_ID = :P_ELEMENT_ID 
    INTO 
        :L_PN_ID; 
 
    L_OUT_EL_ID = NULL; 
    SELECT 
        OUT_EL.ID 
    FROM 
        OUT_EL INNER JOIN OPR_RAZPAD_NODE ORN ON ORN.OUT_EL_ID = OUT_EL.ID 
    WHERE 
        ORN.IN_EL_ID = :P_ORG_IN_EL_ID 
        AND OUT_EL.OPR_ID = :P_OPR_ID 
    INTO 
        :L_OUT_EL_ID; 
 
    IF (L_OUT_EL_ID IS NULL) THEN BEGIN 
        INSERT INTO OUT_EL(KOL, SUMA, SUMA_FR, SUMA_SR, SIMPLE_ID, OPR_ID, IS_F) 
        VALUES(0.00, :P_SUMA, 0.00, 0.00, :L_SIMPLE_ID, :P_OPR_ID, :P_FLAG_FKT) 
        RETURNING ID INTO :L_OUT_EL_ID; 
 
        INSERT INTO OPR_RAZPAD_NODE (OUT_EL_ID, IN_EL_ID) 
        VALUES(:L_OUT_EL_ID, :P_ORG_IN_EL_ID); 
    END 
 
    UPDATE OUT_EL SET 
        OUT_EL.KOL = ROUND(OUT_EL.KOL + :P_KOL, 5) 
    WHERE 
        OUT_EL.ID = :L_OUT_EL_ID; 
 
    INSERT INTO PARTIDA_EL_NODE(OPR_ID,PARTIDA_ID, KOL, SUMA_FR, SUMA_SR) 
    VALUES(:P_OPR_ID, :L_PN_ID, :P_KOL, 0.00, 0.00) 
    RETURNING ID INTO :L_PEN_ID; 
 
    INSERT INTO PARTIDA_OUT_EL_NODE(OUT_EL_ID, PARTIDA_NODE_ID) 
    VALUES(:L_OUT_EL_ID, :L_PEN_ID); 
END^


ALTER PROCEDURE RETURN_STOKA_PROD_SN (
    P_OUT_EL_ID TYPE OF DOM_KEY,
    P_IN_EL_ID TYPE OF DOM_KEY,
    P_ELEMENT_ID TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY,
    P_KOL TYPE OF DOM_KOL)
AS
DECLARE VARIABLE L_PN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_PEN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_ORN_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_SMAL_INT; 
BEGIN 
    SELECT 
        ORN.ID 
    FROM 
        OPR_RAZPAD_NODE ORN 
    WHERE 
        ORN.IN_EL_ID = :P_IN_EL_ID 
    INTO 
        :L_ORN_ID; 
 
    IF (L_ORN_ID IS NULL) THEN 
        --ЗАПИС В IN_EL И ВРЪЗКАТА МЕЖДУ IN_EL OUT_EL 
        INSERT INTO OPR_RAZPAD_NODE(OUT_EL_ID,IN_EL_ID) 
        VALUES(:P_OUT_EL_ID,:P_IN_EL_ID); 
 
    SELECT 
        IN_EL.SIMPLE_ID, 
        OPR.SKLAD_ID 
    FROM 
        IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
    WHERE 
        IN_EL.ID = :P_IN_EL_ID 
    INTO 
        :L_SIMPLE_ID,:L_SKLAD_ID; 
 
    UPDATE OR INSERT INTO PARTIDA_NAL(KOL, SUMA_FR, IN_EL_ID, ELEMENT_ID, SIMPLE_ID, SKLAD_ID) 
    VALUES(0.00, 0.00, :P_IN_EL_ID, :P_ELEMENT_ID, :L_SIMPLE_ID, :L_SKLAD_ID) 
    MATCHING(IN_EL_ID, ELEMENT_ID) 
    RETURNING ID INTO :L_PN_ID; 
 
    INSERT INTO PARTIDA_EL_NODE(OPR_ID,PARTIDA_ID,KOL,SUMA_FR,SUMA_SR) 
    VALUES(:P_OPR_ID, :L_PN_ID, :P_KOL, 0.00, 0.00) 
    RETURNING ID INTO :L_PEN_ID; 
 
    INSERT INTO PARTIDA_IN_EL_NODE (IN_EL_ID, PARTIDA_NODE_ID) 
    VALUES(:P_IN_EL_ID, :L_PEN_ID); 
END^


ALTER PROCEDURE SAVE_BONUS (
    IS_ACTIV SMALLINT,
    NAME VARCHAR(50),
    WEEK_DAY INTEGER,
    OT_TIME TIME,
    DO_TIME TIME,
    OT_SUMA DOUBLE PRECISION,
    DO_SUMA DOUBLE PRECISION,
    SIMPLE_ID INTEGER,
    SIMPLE_KOL DOUBLE PRECISION,
    PERIOD SMALLINT,
    NUMBER_WMY SMALLINT,
    WMY SMALLINT,
    PROCENT DOUBLE PRECISION,
    SIMPLE_ID_BONUS INTEGER,
    KOL_SIM_BONUS DOUBLE PRECISION,
    CENA_SIM_BONUS DOUBLE PRECISION,
    ZA_SMETKA SMALLINT,
    ID_BONUS INTEGER,
    USER_ID INTEGER,
    SEL_KLI INTEGER,
    TIP INTEGER,
    TIP_BONUS SMALLINT,
    BTC SMALLINT,
    P_SIMPLE_SEL_ID TYPE OF DOM_KEY,
    P_SUMA_SEL TYPE OF DOM_SUMA,
    P_OT_DATE TYPE OF DOM_DATE,
    P_DO_DATE TYPE OF DOM_DATE)
RETURNS (
    R_ID INTEGER)
AS
BEGIN 
    INSERT INTO BONUS_CONFIG (IS_ACTIV, NAME, WEEK_DAY, OT_TIME, DO_TIME, OT_SUMA, DO_SUMA, SIMPLE_ID, PERIOD, 
    NUMBER_WMY, WMY, PROCENT, SIMPLE_ID_BONUS, KOL_SIM_BONUS, CENA_SIM_BONUS, ANULIRAN,SIMPLE_KOL,ZA_SMETKA,USER_ID, 
    DATE_TIME_AE,SEL_KLI,TIP, TIP_BONUS,BTC,SIMPLE_SEL_ID,SUMA_SEL,OT_DATE, DO_DATE) 
    VALUES (:IS_ACTIV, :NAME, :WEEK_DAY, :OT_TIME, :DO_TIME, :OT_SUMA, :DO_SUMA, :SIMPLE_ID, :PERIOD, :NUMBER_WMY, :WMY, :PROCENT, :SIMPLE_ID_BONUS, :KOL_SIM_BONUS, 
    :CENA_SIM_BONUS, 0,:SIMPLE_KOL,:ZA_SMETKA,:USER_ID,CURRENT_TIMESTAMP,:SEL_KLI,:TIP,:TIP_BONUS,:BTC,:P_SIMPLE_SEL_ID,:P_SUMA_SEL,:P_OT_DATE, :P_DO_DATE) 
    RETURNING ID INTO :R_ID; 
 
    IF (COALESCE(ID_BONUS,0) > 0) THEN 
        UPDATE BONUS_CONFIG 
        SET ID_BONUS =:R_ID, 
            DATE_TIME_AE = CURRENT_TIMESTAMP, 
            USER_ID = :USER_ID 
        WHERE 
            ID = :ID_BONUS; 
END^


ALTER PROCEDURE SAVE_CL_HISTORY (
    CL_EL_ID INTEGER,
    SIMPLE_ID INTEGER,
    USER_ID INTEGER,
    CENA_OLD DOUBLE PRECISION,
    CENA_NEW DOUBLE PRECISION,
    OPR_ID_E INTEGER)
AS
begin  
  if (cena_old <> cena_new) then  
   insert into cenova_lista_history (cl_el_id, simple_id, user_id, cena_old, cena_new, dt, opr_id_e) 
   values (:cl_el_id, :simple_id, :user_id, :cena_old, :cena_new, current_timestamp,:opr_id_e); 
end^


ALTER PROCEDURE SAVE_EDIT_CL_EL (
    P_OT_OPR_ID INTEGER,
    P_TIP INTEGER,
    P_PROCENT DOUBLE PRECISION,
    P_CENA DOUBLE PRECISION,
    P_TIP_OT_CENA INTEGER,
    P_ROUND_TIP_ID INTEGER,
    P_OPR INTEGER,
    P_SIM_ID INTEGER,
    P_USER_ID INTEGER,
    P_TIP_OLD INTEGER,
    P_OT_OPR_ID_OLD INTEGER,
    P_PROCENT_OLD DOUBLE PRECISION,
    P_CENA_OLD DOUBLE PRECISION,
    P_TIP_OT_CENA_OLD INTEGER,
    P_UPDATE INTEGER,
    P_DELETE INTEGER,
    P_OPR_OLD INTEGER,
    OPR_ID_E INTEGER,
    P_FLAG_LOCK TYPE OF DOM_FLAG)
AS
DECLARE VARIABLE L_CL_EL_ID INTEGER; 
begin 
  if (p_delete = 1) then begin 
    delete from cenova_lista_el 
    where 
      cenova_lista_el.simple_id = :p_sim_id and 
      cenova_lista_el.opr_id = :p_opr; 
  end 
  else begin 
    select id 
    from cenova_lista_el 
    WHERE 
      opr_id = :p_opr AND 
      simple_id = :p_sim_id 
    into :l_cl_el_id; 
 
    EXECUTE PROCEDURE SAVE_CL_HISTORY(:p_opr, :p_sim_id, :p_user_id, :p_cena_old,:p_cena,:opr_id_e); 
 
    UPDATE cenova_lista_el 
    SET 
      ot_opr_id = :p_ot_opr_id, 
      tip = :p_tip, 
      procent = :p_procent, 
      cena = :p_cena, 
      tip_ot_cena = :p_tip_ot_cena, 
      round_tip_id = :p_round_tip_id , 
      flag_lock = :P_FLAG_LOCK 
    WHERE 
      opr_id = :p_opr AND 
      simple_id = :p_sim_id; 
 
    if (p_update = 1) then 
      execute procedure CENOVA_LISTA_UPDATE(:p_opr,:p_sim_id,:p_cena,:p_user_id,:opr_id_e); 
   end 
 
  insert into cenova_lista_el_edit(opr_edit_id, ot_opr_id, simple_id, tip, procent, cena,TIP_OT_CENA) 
  values (:p_opr_old, :p_ot_opr_id_old, :p_sim_id, :p_tip_old, :p_procent_old, :p_cena_old,:p_tip_ot_cena_old); 
end^


ALTER PROCEDURE SAVE_NAL_BIG (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID INTEGER,
    P_LAST_CENA DOUBLE PRECISION)
AS
declare variable l_id integer; 
begin 
  l_id = 0; 
 
  select 
    id 
  from 
    nal 
  where 
    (simple_id = :p_simple_id) 
    and (sklad_id = :p_sklad_id) 
  into 
    :l_id; 
 
  IF (:l_id > 0) THEN BEGIN 
    update nal set 
      last_cena = :p_last_cena, 
      datetime_lastcena = current_timestamp 
    where id = :l_id; 
  END 
 
  ELSE BEGIN 
    insert into nal(simple_id, sklad_id, kol_nal, suma, last_cena, suma_fr, kol_rzv, datetime_lastcena) 
    values (:p_simple_id, :p_sklad_id, 0, 0, :p_last_cena, 0, 0, current_timestamp); 
  END 
end^


ALTER PROCEDURE SAVE_OLD_OFFER_DATA (
    P_OFFER_ID TYPE OF DOM_KEY,
    P_OPR_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_POR_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_SUMA TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_KOL_RZV TYPE OF DOM_KOL; 
DECLARE VARIABLE L_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_COMMENT TYPE OF DOM_CHAR_100; 
BEGIN 
    INSERT INTO OLD_OFFER_EL (SIMPLE_ID, QTY, OFFER_ID, OPR_ID, COMMENT_ID) 
    SELECT 
        SIMPLE_ID, 
        QTY, 
        OFFER_ID, 
        :P_OPR_ID, 
        COMMENT_ID 
    FROM 
        OFFER_EL 
    WHERE 
        OFFER_EL.OFFER_ID = :P_OFFER_ID; 
 
    INSERT INTO OLD_OFFER_USER_NODE (OFFER_ID, USER_ID, OPR_ID) 
    SELECT 
        OFFER_ID, 
        USER_ID, 
        :P_OPR_ID 
    FROM 
        OFFER_USER_NODE 
    WHERE 
        OFFER_USER_NODE.OFFER_ID = :P_OFFER_ID; 
 
    INSERT INTO OLD_OFFERS (OFFER_ID, OPR_ID, STATUS, AGENT_ID, VISIT_DATE, VISIT_DURATION, OFFER_TYPE, ADDRESS_ID) 
    SELECT 
        ID, 
        :P_OPR_ID, 
        STATUS, 
        AGENT_ID, 
        VISIT_DATE, 
        VISIT_DURATION, 
        OFFER_TYPE, 
        ADDRESS_ID 
    FROM 
        OFFERS 
    WHERE 
        OFFERS.ID = :P_OFFER_ID; 
END^


ALTER PROCEDURE SAVE_OLD_ORDER_DATA (
    P_ORDER_ID TYPE OF DOM_KEY,
    P_EDIT_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_POR_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_SUMA TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_KOL_RZV TYPE OF DOM_KOL; 
DECLARE VARIABLE L_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_COMMENT TYPE OF DOM_CHAR_100; 
BEGIN 
    FOR SELECT 
        POR_EL.ID, 
        POR_EL.SIMPLE_ID, 
        POR_EL.KOL, 
        POR_EL.SUMA, 
        POR_EL.KOL_RZV, 
        POR_EL_COMMENT.COMMENT 
    FROM 
        POR_EL INNER JOIN POR ON POR.OPR_ID = POR_EL.OPR_ID AND POR.ID = :P_ORDER_ID 
        LEFT JOIN POR_EL_COMMENT ON POR_EL_COMMENT.POR_EL_ID = POR_EL.ID 
    ORDER BY 
        POR_EL.ID 
    INTO 
        :L_POR_EL_ID, :L_SIMPLE_ID, :L_KOL, :L_SUMA, :L_KOL_RZV, :L_COMMENT 
    DO BEGIN 
        INSERT INTO POR_EL_EDIT(EDIT_ID, SIMPLE_ID, KOL, SUMA, KOL_RZV, COMMENT) 
        VALUES(:P_EDIT_ID, :L_SIMPLE_ID, :L_KOL, :L_SUMA, :L_KOL_RZV, :L_COMMENT) 
        RETURNING ID INTO :L_EL_ID; 
 
        INSERT INTO OLD_POR_EL_PARAMS(POR_EL_ID, VAR_NAME, QUANTITY, QTY_COUNT) 
        SELECT 
            :L_EL_ID, 
            PFP."VARIABLE", 
            PFP.QUANTITY , 
            PFP."COUNT" 
        FROM 
            POR_FORMULA_PARAMS PFP 
        WHERE 
            PFP.POR_EL_ID = :L_POR_EL_ID; 
 
        INSERT INTO OLD_POR_EL_PRICE_COEF (POR_EL_ID, SIMPLE_ID, COEFICIENT) 
        SELECT 
            :L_EL_ID, 
            POR_EL_PRICE_COEFICIENT.SIMPLE_ID, 
            POR_EL_PRICE_COEFICIENT.COEFICIENT 
        FROM 
            POR_EL_PRICE_COEFICIENT 
        WHERE 
            POR_EL_PRICE_COEFICIENT.POR_EL_ID = :L_POR_EL_ID; 
    END 
 
    INSERT INTO POR_EDIT (EDIT_ID, ORDER_ID, STATUS, ZA_DATA, AGENT_ID, NOMER, FOR_DATE_TIME, DISCOUNT_PERCENT) 
    SELECT 
        :P_EDIT_ID, 
        :P_ORDER_ID, 
        STATUS, 
        ZA_DATA, 
        AGENT_ID, 
        NOMER, 
        FOR_DATE_TIME, 
        DISCOUNT_PERCENT 
    FROM 
        POR 
    WHERE 
        POR.ID = :P_ORDER_ID; 
END^


ALTER PROCEDURE SAVE_PARI (
    P_PARI_ID INTEGER,
    P_EDITING_USER_ID INTEGER,
    P_IP INTEGER)
AS
DECLARE VARIABLE L_KASA_ID SMALLINT; 
DECLARE VARIABLE L_OBEKT_ID SMALLINT; 
DECLARE VARIABLE L_SUMA NUMERIC(10,2); 
DECLARE VARIABLE L_VALUTA_ID SMALLINT; 
DECLARE VARIABLE L_KURS DOUBLE PRECISION; 
DECLARE VARIABLE L_TIP SMALLINT; 
DECLARE VARIABLE L_GEN_OLD_PARI_EL_ID INTEGER; 
DECLARE VARIABLE L_EDIT_OPR_ID INTEGER; 
DECLARE VARIABLE L_USER INTEGER; 
DECLARE VARIABLE L_DATE DATE; 
DECLARE VARIABLE L_SUMA_OSN_VALUTA DOUBLE PRECISION; 
BEGIN 
/*V.4 ЗАПАЗВА СТАРИТЕ СТОЙНОСТИ НА КАСАТА В АРХИВНА ТАБЛИЦА 
P_PARI_ID - КОЙ РЕД ОТ ТАБЛИЦА PARI СЕ РЕДАКТИРА (P_PARI_ID = PARI.OPR_ID)*/ 
 
    FOR SELECT 
        PARI.KASA_ID, 
        PARI.OBEKT_ID, 
        PARI.SUMA, 
        PARI.VALUTA_ID, 
        PARI.KURS, 
        PARI.TIP 
    FROM 
        PARI 
    WHERE 
        PARI.OPR_ID = :P_PARI_ID 
    INTO 
        :L_KASA_ID, :L_OBEKT_ID, :L_SUMA, :L_VALUTA_ID,:L_KURS,:L_TIP 
    DO BEGIN 
        L_SUMA_OSN_VALUTA = (L_SUMA * L_KURS); 
 
        SELECT 
            OPR.USER_ID, 
            OPR.OPR_DATE 
        FROM 
            OPR 
        WHERE 
            OPR.ID = :P_PARI_ID 
        INTO 
            :L_USER,:L_DATE; 
 
        EXECUTE PROCEDURE ADD_OPR(210,CURRENT_DATE,P_IP,P_EDITING_USER_ID,NULL,NULL,L_SUMA_OSN_VALUTA) 
        RETURNING_VALUES :L_EDIT_OPR_ID; 
 
        EXECUTE PROCEDURE ADD_OPR_EDIT(L_EDIT_OPR_ID,P_PARI_ID,NULL,L_USER,NULL,L_SUMA_OSN_VALUTA,L_DATE) 
        RETURNING_VALUES :P_PARI_ID;/*ПOЛЗВАМ ТАЗИ ЗА ДА НЕ ДЕКЛАРИРАМ НОВА ПРОМЕНЛИВА*/ 
 
        L_GEN_OLD_PARI_EL_ID = GEN_ID(GEN_OLD_PARI_EL_ID,1); 
 
        INSERT INTO OLD_PARI_EL (ID, OPR_ID, KASA_ID, OBEKT_ID, SUMA, VALUTA_ID, KURS, TIP) 
        VALUES(:L_GEN_OLD_PARI_EL_ID,:L_EDIT_OPR_ID,:L_KASA_ID,:L_OBEKT_ID,:L_SUMA,:L_VALUTA_ID,:L_KURS, :L_TIP); 
    END 
END^


ALTER PROCEDURE SAVE_PAYMENT_AVANSOVO (
    P_SUMA DOUBLE PRECISION,
    P_PAYMENT_OPR_ID INTEGER,
    P_KLI_ID INTEGER)
AS
BEGIN 
  INSERT INTO PAYMENT_AVANSOVO (SUMA_AVANSOVA, SUMA_OSTATAK, PAYMENT_OPR_ID, KLI_ID) 
         VALUES                (:P_SUMA, :P_SUMA, :P_PAYMENT_OPR_ID, :P_KLI_ID); 
END^


ALTER PROCEDURE SAVE_POR_EL (
    P_RAZ_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_OPR_ID INTEGER,
    P_SKLAD INTEGER,
    P_KLI_ID INTEGER,
    P_ORDER_N SMALLINT,
    P_NOTE VARCHAR(100))
AS
declare variable L_KOL double precision; 
declare variable L_POR_EL_ID integer; 
declare variable L_RAZFASOVKA_ID integer; 
declare variable L_CENA double precision; 
declare variable L_CENA_VALUTA type of DOM_CENA; 
BEGIN 
--  EXECUTE PROCEDURE GET_CENA_PRODUCT(:P_SIMPLE_ID,:P_SKLAD) RETURNING_VALUES(:L_CENA); 
  EXECUTE PROCEDURE GET_CENA_SIM(:P_SKLAD,:P_KLI_ID,','||CAST(:P_SIMPLE_ID AS VARCHAR(10))||',') RETURNING_VALUES(:L_CENA,:L_CENA_VALUTA); 
 
  IF (P_RAZ_ID = 0)  THEN BEGIN 
    L_POR_EL_ID = GEN_ID(GEN_POR_EL_ID,1); 
    INSERT INTO POR_EL(ID, SIMPLE_ID, KOL, OPR_ID, SUMA, ORDER_N) 
    VALUES (:L_POR_EL_ID, :P_SIMPLE_ID, :P_KOL, :P_OPR_ID, :P_KOL*:L_CENA, :P_ORDER_N); 
 
    IF (P_NOTE IS NOT NULL AND P_NOTE <> '') THEN BEGIN 
      INSERT INTO POR_EL_COMMENT(POR_EL_ID, COMMENT) VALUES (:L_POR_EL_ID, :P_NOTE); 
    END 
  END 
  ELSE BEGIN 
    L_POR_EL_ID = GEN_ID(GEN_POR_EL_ID,1); 
    SELECT 
      RAZFASOVKA.ID, 
      RAZFASOVKA.KOL 
    FROM SIMPLE 
    LEFT JOIN RAZFASOVKA ON RAZFASOVKA.RAZ_TIP_ID = SIMPLE.RAZ_TIP_ID 
    WHERE 
      SIMPLE.ID = :P_SIMPLE_ID AND 
      RAZFASOVKA.RAZ_ELEMENT_ID = :P_RAZ_ID 
    INTO :L_RAZFASOVKA_ID,:L_KOL; 
 
    INSERT INTO POR_EL(ID,SIMPLE_ID, KOL, OPR_ID, SUMA, ORDER_N) 
    VALUES (:L_POR_EL_ID,:P_SIMPLE_ID,:P_KOL*:L_KOL,:P_OPR_ID, :P_KOL*:L_KOL*:L_CENA, :P_ORDER_N); 
 
    INSERT INTO POR_EL_RAZ_NODE(POR_EL_ID, RAZFASOVKA_ID, KOL) 
    VALUES (:L_POR_EL_ID,:L_RAZFASOVKA_ID,:P_KOL); 
 
    IF (P_NOTE IS NOT NULL AND P_NOTE <> '') THEN BEGIN 
      INSERT INTO POR_EL_COMMENT(POR_EL_ID, COMMENT) VALUES (:L_POR_EL_ID, :P_NOTE); 
    END 
  END 
END^


ALTER PROCEDURE SAVE_POR_EL_9 (
    P_RAZ_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION,
    P_OPR_ID INTEGER,
    P_SKLAD INTEGER,
    P_KLI_ID INTEGER,
    P_ORDER_N SMALLINT,
    P_NOTE VARCHAR(100),
    P_IS_BONUS INTEGER)
AS
declare variable L_KOL double precision; 
declare variable L_POR_EL_ID integer; 
declare variable L_RAZFASOVKA_ID integer; 
declare variable L_CENA double precision; 
declare variable L_CENA_VALUTA type of DOM_CENA; 
BEGIN 
  if (P_IS_BONUS IS NULL) then 
    P_IS_BONUS = 0; 
 
  if (P_IS_BONUS = 0) then 
      EXECUTE PROCEDURE GET_CENA_SIM(:P_SKLAD,:P_KLI_ID,','||CAST(:P_SIMPLE_ID AS VARCHAR(10))||',') RETURNING_VALUES(:L_CENA,:L_CENA_VALUTA); 
   ELSE BEGIN 
     L_CENA = 0; 
     L_CENA_VALUTA = 0; 
   END 
 
  IF (P_RAZ_ID = 0)  THEN BEGIN 
    L_POR_EL_ID = GEN_ID(GEN_POR_EL_ID,1); 
 
    UPDATE SIMPLE SET SIMPLE.IS_BONUS = 1 WHERE SIMPLE.ID = :P_SIMPLE_ID; 
 
    INSERT INTO POR_EL(ID, SIMPLE_ID, KOL, OPR_ID, SUMA, ORDER_N) 
    VALUES (:L_POR_EL_ID, :P_SIMPLE_ID, :P_KOL, :P_OPR_ID, :P_KOL*:L_CENA, :P_ORDER_N); 
 
    IF (P_NOTE IS NOT NULL AND P_NOTE <> '') THEN BEGIN 
      INSERT INTO POR_EL_COMMENT(POR_EL_ID, COMMENT) VALUES (:L_POR_EL_ID, :P_NOTE); 
    END 
  END 
  ELSE BEGIN 
    L_POR_EL_ID = GEN_ID(GEN_POR_EL_ID,1); 
    SELECT 
      RAZFASOVKA.ID, 
      RAZFASOVKA.KOL 
    FROM SIMPLE 
    LEFT JOIN RAZFASOVKA ON RAZFASOVKA.RAZ_TIP_ID = SIMPLE.RAZ_TIP_ID 
    WHERE 
      SIMPLE.ID = :P_SIMPLE_ID AND 
      RAZFASOVKA.RAZ_ELEMENT_ID = :P_RAZ_ID 
    INTO :L_RAZFASOVKA_ID,:L_KOL; 
 
    UPDATE SIMPLE SET SIMPLE.IS_BONUS = 1 WHERE SIMPLE.ID = :P_SIMPLE_ID; 
 
    INSERT INTO POR_EL(ID,SIMPLE_ID, KOL, OPR_ID, SUMA, ORDER_N) 
    VALUES (:L_POR_EL_ID,:P_SIMPLE_ID,:P_KOL*:L_KOL,:P_OPR_ID, :P_KOL*:L_KOL*:L_CENA, :P_ORDER_N); 
 
    INSERT INTO POR_EL_RAZ_NODE(POR_EL_ID, RAZFASOVKA_ID, KOL) 
    VALUES (:L_POR_EL_ID,:L_RAZFASOVKA_ID,:P_KOL); 
 
    IF (P_NOTE IS NOT NULL AND P_NOTE <> '') THEN BEGIN 
      INSERT INTO POR_EL_COMMENT(POR_EL_ID, COMMENT) VALUES (:L_POR_EL_ID, :P_NOTE); 
    END 
  END 
END^


ALTER PROCEDURE SAVE_POR_ZD (
    P_POR_OPR_ID INTEGER,
    P_ZD_OPR_ID INTEGER)
AS
begin 
   insert into por_zd_node (por_opr_id, zd_opr_id) 
   values (:p_por_opr_id, :p_zd_opr_id); 
 
   post_event 'POR_REFRESH'; 
end^


ALTER PROCEDURE SAVE_PRODICTION (
    P_OPR_IN_ID INTEGER,
    P_OPR_OUT_ID INTEGER,
    P_SUMA_SR DOUBLE PRECISION)
RETURNS (
    R_ID INTEGER)
AS
begin 
  insert into PRODUCTION(OPR_IN_ID, OPR_OUT_ID, SUMA_SR) 
  values (:p_opr_in_id, :p_opr_out_id, :p_suma_sr) 
  returning id into :r_id; 
end^


ALTER PROCEDURE SAVE_SIM_BIG (
    NAME TYPE OF DOM_CHAR_100,
    CODE TYPE OF DOM_CHAR_50,
    CODE2 TYPE OF DOM_CHAR_50,
    ME TYPE OF DOM_INT,
    BARCODE VARCHAR(13),
    OPR_CL TYPE OF DOM_KEY,
    CENA TYPE OF DOM_CENA,
    SEL_ID TYPE OF DOM_KEY)
RETURNS (
    ID TYPE OF DOM_KEY,
    R_OLD_CENA TYPE OF DOM_CENA,
    R_ID_CL TYPE OF DOM_KEY)
AS
declare variable L_ID_CL type of DOM_KEY; 
begin 
  id = 0; 
  r_id_cl = 0; 
  select first 1 
   coalesce(id, 0) 
  from simple 
  where 
    code = :code and 
    code2 = :code2 
  into :id; 
 
  if (id = 0) then begin 
    id = GEN_ID(GEN_SIMPLE_ID,1); 
 
    INSERT INTO SIMPLE (ID, NAME, NAME_SHORT, CODE, ME_ID, SIMPLE_GROUP_ID, "ACTIVE", ACTIVE_FAK, LOCK_CENA_PROD, CENA_PROD, CENA_EDRO, CENA_OFERTA, CENA_PROD_FAK, DDS, KOL_KRI_MIN, KOL_KRI_MAX, DEFAULT_RAZ_ID, USLUGA, 
 CENA_POCKET, RSN, FLAG_CHECK, RAZ_TIP_ID, AMBALAJ, ACTIVE_SCALE, GODNOST, BRUTO, DEF_SEL_ID, RAZPAD, G_KRI_DOST, G_KRI_MIN, G_PERIOD, G_TIP, ME2_ID, FLAF_AMBALAJ, CODE2, TEMPERATURA) 
    VALUES (:id, :name, NULL, :code, :me, NULL, '1', '1', NULL, NULL, NULL, NULL, NULL, 20, NULL, NULL, NULL, 0, NULL, 0, 1, NULL, 0, 0, 0, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, '0', :code2, NULL); 
 
    if (:barcode <> '') then begin 
      INSERT INTO BARCODE (SIMPLE_ID, BARCODE, KOL) 
      VALUES (:id, :barcode, 1); 
    end 
 
    IF (:sel_id > 0) THEN 
        insert into selekciq_sim_el (simple_id, selekciq_id) 
        values (:id, :sel_id); 
  end 
 
  IF (CENA > 0) THEN BEGIN 
    l_id_cl = 0; 
    r_old_cena = 0; 
    select 
      coalesce(id, 0), 
      cena 
    from cenova_lista_el 
    where 
      opr_id = :opr_cl and 
      simple_id = :id 
    into :l_id_cl, :r_old_cena; 
 
    if (l_id_cl = 0) then begin 
       insert into cenova_lista_el (opr_id, ot_opr_id, simple_id, tip, procent, cena, tip_ot_cena, round_tip_id) 
       values (:opr_cl, null, :id, 1, 0, :cena, 1, null); 
    end 
 
    else 
 
    IF (:cena <> :r_old_cena) THEN  begin 
      update cenova_lista_el 
        set 
            ot_opr_id = null, 
            tip = 1, 
            procent = 0, 
            cena = :cena, 
            tip_ot_cena = 1, 
            round_tip_id = null 
        where (id = :l_id_cl); 
 
        r_id_cl = :l_id_cl; 
    end 
 
  END 
 
 -- suspend; 
end;^


ALTER PROCEDURE SEARCH_FOR_REKURS (
    P_CHILD_SIMPLE_ID TYPE OF DOM_KEY,
    P_SEARCH_SIMPLE_ID TYPE OF DOM_KEY,
    P_COUNT TYPE OF DOM_SMAL_INT = 1)
RETURNS (
    R_RESULT SMALLINT)
AS
DECLARE VARIABLE L_CHILD_SIMPLE_ID TYPE OF DOM_KEY;
BEGIN

    --ПЪРВО ПРОВЕРКА ДАЛИ В НЯКОЙ ОТ ЕЛЕМЕНТИТЕ ЗА РАЗПАД НЕ ФИГУРИРА ТЪРСЕНИЯ ПРОДУКТ
    IF (P_COUNT = 1000) THEN BEGIN
        R_RESULT = -1;--ПРЕКАЛЕНО ДЪЛБОКА РЕКУРСИЯ - ИЛИ НЕЩО Е СБЪРКАНО В ЛОГИКАТА ИЛИ КОНФИГУРАЦИЯТА
        EXIT;         --ЗАТОВА СЕ ИЗЛИЗА И БИ ТРЯБВАЛО ДА СЕ СПИРА ИЗПЪЛНЕНИЕТО.
    END

    L_CHILD_SIMPLE_ID = NULL;
    SELECT
        SIMPLE_CALC.CHILD_SIMPLE_ID
    FROM
        SIMPLE_CALC
    WHERE
        SIMPLE_CALC.SIMPLE_ID = :P_CHILD_SIMPLE_ID
        AND SIMPLE_CALC.CHILD_SIMPLE_ID = :P_SEARCH_SIMPLE_ID
    GROUP BY 1
    INTO    
        :L_CHILD_SIMPLE_ID;

    IF (P_SEARCH_SIMPLE_ID = COALESCE(L_CHILD_SIMPLE_ID,0)) THEN BEGIN
        R_RESULT = 1;
        EXIT;
    END

    FOR SELECT
        SIMPLE_CALC.CHILD_SIMPLE_ID
    FROM
        SIMPLE_CALC
    WHERE
        SIMPLE_CALC.SIMPLE_ID = :P_CHILD_SIMPLE_ID
    INTO
        :L_CHILD_SIMPLE_ID
    DO BEGIN
        EXECUTE PROCEDURE SEARCH_FOR_REKURS(L_CHILD_SIMPLE_ID,P_SEARCH_SIMPLE_ID,P_COUNT + 1)
        RETURNING_VALUES :R_RESULT;
        IF (R_RESULT <> 0) THEN
            EXIT;
    END

    R_RESULT = 0;
END^


ALTER PROCEDURE SEARCH_IN_CALC (
    P_SEARCH_TYPE TYPE OF DOM_KEY)
RETURNS (
    R_SIMPLE_ID TYPE OF DOM_KEY,
    R_SIMPLE TYPE OF DOM_KEY,
    R_CHILD_SIMPLE_ID TYPE OF DOM_KEY,
    R_SIMPLE_CALC_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SIMPLE_RAZPAD TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_CHILD_SIMPLE_ID TYPE OF DOM_KEY; 
BEGIN 
    FOR SELECT 
        SEL_SIMPLE.SIMPLE_ID 
    FROM 
        SEL_SIMPLE 
    INTO 
        :L_SIMPLE_ID 
    DO BEGIN 
        IF (P_SEARCH_TYPE = 0) THEN BEGIN 
            FOR SELECT 
                SIMPLE_CALC.ID, 
                SIMPLE_CALC.SIMPLE_ID, 
                SIMPLE_CALC.CHILD_SIMPLE_ID, 
                SIMPLE.RAZPAD 
            FROM 
                SIMPLE_CALC LEFT JOIN SIMPLE ON SIMPLE_CALC.CHILD_SIMPLE_ID =SIMPLE.ID 
            WHERE 
                SIMPLE_CALC.SIMPLE_ID =:L_SIMPLE_ID 
            INTO 
                :R_SIMPLE_CALC_ID,:R_SIMPLE_ID,:R_CHILD_SIMPLE_ID,:L_SIMPLE_RAZPAD 
            DO BEGIN 
                R_SIMPLE = L_SIMPLE_ID; 
                SUSPEND; 
            END 
        END 
        ELSE IF (P_SEARCH_TYPE = 1) THEN BEGIN 
            FOR SELECT 
                SIMPLE_CALC.SIMPLE_ID, 
                SIMPLE_CALC.CHILD_SIMPLE_ID, 
                SIMPLE.RAZPAD 
            FROM 
                SIMPLE_CALC LEFT JOIN SIMPLE ON SIMPLE.ID = SIMPLE_CALC.CHILD_SIMPLE_ID 
            WHERE 
                SIMPLE_CALC.SIMPLE_ID =:L_SIMPLE_ID 
            INTO 
                :L_SIMPLE_ID,:L_CHILD_SIMPLE_ID,:L_SIMPLE_RAZPAD 
            DO BEGIN 
                IF (L_SIMPLE_RAZPAD <> 0) THEN 
                    FOR SELECT 
                        SIMPLE_CALC.ID, 
                        SIMPLE_CALC.SIMPLE_ID, 
                        SIMPLE_CALC.CHILD_SIMPLE_ID, 
                        SIMPLE.RAZPAD 
                    FROM 
                        SIMPLE_CALC LEFT JOIN SIMPLE ON SIMPLE_CALC.CHILD_SIMPLE_ID =SIMPLE.ID 
                    WHERE 
                        SIMPLE_CALC.SIMPLE_ID =:L_CHILD_SIMPLE_ID 
                    INTO 
                        :R_SIMPLE_CALC_ID,:R_SIMPLE_ID,:R_CHILD_SIMPLE_ID,:L_SIMPLE_RAZPAD 
 
                    DO BEGIN 
                        R_SIMPLE = L_SIMPLE_ID; 
                        SUSPEND; 
                    END 
            END 
        END 
        ELSE IF (P_SEARCH_TYPE = 2) THEN BEGIN 
            FOR SELECT 
                SIMPLE_CALC.ID, 
                SIMPLE_CALC.SIMPLE_ID, 
                SIMPLE_CALC.CHILD_SIMPLE_ID, 
                SIMPLE.RAZPAD 
            FROM 
                SIMPLE_CALC LEFT JOIN SIMPLE ON SIMPLE.ID = SIMPLE_CALC.CHILD_SIMPLE_ID 
            WHERE 
                SIMPLE_CALC.SIMPLE_ID =:L_SIMPLE_ID 
            INTO 
                :R_SIMPLE_CALC_ID,:R_SIMPLE_ID,:R_CHILD_SIMPLE_ID,:L_SIMPLE_RAZPAD 
 
            DO BEGIN 
                R_SIMPLE = L_SIMPLE_ID; 
                SUSPEND; 
                L_CHILD_SIMPLE_ID = R_CHILD_SIMPLE_ID; 
                IF (L_SIMPLE_RAZPAD <> 0) THEN 
                FOR SELECT 
                    SIMPLE_CALC.ID, 
                    SIMPLE_CALC.SIMPLE_ID, 
                    SIMPLE_CALC.CHILD_SIMPLE_ID, 
                    SIMPLE.RAZPAD 
                FROM 
                    SIMPLE_CALC LEFT JOIN SIMPLE ON SIMPLE_CALC.CHILD_SIMPLE_ID =SIMPLE.ID 
                WHERE 
                    SIMPLE_CALC.SIMPLE_ID =:L_CHILD_SIMPLE_ID 
                INTO 
                    :R_SIMPLE_CALC_ID,:R_SIMPLE_ID,:R_CHILD_SIMPLE_ID, :L_SIMPLE_RAZPAD 
                DO BEGIN 
                    R_SIMPLE = L_SIMPLE_ID; 
                    SUSPEND; 
                END 
            END 
        END 
    END 
END^


ALTER PROCEDURE SEARCH_SERIAL_NUMBER (
    P_SN VARCHAR(30))
RETURNS (
    R_SROK TIMESTAMP,
    R_OPR_ID INTEGER,
    R_SKLAD_ID INTEGER,
    R_KLI_ID INTEGER,
    R_USER_ID INTEGER,
    R_OPR_DATE DATE,
    R_DATETIME TIMESTAMP,
    R_OPR_TIP SMALLINT,
    R_SUMA DOUBLE PRECISION,
    R_SERIAL_NUM VARCHAR(30),
    R_GARSROK VARCHAR(30),
    R_SIMPLE_NAME VARCHAR(100),
    R_KOL TYPE OF DOM_KOL,
    R_KOL_SALDO TYPE OF DOM_KOL,
    R_SIMPLE_ID TYPE OF DOM_INT,
    R_ELEMENT_ID TYPE OF DOM_KEY,
    R_SIMPLE_RSN INTEGER)
AS
declare variable L_SIMPLE_ID integer; 
declare variable L_GTIP varchar(20); 
declare variable L_GPERIOD integer; 
declare variable L_ELEMENT_ID integer; 
BEGIN 
    FOR SELECT 
        SN.SN, 
        SN.PARTIDA_EL_ID 
    FROM 
        SERIAL_NUM SN 
    WHERE 
        SN.SN LIKE ''||:P_SN||'%' 
        AND SN.ID > 0 
    ORDER BY 1 
    INTO 
        :R_SERIAL_NUM,:L_ELEMENT_ID 
    DO BEGIN 
        R_OPR_ID = NULL; 
        R_SKLAD_ID = NULL; 
        R_KLI_ID = NULL; 
        R_USER_ID = NULL; 
        R_OPR_DATE = NULL; 
        R_DATETIME = NULL; 
        R_SUMA = NULL; 
        R_OPR_TIP = NULL; 
        R_SROK = NULL; 
        R_GARSROK = NULL; 
        R_KOL = NULL; 
        R_KOL_SALDO = NULL; 
        R_SIMPLE_ID = NULL; 
        R_ELEMENT_ID = NULL; 
 
        SELECT FIRST 1 
            SIMPLE.NAME, 
            SIMPLE.ID 
        FROM 
            PARTIDA_NAL PN INNER JOIN PARTIDA_EL_NODE PEN ON PEN.PARTIDA_ID = PN.ID 
            AND PN.ELEMENT_ID = :L_ELEMENT_ID 
            INNER JOIN IN_EL ON IN_EL.ID = PN.IN_EL_ID 
            INNER JOIN SIMPLE ON SIMPLE.ID = IN_EL.SIMPLE_ID 
        INTO 
            :R_SIMPLE_NAME, L_SIMPLE_ID; 
 
        SUSPEND; 
        R_SERIAL_NUM  = NULL; 
        R_SIMPLE_NAME = NULL; 
 
 
        FOR SELECT 
            OPR.ID, 
            OPR.SKLAD_ID, 
            OPR.KLI_ID, 
            OPR.USER_ID, 
            OPR.OPR_DATE, 
            OPR.DATETIME, 
            OPR.OPR_TIP, 
            OPR.SUMA, 
            PE.SROK, 
            SIMPLE.G_PERIOD, 
            GARANCII.NAME, 
            PEN.KOL 
        FROM 
            PARTIDA_NAL PN INNER JOIN PARTIDA_EL_NODE PEN ON PEN.PARTIDA_ID = PN.ID 
            AND PN.ELEMENT_ID = :L_ELEMENT_ID 
            INNER JOIN OPR ON PEN.OPR_ID = OPR.ID 
            INNER JOIN PARTIDA_EL PE ON PE.ID = PN.ELEMENT_ID 
            LEFT JOIN SIMPLE ON SIMPLE.ID =:L_SIMPLE_ID 
            LEFT JOIN GARANCII ON GARANCII.ID = SIMPLE.G_TIP 
 
        ORDER BY 1 
        INTO 
            :R_OPR_ID,:R_SKLAD_ID,:R_KLI_ID,:R_USER_ID,:R_OPR_DATE,:R_DATETIME,:R_OPR_TIP,:R_SUMA, :R_SROK, :l_gperiod, :l_gtip, :R_KOL 
        DO 
        BEGIN 
            R_GARSROK = L_GPERIOD || ' ' || L_GTIP; 
            SUSPEND; 
        END 
    END 
END^


ALTER PROCEDURE SET_IZL_FROM_INV (
    P_OPR_ID INTEGER)
AS
DECLARE VARIABLE L_DATA DATE; 
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
DECLARE VARIABLE L_SKLAD_ID SMALLINT; 
DECLARE VARIABLE L_ID INTEGER; 
BEGIN 
/*V.3*/ 
    SELECT 
        OPR.OPR_DATE, 
        opr.SKLAD_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = :P_OPR_ID 
    INTO 
        :L_DATA, :L_SKLAD_ID; 
 
    FOR SELECT 
        IN_EL.SIMPLE_ID 
    FROM 
        IN_EL 
    WHERE 
        IN_EL.OPR_ID = :P_OPR_ID 
    INTO 
        :L_SIMPLE_ID 
    DO BEGIN 
        FOR SELECT 
            IZL.ID 
        FROM 
            OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
            INNER JOIN IZL ON IZL.OUT_EL_ID = OUT_EL.ID 
        WHERE 
            OUT_EL.SIMPLE_ID = :L_SIMPLE_ID 
            AND (OPR.OPR_DATE <=:L_DATA) 
            AND OPR.SKLAD_ID = :L_SKLAD_ID 
        INTO 
            :L_ID 
        DO 
            UPDATE IZL SET 
            IZL.FLAG_LOCK_KOR = 1 
            WHERE IZL.ID = :L_ID; 
    END 
END^


ALTER PROCEDURE SET_POR_EL_KOL_MUVE (
    P_SKLAD_ID INTEGER,
    P_STATUS INTEGER)
AS
declare variable L_OPR_ID integer; 
BEGIN 
  FOR SELECT 
    POR.OPR_ID 
  FROM 
    POR 
  WHERE 
    POR.STATUS =  :P_STATUS AND 
    POR.SKLAD_ID = :P_SKLAD_ID 
  INTO :L_OPR_ID 
  DO BEGIN 
    UPDATE POR_EL SET POR_EL.KOL_MUVE = NULL WHERE POR_EL.OPR_ID = :L_OPR_ID; 
  END 
END^


ALTER PROCEDURE SET_WORK_OTR_KOL_FLAG
AS
BEGIN 
  INSERT INTO TBL_WORK_OTR_KOL (FLAG) VALUES (1); 
END^


ALTER PROCEDURE SLEDI_LICENZ_UPDATE (
    P_OPR_ID INTEGER)
AS
declare variable L_SIMPLE_ID integer;
declare variable L_KOL double precision;
declare variable L_OPR_DATE timestamp;
declare variable L_KLI_ID integer;
declare variable L_DATE_PADEJ date;
declare variable L_PADEJ_DEN smallint;
declare variable L_GEN_Y integer;
declare variable L_GEN_M integer;
BEGIN 
  /* PROCEDURE TEXT */ 
 
  L_KLI_ID = 0; 
 
  SELECT 
    OPR.OPR_DATE, 
    COALESCE(SLEDI_KLI.SLEDI_KLI,0) 
  FROM 
    OPR 
    INNER JOIN SLEDI_KLI ON SLEDI_KLI.ATON_KLI = OPR.KLI_ID 
  WHERE 
    OPR.ID = :P_OPR_ID 
  INTO 
    :L_OPR_DATE, :L_KLI_ID; 
 
  IF (L_KLI_ID = 0) THEN BEGIN 
    --R_STATUS = 1; 
    EXIT; 
  END 
 
  L_PADEJ_DEN = NULL; 
 
  SELECT 
    COALESCE(OPR_TEMPLATE.DAY_REG, 1) 
  FROM 
    TASKS 
    INNER JOIN OPR_TEMPLATE_TASK_NODE ON OPR_TEMPLATE_TASK_NODE.TASK_ID = TASKS.ID 
    INNER JOIN OPR_TEMPLATE ON OPR_TEMPLATE.ID = OPR_TEMPLATE_TASK_NODE.TEMPLATE_ID 
  WHERE 
    TASKS.OPR_ID =  :P_OPR_ID 
  INTO :L_PADEJ_DEN; 
 
  IF (L_PADEJ_DEN IS NOT NULL) THEN BEGIN 
    L_GEN_Y = EXTRACT(YEAR FROM L_OPR_DATE); 
    L_GEN_M = EXTRACT(MONTH FROM L_OPR_DATE); 
    L_DATE_PADEJ = '01.01.2000'; 
    L_DATE_PADEJ = DATEADD(DAY,  L_PADEJ_DEN-1, L_DATE_PADEJ); 
    L_DATE_PADEJ = DATEADD(MONTH, L_GEN_M,  L_DATE_PADEJ); 
    L_DATE_PADEJ = DATEADD(YEAR,  L_GEN_Y-2000, L_DATE_PADEJ); 
  END 
  ELSE BEGIN 
    SELECT 
      OPR_PADEJ.DATA_PADEJ 
      --EXTRACT(DAY FROM OPR_PADEJ.DATA_PADEJ) 
    FROM 
      OPR_PADEJ 
    WHERE 
      OPR_PADEJ.OPR_ID = :P_OPR_ID 
    INTO 
      :L_DATE_PADEJ; 
 
    L_DATE_PADEJ = DATEADD(MONTH, 1, L_DATE_PADEJ); 
  END 
 
  FOR SELECT 
    OUT_EL.SIMPLE_ID, 
    SUM(OUT_EL.KOL) - COALESCE(SUM(IN_EL.KOL), 0.00)
  FROM 
    SLEDI_SIMPLE 
    INNER JOIN OUT_EL ON OUT_EL.SIMPLE_ID = SLEDI_SIMPLE.SIMPLE_ID 
    LEFT JOIN OPR_RAZPAD_NODE ORN ON ORN.OUT_EL_ID = OUT_EL.ID
    LEFT JOIN IN_EL ON IN_EL.ID = ORN.IN_EL_ID
  WHERE 
    OUT_EL.OPR_ID = :P_OPR_ID 
  GROUP BY OUT_EL.SIMPLE_ID
  HAVING SUM(OUT_EL.KOL) - COALESCE(SUM(IN_EL.KOL), 0.00) > 0.00
  INTO
    :L_SIMPLE_ID, :L_KOL
  DO BEGIN 
    UPDATE OR INSERT
        INTO SLEDI_LICENZ (OT_OPR_ID, SLEDI_KLI_ID, DO_DATE, DATETIME, OBR)
        VALUES(:P_OPR_ID, :L_KLI_ID, :L_DATE_PADEJ, CURRENT_TIMESTAMP, NULL)
        MATCHING (OT_OPR_ID, OBR);
  END 
END^


ALTER PROCEDURE SLEDI_ROUMING_PAIED (
    P_OPR_ID INTEGER)
AS
declare variable L_SLEDI_ID integer; 
BEGIN 
  FOR SELECT 
    SLEDI_ROUMING_LOG.SLEDI_ID 
  FROM 
    SLEDI_ROUMING_LOG 
  WHERE 
    SLEDI_ROUMING_LOG.PROD_OPR_ID = :P_OPR_ID 
  INTO :L_SLEDI_ID 
  DO BEGIN 
    INSERT INTO SLEDI_ROUMING_LOG_PAIED(SLEDI_ID) VALUES(:L_SLEDI_ID); 
  END 
 
  UPDATE SLEDI_ROUMING_LOG SET 
    SLEDI_ROUMING_LOG.PAIED = 1 
  WHERE 
    SLEDI_ROUMING_LOG.PROD_OPR_ID = :P_OPR_ID; 
END^


ALTER PROCEDURE SLEDI_TEMPLATE_UPDATE (
    P_SIMPLE_TRACKER_ID INTEGER,
    P_SIMPLE_TRACKER_2_ID INTEGER)
RETURNS (
    R_KLI_ID INTEGER,
    R_S_ID INTEGER)
AS
declare variable L_S_ID integer; 
declare variable L_TEMPLATE_ID integer; 
begin 
  FOR SELECT 
    KLI.ID AS KLI_ID, 
    SERIAL_NUM.ID AS S_ID 
  FROM 
    OPR 
    INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OPR.ID 
    INNER JOIN SIMPLE ON OUT_EL.SIMPLE_ID = SIMPLE.ID 
    INNER JOIN KLI ON KLI.ID = OPR.KLI_ID 
    INNER JOIN PARTIDA_OUT_EL_NODE PON ON OUT_EL.ID = PON.OUT_EL_ID 
    INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID 
    INNER JOIN PARTIDA_NAL PN ON PN.ID = PEN.PARTIDA_ID 
    INNER JOIN SERIAL_NUM ON SERIAL_NUM.PARTIDA_EL_ID = PN.ELEMENT_ID 
    INNER JOIN SIMPLE_TRACKER ON SIMPLE_TRACKER.SIMPLE_ID = SIMPLE.ID 
  WHERE 
    --(SIMPLE.ID = :P_SIMPLE_TRACKER_ID OR SIMPLE.ID = :P_SIMPLE_TRACKER_2_ID) AND 
    OPR.OPR_TIP = 2 
  INTO :R_KLI_ID,  :R_S_ID 
  DO BEGIN 
    L_TEMPLATE_ID = NULL; 
    SELECT ID FROM OPR_TEMPLATE WHERE KLI_ID = :R_KLI_ID AND TIP = 1 INTO :L_TEMPLATE_ID; 
 
    IF (L_TEMPLATE_ID IS NULL) THEN BEGIN 
      L_TEMPLATE_ID = GEN_ID(GEN_OPR_TEMPLATE_ID, 1); 
      INSERT INTO OPR_TEMPLATE (ID, KLI_ID, PAY_TIP, GENERIRANE_DEN, ACTIVEN, DELETED, ACTIVEN_OT_DATA, ACTIVEN_DO_DATA, ACTIVEN_MESECI,  TIP) VALUES (:L_TEMPLATE_ID, :R_KLI_ID, 1, 1, 1, 0, CURRENT_DATE, CURRENT_DATE + (365 * 100) , 4095, 1); 
    END 
 
    L_S_ID = NULL; 
    SELECT ID FROM SLEDI_TEMPLATE_EL WHERE S_ID = :R_S_ID INTO :L_S_ID; 
 
    IF (L_S_ID IS NULL) THEN BEGIN 
      INSERT INTO SLEDI_TEMPLATE_EL (S_ID, TEMPLATE_ID) VALUES (:R_S_ID, :L_TEMPLATE_ID); 
    END 
  END 
 
  SUSPEND; 
end^


ALTER PROCEDURE SLOW_SPR_NAL (
    P_FLAG_FKT SMALLINT,
    P_DATA DATE)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_SKLAD_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_KOL2 DOUBLE PRECISION,
    R_LAST_CENA DOUBLE PRECISION,
    R_LAST_DOST_OPR_ID INTEGER)
AS
BEGIN 
/*V.4*/ 
    FOR SELECT 
        SLOW_SPR_NAL_EL.R_SIMPLE_ID, 
        SLOW_SPR_NAL_EL.R_SKLAD_ID, 
        SUM(SLOW_SPR_NAL_EL.R_KOL), 
        SUM(SLOW_SPR_NAL_EL.R_SUMA_FR), 
        SUM(SLOW_SPR_NAL_EL.R_SUMA_SR), 
        SUM(SLOW_SPR_NAL_EL.R_KOL2) 
    FROM 
        SLOW_SPR_NAL_EL(:P_FLAG_FKT,:P_DATA) 
    GROUP BY 1,2 
    INTO 
        :R_SIMPLE_ID,:R_SKLAD_ID,:R_KOL,:R_SUMA_FR,:R_SUMA_SR,:R_KOL2 
    DO 
    BEGIN 
       SELECT 
         NAL.LAST_CENA, 
         NAL.LAST_DOST_OPR_ID 
       FROM 
         NAL 
       WHERE 
         NAL.SIMPLE_ID = :R_SIMPLE_ID AND 
         NAL.SKLAD_ID = :R_SKLAD_ID 
       INTO 
         :R_LAST_CENA, :R_LAST_DOST_OPR_ID; 
 
        /* 
        SELECT FIRST 1 
            IIF(IN_EL.KOL <> 0, ROUNDD(IN_EL.SUMA_FR / IN_EL.KOL), NULL) 
        FROM 
            IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID AND IN_EL.SIMPLE_ID =:R_SIMPLE_ID AND OPR.SKLAD_ID =:R_SKLAD_ID 
            AND OPR.OPR_DATE <:P_DATA 
        ORDER BY IN_EL.ID DESC 
        INTO :R_LAST_CENA; 
        */ 
 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE SLOW_SPR_NAL_EL (
    P_FLAG_FKT SMALLINT,
    P_DATA DATE)
RETURNS (
    R_SIMPLE_ID INTEGER,
    R_SKLAD_ID INTEGER,
    R_KOL DOUBLE PRECISION,
    R_SUMA_SR DOUBLE PRECISION,
    R_SUMA_FR DOUBLE PRECISION,
    R_KOL2 DOUBLE PRECISION)
AS
DECLARE VARIABLE L_FKT_SKLAD SMALLINT; 
BEGIN 
/*V.1*/ 
    SELECT 
        SYSTEM.H_SKLAD 
    FROM 
        SYSTEM 
    INTO 
        :L_FKT_SKLAD; 
 
    IF (P_FLAG_FKT = 0) THEN BEGIN 
        FOR WITH TMP_IN AS ( 
        SELECT 
            EL.ID, 
            OPR.SKLAD_ID, 
            EL.SIMPLE_ID, 
            COALESCE(EL2.KOL,0.00) AS KOL2 
        FROM 
            SKLAD INNER JOIN OPR ON SKLAD.ID = OPR.SKLAD_ID AND SKLAD.ID <> :L_FKT_SKLAD 
            INNER JOIN IN_EL EL ON OPR.ID = EL.OPR_ID 
            LEFT JOIN IN_EL2 EL2 ON EL2.IN_EL_ID = EL.ID 
        WHERE 
            OPR.OPR_DATE <= :P_DATA) 
            SELECT 
                TMP_IN.SKLAD_ID, 
                TMP_IN.SIMPLE_ID, 
                TMP_IN.KOL2, 
                ROUND(SUM(PEN.KOL),5), 
                ROUND(SUM(PEN.SUMA_FR),2), 
                ROUND(SUM(PEN.SUMA_SR),2) 
            FROM 
                TMP_IN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = TMP_IN.ID 
                INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
            GROUP BY 1,2,3 
        INTO 
            :R_SKLAD_ID,:R_SIMPLE_ID,:R_KOL2,:R_KOL,:R_SUMA_FR,:R_SUMA_SR 
        DO 
            SUSPEND; 
 
        R_SKLAD_ID = NULL; 
        R_SIMPLE_ID = NULL; 
        R_KOL = NULL; 
        R_SUMA_FR = NULL; 
        R_SUMA_SR = NULL; 
        R_KOL2 = NULL; 
 
        FOR WITH TMP_OUT AS ( 
        SELECT 
            EL.ID, 
            OPR.SKLAD_ID, 
            EL.SIMPLE_ID, 
            COALESCE(EL2.KOL,0.00) AS KOL2 
        FROM 
            SKLAD INNER JOIN OPR ON SKLAD.ID = OPR.SKLAD_ID AND SKLAD.ID <> :L_FKT_SKLAD 
            INNER JOIN OUT_EL EL ON OPR.ID = EL.OPR_ID 
            LEFT JOIN OUT_EL2 EL2 ON EL2.OUT_EL_ID = EL.ID 
        WHERE 
            OPR.OPR_DATE <= :P_DATA) 
 
        SELECT 
            TMP_OUT.SKLAD_ID, 
            TMP_OUT.SIMPLE_ID, 
            -TMP_OUT.KOL2, 
            -ROUND(SUM(PEN.KOL),5), 
            -ROUND(SUM(PEN.SUMA_FR),2), 
            -ROUND(SUM(PEN.SUMA_SR),2) 
        FROM 
            TMP_OUT INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = TMP_OUT.ID 
            INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID 
        GROUP BY 1,2,3 
        INTO 
            :R_SKLAD_ID,:R_SIMPLE_ID,:R_KOL2,:R_KOL,:R_SUMA_FR,:R_SUMA_SR 
        DO 
            SUSPEND; 
 
        /*R_SKLAD_ID = NULL; 
        R_SIMPLE_ID = NULL; 
        R_KOL = NULL; 
        R_SUMA_FR = 0.00; 
        R_SUMA_SR = 0.00; 
        R_KOL2 = 0.00; 
 
        FOR SELECT 
            INV_OPIS.SIMPLE_ID, 
            ABS(INV_OPIS.KOL_S), 
            OPR.SKLAD_ID 
        FROM 
            SKLAD INNER JOIN OPR ON OPR.SKLAD_ID = SKLAD.ID AND SKLAD.ID <> :L_FKT_SKLAD 
            INNER JOIN INV_OPIS ON OPR.ID = INV_OPIS.OPR_ID 
        WHERE 
            OPR.OPR_DATE <= :P_DATA 
            AND INV_OPIS.KOL_S < 0.00 
        INTO 
            :R_SIMPLE_ID,:R_KOL,:R_SKLAD_ID 
        DO 
            SUSPEND;    */ 
    END 
    ELSE BEGIN 
        R_SKLAD_ID = :L_FKT_SKLAD; 
        FOR WITH TMP_IN AS ( 
        SELECT 
            EL.ID, 
            OPR.SKLAD_ID, 
            EL.SIMPLE_ID, 
            COALESCE(EL2.KOL,0.00) AS KOL2 
        FROM 
            OPR INNER JOIN IN_EL EL ON OPR.ID = EL.OPR_ID AND OPR.SKLAD_ID = :L_FKT_SKLAD 
            LEFT JOIN IN_EL2 EL2 ON EL2.IN_EL_ID = EL.ID 
        WHERE 
            OPR.OPR_DATE <= :P_DATA) 
            SELECT 
                TMP_IN.SKLAD_ID, 
                TMP_IN.SIMPLE_ID, 
                TMP_IN.KOL2, 
                ROUND(SUM(PEN.KOL),5), 
                ROUND(SUM(PEN.SUMA_FR),2), 
                ROUND(SUM(PEN.SUMA_SR),2) 
            FROM 
                TMP_IN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = TMP_IN.ID 
                INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
            GROUP BY 1,2,3 
        INTO 
            :R_SKLAD_ID,:R_SIMPLE_ID,:R_KOL2,:R_KOL,:R_SUMA_FR,:R_SUMA_SR 
        DO 
            SUSPEND; 
 
        R_SKLAD_ID = NULL; 
        R_SIMPLE_ID = NULL; 
        R_KOL = NULL; 
        R_SUMA_FR = NULL; 
        R_SUMA_SR = NULL; 
        R_KOL2 = NULL; 
 
        FOR WITH TMP_OUT AS ( 
        SELECT 
            EL.ID, 
            OPR.SKLAD_ID, 
            EL.SIMPLE_ID, 
            COALESCE(EL2.KOL,0.00) AS KOL2 
        FROM 
            OPR INNER JOIN OUT_EL EL ON OPR.ID = EL.OPR_ID AND OPR.SKLAD_ID = :L_FKT_SKLAD 
            LEFT JOIN OUT_EL2 EL2 ON EL2.OUT_EL_ID = EL.ID 
        WHERE 
            OPR.OPR_DATE <= :P_DATA) 
 
        SELECT 
            TMP_OUT.SKLAD_ID, 
            TMP_OUT.SIMPLE_ID, 
            -TMP_OUT.KOL2, 
            -ROUND(SUM(PEN.KOL),5), 
            -ROUND(SUM(PEN.SUMA_FR),2), 
            -ROUND(SUM(PEN.SUMA_SR),2) 
        FROM 
            TMP_OUT INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = TMP_OUT.ID 
            INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID 
        GROUP BY 1,2,3 
        INTO 
            :R_SKLAD_ID,:R_SIMPLE_ID,:R_KOL2,:R_KOL,:R_SUMA_FR,:R_SUMA_SR 
        DO 
            SUSPEND; 
 
        /*R_SIMPLE_ID = NULL; 
        R_KOL = NULL; 
        R_SUMA_FR = 0.00; 
        R_SUMA_SR = 0.00; 
        R_KOL2 = 0.00; 
 
        --ОТРИЦАТЕЛНО КОЛИЧЕСТВО ТЪРСЕНО ПРИ ИНВЕНАРИЗАЦИЯ И НАМРЕНО 0.00 ИЛИ > 0.00 
        --ТО НЕ СЕ ОСТОЙНОСТЯВА, НО ИМАМЕ ПРОМЯНА НА НАЛИЧНОСТИТЕ 
        R_SKLAD_ID = L_FKT_SKLAD; 
        R_SIMPLE_ID = NULL; 
        R_KOL = NULL; 
        R_SUMA_FR = 0.00; 
        R_SUMA_SR = 0.00; 
        R_KOL2 = 0.00; 
 
        FOR SELECT 
            INV_OPIS.SIMPLE_ID, 
            ABS(INV_OPIS.KOL_S) 
        FROM 
            INV_OPIS INNER JOIN OPR ON OPR.ID = INV_OPIS.OPR_ID 
        WHERE 
            OPR.SKLAD_ID = :L_FKT_SKLAD 
            AND OPR.OPR_DATE <= :P_DATA 
            AND INV_OPIS.KOL_S < 0.00 
        INTO 
            :R_SIMPLE_ID,:R_KOL 
        DO 
            SUSPEND;  */ 
    END 
END^


ALTER PROCEDURE SORT_ID (
    P_TABLE_NAME VARCHAR(31),
    P_GEN_NAME VARCHAR(31))
AS
DECLARE VARIABLE L_COUNTER INTEGER;
DECLARE VARIABLE L_ID INTEGER;
BEGIN
    L_COUNTER = 1;
    FOR EXECUTE STATEMENT '
    SELECT
        ID
    FROM
        "' || :P_TABLE_NAME || '"
    ORDER BY 1 ASC'
    INTO
        :L_ID
    DO BEGIN
        EXECUTE STATEMENT 'UPDATE "' || :P_TABLE_NAME ||'" SET ID = ' || :L_COUNTER ||'
        WHERE ID = '|| :L_ID;
        L_COUNTER = L_COUNTER + 1;
    END

    EXECUTE STATEMENT 'ALTER SEQUENCE ' || :P_GEN_NAME || ' RESTART WITH ' || :L_COUNTER;
END^


ALTER PROCEDURE SP_BCT_ADD_EDIT (
    P_ID INTEGER,
    P_OTDT DATE,
    P_DODT DATE,
    P_SIMPLE_ID INTEGER,
    P_CENA DOUBLE PRECISION,
    P_TOCHKI INTEGER,
    P_USER_ID INTEGER)
AS
declare variable L_ID integer; 
begin 
  if (p_id = 0) then 
    insert into bonus_cena_tochki (otdt, dodt, simple_id, cena, tochki, anul, bonus_c_t_id, dt, user_id) 
    values (:p_otdt, :p_dodt, :p_simple_id, :p_cena, :p_tochki, 0, null, current_timestamp, :p_user_id); 
  else begin 
    insert into bonus_cena_tochki (otdt, dodt, simple_id, cena, tochki, anul, bonus_c_t_id, dt, user_id) 
    values (:p_otdt, :p_dodt, :p_simple_id, :p_cena, :p_tochki, 0, null, current_timestamp, :p_user_id) 
    returning id into :l_id; 
 
    update bonus_cena_tochki 
    set bonus_c_t_id = :l_id 
    where id = :p_id; 
  end 
end^


ALTER PROCEDURE SP_DEL_ANUL_CL
AS
DECLARE VARIABLE L_OPR_ANUL_ID INTEGER; 
DECLARE VARIABLE L_CL_OPR_ID INTEGER; 
DECLARE VARIABLE L_OPR_ANUL_OPR_ID INTEGER; 
begin 
  for 
    select 
        opr_anul.id, 
        opr_anul.an_opr_id, 
        opr_anul.opr_id 
    from 
        opr_anul 
        inner join opr on opr_anul.an_opr_id = opr.id 
    where 
        opr.opr_tip = 25 
    into 
        :l_opr_anul_id, :l_cl_opr_id, :l_opr_anul_opr_id 
    do begin 
        delete from opr_anul where opr_anul.id = :l_opr_anul_id; 
 
        delete from cenova_lista_history where cenova_lista_history.opr_id = :l_cl_opr_id; 
        delete from cenova_lista_kli where cenova_lista_kli.opr_id = :l_cl_opr_id; 
        delete from cenova_lista_protokol where cenova_lista_protokol.opr_id = :l_cl_opr_id; 
        delete from cenova_lista_sklad where cenova_lista_sklad.opr_id = :l_cl_opr_id; 
        delete from cenova_lista where cenova_lista.opr_id = :l_cl_opr_id; 
        delete from cenova_lista_el where cenova_lista_el.opr_id = :l_cl_opr_id; 
        update cenova_lista_el set ot_opr_id = NULL where ot_opr_id = :L_CL_OPR_ID; 
        delete from CENOVA_LISTA_EL_EDIT where CENOVA_LISTA_EL_EDIT.OT_OPR_ID = :L_CL_OPR_ID; 
        delete from CENOVA_LISTA_EL_EDIT where CENOVA_LISTA_EL_EDIT.OPR_EDIT_ID in (select opr_edit.id from opr_Edit where opr_Edit.ED_OPR_ID = :L_CL_OPR_ID); 
        delete from CENOVA_LISTA_EDIT where CENOVA_LISTA_EDIT.OPR_EDIT_ID in (select opr_edit.id from opr_Edit where opr_Edit.ED_OPR_ID = :L_CL_OPR_ID); 
 
        delete from opr_Edit where ed_opr_id = :L_CL_OPR_ID; 
 
        delete from opr where opr.id = :l_cl_opr_id; 
        delete from opr where opr.id = :l_opr_anul_opr_id; 
    end 
end^


ALTER PROCEDURE SP_DELETE_INSTALLATIONS (
    P_INSTALLATIONS_ID DOM_INT,
    P_POR_ID DOM_INT)
AS
declare variable L_INSTALLATIONS_ID DOM_INT; 
begin 
  l_installations_id = null; 
 
  delete from INSTALLATIONS 
  where ID = :p_installations_id; 
 
  select first 1 
    i.id 
  from installations i 
  where 
    i.order_id = :p_por_id 
  into :l_installations_id; 
 
  update POR 
  set 
      INSTALLATION_PHASE = iif(:l_installations_id is null, 0, 2) 
  where 
    ID = :p_por_id; 
 
end^


ALTER PROCEDURE SP_DROP_LOG_TBL
AS
declare variable L_TBL varchar(2000); 
declare variable L_NAME_TBL varchar(31); 
declare variable RDB$RELATION_NAME char(31); 
declare variable RDB$FIELD_NAME char(31); 
BEGIN 
 
  l_name_tbl = ''; 
 
  /* тук се описват таблиците за които искаме да създадем лог */ 
  l_tbl = 'where f.rdb$relation_name in (''USER'',''SIMPLE'', ''KLI'', ''FIRMI'', ''CFG_PAYMENTS'', ''SKLAD'', ''BARCODE'')'; 
 
  FOR 
    execute statement 
    'select 
      trim(f.rdb$relation_name), 
      trim(f.rdb$field_name) 
    from rdb$relation_fields f 
    join rdb$relations r on f.rdb$relation_name = r.rdb$relation_name 
    and r.rdb$view_blr is null 
    and (r.rdb$system_flag is null or r.rdb$system_flag = 0) '||:l_tbl||' order by 1, f.rdb$field_position ' 
    INTO :rdb$relation_name, :rdb$field_name 
  DO BEGIN 
    if (:l_name_tbl <> :rdb$relation_name) then begin 
      if (:l_name_tbl <> '') then begin 
        EXECUTE STATEMENT 'DROP trigger '||:l_name_tbl||'_LOG_AI0'; 
 
        EXECUTE STATEMENT 'DROP trigger '||:l_name_tbl||'_LOG_AU0'; 
 
        EXECUTE STATEMENT 'DROP trigger '||:l_name_tbl||'_LOG_AD0'; 
      end 
 
      l_name_tbl = Trim(:rdb$relation_name); 
    end 
  END 
END^


ALTER PROCEDURE SP_GEN_OTC_EL_EDIT_P_NOMER
RETURNS (
    ID INTEGER)
AS
BEGIN
  ID = GEN_ID(GEN_OTC_EL_EDIT_P_NOMER, 1);
END^


ALTER PROCEDURE SP_GEN_SEL_SIM_QR_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
 ID = GEN_ID(GEN_SEL_SIM_QR_ID, 1);
 SUSPEND;
END^


ALTER PROCEDURE SP_SET_LOG_TBL
AS
declare variable L_TBL varchar(2000); 
declare variable L_NAME_TBL varchar(31); 
declare variable L_AI varchar(10000); 
declare variable L_AU varchar(10000); 
declare variable L_AD varchar(10000); 
declare variable L_CL varchar(30); 
declare variable RDB$RELATION_NAME char(31); 
declare variable RDB$FIELD_NAME char(31); 
BEGIN 
 
  l_cl = ASCII_CHAR(13)||ASCII_CHAR(10); 
  l_name_tbl = ''; 
  l_ai = ''; 
  l_au = ''; 
  l_ad = ''; 
 
  /* тук се описват таблиците за които искаме да създадем лог */ 
  l_tbl = 'where f.rdb$relation_name in (''USER'',''SIMPLE'', ''KLI'', ''FIRMI'', ''CFG_PAYMENTS'', ''SKLAD'', ''BARCODE'', ''ME'', ''TIP_REFUSED'', ''IZP_TIP'', ''RAZFASOVKA'', ''RAZ_ELEMENT'', ''RAZ_TIP'')'; 
 
  FOR 
    execute statement 
    'select 
      trim(f.rdb$relation_name), 
      trim(f.rdb$field_name) 
    from rdb$relation_fields f 
    join rdb$relations r on f.rdb$relation_name = r.rdb$relation_name 
    and r.rdb$view_blr is null 
    and (r.rdb$system_flag is null or r.rdb$system_flag = 0) '||:l_tbl||' order by 1, f.rdb$field_position ' 
    INTO :rdb$relation_name, :rdb$field_name 
  DO BEGIN 
    if (:l_name_tbl <> :rdb$relation_name) then begin 
      if (:l_name_tbl <> '') then begin 
        EXECUTE STATEMENT 'CREATE OR ALTER trigger '||:l_name_tbl||'_LOG_AI103 for '||:l_name_tbl||' active after insert position 103 AS begin '||:l_ai||' END'; 
        l_ai = ''; 
 
        EXECUTE STATEMENT 'CREATE OR ALTER trigger '||:l_name_tbl||'_LOG_AU103 for '||:l_name_tbl||' active after update position 103 AS begin '||:l_au||' END'; 
        l_au = ''; 
 
        EXECUTE STATEMENT 'CREATE OR ALTER trigger '||:l_name_tbl||'_LOG_AD103 for '||:l_name_tbl||' active after delete position 103 AS begin '||:l_ad||' END'; 
        l_ad = ''; 
      end 
 
      l_name_tbl = Trim(:rdb$relation_name); 
 
      l_ai = l_ai||l_cl||'  EXECUTE PROCEDURE ADD_LOG('''||:l_name_tbl||''', null, '''||Trim(:rdb$field_name)||''', ''I'', null, CAST(NEW."'||Trim(:rdb$field_name)||'" AS DOM_CHAR_300));'; 
 
      l_au = l_au||l_cl||'  EXECUTE PROCEDURE ADD_LOG('''||:l_name_tbl||''', OLD.ID, '''||Trim(:rdb$field_name)||''', ''U'', CAST(OLD."'||Trim(:rdb$field_name)||'" AS DOM_CHAR_300), CAST(NEW.'||Trim(:rdb$field_name)||' AS DOM_CHAR_300));'; 
 
      l_ad = l_ad||l_cl||'  EXECUTE PROCEDURE ADD_LOG('''||:l_name_tbl||''', OLD.ID, '''||Trim(:rdb$field_name)||''', ''D'', CAST(OLD."'||Trim(:rdb$field_name)||'" AS DOM_CHAR_300), null);'; 
    end 
    else begin 
      l_ai = l_ai||l_cl||'  EXECUTE PROCEDURE ADD_LOG('''||:l_name_tbl||''', null, '''||Trim(:rdb$field_name)||''', ''I'', null, CAST(NEW."'||Trim(:rdb$field_name)||'" AS DOM_CHAR_300));'; 
 
      l_au = l_au||l_cl||'  EXECUTE PROCEDURE ADD_LOG('''||:l_name_tbl||''', OLD.ID, '''||Trim(:rdb$field_name)||''', ''U'', CAST(OLD."'||Trim(:rdb$field_name)||'" AS DOM_CHAR_300), CAST(NEW.'||Trim(:rdb$field_name)||' AS DOM_CHAR_300));'; 
 
      l_ad = l_ad||l_cl||'  EXECUTE PROCEDURE ADD_LOG('''||:l_name_tbl||''', OLD.ID, '''||Trim(:rdb$field_name)||''', ''D'', CAST(OLD."'||Trim(:rdb$field_name)||'" AS DOM_CHAR_300), null);'; 
    end 
  END 
 
  if (:l_ai <> '') then 
    EXECUTE STATEMENT 'CREATE OR ALTER trigger '||:l_name_tbl||'_LOG_AI103 for "'||:l_name_tbl||'" active after insert position 103 AS begin '||:l_ai||l_cl||' END'; 
 
  if (:l_au <> '') then 
    EXECUTE STATEMENT 'CREATE OR ALTER trigger '||:l_name_tbl||'_LOG_AU103 for "'||:l_name_tbl||'" active after update position 103 AS begin '||:l_au||l_cl||' END'; 
 
  if (:l_ad <> '') then 
    EXECUTE STATEMENT 'CREATE OR ALTER trigger '||:l_name_tbl||'_LOG_AD103 for "'||:l_name_tbl||'" active after delete position 103 AS begin '||:l_ad||l_cl||' END'; 
 
END^


ALTER PROCEDURE SP_UPDATE_CRM_KOL (
    P_KLI_ID INTEGER,
    P_PRODUCT_CRM INTEGER,
    P_CRM_KOL INTEGER)
AS
DECLARE VARIABLE L_ID INTEGER; 
DECLARE VARIABLE D TIMESTAMP; 
BEGIN 
    L_ID = NULL; 
    SELECT 
        ID 
    FROM 
        CRM_INFO_LICENZIA 
    WHERE 
        KLI_ID = :P_KLI_ID 
        AND PRODUCT_CRM = :P_PRODUCT_CRM 
    INTO :L_ID; 
 
    IF (L_ID IS NOT NULL) THEN 
        UPDATE CRM_INFO_LICENZIA SET 
        CRM_KOL = :P_CRM_KOL, 
        FL_CHECK = 0 
        WHERE ID = :L_ID; 
    ELSE BEGIN 
        D = CURRENT_DATE; 
        INSERT INTO CRM_INFO_LICENZIA (KLI_ID, PRODUCT_CRM, KOL1, DT1, DAY_REG, FLAG_MONTH, CRM_KOL,L_TYPE,DT_UPDATE, FL_CHECK) 
        VALUES (:P_KLI_ID, :P_PRODUCT_CRM, 0, :D - EXTRACT(DAY FROM :D) + 32 - EXTRACT(DAY FROM :D - EXTRACT(DAY FROM :D) + 32), EXTRACT(DAY FROM :D), 0,:P_CRM_KOL,2,CURRENT_TIMESTAMP,0); 
    END 
END^


ALTER PROCEDURE SPR_DOSIE_KA (
    P_KA_ID INTEGER)
RETURNS (
    R_KA_ID INTEGER,
    R_KA_OLD_ID INTEGER,
    R_OPR_ID DOM_INT,
    R_OPR_DT TIMESTAMP,
    R_OPR_TIP_ID DOM_INT,
    R_OPR_TIP_NAME DOM_CHAR_100,
    R_USER_ID INTEGER,
    R_USER_NAME VARCHAR(100),
    R_OPR_DATE DATE,
    R_OPR_PROD_ID INTEGER)
AS
declare variable L_FIRST_KA_ID integer; 
declare variable L_LAST_KA_ID integer; 
declare variable L_KA_ID integer; 
declare variable L_KA_OLD_ID integer; 
begin 
  ----------------------------------------------------- 
  -- ID на първия шаблон 
  ----------------------------------------------------- 
 
  L_FIRST_KA_ID = NULL; 
 
  WITH RECURSIVE DOSIE_FU (KA_ID, KA_ID_OLD) AS 
  ( 
    SELECT 
      KA_ID, 
      KA_ID_OLD 
    FROM 
      KA_LOG_NODE 
    WHERE 
      KA_ID_OLD = :P_KA_ID OR KA_ID = :P_KA_ID  --1957 
 
    UNION ALL 
 
    SELECT 
      KA_ID, 
      KA_ID_OLD 
    FROM 
      KA_LOG_NODE KLN 
      INNER JOIN DOSIE_FU D ON D.KA_ID_OLD = KLN.KA_ID 
  ) 
 
  SELECT FIRST 1 
    DOSIE_FU.KA_ID_OLD 
  FROM 
    DOSIE_FU 
  ORDER BY 1 
  INTO :L_FIRST_KA_ID; 
 
  R_KA_ID = P_KA_ID; 
  IF (L_FIRST_KA_ID IS NULL) THEN BEGIN 
    L_FIRST_KA_ID = P_KA_ID; 
    R_KA_ID = P_KA_ID; 
  END 
 
  ----------------------------------------------------- 
  -- ID на последния шаблон 
  ----------------------------------------------------- 
 
  L_LAST_KA_ID = NULL; 
 
  WITH RECURSIVE DOSIE_FU (KA_ID, KA_ID_OLD) AS 
  ( 
    SELECT 
      KA_ID, 
      KA_ID_OLD 
    FROM 
      KA_LOG_NODE 
    WHERE 
      KA_ID_OLD = :P_KA_ID OR KA_ID = :P_KA_ID  --1957 
 
    UNION ALL 
 
    SELECT 
      KA_ID, 
      KA_ID_OLD 
    FROM 
      KA_LOG_NODE KLN 
      INNER JOIN DOSIE_FU D ON D.KA_ID = KLN.KA_ID_OLD 
  ) 
 
  SELECT FIRST 1 
    DOSIE_FU.KA_ID 
  FROM 
    DOSIE_FU 
  ORDER BY 1 DESC 
  INTO :L_LAST_KA_ID; 
 
  R_KA_ID = L_LAST_KA_ID; 
 
  ------------------------------------ 
  -- Данни за Първия шаблон 
  ------------------------------------ 
 
  FOR SELECT 
    TBL_KA.ID, 
    NULL, 
    OPR.ID, 
    OPR.DATETIME, 
    OPR.OPR_DATE, 
    OPR.OPR_TIP, 
    IIF (OPR.OPR_TIP IN (65, 64, 66,87), OPR_TIP.NAME || ' на ' || (SELECT KA_LOG_NODE.KA_ID FROM KA_LOG_NODE WHERE KA_LOG_NODE.KA_ID_OLD = TBL_KA.ID), IIF(OPR.OPR_TIP = 71, OPR_TIP.NAME || '  FDRID: ' || COALESCE((TBL_KA.FDRID), ''), OPR_TIP.NAME)) AS NAME, 
    "USER".ID AS USER_ID, 
    "USER".NAME AS USER_NAME, 
    TBL_KA_OPR_LOG.OPR_ID_PROD 
  FROM 
    TBL_KA 
    INNER JOIN TBL_KA_OPR_LOG ON TBL_KA_OPR_LOG.KA_ID = TBL_KA.ID 
    INNER JOIN OPR ON OPR.ID = TBL_KA_OPR_LOG.OPR_ID 
    INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
    INNER JOIN "USER" ON "USER".ID = OPR.USER_ID 
  WHERE 
    TBL_KA.ID = :L_FIRST_KA_ID 
 
  UNION 
 
  SELECT 
    TBL_KA.ID, 
    NULL, 
    OPR.ID, 
    OPR.DATETIME, 
    OPR.OPR_DATE, 
    OPR.OPR_TIP, 
    OPR_TIP.NAME || ' ' || TBL_KA_OPR_NODE.SERV_NUM AS OPR_TIP_NAME, 
    "USER".ID AS USER_ID, 
    "USER".NAME AS USER_NAME, 
    NULL 
  FROM 
    TBL_KA 
    INNER JOIN TBL_KA_OPR_NODE ON TBL_KA_OPR_NODE.KA_ID = TBL_KA.ID 
    INNER JOIN OPR ON OPR.ID = TBL_KA_OPR_NODE.OPR_ID 
    INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
    INNER JOIN "USER" ON "USER".ID = OPR.USER_ID 
  WHERE 
    OPR.OPR_TIP <> 2 AND 
    TBL_KA.ID = :L_FIRST_KA_ID 
 
  UNION 
 
  SELECT 
    TBL_KA.ID, 
    NULL, 
    OPR.ID, 
    OPR.DATETIME, 
    OPR.OPR_DATE, 
    OPR.OPR_TIP, 
    OPR_TIP.NAME AS OPR_TIP_NAME, 
    "USER".ID AS USER_ID, 
    "USER".NAME AS USER_NAME, 
    NULL 
  FROM 
    TBL_KA 
    INNER JOIN KA_SER_NUM ON KA_SER_NUM.KA_ID = TBL_KA.ID 
    INNER JOIN SERIAL_NUM ON SERIAL_NUM.ID = KA_SER_NUM.SER_NUM_ID 
    INNER JOIN PARTIDA_EL ON PARTIDA_EL.ID = SERIAL_NUM.PARTIDA_EL_ID 
    INNER JOIN PARTIDA_NAL ON PARTIDA_NAL.ELEMENT_ID = PARTIDA_EL.ID 
    INNER JOIN IN_EL ON IN_EL.ID = PARTIDA_NAL.IN_EL_ID 
    INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
    INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
    INNER JOIN "USER" ON "USER".ID = OPR.USER_ID 
  WHERE 
    OPR.OPR_TIP = 1 AND 
    TBL_KA.ID = :L_FIRST_KA_ID 
 
  ORDER BY 1 
  INTO :L_KA_ID, :L_KA_OLD_ID, :R_OPR_ID, :R_OPR_DT, :R_OPR_DATE, :R_OPR_TIP_ID, :R_OPR_TIP_NAME, :R_USER_ID, :R_USER_NAME, :R_OPR_PROD_ID 
  DO BEGIN 
    R_KA_ID = L_KA_ID; 
    R_KA_OLD_ID = L_KA_OLD_ID; 
 
    SUSPEND; 
  END 
 
  ------------------------------------ 
  -- Данни за останалите шаблони 
  ------------------------------------ 
 
  FOR WITH RECURSIVE DOSIE_FU (KA_ID, KA_ID_OLD) AS 
  ( 
    SELECT 
      KA_ID, 
      KA_ID_OLD 
    FROM 
      KA_LOG_NODE 
    WHERE 
      KA_ID = :L_LAST_KA_ID 
 
    UNION ALL 
 
    SELECT 
      KA_ID, 
      KA_ID_OLD 
    FROM 
      KA_LOG_NODE KLN 
      INNER JOIN DOSIE_FU D ON D.KA_ID_OLD = KLN.KA_ID 
  ) 
 
  SELECT 
    DOSIE_FU.KA_ID, 
    DOSIE_FU.KA_ID_OLD, 
    OPR.ID, 
    OPR.DATETIME, 
    OPR.OPR_DATE, 
    OPR.OPR_TIP, 
    IIF (OPR.OPR_TIP IN (65, 64, 66,87), OPR_TIP.NAME || ' на ' || (SELECT KA_LOG_NODE.KA_ID FROM KA_LOG_NODE WHERE KA_LOG_NODE.KA_ID_OLD = DOSIE_FU.KA_ID), IIF(OPR.OPR_TIP = 71, OPR_TIP.NAME || '  FDRID: ' || COALESCE((SELECT TBL_KA.FDRID FROM TBL_KA WHERE TBL_KA.ID = DOSIE_FU.KA_ID), ''), OPR_TIP.NAME)) AS NAME, 
    "USER".ID AS USER_ID, 
    "USER".NAME AS USER_NAME, 
    TBL_KA_OPR_LOG.OPR_ID_PROD 
  FROM 
    DOSIE_FU 
    INNER JOIN TBL_KA_OPR_LOG ON TBL_KA_OPR_LOG.KA_ID = DOSIE_FU.KA_ID 
    INNER JOIN OPR ON OPR.ID = TBL_KA_OPR_LOG.OPR_ID 
    INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
    INNER JOIN "USER" ON "USER".ID = OPR.USER_ID 
 
  UNION 
 
  SELECT 
    DOSIE_FU.KA_ID, 
    DOSIE_FU.KA_ID_OLD, 
    OPR.ID, 
    OPR.DATETIME, 
    OPR.OPR_DATE, 
    OPR.OPR_TIP, 
    OPR_TIP.NAME || ' ' || TBL_KA_OPR_NODE.SERV_NUM AS OPR_TIP_NAME, 
    "USER".ID AS USER_ID, 
    "USER".NAME AS USER_NAME, 
    NULL 
  FROM 
    DOSIE_FU 
    INNER JOIN TBL_KA_OPR_NODE ON TBL_KA_OPR_NODE.KA_ID = DOSIE_FU.KA_ID 
    INNER JOIN OPR ON OPR.ID = TBL_KA_OPR_NODE.OPR_ID 
    INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
    INNER JOIN "USER" ON "USER".ID = OPR.USER_ID 
  WHERE 
    OPR.OPR_TIP <> 2 
 
  UNION 
 
  SELECT 
    DOSIE_FU.KA_ID, 
    DOSIE_FU.KA_ID_OLD, 
    OPR.ID, 
    OPR.DATETIME, 
    OPR.OPR_DATE, 
    OPR.OPR_TIP, 
    OPR_TIP.NAME || ' ' || (SELECT OPR_TIP.NAME FROM OPR INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP WHERE  OPR.ID = TBL_KA_OPR_LOG.OPR_ID), 
    "USER".ID AS USER_ID, 
    "USER".NAME AS USER_NAME, 
    TBL_KA_OPR_LOG.OPR_ID_PROD 
  FROM 
    OPR 
    INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
    INNER JOIN TBL_KA_OPR_LOG ON TBL_KA_OPR_LOG.OPR_ID_PROD = OPR.ID 
    INNER JOIN DOSIE_FU ON DOSIE_FU.KA_ID = TBL_KA_OPR_LOG.KA_ID 
    LEFT JOIN "USER" ON "USER".ID = OPR.USER_ID 
 
  ORDER BY 1 
  INTO :L_KA_ID, :L_KA_OLD_ID, :R_OPR_ID, :R_OPR_DT, :R_OPR_DATE, :R_OPR_TIP_ID, :R_OPR_TIP_NAME, :R_USER_ID, :R_USER_NAME, :R_OPR_PROD_ID 
  DO BEGIN 
    R_KA_ID = L_KA_ID; 
    R_KA_OLD_ID = L_KA_OLD_ID; 
 
    SUSPEND; 
  END 
 
end^


ALTER PROCEDURE SPR_GENERATOR_NACHISLIAVANE (
    P_TO_DATE DATE)
RETURNS (
    R_ID INTEGER,
    R_SUMA DOUBLE PRECISION,
    R_KLI_ID INTEGER,
    R_OBEKT_ID INTEGER,
    R_TASK_TIP_ID INTEGER,
    R_KUM_DATE DATE)
AS
DECLARE VARIABLE L_MESEC_BIN INTEGER; 
DECLARE VARIABLE L_MESEC INTEGER; 
DECLARE VARIABLE L_DEN INTEGER; 
DECLARE VARIABLE L_ID INTEGER; 
DECLARE VARIABLE L_KLI_ID INTEGER; 
DECLARE VARIABLE L_OBEKT_ID INTEGER; 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_TASK_ID INTEGER; 
DECLARE VARIABLE L_COUNTER_DATE DATE; 
BEGIN 
  L_COUNTER_DATE = CURRENT_DATE; 
 
  WHILE (L_COUNTER_DATE < P_TO_DATE) DO BEGIN 
 
    L_MESEC_BIN = 1; 
    L_MESEC = EXTRACT(MONTH FROM L_COUNTER_DATE); 
    L_DEN   = EXTRACT(DAY FROM L_COUNTER_DATE); 
 
    WHILE (L_MESEC > 1) DO BEGIN 
      L_MESEC_BIN = L_MESEC_BIN * 2; 
      L_MESEC = L_MESEC - 1; 
    END 
 
    FOR SELECT 
      OPR_TEMPLATE.ID, 
      OPR_TEMPLATE.KLI_ID, 
      OPR_TEMPLATE.OBEKT_ID, 
      OPR_TEMPLATE.SUMA 
    FROM 
      OPR_TEMPLATE 
    WHERE 
      OPR_TEMPLATE.ACTIVEN = 1 
      AND BIN_AND(OPR_TEMPLATE.ACTIVEN_MESECI, :L_MESEC_BIN) = :L_MESEC_BIN 
      AND OPR_TEMPLATE.ACTIVEN_OT_DATA <= :L_COUNTER_DATE 
      AND OPR_TEMPLATE.ACTIVEN_DO_DATA >= :L_COUNTER_DATE 
      AND OPR_TEMPLATE.GENERIRANE_DEN = :L_DEN 
      AND (OPR_TEMPLATE.LAST_GEN_DATE IS NULL 
        OR EXTRACT(YEAR FROM OPR_TEMPLATE.LAST_GEN_DATE) < EXTRACT(YEAR FROM :L_COUNTER_DATE) 
        OR (EXTRACT(YEAR FROM OPR_TEMPLATE.LAST_GEN_DATE) = EXTRACT(YEAR FROM :L_COUNTER_DATE) AND 
            EXTRACT(MONTH FROM OPR_TEMPLATE.LAST_GEN_DATE) < EXTRACT(MONTH FROM :L_COUNTER_DATE))) 
    INTO :L_ID, :L_KLI_ID, :L_OBEKT_ID, L_SUMA 
    DO BEGIN 
      R_ID          = L_ID; 
      R_SUMA        = L_SUMA; 
      R_KLI_ID      = L_KLI_ID; 
      R_OBEKT_ID    = L_OBEKT_ID; 
      R_TASK_TIP_ID = 2; 
      R_KUM_DATE    = L_COUNTER_DATE; 
 
      UPDATE OPR_TEMPLATE SET OPR_TEMPLATE.LAST_GEN_DATE = :L_COUNTER_DATE WHERE OPR_TEMPLATE.ID = :L_ID; 
 
      SUSPEND; 
    END 
 
    L_COUNTER_DATE = L_COUNTER_DATE + 1; 
 
  END 
END^


ALTER PROCEDURE SPR_KONS_KLI (
    P_KLI_ID TYPE OF DOM_KEY)
RETURNS (
    R_IN_KONS TYPE OF DOM_KOL,
    R_IN_SUMA_FR TYPE OF DOM_SUMA,
    R_IN_SUMA_SR TYPE OF DOM_SUMA,
    R_OUT_KONS TYPE OF DOM_KOL,
    R_OUT_SUMA_FR TYPE OF DOM_SUMA,
    R_OUT_SUMA_SR TYPE OF DOM_SUMA,
    R_PROD_KONS TYPE OF DOM_KOL,
    R_PROD_SUMA_FR TYPE OF DOM_SUMA,
    R_PROD_SUMA_SR TYPE OF DOM_SUMA,
    R_SIMPLE_NAME TYPE OF DOM_CHAR_100,
    ME VARCHAR(2),
    ME2 VARCHAR(2),
    R_KOL_RESULT TYPE OF DOM_KOL,
    R_RESULT_SUMA_FR TYPE OF DOM_SUMA,
    R_RESULT_SUMA_SR TYPE OF DOM_SUMA,
    R_CODE TYPE OF DOM_CHAR_50,
    R_CODE2 TYPE OF DOM_CHAR_50,
    R_SIMPLE_ID TYPE OF DOM_KEY)
AS
declare variable L_SIMPLE_ID type of DOM_KEY; 
declare variable L_K_SKLAD type of DOM_KEY; 
BEGIN 
    SELECT 
        SYSTEM.K_SKLAD 
    FROM 
        SYSTEM 
    INTO :L_K_SKLAD; 
 
    FOR SELECT 
        SIMPLE.ID, 
        SIMPLE.NAME, 
        ME.NAME AS ME, 
        ME2.NAME AS ME2, 
        SIMPLE.CODE, 
        SIMPLE.CODE2 
    FROM 
        SIMPLE 
        LEFT JOIN ME ON ME.ID = SIMPLE.ME_ID 
        LEFT JOIN ME ME2 ON ME2.ID = SIMPLE.ME2_ID 
    WHERE 
        EXISTS (SELECT IN_EL.ID FROM IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID AND OPR.SKLAD_ID =(SELECT SYSTEM.K_SKLAD FROM SYSTEM) WHERE IN_EL.SIMPLE_ID = SIMPLE.ID AND OPR.KLI_ID =:P_KLI_ID) 
    INTO :L_SIMPLE_ID, :R_SIMPLE_NAME, :ME, :ME2, :R_CODE, :R_CODE2 
    DO BEGIN 
        SELECT 
            SUM(IN_EL.KOL), 
            SUM(IN_EL.SUMA_FR), 
            SUM(IN_EL.SUMA_SR) 
        FROM 
            IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
        WHERE 
            OPR.SKLAD_ID = :L_K_SKLAD 
            AND OPR.KLI_ID = :P_KLI_ID 
            AND IN_EL.SIMPLE_ID = :L_SIMPLE_ID 
        INTO 
            :R_IN_KONS,:R_IN_SUMA_FR,:R_IN_SUMA_SR; 
 
        SELECT 
            SUM(OUT_EL.KOL), 
            SUM(OUT_EL.SUMA_FR), 
            SUM(OUT_EL.SUMA_SR) 
        FROM 
            OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
        WHERE 
            OPR.SKLAD_ID = :L_K_SKLAD 
            AND OPR.KLI_ID = :P_KLI_ID 
            AND OUT_EL.SIMPLE_ID = :L_SIMPLE_ID 
            AND OPR.OPR_TIP = 48 
        INTO 
            :R_OUT_KONS,:R_OUT_SUMA_FR,:R_OUT_SUMA_SR; 
 
        SELECT 
            SUM(OUT_EL.KOL), 
            SUM(OUT_EL.SUMA_FR), 
            SUM(OUT_EL.SUMA_SR) 
        FROM 
            OUT_EL 
            INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
        WHERE 
            OPR.SKLAD_ID =:L_K_SKLAD AND OPR.KLI_ID =:P_KLI_ID AND OUT_EL.SIMPLE_ID =:L_SIMPLE_ID 
            AND OPR.OPR_TIP = 2 
        INTO 
            :R_PROD_KONS,:R_PROD_SUMA_FR,:R_PROD_SUMA_SR; 
 
        R_KOL_RESULT = ROUND(COALESCE(R_IN_KONS,0.00) - (COALESCE(R_OUT_KONS,0.00) + COALESCE(R_PROD_KONS,0.00)),5); 
        R_RESULT_SUMA_FR = ROUND(COALESCE(R_IN_SUMA_FR,0.00) - (COALESCE(R_OUT_SUMA_FR,0.00) + COALESCE(R_PROD_SUMA_FR,0.00)),2); 
        R_RESULT_SUMA_SR = ROUND(COALESCE(R_IN_SUMA_SR,0.00) - (COALESCE(R_OUT_SUMA_SR,0.00) + COALESCE(R_PROD_SUMA_SR,0.00)),2); 
 
        R_SIMPLE_ID =:L_SIMPLE_ID; 
        SUSPEND; 
    END 
END^


ALTER PROCEDURE SPR_NAL_FOR_DATE_FOR_SIMPLE (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID INTEGER,
    P_DATA DATE)
RETURNS (
    R_KOL DOUBLE PRECISION)
AS
declare variable L_KOL_IN double precision; 
declare variable L_KOL_OUT double precision; 
BEGIN 
/*V.1*/ 
 
    R_KOL = NULL; 
 
    WITH TMP_IN AS ( 
    SELECT 
        IN_EL.ID, 
        OPR.SKLAD_ID, 
        IN_EL.SIMPLE_ID 
    FROM 
        SKLAD INNER JOIN OPR ON SKLAD.ID = OPR.SKLAD_ID AND SKLAD.ID = :P_SKLAD_ID 
        INNER JOIN IN_EL ON OPR.ID = IN_EL.OPR_ID AND IN_EL.SIMPLE_ID = :P_SIMPLE_ID 
    WHERE 
        OPR.OPR_DATE <= :P_DATA) 
 
    SELECT 
        ROUND(SUM(PEN.KOL),5) 
    FROM 
        TMP_IN INNER JOIN PARTIDA_IN_EL_NODE PIN ON PIN.IN_EL_ID = TMP_IN.ID 
        INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PIN.PARTIDA_NODE_ID 
    INTO 
        :L_KOL_IN; 
 
 
    WITH TMP_OUT AS ( 
    SELECT 
        OUT_EL.ID, 
        OPR.SKLAD_ID, 
        OUT_EL.SIMPLE_ID 
    FROM 
        SKLAD INNER JOIN OPR ON SKLAD.ID = OPR.SKLAD_ID AND SKLAD.ID = :P_SKLAD_ID 
        INNER JOIN OUT_EL ON OPR.ID = OUT_EL.OPR_ID AND OUT_EL.SIMPLE_ID = :P_SIMPLE_ID 
    WHERE 
        OPR.OPR_DATE <= :P_DATA) 
 
    SELECT 
        -ROUND(SUM(PEN.KOL),5) 
    FROM 
        TMP_OUT INNER JOIN PARTIDA_OUT_EL_NODE PON ON PON.OUT_EL_ID = TMP_OUT.ID 
    INNER JOIN PARTIDA_EL_NODE PEN ON PEN.ID = PON.PARTIDA_NODE_ID 
    INTO 
        :L_KOL_OUT; 
 
    R_KOL = L_KOL_IN + L_KOL_OUT; 
 
    SUSPEND; 
END^


ALTER PROCEDURE SPR_SP_OTC (
    P_SKLAD_ID INTEGER,
    P_FROM_DATE DATE,
    P_TO_DATE DATE)
RETURNS (
    R_NACH_SALDO DOUBLE PRECISION,
    R_KRAINO_SALDO DOUBLE PRECISION)
AS
DECLARE VARIABLE L_NACH_SUMA_IN DOUBLE PRECISION;
DECLARE VARIABLE L_NACH_SUMA_OUT DOUBLE PRECISION;
DECLARE VARIABLE L_NACH_SALDO DOUBLE PRECISION;
DECLARE VARIABLE L_KRAINA_SUMA_IN DOUBLE PRECISION;
DECLARE VARIABLE L_KRAINA_SUMA_OUT DOUBLE PRECISION;
DECLARE VARIABLE L_KRAINO_SALDO DOUBLE PRECISION;
BEGIN
  /* ИЗЧИСЛЯВАНЕ НА НАЧАЛНО САЛДО */
  /*==============================*/
/*
  -- СУМА НА ОПЕРАЦИИТЕ ЗА ВХОД ДО ПОСОЧЕНИЯ ПЕРИОД
  IF (P_SKLAD_ID = -1) THEN BEGIN
    SELECT 
      COALESCE(SUM(IN_EL.SUMA), 0)
    FROM
      IN_EL INNER JOIN OPR ON IN_EL.OPR_ID = OPR.ID
    WHERE
      OPR.OPR_TIP IN (1, 3, 4, 12, 14) AND        -- 1 - ДОСТАВКА, 3 - ИНВЕНТАРИЗАЦИЯ, 9 - ПРЕХВЪРЛЯНЕ
      OPR.DATETIME < :P_FROM_DATE
    INTO :L_NACH_SUMA_IN;
  END
  ELSE BEGIN
    SELECT 
      COALESCE(SUM(IN_EL.SUMA), 0)
    FROM
      IN_EL INNER JOIN OPR ON IN_EL.OPR_ID = OPR.ID
    WHERE
      OPR.OPR_TIP IN (1, 3, 4, 12, 14) AND        -- 1 - ДОСТАВКА, 3 - ИНВЕНТАРИЗАЦИЯ, 9 - ПРЕХВЪРЛЯНЕ
      OPR.SKLAD_ID = :P_SKLAD_ID AND
      OPR.DATETIME < :P_FROM_DATE
    INTO :L_NACH_SUMA_IN;
  END

  -- СУМА НА ОПЕРАЦИИТЕ ЗА ИЗХОД ДО ПОСОЧЕНИЯ ПЕРИОД
  IF (P_SKLAD_ID = -1) THEN BEGIN
    SELECT
      COALESCE(SUM(OUT_EL.SUMA_FR), 0)
    FROM
      OUT_EL INNER JOIN OPR ON OUT_EL.OPR_ID = OPR.ID
    WHERE
      OPR.OPR_TIP IN (2, 9, 11) AND      -- 2 - ПРОДАЖБА, 9 - ПРЕХВЪРЛЯНЕ, 11 - ИЗПИСВАНЕ
      OPR.DATETIME < :P_FROM_DATE
    INTO :L_NACH_SUMA_OUT;
  END
  ELSE BEGIN
    SELECT
      COALESCE(SUM(OUT_EL.SUMA_FR), 0)
    FROM
      OUT_EL INNER JOIN OPR ON OUT_EL.OPR_ID = OPR.ID
    WHERE
      OPR.OPR_TIP IN (2, 9, 11) AND      -- 2 - ПРОДАЖБА, 9 - ПРЕХВЪРЛЯНЕ, 11 - ИЗПИСВАНЕ
      OPR.SKLAD_ID = :P_SKLAD_ID AND
      OPR.DATETIME < :P_FROM_DATE
    INTO :L_NACH_SUMA_OUT;
  END

  --НАЧАЛНО САЛДО
  L_NACH_SALDO = ROUNDD(L_NACH_SUMA_IN - L_NACH_SUMA_OUT);

  -- ИЗЧИСЛЯВАНЕ НА КРАЙНО САЛДО
  --=============================

  -- СУМА НА ОПЕРАЦИИТЕ ЗА ВХОД ЗА ПОСОЧЕНИЯ ПЕРИОД
  IF (P_SKLAD_ID = -1) THEN BEGIN
    SELECT 
      COALESCE(SUM(IN_EL.SUMA), 0)
    FROM
      IN_EL INNER JOIN OPR ON IN_EL.OPR_ID = OPR.ID
    WHERE        
      OPR.OPR_TIP IN (1, 3, 4, 12, 14) AND        -- 1 - ДОСТАВКА, 3 - ИНВЕНТАРИЗАЦИЯ, 9 - ПРЕХВЪРЛЯНЕ
      OPR.DATETIME >= :P_FROM_DATE AND
      OPR.DATETIME <= :P_TO_DATE
    INTO :L_KRAINA_SUMA_IN;
  END
  ELSE BEGIN
    SELECT 
      COALESCE(SUM(IN_EL.SUMA), 0)
    FROM
      IN_EL INNER JOIN OPR ON IN_EL.OPR_ID = OPR.ID
    WHERE        
      OPR.OPR_TIP IN (1, 3, 4, 12, 14) AND        -- 1 - ДОСТАВКА, 3 - ИНВЕНТАРИЗАЦИЯ, 9 - ПРЕХВЪРЛЯНЕ
      OPR.SKLAD_ID = :P_SKLAD_ID AND
      OPR.DATETIME >= :P_FROM_DATE AND
      OPR.DATETIME <= :P_TO_DATE
    INTO :L_KRAINA_SUMA_IN;
  END

  -- СУМА НА ОПЕРАЦИИТЕ ЗА ИЗХОД ЗА ПОСОЧЕНИЯ ПЕРИОД
  IF (P_SKLAD_ID = -1) THEN BEGIN
    SELECT
      COALESCE(SUM(OUT_EL.SUMA_FR), 0)
    FROM
      OUT_EL INNER JOIN OPR ON OUT_EL.OPR_ID = OPR.ID
    WHERE
      OPR.OPR_TIP IN (2, 9, 11) AND      -- 2 - ПРОДАЖБА, 9 - ПРЕХВЪРЛЯНЕ, 11 - ИЗПИСВАНЕ
      OPR.DATETIME >= :P_FROM_DATE AND
      OPR.DATETIME < :P_TO_DATE
    INTO :L_KRAINA_SUMA_OUT;
  END
  ELSE BEGIN
    SELECT
      COALESCE(SUM(OUT_EL.SUMA_FR), 0)
    FROM
      OUT_EL INNER JOIN OPR ON OUT_EL.OPR_ID = OPR.ID
    WHERE
      OPR.OPR_TIP IN (2, 9, 11) AND      -- 2 - ПРОДАЖБА, 9 - ПРЕХВЪРЛЯНЕ, 11 - ИЗПИСВАНЕ
      OPR.SKLAD_ID = :P_SKLAD_ID AND
      OPR.DATETIME >= :P_FROM_DATE AND
      OPR.DATETIME < :P_TO_DATE
    INTO :L_KRAINA_SUMA_OUT;
  END

  -- КРАЙНО САЛДО
  L_KRAINO_SALDO = ROUNDD(ROUNDD(L_NACH_SALDO + L_KRAINA_SUMA_IN) - L_KRAINA_SUMA_OUT);

  -- РЕЗУЛТАТ
  R_NACH_SALDO = L_NACH_SALDO;
  R_KRAINO_SALDO = L_KRAINO_SALDO;*/
END^


ALTER PROCEDURE STOCK_PARICHEN_OTC (
    P_SKLAD_ID INTEGER,
    P_FROM_DATE DATE,
    P_TO_DATE DATE)
RETURNS (
    R_NACH_SALDO DOUBLE PRECISION,
    R_KRAINO_SALDO DOUBLE PRECISION)
AS
DECLARE VARIABLE L_NACH_SUMA_IN DOUBLE PRECISION; 
DECLARE VARIABLE L_NACH_SUMA_OUT DOUBLE PRECISION; 
DECLARE VARIABLE L_NACH_SALDO DOUBLE PRECISION; 
DECLARE VARIABLE L_KRAINA_SUMA_IN DOUBLE PRECISION; 
DECLARE VARIABLE L_KRAINA_SUMA_OUT DOUBLE PRECISION; 
DECLARE VARIABLE L_KRAINO_SALDO DOUBLE PRECISION; 
BEGIN 
    -- СУМА НА ОПЕРАЦИИТЕ ЗА ВХОД ДО ПОСОЧЕНИЯ ПЕРИОД 
    SELECT 
        COALESCE(SUM(IN_EL.SUMA_FR), 0) 
    FROM 
        IN_EL INNER JOIN OPR ON IN_EL.OPR_ID = OPR.ID 
    WHERE 
        OPR.SKLAD_ID = :P_SKLAD_ID 
        AND OPR.OPR_DATE < :P_FROM_DATE 
        AND OPR.OPR_TIP <> 33 
        AND OPR.OPR_TIP <> 77 
    INTO 
        :L_NACH_SUMA_IN; 
 
    -- СУМА НА ОПЕРАЦИИТЕ ЗА ИЗХОД ДО ПОСОЧЕНИЯ ПЕРИОД 
    SELECT 
        COALESCE(SUM(OUT_EL.SUMA_FR), 0) 
    FROM 
        OUT_EL INNER JOIN OPR ON OUT_EL.OPR_ID = OPR.ID 
    WHERE 
        OPR.SKLAD_ID = :P_SKLAD_ID 
        AND OPR.OPR_DATE < :P_FROM_DATE 
        AND ((OPR.OPR_TIP <> 32) OR (OPR.OPR_TIP = 32 AND (NOT EXISTS(SELECT OTCS_OPR_NODE.ID FROM OTCS_OPR_NODE WHERE OTCS_OPR_NODE.OPR_ID = OPR.ID)))) 
        AND OPR.OPR_TIP <> 76 
    INTO 
        :L_NACH_SUMA_OUT; 
 
    -- НАЧАЛНО САЛДО 
    L_NACH_SALDO = ROUND(L_NACH_SUMA_IN - L_NACH_SUMA_OUT,2); 
 
    -- ИЗЧИСЛЯВАНЕ НА КРАЙНО САЛДО 
    --============================= 
 
    -- СУМА НА ОПЕРАЦИИТЕ ЗА ВХОД ЗА ПОСОЧЕНИЯ ПЕРИОД 
    SELECT 
        COALESCE(SUM(IN_EL.SUMA_FR), 0) 
    FROM 
        IN_EL INNER JOIN OPR ON IN_EL.OPR_ID = OPR.ID 
    WHERE 
        OPR.SKLAD_ID = :P_SKLAD_ID AND 
        OPR.OPR_DATE BETWEEN :P_FROM_DATE AND :P_TO_DATE 
        AND OPR.OPR_TIP <> 33 
        AND OPR.OPR_TIP <> 77 
    INTO 
        :L_KRAINA_SUMA_IN; 
 
    --СУМА НА ОПЕРАЦИИТЕ ЗА ИЗХОД ЗА ПОСОЧЕНИЯ ПЕРИОД 
    SELECT 
        COALESCE(SUM(OUT_EL.SUMA_FR), 0) 
    FROM 
        OUT_EL INNER JOIN OPR ON OUT_EL.OPR_ID = OPR.ID 
    WHERE 
        OPR.SKLAD_ID = :P_SKLAD_ID 
        AND OPR.OPR_DATE BETWEEN :P_FROM_DATE AND :P_TO_DATE 
        AND ((OPR.OPR_TIP) <> 32 OR (OPR.OPR_TIP = 32 AND (NOT EXISTS(SELECT OTCS_OPR_NODE.ID FROM OTCS_OPR_NODE WHERE OTCS_OPR_NODE.OPR_ID = OPR.ID)))) 
        AND OPR.OPR_TIP <> 76 
    INTO 
        :L_KRAINA_SUMA_OUT; 
 
    --КРАЙНО САЛДО 
    L_KRAINO_SALDO = ROUND(ROUND(L_NACH_SALDO + L_KRAINA_SUMA_IN,2) - L_KRAINA_SUMA_OUT,2); 
 
    --РЕЗУЛТАТ 
    R_NACH_SALDO = L_NACH_SALDO; 
    R_KRAINO_SALDO = L_KRAINO_SALDO; 
END^


ALTER PROCEDURE TMP_KASA_TO_REAL_KASA (
    P_USER_ID INTEGER)
AS
declare variable L_ID type of DOM_KEY; 
declare variable L_OPR_ID type of DOM_KEY; 
declare variable L_PARI_IO_ID type of DOM_KEY; 
declare variable L_KASA_ID type of DOM_KEY; 
declare variable L_OBEKT_ID type of DOM_KEY; 
declare variable L_SUMA type of DOM_SUMA; 
declare variable L_VALUTA_ID type of DOM_KEY; 
declare variable L_KURS type of DOM_CENA; 
declare variable L_TIP type of DOM_SMAL_INT; 
declare variable L_FAK_OPR_ID type of DOM_KEY; 
declare variable L_NODE_ID type of DOM_KEY; 
BEGIN 
/* V.1 */ 
    IF (P_USER_ID = 0) THEN BEGIN 
        -- ГЛОБАЛЕН ОТЧЕТ, ПРЕХВЪРЛЯ ВСИЧКИ КАСИ 
        FOR SELECT 
            PARI_TMP.ID, 
            PARI_TMP.OPR_ID, 
            PARI_TMP.PARI_IO_ID, 
            PARI_TMP.KASA_ID, 
            PARI_TMP.OBEKT_ID, 
            PARI_TMP.SUMA, 
            PARI_TMP.VALUTA_ID, 
            PARI_TMP.KURS, 
            PARI_TMP.TIP, 
            PARI_TMP.FAK_OPR_ID 
        FROM 
            PARI_TMP 
        WHERE 
            PARI_TMP.IS_USED = 0 
        INTO 
            :L_ID, :L_OPR_ID, :L_PARI_IO_ID, :L_KASA_ID, :L_OBEKT_ID, :L_SUMA, :L_VALUTA_ID, :L_KURS, :L_TIP, :L_FAK_OPR_ID 
        DO BEGIN 
            INSERT INTO PARI(ID, OPR_ID, PARI_IO_ID, KASA_ID, OBEKT_ID, SUMA, VALUTA_ID, KURS, TIP, PROWERKA, ALLOW_FAK) 
            VALUES (:L_ID, :L_OPR_ID, :L_PARI_IO_ID, :L_KASA_ID, :L_OBEKT_ID, :L_SUMA, :L_VALUTA_ID, :L_KURS, :L_TIP, 7, 0); 
 
            INSERT INTO PARI_SKLOPR_NODE (OPR_PARI_ID, OPR_ID, SUMA, KASA_ID) 
            VALUES (:L_OPR_ID, :L_OPR_ID, :L_SUMA, :L_KASA_ID) 
            RETURNING ID INTO :L_NODE_ID; 
 
            IF (L_FAK_OPR_ID IS NOT NULL) THEN BEGIN 
 
                SELECT 
                    FAK.TIP 
                FROM 
                    FAK 
                WHERE 
                    FAK.OPR_ID = :L_FAK_OPR_ID 
                INTO 
                    :L_ID; 
 
                IF (L_ID <> 5) THEN 
                    INSERT INTO PARI_FAK_NODE(FAK_ID, NODE_ID, SUMA) 
                    SELECT 
                        FAK.ID, 
                        :L_NODE_ID, 
                        :L_SUMA 
                    FROM 
                        FAK 
                    WHERE 
                        FAK.OPR_ID = :L_FAK_OPR_ID; 
            END 
        END 
    END 
    ELSE BEGIN 
        -- ПЕРСОНАЛЕН ОТЧЕТ 
        FOR SELECT 
            PARI_TMP.ID, 
            PARI_TMP.OPR_ID, 
            PARI_TMP.PARI_IO_ID, 
            PARI_TMP.KASA_ID, 
            PARI_TMP.OBEKT_ID, 
            PARI_TMP.SUMA, 
            PARI_TMP.VALUTA_ID, 
            PARI_TMP.KURS, 
            PARI_TMP.TIP, 
            PARI_TMP.FAK_OPR_ID 
        FROM 
            PARI_TMP INNER JOIN OPR ON PARI_TMP.OPR_ID = OPR.ID 
        WHERE 
            OPR.USER_ID = :P_USER_ID AND PARI_TMP.IS_USED = 0 
        INTO 
            :L_ID, :L_OPR_ID, :L_PARI_IO_ID, :L_KASA_ID, :L_OBEKT_ID, :L_SUMA, :L_VALUTA_ID, :L_KURS, :L_TIP, :L_FAK_OPR_ID 
        DO BEGIN 
            INSERT INTO PARI(ID, OPR_ID, PARI_IO_ID, KASA_ID, OBEKT_ID, SUMA, VALUTA_ID, KURS, TIP, PROWERKA, ALLOW_FAK) 
            VALUES (:L_ID, :L_OPR_ID, :L_PARI_IO_ID, :L_KASA_ID, :L_OBEKT_ID, :L_SUMA, :L_VALUTA_ID, :L_KURS, :L_TIP, 7, 0); 
 
            INSERT INTO PARI_SKLOPR_NODE (OPR_PARI_ID, OPR_ID, SUMA, KASA_ID) 
            VALUES (:L_OPR_ID, :L_OPR_ID, :L_SUMA, :L_KASA_ID) 
            RETURNING ID INTO :L_NODE_ID; 
 
            IF (L_FAK_OPR_ID IS NOT NULL) THEN BEGIN 
                SELECT 
                    FAK.TIP 
                FROM 
                    FAK 
                WHERE 
                    FAK.OPR_ID = :L_FAK_OPR_ID 
                INTO 
                    :L_ID; 
 
                IF (L_ID <> 5) THEN 
                    INSERT INTO PARI_FAK_NODE(FAK_ID, NODE_ID, SUMA) 
                    SELECT 
                        FAK.ID, 
                        :L_NODE_ID, 
                        :L_SUMA 
                    FROM 
                        FAK 
                    WHERE 
                        FAK.OPR_ID = :L_FAK_OPR_ID; 
            END 
        END 
    END 
END^


ALTER PROCEDURE UPDATE_AMBALAJ (
    P_KLI_ID INTEGER,
    P_SIMPLE_ID INTEGER,
    P_KOL DOUBLE PRECISION)
AS
 DECLARE VARIABLE L_KOL DOUBLE PRECISION; BEGIN   SELECT     ambalaj.kol   FROM ambalaj   WHERE     AMBALAJ.KLI_ID = :p_kli_id AND     AMBALAJ.SIMPLE_ID = :p_simple_id   INTO :l_kol;   UPDATE AMBALAJ SET     AMBALAJ.KOL = ROUND5(:l_kol - :p_kol)   WHERE     AMBALAJ.KLI_ID = :p_kli_id AND     AMBALAJ.SIMPLE_ID = :p_simple_id; END^


ALTER PROCEDURE UPDATE_CENA_INFO (
    P_CL_OPR_ID INTEGER,
    P_KLI_ID INTEGER,
    P_SKLAD_ID TYPE OF DOM_INT)
RETURNS (
    R_RESULT INTEGER)
AS
declare variable L_CL_OPR_ID integer; 
declare variable L_COUNT_KLI integer; 
BEGIN 
  L_CL_OPR_ID = NULL; 
 
  -- TURSI DALI PODADENATA CENOVA LISTA E KONKRETNATA ZA TOZI KLIENT 
  -- 
  SELECT 
    CENOVA_LISTA_KLI.OPR_ID 
  FROM 
    CENOVA_LISTA_KLI INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_KLI.OPR_ID 
  WHERE 
    CENOVA_LISTA_KLI.KLI_ID = :P_KLI_ID AND 
    CENOVA_LISTA_KLI.OPR_ID = :P_CL_OPR_ID AND 
    CENOVA_LISTA.ACTIVNA = 1 AND 
    NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = :P_CL_OPR_ID) 
    AND (NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.OPR_ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) OR 
    EXISTS (SELECT CENOVA_LISTA_SKLAD.OPR_ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID =:P_SKLAD_ID)) 
  INTO :L_CL_OPR_ID; 
 
  IF (L_CL_OPR_ID IS NULL) THEN 
  BEGIN 
    -- V PODADENATA CENOVA LISTA NE U4ASTVA PODADENIQ KLIENT 
    -- TURSI CENOVA LISTA S NAI VISOK PRIORITET, V KOQTO DA U4ASTVA PODADENIQ KLIENT 
    -- 
    SELECT FIRST 1 
        CENOVA_LISTA_KLI.OPR_ID 
    FROM 
        CENOVA_LISTA_KLI 
        INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_KLI.OPR_ID 
    WHERE 
        CENOVA_LISTA_KLI.KLI_ID = :P_KLI_ID AND 
        CENOVA_LISTA.ACTIVNA = 1 AND 
        NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID) 
        AND (NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.OPR_ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) OR 
        EXISTS (SELECT CENOVA_LISTA_SKLAD.OPR_ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID =:P_SKLAD_ID)) 
    ORDER BY CENOVA_LISTA.PRIORITET DESC 
 
    INTO :L_CL_OPR_ID; 
 
    IF (L_CL_OPR_ID IS NULL) THEN 
      R_RESULT = 0;     -- TRQBVA DA SE SAZDADE NOVA CENOVA LISTA 
  END 
 
  IF (L_CL_OPR_ID IS NOT NULL) THEN 
  BEGIN 
    -- PROVERQVA DALI V POLU4ENATA CENOVA LISTA IMA I DRUGI KLIENTI 
    -- AKO IMA DRUGI KLIENTI TRQBVA DA SE SAZDADE NOVA CENOVA LISTA SAMO ZA TOZI KLIENT 
    SELECT 
        COUNT(CENOVA_LISTA_KLI.KLI_ID) 
    FROM 
        CENOVA_LISTA_KLI INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_KLI.OPR_ID 
    WHERE 
        CENOVA_LISTA_KLI.OPR_ID = :L_CL_OPR_ID 
        AND CENOVA_LISTA.ACTIVNA = 1 
        AND (NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.OPR_ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) OR 
        EXISTS (SELECT CENOVA_LISTA_SKLAD.OPR_ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID =:P_SKLAD_ID)) 
    INTO :L_COUNT_KLI; 
 
    IF (L_COUNT_KLI > 1) THEN 
      R_RESULT = 0;             -- TRQBVA DA SE SAZDADE NOVA CENOVA LISTA 
    ELSE 
      R_RESULT = L_CL_OPR_ID;   -- CENATA 6TE SE ZAPISVA V TAZI CENOVA LISTA 
 
    IF (R_RESULT = 0) THEN BEGIN 
      SELECT FIRST 1 
        CENOVA_LISTA_KLI.OPR_ID 
      FROM 
        CENOVA_LISTA_KLI 
        INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_KLI.OPR_ID 
      WHERE 
        CENOVA_LISTA_KLI.KLI_ID = :P_KLI_ID AND 
        CENOVA_LISTA.ACTIVNA = 1 AND 
        NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = CENOVA_LISTA.OPR_ID) 
        AND (NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.OPR_ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) OR 
        EXISTS (SELECT CENOVA_LISTA_SKLAD.OPR_ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID =:P_SKLAD_ID)) 
      ORDER BY CENOVA_LISTA.PRIORITET DESC 
 
      INTO :L_CL_OPR_ID; 
 
      IF (L_CL_OPR_ID IS NULL) THEN 
        R_RESULT = 0;     -- TRQBVA DA SE SAZDADE NOVA CENOVA LISTA 
 
      IF (L_CL_OPR_ID IS NOT NULL) THEN 
      BEGIN 
        SELECT 
          COUNT(CENOVA_LISTA_KLI.KLI_ID) 
        FROM 
          CENOVA_LISTA_KLI INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_KLI.OPR_ID 
        WHERE 
          CENOVA_LISTA.ACTIVNA = 1 AND 
          CENOVA_LISTA_KLI.OPR_ID = :L_CL_OPR_ID 
          AND (NOT EXISTS (SELECT CENOVA_LISTA_SKLAD.OPR_ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID) OR 
          EXISTS (SELECT CENOVA_LISTA_SKLAD.OPR_ID FROM CENOVA_LISTA_SKLAD WHERE CENOVA_LISTA_SKLAD.OPR_ID = CENOVA_LISTA.OPR_ID AND CENOVA_LISTA_SKLAD.SKLAD_ID =:P_SKLAD_ID)) 
        INTO :L_COUNT_KLI; 
 
        IF (L_COUNT_KLI > 1) THEN 
          R_RESULT = 0;             -- TRQBVA DA SE SAZDADE NOVA CENOVA LISTA 
        ELSE 
          R_RESULT = L_CL_OPR_ID;   -- CENATA 6TE SE ZAPISVA V TAZI CENOVA LISTA 
      END 
    END 
  END 
END^


ALTER PROCEDURE UPDATE_CENI_AFTER_DOST (
    P_SIMPLE_ID INTEGER,
    P_SKLAD_ID INTEGER,
    P_CENA_DOST DOUBLE PRECISION,
    P_CENA_PROD DOUBLE PRECISION,
    P_CENA_EDRO DOUBLE PRECISION,
    P_OPR_ID INTEGER)
AS
declare variable L_SIMPLE_ID type of DOM_KEY; 
BEGIN 
/* 
СЛЕД ДОСТАВКА ПРОМЕНЯ ПРОДАЖНАТА ЦЕНА И ЦЕНА НА ЕДРО ЗА ДОСТАВЕНИЯ ПРОДУКТ, 
КАКТО И ПОСЛЕДНА ДОСТАВНА ЦЕНА В ТАБЛИЦА NAL 
 
ВХ. ПАРАМЕТРИ 
P_SIMPLE_ID - ЗА КОЙ ДОСТАВЕН ПРОДУКТ ТРЯБВА ДА СЕ ПРАВЯТ ПРОМЕНИТЕ 
P_SKLAD_ID - В КОЙ СКЛАД Е НАПРАВЕНА ДОСТАВКАТА. ПОЛЗВА СЕ ЗА ДА СЕ ОПРЕДЕЛИ 
КОЙ ТОЧНО ЗАПИС В NAL ТРЯБВА ДА СЕ ПРОМЕНИ 
P_CENA_DOST - ТОВА Е ПОСЛЕДНАТА ДОСТАВНА ЦЕНА 
P_CENA_PROD - ТОВА Е НОВАТА ПРОДАЖНА ЦЕНА ЗА ТОЗИ ПРОДУКТ 
P_CENA_EDRO - ТОВА Е НОВАТА ПРОДАЖНА ЦЕНА НА ЕДРО ЗА ТОЗИ ПРОДУКТ 
*/ 
 
    /* 
    ПРОМЕНЯ ПОСЛЕДНАТА ДОСТАВНА ЦЕНА ЗА ТОЗИ ПРОДУКТ В ТАБЛИЦА NAL ЗА 
    СЪОТВЕТНИЯ СКЛАД. 
    */ 
    UPDATE NAL SET 
        NAL.LAST_CENA = :P_CENA_DOST, 
        NAL.DATETIME_LASTCENA = CURRENT_TIMESTAMP, 
        NAL.LAST_DOST_OPR_ID = :P_OPR_ID 
    WHERE 
        NAL.SKLAD_ID = :P_SKLAD_ID 
        AND NAL.SIMPLE_ID =  :P_SIMPLE_ID; 
 
    /*ПРОМЕНЯ СЕ ПРОДАЖНАТА ЦЕНА И ЦЕНА НА ЕДРО ЗА ТОЗИ ПРОДУКТ*/ 
    UPDATE SIMPLE SET 
        SIMPLE.CENA_PROD = :P_CENA_PROD, 
        SIMPLE.CENA_EDRO = :P_CENA_EDRO 
    WHERE 
        SIMPLE.ID = :P_SIMPLE_ID; 
 
    FOR SELECT 
        SIMPLE_CALC.SIMPLE_ID 
    FROM 
        SIMPLE_CALC 
    WHERE 
        SIMPLE_CALC.CHILD_SIMPLE_ID = :P_SIMPLE_ID 
        AND SIMPLE_CALC.SIMPLE_ID > 0 
    INTO 
        :L_SIMPLE_ID 
    DO 
        EXECUTE PROCEDURE CHANGE_RECEPIE_LAST_CENA(:L_SIMPLE_ID,0,:P_SKLAD_ID, :P_OPR_ID) 
        RETURNING_VALUES :L_SIMPLE_ID; 
END^


ALTER PROCEDURE UPDATE_COMMENT_OPR_HEADERS (
    I_OPR_ID INTEGER,
    NEW_HEADER VARCHAR(50))
AS
DECLARE VARIABLE L_OPR_ID INTEGER; 
DECLARE VARIABLE L_HEADER VARCHAR(50); 
DECLARE VARIABLE L_COMMENT_ID INTEGER; 
begin 
  /* Procedure Text */ 
  FOR 
    SELECT COMMENT_OPR_NODE.OPR_ID, COMMENTS.HEADER, COMMENTS.ID 
    FROM COMMENTS 
        INNER JOIN COMMENT_OPR_NODE ON (COMMENTS.ID = COMMENT_OPR_NODE.COMMENT_ID) 
    WHERE (COMMENT_OPR_NODE.OPR_ID = :I_OPR_ID) AND 
          (COMMENTS.HEADER = '<Oперация-редакция>') 
    INTO     
        :L_OPR_ID, :L_HEADER, :L_COMMENT_ID 
  DO 
    UPDATE COMMENTS 
    SET 
        COMMENTS.HEADER = :NEW_HEADER 
    WHERE 
        COMMENTS.ID = :L_COMMENT_ID; 
 
end^


ALTER PROCEDURE UPDATE_DVSK_PARTIDA_EL (
    P_KLI_ID_PROIZV TYPE OF DOM_KEY,
    P_TYPE_DOC TYPE OF DOM_KEY,
    P_NOM_DOK TYPE OF DOM_CHAR_20,
    P_BG_NOMER TYPE OF DOM_CHAR_15,
    P_DATE_PROIZV TYPE OF DOM_DATE,
    P_SROK TYPE OF DOM_DATE,
    P_PARTIDA_EL TYPE OF DOM_KEY,
    P_SN TYPE OF DOM_CHAR_30,
    P_PROIZHOD INTEGER)
AS
BEGIN 
    UPDATE OR INSERT INTO DVSK_EL(PARTIDA_EL_ID, KLI_ID_PROIZV,TYPE_DOK,NOM_DOK,BG_NOMER,DATE_PROIZV, PROIZHOD) 
    VALUES (:P_PARTIDA_EL,:p_KLI_ID_PROIZV,:P_TYPE_DOC,:P_NOM_DOK,:P_BG_NOMER,:P_DATE_PROIZV, :P_PROIZHOD) 
    MATCHING(DVSK_EL.PARTIDA_EL_ID); 
 
    UPDATE PARTIDA_EL SET 
        PARTIDA_EL.SROK =:P_SROK 
    WHERE 
        PARTIDA_EL.ID =:P_PARTIDA_EL; 
 
 
    UPDATE OR INSERT INTO SERIAL_NUM(PARTIDA_EL_ID, SN) 
    VALUES (:P_PARTIDA_EL,:P_SN) MATCHING(SERIAL_NUM.PARTIDA_EL_ID); 
 
END^


ALTER PROCEDURE UPDATE_FAK_COMMENT (
    OPR_ID INTEGER,
    STR VARCHAR(100))
RETURNS (
    R_TEXT VARCHAR(100),
    R_OPR_ID INTEGER)
AS
DECLARE VARIABLE TEXT VARCHAR(100); 
DECLARE VARIABLE LENG INTEGER; 
DECLARE VARIABLE L INTEGER; 
BEGIN 
    FOR 
    SELECT 
        COMMENT.OPR_ID, 
        COMMENT.TEXT 
    FROM 
        COMMENT 
    WHERE 
        COMMENT.OPR_ID =:OPR_ID 
        INTO :R_OPR_ID,:TEXT 
    DO 
    BEGIN 
    if (TEXT LIKE ('Продажба:%')) then 
        LENG = CHAR_LENGTH('Продажба:') + 1; 
    else 
    if (text like ('Продажби:%')) then leng = CHAR_LENGTH('Продажби:') + 1; 
    ELSE LENG = 1; 
 
    l = CHAR_LENGTH(TEXT); 
 
    if (:STR = '') then 
        R_TEXT = TEXT; 
    else 
        R_TEXT = :str || ':' || SUBSTRING(TEXT from LENG for l); 
    SUSPEND; 
    END 
END^


ALTER PROCEDURE UPDATE_FAK_EL_CENA_FIX (
    P_TYPE_TOST INTEGER)
AS
DECLARE VARIABLE L_FAK_EL_ID INTEGER; 
DECLARE VARIABLE L_FAK_EL_TOST DOUBLE PRECISION; 
DECLARE VARIABLE L_FAK_EL_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_DDS DOUBLE PRECISION; 
DECLARE VARIABLE L_FAK_EL_CENA_FIX DOUBLE PRECISION; 
DECLARE VARIABLE L_FAK_EL_CENA_BRUTO DOUBLE PRECISION; 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_FAK_EL_CENA DOUBLE PRECISION; 
BEGIN 
    FOR 
    SELECT 
        FAK_EL.ID, 
        FAK_EL.TOST, 
        FAK_EL.SUMA_TOTAL, 
        FAK_EL.DDS, 
        FAK_EL.KOL 
    FROM 
        FAK_EL 
    WHERE 
        (FAK_EL.TOST <> 0.00 AND FAK_EL.CENA_FIX = 0) 
    INTO :L_FAK_EL_ID, :L_FAK_EL_TOST, :L_FAK_EL_SUMA, :L_DDS, :L_KOL 
 
    DO 
    BEGIN 
        L_FAK_EL_CENA_BRUTO = round5(L_FAK_EL_SUMA/L_KOL); 
        L_FAK_EL_CENA = L_FAK_EL_CENA_BRUTO/(1 + L_DDS/100); 
 
        IF (P_TYPE_TOST = 0) THEN 
        BEGIN 
            L_FAK_EL_CENA_FIX = L_FAK_EL_CENA_BRUTO + L_FAK_EL_TOST; 
 
            UPDATE 
                FAK_EL SET FAK_EL.CENA_FIX =:L_FAK_EL_CENA_FIX, 
                fak_el.CENA =:L_FAK_EL_CENA 
            WHERE 
                FAK_EL.ID =:L_FAK_EL_ID; 
 
        END 
        IF (P_TYPE_TOST = 1) THEN 
        BEGIN 
            L_FAK_EL_CENA_FIX =ROUND5(L_FAK_EL_CENA + L_FAK_EL_TOST); 
 
            UPDATE 
                FAK_EL SET 
                    FAK_EL.CENA_FIX =:L_FAK_EL_CENA_FIX, 
                    fak_el.CENA =:L_FAK_EL_CENA 
            WHERE 
                FAK_EL.ID =:L_FAK_EL_ID; 
        END 
 
 
    END 
END^


ALTER PROCEDURE UPDATE_KLI_SKLAD_NODE (
    P_SKLAD_ID VARCHAR(1000),
    KLI_ID INTEGER)
AS
declare variable l_sklad_id smallint; 
BEGIN  
 delete FROM kli_sklad_node 
 WHERE KLI_SKLAD_NODE.kli_id =:KLI_ID; 
 
FOR EXECUTE STATEMENT 
 'SELECT SKLAD.ID 
  FROM sklad 
  WHERE SKLAD.ID IN ('||:P_SKLAD_ID||')' 
 INTO :L_SKLAD_ID 
DO 
 BEGIN 
 insert into kli_SKLAD_NODE (kli_id,SKLAD_ID) 
 values (:kli_id,:L_SKLAD_ID); 
 end  
end^


ALTER PROCEDURE UPDATE_MULTI_PROD_SUMI (
    P_OPRS VARCHAR(1000))
AS
DECLARE VARIABLE L_OPR_ID INTEGER; 
BEGIN 
    FOR EXECUTE STATEMENT 
       'SELECT 
            OPR.ID 
        FROM OPR 
        WHERE OPR.ID IN ('||:P_OPRS||')' 
        INTO :L_OPR_ID 
 
        DO 
        BEGIN 
            EXECUTE PROCEDURE UPDATE_PROD_SUMI(:L_OPR_ID); 
        END 
 
END^


ALTER PROCEDURE UPDATE_NAL_KOL_RZV (
    R_OPR_ID INTEGER,
    R_SKLAD_ID INTEGER)
AS
declare variable l_simple_id integer; 
declare variable l_kol_rzv double precision; 
declare variable ll_kol_rzv double precision; 
BEGIN  
  FOR SELECT  
    por_el.simple_id,  
    por_el.kol_rzv  
  FROM por_el  
  WHERE   
    por_el.opr_id = :r_opr_id  
  INTO :l_simple_id,:l_kol_rzv  
  DO BEGIN  
    select 
      coalesce(nal.kol_rzv,0) 
    from nal 
    WHERE  
        nal.simple_id = :l_simple_id AND  
        nal.sklad_id = :r_sklad_id 
    into :ll_kol_rzv; 
 
    ll_kol_rzv = round5(ll_kol_rzv - l_kol_rzv); 
    if (ll_kol_rzv < 0) then 
      ll_kol_rzv = 0; 
 
    UPDATE nal  
    SET nal.kol_rzv = :ll_kol_rzv 
    WHERE  
        nal.simple_id = :l_simple_id AND  
        nal.sklad_id = :r_sklad_id;  
  END  
END^


ALTER PROCEDURE UPDATE_OSNOVNA_CL (
    P_SIMPLE_ID INTEGER,
    P_CENA_PROD DOUBLE PRECISION,
    P_UPDATE SMALLINT,
    P_USER_ID INTEGER,
    OPR_ID_E INTEGER)
AS
declare variable L_OPR_ID integer; 
declare variable L_CL_EL_ID integer; 
declare variable L_CENA_PROD double precision; 
begin 
/* Ver.:1*/ 
  select 
      cenova_lista.opr_id 
  from cenova_lista 
  where 
    cenova_lista.def = 1 and 
   (not exists (select opr_anul.id from opr_anul where opr_anul.an_opr_id = cenova_lista.opr_id)) 
  into :l_opr_id; 
 
  if (l_opr_id is not null) then begin 
    select 
      cenova_lista_el.id, 
      cenova_lista_el.cena 
    from cenova_lista_el 
    where 
      cenova_lista_el.opr_id = :l_opr_id and 
      cenova_lista_el.simple_id = :p_simple_id and 
      cenova_lista_el.tip_ot_cena = 0 
    into :l_cl_el_id, :l_cena_prod; 
 
    if (l_cl_el_id is not null) then begin 
      update cenova_lista_el 
      set cenova_lista_el.cena = :p_cena_prod 
      where 
        cenova_lista_el.id = :l_cl_el_id; 
 
      EXECUTE PROCEDURE SAVE_CL_HISTORY(:l_opr_id, :p_simple_id, :p_user_id, :l_cena_prod, :p_cena_prod,:opr_id_e); 
 
      if (p_update = 1) then 
        EXECUTE PROCEDURE cenova_lista_update(:l_opr_id,:p_simple_id,:p_cena_prod,:p_user_id,:opr_id_e); 
    end 
  end 
end^


ALTER PROCEDURE UPDATE_OTC_EL_TIP_7
RETURNS (
    R_OPR_ID INTEGER,
    R_SUM DOUBLE PRECISION)
AS
declare variable L_OPR_ID integer;
declare variable L_SUM double precision;
begin
  for select
    cur_opr_id,
    (SELECT SUM(GOPO.R_SUMA) FROM GET_OTC_PAY_OUT(filter_str) gopo)
  from
  (
    select
      id,
      cur_opr_id,
      prev_opr_id,
      'OPR.ID > ' || prev_opr_id || ' AND OPR.ID < ' || cur_opr_id as filter_str
    from
    (
      select
        cur.id,
        cur.opr_id as cur_opr_id,
        (select opr_id from otc where otc.id = (select max(otc.id) from otc where otc.obekt_id is null and otc.id < cur.id)) as prev_opr_id
      from
        otc cur
      where
        cur.obekt_id is null
        and cur.id > 1715
    )
  )
  into :R_OPR_ID, :R_sum
  do begin
    update otc_el set
      otc_el.suma = :r_sum
    where
      otc_el.opr_id = :r_opr_id and
      otc_el.tip_suma = 7;
  end
end^


ALTER PROCEDURE UPDATE_OUT (
    OPR_ID INTEGER)
AS
DECLARE VARIABLE L_CENA_CL DOUBLE PRECISION; 
DECLARE VARIABLE L_CENA DOUBLE PRECISION; 
DECLARE VARIABLE L_PROCENT DOUBLE PRECISION; 
DECLARE VARIABLE L_TIP_OTKL INTEGER; 
DECLARE VARIABLE L_OPR_ID INTEGER; 
DECLARE VARIABLE L_OTKL INTEGER; 
BEGIN 
    L_TIP_OTKL = 0; 
    L_OTKL = 0; 
 
    FOR SELECT 
        PROD_NODE.OPR_SUB_PROD_ID 
    FROM 
        PROD_NODE 
    WHERE 
        PROD_NODE.OPR_PROD_ID =:OPR_ID 
    INTO 
        :L_OPR_ID 
    DO BEGIN 
        FOR SELECT 
            PROD_CENI_EL.CENA_CL, 
            PROD_CENI_EL.CENA 
        FROM 
            PROD_CENI_EL INNER JOIN OUT_EL ON OUT_EL.ID = PROD_CENI_EL.OUT_EL_ID 
        WHERE 
            OUT_EL.OPR_ID =:L_OPR_ID 
        INTO 
            :L_CENA_CL,:L_CENA 
        DO BEGIN 
            IF (L_CENA_CL <> 0) THEN 
                L_PROCENT = ROUND((ROUNDD(L_CENA/L_CENA_CL) - 1)*100, 2); 
            ELSE 
                L_PROCENT = NULL; 
 
            IF (L_PROCENT = 0 OR (L_PROCENT IS NULL) ) THEN 
                L_TIP_OTKL = 0; 
            ELSE  IF (L_TIP_OTKL = 0) THEN BEGIN 
                IF (L_PROCENT > 0 ) THEN 
                    L_TIP_OTKL = 1; 
                ELSE 
                    L_TIP_OTKL = 2; 
            END 
            ELSE IF (L_TIP_OTKL = 1) THEN BEGIN 
                IF (L_PROCENT > 0 ) THEN 
                    L_TIP_OTKL = 1; 
                ELSE 
                    L_TIP_OTKL = 3; 
            END 
            ELSE IF (L_TIP_OTKL = 2) THEN BEGIN 
                IF (L_PROCENT > 0 ) THEN 
                    L_TIP_OTKL = 3; 
                ELSE 
                    L_TIP_OTKL = 2; 
            END 
            L_OTKL = BIN_OR(L_TIP_OTKL,L_OTKL); 
        END 
    END 
 
    FOR SELECT 
        PROD_CENI_EL.CENA_CL, 
        PROD_CENI_EL.CENA 
    FROM 
        PROD_CENI_EL INNER JOIN OUT_EL ON OUT_EL.ID = PROD_CENI_EL.OUT_EL_ID 
    WHERE 
        OUT_EL.OPR_ID =:OPR_ID 
    INTO 
        :L_CENA_CL,:L_CENA 
    DO BEGIN 
        IF (L_CENA_CL <> 0) THEN 
            L_PROCENT = ROUND((ROUNDD(L_CENA/L_CENA_CL) - 1)*100, 2); 
        ELSE 
            L_PROCENT = NULL; 
 
        IF (L_PROCENT = 0 OR (L_PROCENT IS NULL) ) THEN 
            L_TIP_OTKL = 0; 
        ELSE IF (L_TIP_OTKL = 0) THEN BEGIN 
            IF (L_PROCENT > 0 ) THEN 
                L_TIP_OTKL = 1; 
            ELSE 
                L_TIP_OTKL = 2; 
        END 
        ELSE IF (L_TIP_OTKL = 1) THEN BEGIN 
            IF (L_PROCENT > 0 ) THEN 
                L_TIP_OTKL = 1; 
            ELSE 
                L_TIP_OTKL = 3; 
        END 
        ELSE IF (L_TIP_OTKL = 2) THEN BEGIN 
            IF (L_PROCENT > 0 ) THEN 
                L_TIP_OTKL = 3; 
            ELSE 
                L_TIP_OTKL = 2; 
        END 
 
        L_OTKL = BIN_OR(L_TIP_OTKL,L_OTKL); 
    END 
 
    UPDATE OUT SET 
    OUT.OTKLONENIE = :L_OTKL 
    WHERE OUT.OPR_ID = :OPR_ID; 
END^


ALTER PROCEDURE UPDATE_PRIORITET (
    P_PRIORITET1 INTEGER,
    P_PRIORITET2 INTEGER,
    P_ID1 INTEGER,
    P_ID2 INTEGER)
AS
DECLARE VARIABLE L_MAX_PRIORITET INTEGER;
DECLARE VARIABLE L_CL_PRIORITET INTEGER;
DECLARE VARIABLE L_CL_ID INTEGER;
BEGIN
  IF (((p_prioritet1 < 5001) AND (p_prioritet2 < 5001)) OR
     ((p_prioritet1 > 10001) AND (p_prioritet2 > 10001)) OR
     ((p_prioritet1 >= 5001) AND (p_prioritet2 >= 5001) AND (p_prioritet1 < 10001) AND (p_prioritet2 < 10001)))  THEN BEGIN
    UPDATE cenova_lista
    SET cenova_lista.prioritet = :p_prioritet2
    WHERE cenova_lista.id = :p_id1;
    UPDATE cenova_lista
    SET cenova_lista.prioritet = :p_prioritet1
    WHERE cenova_lista.id = :p_id2;
  END
  IF (p_prioritet1 < p_prioritet2) THEN BEGIN
    IF ((p_prioritet1 < 5001) AND (p_prioritet2 >= 5001) AND (p_prioritet2 < 10001)) THEN BEGIN
      FOR SELECT
        cenova_lista.id, 
        cenova_lista.prioritet
      FROM cenova_lista
      WHERE
        cenova_lista.prioritet > :p_prioritet2 AND
        cenova_lista.prioritet < 10001 AND
        cenova_lista.prioritet IS NOT NULL
      ORDER BY 2
      INTO :l_cl_id,:l_cl_prioritet
      DO BEGIN
        UPDATE cenova_lista
        SET cenova_lista.prioritet = :l_cl_prioritet + 1
        WHERE cenova_lista.id = :l_cl_id;
      END
      UPDATE cenova_lista
      SET cenova_lista.prioritet = :p_prioritet2 + 1
      WHERE cenova_lista.id = :p_id1;
    END
    IF (((p_prioritet1 < 5001) OR ((p_prioritet1 >= 5001) AND (p_prioritet1 < 10001)))  AND (p_prioritet2 >= 10001)) THEN BEGIN
      FOR SELECT
        cenova_lista.id, 
        cenova_lista.prioritet
      FROM cenova_lista
      WHERE
        cenova_lista.prioritet > :p_prioritet2 AND
        cenova_lista.prioritet IS NOT NULL
      ORDER BY 2
      INTO :l_cl_id,:l_cl_prioritet
      DO BEGIN
        UPDATE cenova_lista
        SET cenova_lista.prioritet = :l_cl_prioritet + 1
        WHERE cenova_lista.id = :l_cl_id;
      END
      UPDATE cenova_lista
      SET cenova_lista.prioritet = :p_prioritet2 + 1
      WHERE cenova_lista.id = :p_id1;
    END
   IF ((p_prioritet1 < 5001) AND (p_prioritet1 >= 5001) AND (p_prioritet2 < 10001)) THEN BEGIN
    FOR SELECT
        cenova_lista.id, 
        cenova_lista.prioritet
      FROM cenova_lista
      WHERE
        cenova_lista.prioritet > :p_prioritet2 AND
        cenova_lista.prioritet < 10001 AND
        cenova_lista.prioritet IS NOT NULL
      ORDER BY 2
      INTO :l_cl_id,:l_cl_prioritet
      DO BEGIN
        UPDATE cenova_lista
        SET cenova_lista.prioritet = :l_cl_prioritet + 1
        WHERE cenova_lista.id = :l_cl_id;
      END
      UPDATE cenova_lista
      SET cenova_lista.prioritet = :p_prioritet2
      WHERE cenova_lista.id = :p_id1;
   END
  END
  ELSE BEGIN
    IF ((p_prioritet2 < 5001) AND (p_prioritet1 >= 5001) AND (p_prioritet1 < 10001)) THEN BEGIN
      FOR SELECT
        cenova_lista.id, 
        cenova_lista.prioritet
      FROM cenova_lista
      WHERE
        cenova_lista.prioritet >= :p_prioritet2 AND
        cenova_lista.prioritet < 5001 AND
        cenova_lista.prioritet IS NOT NULL
      ORDER BY 2
      INTO :l_cl_id,:l_cl_prioritet
      DO BEGIN
        UPDATE cenova_lista
        SET cenova_lista.prioritet = :l_cl_prioritet + 1
        WHERE cenova_lista.id = :l_cl_id;
      END
      UPDATE cenova_lista
      SET cenova_lista.prioritet = :p_prioritet2
      WHERE cenova_lista.id = :p_id1;
    END
    IF ((p_prioritet2 >= 5001) AND (p_prioritet2 < 10001) AND (p_prioritet1 >= 10001)) THEN BEGIN
      FOR SELECT
        cenova_lista.id, 
        cenova_lista.prioritet
      FROM cenova_lista
      WHERE
        cenova_lista.prioritet >= :p_prioritet2 AND
        cenova_lista.prioritet < 10001 AND
        cenova_lista.prioritet IS NOT NULL
      ORDER BY 2
      INTO :l_cl_id,:l_cl_prioritet
      DO BEGIN
        UPDATE cenova_lista
        SET cenova_lista.prioritet = :l_cl_prioritet + 1
        WHERE cenova_lista.id = :l_cl_id;
      END
      UPDATE cenova_lista
      SET cenova_lista.prioritet = :p_prioritet2
      WHERE cenova_lista.id = :p_id1;
    END
  END
END^


ALTER PROCEDURE UPDATE_PROD_SUMI (
    P_OPR_ID INTEGER)
AS
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA_OST DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMI_ID INTEGER; 
DECLARE VARIABLE L_SUMA_PROD DOUBLE PRECISION; 
BEGIN 
    FOR 
        SELECT 
            SUMI.SUMA, 
            SUMI.SUMA_OST, 
            SUMI.ID 
        FROM 
            SUMI 
        WHERE 
            SUMI.OPR_ID =:P_OPR_ID 
        INTO :L_SUMA,:L_SUMA_OST,:L_SUMI_ID 
    DO 
    BEGIN 
    L_SUMA_PROD = L_SUMA - L_SUMA_OST; 
    IF (L_SUMA_PROD <> 0) THEN 
    begin 
 
        UPDATE 
            SUMI 
        SET 
            SUMI.SUMA =:L_SUMA_PROD, 
            SUMI.SUMA_OST = 0 
        WHERE SUMI.ID =:L_SUMI_ID; 
    END 
 
    ELSE 
        DELETE FROM SUMI WHERE SUMI.ID =:L_SUMI_ID; 
    END 
END^


ALTER PROCEDURE UPDATE_REQUEST_STATUS (
    P_POR_ID TYPE OF DOM_KEY)
AS
declare variable L_POR_ID integer; 
declare variable L_POR_OPR_ID integer; 
declare variable L_RQ_OPR_ID integer; 
declare variable L_RQ_ID integer; 
declare variable L_ZA_ID integer; 
declare variable L_NEW_STATUS smallint; 
BEGIN 
    L_NEW_STATUS = -2; 
 
    SELECT 
        POR.ID, 
        POR.OPR_ID 
    FROM 
        POR 
    WHERE 
        POR.STATUS = -6 
        AND POR.ID =:P_POR_ID 
    INTO 
        :L_POR_ID, :L_POR_OPR_ID; 
    --BEGIN 
 
    SELECT 
        RQ.ID, 
        RQ.OPR_ID 
    FROM 
        POR_PRODUCTION_REQUEST_NODE PPR INNER JOIN OPR_PRODUCTION_REQUEST RQ ON PPR.PRODUCTION_REQUEST_ID = RQ.OPR_ID 
    WHERE 
        PPR.POR_OPR_ID = :L_POR_OPR_ID 
    INTO 
        :L_RQ_ID, :L_RQ_OPR_ID; 
 
    DELETE FROM PRODUCTION_MONTAJISTI 
    WHERE 
        PRODUCTION_MONTAJISTI.PRODUCTION_REQUEST_ID = :L_RQ_ID; 
 
    FOR SELECT 
        PRODUCTION_ZARABOTKA.ID 
    FROM 
        PRODUCTION_ZARABOTKA 
    WHERE 
        PRODUCTION_ZARABOTKA.PRODUCTION_ID = :L_RQ_ID 
    INTO 
        :L_ZA_ID 
    DO BEGIN 
        DELETE FROM PRODUCTION_ZARABOTKA_IZPLATENO 
        WHERE 
            PRODUCTION_ZARABOTKA_IZPLATENO.ZARABOTKA_ID = :L_ZA_ID; 
    END 
 
    DELETE FROM PRODUCTION_ZARABOTKA 
    WHERE 
        PRODUCTION_ZARABOTKA.PRODUCTION_ID = :L_RQ_ID; 
 
    DELETE FROM PRODUCTION_REQUEST_EL 
    WHERE 
        PRODUCTION_REQUEST_EL.OPR_REQUEST_ID = :L_RQ_OPR_ID; 
 
    DELETE FROM OPR_PRODUCTION_REQUEST 
    WHERE 
        OPR_PRODUCTION_REQUEST.OPR_ID = :L_RQ_OPR_ID; 
 
    UPDATE POR SET 
        STATUS = :L_NEW_STATUS 
    WHERE 
        OPR_ID = :L_POR_OPR_ID; 
 
    DELETE FROM  POR_PRODUCTION_REQUEST_NODE 
    WHERE 
        POR_OPR_ID = :L_POR_OPR_ID; 
    --END 
END^


ALTER PROCEDURE UPDATE_SIMPLE_CALC_FORMULA2
AS
declare variable L_FORMULA_2 type of DOM_CHAR_120; 
declare variable L_SIMPLE_CALC_ID type of DOM_KEY; 
declare variable L_KOL2 type of DOM_KOL; 
BEGIN 
    FOR 
        SELECT 
            PRODUCTION_REQUEST_EL.SIMPLE_CALC_ID, 
            NEW_SIMPLE_CALC.FORMULA2 AS FORMULA2_NEW, 
            NEW_SIMPLE_CALC.KOL2 
        FROM 
            PRODUCTION_REQUEST_EL INNER JOIN SIMPLE ON SIMPLE.ID = PRODUCTION_REQUEST_EL.SIMPLE_ID 
            INNER JOIN OPR_PRODUCTION_REQUEST ON OPR_PRODUCTION_REQUEST.OPR_ID = PRODUCTION_REQUEST_EL.OPR_REQUEST_ID 
            LEFT JOIN SIMPLE_CALC ON SIMPLE_CALC.ID = PRODUCTION_REQUEST_EL.SIMPLE_CALC_ID 
            LEFT JOIN (SELECT SIMPLE_CALC.ID, SIMPLE_CALC.SIMPLE_ID, SIMPLE_CALC.FORMULA2, SIMPLE_CALC.CHILD_SIMPLE_ID, SIMPLE.NAME, SIMPLE_CALC.KOL2, SIMPLE_CALC.CHILD_SEL_ID 
                FROM SIMPLE_CALC INNER JOIN SIMPLE ON SIMPLE.ID = SIMPLE_CALC.CHILD_SIMPLE_ID WHERE SIMPLE_CALC.SIMPLE_ID IS NOT NULL) AS NEW_SIMPLE_CALC 
                ON ((NEW_SIMPLE_CALC.CHILD_SIMPLE_ID = PRODUCTION_REQUEST_EL.SIMPLE_ID) OR (NEW_SIMPLE_CALC.CHILD_SEL_ID = SIMPLE_CALC.CHILD_SEL_ID)) 
                AND (NEW_SIMPLE_CALC.SIMPLE_ID = PRODUCTION_REQUEST_EL.MASTER_SIMPLE_ID) 
        WHERE 
            NEW_SIMPLE_CALC.FORMULA2 IS NOT NULL 
            AND OPR_PRODUCTION_REQUEST.FLAG_COMPLETE = 0 
        INTO :L_SIMPLE_CALC_ID, :L_FORMULA_2, :L_KOL2 
 
    DO BEGIN 
        UPDATE SIMPLE_CALC SET SIMPLE_CALC.FORMULA2 =:L_FORMULA_2, SIMPLE_CALC.KOL2 = :L_KOL2 WHERE SIMPLE_CALC.ID =:L_SIMPLE_CALC_ID; 
    END 
END^


ALTER PROCEDURE UPDATE_SUMI_PROD_INVOICE (
    P_OPR_ID TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_SUMA_PROD_VALUTA TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_VALUTA_KURS TYPE OF KURS; 
DECLARE VARIABLE L_SUMA_PROD TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_RAZLIKA TYPE OF DOM_SUMA; 
DECLARE VARIABLE L_OUT_EL_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE R_SUMA_LEVA_INVOICE TYPE OF DOM_SUMA; 
BEGIN 
    SELECT 
        SUM(ROUNDD(PROD_CENI_EL.CENA * OUT_EL.KOL)) 
    FROM 
        PROD_CENI_EL INNER JOIN OUT_EL ON OUT_EL.ID = PROD_CENI_EL.OUT_EL_ID 
    WHERE 
        OUT_EL.OPR_ID =:P_OPR_ID 
    INTO :L_SUMA_PROD; 
 
    SELECT 
        FAK.KURS_VALUTA, 
        FAK.SUMA 
    FROM 
        FAK INNER JOIN FAK_PROD ON FAK_PROD.FAK_ID = FAK.ID 
    WHERE 
        FAK_PROD.OPR_ID =:P_OPR_ID 
    INTO :L_VALUTA_KURS, :L_SUMA_PROD_VALUTA; 
 
    R_SUMA_LEVA_INVOICE = ROUND(COALESCE(:L_VALUTA_KURS,1) * :L_SUMA_PROD_VALUTA, 2); 
 
    L_RAZLIKA = ROUND(R_SUMA_LEVA_INVOICE - COALESCE(:L_SUMA_PROD, 0),2); 
    IF (:L_RAZLIKA <> 0) then begin 
 
        SELECT FIRST 1 
            ID 
        FROM 
            (SELECT 
                OUT_EL.ID, 
                OUT_EL.SUMA 
 
            FROM 
                OUT_EL 
            WHERE 
                OUT_EL.OPR_ID =:P_OPR_ID 
            ORDER BY 2 DESC, 1 
            ) 
        INTO :L_OUT_EL_ID; 
 
        UPDATE OUT_EL SET OUT_EL.SUMA = OUT_EL.SUMA + COALESCE(:L_RAZLIKA,0) WHERE OUT_EL.ID =:L_OUT_EL_ID; 
        UPDATE PROD_CENI_EL SET PROD_CENI_EL.CENA = (SELECT OUT_EL.SUMA/OUT_EL.KOL FROM OUT_EL WHERE OUT_EL.ID = PROD_CENI_EL.OUT_EL_ID) WHERE PROD_CENI_EL.OUT_EL_ID =:L_OUT_EL_ID; 
 
        UPDATE OPR SET OPR.SUMA =:R_SUMA_LEVA_INVOICE WHERE OPR.ID =:P_OPR_ID; 
        UPDATE SUMI SET SUMI.SUMA =:R_SUMA_LEVA_INVOICE WHERE SUMI.OPR_ID =:P_OPR_ID; 
        --IIF(SELECT OUT.PAY_TIP = ) 
    END 
END^


ALTER PROCEDURE UPDATE_ZARABOTKA_FROM_PROD (
    P_OPR_PROD_ID TYPE OF DOM_KEY,
    P_CL_ID TYPE OF DOM_KEY)
AS
declare variable L_REQUEST_PRODUCTION_OPR_ID type of DOM_KEY; 
declare variable L_SUMA type of DOM_SUMA; 
declare variable L_CNT_MONTAJISTI type of DOM_INT; 
declare variable L_ZARABOTKA_ID type of DOM_INT; 
declare variable L_USER_ID type of DOM_INT; 
BEGIN 
    SELECT FIRST 1 
        REQUEST_PRODUCTION_NODE.REQUEST_ID 
    FROM 
        REQUEST_PRODUCTION_NODE INNER JOIN PRODUCTION ON PRODUCTION.OPR_OUT_ID = REQUEST_PRODUCTION_NODE.PRODUCTION_ID 
        INNER JOIN PROD_PRODUCTION ON PROD_PRODUCTION.PRODUCTION_OPR_ID = PRODUCTION.OPR_IN_ID AND 
PROD_PRODUCTION.PROD_OPR_ID =:P_OPR_PROD_ID 
    UNION ALL 
 
    SELECT FIRST 1 
        OPR_PRODUCTION_REQUEST.OPR_ID 
    FROM 
        OPR_PRODUCTION_REQUEST 
    WHERE 
        OPR_PRODUCTION_REQUEST.PROD =:P_OPR_PROD_ID 
 
    INTO :L_REQUEST_PRODUCTION_OPR_ID; 
 
    SELECT 
        SUM(ROUND(OUT_EL.KOL * CENOVA_LISTA_EL.CENA, 2)) AS SUMA 
    FROM 
 
        OUT_EL INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
        INNER JOIN CENOVA_LISTA_EL ON CENOVA_LISTA_EL.SIMPLE_ID = SIMPLE.ID 
        INNER JOIN CENOVA_LISTA ON CENOVA_LISTA.OPR_ID = CENOVA_LISTA_EL.OPR_ID 
    WHERE 
        CENOVA_LISTA.ID = :P_CL_ID AND OUT_EL.OPR_ID =:P_OPR_PROD_ID 
    INTO :L_SUMA; 
 
    SELECT 
        COUNT(PRODUCTION_MONTAJISTI.ID) 
    FROM 
        PRODUCTION_MONTAJISTI 
    WHERE 
        PRODUCTION_MONTAJISTI.PRODUCTION_REQUEST_ID = (SELECT FIRST 1 OPR_PRODUCTION_REQUEST.ID FROM 
OPR_PRODUCTION_REQUEST WHERE OPR_PRODUCTION_REQUEST.OPR_ID = :L_REQUEST_PRODUCTION_OPR_ID ORDER BY ID DESC) 
    INTO :L_CNT_MONTAJISTI; 
 
    if (:L_CNT_MONTAJISTI <> 0) then 
    BEGIN 
        FOR SELECT 
            PRODUCTION_MONTAJISTI.USER_ID 
        FROM 
            PRODUCTION_MONTAJISTI 
        WHERE 
            PRODUCTION_MONTAJISTI.PRODUCTION_REQUEST_ID = 
            (SELECT FIRST 1 OPR_PRODUCTION_REQUEST.ID FROM OPR_PRODUCTION_REQUEST WHERE OPR_PRODUCTION_REQUEST.OPR_ID = 
:L_REQUEST_PRODUCTION_OPR_ID ORDER BY ID DESC) 
            AND NOT EXISTS (SELECT PRODUCTION_ZARABOTKA_IZPLATENO.ID FROM PRODUCTION_ZARABOTKA_IZPLATENO INNER JOIN 
PRODUCTION_ZARABOTKA ON production_zarabotka.ID = PRODUCTION_ZARABOTKA_IZPLATENO.ZARABOTKA_ID 
            WHERE 
            PRODUCTION_ZARABOTKA.PRODUCTION_ID = PRODUCTION_MONTAJISTI.PRODUCTION_REQUEST_ID 
            AND PRODUCTION_MONTAJISTI.USER_ID = PRODUCTION_ZARABOTKA.USER_ID) 
        INTO :L_USER_ID 
 
        DO BEGIN 
            UPDATE OR INSERT INTO PRODUCTION_ZARABOTKA(ZARABOTKA_SUMA, PRODUCTION_ID, USER_ID) values(ROUND 
(:L_SUMA/:L_CNT_MONTAJISTI, 2), (SELECT OPR_PRODUCTION_REQUEST.ID FROM OPR_PRODUCTION_REQUEST 
            WHERE OPR_PRODUCTION_REQUEST.OPR_ID = :L_REQUEST_PRODUCTION_OPR_ID), :L_USER_ID) 
            MATCHING (USER_ID, PRODUCTION_ID); 
        END 
    end 
END^


ALTER PROCEDURE VERIFICATION_CODE (
    P_KODE TYPE OF DOM_CHAR_50,
    P_TIPE_CODE TYPE OF DOM_SMAL_INT,
    P_ID_REC TYPE OF DOM_KEY)
RETURNS (
    R_RESULT TYPE OF DOM_KEY)
AS
DECLARE VARIABLE L_ID INTEGER; 
begin 
  l_id = null; 
 
  if (p_tipe_code = 0) then 
    select first 1 id from simple 
    where 
      code = :p_kode and 
      id <> :p_id_rec 
    into :l_id; 
  else 
    select first 1 id from kli 
    where 
      code = :p_kode and 
      id <> :p_id_rec 
    into :l_id; 
 
   if (l_id is null) then 
    r_result = 0; 
   else 
    r_result = 1; 
 
  suspend; 
end;^


ALTER PROCEDURE VERIFICATION_FIRMA (
    P_NAME TYPE OF DOM_CHAR_100,
    P_BUSTAT VARCHAR(13),
    P_IDNOMDDS VARCHAR(15),
    P_ID INTEGER)
RETURNS (
    R_RESULT INTEGER)
AS
DECLARE VARIABLE L_ID INTEGER; 
BEGIN 
  L_ID = NULL; 
  R_RESULT = 0; 
 
  SELECT FIRST 1 ID  FROM FIRMI 
  WHERE 
    NAME_FAK = :P_NAME AND 
    ID <> :P_ID 
  INTO :L_ID; 
 
  IF (L_ID IS NOT NULL) THEN BEGIN 
    R_RESULT = R_RESULT + 1; 
    L_ID = NULL; 
  END 
 
  IF (P_BUSTAT IS NOT NULL) THEN BEGIN 
    SELECT FIRST 1 ID  FROM FIRMI 
    WHERE 
      BULSTAT = :P_BUSTAT AND 
      ID <> :P_ID 
    INTO :L_ID; 
 
    IF (L_ID IS NOT NULL) THEN BEGIN 
      R_RESULT = R_RESULT + 2; 
      L_ID = NULL; 
    END 
  END 
 
  IF (P_IDNOMDDS IS NOT NULL) THEN BEGIN 
    SELECT FIRST 1 ID  FROM FIRMI 
    WHERE 
      IDNOMDDS = :P_IDNOMDDS AND 
      ID <> :P_ID 
    INTO :L_ID; 
 
    IF (L_ID IS NOT NULL) THEN BEGIN 
      R_RESULT = R_RESULT + 4; 
      L_ID = NULL; 
    END 
  END 
 
  SUSPEND; 
END^


ALTER PROCEDURE ZAKRAGLQVANE (
    P_CL_EL_ID INTEGER,
    P_CENA DOUBLE PRECISION,
    P_ROUND_TIP_ID INTEGER,
    P_CENA_OLD DOUBLE PRECISION)
RETURNS (
    R_CENA DOUBLE PRECISION,
    R_PROCENT DOUBLE PRECISION)
AS
declare variable L_RDB$FIELD_SCALE integer; 
declare variable L_UPDOWN integer; 
declare variable L_COEFFICIENT double precision; 
declare variable L_PRODUCE double precision; 
declare variable L_UMNJ double precision; 
declare variable L_MODCOEF integer; 
declare variable L_MODCENA integer; 
declare variable L_S varchar(10); 
declare variable L_I integer; 
declare variable L_MOD double precision; 
declare variable L_AA double precision; 
BEGIN 
  select 
    round_tip.up_down, 
    round_tip.coefficient, 
    round_tip.produce 
  from round_tip 
  where 
    round_tip.id = :p_round_tip_id 
  into :l_updown,:l_coefficient,:l_produce; 
 
 
  l_Umnj = 1/l_coefficient; 
 
  if (l_updown = 0) then begin 
    l_aa = cast(p_cena*l_Umnj+0.9999999999 as integer); 
    if (l_aa > (p_cena*l_Umnj+0.9999999999)) then 
      r_cena = l_aa - 1; 
    else 
      r_cena = l_aa; 
  end 
  else 
  if (l_updown = 1) then begin 
    l_aa = cast(p_cena*l_Umnj as integer); 
    if (l_aa > (p_cena*l_Umnj)) then 
      r_cena = l_aa - 1; 
    else 
      r_cena = l_aa; 
  end 
  else begin 
    r_cena = cast(p_cena*l_Umnj as integer); 
  end 
 
  r_cena = round5(r_cena /l_Umnj); 
 
  if (r_cena < 0) then 
    r_cena = round5(l_coefficient); 
 
  if ((l_produce is not null) and (r_cena > l_produce)) then 
    r_cena = round5(r_cena - l_produce); 
 
  if (r_cena = p_cena_old) then 
    r_procent = 0; 
  else 
    r_procent = roundd((r_cena - p_cena_old)/(p_cena_old/100)); 
 
END^


ALTER PROCEDURE ZD_DOST (
    P_OPR_ID_DOST INTEGER,
    P_OPR_ID_ZD INTEGER)
AS
declare variable l_simple_id integer; 
declare variable l_kol_zd double precision; 
declare variable l_kol_dost double precision; 
declare variable l_tip_opr integer; 
BEGIN  
  select opr_tip from opr where id = :p_opr_id_dost into :l_tip_opr;  
  
  FOR  
    select  
      zd.simple_id,  
      sum(zd.kol_zaiavka) kol  
    from zaiavka_dostavka zd  
    where  
      zd.opr_id = :p_opr_id_zd  
    group by zd.simple_id  
    INTO :l_simple_id,:l_kol_zd  
  DO  
  BEGIN  
    if (l_tip_opr in (1,12)) then  
      execute procedure zd_sim_dost(:p_opr_id_dost,:l_simple_id) returning_values :l_kol_dost;  
    else begin  
      SELECT sum(OUT_EL.KOL) kol FROM OUT_EL  
      WHERE OUT_EL.OPR_ID = :p_opr_id_dost and OUT_EL.simple_id = :l_simple_id  
      into :l_kol_dost;  
    end  
  
    if ((l_kol_dost is not null) and (l_kol_dost > 0)) then  
      insert into zd_dost_move_node (opr_id_zd, opr_id_dost_move, kol, simple_id)  
      values (:p_opr_id_zd, :p_opr_id_dost, :l_kol_dost,:l_simple_id);  
  END  
  POST_EVENT 'REFRESH_ZD'; 
END^


ALTER PROCEDURE ZD_EDIT_NODE (
    P_OPR_ID INTEGER,
    P_OPR_ID_EDIT INTEGER)
AS
declare variable l_opr_id integer; 
begin 
   for select 
    opr_id 
   from zaiavka_dostavka_node 
   where 
    opr_id_ob = :p_opr_id_edit 
   into :l_opr_id 
   do 
   insert into zaiavka_dostavka_node (opr_id_ob, opr_id) 
   values (:p_opr_id, :l_opr_id); 
end^


ALTER PROCEDURE ZD_KOL_NODE (
    P_OPR_ID_S VARCHAR(3000),
    L_SIM_ID INTEGER)
RETURNS (
    R_KOL DOUBLE PRECISION)
AS
begin 
  execute statement 'select coalesce(sum(kol),0) from zd_dost_move_node 
    where 
      opr_id_zd in ('||:p_opr_id_s||') and 
      simple_id = '||:l_sim_id 
    into :r_kol; 
end^


ALTER PROCEDURE ZD_OBOBSHTAVANE (
    P_OPR_ID_S VARCHAR(3000),
    P_OPR_ID_OB INTEGER,
    P_SKLAD_OSN INTEGER)
AS
DECLARE VARIABLE L_SIM_ID INTEGER; 
DECLARE VARIABLE LL_SIM_ID INTEGER; 
DECLARE VARIABLE L_SKLAD_ID INTEGER; 
DECLARE VARIABLE L_KLI_ID INTEGER; 
DECLARE VARIABLE L_CENA_CL DOUBLE PRECISION; 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_OPR_ID INTEGER; 
DECLARE VARIABLE LL_OPR_ID INTEGER; 
DECLARE VARIABLE LL_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
begin 
  ll_opr_id = 0; 
  ll_sim_id = 0; 
  l_suma = 0; 
 
  for 
    execute statement 'select 
    zd.opr_id, 
    zd.simple_id, 
    zd.sklad_id, 
    zd.kli_id, 
    zd.cena_cl, 
    sum(zd.kol_zaiavka) 
  from zaiavka_dostavka zd 
  where 
    zd.opr_id in ('||:p_opr_id_s||') 
  group by zd.opr_id, zd.simple_id, zd.sklad_id, zd.kli_id, zd.cena_cl 
  order by zd.opr_id,zd.simple_id' 
  into :l_opr_id, :l_sim_id,:l_sklad_id,:l_kli_id,:l_cena_cl,:l_kol 
  do begin 
    if ((ll_opr_id <> l_opr_id) or (ll_sim_id <> l_sim_id) ) then begin 
      ll_kol = 0; 
      ll_opr_id = l_opr_id; 
      ll_sim_id = l_sim_id; 
      select 
        coalesce(sum(kol),0) kol 
      from zd_dost_move_node 
      where 
        opr_id_zd = :ll_opr_id and 
        simple_id = :l_sim_id 
      into :ll_kol; 
    end 
    ll_kol = ll_kol - l_kol; 
 
    if (ll_kol < 0) then begin 
      select FIRST 1 
         Kli.id 
      FROM opr 
      JOIN in_el ON IN_EL.OPR_ID = OPR.ID and IN_EL.SIMPLE_ID = :l_sim_id 
      JOIN kli ON KLI.ID = OPR.KLI_ID and KLI.dostav = 1 
      WHERE 
        opr.opr_tip in(1,12) AND 
        opr.sklad_id = :p_sklad_osn 
      ORDER BY in_el.opr_id desc 
      into :l_kli_id; 
 
      update zaiavka_dostavka 
      set kol_zaiavka = kol_zaiavka + abs(:ll_kol) 
      where 
        opr_id = :p_opr_id_ob and 
        simple_id = :l_sim_id and 
        sklad_id = :l_sklad_id; 
 
      if (ROW_COUNT = 0) then 
        insert into zaiavka_dostavka (opr_id, simple_id, sklad_id, cena_cl, kol_zaiavka,kli_id) 
        values (:p_opr_id_ob, :l_sim_id, :l_sklad_id, :l_cena_cl, abs(:ll_kol),:l_kli_id); 
 
      l_suma = l_suma + round(:l_cena_cl*abs(:ll_kol), 2); 
      ll_kol = 0; 
    end 
  end 
 
  update opr 
  set suma = :l_suma 
  where id = :p_opr_id_ob; 
 
  POST_EVENT 'REFRESH_ZD'; 
end;^


ALTER PROCEDURE ZD_SIM_DOST (
    P_OPR_ID INTEGER,
    P_SIMPLE_ID INTEGER)
RETURNS (
    R_KOL FLOAT)
AS
declare variable l_kol double precision; 
declare variable l_kol_a double precision; 
BEGIN   
  r_kol = 0;   
  FOR   
    SELECT   
        sum(IN_EL.KOL) AS KOL   
    FROM   
        DOST_NODE   
        LEFT JOIN IN_EL ON IN_EL.OPR_ID = DOST_NODE.RAZ_DOST_ID and IN_EL.simple_id = :p_simple_id   
    WHERE   
        DOST_NODE.DOST_ID = :p_opr_id   
       
    UNION ALL   
       
    SELECT   
        sum(IN_EL.KOL) AS KOL   
    FROM   
        IN_EL   
    WHERE   
        IN_EL.OPR_ID = :p_opr_id and   
        IN_EL.simple_id = :p_simple_id   
    INTO :l_kol   
  DO   
  BEGIN   
    if (l_kol is not null) then begin  
      l_kol_a = 0;  
      select 
        coalesce(Sum(kol),0) as kol 
      from zd_dost_move_node 
      where 
        opr_id_dost_move = :p_opr_id and 
        simple_id = :p_simple_id and 
        not exists (select id from opr_edit where opr_edit.ed_opr_id = zd_dost_move_node.opr_id_zd) 
      into :l_kol_a;  
      r_kol = r_kol + l_kol - l_kol_a;  
    end  
  END   
END^


ALTER PROCEDURE ZDOSTAVKA_SAVE (
    OPR_ID INTEGER,
    SIMPLE_ID INTEGER,
    SKLAD_ID INTEGER,
    KLI_ID INTEGER,
    RAZFASOVKA_ID INTEGER,
    CENA_LAST DOUBLE PRECISION,
    CENA_CL DOUBLE PRECISION,
    KOL_ZAIAVKA DOUBLE PRECISION,
    KOL_NAL DOUBLE PRECISION,
    KOL_RAZ DOUBLE PRECISION,
    POR_EL_ID INTEGER,
    CENA_CL_NO_DDS TYPE OF DOM_CENA)
AS
declare variable L_ID integer; 
begin 
  insert into zaiavka_dostavka (opr_id, simple_id, sklad_id, kli_id, razfasovka_id, cena_last, cena_cl, kol_zaiavka, kol_nal, kol_raz, CENA_CL_NO_DDS) 
  values (:opr_id, :simple_id, :sklad_id, :kli_id, :razfasovka_id, :cena_last, :cena_cl, :kol_zaiavka, :kol_nal, :kol_raz, :CENA_CL_NO_DDS) 
  returning id into :l_id; 
 
  if (por_el_id > 0) then 
    insert into zd_por_node (opr_id_zd, por_el_id) 
    values (:l_id, :por_el_id); 
end^



SET TERM ; ^



/******************************************************************************/
/***                              Descriptions                              ***/
/******************************************************************************/

DESCRIBE TABLE BARCODE
'Баркодове';

DESCRIBE TABLE COMMENT
'Забележки към операции';

DESCRIBE TABLE FAK
'Фактури';

DESCRIBE TABLE FAK_EL
'Елементи на фактури';

DESCRIBE TABLE "IN"
'Доставки';

DESCRIBE TABLE INSTALLATIONS
'Монтажи към заявка за производство';

DESCRIBE TABLE INSTALLATION_PICTURES
'Съдържа картинки на различните видове монтаж на дограми, щори и т.н';

DESCRIBE TABLE INSTALLATION_USERS
'Монтажисти участващи в даден монтаж';

DESCRIBE TABLE INSTALLERS
'конфигурация монтажисти';

DESCRIBE TABLE INV
'Инвентаризации';

DESCRIBE TABLE IN_EL
'Елементи на вход в склада';

DESCRIBE TABLE IZL
'Излишъци';

DESCRIBE TABLE IZP
'Изписвания';

DESCRIBE TABLE IZP_TIP
'Видове изписвания';

DESCRIBE TABLE KASA
'Каси';

DESCRIBE TABLE KLI
'Клиенти';

DESCRIBE TABLE KLI_GROUP
'Групи клиенти';

DESCRIBE TABLE ME
'Мерни единици';

DESCRIBE TABLE MOVE
'Прехвърляния';

DESCRIBE TABLE NAL
'Наличности';

DESCRIBE TABLE OBEKT
'Обекти';

DESCRIBE TABLE OPR
'Операции';

DESCRIBE TABLE OPR_TIP
'Видове операции';

DESCRIBE TABLE OTC
'Отчети';

DESCRIBE TABLE OTC_EL
'Суми към отчети';

DESCRIBE TABLE OUT
'Продажби';

DESCRIBE TABLE OUT_EL
'Елементи на изход от склада';

DESCRIBE TABLE OWNER
'Данни на фирмата';

DESCRIBE TABLE PARI
'Движение на парите';

DESCRIBE TABLE PARI_IO
'Видове приходи/разходи';

DESCRIBE TABLE PAYMENT
'Плащания';

DESCRIBE TABLE POR_EL_PICTURES_NODE
'Връзка между елементи на поръчка и картинки с начина на монтаж';

DESCRIBE TABLE SIMPLE
'Асортименти';

DESCRIBE TABLE SIMPLE_CALC
'Елементи на калкулации';

DESCRIBE TABLE SIMPLE_CENI
'Цени на асортипенти';

DESCRIBE TABLE SIMPLE_GROUP
'Групи асортименти';

DESCRIBE TABLE SIMPLE_RAZ
'Разфасовки';

DESCRIBE TABLE SKLAD
'Складове';

DESCRIBE TABLE SYSTEM
'Системни данни';

DESCRIBE TABLE "USER"
'Потребители';

DESCRIBE TABLE VALUTA
'Валути';



/******************************************************************************/
/***                              Descriptions                              ***/
/******************************************************************************/



/******************************************************************************/
/***                          Fields descriptions                           ***/
/******************************************************************************/

DESCRIBE FIELD OPR_TIP TABLE CFG_LOG
'A - Dobavqne na Simple, E - Promqna na Simple, D - Iztrivane na Simple';

DESCRIBE FIELD STATUS TABLE CRM_INFO_LICENZIA
'0 - активен
1 - неактивен';

DESCRIBE FIELD PAY_TYPE TABLE FAK
'0 - По банка 
1 - в брой 
2 - в брой отложено';

DESCRIBE FIELD PAY_TIP TABLE "IN"
'0-платено; 1-неплатено; 2-платено не от каса; 3-платено след 1;';

DESCRIBE FIELD RF TABLE "IN"
'Require Fakt';

DESCRIBE FIELD ORDER_ID TABLE INSTALLATIONS
'За коя поръчка е монтажа';

DESCRIBE FIELD MONTAGE_SUM TABLE INSTALLATIONS
'Сума за разпреедляне между монтажистите за конкретния монтаж';

DESCRIBE FIELD USER_ID TABLE INSTALLATIONS
'Отговорник за монтажа';

DESCRIBE FIELD DT_INSTALLATION TABLE INSTALLATIONS
'Дата/час на започване на монтажа';

DESCRIBE FIELD DURATION TABLE INSTALLATIONS
'Продължителност на монтажа в минути';

DESCRIBE FIELD BONUS_SUMA TABLE INSTALLATIONS
'Допълнитлено дадена сума на монтажистите, извън заработките';

DESCRIBE FIELD INSTALLATION_ID TABLE INSTALLATION_USERS
'ID Към монтажа, за който е назначен монтажиста';

DESCRIBE FIELD INSTALLER_ID TABLE INSTALLATION_USERS
'монтажист';

DESCRIBE FIELD CLASS TABLE INSTALLATION_USERS
'Показва класа на монтажиста към момента на монтажа. Определя заработката';

DESCRIBE FIELD SUMA TABLE INSTALLATION_USERS
'Сума, кояот ще получи за монтажа';

DESCRIBE FIELD BONUS_SUMA TABLE INSTALLATION_USERS
'Допълнитлено дадена сума на монтажистите, извън заработките';

DESCRIBE FIELD CLASS TABLE INSTALLERS
'Клас на монтажиста. Определя заработките при монтаж';

DESCRIBE FIELD TIP_DDS TABLE LOG_CENI_DDS
'0 - Дост.цени, 1 - Прод. цени, 2 - Дост. цени фак.склад, 3 - Прод. цени фак. склад';

DESCRIBE FIELD TIP_CENI TABLE LOG_CENI_DDS
'0 - без ДДС, 1 - с ДДС';

DESCRIBE FIELD STATUS TABLE OFFERS
'0 - активна 
1 - отказана 
2 -';

DESCRIBE FIELD OFFER_TYPE TABLE OFFERS
'0 - НОРМАЛНА ОФЕРТА 
-4 - ЗА РАЗМЕРИ 
-5 - ПЛАНИРАНА ЗА ПОСЕЩЕНИЕ';

DESCRIBE FIELD TIP TABLE OPR_TEMPLATE
'0-Обикновени шаблони 1-Шаблони за тракери';

DESCRIBE FIELD FP TABLE OUT
'Фискализирана';

DESCRIBE FIELD PAY_TIP TABLE OUT
'0-платено; 1-неплатено; 2-платено не от каса; 3-платено след 1;';

DESCRIBE FIELD IS_BANK TABLE PAYMENT
'0 - плащане в брой 
1 - плащане по банка';

DESCRIBE FIELD STATUS TABLE POR
'0 - Чакащи(набрани нови поръчки) 
1 - Обработвани(обобщен списък с продукти и количества, които да се подготвят за прехвърляне към склада) 
2 - Готови(извършва се прехвърлянето между складовете) 
3 - На път(разнасят се) 
4 - Изпълнени(продадени) 
5 - Анулирани поръчки 
6 - Върнати 
7 - За прехвърляне 
8 - ексван';

DESCRIBE FIELD OTKADE TABLE POR
'1 - Атон 
2 - Импорт 
3 - Покет 
4 - Е-магазин';

DESCRIBE FIELD SALE_OPR_ID TABLE POR
'Операцията на продажбата, с която е продадена поръчката';

DESCRIBE FIELD INSTALLATION_PHASE TABLE POR
'Състояние на монтажа - 0 неизпълнен, 1 - изпълнен, 2 - частично изпълнен, 3 - фиксиран монтаж';

DESCRIBE FIELD FLAG_LINES TABLE POR
'Показва побитово състоянието на поръчките спрямо количествата 
при стойност 0 - без отклонения 
вдигнати битове 
0(1) - редове с маркирано над заявеното 
1(2) - редове с маркирано под заявеното 
2(4) - редове с маркирано 0 
3(8) - маркирана за повторно преброяване';

DESCRIBE FIELD FLAG_LINE TABLE POR_EL
'Изплзва се за бърза проверка на състоянието между заявено и маркирано(преброено) количество на реда от поръчка 
Побитово. 
стойност 0 - количествата са равни 
0(1) - редове с маркирано над заявеното 
1(2) - редове с маркирано под заявеното 
2(4) - редове с маркирано 0';

DESCRIBE FIELD R_TYPE TABLE RAZPAD
'0 - обикновен разпад. Данните са от SIMPLE_CALC 
1 - разпад на меса. данните са от CFG_RAZPAD_CALC';

DESCRIBE FIELD STATUS TABLE TS_OTC_FILES
'0 Неразнесен 
1 Разнесен';


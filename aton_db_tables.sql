/******************************************************************************/
/***          Generated by IBExpert 2021.1.7.1 24.04.2025 15:59:48          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;

CREATE DATABASE 'fdb.unrealsoft.bg/3050:aton_unreal_test'
USER 'SYSDBA' PASSWORD 'UnRe@1S0'
PAGE_SIZE 4096
DEFAULT CHARACTER SET WIN1251 COLLATION WIN1251;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_ACTIONS_ID;
SET GENERATOR GEN_ACTIONS_ID TO 0;

CREATE GENERATOR GEN_ADDRESSES_ID;
SET GENERATOR GEN_ADDRESSES_ID TO 0;

CREATE GENERATOR GEN_AMBALAJ_HISTORY_EDIT_ID;
SET GENERATOR GEN_AMBALAJ_HISTORY_EDIT_ID TO 0;

CREATE GENERATOR GEN_AMBALAJ_HISTORY_ID;
SET GENERATOR GEN_AMBALAJ_HISTORY_ID TO 0;

CREATE GENERATOR GEN_AMBALAJ_HIS_ID;
SET GENERATOR GEN_AMBALAJ_HIS_ID TO 0;

CREATE GENERATOR GEN_AMBALAJ_ID;
SET GENERATOR GEN_AMBALAJ_ID TO 0;

CREATE GENERATOR GEN_AMBALAJ_VARNAT_ID;
SET GENERATOR GEN_AMBALAJ_VARNAT_ID TO 0;

CREATE GENERATOR GEN_ANALYSES_ID;
SET GENERATOR GEN_ANALYSES_ID TO 59043;

CREATE GENERATOR GEN_BARCODE_ID;
SET GENERATOR GEN_BARCODE_ID TO 27;

CREATE GENERATOR GEN_BH_OTSTAPKI_ID;
SET GENERATOR GEN_BH_OTSTAPKI_ID TO 0;

CREATE GENERATOR GEN_BH_PROD_POR_ID;
SET GENERATOR GEN_BH_PROD_POR_ID TO 0;

CREATE GENERATOR GEN_BONUSI_ZA_RAZCHET_ID;
SET GENERATOR GEN_BONUSI_ZA_RAZCHET_ID TO 1892;

CREATE GENERATOR GEN_BONUS_CENA_TOCHKI_ID;
SET GENERATOR GEN_BONUS_CENA_TOCHKI_ID TO 0;

CREATE GENERATOR GEN_BONUS_CONFIG_ID;
SET GENERATOR GEN_BONUS_CONFIG_ID TO 16;

CREATE GENERATOR GEN_BONUS_CONFIG_KLI_ID;
SET GENERATOR GEN_BONUS_CONFIG_KLI_ID TO 14;

CREATE GENERATOR GEN_BONUS_CONFIG_SKLAD_ID;
SET GENERATOR GEN_BONUS_CONFIG_SKLAD_ID TO 0;

CREATE GENERATOR GEN_BONUS_KLI_USED_ID;
SET GENERATOR GEN_BONUS_KLI_USED_ID TO 0;

CREATE GENERATOR GEN_BONUS_RAZCHET_NODE_ID;
SET GENERATOR GEN_BONUS_RAZCHET_NODE_ID TO 0;

CREATE GENERATOR GEN_BROENE_EL_DETAILS_ID;
SET GENERATOR GEN_BROENE_EL_DETAILS_ID TO 0;

CREATE GENERATOR GEN_BROENE_EL_ID;
SET GENERATOR GEN_BROENE_EL_ID TO 77;

CREATE GENERATOR GEN_BROENE_EL_RAZ_NODE_ID;
SET GENERATOR GEN_BROENE_EL_RAZ_NODE_ID TO 0;

CREATE GENERATOR GEN_BROENE_ID;
SET GENERATOR GEN_BROENE_ID TO 27;

CREATE GENERATOR GEN_CENOVA_LISTA_EDIT_ID;
SET GENERATOR GEN_CENOVA_LISTA_EDIT_ID TO 35;

CREATE GENERATOR GEN_CENOVA_LISTA_EL_EDIT_ID;
SET GENERATOR GEN_CENOVA_LISTA_EL_EDIT_ID TO 510;

CREATE GENERATOR GEN_CENOVA_LISTA_EL_ID;
SET GENERATOR GEN_CENOVA_LISTA_EL_ID TO 2055;

CREATE GENERATOR GEN_CENOVA_LISTA_HISTORY_ID;
SET GENERATOR GEN_CENOVA_LISTA_HISTORY_ID TO 601;

CREATE GENERATOR GEN_CENOVA_LISTA_ID;
SET GENERATOR GEN_CENOVA_LISTA_ID TO 34;

CREATE GENERATOR GEN_CENOVA_LISTA_KLI_EDIT_ID;
SET GENERATOR GEN_CENOVA_LISTA_KLI_EDIT_ID TO 4811;

CREATE GENERATOR GEN_CENOVA_LISTA_KLI_ID;
SET GENERATOR GEN_CENOVA_LISTA_KLI_ID TO 15683;

CREATE GENERATOR GEN_CENOVA_LISTA_PROTOKOL_ID;
SET GENERATOR GEN_CENOVA_LISTA_PROTOKOL_ID TO 0;

CREATE GENERATOR GEN_CENOVA_LISTA_SKLAD_EDIT_ID;
SET GENERATOR GEN_CENOVA_LISTA_SKLAD_EDIT_ID TO 0;

CREATE GENERATOR GEN_CENOVA_LISTA_SKLAD_ID;
SET GENERATOR GEN_CENOVA_LISTA_SKLAD_ID TO 0;

CREATE GENERATOR GEN_CFG_FAK_ACCOUNTING_ID;
SET GENERATOR GEN_CFG_FAK_ACCOUNTING_ID TO 0;

CREATE GENERATOR GEN_CFG_INFO_ID;
SET GENERATOR GEN_CFG_INFO_ID TO 0;

CREATE GENERATOR GEN_CFG_KASA_TEMPLATE_EL_ID;
SET GENERATOR GEN_CFG_KASA_TEMPLATE_EL_ID TO 0;

CREATE GENERATOR GEN_CFG_KASA_TEMPLATE_ID;
SET GENERATOR GEN_CFG_KASA_TEMPLATE_ID TO 53985;

CREATE GENERATOR GEN_CFG_LOG_ID;
SET GENERATOR GEN_CFG_LOG_ID TO 167478;

CREATE GENERATOR GEN_CFG_OSN_DDS_ID;
SET GENERATOR GEN_CFG_OSN_DDS_ID TO 7;

CREATE GENERATOR GEN_CFG_PAYMENTS_ID;
SET GENERATOR GEN_CFG_PAYMENTS_ID TO 2;

CREATE GENERATOR GEN_CFG_PAYMENTS_KLI_ID;
SET GENERATOR GEN_CFG_PAYMENTS_KLI_ID TO 0;

CREATE GENERATOR GEN_CFG_RAZPAD_CALC_ID;
SET GENERATOR GEN_CFG_RAZPAD_CALC_ID TO 0;

CREATE GENERATOR GEN_CFG_VEZNI_ID;
SET GENERATOR GEN_CFG_VEZNI_ID TO 4;

CREATE GENERATOR GEN_CLAIM_EL_ID;
SET GENERATOR GEN_CLAIM_EL_ID TO 0;

CREATE GENERATOR GEN_CLAIM_NUM;
SET GENERATOR GEN_CLAIM_NUM TO 0;

CREATE GENERATOR GEN_CLOTH_SIZE_ID;
SET GENERATOR GEN_CLOTH_SIZE_ID TO 1;

CREATE GENERATOR GEN_CN_DELIVERY_ELEMENTS_ID;
SET GENERATOR GEN_CN_DELIVERY_ELEMENTS_ID TO 0;

CREATE GENERATOR GEN_COMMENTS_ID;
SET GENERATOR GEN_COMMENTS_ID TO 406924;

CREATE GENERATOR GEN_COMMENT_EINVOICE_NODE_ID;
SET GENERATOR GEN_COMMENT_EINVOICE_NODE_ID TO 50908;

CREATE GENERATOR GEN_COMMENT_FIRMI_NODE_ID;
SET GENERATOR GEN_COMMENT_FIRMI_NODE_ID TO 13;

CREATE GENERATOR GEN_COMMENT_ID;
SET GENERATOR GEN_COMMENT_ID TO 16441;

CREATE GENERATOR GEN_COMMENT_KLI_NODE_ID;
SET GENERATOR GEN_COMMENT_KLI_NODE_ID TO 465;

CREATE GENERATOR GEN_COMMENT_OPR_NODE_ID;
SET GENERATOR GEN_COMMENT_OPR_NODE_ID TO 350383;

CREATE GENERATOR GEN_COMMENT_OPR_TMPLT_NODE_ID;
SET GENERATOR GEN_COMMENT_OPR_TMPLT_NODE_ID TO 0;

CREATE GENERATOR GEN_COMMENT_SIMPLE_NODE_ID;
SET GENERATOR GEN_COMMENT_SIMPLE_NODE_ID TO 0;

CREATE GENERATOR GEN_COMMENT_TASKS_NODE_ID;
SET GENERATOR GEN_COMMENT_TASKS_NODE_ID TO 5638;

CREATE GENERATOR GEN_COUNTIES_ID;
SET GENERATOR GEN_COUNTIES_ID TO 0;

CREATE GENERATOR GEN_COUNTRIES_ID;
SET GENERATOR GEN_COUNTRIES_ID TO 224;

CREATE GENERATOR GEN_COURSES_ID;
SET GENERATOR GEN_COURSES_ID TO 1;

CREATE GENERATOR GEN_COURSES_OPR_NODE_ID;
SET GENERATOR GEN_COURSES_OPR_NODE_ID TO 13;

CREATE GENERATOR GEN_CRM_ATON_PRODUKT_ID;
SET GENERATOR GEN_CRM_ATON_PRODUKT_ID TO 96;

CREATE GENERATOR GEN_CRM_INFO_LICENZIA_ID;
SET GENERATOR GEN_CRM_INFO_LICENZIA_ID TO 6875;

CREATE GENERATOR GEN_CRM_KLI_ID;
SET GENERATOR GEN_CRM_KLI_ID TO 10227;

CREATE GENERATOR GEN_DEF_RAZ_SIMPLE_ID;
SET GENERATOR GEN_DEF_RAZ_SIMPLE_ID TO 0;

CREATE GENERATOR GEN_DELIVERY_CURRENCY_ID;
SET GENERATOR GEN_DELIVERY_CURRENCY_ID TO 0;

CREATE GENERATOR GEN_DOCUMENTS_ID;
SET GENERATOR GEN_DOCUMENTS_ID TO 27430;

CREATE GENERATOR GEN_DOCUMENTS_TIP_CODE_ID;
SET GENERATOR GEN_DOCUMENTS_TIP_CODE_ID TO 61;

CREATE GENERATOR GEN_DOCUMENTS_TIP_ID;
SET GENERATOR GEN_DOCUMENTS_TIP_ID TO 13;

CREATE GENERATOR GEN_DOC_ID;
SET GENERATOR GEN_DOC_ID TO 0;

CREATE GENERATOR GEN_DOC_NUM;
SET GENERATOR GEN_DOC_NUM TO 0;

CREATE GENERATOR GEN_DOST_CENI_ID;
SET GENERATOR GEN_DOST_CENI_ID TO 23098;

CREATE GENERATOR GEN_DOST_IMPORT_KLI_MAP_ID;
SET GENERATOR GEN_DOST_IMPORT_KLI_MAP_ID TO 2;

CREATE GENERATOR GEN_DOST_IMPORT_RAZF_MAP_ID;
SET GENERATOR GEN_DOST_IMPORT_RAZF_MAP_ID TO 0;

CREATE GENERATOR GEN_DOST_IMPORT_SIMPLE_MAP_ID;
SET GENERATOR GEN_DOST_IMPORT_SIMPLE_MAP_ID TO 3;

CREATE GENERATOR GEN_DOST_NODE_ID;
SET GENERATOR GEN_DOST_NODE_ID TO 54;

CREATE GENERATOR GEN_DVSK_DOK_TYPE_ID;
SET GENERATOR GEN_DVSK_DOK_TYPE_ID TO 5;

CREATE GENERATOR GEN_DVSK_EL_ID;
SET GENERATOR GEN_DVSK_EL_ID TO 41;

CREATE GENERATOR GEN_DVSK_OPR_ID;
SET GENERATOR GEN_DVSK_OPR_ID TO 0;

CREATE GENERATOR GEN_EGROUPS_ID;
SET GENERATOR GEN_EGROUPS_ID TO 0;

CREATE GENERATOR GEN_ESIMPLE_ID;
SET GENERATOR GEN_ESIMPLE_ID TO 0;

CREATE GENERATOR GEN_ETIKETI_ID;
SET GENERATOR GEN_ETIKETI_ID TO 4;

CREATE GENERATOR GEN_EXCHANGE_SN_ID;
SET GENERATOR GEN_EXCHANGE_SN_ID TO 3613;

CREATE GENERATOR GEN_EXPLANATORY_ID;
SET GENERATOR GEN_EXPLANATORY_ID TO 0;

CREATE GENERATOR GEN_EXPORTED_OPERATIONS_ID;
SET GENERATOR GEN_EXPORTED_OPERATIONS_ID TO 0;

CREATE GENERATOR GEN_EXPORTS_ID;
SET GENERATOR GEN_EXPORTS_ID TO 21;

CREATE GENERATOR GEN_EXPORT_OPR_ID;
SET GENERATOR GEN_EXPORT_OPR_ID TO 0;

CREATE GENERATOR GEN_EXPORT_SYNC_ID;
SET GENERATOR GEN_EXPORT_SYNC_ID TO 0;

CREATE GENERATOR GEN_EXPORT_VENDORS_ID;
SET GENERATOR GEN_EXPORT_VENDORS_ID TO 0;

CREATE GENERATOR GEN_EXTENDED_VARANTY_NODE_ID;
SET GENERATOR GEN_EXTENDED_VARANTY_NODE_ID TO 0;

CREATE GENERATOR GEN_FAKTURA_OSNOVANIE_ID;
SET GENERATOR GEN_FAKTURA_OSNOVANIE_ID TO 130;

CREATE GENERATOR GEN_FAK_EL_ID;
SET GENERATOR GEN_FAK_EL_ID TO 307671;

CREATE GENERATOR GEN_FAK_EL_IN_EL_NODE_ID;
SET GENERATOR GEN_FAK_EL_IN_EL_NODE_ID TO 1328;

CREATE GENERATOR GEN_FAK_ID;
SET GENERATOR GEN_FAK_ID TO 209262;

CREATE GENERATOR GEN_FAK_IN_EL_NODE_ID;
SET GENERATOR GEN_FAK_IN_EL_NODE_ID TO 43006;

CREATE GENERATOR GEN_FAK_IN_ID;
SET GENERATOR GEN_FAK_IN_ID TO 54740;

CREATE GENERATOR GEN_FAK_IN_SUMI_ID;
SET GENERATOR GEN_FAK_IN_SUMI_ID TO 2274;

CREATE GENERATOR GEN_FAK_KI_NUMBER_ID;
SET GENERATOR GEN_FAK_KI_NUMBER_ID TO 792;

CREATE GENERATOR GEN_FAK_OUT_EL_NODE_ID;
SET GENERATOR GEN_FAK_OUT_EL_NODE_ID TO 608605;

CREATE GENERATOR GEN_FAK_PROD_ID;
SET GENERATOR GEN_FAK_PROD_ID TO 422867;

CREATE GENERATOR GEN_FAK_PROD_REAL_PROD_NODE_ID;
SET GENERATOR GEN_FAK_PROD_REAL_PROD_NODE_ID TO 0;

CREATE GENERATOR GEN_FIRMI_FAK_DATA_ID;
SET GENERATOR GEN_FIRMI_FAK_DATA_ID TO 189002;

CREATE GENERATOR GEN_FIRMI_ID;
SET GENERATOR GEN_FIRMI_ID TO 5332;

CREATE GENERATOR GEN_FISKAL_BONS_ID;
SET GENERATOR GEN_FISKAL_BONS_ID TO 0;

CREATE GENERATOR GEN_FP_ID;
SET GENERATOR GEN_FP_ID TO 0;

CREATE GENERATOR GEN_FR_REPORTS_ID;
SET GENERATOR GEN_FR_REPORTS_ID TO 429;

CREATE GENERATOR GEN_FU_EXPORT_DOGOVOR_ID;
SET GENERATOR GEN_FU_EXPORT_DOGOVOR_ID TO 30915;

CREATE GENERATOR GEN_FU_ID;
SET GENERATOR GEN_FU_ID TO 0;

CREATE GENERATOR GEN_FU_OBOROTI_ID;
SET GENERATOR GEN_FU_OBOROTI_ID TO 0;

CREATE GENERATOR GEN_FU_SER_NUM_ID;
SET GENERATOR GEN_FU_SER_NUM_ID TO 0;

CREATE GENERATOR GEN_GARANCII_ID;
SET GENERATOR GEN_GARANCII_ID TO 7;

CREATE GENERATOR GEN_GRFINGER_ID;
SET GENERATOR GEN_GRFINGER_ID TO 0;

CREATE GENERATOR GEN_HGROUPS_ID;
SET GENERATOR GEN_HGROUPS_ID TO 0;

CREATE GENERATOR GEN_INI_ID;
SET GENERATOR GEN_INI_ID TO 472;

CREATE GENERATOR GEN_INSTALLATIONS_ID;
SET GENERATOR GEN_INSTALLATIONS_ID TO 0;

CREATE GENERATOR GEN_INSTALLATION_PICTURES_ID;
SET GENERATOR GEN_INSTALLATION_PICTURES_ID TO 0;

CREATE GENERATOR GEN_INSTALLATION_USERS_ID;
SET GENERATOR GEN_INSTALLATION_USERS_ID TO 0;

CREATE GENERATOR GEN_INSTALLERS_GROUP_ID;
SET GENERATOR GEN_INSTALLERS_GROUP_ID TO 0;

CREATE GENERATOR GEN_INSTALLERS_ID;
SET GENERATOR GEN_INSTALLERS_ID TO 0;

CREATE GENERATOR GEN_INTRASTAT_DATA_ID;
SET GENERATOR GEN_INTRASTAT_DATA_ID TO 0;

CREATE GENERATOR GEN_INTRASTAT_DEAL_TYPE_ID;
SET GENERATOR GEN_INTRASTAT_DEAL_TYPE_ID TO 4;

CREATE GENERATOR GEN_INTRASTAT_DELIVERY_CONDITIO;
SET GENERATOR GEN_INTRASTAT_DELIVERY_CONDITIO TO 11;

CREATE GENERATOR GEN_INTRASTAT_REGION_ID;
SET GENERATOR GEN_INTRASTAT_REGION_ID TO 30;

CREATE GENERATOR GEN_INTRASTAT_TRANSPORT_TYPE_ID;
SET GENERATOR GEN_INTRASTAT_TRANSPORT_TYPE_ID TO 8;

CREATE GENERATOR GEN_INV_ID;
SET GENERATOR GEN_INV_ID TO 66;

CREATE GENERATOR GEN_INV_IZL_ID;
SET GENERATOR GEN_INV_IZL_ID TO 19;

CREATE GENERATOR GEN_INV_NACH_INI_ID;
SET GENERATOR GEN_INV_NACH_INI_ID TO 52;

CREATE GENERATOR GEN_INV_OPIS_ID;
SET GENERATOR GEN_INV_OPIS_ID TO 165;

CREATE GENERATOR GEN_IN_EL2_ID;
SET GENERATOR GEN_IN_EL2_ID TO 39;

CREATE GENERATOR GEN_IN_EL_ANUL_ID;
SET GENERATOR GEN_IN_EL_ANUL_ID TO 969;

CREATE GENERATOR GEN_IN_EL_EDIT_ID;
SET GENERATOR GEN_IN_EL_EDIT_ID TO 5200;

CREATE GENERATOR GEN_IN_EL_ID;
SET GENERATOR GEN_IN_EL_ID TO 55416;

CREATE GENERATOR GEN_IN_EL_RAZ_NODE_ID;
SET GENERATOR GEN_IN_EL_RAZ_NODE_ID TO 0;

CREATE GENERATOR GEN_IN_ID;
SET GENERATOR GEN_IN_ID TO 31497;

CREATE GENERATOR GEN_IN_TO_FAK_EL_ID;
SET GENERATOR GEN_IN_TO_FAK_EL_ID TO 0;

CREATE GENERATOR GEN_IZL_ID;
SET GENERATOR GEN_IZL_ID TO 2171;

CREATE GENERATOR GEN_IZP_ID;
SET GENERATOR GEN_IZP_ID TO 1004;

CREATE GENERATOR GEN_IZP_TIP_ID;
SET GENERATOR GEN_IZP_TIP_ID TO 4;

CREATE GENERATOR GEN_KASA_ID;
SET GENERATOR GEN_KASA_ID TO 78;

CREATE GENERATOR GEN_KA_DEMONTAJ_DDS_ID;
SET GENERATOR GEN_KA_DEMONTAJ_DDS_ID TO 2353;

CREATE GENERATOR GEN_KA_INFO_ID;
SET GENERATOR GEN_KA_INFO_ID TO 0;

CREATE GENERATOR GEN_KA_LOG_NODE_ID;
SET GENERATOR GEN_KA_LOG_NODE_ID TO 3486;

CREATE GENERATOR GEN_KA_PROIZVODITEL_ID;
SET GENERATOR GEN_KA_PROIZVODITEL_ID TO 6;

CREATE GENERATOR GEN_KA_SER_NUM_ID;
SET GENERATOR GEN_KA_SER_NUM_ID TO 228963;

CREATE GENERATOR GEN_KI_DOST_NODE_ID;
SET GENERATOR GEN_KI_DOST_NODE_ID TO 197;

CREATE GENERATOR GEN_KI_DOST_SUMA_EL_ID;
SET GENERATOR GEN_KI_DOST_SUMA_EL_ID TO 375;

CREATE GENERATOR GEN_KI_DOST_SUMA_FAK_ID;
SET GENERATOR GEN_KI_DOST_SUMA_FAK_ID TO 14;

CREATE GENERATOR GEN_KI_DOST_SUMA_ID;
SET GENERATOR GEN_KI_DOST_SUMA_ID TO 17;

CREATE GENERATOR GEN_KI_NODE_ID;
SET GENERATOR GEN_KI_NODE_ID TO 811;

CREATE GENERATOR GEN_KI_PROD_SUMA_EL_ID;
SET GENERATOR GEN_KI_PROD_SUMA_EL_ID TO 81;

CREATE GENERATOR GEN_KLI_ABONAMENT_ID;
SET GENERATOR GEN_KLI_ABONAMENT_ID TO 675;

CREATE GENERATOR GEN_KLI_AGENTS_ID;
SET GENERATOR GEN_KLI_AGENTS_ID TO 1;

CREATE GENERATOR GEN_KLI_DIST_NODE_ID;
SET GENERATOR GEN_KLI_DIST_NODE_ID TO 5881;

CREATE GENERATOR GEN_KLI_DOST_NODE_ID;
SET GENERATOR GEN_KLI_DOST_NODE_ID TO 6862;

CREATE GENERATOR GEN_KLI_EXTENDED_VARANTY_ID;
SET GENERATOR GEN_KLI_EXTENDED_VARANTY_ID TO 0;

CREATE GENERATOR GEN_KLI_FIRMA_NODE_ID;
SET GENERATOR GEN_KLI_FIRMA_NODE_ID TO 1816;

CREATE GENERATOR GEN_KLI_GROUP_ID;
SET GENERATOR GEN_KLI_GROUP_ID TO 18;

CREATE GENERATOR GEN_KLI_ID;
SET GENERATOR GEN_KLI_ID TO 8666;

CREATE GENERATOR GEN_KLI_KASA_MAIL_NODE_ID;
SET GENERATOR GEN_KLI_KASA_MAIL_NODE_ID TO 0;

CREATE GENERATOR GEN_KLI_POCKET_NODE_ID;
SET GENERATOR GEN_KLI_POCKET_NODE_ID TO 0;

CREATE GENERATOR GEN_KLI_PRAGOVE_ID;
SET GENERATOR GEN_KLI_PRAGOVE_ID TO 0;

CREATE GENERATOR GEN_KLI_SKLAD_NODE_ID;
SET GENERATOR GEN_KLI_SKLAD_NODE_ID TO 150;

CREATE GENERATOR GEN_KLI_TOCHKI_NODE_ID;
SET GENERATOR GEN_KLI_TOCHKI_NODE_ID TO 0;

CREATE GENERATOR GEN_KLI_USER_NODE_ID;
SET GENERATOR GEN_KLI_USER_NODE_ID TO 0;

CREATE GENERATOR GEN_KONSIGNACIA_ID;
SET GENERATOR GEN_KONSIGNACIA_ID TO 134;

CREATE GENERATOR GEN_LAYOUTS_ID;
SET GENERATOR GEN_LAYOUTS_ID TO 39;

CREATE GENERATOR GEN_LICENCE_EL_ID;
SET GENERATOR GEN_LICENCE_EL_ID TO 147581;

CREATE GENERATOR GEN_LICENZ_PROD_NODE_ID;
SET GENERATOR GEN_LICENZ_PROD_NODE_ID TO 313696;

CREATE GENERATOR GEN_LOCK_OPR_EL_ID;
SET GENERATOR GEN_LOCK_OPR_EL_ID TO 130825;

CREATE GENERATOR GEN_LOCK_OPR_ID;
SET GENERATOR GEN_LOCK_OPR_ID TO 2993;

CREATE GENERATOR GEN_LOG_CENI_DDS_ID;
SET GENERATOR GEN_LOG_CENI_DDS_ID TO 5;

CREATE GENERATOR GEN_MESA_ID;
SET GENERATOR GEN_MESA_ID TO 0;

CREATE GENERATOR GEN_MESA_TIP_ID;
SET GENERATOR GEN_MESA_TIP_ID TO 1;

CREATE GENERATOR GEN_MESSAGES_ID;
SET GENERATOR GEN_MESSAGES_ID TO 5681;

CREATE GENERATOR GEN_METRO_ARTICLES_ID;
SET GENERATOR GEN_METRO_ARTICLES_ID TO 0;

CREATE GENERATOR GEN_METRO_EXPORT_OPR_ID;
SET GENERATOR GEN_METRO_EXPORT_OPR_ID TO 0;

CREATE GENERATOR GEN_METRO_EXPORT_SIMPLES_ID;
SET GENERATOR GEN_METRO_EXPORT_SIMPLES_ID TO 0;

CREATE GENERATOR GEN_METRO_INVOICE_DOCUMENTS_ID;
SET GENERATOR GEN_METRO_INVOICE_DOCUMENTS_ID TO 0;

CREATE GENERATOR GEN_ME_ID;
SET GENERATOR GEN_ME_ID TO 11;

CREATE GENERATOR GEN_MOVE_ID;
SET GENERATOR GEN_MOVE_ID TO 8166;

CREATE GENERATOR GEN_NAL2_ID;
SET GENERATOR GEN_NAL2_ID TO 30;

CREATE GENERATOR GEN_NAL_ID;
SET GENERATOR GEN_NAL_ID TO 170398;

CREATE GENERATOR GEN_OBEKT_ID;
SET GENERATOR GEN_OBEKT_ID TO 18;

CREATE GENERATOR GEN_OFERTA_EL_ID;
SET GENERATOR GEN_OFERTA_EL_ID TO 684;

CREATE GENERATOR GEN_OFERTA_ID;
SET GENERATOR GEN_OFERTA_ID TO 27;

CREATE GENERATOR GEN_OFFERS_ID;
SET GENERATOR GEN_OFFERS_ID TO 0;

CREATE GENERATOR GEN_OFFER_EL_ID;
SET GENERATOR GEN_OFFER_EL_ID TO 0;

CREATE GENERATOR GEN_OFFER_POR_NODE_ID;
SET GENERATOR GEN_OFFER_POR_NODE_ID TO 0;

CREATE GENERATOR GEN_OFFER_TERMS_ID;
SET GENERATOR GEN_OFFER_TERMS_ID TO 0;

CREATE GENERATOR GEN_OFFER_USER_NODE_ID;
SET GENERATOR GEN_OFFER_USER_NODE_ID TO 0;

CREATE GENERATOR GEN_OFF_ON_LINE_LOG_ID;
SET GENERATOR GEN_OFF_ON_LINE_LOG_ID TO 0;

CREATE GENERATOR GEN_OLD_IN_EL_ID;
SET GENERATOR GEN_OLD_IN_EL_ID TO 7297;

CREATE GENERATOR GEN_OLD_OFFERS_ID;
SET GENERATOR GEN_OLD_OFFERS_ID TO 0;

CREATE GENERATOR GEN_OLD_OFFER_EL_ID;
SET GENERATOR GEN_OLD_OFFER_EL_ID TO 0;

CREATE GENERATOR GEN_OLD_OFFER_USER_NODE_ID;
SET GENERATOR GEN_OLD_OFFER_USER_NODE_ID TO 0;

CREATE GENERATOR GEN_OLD_OUT_EL_ID;
SET GENERATOR GEN_OLD_OUT_EL_ID TO 38856;

CREATE GENERATOR GEN_OLD_OUT_EL_PE_ID;
SET GENERATOR GEN_OLD_OUT_EL_PE_ID TO 0;

CREATE GENERATOR GEN_OLD_PARI_EL_ID;
SET GENERATOR GEN_OLD_PARI_EL_ID TO 18988;

CREATE GENERATOR GEN_OLD_POR_EL_PARAMS_ID;
SET GENERATOR GEN_OLD_POR_EL_PARAMS_ID TO 0;

CREATE GENERATOR GEN_OLD_POR_EL_PRICE_COEF_ID;
SET GENERATOR GEN_OLD_POR_EL_PRICE_COEF_ID TO 0;

CREATE GENERATOR GEN_OLD_REQUEST_EL_ID;
SET GENERATOR GEN_OLD_REQUEST_EL_ID TO 0;

CREATE GENERATOR GEN_OLD_TASKS_ID;
SET GENERATOR GEN_OLD_TASKS_ID TO 17711;

CREATE GENERATOR GEN_ONLINE_ROLES_ID;
SET GENERATOR GEN_ONLINE_ROLES_ID TO 15;

CREATE GENERATOR GEN_ONLINE_USERS_ID;
SET GENERATOR GEN_ONLINE_USERS_ID TO 2;

CREATE GENERATOR GEN_ON_OFF_LINE_LOG;
SET GENERATOR GEN_ON_OFF_LINE_LOG TO 1792;

CREATE GENERATOR GEN_OPENED_FORMS_SYS_ID;
SET GENERATOR GEN_OPENED_FORMS_SYS_ID TO 8;

CREATE GENERATOR GEN_OPRGARANCIA_ID;
SET GENERATOR GEN_OPRGARANCIA_ID TO 289;

CREATE GENERATOR GEN_OPR_AMBALAJ_NODE_ID;
SET GENERATOR GEN_OPR_AMBALAJ_NODE_ID TO 0;

CREATE GENERATOR GEN_OPR_ANUL_ID;
SET GENERATOR GEN_OPR_ANUL_ID TO 22977;

CREATE GENERATOR GEN_OPR_EDIT_ID;
SET GENERATOR GEN_OPR_EDIT_ID TO 48695;

CREATE GENERATOR GEN_OPR_GARANCIA_NODE_ID;
SET GENERATOR GEN_OPR_GARANCIA_NODE_ID TO 183;

CREATE GENERATOR GEN_OPR_ID;
SET GENERATOR GEN_OPR_ID TO 1552348;

CREATE GENERATOR GEN_OPR_PADEJ_ID;
SET GENERATOR GEN_OPR_PADEJ_ID TO 672755;

CREATE GENERATOR GEN_OPR_PAYMENT_NODE_ID;
SET GENERATOR GEN_OPR_PAYMENT_NODE_ID TO 641835;

CREATE GENERATOR GEN_OPR_PRODUCTION_REQUEST_ID;
SET GENERATOR GEN_OPR_PRODUCTION_REQUEST_ID TO 0;

CREATE GENERATOR GEN_OPR_RAZPAD_NODE_ID;
SET GENERATOR GEN_OPR_RAZPAD_NODE_ID TO 34850;

CREATE GENERATOR GEN_OPR_RECEPIES_EL_ID;
SET GENERATOR GEN_OPR_RECEPIES_EL_ID TO 0;

CREATE GENERATOR GEN_OPR_RECEPIES_ID;
SET GENERATOR GEN_OPR_RECEPIES_ID TO 0;

CREATE GENERATOR GEN_OPR_REFUSED_ID;
SET GENERATOR GEN_OPR_REFUSED_ID TO 1258;

CREATE GENERATOR GEN_OPR_REMOTE_ID;
SET GENERATOR GEN_OPR_REMOTE_ID TO 0;

CREATE GENERATOR GEN_OPR_SUMI_ID;
SET GENERATOR GEN_OPR_SUMI_ID TO 513106;

CREATE GENERATOR GEN_OPR_TEMPLATE_EL_ID;
SET GENERATOR GEN_OPR_TEMPLATE_EL_ID TO 67486;

CREATE GENERATOR GEN_OPR_TEMPLATE_GEN_ID;
SET GENERATOR GEN_OPR_TEMPLATE_GEN_ID TO 25746;

CREATE GENERATOR GEN_OPR_TEMPLATE_ID;
SET GENERATOR GEN_OPR_TEMPLATE_ID TO 12002;

CREATE GENERATOR GEN_OPR_TEMPLATE_TASK_NODE_ID;
SET GENERATOR GEN_OPR_TEMPLATE_TASK_NODE_ID TO 244881;

CREATE GENERATOR GEN_OPR_TIP_ID;
SET GENERATOR GEN_OPR_TIP_ID TO 0;

CREATE GENERATOR GEN_OPR_WAITING_NODE_ID;
SET GENERATOR GEN_OPR_WAITING_NODE_ID TO 1;

CREATE GENERATOR GEN_ORDER_ACTIONS_ID;
SET GENERATOR GEN_ORDER_ACTIONS_ID TO 1;

CREATE GENERATOR GEN_ORDER_TAG;
SET GENERATOR GEN_ORDER_TAG TO 0;

CREATE GENERATOR GEN_OTCS_OPR_NODE_ID;
SET GENERATOR GEN_OTCS_OPR_NODE_ID TO 0;

CREATE GENERATOR GEN_OTC_EL_EDIT_ID;
SET GENERATOR GEN_OTC_EL_EDIT_ID TO 521239;

CREATE GENERATOR GEN_OTC_EL_EDIT_P_NOMER;
SET GENERATOR GEN_OTC_EL_EDIT_P_NOMER TO 17230;

CREATE GENERATOR GEN_OTC_EL_ID;
SET GENERATOR GEN_OTC_EL_ID TO 155782;

CREATE GENERATOR GEN_OTC_ID;
SET GENERATOR GEN_OTC_ID TO 6163;

CREATE GENERATOR GEN_OTC_PER_ID;
SET GENERATOR GEN_OTC_PER_ID TO 65074;

CREATE GENERATOR GEN_OUT_EL2_ID;
SET GENERATOR GEN_OUT_EL2_ID TO 39;

CREATE GENERATOR GEN_OUT_EL_ANUL_ID;
SET GENERATOR GEN_OUT_EL_ANUL_ID TO 13211;

CREATE GENERATOR GEN_OUT_EL_EDIT_ID;
SET GENERATOR GEN_OUT_EL_EDIT_ID TO 24676;

CREATE GENERATOR GEN_OUT_EL_FAK_OUT_EL_ID;
SET GENERATOR GEN_OUT_EL_FAK_OUT_EL_ID TO 0;

CREATE GENERATOR GEN_OUT_EL_ID;
SET GENERATOR GEN_OUT_EL_ID TO 833442;

CREATE GENERATOR GEN_OUT_EL_RAZ_NODE_ID;
SET GENERATOR GEN_OUT_EL_RAZ_NODE_ID TO 0;

CREATE GENERATOR GEN_OUT_ID;
SET GENERATOR GEN_OUT_ID TO 470849;

CREATE GENERATOR GEN_OWNER_BANKI_ID;
SET GENERATOR GEN_OWNER_BANKI_ID TO 1;

CREATE GENERATOR GEN_OWNER_ID;
SET GENERATOR GEN_OWNER_ID TO 1;

CREATE GENERATOR GEN_PARI_DIST_ID;
SET GENERATOR GEN_PARI_DIST_ID TO 126729;

CREATE GENERATOR GEN_PARI_EL_ANUL_ID;
SET GENERATOR GEN_PARI_EL_ANUL_ID TO 307;

CREATE GENERATOR GEN_PARI_EL_EDIT_ID;
SET GENERATOR GEN_PARI_EL_EDIT_ID TO 1644;

CREATE GENERATOR GEN_PARI_FAKINUSLUGA_NODE_ID;
SET GENERATOR GEN_PARI_FAKINUSLUGA_NODE_ID TO 40391;

CREATE GENERATOR GEN_PARI_FAK_NODE_ID;
SET GENERATOR GEN_PARI_FAK_NODE_ID TO 205921;

CREATE GENERATOR GEN_PARI_ID;
SET GENERATOR GEN_PARI_ID TO 447740;

CREATE GENERATOR GEN_PARI_IO_ID;
SET GENERATOR GEN_PARI_IO_ID TO 143;

CREATE GENERATOR GEN_PARI_NODE_ID;
SET GENERATOR GEN_PARI_NODE_ID TO 23916;

CREATE GENERATOR GEN_PARI_SKLOPR_NODE_ID;
SET GENERATOR GEN_PARI_SKLOPR_NODE_ID TO 278811;

CREATE GENERATOR GEN_PARI_TMP_ID;
SET GENERATOR GEN_PARI_TMP_ID TO 20544;

CREATE GENERATOR GEN_PARTIDA_EL_ID;
SET GENERATOR GEN_PARTIDA_EL_ID TO 63557;

CREATE GENERATOR GEN_PARTIDA_EL_NODE_ID;
SET GENERATOR GEN_PARTIDA_EL_NODE_ID TO 16247368;

CREATE GENERATOR GEN_PARTIDA_EL_PRINT_ID;
SET GENERATOR GEN_PARTIDA_EL_PRINT_ID TO 0;

CREATE GENERATOR GEN_PARTIDA_IN_EL_NODE_ID;
SET GENERATOR GEN_PARTIDA_IN_EL_NODE_ID TO 93046;

CREATE GENERATOR GEN_PARTIDA_IZL_NODE_ID;
SET GENERATOR GEN_PARTIDA_IZL_NODE_ID TO 288;

CREATE GENERATOR GEN_PARTIDA_NAL_ID;
SET GENERATOR GEN_PARTIDA_NAL_ID TO 93724;

CREATE GENERATOR GEN_PARTIDA_OUT_EL_NODE_ID;
SET GENERATOR GEN_PARTIDA_OUT_EL_NODE_ID TO 16151965;

CREATE GENERATOR GEN_PARTIDA_PROP_NODE_ID;
SET GENERATOR GEN_PARTIDA_PROP_NODE_ID TO 0;

CREATE GENERATOR GEN_PARTIDA_RETURN_NODE_ID;
SET GENERATOR GEN_PARTIDA_RETURN_NODE_ID TO 1151;

CREATE GENERATOR GEN_PATHS_ID;
SET GENERATOR GEN_PATHS_ID TO 0;

CREATE GENERATOR GEN_PAYMENTS_EL_ID;
SET GENERATOR GEN_PAYMENTS_EL_ID TO 0;

CREATE GENERATOR GEN_PAYMENT_AVANSOVO_ID;
SET GENERATOR GEN_PAYMENT_AVANSOVO_ID TO 2;

CREATE GENERATOR GEN_PAYMENT_ID;
SET GENERATOR GEN_PAYMENT_ID TO 258059;

CREATE GENERATOR GEN_PAYMENT_INDEX;
SET GENERATOR GEN_PAYMENT_INDEX TO 2978;

CREATE GENERATOR GEN_PAYMENT_NODE_ID;
SET GENERATOR GEN_PAYMENT_NODE_ID TO 1281438;

CREATE GENERATOR GEN_PAYMENT_NOW_ID;
SET GENERATOR GEN_PAYMENT_NOW_ID TO 20;

CREATE GENERATOR GEN_PAY_NOCASH_NODE_ID;
SET GENERATOR GEN_PAY_NOCASH_NODE_ID TO 0;

CREATE GENERATOR GEN_PLACE_ID;
SET GENERATOR GEN_PLACE_ID TO 492;

CREATE GENERATOR GEN_PL_DELIVERY_STORAGE_EDIT_ID;
SET GENERATOR GEN_PL_DELIVERY_STORAGE_EDIT_ID TO 0;

CREATE GENERATOR GEN_POCKET_OTC_ID;
SET GENERATOR GEN_POCKET_OTC_ID TO 0;

CREATE GENERATOR GEN_POCKET_SHOP_ID;
SET GENERATOR GEN_POCKET_SHOP_ID TO 0;

CREATE GENERATOR GEN_POR_DOST_KOL_RZV_ID;
SET GENERATOR GEN_POR_DOST_KOL_RZV_ID TO 0;

CREATE GENERATOR GEN_POR_EDIT_ID;
SET GENERATOR GEN_POR_EDIT_ID TO 0;

CREATE GENERATOR GEN_POR_EL_COMMENT_ID;
SET GENERATOR GEN_POR_EL_COMMENT_ID TO 0;

CREATE GENERATOR GEN_POR_EL_EDIT_ID;
SET GENERATOR GEN_POR_EL_EDIT_ID TO 0;

CREATE GENERATOR GEN_POR_EL_EXPLANATORY_ID;
SET GENERATOR GEN_POR_EL_EXPLANATORY_ID TO 0;

CREATE GENERATOR GEN_POR_EL_ID;
SET GENERATOR GEN_POR_EL_ID TO 8;

CREATE GENERATOR GEN_POR_EL_PICTURES_NODE_ID;
SET GENERATOR GEN_POR_EL_PICTURES_NODE_ID TO 0;

CREATE GENERATOR GEN_POR_EL_PRICE_COEFICIENT_ID;
SET GENERATOR GEN_POR_EL_PRICE_COEFICIENT_ID TO 0;

CREATE GENERATOR GEN_POR_EL_PRODUCTION_ID;
SET GENERATOR GEN_POR_EL_PRODUCTION_ID TO 0;

CREATE GENERATOR GEN_POR_EL_RAZ_NODE_ID;
SET GENERATOR GEN_POR_EL_RAZ_NODE_ID TO 0;

CREATE GENERATOR GEN_POR_EL_REQUEST_NODE_ID;
SET GENERATOR GEN_POR_EL_REQUEST_NODE_ID TO 0;

CREATE GENERATOR GEN_POR_FAK_PROD_NODE_ID;
SET GENERATOR GEN_POR_FAK_PROD_NODE_ID TO 0;

CREATE GENERATOR GEN_POR_FORMULA_PARAMS_ID;
SET GENERATOR GEN_POR_FORMULA_PARAMS_ID TO 0;

CREATE GENERATOR GEN_POR_ID;
SET GENERATOR GEN_POR_ID TO 8;

CREATE GENERATOR GEN_POR_OFFER_TERMS_NODE_ID;
SET GENERATOR GEN_POR_OFFER_TERMS_NODE_ID TO 0;

CREATE GENERATOR GEN_POR_OUT_NODE_ID;
SET GENERATOR GEN_POR_OUT_NODE_ID TO 0;

CREATE GENERATOR GEN_POR_PRODUCTION_REQUEST_NODE;
SET GENERATOR GEN_POR_PRODUCTION_REQUEST_NODE TO 0;

CREATE GENERATOR GEN_POR_PROP_NODE_ID;
SET GENERATOR GEN_POR_PROP_NODE_ID TO 0;

CREATE GENERATOR GEN_POR_RAZ_EDIT_ID;
SET GENERATOR GEN_POR_RAZ_EDIT_ID TO 0;

CREATE GENERATOR GEN_POR_ZD_NODE_ID;
SET GENERATOR GEN_POR_ZD_NODE_ID TO 0;

CREATE GENERATOR GEN_POS_OUT_EL_TO_SRV_OUT_EL_ID;
SET GENERATOR GEN_POS_OUT_EL_TO_SRV_OUT_EL_ID TO 0;

CREATE GENERATOR GEN_POS_TO_SRV_ID;
SET GENERATOR GEN_POS_TO_SRV_ID TO 0;

CREATE GENERATOR GEN_POTV_EL_ID;
SET GENERATOR GEN_POTV_EL_ID TO 374550;

CREATE GENERATOR GEN_POTV_ID;
SET GENERATOR GEN_POTV_ID TO 1607;

CREATE GENERATOR GEN_POTV_MOVE_EL_ID;
SET GENERATOR GEN_POTV_MOVE_EL_ID TO 1165;

CREATE GENERATOR GEN_PRICE_LIST_DELIVERY_STORAGE;
SET GENERATOR GEN_PRICE_LIST_DELIVERY_STORAGE TO 0;

CREATE GENERATOR GEN_PRODUCTION_EXPLANATORY_ID;
SET GENERATOR GEN_PRODUCTION_EXPLANATORY_ID TO 0;

CREATE GENERATOR GEN_PRODUCTION_GRUPI_ID;
SET GENERATOR GEN_PRODUCTION_GRUPI_ID TO 0;

CREATE GENERATOR GEN_PRODUCTION_ID;
SET GENERATOR GEN_PRODUCTION_ID TO 680;

CREATE GENERATOR GEN_PRODUCTION_IN_EL_PARAMS_ID;
SET GENERATOR GEN_PRODUCTION_IN_EL_PARAMS_ID TO 0;

CREATE GENERATOR GEN_PRODUCTION_KAPARO_NODE_ID;
SET GENERATOR GEN_PRODUCTION_KAPARO_NODE_ID TO 0;

CREATE GENERATOR GEN_PRODUCTION_MONTAJISTI_ID;
SET GENERATOR GEN_PRODUCTION_MONTAJISTI_ID TO 0;

CREATE GENERATOR GEN_PRODUCTION_REQUEST_EL_ID;
SET GENERATOR GEN_PRODUCTION_REQUEST_EL_ID TO 0;

CREATE GENERATOR GEN_PRODUCTION_ZARABOTKA_ID;
SET GENERATOR GEN_PRODUCTION_ZARABOTKA_ID TO 0;

CREATE GENERATOR GEN_PRODUCTION_ZARABOTKA_IZPL;
SET GENERATOR GEN_PRODUCTION_ZARABOTKA_IZPL TO 0;

CREATE GENERATOR GEN_PRODUCT_WAREHOUSE_ID;
SET GENERATOR GEN_PRODUCT_WAREHOUSE_ID TO 0;

CREATE GENERATOR GEN_PROD_AVANS_ID;
SET GENERATOR GEN_PROD_AVANS_ID TO 0;

CREATE GENERATOR GEN_PROD_CENI_EL_ID;
SET GENERATOR GEN_PROD_CENI_EL_ID TO 809862;

CREATE GENERATOR GEN_PROD_NODE_ID;
SET GENERATOR GEN_PROD_NODE_ID TO 2;

CREATE GENERATOR GEN_PROD_PRODUCTION_ID;
SET GENERATOR GEN_PROD_PRODUCTION_ID TO 0;

CREATE GENERATOR GEN_PROD_REQUEST_PRODUCTION;
SET GENERATOR GEN_PROD_REQUEST_PRODUCTION TO 0;

CREATE GENERATOR GEN_PROD_STOCK_EL_ID;
SET GENERATOR GEN_PROD_STOCK_EL_ID TO 0;

CREATE GENERATOR GEN_PROD_STOCK_ID;
SET GENERATOR GEN_PROD_STOCK_ID TO 0;

CREATE GENERATOR GEN_PROD_VAUCHER_ID;
SET GENERATOR GEN_PROD_VAUCHER_ID TO 0;

CREATE GENERATOR GEN_PROFORMA_TO_FAK_ID;
SET GENERATOR GEN_PROFORMA_TO_FAK_ID TO 860;

CREATE GENERATOR GEN_PROP_NODE_ID;
SET GENERATOR GEN_PROP_NODE_ID TO 0;

CREATE GENERATOR GEN_PR_REQUEST_EXPLANATORY_ID;
SET GENERATOR GEN_PR_REQUEST_EXPLANATORY_ID TO 0;

CREATE GENERATOR GEN_PR_REQ_EL_PRICE_COEF_ID;
SET GENERATOR GEN_PR_REQ_EL_PRICE_COEF_ID TO 0;

CREATE GENERATOR GEN_RAZFASOVKA_ID;
SET GENERATOR GEN_RAZFASOVKA_ID TO 0;

CREATE GENERATOR GEN_RAZPAD_ID;
SET GENERATOR GEN_RAZPAD_ID TO 1;

CREATE GENERATOR GEN_RAZ_ELEMENT_ID;
SET GENERATOR GEN_RAZ_ELEMENT_ID TO 0;

CREATE GENERATOR GEN_RAZ_TIP_ID;
SET GENERATOR GEN_RAZ_TIP_ID TO 0;

CREATE GENERATOR GEN_RDB$PARTIDA_NAL_ID;
SET GENERATOR GEN_RDB$PARTIDA_NAL_ID TO 10503;

CREATE GENERATOR GEN_REAL_IZP_FAKT_IZP_NODE_ID;
SET GENERATOR GEN_REAL_IZP_FAKT_IZP_NODE_ID TO 0;

CREATE GENERATOR GEN_REQUEST_FORMULA_PARAMS_ID;
SET GENERATOR GEN_REQUEST_FORMULA_PARAMS_ID TO 0;

CREATE GENERATOR GEN_REQUEST_PRODUCTION_NODE_ID;
SET GENERATOR GEN_REQUEST_PRODUCTION_NODE_ID TO 0;

CREATE GENERATOR GEN_RETPRODRETFAKPRODKINODEID;
SET GENERATOR GEN_RETPRODRETFAKPRODKINODEID TO 0;

CREATE GENERATOR GEN_RETURN_DOST_KOL_ID;
SET GENERATOR GEN_RETURN_DOST_KOL_ID TO 0;

CREATE GENERATOR GEN_RET_DOST_KI_DOST_NODE_ID;
SET GENERATOR GEN_RET_DOST_KI_DOST_NODE_ID TO 1;

CREATE GENERATOR GEN_RET_DOST_MOVE_NODE_ID;
SET GENERATOR GEN_RET_DOST_MOVE_NODE_ID TO 1;

CREATE GENERATOR GEN_RET_STOKA_DOST_ID;
SET GENERATOR GEN_RET_STOKA_DOST_ID TO 22;

CREATE GENERATOR GEN_RET_STOKA_DOST_KI_ID;
SET GENERATOR GEN_RET_STOKA_DOST_KI_ID TO 174;

CREATE GENERATOR GEN_RET_STOKA_PROD_ID;
SET GENERATOR GEN_RET_STOKA_PROD_ID TO 908;

CREATE GENERATOR GEN_RET_STOKA_PROD_KI_ID;
SET GENERATOR GEN_RET_STOKA_PROD_KI_ID TO 759;

CREATE GENERATOR GEN_ROUND_TIP_ID;
SET GENERATOR GEN_ROUND_TIP_ID TO 3;

CREATE GENERATOR GEN_SASTAV_ID;
SET GENERATOR GEN_SASTAV_ID TO 2;

CREATE GENERATOR GEN_SELEKCIQ_ID;
SET GENERATOR GEN_SELEKCIQ_ID TO 164;

CREATE GENERATOR GEN_SELEKCIQ_KALC_ID;
SET GENERATOR GEN_SELEKCIQ_KALC_ID TO 0;

CREATE GENERATOR GEN_SELEKCIQ_KASA_EL_ID;
SET GENERATOR GEN_SELEKCIQ_KASA_EL_ID TO 0;

CREATE GENERATOR GEN_SELEKCIQ_KLI_EL_ID;
SET GENERATOR GEN_SELEKCIQ_KLI_EL_ID TO 6704;

CREATE GENERATOR GEN_SELEKCIQ_SIM_EL_ID;
SET GENERATOR GEN_SELEKCIQ_SIM_EL_ID TO 6883;

CREATE GENERATOR GEN_SEL_OPRS_ID;
SET GENERATOR GEN_SEL_OPRS_ID TO 1876;

CREATE GENERATOR GEN_SEL_OPR_ID;
SET GENERATOR GEN_SEL_OPR_ID TO 87243;

CREATE GENERATOR GEN_SEL_SIMPLE_ID;
SET GENERATOR GEN_SEL_SIMPLE_ID TO 12599;

CREATE GENERATOR GEN_SEL_SIM_QR_ID;
SET GENERATOR GEN_SEL_SIM_QR_ID TO 1621635;

CREATE GENERATOR GEN_SERIAL_NUM_ID;
SET GENERATOR GEN_SERIAL_NUM_ID TO 35372;

CREATE GENERATOR GEN_SIMPLE_ACZIS_ID;
SET GENERATOR GEN_SIMPLE_ACZIS_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_ADRESIRANE_GRUPA_ID;
SET GENERATOR GEN_SIMPLE_ADRESIRANE_GRUPA_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_ADRESIRANE_ID;
SET GENERATOR GEN_SIMPLE_ADRESIRANE_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_ADRESIRANE_NODE_ID;
SET GENERATOR GEN_SIMPLE_ADRESIRANE_NODE_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_CALC_ID;
SET GENERATOR GEN_SIMPLE_CALC_ID TO 12823;

CREATE GENERATOR GEN_SIMPLE_CALC_OLD_ID;
SET GENERATOR GEN_SIMPLE_CALC_OLD_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_CENI_ID;
SET GENERATOR GEN_SIMPLE_CENI_ID TO 3;

CREATE GENERATOR GEN_SIMPLE_EXPLANATORY_ID;
SET GENERATOR GEN_SIMPLE_EXPLANATORY_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_GROUP_ID;
SET GENERATOR GEN_SIMPLE_GROUP_ID TO 44;

CREATE GENERATOR GEN_SIMPLE_ID;
SET GENERATOR GEN_SIMPLE_ID TO 6067;

CREATE GENERATOR GEN_SIMPLE_KA_BIM_ID;
SET GENERATOR GEN_SIMPLE_KA_BIM_ID TO 118;

CREATE GENERATOR GEN_SIMPLE_KOD_ID;
SET GENERATOR GEN_SIMPLE_KOD_ID TO 1;

CREATE GENERATOR GEN_SIMPLE_MONTAGE_ID;
SET GENERATOR GEN_SIMPLE_MONTAGE_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_OBSERV_ID;
SET GENERATOR GEN_SIMPLE_OBSERV_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_PICT_ID;
SET GENERATOR GEN_SIMPLE_PICT_ID TO 14;

CREATE GENERATOR GEN_SIMPLE_PROP_ID;
SET GENERATOR GEN_SIMPLE_PROP_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_PROP_MINOR_ID;
SET GENERATOR GEN_SIMPLE_PROP_MINOR_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_PROP_NODE_ID;
SET GENERATOR GEN_SIMPLE_PROP_NODE_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_RAZ_ID;
SET GENERATOR GEN_SIMPLE_RAZ_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_SKLAD_KOD_ID;
SET GENERATOR GEN_SIMPLE_SKLAD_KOD_ID TO 2;

CREATE GENERATOR GEN_SIMPLE_TABLE_PRICES_ID;
SET GENERATOR GEN_SIMPLE_TABLE_PRICES_ID TO 0;

CREATE GENERATOR GEN_SIMPLE_TRACKER_ID;
SET GENERATOR GEN_SIMPLE_TRACKER_ID TO 3;

CREATE GENERATOR GEN_SIMPLE_ZAETOST_ID;
SET GENERATOR GEN_SIMPLE_ZAETOST_ID TO 0;

CREATE GENERATOR GEN_SKLAD_ID;
SET GENERATOR GEN_SKLAD_ID TO 42;

CREATE GENERATOR GEN_SKLAD_MOL_ID;
SET GENERATOR GEN_SKLAD_MOL_ID TO 3;

CREATE GENERATOR GEN_SKLAD_SELEKCIQ_NODE_ID;
SET GENERATOR GEN_SKLAD_SELEKCIQ_NODE_ID TO 2;

CREATE GENERATOR GEN_SLEDI_KLI_ID;
SET GENERATOR GEN_SLEDI_KLI_ID TO 1127;

CREATE GENERATOR GEN_SLEDI_LICENZ_ID;
SET GENERATOR GEN_SLEDI_LICENZ_ID TO 49465;

CREATE GENERATOR GEN_SLEDI_ROUMING_LOG_ID;
SET GENERATOR GEN_SLEDI_ROUMING_LOG_ID TO 265629;

CREATE GENERATOR GEN_SLEDI_ROUMING_LOG_PAIED_ID;
SET GENERATOR GEN_SLEDI_ROUMING_LOG_PAIED_ID TO 11730;

CREATE GENERATOR GEN_SLEDI_SIMPLE_ID;
SET GENERATOR GEN_SLEDI_SIMPLE_ID TO 4;

CREATE GENERATOR GEN_SLEDI_TEMPLATE_EL_GEN_ID;
SET GENERATOR GEN_SLEDI_TEMPLATE_EL_GEN_ID TO 184365;

CREATE GENERATOR GEN_SLEDI_TEMPLATE_EL_ID;
SET GENERATOR GEN_SLEDI_TEMPLATE_EL_ID TO 5394;

CREATE GENERATOR GEN_STORE_OBJ_ID;
SET GENERATOR GEN_STORE_OBJ_ID TO 0;

CREATE GENERATOR GEN_STORE_OTC_ID;
SET GENERATOR GEN_STORE_OTC_ID TO 0;

CREATE GENERATOR GEN_STORNO_ID;
SET GENERATOR GEN_STORNO_ID TO 8363;

CREATE GENERATOR GEN_STORNO_REASON_ID;
SET GENERATOR GEN_STORNO_REASON_ID TO 0;

CREATE GENERATOR GEN_SUMI_ID;
SET GENERATOR GEN_SUMI_ID TO 900298;

CREATE GENERATOR GEN_SYNC_ADVANCE_PAYMENT_ID;
SET GENERATOR GEN_SYNC_ADVANCE_PAYMENT_ID TO 0;

CREATE GENERATOR GEN_SYSTEM2_ID;
SET GENERATOR GEN_SYSTEM2_ID TO 1;

CREATE GENERATOR GEN_TABLE_PRICES_DISCOUNTS_ID;
SET GENERATOR GEN_TABLE_PRICES_DISCOUNTS_ID TO 0;

CREATE GENERATOR GEN_TABLE_PRICE_COEFICIENT_ID;
SET GENERATOR GEN_TABLE_PRICE_COEFICIENT_ID TO 0;

CREATE GENERATOR GEN_TABLE_PRICE_SIMPLE_NODE_ID;
SET GENERATOR GEN_TABLE_PRICE_SIMPLE_NODE_ID TO 0;

CREATE GENERATOR GEN_TASKS_EL_ID;
SET GENERATOR GEN_TASKS_EL_ID TO 368935;

CREATE GENERATOR GEN_TASKS_ID;
SET GENERATOR GEN_TASKS_ID TO 250528;

CREATE GENERATOR GEN_TASKS_TIP_ID;
SET GENERATOR GEN_TASKS_TIP_ID TO 0;

CREATE GENERATOR GEN_TBL_KA_ID;
SET GENERATOR GEN_TBL_KA_ID TO 7989;

CREATE GENERATOR GEN_TBL_KA_OPR_LOG_ID;
SET GENERATOR GEN_TBL_KA_OPR_LOG_ID TO 19598;

CREATE GENERATOR GEN_TBL_KA_OPR_NODE_ID;
SET GENERATOR GEN_TBL_KA_OPR_NODE_ID TO 207041;

CREATE GENERATOR GEN_TBL_KA_REGNOM_NODE_ID;
SET GENERATOR GEN_TBL_KA_REGNOM_NODE_ID TO 12971;

CREATE GENERATOR GEN_TBL_KA_STOP_SIM_NODE_ID;
SET GENERATOR GEN_TBL_KA_STOP_SIM_NODE_ID TO 3418;

CREATE GENERATOR GEN_TBL_LOG_ID;
SET GENERATOR GEN_TBL_LOG_ID TO 177361;

CREATE GENERATOR GEN_TD_SAOTV_ID;
SET GENERATOR GEN_TD_SAOTV_ID TO 0;

CREATE GENERATOR GEN_TEMP$SLEDI_DATA_1_ID;
SET GENERATOR GEN_TEMP$SLEDI_DATA_1_ID TO 4818;

CREATE GENERATOR GEN_TEMP$SLEDI_DATA_ID;
SET GENERATOR GEN_TEMP$SLEDI_DATA_ID TO 0;

CREATE GENERATOR GEN_TEMP_IMPORT_ID;
SET GENERATOR GEN_TEMP_IMPORT_ID TO 0;

CREATE GENERATOR GEN_TEMP_IMPORT_VER;
SET GENERATOR GEN_TEMP_IMPORT_VER TO 0;

CREATE GENERATOR GEN_TEMP_PROD_FOR_ANNUL_NUMBER;
SET GENERATOR GEN_TEMP_PROD_FOR_ANNUL_NUMBER TO 330;

CREATE GENERATOR GEN_TIP_REFUSED_ID;
SET GENERATOR GEN_TIP_REFUSED_ID TO 0;

CREATE GENERATOR GEN_TIP_RESOLUTION_ID;
SET GENERATOR GEN_TIP_RESOLUTION_ID TO 0;

CREATE GENERATOR GEN_TMP_ELTRADE_IMPORT_ID;
SET GENERATOR GEN_TMP_ELTRADE_IMPORT_ID TO 0;

CREATE GENERATOR GEN_TMP_MARK_EL_ID;
SET GENERATOR GEN_TMP_MARK_EL_ID TO 1;

CREATE GENERATOR GEN_TMP_OPR_ID;
SET GENERATOR GEN_TMP_OPR_ID TO 1;

CREATE GENERATOR GEN_TMP_OPR_SN_ID;
SET GENERATOR GEN_TMP_OPR_SN_ID TO 0;

CREATE GENERATOR GEN_TMP_PROD_TO_FAK_NUMBER;
SET GENERATOR GEN_TMP_PROD_TO_FAK_NUMBER TO 171549;

CREATE GENERATOR GEN_TMP_SIMPLE_SEL_PROD1_ID;
SET GENERATOR GEN_TMP_SIMPLE_SEL_PROD1_ID TO 0;

CREATE GENERATOR GEN_TS_OTC_FILES_ID;
SET GENERATOR GEN_TS_OTC_FILES_ID TO 0;

CREATE GENERATOR GEN_UNFINISHED_SALES_ID;
SET GENERATOR GEN_UNFINISHED_SALES_ID TO 0;

CREATE GENERATOR GEN_UNP_ID;
SET GENERATOR GEN_UNP_ID TO 0;

CREATE GENERATOR GEN_UNR_AGENT_ANALYSES_ID;
SET GENERATOR GEN_UNR_AGENT_ANALYSES_ID TO 32864;

CREATE GENERATOR GEN_UNR_AGENT_ID;
SET GENERATOR GEN_UNR_AGENT_ID TO 19;

CREATE GENERATOR GEN_UNR_ANALYSES_ID;
SET GENERATOR GEN_UNR_ANALYSES_ID TO 243037;

CREATE GENERATOR GEN_UNR_GROUP_ID;
SET GENERATOR GEN_UNR_GROUP_ID TO 5;

CREATE GENERATOR GEN_UNR_GROUP_SIMPLE_ID;
SET GENERATOR GEN_UNR_GROUP_SIMPLE_ID TO 130;

CREATE GENERATOR GEN_UNR_KLI_AGENT_2_ID;
SET GENERATOR GEN_UNR_KLI_AGENT_2_ID TO 31;

CREATE GENERATOR GEN_UNR_KLI_AGENT_ID;
SET GENERATOR GEN_UNR_KLI_AGENT_ID TO 2153;

CREATE GENERATOR GEN_UNR_KOEF_NODE_ID;
SET GENERATOR GEN_UNR_KOEF_NODE_ID TO 41;

CREATE GENERATOR GEN_USER_ID;
SET GENERATOR GEN_USER_ID TO 127;

CREATE GENERATOR GEN_USER_KASA_NODE_ID;
SET GENERATOR GEN_USER_KASA_NODE_ID TO 148;

CREATE GENERATOR GEN_USER_OBEKT_NODE_ID;
SET GENERATOR GEN_USER_OBEKT_NODE_ID TO 115;

CREATE GENERATOR GEN_USER_ROLES_EL_ID;
SET GENERATOR GEN_USER_ROLES_EL_ID TO 15;

CREATE GENERATOR GEN_USER_SCHEMAS_ID;
SET GENERATOR GEN_USER_SCHEMAS_ID TO 2;

CREATE GENERATOR GEN_USER_SEL_NODE_ID;
SET GENERATOR GEN_USER_SEL_NODE_ID TO 0;

CREATE GENERATOR GEN_USER_SKLAD_NAL_NODE_ID;
SET GENERATOR GEN_USER_SKLAD_NAL_NODE_ID TO 4;

CREATE GENERATOR GEN_USER_SKLAD_NODE_ID;
SET GENERATOR GEN_USER_SKLAD_NODE_ID TO 280;

CREATE GENERATOR GEN_VALUTA_ID;
SET GENERATOR GEN_VALUTA_ID TO 7;

CREATE GENERATOR GEN_VISIT_EL_ID;
SET GENERATOR GEN_VISIT_EL_ID TO 8;

CREATE GENERATOR GEN_VISIT_ID;
SET GENERATOR GEN_VISIT_ID TO 1;

CREATE GENERATOR GEN_VISIT_TYPE_ID;
SET GENERATOR GEN_VISIT_TYPE_ID TO 0;

CREATE GENERATOR GEN_WAREHOUSE_BASE_MAP_ID;
SET GENERATOR GEN_WAREHOUSE_BASE_MAP_ID TO 0;

CREATE GENERATOR GEN_WHOKNA_CONNECTION_ID;
SET GENERATOR GEN_WHOKNA_CONNECTION_ID TO 0;

CREATE GENERATOR GEN_WUERTH_COMMIS_ID;
SET GENERATOR GEN_WUERTH_COMMIS_ID TO 79;

CREATE GENERATOR GEN_WUERTH_SIMPLE_ID;
SET GENERATOR GEN_WUERTH_SIMPLE_ID TO 0;

CREATE GENERATOR GEN_ZAIAVKA_DOSTAVKA_ID;
SET GENERATOR GEN_ZAIAVKA_DOSTAVKA_ID TO 3;

CREATE GENERATOR GEN_ZAIAVKA_DOSTAVKA_NODE_ID;
SET GENERATOR GEN_ZAIAVKA_DOSTAVKA_NODE_ID TO 0;

CREATE GENERATOR GEN_ZD_DOST_MOVE_NODE_ID;
SET GENERATOR GEN_ZD_DOST_MOVE_NODE_ID TO 0;

CREATE GENERATOR GEN_ZD_POR_NODE_ID;
SET GENERATOR GEN_ZD_POR_NODE_ID TO 0;

CREATE GENERATOR IBE$VERSION_HISTORY_ID_GEN;
SET GENERATOR IBE$VERSION_HISTORY_ID_GEN TO 222;



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE ACTIONS (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_100 NOT NULL
);


CREATE TABLE ACTIVE_USERS (
    USER_ID        INTEGER,
    SATRTDATETIME  TIMESTAMP,
    IP_USER        INTEGER,
    APP_VERSION    VARCHAR(15),
    ZEBEDEE        DOM_BOOLEAN,
    FLAG           DOM_FLAG
);


CREATE TABLE ADDRESSES (
    ID        DOM_KEY NOT NULL,
    PLACE_ID  DOM_KEY NOT NULL,
    ADDRESS   DOM_CHAR_100 NOT NULL
);


CREATE TABLE AMBALAJ (
    ID         INTEGER NOT NULL,
    KLI_ID     INTEGER,
    SIMPLE_ID  INTEGER,
    KOL        DOUBLE PRECISION
);


CREATE TABLE AMBALAJ_HISTORY (
    ID         INTEGER NOT NULL,
    OPR_ID     INTEGER NOT NULL,
    SIMPLE_ID  INTEGER NOT NULL,
    KOL        DOUBLE PRECISION NOT NULL
);


CREATE TABLE AMBALAJ_HISTORY_EDIT (
    ID         INTEGER NOT NULL,
    EDIT_ID    INTEGER,
    SIMPLE_ID  INTEGER,
    KOL        DOUBLE PRECISION
);


CREATE TABLE ANALYSES (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY,
    OUT_EL_ID  DOM_KEY,
    SUMA       DOM_SUMA,
    SUMA_SR    DOM_SUMA,
    VAT        DOM_PERCENT
);


CREATE TABLE BARCODE (
    ID         INTEGER NOT NULL,
    SIMPLE_ID  INTEGER,
    BARCODE    VARCHAR(13),
    KOL        INTEGER,
    NAME       DOM_CHAR_50
);


CREATE TABLE BH_OTSTAPKI (
    ID                DOM_KEY NOT NULL,
    P_OT              DOM_PERCENT,
    P_DO              DOM_PERCENT,
    CODE              DOM_CHAR_8 COLLATE PXW_CYRL,
    NAME              DOM_CHAR_30 COLLATE PXW_CYRL,
    RANK              DOM_SMAL_INT,
    AKTIVEN           DOM_SMAL_INT,
    MAX_DISCOUNT_SUM  DOM_SUMA
);


CREATE TABLE BH_PROD_POR (
    ID      DOM_KEY NOT NULL,
    OPR_ID  DOM_KEY,
    POR_N   DOM_CHAR_15
);


CREATE TABLE BONUS_CENA_TOCHKI (
    ID            DOM_KEY NOT NULL,
    OTDT          DOM_DATE NOT NULL,
    DODT          DOM_DATE NOT NULL,
    SIMPLE_ID     DOM_KEY NOT NULL,
    CENA          DOM_CENA NOT NULL,
    TOCHKI        DOM_INT NOT NULL,
    ANUL          DOM_FLAG DEFAULT 0 NOT NULL,
    BONUS_C_T_ID  DOM_KEY,
    DT            DOM_DATE_TIME,
    USER_ID       DOM_KEY NOT NULL
);


CREATE TABLE BONUS_CONFIG (
    ID               DOM_KEY NOT NULL,
    IS_ACTIV         DOM_FLAG NOT NULL,
    NAME             DOM_CHAR_50 NOT NULL COLLATE PXW_CYRL,
    WEEK_DAY         DOM_KEY NOT NULL,
    OT_TIME          DOM_TIME NOT NULL,
    DO_TIME          DOM_TIME NOT NULL,
    OT_SUMA          DOM_SUMA,
    DO_SUMA          DOM_SUMA,
    SIMPLE_ID        DOM_KEY,
    SIMPLE_KOL       DOM_KOL,
    PERIOD           DOM_SMAL_INT,
    NUMBER_WMY       DOM_SMAL_INT,
    WMY              DOM_SMAL_INT,
    PROCENT          DOM_CENA,
    SIMPLE_ID_BONUS  DOM_KEY,
    KOL_SIM_BONUS    DOM_KOL,
    CENA_SIM_BONUS   DOM_CENA,
    ANULIRAN         DOM_FLAG default 0 NOT NULL,
    ZA_SMETKA        DOM_FLAG default 0,
    ID_BONUS         DOM_KEY,
    DATE_TIME_AE     DOM_DATE_TIME NOT NULL,
    USER_ID          DOM_KEY NOT NULL,
    SEL_KLI          DOM_KEY,
    TIP              DOM_SMAL_INT NOT NULL,
    TIP_BONUS        DOM_SMAL_INT NOT NULL,
    BTC              DOM_SMAL_INT,
    SIMPLE_SEL_ID    DOM_KEY,
    SUMA_SEL         DOM_SUMA,
    OT_DATE          DOM_DATE,
    DO_DATE          DOM_DATE,
    DT_ANUL          DOM_DATE_TIME,
    USER_ANUL        DOM_KEY
);


CREATE TABLE BONUS_CONFIG_KLI (
    ID        DOM_KEY NOT NULL,
    BONUS_ID  DOM_KEY NOT NULL,
    KLI_ID    DOM_KEY NOT NULL
);


CREATE TABLE BONUS_CONFIG_SKLAD (
    ID        DOM_KEY NOT NULL,
    BONUS_ID  DOM_KEY,
    SKLAD_ID  DOM_KEY
);


CREATE TABLE BONUS_KLI_USED (
    ID        DOM_KEY NOT NULL,
    BONUS_ID  DOM_KEY,
    KLI_ID    DOM_KEY,
    DT        DOM_DATE_TIME
);


CREATE TABLE BONUS_RAZCHET_NODE (
    ID      DOM_KEY NOT NULL,
    IN_ID   DOM_KEY NOT NULL,
    OUT_ID  DOM_KEY NOT NULL,
    SUMA    DOM_SUMA NOT NULL
);


CREATE TABLE BONUSI_ZA_RAZCHET (
    ID         DOM_KEY NOT NULL,
    IN_EL_ID   DOM_KEY,
    OUT_EL_ID  DOM_KEY,
    KOL        DOM_KOL NOT NULL,
    SUMA       DOM_SUMA NOT NULL,
    SUMA_OST   DOM_SUMA NOT NULL,
    KI_OPR_ID  DOM_KEY
);


CREATE TABLE BROENE (
    ID           DOM_KEY NOT NULL,
    OPR_ID       DOM_KEY NOT NULL,
    TIP          DOM_SMAL_INT DEFAULT 0 NOT NULL,
    STATUS       DOM_SMAL_INT DEFAULT 0 NOT NULL,
    DISTRID      DOM_KEY,
    AGENTDID     DOM_KEY,
    FROM_OPR_ID  DOM_KEY
);


CREATE TABLE BROENE_EL (
    ID         DOM_KEY NOT NULL,
    BROENE_ID  DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY NOT NULL,
    KOL        DOM_KOL NOT NULL,
    PRICE      DOM_CENA,
    KOL2       DOM_KOL
);


CREATE TABLE BROENE_EL_DETAILS (
    ID            DOM_KEY NOT NULL,
    BROENE_EL_ID  DOM_KEY,
    WIDTH         DOM_KOL,
    HEIGHT        DOM_KOL,
    QTY           DOM_SMAL_INT,
    OTV           DOM_SMAL_INT,
    KANT          DOM_SMAL_INT
);


CREATE TABLE BROENE_EL_RAZ_NODE (
    ID             INTEGER NOT NULL,
    BROENE_EL_ID   INTEGER,
    RAZFASOVKA_ID  INTEGER,
    KOL            DOUBLE PRECISION
);


CREATE TABLE CENOVA_LISTA (
    ID              INTEGER NOT NULL,
    NAME            VARCHAR(30),
    OPR_ID          INTEGER NOT NULL,
    TIP             SMALLINT,
    OT_DATE         DATE,
    DO_DATE         DATE,
    OT_TIME         TIME,
    DO_TIME         TIME,
    WEEK            INTEGER,
    ACTIVNA         SMALLINT DEFAULT 0,
    PRIORITET       INTEGER DEFAULT 0,
    DEF             DOM_FLAG DEFAULT 0 NOT NULL,
    DEF_FIKS        DOM_FLAG DEFAULT 0 NOT NULL,
    FAKTURNA        DOM_FLAG DEFAULT 0 NOT NULL,
    SEL_KLI         DOM_KEY,
    IS_VALUTNA      DOM_FLAG DEFAULT 0,
    VALUTA_ID       DOM_KEY_SMALL,
    BASE_PERCENT    DOM_PERCENT,
    AUTO_PERCENT    DOM_PERCENT,
    IS_PROMOTIONAL  DOM_SMAL_INT DEFAULT 0 NOT NULL
);


CREATE TABLE CENOVA_LISTA_EDIT (
    ID              INTEGER NOT NULL,
    NAME            VARCHAR(30),
    OPR_EDIT_ID     INTEGER,
    TIP             SMALLINT,
    OT_DATE         DATE,
    DO_DATE         DATE,
    OT_TIME         TIME,
    DO_TIME         TIME,
    WEEK            INTEGER,
    ACTIVNA         SMALLINT,
    PRIORITET       INTEGER,
    SEL_KLI         DOM_KEY,
    VALUTA_ID       DOM_KEY_SMALL,
    BASE_PERCENT    DOM_PERCENT,
    IS_PROMOTIONAL  DOM_SMAL_INT DEFAULT 0 NOT NULL
);


CREATE TABLE CENOVA_LISTA_EL (
    ID            INTEGER NOT NULL,
    OPR_ID        INTEGER,
    OT_OPR_ID     INTEGER,
    SIMPLE_ID     INTEGER,
    TIP           SMALLINT,
    PROCENT       DOUBLE PRECISION,
    CENA          DOUBLE PRECISION,
    TIP_OT_CENA   INTEGER DEFAULT 0 NOT NULL,
    ROUND_TIP_ID  DOM_KEY,
    FLAG_LOCK     DOM_FLAG,
    SEL_ID        DOM_KEY,
    DT_ADD        DOM_DATE_TIME
);


CREATE TABLE CENOVA_LISTA_EL_EDIT (
    ID           INTEGER NOT NULL,
    OPR_EDIT_ID  INTEGER,
    OT_OPR_ID    INTEGER,
    SIMPLE_ID    INTEGER,
    TIP          SMALLINT,
    PROCENT      DOUBLE PRECISION,
    CENA         DOUBLE PRECISION,
    TIP_OT_CENA  INTEGER
);


CREATE TABLE CENOVA_LISTA_HISTORY (
    ID         DOM_KEY NOT NULL,
    CL_EL_ID   DOM_KEY,
    SIMPLE_ID  DOM_KEY,
    USER_ID    DOM_KEY,
    CENA_OLD   ED_CENA,
    CENA_NEW   ED_CENA,
    DT         TIMESTAMP,
    OPR_ID     DOM_KEY,
    OPR_ID_E   DOM_KEY
);


CREATE TABLE CENOVA_LISTA_KLI (
    ID      INTEGER NOT NULL,
    OPR_ID  INTEGER,
    KLI_ID  INTEGER
);


CREATE TABLE CENOVA_LISTA_KLI_EDIT (
    ID           INTEGER NOT NULL,
    OPR_EDIT_ID  INTEGER,
    KLI_ID       INTEGER
);


CREATE TABLE CENOVA_LISTA_PROTOKOL (
    ID             DOM_KEY NOT NULL,
    OPR_ID         DOM_KEY,
    PROTOKOL       INTEGER,
    PROTOKOL_DATE  DOM_DATE,
    OTC_ID         DOM_KEY
);


CREATE TABLE CENOVA_LISTA_SKLAD (
    ID        INTEGER NOT NULL,
    OPR_ID    INTEGER NOT NULL,
    SKLAD_ID  INTEGER NOT NULL
);


CREATE TABLE CENOVA_LISTA_SKLAD_EDIT (
    ID           INTEGER NOT NULL,
    OPR_EDIT_ID  INTEGER NOT NULL,
    SKLAD_ID     INTEGER NOT NULL
);


CREATE TABLE CENOVA_LISTA_TMP (
    SIM_ID  INTEGER
);


CREATE TABLE CFG_FAK_ACCOUNTING (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_50
);


CREATE TABLE CFG_INFO (
    ID        DOM_KEY_SMALL NOT NULL,
    PC_ID     DOM_SMAL_INT,
    MSG_TIP   DOM_SMAL_INT,
    HOURS     DOM_INT64,
    EMAIL     DOM_CHAR_50,
    SHORT     DOM_BOOLEAN,
    LAT       DOM_BOOLEAN,
    OBEKT_ID  DOM_KEY_SMALL
);


CREATE TABLE CFG_KASA_TEMPLATE (
    ID       DOM_KEY NOT NULL,
    NAME     DOM_CHAR_30 NOT NULL COLLATE PXW_CYRL,
    USER_ID  DOM_KEY,
    INS_DT   DOM_DATE_TIME,
    ERASED   DOM_FLAG DEFAULT 0 NOT NULL,
    DT_GEN   DOM_DATE
);


CREATE TABLE CFG_KASA_TEMPLATE_EL (
    ID              DOM_KEY NOT NULL,
    TEMPLATE_ID     DOM_KEY,
    PARI_IO_ID      DOM_KEY,
    KASA_ID         DOM_KEY,
    OBEKT_ID        DOM_KEY,
    VALUTA_PRIH_ID  DOM_KEY,
    TIP             DOM_SMAL_INT,
    KOD             DOM_FLAG,
    SUMA_PRIH       DOM_SUMA,
    KURS_PRIH       KURS,
    SUMA_RASH       DOM_SUMA,
    KURS_RAZH       KURS,
    VALUTA_RAZH_ID  DOM_KEY,
    KLI_ID          DOM_KEY,
    KASA_2_ID       DOM_KEY,
    SUMA_PRIH_KOD   DOM_CHAR_30 COLLATE PXW_CYRL,
    SUMA_RAZH_KOD   DOM_CHAR_30 COLLATE PXW_CYRL,
    ALLOW_FAK       DOM_SMAL_INT,
    COMMENT         DOM_CHAR_100
);


CREATE TABLE CFG_LOG (
    ID          INTEGER NOT NULL,
    DATETIME    TIMESTAMP NOT NULL,
    USER_ID     INTEGER NOT NULL,
    IP          INTEGER NOT NULL,
    TABLE_CODE  SMALLINT NOT NULL,
    OBJ_ID      INTEGER NOT NULL,
    OPR_TIP     CHAR(1) NOT NULL
);


CREATE TABLE CFG_OSN_DDS (
    ID                  DOM_KEY NOT NULL,
    DDS_PERCENT         DOM_CENA,
    OSNOVANIE_TEXT      DOM_CHAR_100,
    OSNOVANIE_TEXT_LAT  DOM_CHAR_100,
    USER_TEXT           DOM_CHAR_50,
    IS_ACTIVE           DOM_SMAL_INT DEFAULT 1,
    ACCOUNTING_CODE     DOM_CHAR_20
);


CREATE TABLE CFG_PAYMENTS (
    ID          DOM_KEY NOT NULL,
    NAME        DOM_CHAR_50,
    FISK        DOM_KEY_SMALL,
    ATRIB       DOM_KEY_SMALL,
    KASA_ID     DOM_KEY,
    CODE        DOM_CHAR_15 COLLATE PXW_CYRL,
    METRO_CODE  DOM_CHAR_15
);


CREATE TABLE CFG_PAYMENTS_KLI (
    ID               INTEGER NOT NULL,
    CFG_PAYMENTS_ID  DOM_KEY,
    KLI_ID           DOM_KEY,
    KASA_ID          DOM_KEY,
    NOM              DOM_CHAR_15 COLLATE PXW_CYRL
);


CREATE TABLE CFG_RAZPAD_CALC (
    ID               DOM_KEY NOT NULL,
    FROM_PRODUCT_ID  DOM_KEY NOT NULL,
    TO_PRODUCT_ID    DOM_KEY NOT NULL,
    RATIO            DOM_PERCENT
);


CREATE TABLE CFG_VEZNI (
    ID       DOM_KEY_SMALL NOT NULL,
    TIP      SMALLINT NOT NULL,
    PATH     VARCHAR(255) NOT NULL,
    ACTIVEN  DOM_SMAL_INT NOT NULL,
    NAME     DOM_CHAR_50 NOT NULL COLLATE PXW_CYRL
);


CREATE TABLE CLAIM_EL (
    ID         DOM_KEY NOT NULL,
    RET_ID     DOM_KEY,
    SIMPLE_ID  DOM_KEY,
    KOL        DOM_KOL
);


CREATE TABLE CLAIM_NUM (
    CLAIM_NUM  DOM_INT
);


CREATE TABLE CLOTH_SIZE (
    ID      DOM_KEY NOT NULL,
    "SIZE"  DOM_CHAR_8 COLLATE PXW_CYRL,
    L       DOM_SMAL_INT,
    D       DOM_SMAL_INT,
    GB      DOM_SMAL_INT,
    F       DOM_SMAL_INT
);


CREATE TABLE CN_DELIVERY_ELEMENTS (
    ID         DOM_KEY NOT NULL,
    OUT_EL_ID  DOM_KEY,
    CN_OPR_ID  DOM_KEY
);


CREATE TABLE COMMENT (
    ID      INTEGER NOT NULL,
    OPR_ID  INTEGER,
    TEXT    VARCHAR(100)
);


CREATE TABLE COMMENT_EINVOICE_NODE (
    ID           DOM_KEY NOT NULL,
    COMMENT_ID   DOM_KEY,
    EINVOICE_ID  DOM_KEY
);


CREATE TABLE COMMENT_FIRMI_NODE (
    ID          DOM_KEY NOT NULL,
    COMMENT_ID  DOM_KEY,
    FIRMI_ID    DOM_KEY
);


CREATE TABLE COMMENT_KLI_NODE (
    ID          DOM_KEY NOT NULL,
    COMMENT_ID  DOM_KEY,
    KLI_ID      DOM_KEY
);


CREATE TABLE COMMENT_OPR_NODE (
    ID          DOM_KEY NOT NULL,
    COMMENT_ID  DOM_KEY,
    OPR_ID      DOM_KEY
);


CREATE TABLE COMMENT_OPR_TEMPLATE_NODE (
    ID               DOM_KEY NOT NULL,
    COMMENT_ID       DOM_KEY,
    OPR_TEMPLATE_ID  DOM_KEY
);


CREATE TABLE COMMENT_SIMPLE_NODE (
    ID          DOM_KEY NOT NULL,
    COMMENT_ID  DOM_KEY,
    SIMPLE_ID   DOM_KEY
);


CREATE TABLE COMMENT_TASKS_NODE (
    ID          DOM_KEY NOT NULL,
    COMMENT_ID  DOM_KEY,
    TASKS_ID    DOM_KEY
);


CREATE TABLE COMMENTS (
    ID             DOM_KEY NOT NULL,
    NOTE           BLOB SUB_TYPE 1 SEGMENT SIZE 2048,
    DATE_MODIFIED  DOM_DATE_TIME,
    USER_ID        DOM_KEY,
    HEADER         DOM_CHAR_50 COLLATE PXW_CYRL
);


CREATE TABLE COUNTIES (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_100,
    CODE  DOM_CHAR_20
);


CREATE TABLE COUNTRIES (
    ID              DOM_KEY_SMALL NOT NULL,
    CODE            CHAR(3),
    NAME            DOM_CHAR_50,
    NAME_ENG        DOM_CHAR_50,
    INTRASTAT_CODE  DOM_STR_3
);


CREATE TABLE COURSES (
    ID           DOM_KEY NOT NULL,
    COURSE_DATE  DOM_DATE NOT NULL,
    NOTE         DOM_CHAR_20,
    KLI_ID       DOM_KEY,
    DATE_TIME    DOM_DATE_TIME
);


CREATE TABLE COURSES_OPR_NODE (
    ID         DOM_KEY NOT NULL,
    COURSE_ID  DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY NOT NULL
);


CREATE TABLE CRM_ATON_PRODUKT (
    ID           DOM_KEY NOT NULL,
    SIMPLE_ID    DOM_KEY NOT NULL,
    CRM_PRODUKT  DOM_KEY NOT NULL
);


CREATE TABLE CRM_INFO_LICENZIA (
    ID           DOM_KEY NOT NULL,
    KLI_ID       DOM_KEY NOT NULL,
    PRODUCT_CRM  DOM_KEY NOT NULL,
    KOL1         DOM_SMAL_INT NOT NULL,
    DT1          DOM_DATE NOT NULL,
    KOL2         DOM_SMAL_INT,
    DT2          DOM_DATE,
    DAY_REG      DOM_SMAL_INT,
    FLAG_MONTH   DOM_SMAL_INT,
    CS_TYPE      DOM_SMAL_INT,
    DT_GET       DOM_DATE_TIME,
    CRM_KOL      DOM_SMAL_INT,
    LICENZ_KOL   DOM_SMAL_INT,
    L_TYPE       DOM_SMAL_INT DEFAULT 0,
    CRM_OPR_ID   DOM_KEY,
    DT_UPDATE    DOM_DATE_TIME,
    OLD_KOL      DOM_SMAL_INT,
    OLD_DT       DOM_DATE,
    FL_CHECK     DOM_SMAL_INT DEFAULT 0 NOT NULL,
    STATUS       DOM_FLAG DEFAULT 0 NOT NULL
);


CREATE TABLE CRM_KLI (
    ID        DOM_KEY NOT NULL,
    KLI_ID    DOM_KEY NOT NULL,
    CRM_ID    DOM_KEY NOT NULL,
    CRM_NAME  DOM_CHAR_50 NOT NULL
);


CREATE TABLE CRM_PRODUCT (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_30 NOT NULL
);


CREATE TABLE DEF_RAZ_SIMPLE (
    ID             DOM_KEY NOT NULL,
    SIMPLE_ID      DOM_KEY NOT NULL,
    RAZFASOVKA_ID  DOM_KEY NOT NULL
);


CREATE TABLE DELIVERY_CURRENCY (
    ID              DOM_KEY NOT NULL,
    IN_EL_ID        INTEGER,
    CURRENCY_PRICE  DOM_CENA,
    CURRENCY_ID     DOM_KEY_SMALL,
    EXCHANGE_RATE   KURS
);


CREATE TABLE DOC (
    ID      DOM_KEY NOT NULL,
    NOM     DOM_INT,
    OPR_ID  DOM_KEY
);


CREATE TABLE DOCUMENTS (
    ID              DOM_KEY NOT NULL,
    USER_ID         DOM_KEY NOT NULL,
    DT              DOM_DATE_TIME NOT NULL,
    DOC_TYPE        DOM_KEY NOT NULL,
    STATUS          DOM_FLAG NOT NULL,
    FILE_NAME       DOM_CHAR_100 NOT NULL,
    NOTE            DOM_CHAR_100,
    DOC_CODE        DOM_SMAL_INT NOT NULL,
    RECORD_ID       DOM_KEY NOT NULL,
    DT_DELETE       DOM_DATE_TIME,
    DELETE_USER_ID  DOM_KEY
);


CREATE TABLE DOCUMENTS_TIP (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_100
);


CREATE TABLE DOCUMENTS_TIP_CODE (
    ID               DOM_KEY NOT NULL,
    CODE             DOM_INT,
    DOCUMENT_TIP_ID  DOM_KEY
);


CREATE TABLE DOST_CENI (
    ID         DOM_KEY NOT NULL,
    LAST_CENA  DOM_CENA,
    IN_EL_ID   DOM_KEY
);


CREATE TABLE DOST_IMPORT_KLI_MAP (
    ID           INTEGER NOT NULL,
    IN_KLI_NAME  VARCHAR(100) NOT NULL,
    KLI_ID       INTEGER NOT NULL
);


CREATE TABLE DOST_IMPORT_RAZF_MAP (
    ID          INTEGER NOT NULL,
    IN_RAZF_ID  INTEGER NOT NULL,
    RAZF_ID     INTEGER NOT NULL,
    KLI_ID      INTEGER NOT NULL
);


CREATE TABLE DOST_IMPORT_SIMPLE_MAP (
    ID            DOM_KEY NOT NULL,
    IN_SIMPLE_ID  DOM_KEY NOT NULL,
    SIMPLE_ID     DOM_KEY NOT NULL,
    KLI_ID        DOM_KEY NOT NULL
);


CREATE TABLE DOST_NODE (
    ID           INTEGER NOT NULL,
    DOST_ID      INTEGER NOT NULL,
    RAZ_DOST_ID  INTEGER NOT NULL
);


CREATE TABLE DVSK_DOK_TYPE (
    ID          DOM_KEY NOT NULL,
    DOK_TYPE    DOM_FLAG,
    NAME        DOM_CHAR_20,
    SHORT_NAME  DOM_CHAR_10
);


CREATE TABLE DVSK_EL (
    ID             INTEGER NOT NULL,
    PARTIDA_EL_ID  INTEGER,
    KLI_ID_PROIZV  INTEGER,
    TYPE_DOK       DOM_KEY,
    NOM_DOK        VARCHAR(20),
    BG_NOMER       DOM_CHAR_15,
    DATE_PROIZV    DOM_DATE,
    PROIZHOD       DOM_KEY
);


CREATE TABLE DVSK_OPR (
    ID             INTEGER NOT NULL,
    OPR_ID         INTEGER,
    NCAR           VARCHAR(20),
    TYPE_DOK       DOM_KEY,
    DOK            VARCHAR(20),
    USER_ID        INTEGER,
    TIME_PRIEMANE  DOM_TIME,
    DRIVER_NAME    DOM_CHAR_50 COLLATE PXW_CYRL,
    TEMP           VARCHAR(5)
);


CREATE TABLE EGROUPS (
    ID           DOM_KEY NOT NULL,
    NAME         DOM_CHAR_50,
    SEL_ID       DOM_KEY,
    PARENT_ID    DOM_KEY,
    DESCRIPTION  DOM_CHAR_1000
);


CREATE TABLE ESIMPLE (
    ID                  DOM_KEY NOT NULL,
    SIMPLE_ID           DOM_KEY,
    ACTIVEN             DOM_FLAG,
    DESCRIPTION         VARCHAR(500),
    DETAIL_DESCRIPTION  VARCHAR(1000),
    META_KEYWORDS       VARCHAR(500),
    META_DESCRIPTION    VARCHAR(1000),
    MANUFACTURER_ID     DOM_KEY
);


CREATE TABLE ETIKETI (
    ID               DOM_KEY NOT NULL,
    NAME             VARCHAR(30),
    OPISANIE_ETIKET  DOM_CHAR_1000
);


CREATE TABLE EXCHANGE_SN (
    ID            DOM_KEY NOT NULL,
    OPR_ID        DOM_KEY NOT NULL,
    SIMPLE_ID     DOM_KEY NOT NULL,
    OLD_EL_ID     DOM_KEY NOT NULL,
    NEW_EL_ID     DOM_KEY NOT NULL,
    OLD_SN        DOM_CHAR_30 NOT NULL,
    NEW_SN        DOM_CHAR_30 NOT NULL,
    TO_SIMPLE_ID  DOM_KEY NOT NULL
);


CREATE TABLE EXPLANATORY (
    ID          DOM_KEY NOT NULL,
    NAME        DOM_CHAR_100,
    NAME_SHORT  DOM_CHAR_30,
    TIP         DOM_KEY,
    FORMULA     DOM_CHAR_100
);


CREATE TABLE EXPLANATORY_TYPE (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_30
);


CREATE TABLE EXPORT_OPR (
    ID      DOM_KEY NOT NULL,
    TIP     DOM_SMAL_INT,
    OPR_ID  DOM_KEY
);


CREATE TABLE EXPORT_SYNC (
    ID              DOM_KEY NOT NULL,
    VENDOR_ID       DOM_SMAL_INT,
    EXPORT_TYPE_ID  DOM_SMAL_INT,
    DAYS            DOM_SMAL_INT,
    TIME_TO_SEND    DOM_TIME,
    DATE_OF_YEAR    DOM_CHAR_8,
    MONTHS          DOM_SMAL_INT
);


CREATE TABLE EXPORT_TYPES (
    ID         DOM_KEY_SMALL NOT NULL,
    TYPE_NAME  DOM_CHAR_100
);


CREATE TABLE EXPORT_VENDORS (
    ID           DOM_KEY_SMALL NOT NULL,
    VENDOR_NAME  DOM_CHAR_100
);


CREATE TABLE EXPORTED_OPERATIONS (
    ID        DOM_KEY NOT NULL,
    OPR_ID    DOM_KEY,
    SYS_DATE  DOM_DATE_TIME
);


CREATE TABLE EXPORTS (
    ID              DOM_KEY NOT NULL,
    TIP             DOM_SMAL_INT,
    EXPORT_DATE     DOM_DATE_TIME,
    USER_ID         DOM_KEY,
    LAST_OPR_ID     DOM_INT,
    EXPORT_SYNC_ID  DOM_SMAL_INT,
    SYNC_DATE_TIME  DOM_DATE_TIME
);


CREATE TABLE EXTENDED_VARANTY_NODE (
    ID              DOM_KEY NOT NULL,
    OUT_EL_ID       DOM_KEY NOT NULL,
    KLI_VARANTY_ID  DOM_KEY NOT NULL,
    DT              DOM_DATE_TIME NOT NULL
);


CREATE TABLE FAK (
    ID              INTEGER NOT NULL,
    OPR_ID          INTEGER,
    NUMBER          VARCHAR(10),
    TIP             SMALLINT,
    SUMA            CURRENCY,
    NEOBLAGAEMA     CURRENCY,
    DDS             CURRENCY,
    TOTAL           CURRENCY,
    V_BROI          DOM_BOOLEAN,
    V_BROI_DDS      DOM_BOOLEAN,
    MOL             VARCHAR(30),
    POLUCHENA_OT    VARCHAR(30),
    POLUCHENA_DATE  DATE,
    POLUCHENA_EGN   VARCHAR(10),
    PALNOM          INTEGER,
    PALNOM_DATE     DATE,
    PASP_NUMBER     INTEGER,
    PASP_PU         VARCHAR(15),
    PASP_DATE       DATE,
    OWNER_ID        SMALLINT,
    OBEKT_ID        SMALLINT,
    DATE_SDELKA     DOM_DATE NOT NULL,
    SUMA_TO         DOM_SUMA,
    VALUTA_ID       DOM_KEY,
    KURS_VALUTA     DOM_CENA,
    POR_NUM         DOM_CHAR_30,
    PAY_TYPE        DOM_SMAL_INT DEFAULT 1,
    SUMA_AKCIZ      DOM_SUMA,
    FAK_ACCOUNTING  DOM_INT,
    TIP2            DOM_SMAL_INT,
    FIRMA_ID        DOM_KEY,
    DOWNLOAD_DATE   DOM_DATE_TIME,
    EFAK            DOM_FLAG
);


CREATE TABLE FAK_EL (
    ID             INTEGER NOT NULL,
    OPR_ID         INTEGER,
    TEXT           DOM_CHAR_1000,
    ME_ID          SMALLINT,
    KOL            QTY,
    CENA           DOM_CENA,
    DDS            DOM_CENA,
    SUMA_DDS       DOM_SUMA DEFAULT 0 NOT NULL,
    SUMA_TOTAL     DOM_SUMA DEFAULT 0 NOT NULL,
    CENA_FIX       DOM_CENA,
    TOST           DOM_CENA,
    SIMPLE_ID      INTEGER,
    RAZ_ID         DOM_KEY,
    RAZ_KOL        DOM_KOL,
    TEXT_LAT       DOM_CHAR_100,
    AVANS_OPR_ID   DOM_KEY,
    VAT_REASON_ID  DOM_KEY
);


CREATE TABLE FAK_EL_IN_EL_NODE (
    ID         DOM_KEY NOT NULL,
    IN_EL_ID   DOM_KEY NOT NULL,
    FAK_EL_ID  DOM_KEY NOT NULL,
    KOL        DOM_KOL DEFAULT 0 NOT NULL
);


CREATE TABLE FAK_IN (
    ID                  INTEGER NOT NULL,
    OPR_ID              INTEGER,
    NUMBER              VARCHAR(10),
    TIP                 SMALLINT,
    SUMA                CURRENCY,
    NEOBLAGAEMA         CURRENCY,
    DDS                 CURRENCY,
    TOTAL               CURRENCY,
    SKLAD_ID            SMALLINT,
    FAK_IN_TIP          SMALLINT,
    SUMA_NO_DK          CURRENCY,
    DAN_PER             DATE,
    PAY_TIP_DDS         SMALLINT DEFAULT 1 NOT NULL,
    PAY_TIP             DOM_SMAL_INT,
    SCHETOVODNA_SMETKA  DOM_STR_3
);


CREATE TABLE FAK_IN_EL_NODE (
    ID         INTEGER NOT NULL,
    FAK_IN_ID  INTEGER NOT NULL,
    IN_EL_ID   INTEGER NOT NULL
);


CREATE TABLE FAK_IN_SUMI (
    ID           DOM_KEY NOT NULL,
    OPR_ID       DOM_KEY,
    BASE_SUM     CURRENCY,
    NO_TAX_SUM   CURRENCY,
    VAT_SUM      CURRENCY,
    TOTAL_SUM    CURRENCY,
    VAT_PERCENT  DOM_PERCENT,
    SUM_TO_PAY   CURRENCY
);


CREATE TABLE FAK_KI_NUMBER (
    ID          DOM_KEY_SMALL NOT NULL,
    OPR_ID      DOM_KEY,
    NUMBER      DOM_CHAR_10,
    OPR_FAK_ID  DOM_KEY
);


CREATE TABLE FAK_OUT_EL_NODE (
    ID         DOM_KEY NOT NULL,
    OUT_EL_ID  DOM_KEY NOT NULL,
    FAK_EL_ID  DOM_KEY NOT NULL,
    KOL        DOM_KOL DEFAULT 0 NOT NULL
);


CREATE TABLE FAK_PROD (
    ID      INTEGER NOT NULL,
    OPR_ID  INTEGER,
    FAK_ID  INTEGER
);


CREATE TABLE FAK_PROD_REAL_PROD_NODE (
    ID               DOM_KEY NOT NULL,
    PROD_OPR_ID      DOM_KEY NOT NULL,
    FKT_PROD_OPR_ID  DOM_KEY NOT NULL
);


CREATE TABLE FAKTURA_OSNOVANIE (
    ID      DOM_KEY NOT NULL,
    OSN_ID  DOM_KEY,
    FAK_ID  DOM_KEY
);


CREATE TABLE FIRMI (
    ID               INTEGER NOT NULL,
    NAME_FAK         DOM_CHAR_100,
    COMMENT          VARCHAR(50),
    ADRES            DOM_CHAR_100,
    MOL              DOM_CHAR_100,
    DAN_NUM          VARCHAR(10),
    BULSTAT          VARCHAR(13),
    REG_DDS          DOM_BOOLEAN,
    EMAIL            VARCHAR(30),
    HTTP             VARCHAR(30),
    TEL              VARCHAR(30),
    PLACE_ID         INTEGER,
    IDNOMDDS         VARCHAR(15),
    DEF_OWNERBANKA   DOM_KEY_SMALL,
    EMAIL_FAKTURA    DOM_CHAR_50 COLLATE PXW_CYRL,
    E_FAK            DOM_FLAG,
    E_FAK_USER_NAME  DOM_CHAR_15,
    EO_ID_TPD        DOM_CHAR_20,
    GLN              DOM_CHAR_20,
    FLAG_SYNC        DOM_FLAG DEFAULT 0 NOT NULL,
    LOGIN_PASSWORD   VARCHAR(32),
    IS_SYSTEM        DOM_FLAG DEFAULT 0 NOT NULL
);


CREATE TABLE FIRMI_FAK_DATA (
    ID           DOM_KEY NOT NULL,
    NAME_FAK     DOM_CHAR_100,
    ADDRES       DOM_CHAR_100,
    MOL          DOM_CHAR_30,
    IDNOM        VARCHAR(13),
    REG_DDS      DOM_BOOLEAN,
    IDNOMDDS     DOM_CHAR_15,
    PLACE_NAME   DOM_CHAR_30,
    FAK_ID       DOM_KEY,
    KLI_NAME     VARCHAR(100),
    DEF_BANKA    INTEGER,
    EO_ID_TPD    DOM_CHAR_20,
    GLN          DOM_CHAR_20,
    KLI_ADDRESS  DOM_CHAR_100
);


CREATE TABLE FISKAL_BONS (
    ID             DOM_INT64 NOT NULL,
    OPR_ID         DOM_KEY NOT NULL,
    SUMA           DOM_SUMA NOT NULL,
    DEVICE_NUMBER  DOM_FP_NUMBER,
    BON_NUMBER     DOM_INT NOT NULL,
    DT             DOM_DATE_TIME NOT NULL,
    FISK_MEM       DOM_CHAR_8
);


CREATE TABLE FP (
    ID               DOM_INT64 NOT NULL,
    FP_NUMBER        DOM_FP_NUMBER,
    GEN_NAME         DOM_FP_GEN,
    OBEKT_ID         DOM_KEY NOT NULL,
    GEN_NAME_ACTIVE  DOM_FP_GEN NOT NULL,
    INIT_VAL         DOM_INT
);


CREATE TABLE FR_REPORTS (
    ID             DOM_KEY NOT NULL,
    NAME           DOM_CHAR_100,
    NAME_CRC       DOM_INT64,
    CRC            DOM_INT64,
    DATE_MODIFIED  DOM_DATE_TIME,
    DATA           DOM_BLOB,
    READ_ONLY      DOM_FLAG,
    PC_ID          DOM_KEY
);


CREATE TABLE FU (
    ID              DOM_KEY NOT NULL,
    KLI_ID          DOM_KEY,
    FIRMA_ID        DOM_KEY,
    FU_NOM          DOM_CHAR_15 COLLATE PXW_CYRL,
    FP_NOM          DOM_CHAR_15 COLLATE PXW_CYRL,
    CENA1           ED_CENA,
    CENA2           ED_CENA,
    COMMENT         DOM_CHAR_100,
    DT              DOM_DATE_TIME,
    SIMPLE_ID       DOM_KEY,
    SKLAD_ID        DOM_KEY,
    OBEKT_ID        DOM_KEY,
    OBEKT_NAME      DOM_CHAR_50 COLLATE PXW_CYRL,
    OBEKT_PLACE_ID  DOM_KEY,
    OBEKT_ADRES     DOM_CHAR_100,
    DAN_PLACE_ID    DOM_KEY,
    SERV_DOG_NOM    DOM_INT,
    SERV_DOG_DATE   DOM_DATE,
    FDRID           DOM_CHAR_10,
    BIM_NOM         DOM_CHAR_30,
    LOCKED          DOM_FLAG,
    NOTE            DOM_CHAR_1000
);


CREATE TABLE FU_EXPORT_DOGOVOR (
    ID       DOM_KEY NOT NULL,
    DOGOVOR  DOM_INT,
    DT       DOM_DATE
);


CREATE TABLE FU_OBOROTI (
    ID                  DOM_KEY NOT NULL,
    KA_ID               DOM_KEY,
    OPR_ID              DOM_KEY,
    DDS_A               DOM_SUMA,
    DDS_B               DOM_SUMA,
    DDS_V               DOM_SUMA,
    DDS_G               DOM_SUMA,
    BEZ_OBOROTI         DOM_FLAG,
    STORNO_A            DOM_SUMA,
    STORNO_B            DOM_SUMA,
    STORNO_V            DOM_SUMA,
    STORNO_G            DOM_SUMA,
    STORNO_BEZ_OBOROTI  DOM_FLAG
);


CREATE TABLE FU_SER_NUM (
    ID          DOM_KEY NOT NULL,
    KA_ID       DOM_KEY,
    SER_NUM_ID  DOM_KEY
);


CREATE TABLE GARANCII (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(30) NOT NULL
);


CREATE TABLE GRFINGER (
    ID        DOM_SMAL_INT NOT NULL,
    TEMPLATE  BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    USER_ID   DOM_KEY_SMALL
);


CREATE TABLE HGROUPS (
    ID       DOM_KEY NOT NULL,
    NAME     DOM_CHAR_100,
    PERCENT  DOM_PERCENT
);


CREATE TABLE IBE$PARAMS_HISTORY (
    IBE$PH_PROCEDURE_NAME  VARCHAR(67) CHARACTER SET UNICODE_FSS NOT NULL,
    IBE$PH_PARAMS          BLOB SUB_TYPE 0 SEGMENT SIZE 80
);


CREATE TABLE IBE$VERSION_HISTORY (
    IBE$VH_ID           INTEGER NOT NULL,
    IBE$VH_MODIFY_DATE  TIMESTAMP NOT NULL,
    IBE$VH_USER_NAME    VARCHAR(67),
    IBE$VH_OBJECT_TYPE  SMALLINT NOT NULL,
    IBE$VH_OBJECT_NAME  VARCHAR(67) NOT NULL,
    IBE$VH_HEADER       BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    IBE$VH_BODY         BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    IBE$VH_DESCRIPTION  BLOB SUB_TYPE 1 SEGMENT SIZE 80
);


CREATE TABLE "IN" (
    ID       INTEGER NOT NULL,
    OPR_ID   INTEGER,
    PAY_TIP  DOM_FLAG,
    PSHOP    DOM_BOOLEAN NOT NULL,
    NOM_GAR  DOM_CHAR_30,
    RF       DOM_FLAG
);


CREATE TABLE IN_EL (
    ID             INTEGER NOT NULL,
    OPR_ID         INTEGER,
    SIMPLE_ID      INTEGER,
    KOL            QTY,
    SUMA_FR        DOM_SUMA NOT NULL,
    IS_F           SMALLINT DEFAULT 0 NOT NULL,
    SUMA_SR        DOM_SUMA NOT NULL,
    VAT_PERCENT    DOM_PERCENT,
    VAT_REASON_ID  DOM_KEY
);


CREATE TABLE IN_EL_ANUL (
    ID         INTEGER NOT NULL,
    ANUL_ID    INTEGER,
    SIMPLE_ID  INTEGER,
    KOL        QTY,
    SUMA       CURRENCY,
    KOL2       DOM_KOL
);


CREATE TABLE IN_EL_EDIT (
    ID         INTEGER NOT NULL,
    EDIT_ID    INTEGER,
    SIMPLE_ID  INTEGER,
    KOL        QTY,
    SUMA       CURRENCY,
    KOL2       DOM_KOL
);


CREATE TABLE IN_EL_RAZ_NODE (
    ID             INTEGER NOT NULL,
    IN_EL_ID       INTEGER,
    RAZFASOVKA_ID  INTEGER,
    KOL            DOUBLE PRECISION
);


CREATE TABLE IN_EL2 (
    ID        DOM_KEY NOT NULL,
    IN_EL_ID  DOM_KEY NOT NULL,
    KOL       DOM_KOL NOT NULL
);


CREATE TABLE IN_TO_FAK_EL (
    ID            DOM_KEY NOT NULL,
    IN_EL_ID      DOM_KEY NOT NULL,
    FAK_IN_EL_ID  DOM_KEY NOT NULL
);


CREATE TABLE INI (
    ID        DOM_KEY_SMALL NOT NULL,
    IP        INTEGER,
    INI_FILE  BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    NAME      DOM_CHAR_20 COLLATE PXW_CYRL,
    HDD_SN    DOM_KEY
);


CREATE TABLE INSTALLATION_PICTURES (
    ID       DOM_KEY NOT NULL,
    NOTE     DOM_CHAR_100 NOT NULL,
    PICTURE  DOM_BLOB NOT NULL
);


CREATE TABLE INSTALLATION_USERS (
    ID               DOM_KEY NOT NULL,
    INSTALLATION_ID  DOM_KEY NOT NULL,
    INSTALLER_ID     DOM_KEY NOT NULL,
    CLASS            DOM_SMAL_INT NOT NULL,
    SUMA             DOM_SUMA NOT NULL,
    BONUS_SUMA       DOM_SUMA DEFAULT 0.00 NOT NULL
);


CREATE TABLE INSTALLATIONS (
    ID               DOM_KEY NOT NULL,
    ORDER_ID         DOM_KEY NOT NULL,
    MONTAGE_SUM      DOM_SUMA DEFAULT 0.00 NOT NULL,
    USER_ID          DOM_KEY_SMALL NOT NULL,
    DT_INSTALLATION  DOM_DATE_TIME NOT NULL,
    DURATION         DOM_SMAL_INT NOT NULL,
    BONUS_SUMA       DOM_SUMA DEFAULT 0.00 NOT NULL
);


CREATE TABLE INSTALLERS (
    ID           DOM_KEY_SMALL NOT NULL,
    USER_ID      DOM_KEY_SMALL NOT NULL,
    GROUP_INDEX  DOM_SMAL_INT,
    CLASS        DOM_SMAL_INT NOT NULL
);


CREATE TABLE INSTALLERS_GROUP (
    ID            DOM_KEY_SMALL NOT NULL,
    INSTALLER_ID  DOM_SMAL_INT NOT NULL,
    GROUP_ID      DOM_INT NOT NULL
);


CREATE TABLE INTRASTAT_DATA (
    ID                      DOM_KEY NOT NULL,
    OPR_ID                  DOM_KEY,
    COUNTRY_SEND_ARRIVE_ID  SMALLINT,
    COUNTRY_ORIGIN_ID       DOM_KEY_SMALL,
    DEAL_TYPE               DOM_KEY,
    DELIVERY_CONDITIONS     DOM_INT,
    TRANSPORT_TYPE          DOM_INT,
    VEHICLES_NATIONALITY    DOM_KEY,
    REGION                  DOM_KEY,
    ADDITIONAL_AMOUNT       DOM_SUMA,
    REFERENCE_DATE          DOM_DATE
);


CREATE TABLE INTRASTAT_DEAL_TYPE (
    ID       DOM_KEY NOT NULL,
    NAME     DOM_CHAR_100,
    CODE     DOM_CHAR_10,
    AKTIVEN  DOM_FLAG NOT NULL
);


CREATE TABLE INTRASTAT_DELIVERY_CONDITIONS (
    ID       DOM_KEY NOT NULL,
    TERMIN   DOM_CHAR_100,
    NAME     DOM_CHAR_100,
    CODE     DOM_CHAR_10,
    AKTIVEN  DOM_FLAG NOT NULL
);


CREATE TABLE INTRASTAT_REGION (
    ID       DOM_KEY NOT NULL,
    NAME     DOM_CHAR_100,
    CODE     DOM_CHAR_10,
    AKTIVEN  SMALLINT NOT NULL
);


CREATE TABLE INTRASTAT_TRANSPORT_TYPE (
    ID       DOM_KEY NOT NULL,
    NAME     DOM_CHAR_100,
    CODE     DOM_CHAR_10,
    AKTIVEN  DOM_FLAG NOT NULL
);


CREATE TABLE INV (
    ID             INTEGER NOT NULL,
    OPR_ID         INTEGER,
    SUMA_LIPSA     CURRENCY,
    SUMA_IZLISHAK  CURRENCY,
    TIP            DOM_SMAL_INT DEFAULT 0 NOT NULL
);


CREATE TABLE INV_IZL (
    ID        DOM_KEY NOT NULL,
    IN_EL_ID  DOM_KEY NOT NULL,
    KOL       DOM_KOL,
    KOL_IZL   DOM_KOL,
    ED_CENA   DOM_CENA
);


CREATE TABLE INV_NACH_INI (
    ID          INTEGER NOT NULL,
    OPR_INV_ID  INTEGER NOT NULL
);


CREATE TABLE INV_OPIS (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY NOT NULL,
    KOL_S      DOM_KOL NOT NULL,
    CENA_S     DOM_CENA NOT NULL,
    KOL_F      DOM_KOL NOT NULL,
    CENA_F     DOM_CENA NOT NULL,
    KOL2_F     DOM_KOL,
    KOL2_S     DOM_KOL
);


CREATE TABLE IZL (
    ID             INTEGER NOT NULL,
    KOL            QTY,
    OUT_EL_ID      INTEGER,
    KOL_IZL        DOUBLE PRECISION,
    LAST_CENA      DOUBLE PRECISION,
    FLAG_LOCK_KOR  DOM_FLAG DEFAULT 0 NOT NULL,
    SIMPLE_ID      DOM_KEY NOT NULL,
    SKLAD_ID       DOM_SMAL_INT NOT NULL
);


CREATE TABLE IZP (
    ID          INTEGER NOT NULL,
    OPR_ID      INTEGER,
    IZP_TIP_ID  SMALLINT,
    SUMA_SR     CURRENCY,
    SUMA_FR     CURRENCY
);


CREATE TABLE IZP_TIP (
    ID           SMALLINT NOT NULL,
    NAME         VARCHAR(30),
    USE_KLI      DOM_BOOLEAN,
    USE_COMMENT  DOM_BOOLEAN
);


CREATE TABLE KA_DEMONTAJ_DDS (
    ID                  DOM_KEY NOT NULL,
    KA_ID               DOM_KEY,
    OPR_ID              DOM_KEY,
    DDS_A               DOM_SUMA,
    DDS_B               DOM_SUMA,
    DDS_V               DOM_SUMA,
    DDS_G               DOM_SUMA,
    BEZ_OBOROTI         DOM_FLAG,
    STORNO_A            DOM_SUMA,
    STORNO_B            DOM_SUMA,
    STORNO_V            DOM_SUMA,
    STORNO_G            DOM_SUMA,
    STORNO_BEZ_OBOROTI  DOM_FLAG
);


CREATE TABLE KA_INFO (
    ID          DOM_KEY NOT NULL,
    FU_NOM      DOM_CHAR_15 NOT NULL COLLATE PXW_CYRL,
    FP_NOM      DOM_CHAR_15 NOT NULL COLLATE PXW_CYRL,
    STORNO_NOM  DOM_CHAR_10 COLLATE PXW_CYRL,
    AKTIVEN     DOM_FLAG DEFAULT 1 NOT NULL
);


CREATE TABLE KA_LOG_NODE (
    ID         DOM_KEY NOT NULL,
    KA_ID      DOM_KEY,
    KA_ID_OLD  DOM_KEY
);


CREATE TABLE KA_PROIZVODITEL (
    ID       DOM_KEY NOT NULL,
    NAME     DOM_CHAR_100,
    BULSTAT  DOM_CHAR_15
);


CREATE TABLE KA_SER_NUM (
    ID          DOM_KEY NOT NULL,
    KA_ID       DOM_KEY,
    SER_NUM_ID  DOM_KEY
);


CREATE TABLE KASA (
    ID           SMALLINT NOT NULL,
    NAME         VARCHAR(20),
    USER_ID      SMALLINT,
    OBEKT_ID     SMALLINT,
    IS_ACTIVE    SMALLINT NOT NULL,
    ACTIV_CODE2  DOM_FLAG DEFAULT 0 NOT NULL
);


CREATE TABLE KI_DOST_NODE (
    ID             DOM_KEY NOT NULL,
    KI_OPR_ID      DOM_KEY NOT NULL,
    SUB_KI_OPR_ID  DOM_KEY NOT NULL
);


CREATE TABLE KI_DOST_SUMA (
    ID           DOM_KEY NOT NULL,
    KI_OPR_ID    DOM_KEY NOT NULL,
    PAY_TIP      DOM_FLAG DEFAULT 0 NOT NULL,
    VAT_PERCENT  DOM_PERCENT
);


CREATE TABLE KI_DOST_SUMA_EL (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY,
    SIMPLE_ID  DOM_KEY,
    KOL        DOM_KOL,
    CENA       DOM_CENA,
    SUMA       DOM_SUMA,
    IN_EL_ID   DOM_KEY
);


CREATE TABLE KI_DOST_SUMA_FAK (
    ID          DOM_KEY NOT NULL,
    KI_SUMA_ID  DOM_KEY NOT NULL,
    FAK_IN_ID   DOM_KEY NOT NULL
);


CREATE TABLE KI_NODE (
    ID             DOM_KEY NOT NULL,
    KI_OPR_ID      DOM_KEY NOT NULL,
    SUB_KI_OPR_ID  DOM_KEY NOT NULL
);


CREATE TABLE KI_PROD_SUMA_EL (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY,
    SIMPLE_ID  DOM_KEY,
    KOL        DOM_KOL,
    CENA       DOM_CENA,
    SUMA       DOM_SUMA,
    OUT_EL_ID  DOM_KEY,
    SUMI_ID    DOM_KEY
);


CREATE TABLE KLI (
    ID                INTEGER NOT NULL,
    KLI_GROUP_ID      SMALLINT,
    CODE              VARCHAR(15),
    NAME              VARCHAR(100) COLLATE PXW_CYRL,
    KLIENT            DOM_BOOLEAN,
    DOSTAV            DOM_BOOLEAN,
    PROIZV            DOM_BOOLEAN,
    PERCENT           NUMERIC(8,4),
    COMMENT           VARCHAR(30),
    ADRES             DOM_CHAR_100,
    TEL               DOM_CHAR_100,
    FOLDER            VARCHAR(128),
    FIRMA_ID          INTEGER,
    DIST              DOM_BOOLEAN,
    ZA_KASA           DOM_BOOLEAN,
    FLAG_CHECK        SMALLINT DEFAULT 0 NOT NULL,
    OBEKT_ID          INTEGER,
    PLACE_ID          INTEGER,
    PADEJ             SMALLINT default 0 NOT NULL,
    DEF_SEL_ID        INTEGER,
    TIP_PRINT         DOM_FLAG,
    DEF_DOST_PRINT    VARCHAR(255),
    DEF_PROD_PRINT    VARCHAR(255),
    DEF_FAK_PRINT     VARCHAR(255),
    DEF_MOVE_PRINT    VARCHAR(255),
    PADEJ_DDS         DOM_SMAL_INT DEFAULT 0 NOT NULL,
    FLAG_PAY          DOM_FLAG DEFAULT 0 NOT NULL,
    DAYS_DOST         DOM_KEY_SMALL,
    FILE_EXPORT_PATH  DOM_CHAR_100,
    DNI_DO_PADEJ      DOM_SMAL_INT,
    NAME_ENGL         DOM_CHAR_100,
    BONUS_TOCHKI      DOM_KEY DEFAULT 0 NOT NULL,
    ADD_DDS           DOM_FLAG DEFAULT 0,
    SLEDI             DOM_FLAG,
    FLAG_PAY_FAKT     DOM_SMAL_INT DEFAULT 0,
    LIST_ID           DOM_INT,
    COEFF             NUMERIC(3,2),
    CFG_LOG_ID        DOM_KEY,
    CODE2             DOM_CHAR_20,
    DVSK_PRINT        DOM_FLAG,
    DNI_FAK_PADEJ     SMALLINT DEFAULT 0 NOT NULL,
    CHECK_FAK         DOM_FLAG,
    VOP               DOM_FLAG NOT NULL,
    LATITUDE          DOM_KOL,
    LONGITUDE         DOM_KOL,
    RADIUS            DOM_SMAL_INT,
    EMAIL             DOM_CHAR_100,
    AGENT             DOM_SMAL_INT,
    CL_ID             DOM_KEY,
    F_ID_TPD          DOM_CHAR_20,
    GLN               DOM_CHAR_20,
    DEF_ORDER_PRINT   VARCHAR(255)
);


CREATE TABLE KLI_ABONAMENT (
    ID             DOM_KEY NOT NULL,
    ABONAMENT_DO   DATE,
    KLI_ID         DOM_KEY,
    OBEKT_ID       DOM_KEY,
    TIP_ABONAMENT  SMALLINT
);


CREATE TABLE KLI_AGENTS (
    ID        DOM_KEY_SMALL NOT NULL,
    NAME      DOM_CHAR_50,
    CODE      DOM_CHAR_15,
    "ACTIVE"  DOM_BOOLEAN,
    KLI_ID    DOM_KEY NOT NULL
);


CREATE TABLE KLI_DIST_NODE (
    ID       INTEGER NOT NULL,
    KLI_ID   INTEGER NOT NULL,
    DIST_ID  INTEGER NOT NULL,
    PERCENT  DOM_PERCENT
);


CREATE TABLE KLI_DOST_NODE (
    KLI_ID     DOM_KEY,
    SIMPLE_ID  DOM_KEY,
    ID         DOM_KEY NOT NULL
);


CREATE TABLE KLI_EXTENDED_VARANTY (
    ID            DOM_KEY NOT NULL,
    KLI_ID        DOM_KEY NOT NULL,
    NAME          DOM_CHAR_50 NOT NULL,
    ADDRESS       DOM_CHAR_100 NOT NULL,
    PHONE_NUMBER  DOM_CHAR_15 NOT NULL,
    EMAIL         DOM_CHAR_50 NOT NULL
);


CREATE TABLE KLI_FIRMA_NODE (
    ID            DOM_KEY NOT NULL,
    KLI_ID        DOM_KEY,
    FIRMA_ID      DOM_KEY,
    INVOICE       DOM_SMAL_INT DEFAULT 0,
    INVOICE_ENGL  DOM_SMAL_INT DEFAULT 0
);


CREATE TABLE KLI_GROUP (
    ID      SMALLINT NOT NULL,
    NAME    VARCHAR(25),
    CODE    VARCHAR(15),
    PARENT  SMALLINT
);


CREATE TABLE KLI_KASA_MAIL_NODE (
    ID       DOM_KEY NOT NULL,
    KLI_ID   DOM_KEY NOT NULL,
    KASA_ID  DOM_KEY NOT NULL,
    EMAIL    DOM_CHAR_50 NOT NULL
);


CREATE TABLE KLI_POCKET_NODE (
    ID           DOM_KEY NOT NULL,
    KLI_ID       DOM_KEY,
    POCKET_ID    DOM_KEY NOT NULL,
    SELEKCIQ_ID  DOM_KEY
);


CREATE TABLE KLI_PRAGOVE (
    ID        INTEGER NOT NULL,
    KLI_ID    INTEGER,
    NOM_PROD  INTEGER,
    SUMA      DOUBLE PRECISION
);


CREATE TABLE KLI_SKLAD_NODE (
    ID           DOM_KEY NOT NULL,
    KLI_ID       DOM_KEY,
    SKLAD_ID     DOM_KEY NOT NULL,
    SELEKCIQ_ID  DOM_KEY
);


CREATE TABLE KLI_TOCHKI_NODE (
    ID             DOM_KEY NOT NULL,
    OPR_CHANGE_ID  DOM_KEY,
    POINTS_OLD     DOM_INT,
    POINTS_NEW     DOM_INT
);


CREATE TABLE KLI_USER_NODE (
    ID       DOM_KEY NOT NULL,
    USER_ID  DOM_KEY,
    KLI_ID   DOM_KEY
);


CREATE TABLE KONSIGNACIA (
    ID          DOM_KEY NOT NULL,
    OPR_OUT_ID  DOM_KEY NOT NULL,
    OPR_IN_ID   DOM_KEY NOT NULL
);


CREATE TABLE LAYOUTS (
    ID        DOM_KEY NOT NULL,
    NAME      DOM_CHAR_50,
    USER_ID   DOM_KEY,
    SHARE     DOM_BOOLEAN,
    FORM_CRC  DOM_INT,
    LAYOUT    DOM_BLOB_TEXT,
    FILTERS   DOM_BLOB_TEXT,
    SQL       DOM_BLOB_TEXT
);


CREATE TABLE LICENCE_EL (
    ID         DOM_KEY NOT NULL,
    SN         DOM_CHAR_30,
    OUT_EL_ID  DOM_KEY,
    IN_EL_ID   DOM_KEY,
    SUMA       DOM_SUMA,
    NAME       DOM_CHAR_30,
    REG_NUM    DOM_CHAR_15,
    SUMA_RET   DOM_SUMA,
    EL_GEN_ID  DOM_KEY
);


CREATE TABLE LICENZ_PROD_NODE (
    ID           DOM_KEY NOT NULL,
    OPR_PROD_ID  DOM_KEY NOT NULL,
    LICENZ_ID    DOM_KEY NOT NULL
);


CREATE TABLE LOCK_OPR (
    ID       DOM_KEY NOT NULL,
    USER_ID  DOM_KEY NOT NULL,
    DT       DOM_DATE_TIME DEFAULT current_timestamp NOT NULL,
    IS_LOCK  DOM_SMAL_INT DEFAULT 0 NOT NULL
);


CREATE TABLE LOCK_OPR_EL (
    ID       DOM_KEY NOT NULL,
    LOCK_ID  DOM_KEY NOT NULL,
    OPR_ID   DOM_KEY NOT NULL
);


CREATE TABLE LOG_CENI_DDS (
    ID        DOM_KEY NOT NULL,
    TIP_DDS   DOM_SMAL_INT NOT NULL,
    OPR_ID    DOM_KEY NOT NULL,
    TIP_CENI  DOM_SMAL_INT NOT NULL,
    USER_ID   DOM_KEY_SMALL NOT NULL,
    DATETIME  DOM_DATE_TIME
);


CREATE TABLE ME (
    ID         SMALLINT NOT NULL,
    NAME       CHAR(2),
    NAME_LONG  VARCHAR(15),
    KOEF       SMALLINT,
    IS_BROI    SMALLINT DEFAULT 0 NOT NULL,
    PREFIX     CHAR(2),
    NAME_ENG   DOM_CHAR_15 COLLATE PXW_CYRL,
    KOEF_ET    DOM_SMAL_INT
);


CREATE TABLE MESA (
    ID                DOM_KEY NOT NULL,
    MARKA             DOM_CHAR_30 NOT NULL,
    STRANA_R          DOM_KEY_SMALL NOT NULL,
    STRANA_G          DOM_KEY_SMALL NOT NULL,
    STRANA_K          DOM_KEY_SMALL NOT NULL,
    ELEMENT_ID        DOM_KEY NOT NULL,
    TIP               DOM_KEY_SMALL,
    AGE               DOM_CHAR_20,
    CATEGORY          DOM_CHAR_10,
    STEPEN_ZALOENOST  DOM_CHAR_10,
    TEGLO             DOM_KOL
);


CREATE TABLE MESA_TIP (
    ID    DOM_KEY_SMALL NOT NULL,
    NAME  DOM_CHAR_10 NOT NULL
);


CREATE TABLE MESSAGES (
    ID       INTEGER NOT NULL,
    USER_ID  INTEGER NOT NULL,
    OT       VARCHAR(30) NOT NULL,
    TEXT     VARCHAR(300) NOT NULL,
    DT       DOM_DATE_TIME,
    CHECKED  DOM_BOOLEAN
);


CREATE TABLE METRO_ARTICLES (
    ID                  DOM_KEY NOT NULL,
    ARTICLE_LIBRARY_ID  DOM_CHAR_300,
    NAME                DOM_CHAR_300,
    SUB_SYS_ID          DOM_CHAR_50,
    EAN                 DOM_CHAR_15,
    CATEGORY_ID         DOM_CHAR_50
);


CREATE TABLE METRO_EXPORT_OPR (
    ID         INTEGER NOT NULL,
    EXPORT_ID  INTEGER,
    OPR_ID     INTEGER
);


CREATE TABLE METRO_EXPORT_SIMPLES (
    ID            DOM_KEY NOT NULL,
    TO_SIMPLE_ID  DOM_INT,
    EXPORT_ID     DOM_INT
);


CREATE TABLE METRO_INVOICE_DOCUMENTS (
    ID                       DOM_KEY NOT NULL,
    DOCUMENT_ID              DOM_CHAR_100,
    DOCUMENT_NUMBER          DOM_CHAR_10,
    DOCUMENT_DATE            DOM_DATE,
    RELATED_DOCUMENT_NUMBER  DOM_CHAR_10,
    ISSUER                   VARCHAR(13),
    RECIPIENT                VARCHAR(13),
    LOCATION                 DOM_CHAR_20,
    INVOICE_TYPE_CODE        DOM_CHAR_8,
    CLASSIFICATION_DESC      DOM_CHAR_8,
    IMPORTED                 DOM_SMAL_INT,
    IMPORTED_OPR_ID          DOM_INT,
    CLIENT_ID                DOM_CHAR_20
);


CREATE TABLE MOVE (
    ID          INTEGER NOT NULL,
    OPR_OUT_ID  INTEGER,
    OPR_IN_ID   INTEGER,
    SUMA_SR     DOUBLE PRECISION
);


CREATE TABLE NAL (
    ID                 INTEGER NOT NULL,
    SIMPLE_ID          INTEGER,
    SKLAD_ID           INTEGER,
    KOL_NAL            QTY,
    SUMA               CURRENCY,
    LAST_CENA          DOM_CENA,
    SUMA_FR            CURRENCY,
    KOL_RZV            DOM_KOL,
    DATETIME_LASTCENA  DOM_DATE_TIME,
    KOL_IZL            DOM_KOL NOT NULL,
    MIN_QTY            DOM_KOL,
    MAX_QTY            DOM_KOL,
    LAST_DOST_OPR_ID   DOM_KEY
);


CREATE TABLE NAL_F (
    ID         INTEGER NOT NULL,
    SIMPLE_ID  INTEGER,
    KOL        DOUBLE PRECISION,
    SUMA_SR    DOUBLE PRECISION,
    SUMA_FR    DOUBLE PRECISION,
    LAST_CENA  NUMERIC(8,3)
);


CREATE TABLE NAL2 (
    ID      DOM_KEY NOT NULL,
    KOL     DOM_KOL NOT NULL,
    NAL_ID  DOM_KEY NOT NULL
);


CREATE TABLE OBEKT (
    ID                SMALLINT NOT NULL,
    NAME              VARCHAR(20),
    FAK_NUM           VARCHAR(10),
    PLACE_ID          INTEGER,
    LOCAL_FAK_NUM     VARCHAR(10),
    GARANCIA_NUM      INTEGER,
    LOCAL_STORNO_NUM  DOM_CHAR_10,
    EXPORT_NUMBER     DOM_CHAR_15,
    EMAIL             DOM_CHAR_50,
    ADDRESS           DOM_CHAR_100,
    PHONE_NUMBER      DOM_CHAR_30,
    NAME_LAT          DOM_CHAR_50
);


CREATE TABLE OFERTA (
    ID      INTEGER NOT NULL,
    NAME    VARCHAR(100),
    OPR_ID  INTEGER
);


CREATE TABLE OFERTA_EL (
    ID             INTEGER NOT NULL,
    SIMPLE_ID      INTEGER,
    CENA           DOUBLE PRECISION,
    OPR_ID         INTEGER,
    CENA_IN        DOUBLE PRECISION,
    KOL            DOM_KOL,
    RAZFASOVKA_ID  DOM_KEY,
    RAZ_KOL        DOM_KOL,
    CENA_OS        DOM_CENA
);


CREATE TABLE OFF_OBEKTI_LIST (
    ID        DOM_KEY NOT NULL,
    OBEKT_ID  DOM_KEY
);


CREATE TABLE OFF_ON_LINE_LOG (
    ID          INTEGER NOT NULL,
    TABLE_NAME  VARCHAR(50),
    CMD         VARCHAR(1),
    RECORD_ID   INTEGER
);


CREATE TABLE OFFER_EL (
    ID          DOM_KEY NOT NULL,
    SIMPLE_ID   DOM_KEY NOT NULL,
    QTY         DOM_KOL NOT NULL,
    OFFER_ID    DOM_KEY NOT NULL,
    COMMENT_ID  DOM_KEY
);


CREATE TABLE OFFER_POR_NODE (
    ID        DOM_KEY NOT NULL,
    OFFER_ID  DOM_KEY NOT NULL,
    POR_ID    DOM_KEY NOT NULL
);


CREATE TABLE OFFER_TERMS (
    ID       DOM_KEY NOT NULL,
    NOTE     DOM_CHAR_100 NOT NULL,
    USER_ID  DOM_KEY,
    STATUS   DOM_FLAG,
    TERMS    DOM_BLOB_TEXT NOT NULL
);


CREATE TABLE OFFER_USER_NODE (
    ID        DOM_KEY NOT NULL,
    OFFER_ID  DOM_KEY NOT NULL,
    USER_ID   DOM_KEY NOT NULL
);


CREATE TABLE OFFERS (
    ID              DOM_KEY NOT NULL,
    OPR_ID          DOM_KEY NOT NULL,
    STATUS          DOM_FLAG NOT NULL,
    AGENT_ID        DOM_KEY,
    VISIT_DATE      DOM_DATE_TIME,
    VISIT_DURATION  DOM_TIME,
    OFFER_TYPE      DOM_SMAL_INT NOT NULL,
    ADDRESS_ID      DOM_KEY
);


CREATE TABLE OLD_IN_EL (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY NOT NULL,
    SUMA_FR    DOM_SUMA NOT NULL,
    KOL        DOM_KOL NOT NULL,
    KOL2       DOM_KOL,
    SUMA_SR    DOM_SUMA NOT NULL,
    SUMA       DOM_SUMA
);


CREATE TABLE OLD_OFFER_EL (
    ID          DOM_KEY NOT NULL,
    SIMPLE_ID   DOM_KEY NOT NULL,
    QTY         DOM_KOL NOT NULL,
    OFFER_ID    DOM_KEY NOT NULL,
    OPR_ID      DOM_KEY NOT NULL,
    COMMENT_ID  DOM_KEY
);


CREATE TABLE OLD_OFFER_USER_NODE (
    ID        DOM_KEY NOT NULL,
    OFFER_ID  DOM_KEY NOT NULL,
    USER_ID   DOM_KEY NOT NULL,
    OPR_ID    DOM_KEY NOT NULL
);


CREATE TABLE OLD_OFFERS (
    ID              DOM_KEY NOT NULL,
    OFFER_ID        DOM_KEY NOT NULL,
    OPR_ID          DOM_KEY NOT NULL,
    STATUS          DOM_FLAG NOT NULL,
    AGENT_ID        DOM_KEY,
    VISIT_DATE      DOM_DATE_TIME,
    VISIT_DURATION  DOM_TIME,
    OFFER_TYPE      DOM_SMAL_INT NOT NULL,
    ADDRESS_ID      DOM_KEY
);


CREATE TABLE OLD_OUT_EL (
    ID           DOM_KEY NOT NULL,
    OPR_ID       DOM_KEY NOT NULL,
    SIMPLE_ID    DOM_KEY NOT NULL,
    SUMA_FR      DOM_SUMA NOT NULL,
    SUMA_SR      DOM_SUMA NOT NULL,
    SUMA         DOM_SUMA NOT NULL,
    KOL          DOM_KOL NOT NULL,
    KOL2         DOM_KOL,
    PROD_CENA    DOM_CENA,
    CENA_OS      DOM_CENA,
    CENA_CL      DOM_CENA,
    VAT_PERCENT  DOM_PERCENT NOT NULL
);


CREATE TABLE OLD_OUT_EL_PE_NODE (
    ID             DOM_KEY NOT NULL,
    OLD_OUT_EL_ID  DOM_KEY NOT NULL,
    PARTIDA_EL_ID  DOM_KEY NOT NULL,
    IN_EL_ID       DOM_KEY
);


CREATE TABLE OLD_PARI_EL (
    ID          DOM_KEY NOT NULL,
    OPR_ID      DOM_KEY NOT NULL,
    KASA_ID     DOM_KEY_SMALL,
    OBEKT_ID    DOM_KEY_SMALL,
    SUMA        DOM_SUMA NOT NULL,
    VALUTA_ID   DOM_KEY NOT NULL,
    KURS        DOM_CENA NOT NULL,
    TIP         DOM_FLAG NOT NULL,
    PARI_IO_ID  DOM_KEY,
    ALLOW_FAK   DOM_SMAL_INT
);


CREATE TABLE OLD_PARI_FAK_NODE (
    ID       DOM_KEY NOT NULL,
    FAK_ID   DOM_KEY NOT NULL,
    SUMA     DOM_SUMA NOT NULL,
    NODE_ID  DOM_KEY NOT NULL
);


CREATE TABLE OLD_POR_EL_PARAMS (
    ID         DOM_KEY NOT NULL,
    POR_EL_ID  DOM_KEY NOT NULL,
    VAR_NAME   DOM_CHAR_10 NOT NULL,
    QUANTITY   QTY NOT NULL,
    QTY_COUNT  QTY
);


CREATE TABLE OLD_POR_EL_PRICE_COEF (
    ID          DOM_KEY NOT NULL,
    POR_EL_ID   DOM_KEY NOT NULL,
    SIMPLE_ID   DOM_KEY NOT NULL,
    COEFICIENT  DOM_PERCENT NOT NULL
);


CREATE TABLE OLD_REQUEST_EL (
    ID                DOM_KEY NOT NULL,
    OPR_REQUEST_ID    DOM_INT,
    NOMER             DOM_SMAL_INT,
    SIMPLE_ID         DOM_INT,
    MASTER_SIMPLE_ID  DOM_INT,
    SIMPLE_CALC_ID    DOM_INT,
    KOL               DOM_KOL,
    TOT_SUM           DOM_SUMA,
    CENA_CL           DOM_CENA
);


CREATE TABLE OLD_TASKS (
    ID       DOM_KEY NOT NULL,
    TASK_ID  DOM_KEY,
    OPR_ID   DOM_KEY
);


CREATE TABLE ON_OFF_LINE_LOG (
    ID          INTEGER,
    SQL         VARCHAR(1024),
    RECIPIENTS  INTEGER
);


CREATE TABLE ONLINE_ROLES (
    ID         DOM_KEY NOT NULL,
    ROLE_NAME  DOM_CHAR_30 NOT NULL,
    NOTE       DOM_CHAR_50
);


CREATE TABLE ONLINE_USERS (
    ID              DOM_KEY_SMALL NOT NULL,
    EMAIL           DOM_CHAR_100 NOT NULL,
    USER_ID         DOM_KEY_SMALL,
    DISTRIBUTOR_ID  DOM_KEY,
    IS_ACTIVE       DOM_FLAG NOT NULL,
    PASS            DOM_CHAR_50 NOT NULL
);


CREATE TABLE OPENED_FORMS_SYS (
    ID           DOM_KEY NOT NULL,
    FORM_NAME    DOM_CHAR_100 NOT NULL,
    OPENED_FROM  DOM_INT,
    USER_ID      DOM_KEY
);


CREATE TABLE OPR (
    ID        INTEGER NOT NULL,
    OPR_TIP   SMALLINT,
    DATETIME  TIMESTAMP,
    IP        INTEGER,
    USER_ID   SMALLINT,
    SKLAD_ID  SMALLINT,
    KLI_ID    INTEGER,
    SUMA      CURRENCY,
    OPR_DATE  DATE,
    OTC_ID    DOM_KEY,
    IS_LOCK   DOM_SMAL_INT DEFAULT 0 NOT NULL,
    PC_ID     DOM_KEY_SMALL
);


CREATE TABLE OPR_AMBALAJ_NODE (
    ID              INTEGER NOT NULL,
    OPR_PROD_ID     INTEGER NOT NULL,
    OPR_AMBALAJ_ID  INTEGER NOT NULL
);


CREATE TABLE OPR_ANUL (
    ID         INTEGER NOT NULL,
    OPR_ID     INTEGER NOT NULL,
    AN_OPR_ID  INTEGER NOT NULL
);


CREATE TABLE OPR_EDIT (
    ID         INTEGER NOT NULL,
    OPR_ID     INTEGER NOT NULL,
    ED_OPR_ID  INTEGER NOT NULL,
    SKLAD_ID   SMALLINT,
    USER_ID    SMALLINT,
    KLI_ID     INTEGER,
    SUMA       CURRENCY,
    OPR_DATE   DATE
);


CREATE TABLE OPR_GARANCIA_NODE (
    ID               INTEGER NOT NULL,
    OPR_PROD_ID      INTEGER,
    OPR_GARANCIA_ID  INTEGER,
    COL_GAR          SMALLINT DEFAULT 0 NOT NULL
);


CREATE TABLE OPR_PADEJ (
    ID          INTEGER NOT NULL,
    OPR_ID      INTEGER,
    DATA_PADEJ  DATE
);


CREATE TABLE OPR_PAYMENT_NODE (
    ID               INTEGER NOT NULL,
    OPR_ID           INTEGER NOT NULL,
    PAYMENT_ID       INTEGER NOT NULL,
    SUMA             DOUBLE PRECISION,
    DATE_OF_PAYMENT  DOM_DATE_TIME
);


CREATE TABLE OPR_PRODUCTION_REQUEST (
    ID                    DOM_KEY NOT NULL,
    OPR_ID                DOM_INT,
    SUMA_KAPARO           DOM_SUMA,
    OT_SKLAD              DOM_SMAL_INT,
    V_SKLAD               DOM_SMAL_INT,
    FLAG_COMPLETE         DOM_BOOLEAN,
    KLIENT                DOM_CHAR_100,
    POR_NUM               DOM_CHAR_30,
    DT_MONTAJ             DOM_DATE,
    MONTAJ_USER_ID        DOM_KEY,
    MANUAL_COMPLETE       DOM_FLAG,
    PROD                  DOM_KEY,
    TIME_MONTAJ           DOM_TIME,
    DT_PRODUCTION_MANUAL  DOM_DATE,
    MONTAJ_FLAG           DOM_FLAG,
    ZARABOTKA_FLAG        DOM_FLAG,
    DT_MONTAJ_END         DOM_DATE,
    TIME_MONTAJ_END       DOM_TIME
);


CREATE TABLE OPR_RAZPAD_NODE (
    ID              INTEGER NOT NULL,
    OUT_EL_ID       INTEGER,
    IN_EL_ID        INTEGER,
    SUMA_SR         DOUBLE PRECISION,
    SIMPLE_CALC_ID  DOM_KEY,
    PERCENT_SUM     DOM_PERCENT
);


CREATE TABLE OPR_RECEPIES (
    ID          DOM_KEY NOT NULL,
    OPR_ID      DOM_KEY NOT NULL,
    RECEPIE_ID  DOM_KEY NOT NULL,
    KOL         DOM_KOL NOT NULL
);


CREATE TABLE OPR_RECEPIES_EL (
    ID          DOM_KEY NOT NULL,
    OPR_ID      DOM_KEY NOT NULL,
    RECEPIE_ID  DOM_KEY NOT NULL,
    SIMPLE_ID   DOM_KEY NOT NULL,
    KOL         DOM_KOL NOT NULL
);


CREATE TABLE OPR_REFUSED (
    ID              DOM_KEY NOT NULL,
    ORP_ID          DOM_KEY,
    TIP_REFUSED_ID  DOM_KEY
);


CREATE TABLE OPR_REMOTE (
    ID         DOM_KEY NOT NULL,
    OPR_ID     INTEGER,
    REMOTE_ID  INTEGER,
    OBEKT_ID   INTEGER,
    DATETIME   TIMESTAMP
);


CREATE TABLE OPR_SUMI (
    ID       DOM_KEY NOT NULL,
    OPR_ID   DOM_KEY NOT NULL,
    SUMA_SR  DOM_SUMA,
    SUMA_FR  DOM_SUMA
);


CREATE TABLE OPR_TEMPLATE (
    ID                 DOM_KEY NOT NULL,
    KLI_ID             DOM_KEY,
    OBEKT_ID           DOM_KEY,
    PAY_TIP            DOM_SMAL_INT,
    FAK                DOM_FLAG,
    ACTIVEN            DOM_FLAG,
    ACTIVEN_OT_DATA    DOM_DATE,
    ACTIVEN_DO_DATA    DOM_DATE,
    GENERIRANE_DEN     DOM_SMAL_INT,
    PADEJ_DEN          DOM_SMAL_INT,
    ACTIVEN_MESECI     DOM_SMAL_INT,
    SUMA               DOM_SUMA,
    LAST_GEN_DATE      DOM_DATE,
    USER_ID            DOM_KEY,
    SKLAD_ID           DOM_KEY_SMALL,
    SUMA_OSCL          DOM_SUMA,
    DAY_REG            DOM_SMAL_INT,
    FLAG_MONTH         DOM_SMAL_INT,
    DELETED            DOM_FLAG DEFAULT 0 NOT NULL,
    OBEKT_FAK_ID       DOM_KEY,
    TIP                DOM_SMAL_INT DEFAULT 0,
    FAK_NAME           DOM_CHAR_100,
    EFAK               DOM_FLAG,
    FIRMA_ID           DOM_KEY,
    DISTRIBUTOR_ID     DOM_KEY,
    DIST_SUMA          DOM_SUMA,
    DIST_PROCENT       DOM_PERCENT,
    DIST_ROUND_TIP_ID  DOM_KEY,
    DIST_DT_AKTIVEN    DOM_DATE,
    DIST_FAK_FLAG      DOM_FLAG,
    FAK_COMMENT        DOM_CHAR_100
);


CREATE TABLE OPR_TEMPLATE_EL (
    ID               DOM_KEY NOT NULL,
    SIMPLE_ID        DOM_KEY,
    KOL              DOM_KOL,
    CENA             DOM_CENA,
    SUMA             DOM_SUMA,
    OPR_TEMPLATE_ID  DOM_KEY,
    CENA_OSCL        DOM_CENA,
    SUMA_OSCL        DOM_SUMA
);


CREATE TABLE OPR_TEMPLATE_GEN (
    ID                 DOM_KEY NOT NULL,
    KLI_ID             DOM_KEY,
    OBEKT_ID           DOM_KEY,
    PAY_TIP            DOM_SMAL_INT,
    FAK                DOM_FLAG,
    ACTIVEN            DOM_FLAG,
    ACTIVEN_OT_DATA    DOM_DATE,
    ACTIVEN_DO_DATA    DOM_DATE,
    GENERIRANE_DEN     DOM_SMAL_INT,
    PADEJ_DEN          DOM_SMAL_INT,
    ACTIVEN_MESECI     DOM_SMAL_INT,
    SUMA               DOM_SUMA,
    LAST_GEN_DATE      DOM_DATE,
    USER_ID            DOM_KEY,
    SKLAD_ID           DOM_KEY_SMALL,
    SUMA_OSCL          DOM_SUMA,
    DAY_REG            DOM_SMAL_INT,
    FLAG_MONTH         DOM_SMAL_INT,
    DELETED            DOM_FLAG DEFAULT 0 NOT NULL,
    OBEKT_FAK_ID       DOM_KEY,
    TIP                DOM_SMAL_INT DEFAULT 0,
    FAK_NAME           DOM_CHAR_100,
    EFAK               DOM_FLAG,
    FIRMA_ID           DOM_KEY,
    DISTRIBUTOR_ID     DOM_KEY,
    DIST_SUMA          DOM_SUMA,
    DIST_PROCENT       DOM_PERCENT,
    DIST_ROUND_TIP_ID  DOM_KEY,
    DIST_DT_AKTIVEN    DOM_DATE,
    DIST_FAK_FLAG      DOM_FLAG,
    FAK_COMMENT        DOM_CHAR_100,
    OPR_TEMPLATE_ID    DOM_KEY
);


CREATE TABLE OPR_TEMPLATE_TASK_NODE (
    ID               DOM_KEY NOT NULL,
    TEMPLATE_ID      DOM_KEY,
    TASK_ID          DOM_KEY,
    TEMPLATE_GEN_ID  DOM_KEY
);


CREATE TABLE OPR_TIP (
    ID           SMALLINT NOT NULL,
    NAME         VARCHAR(45),
    IS_LOCK      DOM_SMAL_INT DEFAULT 0 NOT NULL,
    FLAG_BROENE  DOM_FLAG DEFAULT 0 NOT NULL
);


CREATE TABLE OPR_WAITING_NODE (
    ID              DOM_KEY NOT NULL,
    WAITING_OPR_ID  DOM_KEY,
    OPR_ID          DOM_KEY
);


CREATE TABLE OPRGARANCIA (
    ID         INTEGER NOT NULL,
    OPR_ID     DOM_KEY,
    SIMPLE_ID  DOM_KEY,
    G_TIP_ID   DOM_KEY,
    G_PERIOD   INTEGER,
    GAR_NOM    INTEGER,
    SN         VARCHAR(30)
);


CREATE TABLE ORDER_ACTIONS (
    ID         DOM_KEY NOT NULL,
    ORDER_ID   DOM_KEY NOT NULL,
    USER_ID    DOM_KEY NOT NULL,
    ACTION_ID  DOM_KEY NOT NULL,
    DT         DOM_DATE_TIME NOT NULL
);


CREATE TABLE OTC (
    ID        DOM_KEY NOT NULL,
    OPR_ID    INTEGER,
    OTC_KASA  SMALLINT DEFAULT 0 NOT NULL,
    OBEKT_ID  DOM_SMAL_INT
);


CREATE TABLE OTC_EL (
    ID        INTEGER NOT NULL,
    OPR_ID    INTEGER,
    TIP_SUMA  SMALLINT,
    SUMA_ID   SMALLINT,
    SUMA      CURRENCY
);


CREATE TABLE OTC_EL_EDIT (
    ID        INTEGER NOT NULL,
    OPR_ID    INTEGER,
    TIP_SUMA  SMALLINT,
    SUMA_ID   SMALLINT,
    SUMA      CURRENCY,
    P_NOMER   INTEGER
);


CREATE TABLE OTC_PER (
    ID        INTEGER NOT NULL,
    OPR_ID    INTEGER NOT NULL,
    OTC_KASA  SMALLINT DEFAULT 0 NOT NULL
);


CREATE TABLE OTCS_OPR_NODE (
    ID       DOM_KEY NOT NULL,
    OTCS_ID  DOM_KEY NOT NULL,
    OPR_ID   DOM_KEY NOT NULL
);


CREATE TABLE OUT (
    ID              INTEGER NOT NULL,
    OPR_ID          INTEGER,
    SUMA_BASE       CURRENCY,
    FP              DOM_FLAG,
    PAY_TIP         DOM_FLAG,
    PSHOP           DOM_BOOLEAN DEFAULT '0',
    OTKLONENIE      DOM_KEY_SMALL,
    SUMA_KLI_PAY    DOM_SUMA,
    OBEKT_ID        DOM_SMAL_INT,
    REQUIRE_FAKT    DOM_FLAG,
    BONNUM          INTEGER,
    KLI_AGENT_ID    DOM_KEY_SMALL,
    FLAG_UNCOLLECT  DOM_FLAG DEFAULT 0,
    POR_NUM         DOM_CHAR_30,
    CODE            DOM_CHAR_15,
    TS_SMETKA_ID    DOM_KEY,
    TD              DOM_INT,
    UNP_ID          DOM_INT64
);


CREATE TABLE OUT_EL (
    ID         INTEGER NOT NULL,
    OPR_ID     INTEGER,
    SIMPLE_ID  INTEGER,
    KOL        QTY,
    SUMA_SR    CURRENCY,
    SUMA_FR    CURRENCY,
    SUMA       CURRENCY,
    IS_F       SMALLINT DEFAULT 0 NOT NULL
);


CREATE TABLE OUT_EL_ANUL (
    ID         INTEGER NOT NULL,
    ANUL_ID    INTEGER,
    SIMPLE_ID  INTEGER,
    KOL        QTY,
    SUMA_SR    CURRENCY,
    SUMA_FR    CURRENCY,
    SUMA       CURRENCY,
    KOL2       DOM_KOL,
    PROD_CENA  DOM_CENA
);


CREATE TABLE OUT_EL_EDIT (
    ID         INTEGER NOT NULL,
    EDIT_ID    INTEGER,
    SIMPLE_ID  INTEGER,
    KOL        QTY,
    SUMA_SR    CURRENCY,
    SUMA_FR    CURRENCY,
    SUMA       CURRENCY,
    KOL2       DOM_KOL,
    PROD_CENA  DOM_CENA
);


CREATE TABLE OUT_EL_FAK_OUT_EL (
    ID             DOM_KEY NOT NULL,
    OUT_EL_ID      DOM_KEY NOT NULL,
    FAK_OUT_EL_ID  DOM_KEY NOT NULL,
    KOL            DOM_KOL DEFAULT 0.00 NOT NULL
);


CREATE TABLE OUT_EL_RAZ_NODE (
    ID             INTEGER NOT NULL,
    OUT_EL_ID      INTEGER NOT NULL,
    RAZFASOVKA_ID  INTEGER NOT NULL,
    KOL            DOUBLE PRECISION
);


CREATE TABLE OUT_EL2 (
    ID         DOM_KEY NOT NULL,
    OUT_EL_ID  DOM_KEY NOT NULL,
    KOL        DOM_KOL NOT NULL
);


CREATE TABLE OWNER (
    ID              SMALLINT NOT NULL,
    NAME            VARCHAR(50),
    NAME_SHORT      DOM_CHAR_50,
    ADRES           VARCHAR(50),
    TEL             VARCHAR(50),
    EMAIL           VARCHAR(50),
    HTTP            VARCHAR(50),
    MOL             VARCHAR(30),
    DAN_NUM         VARCHAR(10),
    BULSTAT         VARCHAR(13),
    BANKA           VARCHAR(30),
    BANK_SMETKA     VARCHAR(30),
    BANK_KOD        VARCHAR(8),
    DDS_BANKA       VARCHAR(30),
    DDS_SMETKA      VARCHAR(30),
    LOGO            BLOB SUB_TYPE 0 SEGMENT SIZE 1024,
    REG_DDS         DOM_BOOLEAN DEFAULT '1',
    DDS_BANK_KOD    VARCHAR(8),
    IDNOMDDS        VARCHAR(15),
    DEF             DOM_KEY_SMALL,
    C_CHECK         CHAR(32),
    NAME_LAT        DOM_CHAR_50,
    NAME_SHORT_LAT  DOM_CHAR_50,
    ADDRES_LAT      DOM_CHAR_50,
    MOL_LAT         DOM_CHAR_30
);


CREATE TABLE OWNER_BANKI (
    ID              DOM_SMAL_INT NOT NULL,
    BANKA           DOM_CHAR_30,
    KOD             DOM_CHAR_8,
    SMETKA          DOM_CHAR_30 NOT NULL,
    OWNER_ID        DOM_SMAL_INT,
    BANKA_NAME_LAT  DOM_CHAR_30
);


CREATE TABLE PARI (
    ID          INTEGER NOT NULL,
    OPR_ID      INTEGER,
    PARI_IO_ID  SMALLINT,
    KASA_ID     SMALLINT,
    OBEKT_ID    SMALLINT,
    SUMA        NUMERIC(10,2) NOT NULL,
    VALUTA_ID   INTEGER NOT NULL,
    KURS        DOUBLE PRECISION NOT NULL,
    PROWERKA    SMALLINT DEFAULT 0 NOT NULL,
    ALLOW_FAK   SMALLINT DEFAULT 0 NOT NULL,
    TIP         SMALLINT NOT NULL
);


CREATE TABLE PARI_CRYPT (
    ID          INTEGER NOT NULL,
    OPR_ID      INTEGER,
    PARI_IO_ID  SMALLINT,
    KASA_ID     SMALLINT,
    OBEKT_ID    SMALLINT,
    SUMA        VARCHAR(25) NOT NULL,
    VALUTA_ID   INTEGER NOT NULL,
    KURS        DOUBLE PRECISION NOT NULL,
    PROWERKA    SMALLINT DEFAULT 0 NOT NULL,
    ALLOW_FAK   SMALLINT DEFAULT 0 NOT NULL,
    TIP         SMALLINT NOT NULL
);


CREATE TABLE PARI_DIST (
    ID           INTEGER NOT NULL,
    OPR_ID       INTEGER NOT NULL,
    OPR_PROD_ID  INTEGER NOT NULL,
    PAY_TIP      SMALLINT DEFAULT 0,
    SUMA         CURRENCY
);


CREATE TABLE PARI_EL_ANUL (
    ID         INTEGER NOT NULL,
    ANUL_ID    INTEGER,
    KASA_ID    SMALLINT,
    OBEKT_ID   SMALLINT,
    SUMA       NUMERIC(10,2) NOT NULL,
    VALUTA_ID  INTEGER NOT NULL,
    KURS       DOUBLE PRECISION NOT NULL,
    TIP        SMALLINT NOT NULL
);


CREATE TABLE PARI_EL_EDIT (
    ID         INTEGER NOT NULL,
    EDIT_ID    INTEGER,
    KASA_ID    SMALLINT,
    OBEKT_ID   SMALLINT,
    SUMA       NUMERIC(10,2) NOT NULL,
    VALUTA_ID  INTEGER NOT NULL,
    KURS       DOUBLE PRECISION NOT NULL,
    TIP        SMALLINT NOT NULL
);


CREATE TABLE PARI_FAK_NODE (
    ID       DOM_KEY NOT NULL,
    FAK_ID   DOM_KEY NOT NULL,
    SUMA     DOM_SUMA NOT NULL,
    NODE_ID  DOM_KEY NOT NULL
);


CREATE TABLE PARI_FAKINUSLUGA_NODE (
    ID         INTEGER NOT NULL,
    PARI_ID    INTEGER,
    FAK_IN_ID  INTEGER
);


CREATE TABLE PARI_IO (
    ID         SMALLINT NOT NULL,
    NAME       VARCHAR(30),
    TIP        SMALLINT,
    PARENT     INTEGER,
    USE_KLI    DOM_BOOLEAN,
    FAK        DOM_BOOLEAN,
    SPR_TIP    DOM_KEY_SMALL,
    IS_ACTIVE  DOM_SMAL_INT DEFAULT 1
);


CREATE TABLE PARI_NODE (
    ID       INTEGER NOT NULL,
    FROM_ID  INTEGER,
    TO_ID    INTEGER
);


CREATE TABLE PARI_SKLOPR_NODE (
    ID           INTEGER NOT NULL,
    OPR_PARI_ID  INTEGER NOT NULL,
    OPR_ID       INTEGER NOT NULL,
    SUMA         CURRENCY,
    OPR_OTC_ID   INTEGER,
    KASA_ID      DOM_KEY
);


CREATE TABLE PARI_TMP (
    ID          INTEGER NOT NULL,
    OPR_ID      INTEGER NOT NULL,
    PARI_IO_ID  SMALLINT NOT NULL,
    KASA_ID     SMALLINT NOT NULL,
    OBEKT_ID    SMALLINT,
    SUMA        NUMERIC(10,2) NOT NULL,
    VALUTA_ID   INTEGER NOT NULL,
    KURS        DOUBLE PRECISION NOT NULL,
    TIP         SMALLINT NOT NULL,
    IS_USED     SMALLINT DEFAULT 0 NOT NULL,
    FAK_OPR_ID  DOM_KEY
);


CREATE TABLE PARTIDA_EL (
    ID    INTEGER NOT NULL,
    SROK  DATE
);


CREATE TABLE PARTIDA_EL_NODE (
    ID          INTEGER NOT NULL,
    OPR_ID      INTEGER,
    KOL         QTY,
    SUMA_FR     DOM_SUMA NOT NULL,
    SUMA_SR     DOM_SUMA NOT NULL,
    PARTIDA_ID  DOM_KEY NOT NULL
);


CREATE TABLE PARTIDA_EL_PRINT (
    ID           DOM_KEY NOT NULL,
    PARTIDA_N    DOM_CHAR_30,
    SROK         DOM_DATE,
    OUT_EL_ID    DOM_INT,
    ORDER_EL_ID  DOM_INT
);


CREATE TABLE PARTIDA_IN_EL_NODE (
    ID               DOM_KEY NOT NULL,
    IN_EL_ID         DOM_KEY NOT NULL,
    PARTIDA_NODE_ID  DOM_KEY NOT NULL
);


CREATE TABLE PARTIDA_IZL_NODE (
    ID             INTEGER NOT NULL,
    PARTIDA_EL_ID  INTEGER NOT NULL,
    IZL_ID         INTEGER NOT NULL
);


CREATE TABLE PARTIDA_NAL (
    ID          INTEGER NOT NULL,
    KOL         DOM_KOL NOT NULL,
    SUMA_FR     DOM_SUMA NOT NULL,
    IN_EL_ID    INTEGER NOT NULL,
    ELEMENT_ID  INTEGER NOT NULL,
    SIMPLE_ID   DOM_KEY,
    SKLAD_ID    DOM_KEY_SMALL
);


CREATE TABLE PARTIDA_OUT_EL_NODE (
    ID               INTEGER NOT NULL,
    OUT_EL_ID        INTEGER NOT NULL,
    PARTIDA_NODE_ID  INTEGER NOT NULL
);


CREATE TABLE PARTIDA_PROP_NODE (
    ID             DOM_KEY NOT NULL,
    PARTIDA_EL_ID  DOM_KEY NOT NULL,
    MAJOR_PROP_ID  DOM_KEY NOT NULL,
    MINOR_PROP_ID  DOM_KEY NOT NULL
);


CREATE TABLE PARTIDA_RETURN_NODE (
    ID       DOM_KEY NOT NULL,
    FROM_ID  DOM_KEY NOT NULL,
    TO_ID    DOM_KEY NOT NULL
);


CREATE TABLE PATHS (
    ID             DOM_KEY NOT NULL,
    FROM_PLACE_ID  DOM_KEY,
    TO_PLACE_ID    DOM_KEY,
    DISTANCE       DOUBLE PRECISION,
    MARSHRUT       VARCHAR(1024)
);


CREATE TABLE PAY_NOCASH_NODE (
    ID             DOM_KEY NOT NULL,
    OPR_ID         DOM_KEY,
    PAYMENT_EL_ID  DOM_KEY
);


CREATE TABLE PAYMENT (
    ID           INTEGER NOT NULL,
    OPR_ID       INTEGER,
    FLAG_BONUS   DOM_SMAL_INT DEFAULT 0 NOT NULL,
    FLAG_AVANS   DOM_SMAL_INT DEFAULT 0 NOT NULL,
    UNP_ID       DOM_INT64,
    FAK_ID       DOM_KEY,
    IS_BANK      DOM_FLAG DEFAULT 1 NOT NULL,
    IDX          DOM_KEY,
    NUMBER       DOM_CHAR_50,
    BRANCH_ID    DOM_KEY,
    VAT_PERCENT  DOM_PERCENT
);


CREATE TABLE PAYMENT_AVANSOVO (
    ID              DOM_KEY NOT NULL,
    SUMA_AVANSOVA   DOM_SUMA,
    SUMA_OSTATAK    DOM_SUMA,
    KLI_ID          DOM_KEY,
    PAYMENT_OPR_ID  DOM_KEY
);


CREATE TABLE PAYMENT_NODE (
    ID       DOM_KEY NOT NULL,
    OPR_ID   DOM_KEY NOT NULL,
    NODE_ID  DOM_KEY NOT NULL
);


CREATE TABLE PAYMENT_NOW (
    ID              DOM_KEY NOT NULL,
    OPR_PROD_ID     DOM_KEY,
    OPR_PAYMENT_ID  DOM_KEY
);


CREATE TABLE PAYMENTS_EL (
    ID              DOM_KEY NOT NULL,
    SUMA            DOM_SUMA,
    BANKA           DOM_CHAR_50,
    NOMER           DOM_CHAR_50,
    PAYMENT_TIP_ID  DOM_KEY,
    PAYMENT_ID      DOM_KEY,
    KLI_ID          DOM_KEY
);


CREATE TABLE PL_DELIVERY_STORAGE_EDIT (
    ID           INTEGER NOT NULL,
    OPR_EDIT_ID  INTEGER,
    STORAGE_ID   INTEGER
);


CREATE TABLE PLACE (
    ID         INTEGER NOT NULL,
    NAME       VARCHAR(30),
    POST_CODE  DOM_SMAL_INT,
    CODE2      DOM_CHAR_20,
    COUNTY_ID  DOM_INT
);


CREATE GLOBAL TEMPORARY TABLE PN_TMP (
    PN_ID          DOM_INT,
    PN_KOL         DOM_KOL,
    PN_SUMA_FR     DOM_SUMA,
    PN_SIMPLE_ID   DOM_INT,
    PN_IN_EL_ID    DOM_INT,
    PN_ELEMENT_ID  INTEGER
) ON COMMIT DELETE ROWS;


CREATE TABLE POCKET_OTC (
    ID         DOM_KEY NOT NULL,
    MD5        DOM_CHAR_50 COLLATE PXW_CYRL,
    FILE_DT    DOM_DATE_TIME,
    FILE_NAME  DOM_CHAR_20 COLLATE PXW_CYRL,
    DT         DOM_DATE_TIME,
    USER_ID    DOM_KEY
);


CREATE TABLE POCKET_SHOP (
    ID               INTEGER NOT NULL,
    SKLAD_ID         INTEGER NOT NULL,
    USER_ID          INTEGER NOT NULL,
    PRINTER          CHAR(1),
    SMETKI           DOM_BOOLEAN,
    KOLICHESTWA      DOM_BOOLEAN,
    PATH             VARCHAR(255),
    HIDE_QTY         DOM_BOOLEAN NOT NULL,
    VSICHKI          DOM_KEY_SMALL,
    CL_ID            DOM_KEY,
    TIP_IZBOR_CENA   DOM_KEY_SMALL DEFAULT 0 NOT NULL,
    OTR_KOL          DOM_KEY_SMALL,
    HIDE_CODE        DOM_SMAL_INT,
    AGENT_ID         DOM_KEY,
    NAME             DOM_CHAR_50 COLLATE PXW_CYRL,
    NOV_KLI_V_SKLAD  DOM_FLAG,
    FIRMA_ID         DOM_KEY
);


CREATE TABLE POR (
    ID                         INTEGER NOT NULL,
    OPR_ID                     INTEGER NOT NULL,
    STATUS                     SMALLINT DEFAULT 0 NOT NULL,
    TIP_ZAQWKA                 SMALLINT DEFAULT 0 NOT NULL,
    ZA_DATA                    DATE DEFAULT CURRENT_DATE NOT NULL,
    SKLAD_ID                   INTEGER NOT NULL,
    STATUS_DATE                TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    NOMER                      VARCHAR(30),
    AGENT_ID                   DOM_KEY,
    STOKOV_NOM                 VARCHAR(15),
    OTKADE                     DOM_FLAG DEFAULT 1 NOT NULL,
    MOVE_OPR_ID                DOM_KEY,
    OPR_ID_KAPARO              DOM_KEY,
    PRODUCTION_ID              DOM_KEY,
    IS_BONUS                   DOM_KEY,
    ZA_TIME                    TIME,
    FOR_DATE_TIME              DOM_DATE_TIME,
    DISCOUNT_PERCENT           DOM_PERCENT,
    ADDRESS_ID                 DOM_KEY,
    FLAG_INVOICE               DOM_FLAG,
    FLAG_PAYMENT               DOM_FLAG,
    FLAG_CUSTOMER_PREPARATION  DOM_FLAG,
    FLAG_SEND_EMAIL            DOM_FLAG,
    TAG                        DOM_INT,
    PARENT_ID                  DOM_KEY,
    INSTALLERS_COUNT           DOM_SMAL_INT,
    INSTALLATION_DURATION      DOM_SMAL_INT,
    PRODUCTION_USER_ID         DOM_KEY_SMALL,
    CHANGE_STATUS_USER_ID      DOM_KEY,
    SALE_OPR_ID                DOM_KEY,
    INSTALLATION_PHASE         DOM_FLAG DEFAULT 0,
    CONTRACT_DATE              DOM_DATE,
    PRODUCTION_STATUS_USER_ID  DOM_KEY,
    PRODUCTION_STATUS_DT       DOM_DATE_TIME,
    FLAG_FIXED_INSTALLATION    DOM_FLAG,
    FLAG_DEFERRED_PAYMENT      DOM_FLAG NOT NULL,
    FLAG_RAZKROI               DOM_FLAG DEFAULT 0,
    UNP_ID                     DOM_INT64,
    FLAG_LINES                 DOM_FLAG DEFAULT 0 NOT NULL,
    IMPORT_INVOICE_NUM         DOM_CHAR_30,
    FLAG_SYNC                  DOM_FLAG,
    ASSECO_SYNC                DOM_FLAG DEFAULT 0,
    ASSECO_SOURCE              DOM_CHAR_50
);


CREATE TABLE POR_DOST_KOL_RZV (
    ID           DOM_KEY NOT NULL,
    OPR_ID_DOST  DOM_KEY NOT NULL,
    OPR_ID_POR   DOM_KEY NOT NULL,
    SIMPLE_ID    DOM_KEY NOT NULL,
    KOL          DOM_KOL NOT NULL
);


CREATE TABLE POR_EDIT (
    ID                DOM_KEY NOT NULL,
    EDIT_ID           DOM_KEY NOT NULL,
    ORDER_ID          DOM_KEY NOT NULL,
    STATUS            DOM_SMAL_INT NOT NULL,
    ZA_DATA           DOM_DATE,
    AGENT_ID          DOM_KEY,
    NOMER             DOM_CHAR_30,
    FOR_DATE_TIME     DOM_DATE_TIME,
    DISCOUNT_PERCENT  DOM_PERCENT
);


CREATE TABLE POR_EL (
    ID                  INTEGER NOT NULL,
    SIMPLE_ID           INTEGER NOT NULL,
    KOL                 DOUBLE PRECISION DEFAULT 0 NOT NULL,
    OPR_ID              INTEGER NOT NULL,
    SUMA                DOM_SUMA,
    KOL_POR             QTY,
    OUT_EL_ID           DOM_KEY,
    KOL_MUVE            QTY,
    FLAG_MOVE           DOM_FLAG DEFAULT 0,
    KOL_RZV             DOM_KOL DEFAULT 0 NOT NULL,
    ORDER_N             DOM_SMAL_INT,
    KOL2                DOM_KOL,
    INSTALLATION_PRICE  DOM_CENA,
    PRICE               DOM_CENA,
    FLAG_LINE           DOM_FLAG DEFAULT 0 NOT NULL,
    IS_BONUS            DOM_SMAL_INT DEFAULT 0
);


CREATE TABLE POR_EL_COMMENT (
    ID         INTEGER NOT NULL,
    POR_EL_ID  INTEGER,
    COMMENT    VARCHAR(100)
);


CREATE TABLE POR_EL_EDIT (
    ID          INTEGER NOT NULL,
    EDIT_ID     INTEGER,
    SIMPLE_ID   INTEGER,
    KOL         DOUBLE PRECISION,
    SUMA        DOUBLE PRECISION,
    KOL_RZV     DOM_KOL,
    OPR_KAPARO  DOM_KEY,
    COMMENT     DOM_CHAR_100,
    KOL2        DOM_KOL,
    PRICE       DOM_CENA
);


CREATE TABLE POR_EL_EXPLANATORY (
    ID         DOM_KEY NOT NULL,
    EXPLAN_ID  DOM_INT,
    POR_EL_ID  DOM_INT,
    MIN_KOL    DOM_KOL
);


CREATE TABLE POR_EL_PICTURES_NODE (
    ID          DOM_KEY NOT NULL,
    POR_EL_ID   DOM_KEY NOT NULL,
    PICTURE_ID  DOM_KEY NOT NULL
);


CREATE TABLE POR_EL_PRICE_COEFICIENT (
    ID          DOM_KEY NOT NULL,
    POR_EL_ID   DOM_KEY NOT NULL,
    SIMPLE_ID   DOM_KEY NOT NULL,
    COEFICIENT  DOM_PERCENT NOT NULL
);


CREATE TABLE POR_EL_PRODUCTION (
    ID               DOM_KEY NOT NULL,
    SIMPLE_ID        DOM_KEY NOT NULL,
    KOL              DOM_KOL NOT NULL,
    POR_EL_ID        DOM_KEY NOT NULL,
    SIMPLE_CALAC_ID  DOM_KEY NOT NULL
);


CREATE TABLE POR_EL_RAZ_NODE (
    ID             INTEGER NOT NULL,
    POR_EL_ID      INTEGER,
    RAZFASOVKA_ID  INTEGER,
    KOL            DOUBLE PRECISION
);


CREATE TABLE POR_EL_REQUEST_NODE (
    ID             DOM_KEY NOT NULL,
    POR_EL_ID      DOM_KEY NOT NULL,
    REQUEST_EL_ID  DOM_KEY NOT NULL
);


CREATE TABLE POR_FAK_PROD_NODE (
    ID               DOM_KEY NOT NULL,
    POR_ID           DOM_KEY NOT NULL,
    FAK_PROD_OPR_ID  DOM_KEY NOT NULL
);


CREATE TABLE POR_FORMULA_PARAMS (
    ID          DOM_KEY NOT NULL,
    POR_EL_ID   DOM_INT,
    "VARIABLE"  DOM_CHAR_10,
    "COUNT"     QTY,
    QUANTITY    QTY
);


CREATE TABLE POR_OFFER_TERMS_NODE (
    ID        DOM_KEY NOT NULL,
    POR_ID    DOM_KEY NOT NULL,
    TERMS_ID  DOM_KEY NOT NULL
);


CREATE TABLE POR_OUT_NODE (
    ID      INTEGER NOT NULL,
    OUT_ID  INTEGER NOT NULL,
    POR_ID  INTEGER NOT NULL
);


CREATE TABLE POR_PRODUCTION_REQUEST_NODE (
    ID                     DOM_KEY NOT NULL,
    POR_OPR_ID             DOM_INT,
    PRODUCTION_REQUEST_ID  DOM_INT
);


CREATE TABLE POR_PROP_NODE (
    ID             DOM_KEY NOT NULL,
    POR_EL_ID      DOM_KEY NOT NULL,
    MAJOR_PROP_ID  DOM_KEY NOT NULL,
    MINOR_PROP_ID  DOM_KEY NOT NULL
);


CREATE TABLE POR_RAZ_EDIT (
    ID             INTEGER NOT NULL,
    EDIT_ID        INTEGER,
    RAZFASOVKA_ID  INTEGER,
    KOL            DOUBLE PRECISION
);


CREATE TABLE POR_ZD_NODE (
    ID          DOM_KEY NOT NULL,
    POR_OPR_ID  DOM_KEY,
    ZD_OPR_ID   DOM_KEY
);


CREATE TABLE POS_OUT_EL_TO_SRV_OUT_EL (
    ID             DOM_KEY NOT NULL,
    POS_OUT_EL_ID  DOM_KEY,
    SRV_OUT_EL_ID  DOM_KEY,
    DT             DOM_DATE_TIME
);


CREATE TABLE POS_TO_SRV (
    ID          DOM_KEY NOT NULL,
    POS_OPR_ID  DOM_KEY,
    SRV_OPR_ID  DOM_KEY,
    DT          DOM_DATE_TIME
);


CREATE TABLE POTV (
    ID      DOM_KEY NOT NULL,
    OPR_ID  DOM_KEY
);


CREATE TABLE POTV_EL (
    ID           DOM_KEY NOT NULL,
    OPR_POTV_ID  DOM_KEY,
    POTV_ID      DOM_KEY,
    MOL_USER_ID  DOM_KEY
);


CREATE TABLE POTV_MOVE_EL (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY,
    SIMPLE_ID  DOM_KEY,
    KOL        DOM_KOL,
    CHECKED    DOM_FLAG
);


CREATE TABLE PR_REQ_EL_PRICE_COEFICIENT (
    ID             DOM_KEY NOT NULL,
    REQUEST_EL_ID  DOM_KEY NOT NULL,
    SIMPLE_ID      DOM_KEY NOT NULL,
    COEFICIENT     DOM_PERCENT NOT NULL
);


CREATE TABLE PR_REQUEST_EXPLANATORY (
    ID                DOM_KEY NOT NULL,
    EXPLAN_ID         DOM_INT,
    PR_REQUEST_EL_ID  DOM_INT,
    MIN_KOL           DOM_KOL
);


CREATE TABLE PR_REQUEST_FORMULA_PARAMS (
    ID             INTEGER NOT NULL,
    REQUEST_EL_ID  DOM_INT,
    "VARIABLE"     DOM_CHAR_10,
    "COUNT"        QTY,
    QUANTITY       QTY
);


CREATE TABLE PRICE_LIST_DELIVERY_STORAGES (
    ID             INTEGER NOT NULL,
    STORAGE_ID     INTEGER,
    PRICE_LIST_ID  INTEGER
);


CREATE TABLE PROD_AVANS (
    ID            DOM_KEY NOT NULL,
    AVANS_OUT_ID  DOM_KEY,
    OUT_ID        DOM_KEY,
    OPR_ID        DOM_KEY
);


CREATE TABLE PROD_CENI_EL (
    ID              DOM_KEY NOT NULL,
    OUT_EL_ID       DOM_KEY NOT NULL,
    CENA            DOM_CENA NOT NULL,
    BARCODE_ID      DOM_KEY,
    CENA_OS         DOM_CENA,
    CENA_CL         DOM_CENA,
    BONUS_ID        DOM_KEY,
    PERCENT_OTKL    DOM_PERCENT,
    BONUS_TOCHKI    DOM_INT,
    CENA_VALUTA     DOM_CENA,
    VALUTA_ID       DOM_KEY,
    VALUTA_KURS     KURS,
    OTSTAPKA_ID     DOM_KEY,
    VAT_PERCENT     DOM_PERCENT NOT NULL,
    VAT_GROUP       DOM_KEY_SMALL NOT NULL,
    VAT_REASON_ID   DOM_KEY,
    IS_PROMOTIONAL  DOM_SMAL_INT DEFAULT 0 NOT NULL
);


CREATE TABLE PROD_NODE (
    ID               DOM_KEY NOT NULL,
    OPR_PROD_ID      DOM_KEY NOT NULL,
    OPR_SUB_PROD_ID  DOM_KEY NOT NULL
);


CREATE TABLE PROD_PRODUCTION (
    ID                 DOM_KEY NOT NULL,
    PROD_OPR_ID        DOM_KEY,
    PRODUCTION_OPR_ID  DOM_KEY
);


CREATE TABLE PROD_REQUEST_PRODUCTION_NODE (
    ID                         DOM_KEY NOT NULL,
    OPR_PROD_ID                DOM_INT,
    OPR_REQUEST_PRODUCTION_ID  DOM_INT
);


CREATE TABLE PROD_STOCK (
    ID           DOM_KEY NOT NULL,
    OPR_ID       DOM_KEY,
    OWNER_ID     DOM_KEY_SMALL,
    DOC_NUM      DOM_CHAR_20,
    DRIVER_NAME  DOM_CHAR_50,
    CAR_NUM      DOM_CHAR_20
);


CREATE TABLE PROD_STOCK_EL (
    ID           DOM_KEY NOT NULL,
    OPR_ID       DOM_KEY,
    SIMPLE_ID    DOM_KEY,
    PARTIDA      DOM_CHAR_100,
    SROK         DOM_DATE,
    COUNTRY_ID   DOM_KEY,
    KOL          DOM_KOL,
    USHNA_MARKA  DOM_CHAR_30
);


CREATE TABLE PROD_VAUCHER (
    ID             DOM_KEY NOT NULL,
    OPR_PROD_ID    DOM_INT,
    SUMA           DOM_SUMA,
    PAYMENT_EL_ID  DOM_KEY,
    FLAG           DOM_FLAG
);


CREATE TABLE PRODUCT_WAREHOUSE_MAP_NODE (
    ID          DOM_KEY NOT NULL,
    PRODUCT_ID  DOM_KEY NOT NULL,
    NODE_ID     DOM_KEY NOT NULL
);


CREATE TABLE PRODUCTION (
    ID            DOM_KEY NOT NULL,
    OPR_IN_ID     DOM_KEY NOT NULL,
    OPR_OUT_ID    DOM_KEY NOT NULL,
    SUMA_SR       DOM_SUMA,
    DATETIMEMIX   DOM_DATE_TIME,
    DATETIMEDOST  DOM_DATE_TIME,
    CARNUM        DOM_CHAR_10,
    CARM_MARKA    DOM_CHAR_20,
    CAR_DRIVER    DOM_CHAR_30
);


CREATE TABLE PRODUCTION_EXPLANATORY (
    ID          DOM_KEY NOT NULL,
    IN_EL_ID    DOM_KEY,
    EXPLAIN_ID  DOM_KEY
);


CREATE TABLE PRODUCTION_GRUPI (
    ID           DOM_KEY NOT NULL,
    TIP          DOM_SMAL_INT,
    SELEKCIQ_ID  DOM_KEY
);


CREATE TABLE PRODUCTION_IN_EL_PARAMS (
    ID          DOM_KEY NOT NULL,
    IN_EL_ID    DOM_KEY,
    "COUNT"     QTY,
    "VARIABLE"  DOM_CHAR_10,
    QUANTITY    QTY
);


CREATE TABLE PRODUCTION_KAPARO_NODE (
    ID              INTEGER NOT NULL,
    REQUEST_ID      DOM_INT,
    OPR_PAYMENT_ID  DOM_INT
);


CREATE TABLE PRODUCTION_MONTAJISTI (
    ID                     DOM_KEY NOT NULL,
    PRODUCTION_REQUEST_ID  DOM_KEY,
    USER_ID                DOM_KEY,
    DATE_TIME_ADD          DOM_DATE_TIME
);


CREATE TABLE PRODUCTION_REQUEST_EL (
    ID                  DOM_KEY NOT NULL,
    OPR_REQUEST_ID      DOM_INT,
    NOMER               DOM_SMAL_INT,
    SIMPLE_ID           DOM_INT,
    MASTER_SIMPLE_ID    DOM_INT,
    SIMPLE_CALC_ID      DOM_INT,
    KOL                 DOM_KOL,
    TOT_SUM             DOM_SUMA,
    CENA_CL             DOM_CENA,
    QTY_COMLETE         DOM_KOL,
    INSTALLATION_PRICE  DOM_CENA
);


CREATE TABLE PRODUCTION_ZARABOTKA (
    ID              DOM_KEY NOT NULL,
    PRODUCTION_ID   DOM_KEY,
    USER_ID         DOM_KEY,
    ZARABOTKA_SUMA  DOM_SUMA,
    DATE_TIME_ADD   DOM_DATE_TIME
);


CREATE TABLE PRODUCTION_ZARABOTKA_IZPLATENO (
    ID            DOM_KEY NOT NULL,
    ZARABOTKA_ID  DOM_KEY,
    DT            DOM_DATE_TIME,
    SUMA          DOM_SUMA
);


CREATE TABLE PROFORMA_TO_FAK (
    ID           DOM_KEY NOT NULL,
    FAK_ID       DOM_KEY NOT NULL,
    PROFORMA_ID  DOM_KEY NOT NULL
);


CREATE TABLE PROP_NODE (
    ID             DOM_KEY NOT NULL,
    MAJOR_PROP_ID  DOM_KEY NOT NULL,
    MINOR_PROP_ID  DOM_KEY NOT NULL
);


CREATE TABLE RAZ_ELEMENT (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(30)
);


CREATE TABLE RAZ_TIP (
    ID       INTEGER NOT NULL,
    NAME     VARCHAR(30),
    AMBALAJ  SMALLINT DEFAULT 0
);


CREATE TABLE RAZFASOVKA (
    ID              INTEGER NOT NULL,
    RAZ_TIP_ID      INTEGER NOT NULL,
    KOL             QTY NOT NULL,
    SIMPLE_ID       INTEGER,
    RAZ_ELEMENT_ID  INTEGER
);


CREATE TABLE RAZPAD (
    ID       INTEGER NOT NULL,
    OPR_ID   INTEGER NOT NULL,
    SUMA_SR  DOUBLE PRECISION,
    R_TYPE   DOM_FLAG
);


CREATE TABLE RDB$NAL (
    SKLAD_ID   INTEGER NOT NULL,
    SUMA       DOUBLE PRECISION,
    SUMA_FR    DOUBLE PRECISION,
    KOL        DOUBLE PRECISION,
    LAST_CENA  DOUBLE PRECISION
);


CREATE TABLE RDB$PARTIDA_NAL (
    ID          INTEGER NOT NULL,
    IN_EL_ID    INTEGER NOT NULL,
    ELEMENT_ID  INTEGER NOT NULL,
    KOL_NAL     DOUBLE PRECISION,
    SUMA        DOUBLE PRECISION
);


CREATE TABLE REAL_IZP_FAKT_IZP_NODE (
    ID           DOM_KEY NOT NULL,
    REAL_OPR_ID  DOM_KEY NOT NULL,
    FAKT_OPR_ID  DOM_KEY NOT NULL
);


CREATE TABLE REFUSED_TMP (
    OPR_ID  INTEGER
);


CREATE TABLE REQUEST_PRODUCTION_NODE (
    ID             DOM_KEY NOT NULL,
    PRODUCTION_ID  DOM_INT,
    REQUEST_ID     DOM_INT
);


CREATE TABLE RET_DOST_KI_DOST_NODE (
    ID           DOM_KEY NOT NULL,
    RET_DOST_ID  DOM_KEY NOT NULL,
    KI_DOST_ID   DOM_KEY NOT NULL
);


CREATE TABLE RET_DOST_MOVE_NODE (
    ID          DOM_KEY NOT NULL,
    RET_OPR_ID  DOM_KEY NOT NULL,
    OUT_OPR_ID  DOM_KEY NOT NULL,
    IN_OPR_ID   DOM_KEY NOT NULL
);


CREATE TABLE RET_PROD_RET_FAK_PROD_KI_NODE (
    ID                      INTEGER NOT NULL,
    OPR_RET_PROD_ID         DOM_KEY,
    OPR_RET_FAK_PROD_KI_ID  DOM_KEY
);


CREATE TABLE RET_STOKA_DOST (
    ID       DOM_KEY NOT NULL,
    OPR_ID   DOM_KEY NOT NULL,
    PAY_TIP  DOM_FLAG DEFAULT 0 NOT NULL
);


CREATE TABLE RET_STOKA_DOST_KI (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY NOT NULL,
    FAK_IN_ID  DOM_KEY,
    PAY_TIP    DOM_FLAG DEFAULT 0 NOT NULL
);


CREATE TABLE RET_STOKA_PROD (
    ID             DOM_KEY NOT NULL,
    OPR_ID         DOM_KEY NOT NULL,
    PAY_TIP        DOM_FLAG DEFAULT 0 NOT NULL,
    FU_NOM         DOM_CHAR_10 COLLATE PXW_CYRL,
    FP_NUM         DOM_CHAR_10 COLLATE PXW_CYRL,
    IME            DOM_CHAR_100,
    PLACE_ID       DOM_KEY,
    ADDRESS        DOM_CHAR_100,
    EGN            DOM_CHAR_10 COLLATE PXW_CYRL,
    STORNO_NUM     DOM_CHAR_10,
    TEL            DOM_CHAR_20,
    EMAIL          DOM_CHAR_30,
    REFUSED_ID     DOM_INT,
    RESOLUTION_ID  DOM_KEY,
    CLAIM_NUM      DOM_INT,
    UNP_ID         DOM_INT64
);


CREATE TABLE RET_STOKA_PROD_KI (
    ID           DOM_KEY NOT NULL,
    OPR_ID       DOM_KEY NOT NULL,
    FAK_OPR_ID   DOM_KEY NOT NULL,
    PAY_TIP      DOM_FLAG DEFAULT 0 NOT NULL,
    UNP_ID       DOM_INT64,
    VAT_PERCENT  DOM_PERCENT
);


CREATE TABLE RETURN_DOST_KOL (
    ID        DOM_KEY NOT NULL,
    OPR_ID    DOM_KEY NOT NULL,
    IN_EL_ID  DOM_KEY NOT NULL,
    KOL       DOM_KOL NOT NULL
);


CREATE TABLE ROUND_TIP (
    ID           DOM_KEY NOT NULL,
    NAME         DOM_CHAR_20 NOT NULL COLLATE PXW_CYRL,
    UP_DOWN      DOM_FLAG DEFAULT 0 NOT NULL,
    COEFFICIENT  DOM_CENA NOT NULL,
    PRODUCE      DOM_CENA DEFAULT 0
);


CREATE TABLE SASTAV (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_100
);


CREATE GLOBAL TEMPORARY TABLE SEL_BONUS (
    SEL_BONUS_ID  DOM_KEY NOT NULL
) ON COMMIT DELETE ROWS;


CREATE TABLE SEL_FIRMI_QR (
    SEL_ID    INTEGER,
    FIRMA_ID  DOM_KEY NOT NULL
);


CREATE TABLE SEL_IO_IZP_QR (
    SEL_ID      DOM_KEY,
    IO_IZP_TIP  DOM_KEY
);


CREATE TABLE SEL_IO_QR (
    SEL_ID  INTEGER,
    IO_ID   INTEGER
);


CREATE TABLE SEL_KASI_QR (
    SEL_ID   INTEGER,
    KASA_ID  SMALLINT NOT NULL
);


CREATE TABLE SEL_KLI_QR (
    SEL_ID  INTEGER,
    KLI_ID  INTEGER
);


CREATE TABLE SEL_MAJOR_PROP_QR (
    SEL_ID         INTEGER,
    MAJOR_PROP_ID  INTEGER
);


CREATE TABLE SEL_MINOR_PROP_QR (
    SEL_ID         INTEGER,
    MINOR_PROP_ID  INTEGER
);


CREATE TABLE SEL_OBEKT_QR (
    SEL_ID    DOM_KEY NOT NULL,
    OBEKT_ID  DOM_KEY NOT NULL
);


CREATE GLOBAL TEMPORARY TABLE SEL_OPR (
    ID      INTEGER NOT NULL,
    OPR_ID  INTEGER
) ON COMMIT DELETE ROWS;


CREATE TABLE SEL_OPRS (
    ID      DOM_KEY NOT NULL,
    OPR_ID  DOM_KEY
);


CREATE TABLE SEL_SIM_QR (
    SEL_ID     INTEGER,
    SIMPLE_ID  INTEGER
);


CREATE GLOBAL TEMPORARY TABLE SEL_SIMPLE (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE TABLE SEL_SKLAD_QR (
    SEL_ID    INTEGER NOT NULL,
    SKLAD_ID  DOM_KEY NOT NULL
);


CREATE TABLE SELEKCIQ (
    ID              INTEGER NOT NULL,
    NAME            VARCHAR(50) NOT NULL,
    TIP             SMALLINT DEFAULT 0 NOT NULL,
    ACTIVEN         SMALLINT DEFAULT 1 NOT NULL,
    USER_ID         INTEGER,
    DATETIME        TIMESTAMP,
    FISK_BY_SIMPLE  DOM_FLAG,
    FOR_ESHOP       DOM_FLAG,
    CODE            DOM_INT,
    PROC_DISTR      DOM_PERCENT
);


CREATE TABLE SELEKCIQ_KALK_EL (
    ID           DOM_KEY NOT NULL,
    SIMPLE_ID    DOM_KEY NOT NULL,
    SELEKCIQ_ID  DOM_KEY NOT NULL
);


CREATE TABLE SELEKCIQ_KASA_EL (
    ID           DOM_KEY NOT NULL,
    KASA_ID      DOM_KEY_SMALL NOT NULL,
    SELEKCIQ_ID  DOM_KEY NOT NULL
);


CREATE TABLE SELEKCIQ_KLI_EL (
    ID           INTEGER NOT NULL,
    KLI_ID       INTEGER NOT NULL,
    SELEKCIQ_ID  INTEGER NOT NULL
);


CREATE TABLE SELEKCIQ_SIM_EL (
    ID           INTEGER NOT NULL,
    SIMPLE_ID    INTEGER NOT NULL,
    SELEKCIQ_ID  INTEGER NOT NULL
);


CREATE TABLE SERIAL_NUM (
    ID             INTEGER NOT NULL,
    PARTIDA_EL_ID  INTEGER NOT NULL,
    SN             VARCHAR(30),
    SIMPLE_ID      DOM_KEY
);


CREATE TABLE SIMPLE (
    ID               INTEGER NOT NULL,
    NAME             VARCHAR(100) COLLATE PXW_CYRL,
    NAME_SHORT       VARCHAR(12),
    CODE             DOM_CHAR_50,
    ME_ID            SMALLINT,
    SIMPLE_GROUP_ID  SMALLINT,
    "ACTIVE"         DOM_BOOLEAN DEFAULT '1',
    ACTIVE_FAK       DOM_BOOLEAN DEFAULT '1',
    LOCK_CENA_PROD   DOM_BOOLEAN,
    CENA_PROD        DOM_CENA,
    CENA_EDRO        DOM_CENA,
    CENA_OFERTA      DOM_CENA,
    CENA_PROD_FAK    DOM_CENA,
    DDS              NUMERIC(4,2) DEFAULT 20.0,
    KOL_KRI_MIN      QTY,
    KOL_KRI_MAX      QTY,
    DEFAULT_RAZ_ID   SMALLINT,
    USLUGA           DOM_BOOLEAN DEFAULT '0',
    CENA_POCKET      DOM_CENA DEFAULT 0,
    RSN              DOM_BOOLEAN DEFAULT '0',
    FLAG_CHECK       SMALLINT DEFAULT 0 NOT NULL,
    RAZ_TIP_ID       INTEGER,
    AMBALAJ          SMALLINT DEFAULT 0 NOT NULL,
    ACTIVE_SCALE     SMALLINT default 0 NOT NULL,
    GODNOST          SMALLINT DEFAULT 0 NOT NULL,
    BRUTO            DOUBLE PRECISION,
    DEF_SEL_ID       INTEGER,
    RAZPAD           SMALLINT DEFAULT 0 NOT NULL,
    G_KRI_DOST       DOUBLE PRECISION,
    G_KRI_MIN        DOUBLE PRECISION,
    G_PERIOD         INTEGER,
    G_TIP            DOM_KEY,
    ME2_ID           DOM_KEY_SMALL,
    FLAF_AMBALAJ     DOM_BOOLEAN DEFAULT 0 NOT NULL,
    DEF_SEL_CALC     INTEGER,
    CODE2            DOM_CHAR_50,
    TEMPERATURA      DOM_CHAR_20 COLLATE PXW_CYRL,
    SUMA_DOST_CALC   DOM_SUMA,
    GR_ZAMQNA_ID     DOM_KEY,
    IS_BONUS         DOM_FLAG DEFAULT 0 NOT NULL,
    USE_PROP         DOM_FLAG DEFAULT 0,
    NAME_2           DOM_CHAR_100 COLLATE PXW_CYRL,
    FLAG_PROIZHOD    DOM_KEY_SMALL DEFAULT 0 NOT NULL,
    EXT1             DOM_CHAR_2000,
    USE_EXPLAN       DOM_SMAL_INT DEFAULT 0,
    MARK_AS_BROI     DOM_SMAL_INT DEFAULT 0,
    SASTAV_ID        DOM_KEY,
    FLAG_VAUCHER     DOM_SMAL_INT DEFAULT 0 NOT NULL,
    FLAG_MENU        DOM_SMAL_INT DEFAULT 0 NOT NULL,
    GARANZIA_EXT     DOM_FLAG,
    PREPARE_TIME     DOM_TIME,
    MENU_TEXT        DOM_CHAR_20,
    COUNT_DEL        DOM_INT,
    FLAG_RAZPAD_QTY  DOM_FLAG,
    EXT2             DOM_CHAR_1000,
    VAT_GROUP        DOM_KEY_SMALL DEFAULT 2 NOT NULL,
    FLAG_TBL_PRICE   DOM_FLAG,
    ADRESIRANE_ID    DOM_KEY,
    COEFF_ME         DOM_PERCENT,
    VAT_REASON_ID    DOM_KEY,
    DEF_DOST_KLI_ID  DOM_KEY,
    CODE_SIMILAR     DOM_CHAR_10,
    HGROUP_ID        DOM_KEY
);


CREATE TABLE SIMPLE_ACZIS (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY,
    SUMA       DOM_SUMA
);


CREATE TABLE SIMPLE_ADRESIRANE (
    ID        DOM_KEY NOT NULL,
    TEXT      DOM_CHAR_120,
    GRUPA_ID  DOM_KEY
);


CREATE TABLE SIMPLE_ADRESIRANE_GRUPA (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_50,
    CT    DOM_KOL,
    TIP   DOM_SMAL_INT DEFAULT 0
);


CREATE TABLE SIMPLE_ADRESIRANE_NODE (
    ID             DOM_KEY NOT NULL,
    SIMPLE_ID      DOM_KEY,
    ADRESIRANE_ID  DOM_KEY
);


CREATE TABLE SIMPLE_CALC (
    ID               INTEGER NOT NULL,
    SIMPLE_ID        INTEGER,
    CHILD_SIMPLE_ID  INTEGER,
    KOL              QTY,
    FORMULA          DOM_CHAR_120,
    CHILD_SEL_ID     DOM_KEY,
    SEL_TEXT         VARCHAR(50),
    MIN_KOL          QTY,
    MAX_KOL          QTY,
    A_SN             DOM_BOOLEAN,
    PERCENT_LOST     DOM_PERCENT,
    PERCENT_SUM      DOM_PERCENT,
    SORT_INDEX       DOM_SMAL_INT,
    FORMULA2         DOM_CHAR_120,
    KOL2             DOM_KOL,
    QTY_NETO         DOM_KOL
);


CREATE TABLE SIMPLE_CALC_OLD (
    ID               INTEGER NOT NULL,
    OPR_ID           DOM_INT,
    SIMPLE_ID        INTEGER,
    CHILD_SIMPLE_ID  INTEGER,
    KOL              QTY,
    FORMULA          DOM_CHAR_120,
    CHILD_SEL_ID     DOM_KEY,
    SEL_TEXT         VARCHAR(50),
    MIN_KOL          QTY,
    MAX_KOL          QTY,
    A_SN             DOM_BOOLEAN,
    PERCENT_LOST     DOM_PERCENT,
    PERCENT_SUM      DOM_PERCENT,
    SORT_INDEX       DOM_SMAL_INT,
    FORMULA2         VARCHAR(120),
    KOL2             DOM_KOL,
    QTY_NETO         DOM_KOL
);


CREATE TABLE SIMPLE_CENI (
    ID            INTEGER NOT NULL,
    SIMPLE_ID     INTEGER,
    KLI_ID        INTEGER,
    KLI_GROUP_ID  SMALLINT,
    CENA          DOM_CENA,
    PERCENT       DOUBLE PRECISION,
    SIMPLE_GR_ID  INTEGER
);


CREATE TABLE SIMPLE_EXPLANATORY (
    ID              DOM_KEY NOT NULL,
    SIMPLE_ID       DOM_KEY,
    EXPL_ID         DOM_KEY,
    MIN_KOL         DOM_KOL,
    SIMPLE_MARK_ID  DOM_KEY,
    FORMULA         DOM_CHAR_100
);


CREATE TABLE SIMPLE_GROUP (
    ID            SMALLINT NOT NULL,
    NAME          VARCHAR(25),
    PERCENT_PROD  CURRENCY,
    PERCENT_EDRO  CURRENCY,
    ROUND_PROD    NUMERIC(4,2),
    ROUND_EDRO    NUMERIC(4,2),
    PARENT        SMALLINT
);


CREATE TABLE SIMPLE_KA_BIM (
    ID             DOM_KEY NOT NULL,
    SIMPLE_ID      DOM_KEY,
    BIM            DOM_CHAR_30,
    PROIZVODITEL   DOM_CHAR_20,
    DOC_METROLOGY  DOM_CHAR_30
);


CREATE TABLE SIMPLE_KOD (
    ID         INTEGER NOT NULL,
    SIMPLE_ID  INTEGER,
    KLI_ID     INTEGER,
    KOD        VARCHAR(15)
);


CREATE TABLE SIMPLE_MONTAGE (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY
);


CREATE TABLE SIMPLE_OBSERV (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY,
    NOTE       DOM_CHAR_1000
);


CREATE TABLE SIMPLE_PICT (
    ID         DOM_KEY_SMALL NOT NULL,
    SIMPLE_ID  DOM_KEY,
    PICTURE    DOM_BLOB,
    TEXT       DOM_CHAR_100
);


CREATE TABLE SIMPLE_PROP (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_50 NOT NULL
);


CREATE TABLE SIMPLE_PROP_MINOR (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_50 NOT NULL
);


CREATE TABLE SIMPLE_PROP_NODE (
    ID             DOM_KEY NOT NULL,
    SIMPLE_ID      DOM_KEY NOT NULL,
    MAJOR_PROP_ID  DOM_KEY NOT NULL
);


CREATE TABLE SIMPLE_RAZ (
    ID         SMALLINT NOT NULL,
    NAME       VARCHAR(15),
    SIMPLE_ID  INTEGER,
    KOL        QTY
);


CREATE TABLE SIMPLE_SKLAD_KOD (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY,
    SKLAD_ID   DOM_KEY,
    TEXT       DOM_CHAR_50 COLLATE PXW_CYRL
);


CREATE TABLE SIMPLE_TABLE_PRICES (
    ID                DOM_KEY NOT NULL,
    SIMPLE_ID         DOM_KEY NOT NULL,
    HEIGHT            DOM_KOL NOT NULL,
    WIDTH             DOM_KOL NOT NULL,
    PRICE             DOM_CENA NOT NULL,
    SELECT_SIMPLE_ID  DOM_KEY
);


CREATE TABLE SIMPLE_TRACKER (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY
);


CREATE TABLE SIMPLE_ZAETOST (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY
);


CREATE TABLE SKLAD (
    ID                SMALLINT NOT NULL,
    NAME              DOM_CHAR_50,
    OBEKT_ID          SMALLINT,
    USER_ID           INTEGER,
    POCKET            DOM_BOOLEAN DEFAULT '0',
    IS_SYSTEM         SMALLINT DEFAULT 0 NOT NULL,
    IS_ACTIVE         SMALLINT DEFAULT 1,
    F_MOVE_CENA       DOM_FLAG DEFAULT 0 NOT NULL,
    OWNER_ID          DOM_SMAL_INT,
    F_OTR_KOL         DOM_FLAG DEFAULT 0 NOT NULL,
    CL_MOVE_ID        DOM_KEY,
    CODE              DOM_CHAR_20,
    WAREHOUSE_MAP_ID  DOM_KEY,
    METRO_CLIENT_ID   DOM_CHAR_20
);


CREATE TABLE SKLAD_MOL (
    ID        INTEGER NOT NULL,
    SKLAD_ID  INTEGER,
    USER_ID   INTEGER
);


CREATE TABLE SKLAD_SELEKCIQ_NODE (
    ID           DOM_KEY NOT NULL,
    ID_SKLAD     DOM_KEY NOT NULL,
    ID_SELEKCIQ  DOM_KEY NOT NULL
);


CREATE TABLE SLEDI_KLI (
    ID              DOM_KEY NOT NULL,
    SLEDI_KLI       DOM_KEY,
    ATON_KLI        DOM_KEY,
    SLEDI_KLI_NAME  DOM_CHAR_100
);


CREATE TABLE SLEDI_LICENZ (
    ID            DOM_KEY NOT NULL,
    OT_OPR_ID     DOM_KEY,
    SLEDI_KLI_ID  DOM_KEY,
    DO_DATE       DOM_DATE,
    DATETIME      DOM_DATE_TIME,
    OBR           DOM_SMAL_INT
);


CREATE TABLE SLEDI_ROUMING_LOG (
    ID                  DOM_KEY NOT NULL,
    SLEDI_ID            DOM_INT,
    SLEDI_USER_ID       DOM_INT,
    SLEDI_KLI_ID        DOM_INT,
    DT                  DOM_DATE_TIME,
    OBR_DT              DOM_DATE,
    PROD_OPR_ID         DOM_KEY,
    PAIED               DOM_SMAL_INT,
    BUS_ID              DOM_INT,
    SMS_VALUE           DOM_CHAR_30 COLLATE PXW_CYRL,
    BUS_NUM             DOM_CHAR_30 COLLATE PXW_CYRL,
    BUS_IMEI            DOM_CHAR_20 COLLATE PXW_CYRL,
    BUS_REG_NUM         DOM_CHAR_15 COLLATE PXW_CYRL,
    USER_NAME           DOM_CHAR_50 COLLATE PXW_CYRL,
    USER_REALNAME       DOM_CHAR_50 COLLATE PXW_CYRL,
    SLEDI_COMPANY_NAME  DOM_CHAR_30 COLLATE PXW_CYRL
);


CREATE TABLE SLEDI_ROUMING_LOG_PAIED (
    ID        DOM_KEY NOT NULL,
    SLEDI_ID  DOM_INT,
    OBR       DOM_SMAL_INT
);


CREATE TABLE SLEDI_SIMPLE (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY
);


CREATE TABLE SLEDI_TEMPLATE_EL (
    ID                   DOM_KEY NOT NULL,
    S_ID                 DOM_KEY,
    SIMPLE_ID            DOM_KEY,
    TEMPLATE_ID          DOM_KEY,
    CENA                 DOM_CENA,
    PROMO_CENA           DOM_CENA,
    PROMO_PERIOD         DOM_SMAL_INT,
    SPRIAN               DOM_FLAG,
    SPRIAN_CENA          DOM_CENA,
    LIZING_SUMA          DOM_SUMA,
    LIZING_PERIOD        DOM_SMAL_INT,
    FAK_NAME             DOM_CHAR_100,
    DISTRIBUTOR_KLI_ID   DOM_KEY,
    DISTRIBUTOR_SUMA     DOM_SUMA,
    DISTRIBUTOR_TO_DATE  DOM_DATE,
    DT_LICENS            DOM_DATE,
    LAST_GEN_DATE        DOM_DATE
);


CREATE TABLE SLEDI_TEMPLATE_EL_GEN (
    ID                   DOM_KEY NOT NULL,
    S_ID                 DOM_KEY,
    SN                   DOM_CHAR_20,
    SIMPLE_ID            DOM_KEY,
    TEMPLATE_ID          DOM_KEY,
    TEMPLATE_GEN_ID      DOM_KEY,
    CENA                 DOM_CENA,
    PROMO_CENA           DOM_CENA,
    PROMO_PERIOD         DOM_SMAL_INT,
    SPRIAN               DOM_FLAG,
    SPRIAN_CENA          DOM_CENA,
    LIZING_SUMA          DOM_SUMA,
    LIZING_PERIOD        DOM_SMAL_INT,
    FAK_NAME             DOM_CHAR_100,
    DISTRIBUTOR_KLI_ID   DOM_KEY,
    DISTRIBUTOR_SUMA     DOM_SUMA,
    DISTRIBUTOR_TO_DATE  DOM_DATE,
    STE_ID               DOM_KEY
);


CREATE TABLE SLEDI_TEMPLATE_LIZING (
    SLEDI_TEMPLATE_EL_ID  DOM_KEY,
    OPR_ID                DOM_KEY
);


CREATE TABLE SLEDI_TEMPLATE_PROMO (
    SLEDI_TEMPLATE_EL_ID  DOM_KEY,
    OPR_ID                DOM_KEY
);


CREATE TABLE STORE_OBJ (
    ID             DOM_SMAL_INT NOT NULL,
    NAME           DOM_CHAR_50 NOT NULL,
    NAME_SHORT     DOM_CHAR_15,
    SKLAD_ID       DOM_SMAL_INT,
    PRICE_LIST_ID  DOM_KEY,
    OBEKT_ID       DOM_KEY
);


CREATE TABLE STORE_OTC (
    ID       DOM_KEY NOT NULL,
    OTCS_ID  DOM_KEY NOT NULL,
    OPR_ID   DOM_KEY NOT NULL
);


CREATE TABLE STORNO (
    ID         DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY NOT NULL,
    KOL        DOM_KOL NOT NULL,
    SUMA       DOM_SUMA,
    NOTE       DOM_CHAR_100,
    REASON_ID  DOM_KEY
);


CREATE TABLE STORNO_REASON (
    ID      DOM_KEY NOT NULL,
    REASON  DOM_CHAR_100
);


CREATE TABLE SUMI (
    ID           DOM_KEY NOT NULL,
    OPR_ID       DOM_KEY NOT NULL,
    SUMA         DOM_SUMA NOT NULL,
    SUMA_OST     DOM_SUMA NOT NULL,
    PADEJ        DOM_DATE,
    VAT_PERCENT  DOM_PERCENT
);


CREATE TABLE SYNC_ADVANCE_PAYMENT (
    ID              DOM_KEY NOT NULL,
    LOCAL_OPR_ID    DOM_KEY,
    SRV_PAYMENT_ID  DOM_INT,
    SUMA            DOM_SUMA,
    SYNC            DOM_FLAG
);


CREATE TABLE SYSTEM (
    DB_VERSION              INTEGER,
    ACTIVE_OWNER_ID         SMALLINT,
    KOL_DEC_POINT           SMALLINT DEFAULT 3,
    KOL_MINUS               DOM_BOOLEAN,
    CENI_S_DDS              DOM_BOOLEAN DEFAULT '1',
    PARI_PASS               CHAR(32),
    MIN_VERSION             INTEGER,
    H_SKLAD                 SMALLINT,
    ONOFF_LAST_RESEEVED_ID  INTEGER,
    EXE                     BLOB SUB_TYPE 0,
    EXE_VERSION             DOM_CHAR_20,
    UNREALSOFT              DOM_FLAG DEFAULT 0 NOT NULL,
    PROFORMAFAK_NUM         DOM_CHAR_10,
    K_SKLAD                 DOM_KEY,
    POS                     BLOB SUB_TYPE 0 SEGMENT SIZE 4096,
    POS_VERSION             DOM_CHAR_20 COLLATE PXW_CYRL,
    IZL_METOD               DOM_SMAL_INT,
    TRUST                   DOM_SMAL_INT,
    REDIRECT                BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    IZL_TYPE                DOM_FLAG,
    PW                      DOM_CHAR_100,
    API                     DOM_SMAL_INT NOT NULL
);


CREATE TABLE SYSTEM2 (
    ID           DOM_KEY NOT NULL,
    VAR_NAME     DOM_CHAR_30 NOT NULL,
    VAR_VALUE    DOM_BLOB_TEXT NOT NULL,
    DESCRIPTION  DOM_CHAR_100
);


CREATE TABLE TABLE_PRICE_COEFICIENT (
    ID                DOM_KEY NOT NULL,
    MASTER_SIMPLE_ID  DOM_KEY NOT NULL,
    SIMPLE_ID         DOM_KEY NOT NULL,
    COEFICIENT        DOM_PERCENT NOT NULL
);


CREATE TABLE TABLE_PRICE_SIMPLE_NODE (
    ID         DOM_KEY NOT NULL,
    PRICE_ID   DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY NOT NULL
);


CREATE TABLE TABLE_PRICES_DISCOUNTS (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY NOT NULL,
    KLI_ID     DOM_KEY NOT NULL,
    DISCOUNT   DOM_PERCENT NOT NULL
);


CREATE TABLE TASKS (
    ID            DOM_KEY NOT NULL,
    TASKS_TIP_ID  DOM_KEY NOT NULL,
    KLI_ID        DOM_KEY,
    OBEKT_ID      DOM_KEY,
    STATUS_TASKS  DOM_SMAL_INT NOT NULL,
    DT            DOM_DATE_TIME NOT NULL,
    OPR_ID        DOM_KEY,
    DOSHLO        DOM_SMAL_INT,
    SUMA          DOM_SUMA,
    OBEKT_FAK_ID  DOM_KEY,
    TMP_OPR_ID    DOM_KEY,
    USER_ID       DOM_KEY
);


CREATE TABLE TASKS_EL (
    ID             DOM_KEY NOT NULL,
    EL_ID          DOM_KEY,
    TASKS_ID       DOM_KEY,
    SIMPLE_ID      DOM_KEY,
    H              DOM_FLAG,
    LAST_GEN_DATE  DOM_DATE,
    EL_GEN_ID      DOM_KEY
);


CREATE TABLE TASKS_TIP (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_100 NOT NULL
);


CREATE TABLE TBL_KA (
    ID                   DOM_KEY NOT NULL,
    KLI_ID               DOM_KEY,
    FIRMA_ID             DOM_KEY,
    FU_NOM               DOM_CHAR_15 COLLATE PXW_CYRL,
    FP_NOM               DOM_CHAR_15 COLLATE PXW_CYRL,
    CENA1                ED_CENA,
    CENA2                ED_CENA,
    COMMENT              DOM_CHAR_100,
    DT                   DOM_DATE_TIME,
    SIMPLE_ID            DOM_KEY,
    SKLAD_ID             DOM_KEY,
    OBEKT_ID             DOM_KEY,
    OBEKT_NAME           DOM_CHAR_50 COLLATE PXW_CYRL,
    OBEKT_PLACE_ID       DOM_KEY,
    OBEKT_ADRES          DOM_CHAR_100,
    DAN_PLACE_ID         DOM_KEY,
    SERV_DOG_NOM         DOM_INT,
    SERV_DOG_DATE        DOM_DATE,
    FDRID                DOM_CHAR_10,
    BIM_NOM              DOM_CHAR_30,
    LOCKED               DOM_FLAG,
    NOTE                 DOM_CHAR_1000,
    IMSI                 DOM_INT64,
    PHONE_NUMBER         DOM_CHAR_15,
    OPERATOR             DOM_SMAL_INT,
    DISTRIBUTOR_KLI_ID   DOM_KEY,
    DISTRIBUTOR_SUMA     DOM_SUMA,
    DISTRIBUTOR_TO_DATE  DOM_DATE
);


CREATE TABLE TBL_KA_OPR_LOG (
    ID                DOM_KEY NOT NULL,
    KA_ID             DOM_KEY,
    OPR_ID            DOM_KEY,
    OPR_ID_PROD       DOM_KEY,
    OSNOVANIE         DOM_SMAL_INT,
    SERV_USER_ID      DOM_KEY,
    SERV_OPER_KLI_ID  DOM_KEY
);


CREATE TABLE TBL_KA_OPR_NODE (
    ID             DOM_KEY NOT NULL,
    KA_ID          DOM_KEY,
    OPR_ID         DOM_KEY,
    SERV_NUM       DOM_INT,
    SERV_USER_ID   DOM_KEY,
    DT_VALIDEN_DO  DOM_DATE
);


CREATE TABLE TBL_KA_REGNOM_NODE (
    ID       DOM_KEY NOT NULL,
    OPR_ID   DOM_KEY,
    REG_NOM  DOM_INT
);


CREATE TABLE TBL_KA_SERV_NOM (
    SERV_NOM  DOM_INT,
    BUSY      DOM_FLAG,
    REG_NOM   DOM_INT
);


CREATE TABLE TBL_KA_STOP_SIM_NODE (
    ID        DOM_KEY NOT NULL,
    DT_STOP   DOM_DATE,
    DT_START  DOM_DATE,
    KA_ID     DOM_KEY,
    USER_ID   DOM_KEY
);


CREATE TABLE TBL_LOG (
    ID           DOM_KEY NOT NULL,
    TABLE_NAME   DOM_CHAR_50 NOT NULL COLLATE PXW_CYRL,
    TABLE_ID     DOM_INT,
    TABLE_FIELD  DOM_CHAR_50 NOT NULL,
    TIP_OPR      DOM_BOOLEAN NOT NULL,
    OLD_VALUE    DOM_CHAR_300,
    NEW_VALUE    DOM_CHAR_300,
    DATETIME     DOM_DATE_TIME NOT NULL,
    USER_ID      DOM_INT,
    PC_ID        DOM_INT
);


CREATE GLOBAL TEMPORARY TABLE TBL_TEMPLATES_TMP_GEN (
    TEMPLATE_ID    INTEGER,
    GEN_FROM_DATE  DOM_DATE
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TBL_TMP_FAK_IN_OPR_ID (
    OPR_ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TBL_USER_PC (
    USER_ID  DOM_INT,
    PC_ID    DOM_INT
) ON COMMIT PRESERVE ROWS;


CREATE GLOBAL TEMPORARY TABLE TBL_WORK_OTR_KOL (
    FLAG  SMALLINT
) ON COMMIT DELETE ROWS;


CREATE TABLE TEMP$PROD_FOR_ANNUL (
    NUMBER  DOM_KEY NOT NULL,
    OPR_ID  DOM_KEY NOT NULL
);


CREATE TABLE TEMP$PROD_TO_FAK (
    NUMBER        DOM_KEY NOT NULL,
    PROD_ID       DOM_KEY NOT NULL,
    FAKT_PROD_ID  DOM_KEY
);


CREATE GLOBAL TEMPORARY TABLE TEMP$SLEDI_DATA (
    IMEI         DOM_CHAR_30,
    ROUMING_M2M  DOM_SMAL_INT,
    PROFIL       DOM_CHAR_10,
    IMSI         DOM_CHAR_15,
    IMEI_STATUS  DOM_CHAR_10,
    REG_NUMBER   DOM_CHAR_15,
    ERASED       DOM_BOOLEAN,
    DT_LICENS    DOM_DATE,
    IMEI_SIM     DOM_CHAR_20
) ON COMMIT DELETE ROWS;


CREATE TABLE TEMP_IMPORT (
    ID         DOM_KEY NOT NULL,
    VER        DOM_SMAL_INT NOT NULL,
    SIMPLE_ID  DOM_KEY,
    NAME       VARCHAR(100),
    NAME2      VARCHAR(100),
    CODE       VARCHAR(15),
    KOL        DOM_KOL,
    KOL2       DOM_KOL,
    SUMA       DOM_SUMA,
    CENA       DOM_CENA,
    RSN        DOM_SMAL_INT,
    OPIS       DOM_CHAR_50 NOT NULL
);


CREATE TABLE TEMPLATE_OPER_REL (
    USER_ID        DOM_KEY,
    ALLOW_USER_ID  DOM_KEY
);


CREATE TABLE TIP_REFUSED (
    ID             DOM_KEY NOT NULL,
    NAME           VARCHAR(100),
    FP_STORNO_TIP  DOM_INT
);


CREATE TABLE TIP_RESOLUTION (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_100
);


CREATE GLOBAL TEMPORARY TABLE TMP_ELTRADE_IMPORT (
    ID                    DOM_KEY,
    E_PRODUCT_ID          DOM_KEY,
    E_PRODUCT_NAME        DOM_CHAR_100,
    E_PRODUCT_SHORT_NAME  DOM_CHAR_15,
    E_PRICE               DOM_CENA,
    E_VAT_GROUP           DOM_SMAL_INT,
    E_ME_ID               DOM_SMAL_INT,
    E_ME_NAME             DOM_CHAR_10,
    E_GROUP_ID            DOM_SMAL_INT,
    E_GROUP_NAME          DOM_CHAR_50,
    E_BARCODE             DOM_CHAR_15,
    E_BARCODE_QTY         DOM_KOL,
    A_PRODUCT_ID          DOM_KEY,
    A_ME_ID               DOM_KEY,
    A_GROUP_ID            DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_IN_EL (
    IN_EL_ID  DOM_INT
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_IN_EL_PRODUCTION (
    IN_EL_ID  DOM_KEY NOT NULL
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_LAST_CENA (
    SIMPLE_ID  DOM_KEY NOT NULL,
    LAST_CENA  DOM_CENA
) ON COMMIT DELETE ROWS;


CREATE TABLE TMP_MARK_EL (
    ID           DOM_KEY NOT NULL,
    SIMPLE_ID    DOM_KEY NOT NULL,
    KOL          DOM_KOL NOT NULL,
    CENA         DOM_CENA,
    SUMA         DOM_SUMA NOT NULL,
    TMP_OPR_ID   DOM_KEY,
    RAZ_KOL      DOM_KOL,
    RAZ_ID       DOM_KEY,
    NUM          DOM_KEY,
    RSN          DOM_BOOLEAN,
    SKLAD_ID     DOM_KEY_SMALL,
    VAT_GROUP    DOM_SMAL_INT,
    VAT_PERCENT  NUMERIC(4,2)
);


CREATE TABLE TMP_METRO_EXPORT_OPR (
    OPR_ID  INTEGER NOT NULL
);


CREATE GLOBAL TEMPORARY TABLE TMP_NAL (
    SKLAD_ID   DOM_SMAL_INT NOT NULL,
    KOL        DOM_KOL NOT NULL,
    SUMA_SR    DOM_SUMA NOT NULL,
    SUMA_FR    DOM_SUMA NOT NULL,
    LAST_CENA  DOM_CENA,
    SIMPLE_ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE TABLE TMP_OMZ_SIM (
    SIMPLE_ID  DOM_KEY NOT NULL
);


CREATE TABLE TMP_OPR (
    ID        DOM_KEY NOT NULL,
    KLI_NOM   DOM_KEY,
    KLI_ID    DOM_KEY,
    SKLAD_ID  DOM_KEY,
    ERASED    DOM_KEY_SMALL NOT NULL,
    SUMA      DOM_SUMA,
    COMMENT   VARCHAR(1000),
    UNP_ID    DOM_INT64
);


CREATE TABLE TMP_OPR_SN (
    ID          DOM_KEY NOT NULL,
    SN          DOM_CHAR_30 NOT NULL COLLATE PXW_CYRL,
    ELEMENT_ID  DOM_KEY,
    NUM         DOM_KEY,
    TMP_OPR_ID  DOM_KEY,
    SIMPLE_ID   DOM_KEY,
    IN_EL_ID    DOM_KEY
);


CREATE GLOBAL TEMPORARY TABLE TMP_PARTIDA_ORDER (
    ELEMENT_ID  DOM_KEY,
    OPR_ID      DOM_KEY,
    OPR_DATE    DOM_DATE,
    SIMPLE_ID   DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_PARTIDA_RZV_KOL (
    PARTIDA_ID  DOM_KEY NOT NULL,
    KOL         DOM_KOL NOT NULL
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_REPLEACE_SIMPLE (
    OPR_ID  DOM_KEY NOT NULL
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_SEL_1 (
    ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_SEL_2 (
    ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_SEL_3 (
    ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_SEL_KLI (
    KLI_ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_SEL_REQUEST (
    ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_SIMPLE_RECALC (
    SIMPLE_ID  DOM_KEY NOT NULL,
    FLAG_CALC  DOM_FLAG DEFAULT 0 NOT NULL,
    DEPTH      DOM_SMAL_INT DEFAULT 0 NOT NULL,
    OPR_ID     DOM_KEY,
    OPR_DATE   DOM_DATE
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_SIMPLE_SEL_PROD (
    SIMPLE_ID  DOM_KEY,
    SKLAD_ID   DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE TABLE TMP_SIMPLE_SEL_PROD1 (
    ID         DOM_KEY NOT NULL,
    SIMPLE_ID  DOM_KEY,
    SKLAD_ID   DOM_KEY,
    NUM_TR     DOM_INT
);


CREATE GLOBAL TEMPORARY TABLE TMP_SIMPLE_TABLE_PRICES (
    HEIGHT     DOM_KOL NOT NULL,
    WIDTH      DOM_KOL NOT NULL,
    PRICE      DOM_CENA NOT NULL,
    SIMPLE_ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE GLOBAL TEMPORARY TABLE TMP_TABLE_PRICES_SELECT (
    HEIGHT     DOM_KOL NOT NULL,
    WIDTH      DOM_KOL NOT NULL,
    SIMPLE_ID  DOM_KEY
) ON COMMIT DELETE ROWS;


CREATE TABLE TS_OTC_FILES (
    ID          DOM_KEY NOT NULL,
    FOR_DATE    DOM_DATE NOT NULL,
    DATETIME    DOM_DATE_TIME NOT NULL,
    SUMA        DOM_SUMA NOT NULL,
    OTC_DATA    DOM_BLOB_TEXT NOT NULL,
    OTC_TEXT    DOM_BLOB_TEXT NOT NULL,
    STATUS      DOM_FLAG,
    OTC_NUMBER  DOM_INT,
    DT_IMPORT   DOM_DATE_TIME,
    APP_IMPORT  VARCHAR(255),
    IP_IMPORT   VARCHAR(255)
);


CREATE TABLE UNFINISHED_SALES (
    ID         DOM_INT64 NOT NULL,
    NUM        DOM_INT NOT NULL,
    OPR_ID     DOM_INT NOT NULL,
    SIMPLE_ID  DOM_KEY NOT NULL,
    KOL        DOM_KOL NOT NULL,
    SUMA       DOM_SUMA NOT NULL,
    MAX_KOL    DOM_KOL NOT NULL,
    DT         DOM_DATE_TIME
);


CREATE TABLE UNP (
    ID      DOM_INT64 NOT NULL,
    OPR_ID  DOM_KEY NOT NULL,
    UNP     DOM_UNP,
    STATUS  DOM_FLAG
);


CREATE TABLE UNR_AGENT (
    ID     DOM_KEY NOT NULL,
    NAME   DOM_CHAR_100,
    NOMER  DOM_SMAL_INT
);


CREATE TABLE UNR_AGENT_ANALYSES (
    ID           DOM_KEY NOT NULL,
    ANALYSES_ID  DOM_KEY,
    AGENT_ID     DOM_KEY
);


CREATE TABLE UNR_ANALYSES (
    ID          DOM_KEY NOT NULL,
    OPR_ID      DOM_KEY,
    OUT_EL_ID   DOM_KEY,
    SUMA        DOM_SUMA,
    SUMA_SR     DOM_SUMA,
    VAT         DOM_PERCENT,
    PAIED       DOM_INT,
    PAIED_DATE  DOM_DATE_TIME,
    SKLAD_ID    DOM_KEY,
    KLI_ID      DOM_KEY,
    USER_ID     DOM_KEY,
    SIMPLE_ID   DOM_KEY,
    GROUP_ID    DOM_KEY,
    AGENT_ID    DOM_KEY,
    LOCK        DOM_FLAG,
    KOEF        DOM_PERCENT
);


CREATE TABLE UNR_GROUP (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_100
);


CREATE TABLE UNR_GROUP_SIMPLE (
    ID         DOM_KEY NOT NULL,
    GROUP_ID   DOM_KEY,
    SIMPLE_ID  DOM_KEY
);


CREATE TABLE UNR_KLI_AGENT (
    ID        DOM_KEY NOT NULL,
    KLI_ID    DOM_KEY,
    AGENT_ID  DOM_KEY
);


CREATE TABLE UNR_KLI_AGENT_2 (
    ID        DOM_KEY NOT NULL,
    KLI_ID    DOM_KEY,
    AGENT_ID  DOM_KEY
);


CREATE TABLE UNR_KOEF_NODE (
    ID         DOM_KEY NOT NULL,
    AGENT_ID   DOM_KEY,
    GROUP_ID   DOM_KEY,
    KOEF       DOM_PERCENT,
    KOEF_NAME  DOM_CHAR_100
);


CREATE TABLE "USER" (
    ID              SMALLINT NOT NULL,
    NAME            VARCHAR(30),
    EGN             VARCHAR(10),
    PASS            VARCHAR(32),
    RIGHTS          BIGINT,
    TEL             VARCHAR(20),
    IS_WORKED       SMALLINT DEFAULT 0 NOT NULL,
    DEF_KASA_ID     INTEGER,
    RIGHTS2         BIGINT,
    PASS2           VARCHAR(32),
    IS_ACTIVE       DOM_SMAL_INT DEFAULT 1,
    OBEKT_ID        DOM_SMAL_INT,
    SELLER          DOM_KEY_SMALL,
    KBD             DOM_KEY,
    RIGHTS3         BIGINT,
    LIMITEDUSER     DOM_SMAL_INT DEFAULT 0,
    RIGHTS4         BIGINT,
    USER_RIGHTS_ID  DOM_KEY,
    NAME_LAT        DOM_CHAR_30,
    SERV            DOM_FLAG,
    LANGUAGE        DOM_STR_3,
    RIGHTS5         BIGINT,
    RIGHTS6         BIGINT,
    EMAIL           DOM_CHAR_50,
    KASA_H          DOM_SMAL_INT,
    USER_SCHEMA_ID  DOM_KEY
);


CREATE TABLE USER_KASA_NODE (
    ID       INTEGER NOT NULL,
    KASA_ID  INTEGER,
    USER_ID  INTEGER
);


CREATE TABLE USER_OBEKT_NODE (
    ID         INTEGER NOT NULL,
    OBEKT_ID   INTEGER,
    USER_ID    INTEGER,
    SPR_RIGHT  DOM_BOOLEAN,
    OPR_RIGHT  DOM_BOOLEAN,
    OTCHET     DOM_SMAL_INT NOT NULL
);


CREATE TABLE USER_ROLES_EL (
    ID         DOM_KEY NOT NULL,
    ROLE_ID    DOM_KEY NOT NULL,
    SCHEMA_ID  DOM_KEY NOT NULL
);


CREATE TABLE USER_SCHEMAS (
    ID    DOM_KEY NOT NULL,
    NAME  DOM_CHAR_50 NOT NULL
);


CREATE TABLE USER_SEL_NODE (
    ID       DOM_KEY NOT NULL,
    USER_ID  DOM_KEY,
    SEL_ID   DOM_KEY
);


CREATE TABLE USER_SKLAD_NAL_NODE (
    ID        DOM_KEY NOT NULL,
    USER_ID   DOM_KEY_SMALL NOT NULL,
    SKLAD_ID  DOM_KEY_SMALL NOT NULL
);


CREATE TABLE USER_SKLAD_NODE (
    ID         INTEGER NOT NULL,
    SKLAD_ID   INTEGER,
    USER_ID    INTEGER,
    SPR_RIGHT  DOM_BOOLEAN,
    OPR_RIGHT  DOM_BOOLEAN
);


CREATE TABLE VALUTA (
    ID      SMALLINT NOT NULL,
    CODE    CHAR(3),
    NAME    VARCHAR(20),
    KURS    KURS,
    SYMBOL  UTF_10,
    FORMAT  UTF_10
);


CREATE TABLE VISIT (
    ID          DOM_KEY NOT NULL,
    OPR_ID      DOM_KEY NOT NULL,
    START_TIME  DOM_DATE_TIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
    END_TIME    DOM_DATE_TIME DEFAULT CURRENT_TIMESTAMP NOT NULL
);


CREATE TABLE VISIT_EL (
    ID             DOM_KEY NOT NULL,
    VISIT_OPR_ID   DOM_KEY NOT NULL,
    OPR_ID         DOM_KEY,
    VISIT_TYPE_ID  DOM_KEY NOT NULL,
    SYNCH_TIME     DOM_DATE_TIME
);


CREATE TABLE VISIT_TYPE (
    ID    DOM_KEY_SMALL NOT NULL,
    NAME  DOM_CHAR_50
);


CREATE TABLE WAREHOUSE_BASE_MAP (
    ID         DOM_KEY NOT NULL,
    NAME       DOM_CHAR_50 NOT NULL,
    PRIORITY   DOM_SMAL_INT,
    PARENT_ID  DOM_KEY
);


CREATE TABLE WHOKNA_CONNECTION (
    ID    DOM_KEY NOT NULL,
    NOTE  DOM_CHAR_100 NOT NULL,
    CS    DOM_CHAR_300 NOT NULL
);


CREATE TABLE WUERTH_COMMIS (
    ID             DOM_KEY NOT NULL,
    COMMISGRP      DOM_INT NOT NULL,
    LOWLIMIT       DOM_INT,
    HIGHLIMIT      DOM_INT,
    COMMISPROCENT  DOM_INT,
    INTERVAL_NAME  DOM_CHAR_8
);


CREATE TABLE WUERTH_SIMPLE (
    ID                   DOM_KEY NOT NULL,
    SIMPLE_ID            DOM_KEY,
    PRICEUNIT            DOM_INT,
    COMMISGRP            DOM_INT,
    MAXDISC              DOM_INT,
    LISTPRICE_W_MAXDISC  ED_CENA,
    QTY1                 DOM_KOL,
    PRICEQTY1            ED_CENA,
    QTY2                 DOM_KOL,
    PRICEQTY2            DOM_KOL,
    OPAKOVAEMO           DOM_INT
);


CREATE TABLE ZAIAVKA_DOSTAVKA (
    ID              DOM_KEY NOT NULL,
    OPR_ID          DOM_KEY NOT NULL,
    SIMPLE_ID       DOM_KEY NOT NULL,
    SKLAD_ID        DOM_KEY,
    KLI_ID          DOM_KEY,
    RAZFASOVKA_ID   DOM_KEY,
    CENA_LAST       DOM_CENA,
    CENA_CL         DOM_CENA,
    KOL_ZAIAVKA     DOM_KOL,
    KOL_NAL         DOM_KOL,
    KOL_RAZ         DOM_KOL,
    FLAG_READY      DOM_SMAL_INT DEFAULT 0,
    CENA_CL_NO_DDS  DOM_CENA
);


CREATE TABLE ZAIAVKA_DOSTAVKA_NODE (
    ID         DOM_KEY NOT NULL,
    OPR_ID_OB  DOM_KEY NOT NULL,
    OPR_ID     DOM_KEY NOT NULL
);


CREATE TABLE ZD_DOST_MOVE_NODE (
    ID                DOM_KEY NOT NULL,
    OPR_ID_ZD         DOM_KEY NOT NULL,
    OPR_ID_DOST_MOVE  DOM_KEY NOT NULL,
    SIMPLE_ID         DOM_KEY NOT NULL,
    KOL               DOM_KOL NOT NULL
);


CREATE TABLE ZD_POR_NODE (
    ID         DOM_KEY NOT NULL,
    OPR_ID_ZD  DOM_KEY NOT NULL,
    POR_EL_ID  DOM_KEY NOT NULL
);




/******************************************************************************/
/***                           Check constraints                            ***/
/******************************************************************************/

ALTER TABLE WAREHOUSE_BASE_MAP ADD CONSTRAINT CHK1_WAREHOUSE_BASE_MAP CHECK (parent_id <> id);
ALTER TABLE ONLINE_USERS ADD CONSTRAINT CHK1_ONLINE_USERS CHECK (IS_ACTIVE IN (0, 1));
ALTER TABLE UNP ADD CONSTRAINT CHK1_UNP CHECK ((COALESCE((SELECT COUNT(UNP.ID) FROM UNP WHERE UPPER(UNP.UNP) = UPPER(NEW.UNP) AND UNP.ID <> NEW.ID),0) = 0));
ALTER TABLE SUMI ADD CONSTRAINT CHK_SUMI CHECK (SUMA_OST >= 0.00);


/******************************************************************************/
/***                           Unique constraints                           ***/
/******************************************************************************/

ALTER TABLE CENOVA_LISTA_EL ADD CONSTRAINT UNQ1_CENOVA_LISTA_EL UNIQUE (OPR_ID, SIMPLE_ID);
ALTER TABLE CFG_RAZPAD_CALC ADD CONSTRAINT UNQ1_CFG_RAZPAD_CALC UNIQUE (FROM_PRODUCT_ID, TO_PRODUCT_ID);
ALTER TABLE COUNTIES ADD CONSTRAINT UNQ_COUNTIES_NAME UNIQUE (NAME);
ALTER TABLE COURSES_OPR_NODE ADD CONSTRAINT UNQ1_COURSES_OPR_NODE UNIQUE (OPR_ID);
ALTER TABLE CRM_ATON_PRODUKT ADD CONSTRAINT UNQ_CRM_ATON_PRODUKT UNIQUE (SIMPLE_ID, CRM_PRODUKT);
ALTER TABLE CRM_INFO_LICENZIA ADD CONSTRAINT UNQ_CRM_INFO_LICENZIA UNIQUE (KLI_ID, PRODUCT_CRM);
ALTER TABLE CRM_KLI ADD CONSTRAINT UNQ1_CRM_KLI UNIQUE (KLI_ID, CRM_ID);
ALTER TABLE DEF_RAZ_SIMPLE ADD CONSTRAINT UNQ1_DEF_RAZ_SIMPLE UNIQUE (SIMPLE_ID, RAZFASOVKA_ID);
ALTER TABLE EXTENDED_VARANTY_NODE ADD CONSTRAINT UNQ1_EXTENDED_VARANTY_NODE UNIQUE (OUT_EL_ID);
ALTER TABLE FAK_PROD ADD CONSTRAINT UNQ1_FAK_PROD UNIQUE (OPR_ID, FAK_ID);
ALTER TABLE FAK_PROD_REAL_PROD_NODE ADD CONSTRAINT UNQ_FP_RP_IDS UNIQUE (PROD_OPR_ID, FKT_PROD_OPR_ID);
ALTER TABLE FIRMI ADD CONSTRAINT UNQ_FIRMI_USER_NAME UNIQUE (E_FAK_USER_NAME);
ALTER TABLE FP ADD CONSTRAINT UNQ1_FP UNIQUE (FP_NUMBER);
ALTER TABLE INSTALLATION_USERS ADD CONSTRAINT UNQ1_INSTALLATION_USERS UNIQUE (INSTALLATION_ID, INSTALLER_ID);
ALTER TABLE INSTALLERS ADD CONSTRAINT UNQ1_INSTALLERS UNIQUE (USER_ID);
ALTER TABLE INSTALLERS_GROUP ADD CONSTRAINT UNQ1_INSTALLERS_GROUP UNIQUE (INSTALLER_ID, GROUP_ID);
ALTER TABLE KI_DOST_NODE ADD CONSTRAINT UNQ_KI_DOST_SUN_OPR_ID UNIQUE (SUB_KI_OPR_ID);
ALTER TABLE KI_DOST_SUMA ADD CONSTRAINT UNQ_KI_DOST_SUMA_OPR_ID UNIQUE (KI_OPR_ID);
ALTER TABLE KI_DOST_SUMA_FAK ADD CONSTRAINT UNQ_KI_DOST_SUMA_FAK_KI UNIQUE (KI_SUMA_ID, FAK_IN_ID);
ALTER TABLE KLI_DIST_NODE ADD CONSTRAINT UNQ_KLI_DIST_NODE UNIQUE (KLI_ID, DIST_ID);
ALTER TABLE KLI_FIRMA_NODE ADD CONSTRAINT UNQ1_KLI_FIRMA_NODE UNIQUE (KLI_ID, FIRMA_ID);
ALTER TABLE KLI_SKLAD_NODE ADD CONSTRAINT UNQ1_KLI_SKLAD_NODE UNIQUE (KLI_ID, SKLAD_ID, SELEKCIQ_ID);
ALTER TABLE NAL ADD CONSTRAINT UNQ_NAL_SIMPLE_SKLAD UNIQUE (SIMPLE_ID, SKLAD_ID);
ALTER TABLE NAL_F ADD CONSTRAINT UNQ_NAL_F_SIMPLE UNIQUE (SIMPLE_ID);
ALTER TABLE OFFER_USER_NODE ADD CONSTRAINT UNQ1_OFFER_USER_NODE UNIQUE (OFFER_ID, USER_ID);
ALTER TABLE OFF_OBEKTI_LIST ADD CONSTRAINT UNQ1_OFF_OBEKTI_LIST UNIQUE (OBEKT_ID);
ALTER TABLE ONLINE_USERS ADD CONSTRAINT UNQ1_ONLINE_USERS UNIQUE (EMAIL);
ALTER TABLE ONLINE_USERS ADD CONSTRAINT UNQ_ONLINE_USERS_DISTRIBUTOR UNIQUE (DISTRIBUTOR_ID);
ALTER TABLE ONLINE_USERS ADD CONSTRAINT UNQ_ONLINE_USERS_USER UNIQUE (USER_ID);
ALTER TABLE OPR_PAYMENT_NODE ADD CONSTRAINT UNQ_OPR_PAYMENT_NODE UNIQUE (OPR_ID, PAYMENT_ID);
ALTER TABLE OPR_RECEPIES ADD CONSTRAINT UNQ_OPR_RECEPIES UNIQUE (OPR_ID, RECEPIE_ID);
ALTER TABLE PARTIDA_IN_EL_NODE ADD CONSTRAINT UNQ_PIN UNIQUE (IN_EL_ID, PARTIDA_NODE_ID);
ALTER TABLE PARTIDA_NAL ADD CONSTRAINT UNQ_PARTIDA_NAL UNIQUE (IN_EL_ID, ELEMENT_ID);
ALTER TABLE PARTIDA_OUT_EL_NODE ADD CONSTRAINT UNQ_PON UNIQUE (OUT_EL_ID, PARTIDA_NODE_ID);
ALTER TABLE PLACE ADD CONSTRAINT UNQ_PLACE UNIQUE (NAME);
ALTER TABLE POR_EL_PICTURES_NODE ADD CONSTRAINT UNQ1_POR_EL_PICTURES_NODE UNIQUE (POR_EL_ID, PICTURE_ID);
ALTER TABLE POR_OFFER_TERMS_NODE ADD CONSTRAINT UNQ1_POR_OFFER_TERMS_NODE UNIQUE (POR_ID, TERMS_ID);
ALTER TABLE PROFORMA_TO_FAK ADD CONSTRAINT UNQ_PROFORMA_ID UNIQUE (PROFORMA_ID);
ALTER TABLE PROP_NODE ADD CONSTRAINT UNQ_PROP_NODE UNIQUE (MAJOR_PROP_ID, MINOR_PROP_ID);
ALTER TABLE RET_DOST_MOVE_NODE ADD CONSTRAINT UNQ_RET_MOVE_NODE_IN UNIQUE (IN_OPR_ID);
ALTER TABLE RET_DOST_MOVE_NODE ADD CONSTRAINT UNQ_RET_MOVE_NODE_OUT UNIQUE (OUT_OPR_ID);
ALTER TABLE SELEKCIQ_KALK_EL ADD CONSTRAINT UNQ_SELEKCIQ_KALK_EL UNIQUE (SELEKCIQ_ID, SIMPLE_ID);
ALTER TABLE SELEKCIQ_KASA_EL ADD CONSTRAINT UNQ1_SELEKCIQ_KASI_EL_SEL_KASA_ UNIQUE (SELEKCIQ_ID, KASA_ID);
ALTER TABLE SELEKCIQ_KLI_EL ADD CONSTRAINT UNQ_SELEKCIQ_KLI_EL UNIQUE (KLI_ID, SELEKCIQ_ID);
ALTER TABLE SELEKCIQ_SIM_EL ADD CONSTRAINT UNQ_SELEKCIQ_SIM_EL UNIQUE (SIMPLE_ID, SELEKCIQ_ID);
ALTER TABLE SIMPLE_PROP_NODE ADD CONSTRAINT UNQ_SIMPLE_PROP_NODE UNIQUE (MAJOR_PROP_ID, SIMPLE_ID);
ALTER TABLE SKLAD_MOL ADD CONSTRAINT UNQ_SKLAD_MOL UNIQUE (SKLAD_ID, USER_ID);
ALTER TABLE SYSTEM2 ADD CONSTRAINT UNQ_SYSTEM UNIQUE (VAR_NAME);
ALTER TABLE TABLE_PRICES_DISCOUNTS ADD CONSTRAINT UNQ1_TABLE_PRICES_DISCOUNTS UNIQUE (SIMPLE_ID, KLI_ID);
ALTER TABLE TABLE_PRICE_COEFICIENT ADD CONSTRAINT UNQ1_TABLE_PRICE_COEFICIENT UNIQUE (MASTER_SIMPLE_ID, SIMPLE_ID);
ALTER TABLE TABLE_PRICE_SIMPLE_NODE ADD CONSTRAINT UNQ1_TABLE_PRICE_SIMPLE_NODE UNIQUE (PRICE_ID, SIMPLE_ID);
ALTER TABLE TMP_PARTIDA_RZV_KOL ADD CONSTRAINT UNQ_TMP_PARTIDA_ID UNIQUE (PARTIDA_ID);
ALTER TABLE TMP_REPLEACE_SIMPLE ADD CONSTRAINT UNQ_TMP_REPLACE_SIMPLE UNIQUE (OPR_ID);
ALTER TABLE UNR_GROUP_SIMPLE ADD CONSTRAINT UNQ1_UNR_GROUP_SIMPLE UNIQUE (SIMPLE_ID);


/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE ACTIONS ADD CONSTRAINT PK_ACTIONS_ID PRIMARY KEY (ID);
ALTER TABLE ADDRESSES ADD CONSTRAINT PK_ADDRESSES_ID PRIMARY KEY (ID);
ALTER TABLE AMBALAJ ADD CONSTRAINT PK_AMBALAJ PRIMARY KEY (ID);
ALTER TABLE AMBALAJ_HISTORY ADD CONSTRAINT PK_AMABALAJ_HISTORY_ID PRIMARY KEY (ID);
ALTER TABLE AMBALAJ_HISTORY_EDIT ADD CONSTRAINT PK_AMBALAJ_HISTORY_EDIT PRIMARY KEY (ID);
ALTER TABLE ANALYSES ADD CONSTRAINT PK_ANALYSES PRIMARY KEY (ID);
ALTER TABLE BARCODE ADD CONSTRAINT PK_BARKODE_ID PRIMARY KEY (ID);
ALTER TABLE BH_OTSTAPKI ADD CONSTRAINT PK_BH_OTSTAPKI_ID PRIMARY KEY (ID);
ALTER TABLE BH_PROD_POR ADD CONSTRAINT PK_BH_PROD_POR_ID PRIMARY KEY (ID);
ALTER TABLE BONUSI_ZA_RAZCHET ADD CONSTRAINT PK_BZR_ID PRIMARY KEY (ID);
ALTER TABLE BONUS_CENA_TOCHKI ADD CONSTRAINT PK_BONUS_CENA_TOCHKI PRIMARY KEY (ID);
ALTER TABLE BONUS_CONFIG ADD CONSTRAINT PK_BONUS_CONFIG PRIMARY KEY (ID);
ALTER TABLE BONUS_CONFIG_KLI ADD CONSTRAINT PK_BONUS_CONFIG_KLI PRIMARY KEY (ID);
ALTER TABLE BONUS_CONFIG_SKLAD ADD CONSTRAINT PK_BONUS_CONFIG_SKLAD PRIMARY KEY (ID);
ALTER TABLE BONUS_KLI_USED ADD CONSTRAINT PK_BONUS_KLI_USED_ID PRIMARY KEY (ID);
ALTER TABLE BONUS_RAZCHET_NODE ADD CONSTRAINT PK_BONUS_RAZCHET_NODE_ID PRIMARY KEY (ID);
ALTER TABLE BROENE ADD CONSTRAINT PK_BROENE_ID PRIMARY KEY (ID);
ALTER TABLE BROENE_EL ADD CONSTRAINT PK_BROENE_EL_ID PRIMARY KEY (ID);
ALTER TABLE BROENE_EL_DETAILS ADD CONSTRAINT PK_BROENE_EL_DETAILS PRIMARY KEY (ID);
ALTER TABLE BROENE_EL_RAZ_NODE ADD CONSTRAINT PK_BROENE_EL_RAZ_NODE PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA ADD CONSTRAINT PK_CENOVA_LISTA PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_EDIT ADD CONSTRAINT PK_CENOVA_LISTA_EDIT PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_EL ADD CONSTRAINT PK_CENOVA_LISTA_EL PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_EL_EDIT ADD CONSTRAINT PK_CENOVA_LISTA_EL_EDIT PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_HISTORY ADD CONSTRAINT PK_CENOVA_LISTA_HISTORY PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_KLI ADD CONSTRAINT PK_CENOVA_LISTA_KLI PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_KLI_EDIT ADD CONSTRAINT PK_CENOVA_LISTA_KLI_EDIT PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_PROTOKOL ADD CONSTRAINT PK_CENOVA_LISTA_PROTOKOL PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_SKLAD ADD CONSTRAINT PK_CENOVA_LISTA_SKLAD PRIMARY KEY (ID);
ALTER TABLE CENOVA_LISTA_SKLAD_EDIT ADD CONSTRAINT PK_CENOVA_LISTA_SKLAD_EDIT PRIMARY KEY (ID);
ALTER TABLE CFG_FAK_ACCOUNTING ADD CONSTRAINT PK_CFG_FAK_ACCOUNTING PRIMARY KEY (ID);
ALTER TABLE CFG_INFO ADD CONSTRAINT PK_CFG_INFO PRIMARY KEY (ID);
ALTER TABLE CFG_KASA_TEMPLATE ADD CONSTRAINT PK_CFG_KASA_TEMPLATE PRIMARY KEY (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT PK_CFG_KASA_TEMPLATE_EL PRIMARY KEY (ID);
ALTER TABLE CFG_LOG ADD CONSTRAINT PK_CFG_LOG PRIMARY KEY (ID);
ALTER TABLE CFG_OSN_DDS ADD CONSTRAINT PK_CFG_OSN_DDS PRIMARY KEY (ID);
ALTER TABLE CFG_PAYMENTS ADD CONSTRAINT PK_CFG_PAYMENTS PRIMARY KEY (ID);
ALTER TABLE CFG_PAYMENTS_KLI ADD CONSTRAINT PK_CFG_PAYMENTS_KLI_ID PRIMARY KEY (ID);
ALTER TABLE CFG_RAZPAD_CALC ADD CONSTRAINT PK_CFG_RAZPAD_CALC_ID PRIMARY KEY (ID);
ALTER TABLE CFG_VEZNI ADD CONSTRAINT PK_CFG_VEZNI_ID PRIMARY KEY (ID);
ALTER TABLE CLAIM_EL ADD CONSTRAINT PK_CLAIM_EL_ID PRIMARY KEY (ID);
ALTER TABLE CLOTH_SIZE ADD CONSTRAINT PK_CLOTH_SIZE_ID PRIMARY KEY (ID);
ALTER TABLE CN_DELIVERY_ELEMENTS ADD CONSTRAINT PK_CN_DELIVERY_ELEMENTS PRIMARY KEY (ID);
ALTER TABLE COMMENT ADD CONSTRAINT PK_COMMENT_ID PRIMARY KEY (ID);
ALTER TABLE COMMENTS ADD CONSTRAINT PK_COMMENTS PRIMARY KEY (ID);
ALTER TABLE COMMENT_EINVOICE_NODE ADD CONSTRAINT PK_COMMENT_EINVOICE_NODE PRIMARY KEY (ID);
ALTER TABLE COMMENT_FIRMI_NODE ADD CONSTRAINT PK_COMMENT_FIRMI_NODE PRIMARY KEY (ID);
ALTER TABLE COMMENT_KLI_NODE ADD CONSTRAINT PK_COMMENT_KLI_NODE PRIMARY KEY (ID);
ALTER TABLE COMMENT_OPR_NODE ADD CONSTRAINT PK_COMMENT_OPR_NODE PRIMARY KEY (ID);
ALTER TABLE COMMENT_OPR_TEMPLATE_NODE ADD CONSTRAINT PK_COMMENT_OPR_TEMPLATE_NODE_ID PRIMARY KEY (ID);
ALTER TABLE COMMENT_SIMPLE_NODE ADD CONSTRAINT PK_COMMENT_SIMPLE_NODE PRIMARY KEY (ID);
ALTER TABLE COMMENT_TASKS_NODE ADD CONSTRAINT PK_COMMENT_TASKS_NODE PRIMARY KEY (ID);
ALTER TABLE COUNTIES ADD CONSTRAINT PK_COUNTIES PRIMARY KEY (ID);
ALTER TABLE COUNTRIES ADD CONSTRAINT PK_COUNTRIES_ID PRIMARY KEY (ID);
ALTER TABLE COURSES ADD CONSTRAINT PK_COURSES_ID PRIMARY KEY (ID);
ALTER TABLE COURSES_OPR_NODE ADD CONSTRAINT PK_COURSES_OPR_NODE_ID PRIMARY KEY (ID);
ALTER TABLE CRM_ATON_PRODUKT ADD CONSTRAINT PK_CRM_ATON_PRODUKT PRIMARY KEY (ID);
ALTER TABLE CRM_INFO_LICENZIA ADD CONSTRAINT PK_CRM_INFO_LICENZIA PRIMARY KEY (ID);
ALTER TABLE CRM_KLI ADD CONSTRAINT PK_CRM_KLI_ID PRIMARY KEY (ID);
ALTER TABLE CRM_PRODUCT ADD CONSTRAINT PK_CRM_PRODUCT_ID PRIMARY KEY (ID);
ALTER TABLE DEF_RAZ_SIMPLE ADD CONSTRAINT PK_DEF_RAZ_SIMPLE PRIMARY KEY (ID);
ALTER TABLE DELIVERY_CURRENCY ADD CONSTRAINT PK_DELIVERY_CURRENCY PRIMARY KEY (ID);
ALTER TABLE DOC ADD CONSTRAINT PK_DOC PRIMARY KEY (ID);
ALTER TABLE DOCUMENTS ADD CONSTRAINT PK_DOCUMENTS_ID PRIMARY KEY (ID);
ALTER TABLE DOCUMENTS_TIP ADD CONSTRAINT PK_DOCUMENTS_TIP_ID PRIMARY KEY (ID);
ALTER TABLE DOCUMENTS_TIP_CODE ADD CONSTRAINT PK_DOCUMENTS_TIP_CODE_ID PRIMARY KEY (ID);
ALTER TABLE DOST_CENI ADD CONSTRAINT PK_DOST_CENI PRIMARY KEY (ID);
ALTER TABLE DOST_IMPORT_KLI_MAP ADD CONSTRAINT PK_DOST_IMPORT_KLI_MAP PRIMARY KEY (ID);
ALTER TABLE DOST_IMPORT_RAZF_MAP ADD CONSTRAINT PK_DOST_IMPORT_RAZF_MAP PRIMARY KEY (ID);
ALTER TABLE DOST_IMPORT_SIMPLE_MAP ADD CONSTRAINT PK_DOST_IMPORT_SIMPLE_MAP PRIMARY KEY (ID);
ALTER TABLE DOST_NODE ADD CONSTRAINT PK_DOST_NODE_ID PRIMARY KEY (ID);
ALTER TABLE DVSK_DOK_TYPE ADD CONSTRAINT PK_DVSK_DOK_TYPE_ID PRIMARY KEY (ID);
ALTER TABLE DVSK_EL ADD CONSTRAINT PK_DVSK_EL PRIMARY KEY (ID);
ALTER TABLE DVSK_OPR ADD CONSTRAINT PK_DVSK_OPR PRIMARY KEY (ID);
ALTER TABLE EGROUPS ADD CONSTRAINT PK_EGROUPS_ID PRIMARY KEY (ID);
ALTER TABLE ESIMPLE ADD CONSTRAINT PK_ESIMPLE_ID PRIMARY KEY (ID);
ALTER TABLE ETIKETI ADD CONSTRAINT PK_ETIKETI PRIMARY KEY (ID);
ALTER TABLE EXCHANGE_SN ADD CONSTRAINT PK_EXCHANGE_SN_ID PRIMARY KEY (ID);
ALTER TABLE EXPLANATORY ADD CONSTRAINT PK_EXPLANATORY PRIMARY KEY (ID);
ALTER TABLE EXPLANATORY_TYPE ADD CONSTRAINT PK_EXPLANATORY_TYPE_ID PRIMARY KEY (ID);
ALTER TABLE EXPORTED_OPERATIONS ADD CONSTRAINT PK_EXPORTED_OPERATIONS PRIMARY KEY (ID);
ALTER TABLE EXPORTS ADD CONSTRAINT PK_EXPORTS_ID PRIMARY KEY (ID);
ALTER TABLE EXPORT_OPR ADD CONSTRAINT PK_EXPORT_OPR_ID PRIMARY KEY (ID);
ALTER TABLE EXPORT_SYNC ADD CONSTRAINT PK_EXPORT_SYNC PRIMARY KEY (ID);
ALTER TABLE EXPORT_TYPES ADD CONSTRAINT PK_EXPORT_TYPES PRIMARY KEY (ID);
ALTER TABLE EXPORT_VENDORS ADD CONSTRAINT PK_EXPORT_VENDORS PRIMARY KEY (ID);
ALTER TABLE EXTENDED_VARANTY_NODE ADD CONSTRAINT PK_EXTENDED_VARANTY_NODE_ID PRIMARY KEY (ID);
ALTER TABLE FAK ADD CONSTRAINT PK_FAK_ID PRIMARY KEY (ID);
ALTER TABLE FAKTURA_OSNOVANIE ADD CONSTRAINT PK_FAKTURA_OSNOVANIE PRIMARY KEY (ID);
ALTER TABLE FAK_EL ADD CONSTRAINT PK_FAK_EL_ID PRIMARY KEY (ID);
ALTER TABLE FAK_EL_IN_EL_NODE ADD CONSTRAINT PK_FAK_EL_IN_EL_NODE_ID PRIMARY KEY (ID);
ALTER TABLE FAK_IN ADD CONSTRAINT PK_FAK_IN_ID PRIMARY KEY (ID);
ALTER TABLE FAK_IN_EL_NODE ADD CONSTRAINT PK_FAK_IN_EL_NODE_ID PRIMARY KEY (ID);
ALTER TABLE FAK_IN_SUMI ADD CONSTRAINT PK_FAK_IN_SUMI PRIMARY KEY (ID);
ALTER TABLE FAK_KI_NUMBER ADD CONSTRAINT PK_FAK_KI_NUMBER PRIMARY KEY (ID);
ALTER TABLE FAK_OUT_EL_NODE ADD CONSTRAINT PK_FAK_OUT_EL_NODE_ID PRIMARY KEY (ID);
ALTER TABLE FAK_PROD ADD CONSTRAINT PK_FAK_PROD_ID PRIMARY KEY (ID);
ALTER TABLE FAK_PROD_REAL_PROD_NODE ADD CONSTRAINT PK_FAK_PROD_REAL_PROD_ID PRIMARY KEY (ID);
ALTER TABLE FIRMI ADD CONSTRAINT PK_FIRMI_ID PRIMARY KEY (ID);
ALTER TABLE FIRMI_FAK_DATA ADD CONSTRAINT PK_FIRMI_FAK_DATA_ID PRIMARY KEY (ID);
ALTER TABLE FISKAL_BONS ADD CONSTRAINT PK_FISKAL_BONS_ID PRIMARY KEY (ID);
ALTER TABLE FP ADD CONSTRAINT PK_FP_ID PRIMARY KEY (ID);
ALTER TABLE FR_REPORTS ADD CONSTRAINT PK_FR_REPORTS PRIMARY KEY (ID);
ALTER TABLE FU ADD CONSTRAINT PK_FU_ID PRIMARY KEY (ID);
ALTER TABLE FU_EXPORT_DOGOVOR ADD CONSTRAINT PK_FU_EXPORT_DOGOVOR_ID PRIMARY KEY (ID);
ALTER TABLE FU_OBOROTI ADD CONSTRAINT PK_FU_OBOROTI PRIMARY KEY (ID);
ALTER TABLE FU_SER_NUM ADD CONSTRAINT PK_FU_SER_NUM_ID PRIMARY KEY (ID);
ALTER TABLE GARANCII ADD CONSTRAINT PK_GARANCII PRIMARY KEY (ID);
ALTER TABLE GRFINGER ADD CONSTRAINT PK_GRFINGER PRIMARY KEY (ID);
ALTER TABLE HGROUPS ADD CONSTRAINT PK_HGROUPS PRIMARY KEY (ID);
ALTER TABLE IBE$PARAMS_HISTORY ADD PRIMARY KEY (IBE$PH_PROCEDURE_NAME);
ALTER TABLE IBE$VERSION_HISTORY ADD PRIMARY KEY (IBE$VH_ID);
ALTER TABLE "IN" ADD CONSTRAINT PK_IN_ID PRIMARY KEY (ID);
ALTER TABLE INI ADD CONSTRAINT PK_INI_ID PRIMARY KEY (ID);
ALTER TABLE INSTALLATIONS ADD CONSTRAINT PK_INSTALLATIONS_ID PRIMARY KEY (ID);
ALTER TABLE INSTALLATION_PICTURES ADD CONSTRAINT PK_INSTALLATION_PICTURES_ID PRIMARY KEY (ID);
ALTER TABLE INSTALLATION_USERS ADD CONSTRAINT PK_INSTALLATION_USERS_ID PRIMARY KEY (ID);
ALTER TABLE INSTALLERS ADD CONSTRAINT PK_INSTALLERS_ID PRIMARY KEY (ID);
ALTER TABLE INSTALLERS_GROUP ADD CONSTRAINT PK_INSTALLERS_GROUP PRIMARY KEY (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT PK_INTRASTAT_DATA_ID PRIMARY KEY (ID);
ALTER TABLE INTRASTAT_DEAL_TYPE ADD CONSTRAINT PK_INTRASTAT_DEAL_TYPE_ID PRIMARY KEY (ID);
ALTER TABLE INTRASTAT_DELIVERY_CONDITIONS ADD CONSTRAINT PK_INTRASTAT_DELIVERY_COND_ID PRIMARY KEY (ID);
ALTER TABLE INTRASTAT_REGION ADD CONSTRAINT PK_INTRASTAT_REGION_ID PRIMARY KEY (ID);
ALTER TABLE INTRASTAT_TRANSPORT_TYPE ADD CONSTRAINT PK_INTRASTAT_TRANSPORT_TYPE_ID PRIMARY KEY (ID);
ALTER TABLE INV ADD CONSTRAINT PK_INV_ID PRIMARY KEY (ID);
ALTER TABLE INV_IZL ADD CONSTRAINT PK_INV_IZL_ID PRIMARY KEY (ID);
ALTER TABLE INV_NACH_INI ADD CONSTRAINT PK_INV_NACH_INI_ID PRIMARY KEY (ID);
ALTER TABLE INV_OPIS ADD CONSTRAINT PK_INV_OPIS_ID PRIMARY KEY (ID);
ALTER TABLE IN_EL ADD CONSTRAINT PK_IN_EL_ID PRIMARY KEY (ID);
ALTER TABLE IN_EL2 ADD CONSTRAINT PK_IN_EL2_ID PRIMARY KEY (ID);
ALTER TABLE IN_EL_ANUL ADD CONSTRAINT PK_IN_EL_ANUL_ID PRIMARY KEY (ID);
ALTER TABLE IN_EL_EDIT ADD CONSTRAINT PK_IN_EL_EDIT_ID PRIMARY KEY (ID);
ALTER TABLE IN_EL_RAZ_NODE ADD CONSTRAINT PK_IN_EL_RAZ_NODE PRIMARY KEY (ID);
ALTER TABLE IN_TO_FAK_EL ADD CONSTRAINT PK_IN_TO_FAK_EL_ID PRIMARY KEY (ID);
ALTER TABLE IZL ADD CONSTRAINT PK_IZL_ID PRIMARY KEY (ID);
ALTER TABLE IZP ADD CONSTRAINT PK_IZP PRIMARY KEY (ID);
ALTER TABLE IZP_TIP ADD CONSTRAINT PK_IZP_TIP PRIMARY KEY (ID);
ALTER TABLE KASA ADD CONSTRAINT PK_KASA_ID PRIMARY KEY (ID);
ALTER TABLE KA_DEMONTAJ_DDS ADD CONSTRAINT PK_KA_DEMONTAJ_DDS PRIMARY KEY (ID);
ALTER TABLE KA_INFO ADD CONSTRAINT PK_KA_INFO_ID PRIMARY KEY (ID);
ALTER TABLE KA_LOG_NODE ADD CONSTRAINT PK_KA_LOG_NODE_ID PRIMARY KEY (ID);
ALTER TABLE KA_PROIZVODITEL ADD CONSTRAINT PK_KA_PROIZVODITEL_ID PRIMARY KEY (ID);
ALTER TABLE KA_SER_NUM ADD CONSTRAINT PK_KA_SER_NUM_ID PRIMARY KEY (ID);
ALTER TABLE KI_DOST_NODE ADD CONSTRAINT PK_KI_DOST_NODE_ID PRIMARY KEY (ID);
ALTER TABLE KI_DOST_SUMA ADD CONSTRAINT PK_KI_DOST_SUMA_ID PRIMARY KEY (ID);
ALTER TABLE KI_DOST_SUMA_EL ADD CONSTRAINT PK_KI_DOST_SUMA_EL_ID PRIMARY KEY (ID);
ALTER TABLE KI_DOST_SUMA_FAK ADD CONSTRAINT PK_KI_DOST_SUMA_FAK_ID PRIMARY KEY (ID);
ALTER TABLE KI_NODE ADD CONSTRAINT PK_KI_NODE_ID PRIMARY KEY (ID);
ALTER TABLE KI_PROD_SUMA_EL ADD CONSTRAINT PK_KI_PROD_SUMA_EL_ID PRIMARY KEY (ID);
ALTER TABLE KLI ADD CONSTRAINT PK_KLI_ID PRIMARY KEY (ID);
ALTER TABLE KLI_ABONAMENT ADD CONSTRAINT PK_KLI_ABONAMENT PRIMARY KEY (ID);
ALTER TABLE KLI_AGENTS ADD CONSTRAINT PK_KLI_AGENTS PRIMARY KEY (ID);
ALTER TABLE KLI_DIST_NODE ADD CONSTRAINT PK_KLI_DIST_NODE_ID PRIMARY KEY (ID);
ALTER TABLE KLI_DOST_NODE ADD PRIMARY KEY (ID);
ALTER TABLE KLI_EXTENDED_VARANTY ADD CONSTRAINT PK_KLI_EXTENDED_VARANTY_ID PRIMARY KEY (ID);
ALTER TABLE KLI_FIRMA_NODE ADD CONSTRAINT PK_KLI_FIRMA_NODE PRIMARY KEY (ID);
ALTER TABLE KLI_GROUP ADD CONSTRAINT PK_KLI_GROUP_ID PRIMARY KEY (ID);
ALTER TABLE KLI_KASA_MAIL_NODE ADD CONSTRAINT PK_KLI_KASA_MAIL_NODE_ID PRIMARY KEY (ID);
ALTER TABLE KLI_POCKET_NODE ADD CONSTRAINT PK_KLI_POCKET_NODE_ID PRIMARY KEY (ID);
ALTER TABLE KLI_PRAGOVE ADD CONSTRAINT PK_KLI_PRAGOVE PRIMARY KEY (ID);
ALTER TABLE KLI_SKLAD_NODE ADD CONSTRAINT PK_KLI_SKLAD_NODE PRIMARY KEY (ID);
ALTER TABLE KLI_TOCHKI_NODE ADD CONSTRAINT PK_KLI_TOCHKI_NODE PRIMARY KEY (ID);
ALTER TABLE KLI_USER_NODE ADD CONSTRAINT PK_KLI_USER_NODE_ID PRIMARY KEY (ID);
ALTER TABLE KONSIGNACIA ADD CONSTRAINT PK_KONSIGNACIA PRIMARY KEY (ID);
ALTER TABLE LAYOUTS ADD CONSTRAINT PK_LAYOUTS PRIMARY KEY (ID);
ALTER TABLE LICENCE_EL ADD CONSTRAINT PK_LICENCE_EL_ID PRIMARY KEY (ID);
ALTER TABLE LICENZ_PROD_NODE ADD CONSTRAINT PK_LICENZ_PROD_NODE_ID PRIMARY KEY (ID);
ALTER TABLE LOCK_OPR ADD CONSTRAINT PK_LOCK_OPR PRIMARY KEY (ID);
ALTER TABLE LOCK_OPR_EL ADD CONSTRAINT PK_LOCK_OPR_EL PRIMARY KEY (ID);
ALTER TABLE LOG_CENI_DDS ADD CONSTRAINT PK_LOG_CENI_DDS_ID PRIMARY KEY (ID);
ALTER TABLE ME ADD CONSTRAINT PK_ME_ID PRIMARY KEY (ID);
ALTER TABLE MESA ADD CONSTRAINT PK_MESA_ID PRIMARY KEY (ID);
ALTER TABLE MESA_TIP ADD CONSTRAINT PK_MESA_TIP_ID PRIMARY KEY (ID);
ALTER TABLE MESSAGES ADD CONSTRAINT PK_MESSAGES_ID PRIMARY KEY (ID);
ALTER TABLE METRO_ARTICLES ADD CONSTRAINT PK_METRO_ARTICLES PRIMARY KEY (ID);
ALTER TABLE METRO_EXPORT_OPR ADD CONSTRAINT PK_METRO_EXPORT_OPR PRIMARY KEY (ID);
ALTER TABLE METRO_INVOICE_DOCUMENTS ADD CONSTRAINT PK_METRO_INVOICE_DOCUMENTS PRIMARY KEY (ID);
ALTER TABLE MOVE ADD CONSTRAINT PK_MOVE_ID PRIMARY KEY (ID);
ALTER TABLE NAL ADD CONSTRAINT PK_NAL_ID PRIMARY KEY (ID);
ALTER TABLE NAL2 ADD CONSTRAINT PK_NAL2_ID PRIMARY KEY (ID);
ALTER TABLE NAL_F ADD CONSTRAINT PK_NAL_F_ID PRIMARY KEY (ID);
ALTER TABLE OBEKT ADD CONSTRAINT PK_OBEKT_ID PRIMARY KEY (ID);
ALTER TABLE OFERTA ADD CONSTRAINT PK_OFERTA PRIMARY KEY (ID);
ALTER TABLE OFERTA_EL ADD CONSTRAINT PK_OFERTA_EL PRIMARY KEY (ID);
ALTER TABLE OFFERS ADD CONSTRAINT PK_OFFERS_ID PRIMARY KEY (ID);
ALTER TABLE OFFER_EL ADD CONSTRAINT PK_OFFER_EL_ID PRIMARY KEY (ID);
ALTER TABLE OFFER_POR_NODE ADD CONSTRAINT PK_OFFER_POR_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OFFER_TERMS ADD CONSTRAINT PK_OFFER_TERMS_ID PRIMARY KEY (ID);
ALTER TABLE OFFER_USER_NODE ADD CONSTRAINT PK_OFFER_USER_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OFF_OBEKTI_LIST ADD CONSTRAINT PK_OFF_OBEKTI_LIST PRIMARY KEY (ID);
ALTER TABLE OLD_IN_EL ADD CONSTRAINT PK_OLD_IN_EL_ID PRIMARY KEY (ID);
ALTER TABLE OLD_OFFERS ADD CONSTRAINT PK_OLD_OFFERS_ID PRIMARY KEY (ID);
ALTER TABLE OLD_OFFER_EL ADD CONSTRAINT PK_OLD_OFFER_EL_ID PRIMARY KEY (ID);
ALTER TABLE OLD_OFFER_USER_NODE ADD CONSTRAINT PK_OLD_OFFER_USER_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OLD_OUT_EL ADD CONSTRAINT PK_OLD_OUT_EL_ID PRIMARY KEY (ID);
ALTER TABLE OLD_OUT_EL_PE_NODE ADD CONSTRAINT PK_OLD_OUT_EL_PE_ID PRIMARY KEY (ID);
ALTER TABLE OLD_PARI_EL ADD CONSTRAINT PK_OLD_PARI_EL_ID PRIMARY KEY (ID);
ALTER TABLE OLD_POR_EL_PARAMS ADD CONSTRAINT PK_OLD_POR_EL_PARAMS_ID PRIMARY KEY (ID);
ALTER TABLE OLD_POR_EL_PRICE_COEF ADD CONSTRAINT PK_OLD_POR_EL_PRICE_COEF_ID PRIMARY KEY (ID);
ALTER TABLE OLD_REQUEST_EL ADD CONSTRAINT PK_OLD_REQUEST_EL PRIMARY KEY (ID);
ALTER TABLE OLD_TASKS ADD CONSTRAINT PK_OLD_TASKS_ID PRIMARY KEY (ID);
ALTER TABLE ONLINE_ROLES ADD CONSTRAINT PK_ONLINE_USER_ROLES_ID PRIMARY KEY (ID);
ALTER TABLE ONLINE_USERS ADD CONSTRAINT PK_ONLINE_USERS_ID PRIMARY KEY (ID);
ALTER TABLE OPENED_FORMS_SYS ADD CONSTRAINT PK_OPENED_FORMS_SYS_ID PRIMARY KEY (ID);
ALTER TABLE OPR ADD CONSTRAINT PK_OPR_ID PRIMARY KEY (ID);
ALTER TABLE OPRGARANCIA ADD CONSTRAINT PK_OPRGARANCIA PRIMARY KEY (ID);
ALTER TABLE OPR_AMBALAJ_NODE ADD CONSTRAINT PK_OPR_AMBALAJ_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OPR_ANUL ADD CONSTRAINT PK_OPR_ANUL_ID PRIMARY KEY (ID);
ALTER TABLE OPR_EDIT ADD CONSTRAINT PK_OPR_EDIT_ID PRIMARY KEY (ID);
ALTER TABLE OPR_GARANCIA_NODE ADD CONSTRAINT PK_OPR_GARANCIA_NODE PRIMARY KEY (ID);
ALTER TABLE OPR_PADEJ ADD CONSTRAINT PK_OPR_PADEJ PRIMARY KEY (ID);
ALTER TABLE OPR_PAYMENT_NODE ADD CONSTRAINT PK_OPR_PAYMENT_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OPR_PRODUCTION_REQUEST ADD CONSTRAINT PK_OPR_PRODUCTION_REQUEST_ID PRIMARY KEY (ID);
ALTER TABLE OPR_RAZPAD_NODE ADD CONSTRAINT PK_OPR_RAZPAD_NODE PRIMARY KEY (ID);
ALTER TABLE OPR_RECEPIES ADD CONSTRAINT PK_OPR_RECEPIES_ID PRIMARY KEY (ID);
ALTER TABLE OPR_RECEPIES_EL ADD CONSTRAINT PK_OPR_RECEPIES_EL_ID PRIMARY KEY (ID);
ALTER TABLE OPR_REFUSED ADD CONSTRAINT PK_OPR_REFUSED PRIMARY KEY (ID);
ALTER TABLE OPR_REMOTE ADD CONSTRAINT PK_OPR_REMOTE_ID PRIMARY KEY (ID);
ALTER TABLE OPR_SUMI ADD CONSTRAINT PK_OPR_SUMI_ID PRIMARY KEY (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT PK_OPR_TEMPLATE_ID PRIMARY KEY (ID);
ALTER TABLE OPR_TEMPLATE_EL ADD CONSTRAINT PK_OPR_TEMPLATE_EL_ID PRIMARY KEY (ID);
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT PK_OPR_TEMPLATE_GEN_ID PRIMARY KEY (ID);
ALTER TABLE OPR_TEMPLATE_TASK_NODE ADD CONSTRAINT PK_OPR_TEMPLATE_TASK_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OPR_TIP ADD CONSTRAINT PK_OPR_TIP_ID PRIMARY KEY (ID);
ALTER TABLE OPR_WAITING_NODE ADD CONSTRAINT PK_OPR_WAITING_NODE_ID PRIMARY KEY (ID);
ALTER TABLE ORDER_ACTIONS ADD CONSTRAINT PK_ORDER_ACTIONS_ID PRIMARY KEY (ID);
ALTER TABLE OTC ADD CONSTRAINT PK_OTC_ID PRIMARY KEY (ID);
ALTER TABLE OTCS_OPR_NODE ADD CONSTRAINT PK_OTCS_OPR_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OTC_EL ADD CONSTRAINT PK_OTC_EL PRIMARY KEY (ID);
ALTER TABLE OTC_EL_EDIT ADD CONSTRAINT PK_OTC_EL_EDIT_ID PRIMARY KEY (ID);
ALTER TABLE OTC_PER ADD CONSTRAINT PK_OTC_PER_ID PRIMARY KEY (ID);
ALTER TABLE OUT ADD CONSTRAINT PK_OUT_ID PRIMARY KEY (ID);
ALTER TABLE OUT_EL ADD CONSTRAINT PK_OUT_EL_ID PRIMARY KEY (ID);
ALTER TABLE OUT_EL2 ADD CONSTRAINT PK_OUT_EL2_ID PRIMARY KEY (ID);
ALTER TABLE OUT_EL_ANUL ADD CONSTRAINT PK_OUT_EL_ANUL_ID PRIMARY KEY (ID);
ALTER TABLE OUT_EL_EDIT ADD CONSTRAINT PK_OUT_EL_EDIT_ID PRIMARY KEY (ID);
ALTER TABLE OUT_EL_FAK_OUT_EL ADD CONSTRAINT PK_OUT_EL_FAK_OUT_EL_ID PRIMARY KEY (ID);
ALTER TABLE OUT_EL_RAZ_NODE ADD CONSTRAINT PK_OUT_EL_RAZ_NODE_ID PRIMARY KEY (ID);
ALTER TABLE OWNER ADD CONSTRAINT PK_OWNER_ID PRIMARY KEY (ID);
ALTER TABLE OWNER_BANKI ADD CONSTRAINT PK_OWNER_BANKI PRIMARY KEY (ID);
ALTER TABLE PARI ADD CONSTRAINT PK_PARI_ID PRIMARY KEY (ID);
ALTER TABLE PARI_CRYPT ADD CONSTRAINT PK_PARI_CRYPT_ID PRIMARY KEY (ID);
ALTER TABLE PARI_DIST ADD CONSTRAINT PK_PARI_DIST_ID PRIMARY KEY (ID);
ALTER TABLE PARI_EL_ANUL ADD CONSTRAINT PK_PARI_EL_ANUL_ID PRIMARY KEY (ID);
ALTER TABLE PARI_EL_EDIT ADD CONSTRAINT PK_PARI_EL_EDIT_ID PRIMARY KEY (ID);
ALTER TABLE PARI_FAKINUSLUGA_NODE ADD CONSTRAINT PK_PARI_FAKINUSLUGA_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PARI_FAK_NODE ADD CONSTRAINT PK_PARI_FAK_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PARI_IO ADD CONSTRAINT PK_PARI_IO_ID PRIMARY KEY (ID);
ALTER TABLE PARI_NODE ADD CONSTRAINT PK_PARI_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PARI_SKLOPR_NODE ADD CONSTRAINT PK_PARI_SKLOPR_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PARI_TMP ADD CONSTRAINT PK_PARI_TMP_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_EL ADD CONSTRAINT PK_PARTIDA_EL_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_EL_NODE ADD CONSTRAINT PK_PARTIDA_EL_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_EL_PRINT ADD CONSTRAINT PK_PARTIDA_EL_PRINT_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_IN_EL_NODE ADD CONSTRAINT PK_PARTIDA_IN_EL_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_IZL_NODE ADD CONSTRAINT PK_PARTIDA_IZL_NODE PRIMARY KEY (ID);
ALTER TABLE PARTIDA_NAL ADD CONSTRAINT PK_PARTIDA_NAL_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_OUT_EL_NODE ADD CONSTRAINT PK_PARTIDA_OUT_EL_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_PROP_NODE ADD CONSTRAINT PK_PARTIDA_PROP_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PARTIDA_RETURN_NODE ADD CONSTRAINT PK_PARTIDA_RETURN_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PATHS ADD CONSTRAINT PK_PATHS PRIMARY KEY (ID);
ALTER TABLE PAYMENT ADD CONSTRAINT PK_PAYMENT_ID PRIMARY KEY (ID);
ALTER TABLE PAYMENTS_EL ADD CONSTRAINT PK_PAYMENTS_EL_ID PRIMARY KEY (ID);
ALTER TABLE PAYMENT_AVANSOVO ADD CONSTRAINT PK_PAYMENT_AVANSOVO_ID PRIMARY KEY (ID);
ALTER TABLE PAYMENT_NODE ADD CONSTRAINT PK_PAYMENT_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PAYMENT_NOW ADD CONSTRAINT PK_PAYMENT_NOW_ID PRIMARY KEY (ID);
ALTER TABLE PAY_NOCASH_NODE ADD CONSTRAINT PK_PAY_NOCASH_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PLACE ADD CONSTRAINT PK_PLACE_ID PRIMARY KEY (ID);
ALTER TABLE PL_DELIVERY_STORAGE_EDIT ADD CONSTRAINT PK_PL_DELIVERY_STORAGE_EDIT PRIMARY KEY (ID);
ALTER TABLE POCKET_OTC ADD CONSTRAINT PK_POCKET_OTC PRIMARY KEY (ID);
ALTER TABLE POCKET_SHOP ADD CONSTRAINT PK_POCKET_SHOP_ID PRIMARY KEY (ID);
ALTER TABLE POR ADD CONSTRAINT PK_POR_ID PRIMARY KEY (ID);
ALTER TABLE POR_DOST_KOL_RZV ADD CONSTRAINT PK_POR_DOST_KOL_RZV PRIMARY KEY (ID);
ALTER TABLE POR_EDIT ADD CONSTRAINT PK_POR_EDIT_ID PRIMARY KEY (ID);
ALTER TABLE POR_EL ADD CONSTRAINT PK_POR_EL_ID PRIMARY KEY (ID);
ALTER TABLE POR_EL_EDIT ADD CONSTRAINT PK_POR_EL_EDIT PRIMARY KEY (ID);
ALTER TABLE POR_EL_EXPLANATORY ADD CONSTRAINT PK_POR_EL_EXPLANATORY PRIMARY KEY (ID);
ALTER TABLE POR_EL_PICTURES_NODE ADD CONSTRAINT PK_POR_EL_PICTURES_NODE_ID PRIMARY KEY (ID);
ALTER TABLE POR_EL_PRICE_COEFICIENT ADD CONSTRAINT PK_POR_EL_PRICE_COEFICIENT_ID PRIMARY KEY (ID);
ALTER TABLE POR_EL_PRODUCTION ADD CONSTRAINT PK_POR_EL_PRODUCTION PRIMARY KEY (ID);
ALTER TABLE POR_EL_RAZ_NODE ADD CONSTRAINT PK_POR_EL_RAZ_NODE PRIMARY KEY (ID);
ALTER TABLE POR_EL_REQUEST_NODE ADD CONSTRAINT PK_POR_EL_REQUEST_NODE_ID PRIMARY KEY (ID);
ALTER TABLE POR_FAK_PROD_NODE ADD CONSTRAINT PK_POR_FAK_PROD_NODE_ID PRIMARY KEY (ID);
ALTER TABLE POR_FORMULA_PARAMS ADD CONSTRAINT PK_POR_FORMULA_PARAMS PRIMARY KEY (ID);
ALTER TABLE POR_OFFER_TERMS_NODE ADD CONSTRAINT PK_POR_OFFER_TERMS_NODE_ID PRIMARY KEY (ID);
ALTER TABLE POR_OUT_NODE ADD CONSTRAINT PK_POR_OUT_NODE_ID PRIMARY KEY (ID);
ALTER TABLE POR_PRODUCTION_REQUEST_NODE ADD CONSTRAINT PK_POR_PRODUCTION_REQUEST_NODE PRIMARY KEY (ID);
ALTER TABLE POR_PROP_NODE ADD CONSTRAINT PK_POR_PROP_NODE PRIMARY KEY (ID);
ALTER TABLE POR_RAZ_EDIT ADD CONSTRAINT PK_POR_RAZ_EDIT PRIMARY KEY (ID);
ALTER TABLE POR_ZD_NODE ADD CONSTRAINT PK_POR_ZD_NODE PRIMARY KEY (ID);
ALTER TABLE POS_TO_SRV ADD CONSTRAINT PK_POS_TO_SRV_ID PRIMARY KEY (ID);
ALTER TABLE POTV ADD PRIMARY KEY (ID);
ALTER TABLE POTV_EL ADD CONSTRAINT PK_POTV_EL PRIMARY KEY (ID);
ALTER TABLE POTV_MOVE_EL ADD CONSTRAINT PK_POTV_MOVE_EL_ID PRIMARY KEY (ID);
ALTER TABLE PRICE_LIST_DELIVERY_STORAGES ADD CONSTRAINT PK_PRICE_LIST_DELIVERY_STORAGES PRIMARY KEY (ID);
ALTER TABLE PRODUCTION ADD CONSTRAINT PK_PRODUCTION_ID PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_EXPLANATORY ADD CONSTRAINT PK_PRODUCTION_EXPLANATORY PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_GRUPI ADD CONSTRAINT PK_PRODUCTION_GRUPI_ID PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_IN_EL_PARAMS ADD CONSTRAINT PK_PRODUCTION_IN_EL_PARAMS PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_KAPARO_NODE ADD CONSTRAINT PK_PRODUCTION_KAPARO_NODE PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_MONTAJISTI ADD CONSTRAINT PK_PRODUCTION_MONTAJISTI_ID PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_REQUEST_EL ADD CONSTRAINT PK_PRODUCTION_REQUEST_EL PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_ZARABOTKA ADD CONSTRAINT PK_PRODUCTION_ZARABOTKA_ID PRIMARY KEY (ID);
ALTER TABLE PRODUCTION_ZARABOTKA_IZPLATENO ADD CONSTRAINT PK_PRODUCTION_ZARABOTKA_IZPL_ID PRIMARY KEY (ID);
ALTER TABLE PRODUCT_WAREHOUSE_MAP_NODE ADD CONSTRAINT PK_PRODUCT_WAREHOUSE_MAP_NODE_I PRIMARY KEY (ID);
ALTER TABLE PROD_AVANS ADD CONSTRAINT PK_PROD_AVANS_ID PRIMARY KEY (ID);
ALTER TABLE PROD_CENI_EL ADD CONSTRAINT PK_PROD_CENI_EL_ID PRIMARY KEY (ID);
ALTER TABLE PROD_NODE ADD CONSTRAINT PK_PROD_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PROD_PRODUCTION ADD CONSTRAINT PK_PROD_PRODUCTION PRIMARY KEY (ID);
ALTER TABLE PROD_REQUEST_PRODUCTION_NODE ADD CONSTRAINT PK_PROD_REQUEST_PRODUCTION_NODE PRIMARY KEY (ID);
ALTER TABLE PROD_STOCK ADD CONSTRAINT PK_PROD_STOCK PRIMARY KEY (ID);
ALTER TABLE PROD_STOCK_EL ADD CONSTRAINT PK_PROD_STOCK_EL PRIMARY KEY (ID);
ALTER TABLE PROD_VAUCHER ADD CONSTRAINT PK_PROD_VAUCHER PRIMARY KEY (ID);
ALTER TABLE PROFORMA_TO_FAK ADD CONSTRAINT PK_PROFORMA_TO_FAK_ID PRIMARY KEY (ID);
ALTER TABLE PROP_NODE ADD CONSTRAINT PK_PROP_NODE_ID PRIMARY KEY (ID);
ALTER TABLE PR_REQUEST_EXPLANATORY ADD CONSTRAINT PK_PR_EXPLANATORY PRIMARY KEY (ID);
ALTER TABLE PR_REQUEST_FORMULA_PARAMS ADD CONSTRAINT PK_PREP_PR_FORMULA_PARAMS PRIMARY KEY (ID);
ALTER TABLE PR_REQ_EL_PRICE_COEFICIENT ADD CONSTRAINT PK_PR_REQ_EL_PRICE_COEF_ID PRIMARY KEY (ID);
ALTER TABLE RAZFASOVKA ADD CONSTRAINT PK_RAZFASOVKA PRIMARY KEY (ID);
ALTER TABLE RAZPAD ADD CONSTRAINT PK_RAZPAD_ID PRIMARY KEY (ID);
ALTER TABLE RAZ_ELEMENT ADD CONSTRAINT PK_RAZ_ELEMENT PRIMARY KEY (ID);
ALTER TABLE RAZ_TIP ADD CONSTRAINT PK_RAZ_TIP PRIMARY KEY (ID);
ALTER TABLE RDB$PARTIDA_NAL ADD CONSTRAINT PK_RDB_PARTIDA_NAL_ID PRIMARY KEY (ID);
ALTER TABLE REAL_IZP_FAKT_IZP_NODE ADD CONSTRAINT PK_REAL_IZP_FAKT_IZP_NODE_ID PRIMARY KEY (ID);
ALTER TABLE REQUEST_PRODUCTION_NODE ADD CONSTRAINT PK_REQUEST_PRODUCTION_NODE PRIMARY KEY (ID);
ALTER TABLE RET_DOST_KI_DOST_NODE ADD CONSTRAINT PK_RET_KI_DOST_NODE_ID PRIMARY KEY (ID);
ALTER TABLE RET_DOST_MOVE_NODE ADD CONSTRAINT PK_RET_DOST_MOVE_ID PRIMARY KEY (ID);
ALTER TABLE RET_PROD_RET_FAK_PROD_KI_NODE ADD CONSTRAINT PK_RET_PROD_RET_FAK_PROD_KI_ID PRIMARY KEY (ID);
ALTER TABLE RET_STOKA_DOST ADD CONSTRAINT PK_RET_STOKA_DOST_ID PRIMARY KEY (ID);
ALTER TABLE RET_STOKA_DOST_KI ADD CONSTRAINT PK_RET_STOKA_DOST_KI_ID PRIMARY KEY (ID);
ALTER TABLE RET_STOKA_PROD ADD CONSTRAINT PK_RET_STOKA_PROD_ID PRIMARY KEY (ID);
ALTER TABLE RET_STOKA_PROD_KI ADD CONSTRAINT PK_RET_STOKA_PROD_KI_ID PRIMARY KEY (ID);
ALTER TABLE ROUND_TIP ADD CONSTRAINT PK_ROUND_TIP PRIMARY KEY (ID);
ALTER TABLE SASTAV ADD CONSTRAINT PK_SASTAV PRIMARY KEY (ID);
ALTER TABLE SELEKCIQ ADD CONSTRAINT PK_SELEKCIQ_ID PRIMARY KEY (ID);
ALTER TABLE SELEKCIQ_KALK_EL ADD CONSTRAINT PK_SELEKCIQ_KALK_EL PRIMARY KEY (ID);
ALTER TABLE SELEKCIQ_KASA_EL ADD CONSTRAINT PK_SELEKCIQ_KASA_EL_ID PRIMARY KEY (ID);
ALTER TABLE SELEKCIQ_KLI_EL ADD CONSTRAINT PK_SELEKCIQ_KLI_EL_ID PRIMARY KEY (ID);
ALTER TABLE SELEKCIQ_SIM_EL ADD CONSTRAINT PK_SELEKCIQ_SIM_EL PRIMARY KEY (ID);
ALTER TABLE SEL_OPRS ADD CONSTRAINT PK_SEL_OPRS PRIMARY KEY (ID);
ALTER TABLE SERIAL_NUM ADD CONSTRAINT PK_SERIAL_NUM_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT PK_SIMPLE_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_ACZIS ADD CONSTRAINT PK_SIMPLE_ACZIS_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_ADRESIRANE ADD CONSTRAINT PK_SIMPLE_ADRESIRANE_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_ADRESIRANE_GRUPA ADD CONSTRAINT PK_SIMPLE_ADRESIRANE_GRUPA PRIMARY KEY (ID);
ALTER TABLE SIMPLE_ADRESIRANE_NODE ADD CONSTRAINT PK_SIMPLE_ADRESIRANE_NODE_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_CALC ADD CONSTRAINT PK_SIMPLE_CALC_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_CALC_OLD ADD CONSTRAINT PK_SIMPLE_CALC_OLD_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_CENI ADD CONSTRAINT PK_SIMPLE_CENI_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_EXPLANATORY ADD CONSTRAINT PK_SIMPLE_EXPLANATORY PRIMARY KEY (ID);
ALTER TABLE SIMPLE_GROUP ADD CONSTRAINT PK_SIMPLE_GROUP_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_KA_BIM ADD CONSTRAINT PK_SIMPLE_KA_BIM_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_KOD ADD CONSTRAINT PK_SIMPLE_KOD PRIMARY KEY (ID);
ALTER TABLE SIMPLE_MONTAGE ADD CONSTRAINT PK_SIMPLE_MONTAGE PRIMARY KEY (ID);
ALTER TABLE SIMPLE_OBSERV ADD CONSTRAINT PK_SIMPLE_OBSERV_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_PICT ADD CONSTRAINT PK_SIMPLE_PICT_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_PROP ADD CONSTRAINT PK_SIMPLE_PROP_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_PROP_MINOR ADD CONSTRAINT PK_SIMPLE_PROP_MINOR_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_PROP_NODE ADD CONSTRAINT PK_SIMPLE_PROP_NODE_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_RAZ ADD CONSTRAINT PK_SIMPLE_RAZ_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_SKLAD_KOD ADD CONSTRAINT PK_SIMPLE_SKLAD_KOD PRIMARY KEY (ID);
ALTER TABLE SIMPLE_TABLE_PRICES ADD CONSTRAINT PK_SIMPLE_TABLE_PRICES_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_TRACKER ADD CONSTRAINT PK_SIMPLE_TRACKER_ID PRIMARY KEY (ID);
ALTER TABLE SIMPLE_ZAETOST ADD CONSTRAINT PK_SIMPLE_ZAETOST_ID PRIMARY KEY (ID);
ALTER TABLE SKLAD ADD CONSTRAINT PK_SKLAD_ID PRIMARY KEY (ID);
ALTER TABLE SKLAD_MOL ADD CONSTRAINT PK_SKLAD_MOL PRIMARY KEY (ID);
ALTER TABLE SKLAD_SELEKCIQ_NODE ADD CONSTRAINT PK_SKLAD_SELEKCIQ_NODE PRIMARY KEY (ID);
ALTER TABLE SLEDI_KLI ADD CONSTRAINT PK_SLEDI_KLI PRIMARY KEY (ID);
ALTER TABLE SLEDI_LICENZ ADD CONSTRAINT PK_SLEDI_LICENZ PRIMARY KEY (ID);
ALTER TABLE SLEDI_ROUMING_LOG ADD CONSTRAINT PK_SLEDI_ROUMING_LOG PRIMARY KEY (ID);
ALTER TABLE SLEDI_SIMPLE ADD CONSTRAINT PK_SLEDI_SIMPLE PRIMARY KEY (ID);
ALTER TABLE SLEDI_TEMPLATE_EL ADD CONSTRAINT PK_SLEDI_TEMPLATE_EL PRIMARY KEY (ID);
ALTER TABLE SLEDI_TEMPLATE_EL_GEN ADD CONSTRAINT PK_SLEDI_TEMPLATE_EL_GEN_ID PRIMARY KEY (ID);
ALTER TABLE STORE_OBJ ADD CONSTRAINT PK_STORE_OBJ_ID PRIMARY KEY (ID);
ALTER TABLE STORE_OTC ADD CONSTRAINT PK_STORE_OTC_ID PRIMARY KEY (ID);
ALTER TABLE STORNO_REASON ADD CONSTRAINT PK_STORNO_REASON_ID PRIMARY KEY (ID);
ALTER TABLE SUMI ADD CONSTRAINT PK_SUMI_ID PRIMARY KEY (ID);
ALTER TABLE SYNC_ADVANCE_PAYMENT ADD CONSTRAINT PK_SYNC_ADVANCE_PAYMENT_ID PRIMARY KEY (ID);
ALTER TABLE SYSTEM2 ADD CONSTRAINT PK_SYSTEM_ID PRIMARY KEY (ID);
ALTER TABLE TABLE_PRICES_DISCOUNTS ADD CONSTRAINT PK_TABLE_PRICES_DISCOUNTS_ID PRIMARY KEY (ID);
ALTER TABLE TABLE_PRICE_COEFICIENT ADD CONSTRAINT PK_TABLE_PRICE_COEFICIENT_ID PRIMARY KEY (ID);
ALTER TABLE TABLE_PRICE_SIMPLE_NODE ADD CONSTRAINT PK_TABLE_PRICE_SIMPLE_NODE_ID PRIMARY KEY (ID);
ALTER TABLE TASKS ADD CONSTRAINT PK_TASKS PRIMARY KEY (ID);
ALTER TABLE TASKS_EL ADD CONSTRAINT PK_TASKS_EL PRIMARY KEY (ID);
ALTER TABLE TASKS_TIP ADD CONSTRAINT PK_TASKS_TIP PRIMARY KEY (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT PK_TBL_KA_ID PRIMARY KEY (ID);
ALTER TABLE TBL_KA_OPR_LOG ADD CONSTRAINT PK_TBL_KA_OPR_LOG_ID PRIMARY KEY (ID);
ALTER TABLE TBL_KA_OPR_NODE ADD CONSTRAINT PK_TBL_KA_OPR_NODE_ID PRIMARY KEY (ID);
ALTER TABLE TBL_KA_REGNOM_NODE ADD CONSTRAINT PK_TBL_KA_REGNOM_NODE_ID PRIMARY KEY (ID);
ALTER TABLE TBL_KA_STOP_SIM_NODE ADD CONSTRAINT PK_TBL_KA_STOP_SIM_NODE PRIMARY KEY (ID);
ALTER TABLE TBL_LOG ADD CONSTRAINT PK_TBL_LOG PRIMARY KEY (ID);
ALTER TABLE TEMP_IMPORT ADD CONSTRAINT PK_TEMP_IMPORT_ID PRIMARY KEY (ID);
ALTER TABLE TIP_REFUSED ADD CONSTRAINT PK_TIP_REFUSED PRIMARY KEY (ID);
ALTER TABLE TIP_RESOLUTION ADD CONSTRAINT PK_TIP_RESOLUTION_ID PRIMARY KEY (ID);
ALTER TABLE TMP_LAST_CENA ADD CONSTRAINT PK_TMP_LAST_CENA PRIMARY KEY (SIMPLE_ID);
ALTER TABLE TMP_MARK_EL ADD CONSTRAINT TMP_MARK_EL_ID PRIMARY KEY (ID);
ALTER TABLE TMP_OPR ADD CONSTRAINT TMP_OPR_ID PRIMARY KEY (ID);
ALTER TABLE TMP_OPR_SN ADD CONSTRAINT TMP_OPR_SN_ID PRIMARY KEY (ID);
ALTER TABLE TMP_SIMPLE_SEL_PROD1 ADD CONSTRAINT PK_TMP_SIMPLE_SEL_PROD1 PRIMARY KEY (ID);
ALTER TABLE TS_OTC_FILES ADD CONSTRAINT PK_TS_OTC_FILES_ID PRIMARY KEY (ID);
ALTER TABLE UNFINISHED_SALES ADD CONSTRAINT PK_UNFINISHED_SALES_ID PRIMARY KEY (ID);
ALTER TABLE UNP ADD CONSTRAINT PK_UNP_ID PRIMARY KEY (ID);
ALTER TABLE UNR_AGENT ADD CONSTRAINT PK_UNR_AGENT PRIMARY KEY (ID);
ALTER TABLE UNR_AGENT_ANALYSES ADD CONSTRAINT PK_UNR_AGENT_ANALYSES_ID PRIMARY KEY (ID);
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT PK_UNR_ANALYSES PRIMARY KEY (ID);
ALTER TABLE UNR_GROUP ADD CONSTRAINT PK_UNR_GROUP_ID PRIMARY KEY (ID)
USING INDEX PK_UNR_GROUP;
ALTER TABLE UNR_GROUP_SIMPLE ADD CONSTRAINT PK_UNR_GROUP_SIMPLE_ID PRIMARY KEY (ID);
ALTER TABLE UNR_KLI_AGENT ADD CONSTRAINT PK_UNR_KLI_AGENT PRIMARY KEY (ID);
ALTER TABLE UNR_KLI_AGENT_2 ADD CONSTRAINT PK_UNR_KLI_AGENT_2 PRIMARY KEY (ID);
ALTER TABLE UNR_KOEF_NODE ADD CONSTRAINT PK_UNR_KOEF_NODE PRIMARY KEY (ID);
ALTER TABLE "USER" ADD CONSTRAINT PK_USER_ID PRIMARY KEY (ID);
ALTER TABLE USER_KASA_NODE ADD CONSTRAINT PK_USER_KASA_NODE_ID PRIMARY KEY (ID);
ALTER TABLE USER_OBEKT_NODE ADD CONSTRAINT PK_USER_OBEKT_NODE_ID PRIMARY KEY (ID);
ALTER TABLE USER_ROLES_EL ADD CONSTRAINT PK_USER_ROLES_EL_ID PRIMARY KEY (ID);
ALTER TABLE USER_SCHEMAS ADD CONSTRAINT PK_USER_SCHEMAS_ID PRIMARY KEY (ID);
ALTER TABLE USER_SEL_NODE ADD CONSTRAINT PK_USER_SEL_NODE PRIMARY KEY (ID);
ALTER TABLE USER_SKLAD_NAL_NODE ADD CONSTRAINT PK_USER_SKLAD_NAL_NODE_ID PRIMARY KEY (ID);
ALTER TABLE USER_SKLAD_NODE ADD CONSTRAINT PK_USER_SKLAD_NODE_ID PRIMARY KEY (ID);
ALTER TABLE VALUTA ADD CONSTRAINT PK_VALUTA_ID PRIMARY KEY (ID);
ALTER TABLE VISIT ADD CONSTRAINT PK_VISIT_ID PRIMARY KEY (ID);
ALTER TABLE VISIT_EL ADD CONSTRAINT PK_VISIT_EL_ID PRIMARY KEY (ID);
ALTER TABLE VISIT_TYPE ADD CONSTRAINT PK_VISIT_TYPE_ID PRIMARY KEY (ID);
ALTER TABLE WAREHOUSE_BASE_MAP ADD CONSTRAINT PK_WAREHOUSE_BASE_MAP_ID PRIMARY KEY (ID);
ALTER TABLE WHOKNA_CONNECTION ADD CONSTRAINT PK_WHOKNA_CONNECTION_ID PRIMARY KEY (ID);
ALTER TABLE WUERTH_COMMIS ADD CONSTRAINT PK_WUERTH_COMMIS PRIMARY KEY (ID);
ALTER TABLE WUERTH_SIMPLE ADD CONSTRAINT PK_WUERTH_SIMPLE_ID PRIMARY KEY (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA ADD CONSTRAINT PK_ZAIAVKA_DOSTAVKA PRIMARY KEY (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA_NODE ADD CONSTRAINT PK_ZAIAVKA_DOSTAVKA_NODE PRIMARY KEY (ID);
ALTER TABLE ZD_DOST_MOVE_NODE ADD CONSTRAINT PK_ZD_DOST_MOVE_NODE PRIMARY KEY (ID);
ALTER TABLE ZD_POR_NODE ADD CONSTRAINT PK_ZD_POR_NODE PRIMARY KEY (ID);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE ACTIVE_USERS ADD CONSTRAINT FK_ACTIVE_USERS_USERS FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE ADDRESSES ADD CONSTRAINT FK_ADDRESSES_PLACE_ID FOREIGN KEY (PLACE_ID) REFERENCES PLACE (ID) ON UPDATE CASCADE;
ALTER TABLE AMBALAJ ADD CONSTRAINT FK_AMBALAJ_KLI FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE AMBALAJ ADD CONSTRAINT FK_AMBALAJ_SIMPLE FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE AMBALAJ_HISTORY ADD CONSTRAINT FK_AMABALAJ_HISTORY_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE AMBALAJ_HISTORY ADD CONSTRAINT FK_AMABALAJ_HISTORY_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE AMBALAJ_HISTORY_EDIT ADD CONSTRAINT FK_AMBALAJ_HISTORY_EDIT_EDIT_ID FOREIGN KEY (EDIT_ID) REFERENCES OPR_EDIT (ID);
ALTER TABLE AMBALAJ_HISTORY_EDIT ADD CONSTRAINT FK_AMBALAJ_HISTORY_EDIT_SIMPLE_ FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE ANALYSES ADD CONSTRAINT FK_ANALYSES_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE ANALYSES ADD CONSTRAINT FK_ANALYSES_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID);
ALTER TABLE BARCODE ADD CONSTRAINT FK_BARCODE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE BH_PROD_POR ADD CONSTRAINT FK_BH_PROD_POR_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE BONUSI_ZA_RAZCHET ADD CONSTRAINT FK_BZR_KI_OPR_ID FOREIGN KEY (KI_OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE BONUS_CENA_TOCHKI ADD CONSTRAINT FK_BONUS_CENA_TOCHKI_BTC_ID FOREIGN KEY (BONUS_C_T_ID) REFERENCES BONUS_CENA_TOCHKI (ID);
ALTER TABLE BONUS_CENA_TOCHKI ADD CONSTRAINT FK_BONUS_CENA_TOCHKI_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE BONUS_CENA_TOCHKI ADD CONSTRAINT FK_BONUS_CENA_TOCHKI_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE BONUS_CONFIG ADD CONSTRAINT FK_BONUS_CONFIG_ID_BONUS FOREIGN KEY (ID_BONUS) REFERENCES BONUS_CONFIG (ID);
ALTER TABLE BONUS_CONFIG ADD CONSTRAINT FK_BONUS_CONFIG_SIMPLE_SEL_ID FOREIGN KEY (SIMPLE_SEL_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE BONUS_CONFIG ADD CONSTRAINT FK_BONUS_CONFIG_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE BONUS_CONFIG ADD CONSTRAINT FK_BONUS_CONFIG_SIM_ID_BONUS FOREIGN KEY (SIMPLE_ID_BONUS) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE BONUS_CONFIG ADD CONSTRAINT FK_BONUS_CONFIG_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE BONUS_CONFIG_KLI ADD CONSTRAINT FK_BONUS_CONFIG_KLI_BONUS_ID FOREIGN KEY (BONUS_ID) REFERENCES BONUS_CONFIG (ID);
ALTER TABLE BONUS_CONFIG_KLI ADD CONSTRAINT FK_BONUS_CONFIG_KLI_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE BONUS_CONFIG_SKLAD ADD CONSTRAINT FK_BONUS_CONFIG_SKLAD_BONUS_ID FOREIGN KEY (BONUS_ID) REFERENCES BONUS_CONFIG (ID) ON DELETE CASCADE;
ALTER TABLE BONUS_CONFIG_SKLAD ADD CONSTRAINT FK_BONUS_CONFIG_SKLAD_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID) ON DELETE CASCADE;
ALTER TABLE BONUS_KLI_USED ADD CONSTRAINT FK_BONUS_KLI_USED_BONUS_ID FOREIGN KEY (BONUS_ID) REFERENCES BONUS_CONFIG (ID);
ALTER TABLE BONUS_KLI_USED ADD CONSTRAINT FK_BONUS_KLI_USED_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE BONUS_RAZCHET_NODE ADD CONSTRAINT FK_BONUS_RAZCHET_NODE_IN_ID FOREIGN KEY (IN_ID) REFERENCES BONUSI_ZA_RAZCHET (ID) ON DELETE CASCADE;
ALTER TABLE BONUS_RAZCHET_NODE ADD CONSTRAINT FK_BONUS_RAZCHET_NODE_OUT_ID FOREIGN KEY (OUT_ID) REFERENCES BONUSI_ZA_RAZCHET (ID) ON DELETE CASCADE;
ALTER TABLE BROENE ADD CONSTRAINT FK_BROENE_KLI FOREIGN KEY (DISTRID) REFERENCES KLI (ID);
ALTER TABLE BROENE ADD CONSTRAINT FK_BROENE_KLI_AGENTS FOREIGN KEY (AGENTDID) REFERENCES KLI_AGENTS (ID);
ALTER TABLE BROENE ADD CONSTRAINT FK_BROENE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE BROENE_EL ADD CONSTRAINT FK_BROENE_EL_BROENE_ID FOREIGN KEY (BROENE_ID) REFERENCES BROENE (ID);
ALTER TABLE BROENE_EL ADD CONSTRAINT FK_BROENE_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE BROENE_EL_DETAILS ADD CONSTRAINT FK_BROENE_EL_DETAILS_EL_ID FOREIGN KEY (BROENE_EL_ID) REFERENCES BROENE_EL (ID) ON DELETE CASCADE;
ALTER TABLE BROENE_EL_RAZ_NODE ADD CONSTRAINT FK_BROENE_EL_RAZ_NODE_BROENE_EL FOREIGN KEY (BROENE_EL_ID) REFERENCES BROENE_EL (ID);
ALTER TABLE BROENE_EL_RAZ_NODE ADD CONSTRAINT FK_BROENE_EL_RAZ_NODE_RAZ_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE CENOVA_LISTA ADD CONSTRAINT FK_CENOVA_LISTA_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE CENOVA_LISTA_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_EDIT_OPR_EDIT FOREIGN KEY (OPR_EDIT_ID) REFERENCES OPR_EDIT (ID);
ALTER TABLE CENOVA_LISTA_EL ADD CONSTRAINT FK_CENOVA_LISTA_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE CENOVA_LISTA_EL ADD CONSTRAINT FK_CENOVA_LISTA_EL_OT_OPR_ID FOREIGN KEY (OT_OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE CENOVA_LISTA_EL ADD CONSTRAINT FK_CENOVA_LISTA_EL_ROUND_TIP_ID FOREIGN KEY (ROUND_TIP_ID) REFERENCES ROUND_TIP (ID);
ALTER TABLE CENOVA_LISTA_EL ADD CONSTRAINT FK_CENOVA_LISTA_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE CENOVA_LISTA_EL ADD CONSTRAINT FK_CENOVA_LISTA_EL_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE CENOVA_LISTA_EL_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_EL_EDIT_OPR_EDI FOREIGN KEY (OPR_EDIT_ID) REFERENCES OPR_EDIT (ID);
ALTER TABLE CENOVA_LISTA_EL_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_EL_EDIT_OT_OPR_ FOREIGN KEY (OT_OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE CENOVA_LISTA_EL_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_EL_EDIT_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE CENOVA_LISTA_HISTORY ADD CONSTRAINT FK_CENOVA_LISTA_HISTORY_CL_OPR FOREIGN KEY (CL_EL_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE CENOVA_LISTA_HISTORY ADD CONSTRAINT FK_CENOVA_LISTA_HISTORY_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE CENOVA_LISTA_HISTORY ADD CONSTRAINT FK_CENOVA_LISTA_HISTORY_OPR_ID_ FOREIGN KEY (OPR_ID_E) REFERENCES OPR (ID);
ALTER TABLE CENOVA_LISTA_HISTORY ADD CONSTRAINT FK_CENOVA_LISTA_HISTORY_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE CENOVA_LISTA_HISTORY ADD CONSTRAINT FK_CENOVA_LISTA_HISTORY_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE CENOVA_LISTA_KLI ADD CONSTRAINT FK_CENOVA_LISTA_KLI_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE CENOVA_LISTA_KLI ADD CONSTRAINT FK_CENOVA_LISTA_KLI_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE CENOVA_LISTA_KLI_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_KLI_EDIT_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE CENOVA_LISTA_KLI_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_KLI_EDIT_OPR_ED FOREIGN KEY (OPR_EDIT_ID) REFERENCES OPR_EDIT (ID);
ALTER TABLE CENOVA_LISTA_PROTOKOL ADD CONSTRAINT FK_CENOVA_LISTA_PROTOKOL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE CENOVA_LISTA_PROTOKOL ADD CONSTRAINT FK_CENOVA_LISTA_PROTOKOL_OTC_ID FOREIGN KEY (OTC_ID) REFERENCES OTC (ID);
ALTER TABLE CENOVA_LISTA_SKLAD ADD CONSTRAINT FK_CENOVA_LISTA_SKLAD_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE CENOVA_LISTA_SKLAD ADD CONSTRAINT FK_CENOVA_LISTA_SKLAD_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE CENOVA_LISTA_SKLAD_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_SKLAD_EDIT_OPR_ FOREIGN KEY (OPR_EDIT_ID) REFERENCES OPR_EDIT (ID);
ALTER TABLE CENOVA_LISTA_SKLAD_EDIT ADD CONSTRAINT FK_CENOVA_LISTA_SKLAD_EDIT_SKLA FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE CENOVA_LISTA_TMP ADD CONSTRAINT FK_CENOVA_LISTA_TMP_1 FOREIGN KEY (SIM_ID) REFERENCES SIMPLE (ID);
ALTER TABLE CFG_INFO ADD CONSTRAINT FK_CFG_INFO_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID) ON DELETE SET NULL;
ALTER TABLE CFG_INFO ADD CONSTRAINT FK_CFG_INFO_PC_ID FOREIGN KEY (PC_ID) REFERENCES INI (ID) ON DELETE SET NULL;
ALTER TABLE CFG_KASA_TEMPLATE ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_KASA_2 FOREIGN KEY (KASA_2_ID) REFERENCES KASA (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_OBEKT FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_PARI_IO FOREIGN KEY (PARI_IO_ID) REFERENCES PARI_IO (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_TEMPL FOREIGN KEY (TEMPLATE_ID) REFERENCES CFG_KASA_TEMPLATE (ID) ON DELETE CASCADE;
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_VAL_P FOREIGN KEY (VALUTA_PRIH_ID) REFERENCES VALUTA (ID);
ALTER TABLE CFG_KASA_TEMPLATE_EL ADD CONSTRAINT FK_CFG_KASA_TEMPLATE_EL_VAL_R FOREIGN KEY (VALUTA_RAZH_ID) REFERENCES VALUTA (ID);
ALTER TABLE CFG_LOG ADD CONSTRAINT FK_CFG_LOG_USER FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE CFG_PAYMENTS ADD CONSTRAINT FK_CFG_PAYMENTS_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE CFG_PAYMENTS_KLI ADD CONSTRAINT FK_CFG_PAYMENTS_KLI_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE CFG_PAYMENTS_KLI ADD CONSTRAINT FK_CFG_PAYMENTS_KLI_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE CFG_PAYMENTS_KLI ADD CONSTRAINT FK_CFG_PAYMENTS_KLI_PAYMENT_ID FOREIGN KEY (CFG_PAYMENTS_ID) REFERENCES CFG_PAYMENTS (ID);
ALTER TABLE CFG_RAZPAD_CALC ADD CONSTRAINT FK_CFG_RAZPAD_CALC_FROM_PR_ID FOREIGN KEY (FROM_PRODUCT_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CFG_RAZPAD_CALC ADD CONSTRAINT FK_CFG_RAZPAD_CALC_TO_PR_ID FOREIGN KEY (TO_PRODUCT_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CLAIM_EL ADD CONSTRAINT FK_CLAIM_EL_RET_ID FOREIGN KEY (RET_ID) REFERENCES RET_STOKA_PROD (ID);
ALTER TABLE CLAIM_EL ADD CONSTRAINT FK_CLAIM_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE CN_DELIVERY_ELEMENTS ADD CONSTRAINT FK_CN_ELEMENTS_CN_OPR_ID FOREIGN KEY (CN_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE CN_DELIVERY_ELEMENTS ADD CONSTRAINT FK_CN_ELEMENTS_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID)
  USING INDEX FK_CN_DELIVERY_ELEMENTS_1;
ALTER TABLE COMMENT ADD CONSTRAINT FK_COMMENT_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE COMMENTS ADD CONSTRAINT FK_COMMENTS_USER FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_EINVOICE_NODE ADD CONSTRAINT FK_COMMENT_COMMENT_ID FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID);
ALTER TABLE COMMENT_EINVOICE_NODE ADD CONSTRAINT FK_COMMENT_EINVOICE_ID FOREIGN KEY (EINVOICE_ID) REFERENCES FAK (ID) ON DELETE CASCADE;
ALTER TABLE COMMENT_FIRMI_NODE ADD CONSTRAINT FK_COMMENT_FIRMI_NODE_COMM FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_FIRMI_NODE ADD CONSTRAINT FK_COMMENT_FIRMI_NODE_ID FOREIGN KEY (FIRMI_ID) REFERENCES FIRMI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_KLI_NODE ADD CONSTRAINT FK_COMMENT_KLI_NODE_COMM FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_KLI_NODE ADD CONSTRAINT FK_COMMENT_KLI_NODE_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_OPR_NODE ADD CONSTRAINT FK_COMMENT_OPR_NODE_COMM FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_OPR_NODE ADD CONSTRAINT FK_COMMENT_OPR_NODE_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_OPR_TEMPLATE_NODE ADD CONSTRAINT FK_COMMENT_OPR_TEMPLATE_NODE_1 FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID);
ALTER TABLE COMMENT_OPR_TEMPLATE_NODE ADD CONSTRAINT FK_COMMENT_OPR_TEMPLATE_NODE_2 FOREIGN KEY (OPR_TEMPLATE_ID) REFERENCES OPR_TEMPLATE (ID);
ALTER TABLE COMMENT_SIMPLE_NODE ADD CONSTRAINT FK_COMMENT_SIMPLE_NODE_COMM FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_SIMPLE_NODE ADD CONSTRAINT FK_COMMENT_SIMPLE_NODE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_TASKS_NODE ADD CONSTRAINT FK_COMMENT_TASKS_NODE_COMM FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COMMENT_TASKS_NODE ADD CONSTRAINT FK_COMMENT_TASKS_NODE_ID FOREIGN KEY (TASKS_ID) REFERENCES TASKS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COURSES ADD CONSTRAINT FK_COURSES_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE COURSES_OPR_NODE ADD CONSTRAINT FK_COURSES_OPR_NODE_COURSE_ID FOREIGN KEY (COURSE_ID) REFERENCES COURSES (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE COURSES_OPR_NODE ADD CONSTRAINT FK_COURSES_OPR_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CRM_ATON_PRODUKT ADD CONSTRAINT FK_CRM_ATON_PRODUKT_CRM_PRODUKT FOREIGN KEY (CRM_PRODUKT) REFERENCES CRM_PRODUCT (ID) ON UPDATE CASCADE;
ALTER TABLE CRM_ATON_PRODUKT ADD CONSTRAINT FK_CRM_ATON_PRODUKT_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE CRM_INFO_LICENZIA ADD CONSTRAINT FK_CRM_INFO_LICENZIA_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE;
ALTER TABLE CRM_INFO_LICENZIA ADD CONSTRAINT FK_CRM_INFO_PRODUCT_CRM FOREIGN KEY (PRODUCT_CRM) REFERENCES CRM_PRODUCT (ID);
ALTER TABLE CRM_KLI ADD CONSTRAINT FK_CRM_KLI_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE;
ALTER TABLE DEF_RAZ_SIMPLE ADD CONSTRAINT FK_DEF_RAZ_SIMPLE_RAZ_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID) ON DELETE CASCADE;
ALTER TABLE DEF_RAZ_SIMPLE ADD CONSTRAINT FK_DEF_RAZ_SIMPLE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE
  USING INDEX FK_DEF_RAZ_SIMPLE_1;
ALTER TABLE DELIVERY_CURRENCY ADD CONSTRAINT FK_DELIVERY_CURRENCY_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE
  USING INDEX FK_DELIVERY_CURRENCY_1;
ALTER TABLE DOC ADD CONSTRAINT FK_DOC_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE DOCUMENTS ADD CONSTRAINT FK_DOCUMENTS_DELETE_USER_ID FOREIGN KEY (DELETE_USER_ID) REFERENCES "USER" (ID) ON UPDATE CASCADE;
ALTER TABLE DOCUMENTS ADD CONSTRAINT FK_DOCUMENTS_DOC_TYPE FOREIGN KEY (DOC_TYPE) REFERENCES DOCUMENTS_TIP (ID) ON UPDATE CASCADE;
ALTER TABLE DOCUMENTS ADD CONSTRAINT FK_DOCUMENTS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON UPDATE CASCADE;
ALTER TABLE DOCUMENTS_TIP_CODE ADD CONSTRAINT FK_DOCUMENTS_TIP_CODE_DOCTIPID FOREIGN KEY (DOCUMENT_TIP_ID) REFERENCES DOCUMENTS_TIP (ID);
ALTER TABLE DOST_CENI ADD CONSTRAINT FK_DOST_CENI_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE DOST_IMPORT_KLI_MAP ADD CONSTRAINT FK_DOST_IMPORT_KLI_MAP_KLI FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DOST_IMPORT_RAZF_MAP ADD CONSTRAINT FK_DOST_IMPORT_RAZF_MAP_KLI FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DOST_IMPORT_RAZF_MAP ADD CONSTRAINT FK_DOST_IMPORT_RAZF_MAP_RAZF FOREIGN KEY (RAZF_ID) REFERENCES RAZFASOVKA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DOST_IMPORT_SIMPLE_MAP ADD CONSTRAINT FK_DOST_IMPORT_SIMPLE_MAP_KLI FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DOST_IMPORT_SIMPLE_MAP ADD CONSTRAINT FK_DOST_IMPORT_SIMPLE_MAP_SIMPL FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DOST_NODE ADD CONSTRAINT FK_DOST_NODE_DOST_ID FOREIGN KEY (DOST_ID) REFERENCES OPR (ID);
ALTER TABLE DOST_NODE ADD CONSTRAINT FK_DOST_NODE_RAZ_DOST_ID FOREIGN KEY (RAZ_DOST_ID) REFERENCES OPR (ID);
ALTER TABLE DVSK_EL ADD CONSTRAINT FK_DVSK_EL_KLI_ID_PROIZV FOREIGN KEY (KLI_ID_PROIZV) REFERENCES KLI (ID);
ALTER TABLE DVSK_EL ADD CONSTRAINT FK_DVSK_EL_PARTIDA_EL_ID FOREIGN KEY (PARTIDA_EL_ID) REFERENCES PARTIDA_EL (ID);
ALTER TABLE DVSK_EL ADD CONSTRAINT FK_DVSK_EL_PROIZHOD FOREIGN KEY (PROIZHOD) REFERENCES COUNTRIES (ID);
ALTER TABLE DVSK_EL ADD CONSTRAINT FK_DVSK_EL_TYPE_DOK FOREIGN KEY (TYPE_DOK) REFERENCES DVSK_DOK_TYPE (ID);
ALTER TABLE DVSK_OPR ADD CONSTRAINT FK_DVSK_OPR_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE DVSK_OPR ADD CONSTRAINT FK_DVSK_OPR_TYPE_DOK FOREIGN KEY (TYPE_DOK) REFERENCES DVSK_DOK_TYPE (ID);
ALTER TABLE DVSK_OPR ADD CONSTRAINT FK_DVSK_OPR_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE ESIMPLE ADD CONSTRAINT FK_ESIMPLE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE EXCHANGE_SN ADD CONSTRAINT FK_EXCHANGE_SN_NEW_EL_ID FOREIGN KEY (NEW_EL_ID) REFERENCES PARTIDA_EL (ID);
ALTER TABLE EXCHANGE_SN ADD CONSTRAINT FK_EXCHANGE_SN_OLD_EL_ID FOREIGN KEY (OLD_EL_ID) REFERENCES PARTIDA_EL (ID);
ALTER TABLE EXCHANGE_SN ADD CONSTRAINT FK_EXCHANGE_SN_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE EXCHANGE_SN ADD CONSTRAINT FK_EXCHANGE_SN_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE EXPLANATORY ADD CONSTRAINT FK_EXPLANATORY_TIP FOREIGN KEY (TIP) REFERENCES EXPLANATORY_TYPE (ID);
ALTER TABLE EXPORTED_OPERATIONS ADD CONSTRAINT FK_EXPORTED_OPERATIONS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE EXPORTS ADD CONSTRAINT FK_EXPORTS_EXPORT_SYNC_ID FOREIGN KEY (EXPORT_SYNC_ID) REFERENCES EXPORT_SYNC (ID);
ALTER TABLE EXPORTS ADD CONSTRAINT FK_EXPORTS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE EXPORT_OPR ADD CONSTRAINT FK_EXPORT_OPR_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE EXPORT_SYNC ADD CONSTRAINT FK_EXPORT_SYNC_TYPE FOREIGN KEY (EXPORT_TYPE_ID) REFERENCES EXPORT_TYPES (ID);
ALTER TABLE EXPORT_SYNC ADD CONSTRAINT FK_EXPORT_SYNC_VENDOR_ID FOREIGN KEY (VENDOR_ID) REFERENCES EXPORT_VENDORS (ID);
ALTER TABLE EXTENDED_VARANTY_NODE ADD CONSTRAINT FK_EXTENDED_VARANTY_NODE_KLI_VA FOREIGN KEY (KLI_VARANTY_ID) REFERENCES KLI_EXTENDED_VARANTY (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE EXTENDED_VARANTY_NODE ADD CONSTRAINT FK_EXTENDED_VARANTY_NODE_OUT_EL FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE FAK ADD CONSTRAINT FK_FAK_ACCOUNTING FOREIGN KEY (FAK_ACCOUNTING) REFERENCES CFG_FAK_ACCOUNTING (ID);
ALTER TABLE FAK ADD CONSTRAINT FK_FAK_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE FAK ADD CONSTRAINT FK_FAK_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE FAK ADD CONSTRAINT FK_FAK_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FAK ADD CONSTRAINT FK_FAK_OWNER_ID FOREIGN KEY (OWNER_ID) REFERENCES OWNER (ID);
ALTER TABLE FAK ADD CONSTRAINT FK_FAK_VALUTA_ID FOREIGN KEY (VALUTA_ID) REFERENCES VALUTA (ID);
ALTER TABLE FAKTURA_OSNOVANIE ADD CONSTRAINT FK_FAKTURA_OSNOVANIE_FAK_ID FOREIGN KEY (FAK_ID) REFERENCES FAK (ID) ON DELETE CASCADE;
ALTER TABLE FAKTURA_OSNOVANIE ADD CONSTRAINT FK_FAKTURA_OSNOVANIE_OSN_ID FOREIGN KEY (OSN_ID) REFERENCES CFG_OSN_DDS (ID);
ALTER TABLE FAK_EL ADD CONSTRAINT FK_FAK_EL_AVANS_OPR_ID FOREIGN KEY (AVANS_OPR_ID) REFERENCES OPR (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE FAK_EL ADD CONSTRAINT FK_FAK_EL_ME_ID FOREIGN KEY (ME_ID) REFERENCES ME (ID);
ALTER TABLE FAK_EL ADD CONSTRAINT FK_FAK_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FAK_EL ADD CONSTRAINT FK_FAK_EL_RAZ_ID FOREIGN KEY (RAZ_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE FAK_EL ADD CONSTRAINT FK_FAK_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE FAK_EL ADD CONSTRAINT FK_FAK_EL_VAT_REASON_ID FOREIGN KEY (VAT_REASON_ID) REFERENCES CFG_OSN_DDS (ID) ON UPDATE CASCADE;
ALTER TABLE FAK_EL_IN_EL_NODE ADD CONSTRAINT FK_FAK_EL_IN_EL_NODE_FAK_EL_ID FOREIGN KEY (FAK_EL_ID) REFERENCES FAK_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE FAK_EL_IN_EL_NODE ADD CONSTRAINT FK_FAK_EL_IN_EL_NODE_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE FAK_IN ADD CONSTRAINT FK_FAK_IN_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FAK_IN ADD CONSTRAINT FK_FAK_IN_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE FAK_IN_EL_NODE ADD CONSTRAINT FK_FAK_IN_EL_NODE_FAK_ID FOREIGN KEY (FAK_IN_ID) REFERENCES FAK_IN (ID);
ALTER TABLE FAK_IN_EL_NODE ADD CONSTRAINT FK_FAK_IN_EL_NODE_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID);
ALTER TABLE FAK_KI_NUMBER ADD CONSTRAINT FK_FAK_KI_NUMBER_OPR_FAK_ID FOREIGN KEY (OPR_FAK_ID) REFERENCES OPR (ID);
ALTER TABLE FAK_KI_NUMBER ADD CONSTRAINT FK_FAK_KI_NUMBER_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FAK_OUT_EL_NODE ADD CONSTRAINT FK_FAK_OUT_EL_NODE_FAK_EL_ID FOREIGN KEY (FAK_EL_ID) REFERENCES FAK_EL (ID) ON DELETE CASCADE;
ALTER TABLE FAK_OUT_EL_NODE ADD CONSTRAINT FK_FAK_OUT_EL_NODE_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE FAK_PROD ADD CONSTRAINT FK_FAK_PROD_FAK_ID FOREIGN KEY (FAK_ID) REFERENCES FAK (ID);
ALTER TABLE FAK_PROD ADD CONSTRAINT FK_FAK_PROD_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FAK_PROD_REAL_PROD_NODE ADD CONSTRAINT FK_FP_RP_FKT_PROD_OPR_ID FOREIGN KEY (FKT_PROD_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FAK_PROD_REAL_PROD_NODE ADD CONSTRAINT FK_FP_RP_PROD_OPR_ID FOREIGN KEY (PROD_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FIRMI ADD CONSTRAINT FK_FIRMI_OWNERBANKA FOREIGN KEY (DEF_OWNERBANKA) REFERENCES OWNER_BANKI (ID);
ALTER TABLE FIRMI ADD CONSTRAINT FK_FIRMI_PLACE_ID FOREIGN KEY (PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE FIRMI_FAK_DATA ADD CONSTRAINT FK_FIRMI_FAK_DATA_DEF_BANKA FOREIGN KEY (DEF_BANKA) REFERENCES OWNER_BANKI (ID);
ALTER TABLE FIRMI_FAK_DATA ADD CONSTRAINT FK_FIRMI_FAK_DATA_FAK_ID FOREIGN KEY (FAK_ID) REFERENCES FAK (ID) ON DELETE CASCADE;
ALTER TABLE FISKAL_BONS ADD CONSTRAINT FK_FISKAL_BONS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE FR_REPORTS ADD CONSTRAINT FK_FR_REPORTS_PC_ID FOREIGN KEY (PC_ID) REFERENCES INI (ID);
ALTER TABLE FU ADD CONSTRAINT FK_FU_DAN_PLACE_ID FOREIGN KEY (DAN_PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE FU ADD CONSTRAINT FK_FU_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID);
ALTER TABLE FU ADD CONSTRAINT FK_FU_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE FU ADD CONSTRAINT FK_FU_OBEKT_PLACE_ID FOREIGN KEY (OBEKT_PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE FU ADD CONSTRAINT FK_FU_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE FU_OBOROTI ADD CONSTRAINT FK_FU_OBOROTI_FU_ID FOREIGN KEY (KA_ID) REFERENCES FU (ID);
ALTER TABLE FU_OBOROTI ADD CONSTRAINT FK_FU_OBOROTI_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE FU_SER_NUM ADD CONSTRAINT FK_FU_SER_NUM_KA_ID FOREIGN KEY (KA_ID) REFERENCES FU (ID) ON DELETE CASCADE;
ALTER TABLE FU_SER_NUM ADD CONSTRAINT FK_FU_SER_NUM_SER_NUM_ID FOREIGN KEY (SER_NUM_ID) REFERENCES SERIAL_NUM (ID);
ALTER TABLE GRFINGER ADD CONSTRAINT FK_GRFINGER FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE "IN" ADD CONSTRAINT FK_IN_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE INSTALLATIONS ADD CONSTRAINT FK_INSTALLATIONS_ORDER_ID FOREIGN KEY (ORDER_ID) REFERENCES POR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE INSTALLATIONS ADD CONSTRAINT FK_INSTALLATIONS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON UPDATE CASCADE;
ALTER TABLE INSTALLATION_USERS ADD CONSTRAINT FK_INSTALLATION_USERS_INSTALLER FOREIGN KEY (INSTALLER_ID) REFERENCES "USER" (ID) ON UPDATE CASCADE;
ALTER TABLE INSTALLATION_USERS ADD CONSTRAINT FK_INSTALLATION_USERS_INST_ID FOREIGN KEY (INSTALLATION_ID) REFERENCES INSTALLATIONS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE INSTALLERS ADD CONSTRAINT FK_INSTALLERS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE INSTALLERS_GROUP ADD CONSTRAINT FK_INSTALLERS_GROUP_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE INSTALLERS_GROUP ADD CONSTRAINT FK_INSTALLERS_GROUP_INSTALLER_I FOREIGN KEY (INSTALLER_ID) REFERENCES INSTALLERS (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT FK_INTRASTAT_DATA_CO_ID FOREIGN KEY (COUNTRY_ORIGIN_ID) REFERENCES COUNTRIES (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT FK_INTRASTAT_DATA_CSA_ID FOREIGN KEY (COUNTRY_SEND_ARRIVE_ID) REFERENCES COUNTRIES (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT FK_INTRASTAT_DATA_DC_ID FOREIGN KEY (DELIVERY_CONDITIONS) REFERENCES INTRASTAT_DELIVERY_CONDITIONS (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT FK_INTRASTAT_DATA_DTYPE_ID FOREIGN KEY (DEAL_TYPE) REFERENCES INTRASTAT_DEAL_TYPE (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT FK_INTRASTAT_DATA_REGION_ID FOREIGN KEY (REGION) REFERENCES INTRASTAT_REGION (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT FK_INTRASTAT_DATA_TTYPE_ID FOREIGN KEY (TRANSPORT_TYPE) REFERENCES INTRASTAT_TRANSPORT_TYPE (ID);
ALTER TABLE INTRASTAT_DATA ADD CONSTRAINT FK_INTRASTAT_DATA_VN_ID FOREIGN KEY (VEHICLES_NATIONALITY) REFERENCES COUNTRIES (ID);
ALTER TABLE INV ADD CONSTRAINT FK_INV_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE INV_IZL ADD CONSTRAINT FK_INV_IZL_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID);
ALTER TABLE INV_NACH_INI ADD CONSTRAINT FK_INV_NACH_INI_OPR_INV_ID FOREIGN KEY (OPR_INV_ID) REFERENCES OPR (ID);
ALTER TABLE INV_OPIS ADD CONSTRAINT FK_INV_OPIS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE INV_OPIS ADD CONSTRAINT FK_INV_OPIS_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE IN_EL ADD CONSTRAINT FK_IN_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE IN_EL ADD CONSTRAINT FK_IN_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE IN_EL ADD CONSTRAINT FK_IN_EL_VAT_REASON_ID FOREIGN KEY (VAT_REASON_ID) REFERENCES CFG_OSN_DDS (ID);
ALTER TABLE IN_EL2 ADD CONSTRAINT FK_IN_EL2_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE IN_EL_RAZ_NODE ADD CONSTRAINT FK_IN_EL_RAZ_NODE_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE IN_EL_RAZ_NODE ADD CONSTRAINT FK_IN_EL_RAZ_NODE_RAZFASOVKA_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE IN_TO_FAK_EL ADD CONSTRAINT FK_IN_TO_FAK_EL_FAK_IN_EL_ID FOREIGN KEY (FAK_IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE IN_TO_FAK_EL ADD CONSTRAINT FK_IN_TO_FAK_EL_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE IZL ADD CONSTRAINT FK_IZL_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE IZL ADD CONSTRAINT FK_IZL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE IZL ADD CONSTRAINT FK_IZL_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE IZP ADD CONSTRAINT FK_IZP_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE IZP ADD CONSTRAINT FK_IZP_TIP_ID FOREIGN KEY (IZP_TIP_ID) REFERENCES IZP_TIP (ID);
ALTER TABLE KASA ADD CONSTRAINT FK_KASA_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE KASA ADD CONSTRAINT FK_KASA_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE KA_LOG_NODE ADD CONSTRAINT FK_KA_LOG_NODE_KA_ID FOREIGN KEY (KA_ID) REFERENCES TBL_KA (ID);
ALTER TABLE KA_LOG_NODE ADD CONSTRAINT FK_KA_LOG_NODE_KA_ID_OLD FOREIGN KEY (KA_ID_OLD) REFERENCES TBL_KA (ID);
ALTER TABLE KA_SER_NUM ADD CONSTRAINT FK_KA_SER_NUM_KA_ID FOREIGN KEY (KA_ID) REFERENCES TBL_KA (ID);
ALTER TABLE KA_SER_NUM ADD CONSTRAINT FK_KA_SER_NUM_SER_NUM_ID FOREIGN KEY (SER_NUM_ID) REFERENCES SERIAL_NUM (ID);
ALTER TABLE KI_DOST_NODE ADD CONSTRAINT FK_KI_DOST_NODE_KI_OPR_ID FOREIGN KEY (KI_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE KI_DOST_NODE ADD CONSTRAINT FK_KI_DOST_NODE_SUB_OPR_ID FOREIGN KEY (SUB_KI_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE KI_DOST_SUMA ADD CONSTRAINT FK_KI_DOST_SUMA_OPR_ID FOREIGN KEY (KI_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE KI_DOST_SUMA_EL ADD CONSTRAINT FK_KI_DOST_SUMA_EL_IN_EL FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID);
ALTER TABLE KI_DOST_SUMA_EL ADD CONSTRAINT FK_KI_DOST_SUMA_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE KI_DOST_SUMA_EL ADD CONSTRAINT FK_KI_DOST_SUMA_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE KI_DOST_SUMA_FAK ADD CONSTRAINT FK_KI_DOST_SUMA_FAK_FAK_ID FOREIGN KEY (FAK_IN_ID) REFERENCES FAK_IN (ID);
ALTER TABLE KI_DOST_SUMA_FAK ADD CONSTRAINT FK_KI_DOST_SUMA_FAK_KI_ID FOREIGN KEY (KI_SUMA_ID) REFERENCES KI_DOST_SUMA (ID);
ALTER TABLE KI_NODE ADD CONSTRAINT FK_KI_NODE_KI_OPR FOREIGN KEY (KI_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE KI_NODE ADD CONSTRAINT FK_KI_NODE_SUB_OPR FOREIGN KEY (SUB_KI_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE KI_PROD_SUMA_EL ADD CONSTRAINT FK_KI_PROD_SUMA_EL_ FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE KI_PROD_SUMA_EL ADD CONSTRAINT FK_KI_PROD_SUMA_EL_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID);
ALTER TABLE KI_PROD_SUMA_EL ADD CONSTRAINT FK_KI_PROD_SUMA_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE KI_PROD_SUMA_EL ADD CONSTRAINT FK_KI_PROD_SUMA_EL_SUMI_ID FOREIGN KEY (SUMI_ID) REFERENCES SUMI (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE KLI ADD CONSTRAINT FK_KLI_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID) ON UPDATE CASCADE;
ALTER TABLE KLI ADD CONSTRAINT FK_KLI_KLI_GROUP_ID FOREIGN KEY (KLI_GROUP_ID) REFERENCES KLI_GROUP (ID);
ALTER TABLE KLI ADD CONSTRAINT FK_KLI_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE KLI ADD CONSTRAINT FK_KLI_PLACE_ID FOREIGN KEY (PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE KLI ADD CONSTRAINT FK_KLI_SEL_ID FOREIGN KEY (DEF_SEL_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE KLI_ABONAMENT ADD CONSTRAINT FK_KLI_ABONAMENT_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE KLI_ABONAMENT ADD CONSTRAINT FK_KLI_ABONAMENT_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE KLI_AGENTS ADD CONSTRAINT FK_KLI_AGENTS_KLI FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_DIST_NODE ADD CONSTRAINT FK_KLI_DIST_NODE_DIST_ID FOREIGN KEY (DIST_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_DIST_NODE ADD CONSTRAINT FK_KLI_DIST_NODE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_DOST_NODE ADD CONSTRAINT FK_KLI_DOST_NODE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_DOST_NODE ADD CONSTRAINT FK_KLI_DOST_NODE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE KLI_EXTENDED_VARANTY ADD CONSTRAINT FK_KLI_EXTENDED_VARANTY_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE KLI_FIRMA_NODE ADD CONSTRAINT FK_KLI_FIRMA_NODE_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID) ON DELETE CASCADE;
ALTER TABLE KLI_FIRMA_NODE ADD CONSTRAINT FK_KLI_FIRMA_NODE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE;
ALTER TABLE KLI_KASA_MAIL_NODE ADD CONSTRAINT FK_KLI_KASA_MAIL_NODE_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE KLI_KASA_MAIL_NODE ADD CONSTRAINT FK_KLI_KASA_MAIL_NODE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE KLI_POCKET_NODE ADD CONSTRAINT FK_KLI_POCKET_NODE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_POCKET_NODE ADD CONSTRAINT FK_KLI_POCKET_NODE_POCKET_ID FOREIGN KEY (POCKET_ID) REFERENCES POCKET_SHOP (ID);
ALTER TABLE KLI_POCKET_NODE ADD CONSTRAINT FK_KLI_POCKET_NODE_SEL_ID FOREIGN KEY (SELEKCIQ_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE KLI_PRAGOVE ADD CONSTRAINT FK_KLI_PRAGOVE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_SKLAD_NODE ADD CONSTRAINT FK_KLI_SKLAD_NODE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_SKLAD_NODE ADD CONSTRAINT FK_KLI_SKLAD_NODE_SELEKCIQ_ID FOREIGN KEY (SELEKCIQ_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE KLI_SKLAD_NODE ADD CONSTRAINT FK_KLI_SKLAD_NODE_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE KLI_TOCHKI_NODE ADD CONSTRAINT FK_KLI_TOCHKI_NODE_OPR_ID FOREIGN KEY (OPR_CHANGE_ID) REFERENCES OPR (ID);
ALTER TABLE KLI_USER_NODE ADD CONSTRAINT FK_KLI_USER_NODE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE KLI_USER_NODE ADD CONSTRAINT FK_KLI_USER_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE KONSIGNACIA ADD CONSTRAINT FK_KONSIGNACIA_OPR_IN_ID FOREIGN KEY (OPR_IN_ID) REFERENCES OPR (ID);
ALTER TABLE KONSIGNACIA ADD CONSTRAINT FK_KONSIGNACIA_OPR_OUT_ID FOREIGN KEY (OPR_OUT_ID) REFERENCES OPR (ID);
ALTER TABLE LAYOUTS ADD CONSTRAINT FK_LAYOUTS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE LICENCE_EL ADD CONSTRAINT FK_LICENCE_EL_GEN_ID FOREIGN KEY (EL_GEN_ID) REFERENCES SLEDI_TEMPLATE_EL_GEN (ID);
ALTER TABLE LICENCE_EL ADD CONSTRAINT FK_LICENCE_EL_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID);
ALTER TABLE LICENCE_EL ADD CONSTRAINT FK_LICENCE_EL_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID);
ALTER TABLE LICENZ_PROD_NODE ADD CONSTRAINT FK_LICENZ_PROD_NODE_LICENZ_ID FOREIGN KEY (LICENZ_ID) REFERENCES CRM_INFO_LICENZIA (ID) ON DELETE CASCADE;
ALTER TABLE LICENZ_PROD_NODE ADD CONSTRAINT FK_LICENZ_PROD_NODE_OPR_ID FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE LOCK_OPR ADD CONSTRAINT FK_LOCK_OPR_USER FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE LOCK_OPR_EL ADD CONSTRAINT FK_LOCK_OPR_EL_LOCK_ID FOREIGN KEY (LOCK_ID) REFERENCES LOCK_OPR (ID) ON DELETE CASCADE;
ALTER TABLE LOCK_OPR_EL ADD CONSTRAINT FK_LOCK_OPR_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE MESA ADD CONSTRAINT FK_MESA_ELEMENT_ID FOREIGN KEY (ELEMENT_ID) REFERENCES PARTIDA_EL (ID);
ALTER TABLE MESA ADD CONSTRAINT FK_MESA_STRANA_G_ID FOREIGN KEY (STRANA_G) REFERENCES COUNTRIES (ID);
ALTER TABLE MESA ADD CONSTRAINT FK_MESA_STRANA_K_ID FOREIGN KEY (STRANA_K) REFERENCES COUNTRIES (ID);
ALTER TABLE MESA ADD CONSTRAINT FK_MESA_STRANA_R_ID FOREIGN KEY (STRANA_R) REFERENCES COUNTRIES (ID);
ALTER TABLE MESA ADD CONSTRAINT FK_MESA_TIP_ID FOREIGN KEY (TIP) REFERENCES MESA_TIP (ID);
ALTER TABLE METRO_EXPORT_OPR ADD CONSTRAINT FK_METRO_EXPORT_ID FOREIGN KEY (EXPORT_ID) REFERENCES EXPORTS (ID);
ALTER TABLE METRO_EXPORT_OPR ADD CONSTRAINT FK_METRO_EXPORT_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE METRO_EXPORT_SIMPLES ADD CONSTRAINT FK_METRO_EXPORT_EXPORT_ID FOREIGN KEY (EXPORT_ID) REFERENCES EXPORTS (ID) ON DELETE CASCADE;
ALTER TABLE METRO_EXPORT_SIMPLES ADD CONSTRAINT FK_METRO_EXPORT_SIMPLES_ID FOREIGN KEY (TO_SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE METRO_INVOICE_DOCUMENTS ADD CONSTRAINT FK_METRO_INVOICE_IMP_OPR_ID FOREIGN KEY (IMPORTED_OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE MOVE ADD CONSTRAINT FK_MOVE_OPR_IN_ID FOREIGN KEY (OPR_IN_ID) REFERENCES OPR (ID);
ALTER TABLE MOVE ADD CONSTRAINT FK_MOVE_OPR_OUT_ID FOREIGN KEY (OPR_OUT_ID) REFERENCES OPR (ID);
ALTER TABLE NAL ADD CONSTRAINT FK_NAL_OPR_ID FOREIGN KEY (LAST_DOST_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE NAL ADD CONSTRAINT FK_NAL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE NAL ADD CONSTRAINT FK_NAL_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE NAL2 ADD CONSTRAINT FK_NAL2_NAL_ID FOREIGN KEY (NAL_ID) REFERENCES NAL (ID);
ALTER TABLE NAL_F ADD CONSTRAINT FK_NAL_F_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OBEKT ADD CONSTRAINT FK_OBEKT_PLACE_ID FOREIGN KEY (PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE OFERTA ADD CONSTRAINT FK_OFERTA_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OFERTA_EL ADD CONSTRAINT FK_OFERTA_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OFERTA_EL ADD CONSTRAINT FK_OFERTA_EL_RAZFASOVKA_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE OFERTA_EL ADD CONSTRAINT FK_OFERTA_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OFFERS ADD CONSTRAINT FK_OFFERS_ADDRESS_ID FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESSES (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE OFFERS ADD CONSTRAINT FK_OFFERS_AGENT_ID FOREIGN KEY (AGENT_ID) REFERENCES KLI (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE OFFERS ADD CONSTRAINT FK_OFFERS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OFFER_EL ADD CONSTRAINT FK_OFFER_EL_COMMENT_ID FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE OFFER_EL ADD CONSTRAINT FK_OFFER_EL_OFFER_ID FOREIGN KEY (OFFER_ID) REFERENCES OFFERS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OFFER_EL ADD CONSTRAINT FK_OFFER_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OFFER_POR_NODE ADD CONSTRAINT FK_OFFER_POR_NODE_OFFER_ID FOREIGN KEY (OFFER_ID) REFERENCES OFFERS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OFFER_POR_NODE ADD CONSTRAINT FK_OFFER_POR_NODE_POR_ID FOREIGN KEY (POR_ID) REFERENCES POR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OFFER_USER_NODE ADD CONSTRAINT FK_OFFER_USER_NODE_OFFER_ID FOREIGN KEY (OFFER_ID) REFERENCES OFFERS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OFFER_USER_NODE ADD CONSTRAINT FK_OFFER_USER_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OFF_OBEKTI_LIST ADD CONSTRAINT FK_OFF_OBEKTI_LIST_OBEKT FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_IN_EL ADD CONSTRAINT FK_OLD_IN_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OLD_IN_EL ADD CONSTRAINT FK_OLD_IN_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OLD_OFFERS ADD CONSTRAINT FK_OLD_OFFERS_ADDRESS_ID FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESSES (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE OLD_OFFERS ADD CONSTRAINT FK_OLD_OFFERS_AGENT_ID FOREIGN KEY (AGENT_ID) REFERENCES KLI (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE OLD_OFFERS ADD CONSTRAINT FK_OLD_OFFERS_OFFER_ID FOREIGN KEY (OFFER_ID) REFERENCES OFFERS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OFFERS ADD CONSTRAINT FK_OLD_OFFERS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OFFER_EL ADD CONSTRAINT FK_OLD_OFFER_EL_COMMENT_ID FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE OLD_OFFER_EL ADD CONSTRAINT FK_OLD_OFFER_EL_OFFER_ID FOREIGN KEY (OFFER_ID) REFERENCES OFFERS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OFFER_EL ADD CONSTRAINT FK_OLD_OFFER_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OFFER_EL ADD CONSTRAINT FK_OLD_OFFER_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OFFER_USER_NODE ADD CONSTRAINT FK_OLD_OFFER_USER_NODE_OFFER_ID FOREIGN KEY (OFFER_ID) REFERENCES OFFERS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OFFER_USER_NODE ADD CONSTRAINT FK_OLD_OFFER_USER_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OFFER_USER_NODE ADD CONSTRAINT FK_OLD_OFFER_USER_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_OUT_EL ADD CONSTRAINT FK_OLD_OUT_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OLD_OUT_EL ADD CONSTRAINT FK_OLD_OUT_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OLD_OUT_EL_PE_NODE ADD CONSTRAINT FK_OLD_OUT_EL_PE_NODE_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE OLD_OUT_EL_PE_NODE ADD CONSTRAINT FK_OLD_OUT_EL_PE_OUT_ID FOREIGN KEY (OLD_OUT_EL_ID) REFERENCES OLD_OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE OLD_OUT_EL_PE_NODE ADD CONSTRAINT FK_OLD_OUT_EL_PE_PE_ID FOREIGN KEY (PARTIDA_EL_ID) REFERENCES PARTIDA_EL (ID) ON DELETE CASCADE;
ALTER TABLE OLD_PARI_EL ADD CONSTRAINT FK_OLD_PARI_EL_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE OLD_PARI_EL ADD CONSTRAINT FK_OLD_PARI_EL_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE OLD_PARI_EL ADD CONSTRAINT FK_OLD_PARI_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OLD_PARI_EL ADD CONSTRAINT FK_OLD_PARI_EL_PARI_IO_ID FOREIGN KEY (PARI_IO_ID) REFERENCES PARI (ID);
ALTER TABLE OLD_PARI_EL ADD CONSTRAINT FK_OLD_PARI_EL_VALUTA_ID FOREIGN KEY (VALUTA_ID) REFERENCES VALUTA (ID);
ALTER TABLE OLD_POR_EL_PARAMS ADD CONSTRAINT FK_OLD_POR_EL_PARAMS_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL_EDIT (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_POR_EL_PRICE_COEF ADD CONSTRAINT FK_OLD_POR_EL_PRICE_COEF_SIMPLE FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON UPDATE CASCADE;
ALTER TABLE OLD_POR_EL_PRICE_COEF ADD CONSTRAINT FK_OLD_POR_EL_PRICE_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL_EDIT (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLD_REQUEST_EL ADD CONSTRAINT FK_OLD_MASTER_SIMPLE_ID FOREIGN KEY (MASTER_SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OLD_REQUEST_EL ADD CONSTRAINT FK_OLD_OPR_PREPARE_ID FOREIGN KEY (OPR_REQUEST_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE OLD_REQUEST_EL ADD CONSTRAINT FK_OLD_SIMPLE_CALC_ID FOREIGN KEY (SIMPLE_CALC_ID) REFERENCES SIMPLE_CALC (ID);
ALTER TABLE OLD_REQUEST_EL ADD CONSTRAINT FK_OLD_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OLD_TASKS ADD CONSTRAINT FK_OLD_TASKS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OLD_TASKS ADD CONSTRAINT FK_OLD_TASKS_TASK_ID FOREIGN KEY (TASK_ID) REFERENCES TASKS (ID);
ALTER TABLE ONLINE_USERS ADD CONSTRAINT FK_ONLINE_USERS_DISTRIBUTOR_ID FOREIGN KEY (DISTRIBUTOR_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ONLINE_USERS ADD CONSTRAINT FK_ONLINE_USERS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OPR ADD CONSTRAINT FK_OPR_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON UPDATE CASCADE;
ALTER TABLE OPR ADD CONSTRAINT FK_OPR_OPR_TIP FOREIGN KEY (OPR_TIP) REFERENCES OPR_TIP (ID);
ALTER TABLE OPR ADD CONSTRAINT FK_OPR_OTC_ID FOREIGN KEY (OTC_ID) REFERENCES OTC (ID);
ALTER TABLE OPR ADD CONSTRAINT FK_OPR_PC_ID FOREIGN KEY (PC_ID) REFERENCES INI (ID);
ALTER TABLE OPR ADD CONSTRAINT FK_OPR_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE OPR ADD CONSTRAINT FK_OPR_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE OPRGARANCIA ADD CONSTRAINT FK_OPRGARANCIA_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPRGARANCIA ADD CONSTRAINT FK_OPRGARANCIA_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OPR_AMBALAJ_NODE ADD CONSTRAINT FK_OPR_AMBALAJ_NODE_AMB_ID FOREIGN KEY (OPR_AMBALAJ_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_AMBALAJ_NODE ADD CONSTRAINT FK_OPR_AMBALAJ_NODE_PROD_ID FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_ANUL ADD CONSTRAINT FK_OPR_ANUL_AN_OPR_ID FOREIGN KEY (AN_OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE OPR_ANUL ADD CONSTRAINT FK_OPR_ANUL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_EDIT ADD CONSTRAINT FK_EDIT_OPR_ED_OPR_ID FOREIGN KEY (ED_OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE OPR_EDIT ADD CONSTRAINT FK_EDIT_OPR_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE OPR_EDIT ADD CONSTRAINT FK_EDIT_OPR_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_EDIT ADD CONSTRAINT FK_EDIT_OPR_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE OPR_EDIT ADD CONSTRAINT FK_EDIT_OPR_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE OPR_GARANCIA_NODE ADD CONSTRAINT FK_OPR_GARANCIA_NODE_OPR_GAR FOREIGN KEY (OPR_GARANCIA_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_GARANCIA_NODE ADD CONSTRAINT FK_OPR_GARANCIA_NODE_OPR_PROD FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_PADEJ ADD CONSTRAINT FK_OPR_PADEJ_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_PAYMENT_NODE ADD CONSTRAINT FK_OPR_PAYMENT_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES SUMI (ID) ON DELETE CASCADE;
ALTER TABLE OPR_PAYMENT_NODE ADD CONSTRAINT FK_OPR_PAYMENT_NODE_PAY_ID FOREIGN KEY (PAYMENT_ID) REFERENCES SUMI (ID) ON DELETE CASCADE;
ALTER TABLE OPR_PRODUCTION_REQUEST ADD CONSTRAINT FK_OPR_PRODUCTION_REQUEST_M_ID FOREIGN KEY (MONTAJ_USER_ID) REFERENCES "USER" (ID);
ALTER TABLE OPR_PRODUCTION_REQUEST ADD CONSTRAINT FK_OPR_PRODUCTION_REQUEST_PROD FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_PRODUCTION_REQUEST ADD CONSTRAINT FK_OPR_PRODUCT_REQUEST_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE OPR_PRODUCTION_REQUEST ADD CONSTRAINT FK_OPR_PRODUCT_REQUEST_V_SKLAD FOREIGN KEY (V_SKLAD) REFERENCES SKLAD (ID);
ALTER TABLE OPR_PRODUCTION_REQUEST ADD CONSTRAINT FK_PRODUCT_REQUEST_OT_SKLAD FOREIGN KEY (OT_SKLAD) REFERENCES SKLAD (ID);
ALTER TABLE OPR_RAZPAD_NODE ADD CONSTRAINT FK_OPR_RAZPAD_NODE_IN_EL FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE OPR_RAZPAD_NODE ADD CONSTRAINT FK_OPR_RAZPAD_NODE_OUT_EL FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE OPR_RAZPAD_NODE ADD CONSTRAINT FK_OPR_RAZPAD_NODE_SIMPLE_CALC FOREIGN KEY (SIMPLE_CALC_ID) REFERENCES SIMPLE_CALC (ID);
ALTER TABLE OPR_RECEPIES ADD CONSTRAINT FK_OPR_RECEPIES_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OPR_RECEPIES ADD CONSTRAINT FK_OPR_RECEPIES_RECEPIE_ID FOREIGN KEY (RECEPIE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OPR_RECEPIES_EL ADD CONSTRAINT FK_OPR_RECEPIES_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OPR_RECEPIES_EL ADD CONSTRAINT FK_OPR_RECEPIES_EL_RECEPIE_ID FOREIGN KEY (RECEPIE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OPR_RECEPIES_EL ADD CONSTRAINT FK_OPR_RECEPIES_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OPR_REFUSED ADD CONSTRAINT FK_OPR_REFUSED_OPR_ID FOREIGN KEY (ORP_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_REFUSED ADD CONSTRAINT FK_OPR_REFUSED_TIP_REFUSED_ID FOREIGN KEY (TIP_REFUSED_ID) REFERENCES TIP_REFUSED (ID);
ALTER TABLE OPR_REMOTE ADD CONSTRAINT FK_OPR_REMOTE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_SUMI ADD CONSTRAINT FK_OPR_SUMI_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT FK_OPR_TEMPLATE_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT FK_OPR_TEMPLATE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT FK_OPR_TEMPLATE_OBEKT_FAK_ID FOREIGN KEY (OBEKT_FAK_ID) REFERENCES OBEKT (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT FK_OPR_TEMPLATE_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT FK_OPR_TEMPLATE_ROUND_TIP_ID FOREIGN KEY (DIST_ROUND_TIP_ID) REFERENCES ROUND_TIP (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT FK_OPR_TEMPLATE_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE OPR_TEMPLATE ADD CONSTRAINT FK_OPR_TEMPLATE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE OPR_TEMPLATE_EL ADD CONSTRAINT FK_OPR_TEMPLATE_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OPR_TEMPLATE_EL ADD CONSTRAINT FK_OPR_TEMPLATE_EL_TEMPLATE_ID FOREIGN KEY (OPR_TEMPLATE_ID) REFERENCES OPR_TEMPLATE (ID) ON DELETE CASCADE;
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT FK_OPR_TEMPLATE_GEN_DIST_ID FOREIGN KEY (DISTRIBUTOR_ID) REFERENCES KLI (ID);
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT FK_OPR_TEMPLATE_GEN_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID);
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT FK_OPR_TEMPLATE_GEN_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT FK_OPR_TEMPLATE_GEN_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT FK_OPR_TEMPLATE_GEN_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT FK_OPR_TEMPLATE_GEN_TEMPL_ID FOREIGN KEY (OPR_TEMPLATE_ID) REFERENCES OPR_TEMPLATE (ID);
ALTER TABLE OPR_TEMPLATE_GEN ADD CONSTRAINT FK_OPR_TEMPLATE_GEN_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE OPR_TEMPLATE_TASK_NODE ADD CONSTRAINT FK_OPR_TEMPLATE_TASK_NODE_G FOREIGN KEY (TEMPLATE_GEN_ID) REFERENCES OPR_TEMPLATE_GEN (ID);
ALTER TABLE OPR_TEMPLATE_TASK_NODE ADD CONSTRAINT FK_OPR_TEMPLATE_TASK_TASK_ID FOREIGN KEY (TASK_ID) REFERENCES TASKS (ID);
ALTER TABLE OPR_TEMPLATE_TASK_NODE ADD CONSTRAINT FK_OPR_TEMPLATE_TASK_TEMPL_ID FOREIGN KEY (TEMPLATE_ID) REFERENCES OPR_TEMPLATE (ID);
ALTER TABLE OPR_WAITING_NODE ADD CONSTRAINT FK_OPR_WAITING_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OPR_WAITING_NODE ADD CONSTRAINT FK_OPR_WAITING_NODE_WAITING_ID FOREIGN KEY (WAITING_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE ORDER_ACTIONS ADD CONSTRAINT FK_ORDER_ACTIONS_ACTION_ID FOREIGN KEY (ACTION_ID) REFERENCES ACTIONS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ORDER_ACTIONS ADD CONSTRAINT FK_ORDER_ACTIONS_ORDER_ID FOREIGN KEY (ORDER_ID) REFERENCES POR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ORDER_ACTIONS ADD CONSTRAINT FK_ORDER_ACTIONS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OTC ADD CONSTRAINT FK_OTC_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE OTC ADD CONSTRAINT FK_OTC_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OTCS_OPR_NODE ADD CONSTRAINT FK_OTCS_OPR_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OTCS_OPR_NODE ADD CONSTRAINT FK_OTCS_OPR_NODE_OTCS_ID FOREIGN KEY (OTCS_ID) REFERENCES STORE_OTC (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OTC_EL ADD CONSTRAINT FK_OTC_EL_OPR_EL_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OTC_EL_EDIT ADD CONSTRAINT KF_OTC_EL_EDIT_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OTC_PER ADD CONSTRAINT FK_OTC_PER_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OUT ADD CONSTRAINT FK_OUT_KLI_AGENT FOREIGN KEY (KLI_AGENT_ID) REFERENCES KLI_AGENTS (ID);
ALTER TABLE OUT ADD CONSTRAINT FK_OUT_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE OUT ADD CONSTRAINT FK_OUT_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OUT ADD CONSTRAINT FK_OUT_UNP_ID FOREIGN KEY (UNP_ID) REFERENCES UNP (ID) ON UPDATE CASCADE;
ALTER TABLE OUT_EL ADD CONSTRAINT FK_OUT_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE OUT_EL ADD CONSTRAINT FK_OUT_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE OUT_EL2 ADD CONSTRAINT FK_OUT_EL2_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE OUT_EL_FAK_OUT_EL ADD CONSTRAINT FK_OUT_EL_FAK_OUT_EL_FAK_ID FOREIGN KEY (FAK_OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE OUT_EL_FAK_OUT_EL ADD CONSTRAINT FK_OUT_EL_FAK_OUT_EL_OUT_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE OUT_EL_RAZ_NODE ADD CONSTRAINT FK_OUT_EL_RAZ_NODE_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE OUT_EL_RAZ_NODE ADD CONSTRAINT FK_OUT_EL_RAZ_NODE_RAZF_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE OWNER_BANKI ADD CONSTRAINT FK_OWNER_BANKI_1 FOREIGN KEY (OWNER_ID) REFERENCES OWNER (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARI ADD CONSTRAINT FK_PARI_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE PARI ADD CONSTRAINT FK_PARI_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE PARI ADD CONSTRAINT FK_PARI_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PARI ADD CONSTRAINT FK_PARI_PARI_IO_ID FOREIGN KEY (PARI_IO_ID) REFERENCES PARI_IO (ID);
ALTER TABLE PARI ADD CONSTRAINT FK_PARI_VALUTA_ID FOREIGN KEY (VALUTA_ID) REFERENCES VALUTA (ID);
ALTER TABLE PARI_CRYPT ADD CONSTRAINT FK_PARI_CRYPT_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE PARI_CRYPT ADD CONSTRAINT FK_PARI_CRYPT_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE PARI_CRYPT ADD CONSTRAINT FK_PARI_CRYPT_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_CRYPT ADD CONSTRAINT FK_PARI_CRYPT_PARI_IO_ID FOREIGN KEY (PARI_IO_ID) REFERENCES PARI_IO (ID);
ALTER TABLE PARI_CRYPT ADD CONSTRAINT FK_PARI_CRYPT_VALUTA_ID FOREIGN KEY (VALUTA_ID) REFERENCES VALUTA (ID);
ALTER TABLE PARI_DIST ADD CONSTRAINT FK_PARI_DIST_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_DIST ADD CONSTRAINT FK_PARI_DIST_OPR_PROD_ID FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_FAKINUSLUGA_NODE ADD CONSTRAINT FK_PARI_FAKINUSL_FAKIN_ID FOREIGN KEY (FAK_IN_ID) REFERENCES FAK_IN (ID);
ALTER TABLE PARI_FAKINUSLUGA_NODE ADD CONSTRAINT FK_PARI_FAKINUSL_OPR_ID FOREIGN KEY (PARI_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_FAK_NODE ADD CONSTRAINT FK_PARI_FAK_NODE_FAK_ID FOREIGN KEY (FAK_ID) REFERENCES FAK (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARI_NODE ADD CONSTRAINT FK_PARI_NODE_FROM FOREIGN KEY (FROM_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_NODE ADD CONSTRAINT FK_PARI_NODE_TO FOREIGN KEY (TO_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_SKLOPR_NODE ADD CONSTRAINT FK_PARI_SKLOPR_NODE_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE PARI_SKLOPR_NODE ADD CONSTRAINT FK_PARI_SKLOPR_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_SKLOPR_NODE ADD CONSTRAINT FK_PARI_SKLOPR_NODE_OTC_ID FOREIGN KEY (OPR_OTC_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_SKLOPR_NODE ADD CONSTRAINT FK_PARI_SKLOPR_NODE_PARI_ID FOREIGN KEY (OPR_PARI_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_TMP ADD CONSTRAINT FK_PARI_TMP_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE PARI_TMP ADD CONSTRAINT FK_PARI_TMP_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE PARI_TMP ADD CONSTRAINT FK_PARI_TMP_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PARI_TMP ADD CONSTRAINT FK_PARI_TMP_PARI_IO_ID FOREIGN KEY (PARI_IO_ID) REFERENCES PARI_IO (ID);
ALTER TABLE PARI_TMP ADD CONSTRAINT FK_PARI_TMP_VALUTA_ID FOREIGN KEY (VALUTA_ID) REFERENCES VALUTA (ID);
ALTER TABLE PARTIDA_EL_NODE ADD CONSTRAINT FK_PARTIDA_EL_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PARTIDA_EL_NODE ADD CONSTRAINT FK_PARTIDA_EL_NODE_PARTIDA_ID FOREIGN KEY (PARTIDA_ID) REFERENCES PARTIDA_NAL (ID) ON UPDATE CASCADE;
ALTER TABLE PARTIDA_EL_PRINT ADD CONSTRAINT FK_PARTIDA_EL_PRINT_ORDER_EL_ID FOREIGN KEY (ORDER_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARTIDA_EL_PRINT ADD CONSTRAINT FK_PARTIDA_EL_PRINT_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE PARTIDA_IN_EL_NODE ADD CONSTRAINT FK_PIN_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARTIDA_IN_EL_NODE ADD CONSTRAINT FK_PIN_PARTIDA_NODE_ID FOREIGN KEY (PARTIDA_NODE_ID) REFERENCES PARTIDA_EL_NODE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARTIDA_IZL_NODE ADD CONSTRAINT FK_PARTIDA_IZL_IZL_ID FOREIGN KEY (IZL_ID) REFERENCES IZL (ID) ON DELETE CASCADE;
ALTER TABLE PARTIDA_IZL_NODE ADD CONSTRAINT FK_PARTIDA_IZL_PARTIDA_EL_ID FOREIGN KEY (PARTIDA_EL_ID) REFERENCES PARTIDA_EL_NODE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARTIDA_NAL ADD CONSTRAINT FK_PARTIDA_NAL_ELEMENT_ID FOREIGN KEY (ELEMENT_ID) REFERENCES PARTIDA_EL (ID);
ALTER TABLE PARTIDA_NAL ADD CONSTRAINT FK_PARTIDA_NAL_IN_EL__ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID);
ALTER TABLE PARTIDA_NAL ADD CONSTRAINT FK_PARTIDA_NAL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE PARTIDA_NAL ADD CONSTRAINT FK_PARTIDA_NAL_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE PARTIDA_OUT_EL_NODE ADD CONSTRAINT FK_PARTIDA_OUT_EL_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID);
ALTER TABLE PARTIDA_OUT_EL_NODE ADD CONSTRAINT FK_PARTIDA_OUT_EL_PARTIDA_ID FOREIGN KEY (PARTIDA_NODE_ID) REFERENCES PARTIDA_EL_NODE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARTIDA_PROP_NODE ADD CONSTRAINT FK_PARTIDA_PROP_NODE_MAJOR_ID FOREIGN KEY (MAJOR_PROP_ID) REFERENCES SIMPLE_PROP (ID);
ALTER TABLE PARTIDA_PROP_NODE ADD CONSTRAINT FK_PARTIDA_PROP_NODE_MINOR_ID FOREIGN KEY (MINOR_PROP_ID) REFERENCES SIMPLE_PROP_MINOR (ID);
ALTER TABLE PARTIDA_PROP_NODE ADD CONSTRAINT FK_PARTIDA_PROP_NODE_PAR_EL_ID FOREIGN KEY (PARTIDA_EL_ID) REFERENCES PARTIDA_EL (ID);
ALTER TABLE PARTIDA_RETURN_NODE ADD CONSTRAINT FK_PARTIDA_RETURN_NODE_FROM_ID FOREIGN KEY (FROM_ID) REFERENCES PARTIDA_EL_NODE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PARTIDA_RETURN_NODE ADD CONSTRAINT FK_PARTIDA_RETURN_NODE_TO_ID FOREIGN KEY (TO_ID) REFERENCES PARTIDA_EL_NODE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PATHS ADD CONSTRAINT FK_PATHS_FROM FOREIGN KEY (FROM_PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE PATHS ADD CONSTRAINT FK_PATHS_TO FOREIGN KEY (TO_PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE PAYMENT ADD CONSTRAINT FK_PAYMENT_BRANCH_ID FOREIGN KEY (BRANCH_ID) REFERENCES OBEKT (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PAYMENT ADD CONSTRAINT FK_PAYMENT_FAK_ID FOREIGN KEY (FAK_ID) REFERENCES FAK (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PAYMENT ADD CONSTRAINT FK_PAYMENT_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PAYMENT ADD CONSTRAINT FK_PAYMENT_UNP_ID FOREIGN KEY (UNP_ID) REFERENCES UNP (ID) ON UPDATE CASCADE;
ALTER TABLE PAYMENTS_EL ADD CONSTRAINT FK_PAYMENTS_EL_CFG_PAYMENTS_ID FOREIGN KEY (PAYMENT_TIP_ID) REFERENCES CFG_PAYMENTS (ID);
ALTER TABLE PAYMENTS_EL ADD CONSTRAINT FK_PAYMENTS_EL_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON UPDATE CASCADE;
ALTER TABLE PAYMENTS_EL ADD CONSTRAINT FK_PAYMENTS_EL_PAYMENT_ID FOREIGN KEY (PAYMENT_ID) REFERENCES PAYMENT (ID);
ALTER TABLE PAYMENT_AVANSOVO ADD CONSTRAINT FK_PAYMENT_AVANSOVO_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE PAYMENT_AVANSOVO ADD CONSTRAINT FK_PAYMENT_AVANSOVO_PAYMENT_ID FOREIGN KEY (PAYMENT_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PAYMENT_NODE ADD CONSTRAINT FK_PAYMENT_NODE_NODE_ID FOREIGN KEY (NODE_ID) REFERENCES OPR_PAYMENT_NODE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PAYMENT_NODE ADD CONSTRAINT FK_PAYMENT_NODE_SUMI_ID FOREIGN KEY (OPR_ID) REFERENCES SUMI (ID);
ALTER TABLE PAYMENT_NOW ADD CONSTRAINT FK_PAYMENT_NOW_PAYMENT_ID FOREIGN KEY (OPR_PAYMENT_ID) REFERENCES OPR (ID);
ALTER TABLE PAYMENT_NOW ADD CONSTRAINT FK_PAYMENT_NOW_PROD_ID FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE PAY_NOCASH_NODE ADD CONSTRAINT FK_PAY_NOCASH_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PAY_NOCASH_NODE ADD CONSTRAINT FK_PAY_NOCASH_NODE_PAYMENT_EL FOREIGN KEY (PAYMENT_EL_ID) REFERENCES PAYMENTS_EL (ID);
ALTER TABLE PLACE ADD CONSTRAINT FK_PLACE_COUNTY_ID FOREIGN KEY (COUNTY_ID) REFERENCES COUNTIES (ID);
ALTER TABLE PL_DELIVERY_STORAGE_EDIT ADD CONSTRAINT FK_PL_DELIVERY_STORAGE_OPR_ID FOREIGN KEY (OPR_EDIT_ID) REFERENCES OPR_EDIT (ID);
ALTER TABLE POCKET_SHOP ADD CONSTRAINT FK_POCKET_SHOP_CL_ID FOREIGN KEY (CL_ID) REFERENCES CENOVA_LISTA (ID);
ALTER TABLE POCKET_SHOP ADD CONSTRAINT FK_POCKET_SHOP_KLI_ID FOREIGN KEY (AGENT_ID) REFERENCES KLI (ID);
ALTER TABLE POCKET_SHOP ADD CONSTRAINT FK_POCKET_SHOP_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE POCKET_SHOP ADD CONSTRAINT FK_POCKET_SHOP_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE POR ADD CONSTRAINT FK_POR_ADDRESS_ID FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESSES (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE POR ADD CONSTRAINT FK_POR_CHANGE_STATUS_USER_ID FOREIGN KEY (CHANGE_STATUS_USER_ID) REFERENCES "USER" (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE POR ADD CONSTRAINT FK_POR_MOVE_OPR_ID FOREIGN KEY (MOVE_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POR ADD CONSTRAINT FK_POR_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POR ADD CONSTRAINT FK_POR_OPR_ID_KAPARO FOREIGN KEY (OPR_ID_KAPARO) REFERENCES OPR (ID);
ALTER TABLE POR ADD CONSTRAINT FK_POR_PARENT_ID FOREIGN KEY (PARENT_ID) REFERENCES POR (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE POR ADD CONSTRAINT FK_POR_PRODUCTION_ID FOREIGN KEY (PRODUCTION_ID) REFERENCES PRODUCTION (ID);
ALTER TABLE POR ADD CONSTRAINT FK_POR_PRODUCTION_STAT_USER_ID FOREIGN KEY (PRODUCTION_STATUS_USER_ID) REFERENCES "USER" (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE POR ADD CONSTRAINT FK_POR_PRODUCTION_USER_ID FOREIGN KEY (PRODUCTION_USER_ID) REFERENCES "USER" (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE POR ADD CONSTRAINT FK_POR_SALE_OPR_ID FOREIGN KEY (SALE_OPR_ID) REFERENCES OPR (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE POR ADD CONSTRAINT FK_POR_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE POR ADD CONSTRAINT FK_POR_UNP_ID FOREIGN KEY (UNP_ID) REFERENCES UNP (ID) ON UPDATE CASCADE;
ALTER TABLE POR_DOST_KOL_RZV ADD CONSTRAINT FK_POR_DOST_KOL_RZV_OPR_ID_DOST FOREIGN KEY (OPR_ID_DOST) REFERENCES OPR (ID);
ALTER TABLE POR_DOST_KOL_RZV ADD CONSTRAINT FK_POR_DOST_KOL_RZV_OPR_ID_POR FOREIGN KEY (OPR_ID_POR) REFERENCES OPR (ID);
ALTER TABLE POR_DOST_KOL_RZV ADD CONSTRAINT FK_POR_DOST_KOL_RZV_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE POR_EDIT ADD CONSTRAINT FK_POR_EDIT_EDIT_ID FOREIGN KEY (EDIT_ID) REFERENCES OPR_EDIT (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_EDIT ADD CONSTRAINT FK_POR_EDIT_ORDER_ID FOREIGN KEY (ORDER_ID) REFERENCES POR (ID) ON UPDATE CASCADE;
ALTER TABLE POR_EL ADD CONSTRAINT FK_POR_EL_OPR_EL FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POR_EL ADD CONSTRAINT FK_POR_EL_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE POR_EL ADD CONSTRAINT FK_POR_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE POR_EL_COMMENT ADD CONSTRAINT FK_POR_EL_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE;
ALTER TABLE POR_EL_EDIT ADD CONSTRAINT FK_POR_EL_EDIT_EDIT_ID FOREIGN KEY (EDIT_ID) REFERENCES OPR_EDIT (ID);
ALTER TABLE POR_EL_EDIT ADD CONSTRAINT FK_POR_EL_EDIT_OPR_KAPARO FOREIGN KEY (OPR_KAPARO) REFERENCES OPR (ID);
ALTER TABLE POR_EL_EDIT ADD CONSTRAINT FK_POR_EL_EDIT_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE POR_EL_EXPLANATORY ADD CONSTRAINT FK_POR_EL_EXPLANATORY_ID FOREIGN KEY (EXPLAN_ID) REFERENCES EXPLANATORY (ID);
ALTER TABLE POR_EL_EXPLANATORY ADD CONSTRAINT FK_POR_EL_EXPLANATORY_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE;
ALTER TABLE POR_EL_PICTURES_NODE ADD CONSTRAINT FK_POR_EL_PICS_NODE_PICTURE_ID FOREIGN KEY (PICTURE_ID) REFERENCES INSTALLATION_PICTURES (ID) ON UPDATE CASCADE;
ALTER TABLE POR_EL_PICTURES_NODE ADD CONSTRAINT FK_POR_EL_PICS_NODE_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_EL_PRICE_COEFICIENT ADD CONSTRAINT FK_POR_EL_PRICE_COEF_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_EL_PRICE_COEFICIENT ADD CONSTRAINT FK_POR_EL_PRICE_COEF_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON UPDATE CASCADE;
ALTER TABLE POR_EL_PRODUCTION ADD CONSTRAINT FK_POR_EL_PRODUCTION_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE;
ALTER TABLE POR_EL_PRODUCTION ADD CONSTRAINT FK_POR_EL_PRODUCTION_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE POR_EL_PRODUCTION ADD CONSTRAINT FK_POR_EL_PRODUCTION_SIM_CALC_I FOREIGN KEY (SIMPLE_CALAC_ID) REFERENCES SIMPLE_CALC (ID);
ALTER TABLE POR_EL_RAZ_NODE ADD CONSTRAINT FK_POR_EL_RAZ_NODE_POR_RL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE;
ALTER TABLE POR_EL_RAZ_NODE ADD CONSTRAINT FK_POR_EL_RAZ_NODE_RAZF_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE POR_EL_REQUEST_NODE ADD CONSTRAINT FK_POR_EL_REQ_NODE_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_EL_REQUEST_NODE ADD CONSTRAINT FK_POR_EL_REQ_NODE_REQUEST_ID FOREIGN KEY (REQUEST_EL_ID) REFERENCES PRODUCTION_REQUEST_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_FAK_PROD_NODE ADD CONSTRAINT FK_POR_FAK_PROD_NODE_OPR_ID FOREIGN KEY (FAK_PROD_OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_FAK_PROD_NODE ADD CONSTRAINT FK_POR_FAK_PROD_NODE_POR_ID FOREIGN KEY (POR_ID) REFERENCES POR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_FORMULA_PARAMS ADD CONSTRAINT FK_POR_FORMULA_PARAMS_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE;
ALTER TABLE POR_OFFER_TERMS_NODE ADD CONSTRAINT FK_POR_OFFER_TERMS_NODE_POR_ID FOREIGN KEY (POR_ID) REFERENCES POR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_OFFER_TERMS_NODE ADD CONSTRAINT FK_POR_OFFER_TERMS_NODE_TERMS_I FOREIGN KEY (TERMS_ID) REFERENCES OFFER_TERMS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE POR_OUT_NODE ADD CONSTRAINT FK_POR_OUT_NODE_OUT_ID FOREIGN KEY (OUT_ID) REFERENCES OUT (ID);
ALTER TABLE POR_OUT_NODE ADD CONSTRAINT FK_POR_OUT_NODE_POR_ID FOREIGN KEY (POR_ID) REFERENCES POR (ID);
ALTER TABLE POR_PRODUCTION_REQUEST_NODE ADD CONSTRAINT FK_POR_NODE_OPR_ID FOREIGN KEY (POR_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POR_PRODUCTION_REQUEST_NODE ADD CONSTRAINT FK_REQUEST_NODE_OPR_ID FOREIGN KEY (PRODUCTION_REQUEST_ID) REFERENCES OPR (ID);
ALTER TABLE POR_PROP_NODE ADD CONSTRAINT FK_POR_PROP_NODE_MAJOR_PROP_ID FOREIGN KEY (MAJOR_PROP_ID) REFERENCES SIMPLE_PROP (ID);
ALTER TABLE POR_PROP_NODE ADD CONSTRAINT FK_POR_PROP_NODE_MINOR_PROP_ID FOREIGN KEY (MINOR_PROP_ID) REFERENCES SIMPLE_PROP_MINOR (ID);
ALTER TABLE POR_PROP_NODE ADD CONSTRAINT FK_POR_PROP_NODE_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID) ON DELETE CASCADE;
ALTER TABLE POR_RAZ_EDIT ADD CONSTRAINT FK_POR_RAZ_EDIT_EDIT_ID FOREIGN KEY (EDIT_ID) REFERENCES POR_EL_EDIT (ID);
ALTER TABLE POR_RAZ_EDIT ADD CONSTRAINT FK_POR_RAZ_EDIT_RAZ_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE POR_ZD_NODE ADD CONSTRAINT FK_POR_ZD_NODE_POR_OPR_ID FOREIGN KEY (POR_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POR_ZD_NODE ADD CONSTRAINT FK_POR_ZD_NODE_ZD_OPR_ID FOREIGN KEY (ZD_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POTV ADD CONSTRAINT FK_POTV_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POTV_EL ADD CONSTRAINT FK_POTV_EL_MOL_USER_ID FOREIGN KEY (MOL_USER_ID) REFERENCES "USER" (ID);
ALTER TABLE POTV_EL ADD CONSTRAINT FK_POTV_EL_OPR_ID FOREIGN KEY (OPR_POTV_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE POTV_EL ADD CONSTRAINT FK_POTV_EL_POTV_ID FOREIGN KEY (POTV_ID) REFERENCES POTV (ID);
ALTER TABLE POTV_MOVE_EL ADD CONSTRAINT FK_POTV_MOVE_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE POTV_MOVE_EL ADD CONSTRAINT FK_POTV_MOVE_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE PRICE_LIST_DELIVERY_STORAGES ADD CONSTRAINT FK_PRICE_LIST_DELIVERY_STORAGES FOREIGN KEY (STORAGE_ID) REFERENCES SKLAD (ID);
ALTER TABLE PRICE_LIST_DELIVERY_STORAGES ADD CONSTRAINT FK_PRICE_LIST_D_PRICE_LIST_ID FOREIGN KEY (PRICE_LIST_ID) REFERENCES OPR (ID);
ALTER TABLE PRODUCTION ADD CONSTRAINT FK_PRODUCTION_OPR_IN_ID FOREIGN KEY (OPR_IN_ID) REFERENCES OPR (ID);
ALTER TABLE PRODUCTION ADD CONSTRAINT FK_PRODUCTION_OPR_OUT_ID FOREIGN KEY (OPR_OUT_ID) REFERENCES OPR (ID);
ALTER TABLE PRODUCTION_EXPLANATORY ADD CONSTRAINT FK_PRODUCTION_EXPLANATORY_1 FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE PRODUCTION_EXPLANATORY ADD CONSTRAINT FK_PRODUCTION_EXPLANATORY_2 FOREIGN KEY (EXPLAIN_ID) REFERENCES EXPLANATORY (ID);
ALTER TABLE PRODUCTION_GRUPI ADD CONSTRAINT FK_PRODUCTION_GRUPI_SEL_ID FOREIGN KEY (SELEKCIQ_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE PRODUCTION_IN_EL_PARAMS ADD CONSTRAINT FK_PRODUCTION_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE PRODUCTION_KAPARO_NODE ADD CONSTRAINT FK_PRODUCTION_PAYMENT_OPR_ID FOREIGN KEY (OPR_PAYMENT_ID) REFERENCES OPR (ID);
ALTER TABLE PRODUCTION_KAPARO_NODE ADD CONSTRAINT FK_PRODUCTION_REQUEST_OPR_ID FOREIGN KEY (REQUEST_ID) REFERENCES OPR (ID);
ALTER TABLE PRODUCTION_MONTAJISTI ADD CONSTRAINT FK_PRODUCTION_MONTAJ_REQUEST_ID FOREIGN KEY (PRODUCTION_REQUEST_ID) REFERENCES OPR_PRODUCTION_REQUEST (ID) ON DELETE CASCADE
  USING INDEX FK_PRODUCTION_REQUEST_ID;
ALTER TABLE PRODUCTION_MONTAJISTI ADD CONSTRAINT FK_PRODUCTION_MONTAJ_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE PRODUCTION_REQUEST_EL ADD CONSTRAINT FK_REQUEST_MASTER_SIMPLE_ID FOREIGN KEY (MASTER_SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE PRODUCTION_REQUEST_EL ADD CONSTRAINT FK_REQUEST_OPR_PREPARE_ID FOREIGN KEY (OPR_REQUEST_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE PRODUCTION_REQUEST_EL ADD CONSTRAINT FK_REQUEST_SIMPLE_CALC_ID FOREIGN KEY (SIMPLE_CALC_ID) REFERENCES SIMPLE_CALC (ID);
ALTER TABLE PRODUCTION_REQUEST_EL ADD CONSTRAINT FK_REQUEST_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE PRODUCTION_ZARABOTKA ADD CONSTRAINT FK_PRODUCTION_ZARABOTKA_PR_ID FOREIGN KEY (PRODUCTION_ID) REFERENCES OPR_PRODUCTION_REQUEST (ID) ON DELETE CASCADE;
ALTER TABLE PRODUCTION_ZARABOTKA ADD CONSTRAINT FK_PRODUCTION_ZARABOTKA_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE PRODUCTION_ZARABOTKA_IZPLATENO ADD CONSTRAINT FK_ZARABOTKA_IZPL_ID FOREIGN KEY (ZARABOTKA_ID) REFERENCES PRODUCTION_ZARABOTKA (ID) ON DELETE CASCADE;
ALTER TABLE PRODUCT_WAREHOUSE_MAP_NODE ADD CONSTRAINT FK_PRODUCT_WAREHOUSE_MAP_NODE_N FOREIGN KEY (NODE_ID) REFERENCES WAREHOUSE_BASE_MAP (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PRODUCT_WAREHOUSE_MAP_NODE ADD CONSTRAINT FK_PRODUCT_WAREHOUSE_MAP_NODE_P FOREIGN KEY (PRODUCT_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PROD_AVANS ADD CONSTRAINT FK_PROD_AVANS_AVANS_OUT_ID FOREIGN KEY (AVANS_OUT_ID) REFERENCES OUT (ID);
ALTER TABLE PROD_AVANS ADD CONSTRAINT FK_PROD_AVANS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_AVANS ADD CONSTRAINT FK_PROD_AVANS_OUT_ID FOREIGN KEY (OUT_ID) REFERENCES OUT (ID);
ALTER TABLE PROD_CENI_EL ADD CONSTRAINT FK_PROD_CENI_EL_BARCODE_ID FOREIGN KEY (BARCODE_ID) REFERENCES BARCODE (ID) ON DELETE SET NULL;
ALTER TABLE PROD_CENI_EL ADD CONSTRAINT FK_PROD_CENI_EL_BONUS_ID FOREIGN KEY (BONUS_ID) REFERENCES BONUS_CONFIG (ID) ON DELETE SET NULL;
ALTER TABLE PROD_CENI_EL ADD CONSTRAINT FK_PROD_CENI_EL_OTSTAPKA_ID FOREIGN KEY (OTSTAPKA_ID) REFERENCES BH_OTSTAPKI (ID);
ALTER TABLE PROD_CENI_EL ADD CONSTRAINT FK_PROD_CENI_EL_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PROD_CENI_EL ADD CONSTRAINT FK_PROD_CENI_EL_VAT_REASON_ID FOREIGN KEY (VAT_REASON_ID) REFERENCES CFG_OSN_DDS (ID) ON UPDATE CASCADE;
ALTER TABLE PROD_NODE ADD CONSTRAINT FK_PROD_NODE_PROD_ID FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_NODE ADD CONSTRAINT FK_PROD_NODE_SUB_PROD_ID FOREIGN KEY (OPR_SUB_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_PRODUCTION ADD CONSTRAINT FK_PROD_PRODUCTION_1 FOREIGN KEY (PROD_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_PRODUCTION ADD CONSTRAINT FK_PROD_PRODUCTION_2 FOREIGN KEY (PRODUCTION_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_REQUEST_PRODUCTION_NODE ADD CONSTRAINT FK_PROD_REQUEST_PRODUCTION_ID FOREIGN KEY (OPR_REQUEST_PRODUCTION_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_REQUEST_PRODUCTION_NODE ADD CONSTRAINT FK_PROD_REQUEST_PRODUCTION_NODE FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_STOCK ADD CONSTRAINT FK_PROD_STOCK_1 FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_STOCK ADD CONSTRAINT FK_PROD_STOCK_2 FOREIGN KEY (OWNER_ID) REFERENCES OWNER (ID);
ALTER TABLE PROD_STOCK_EL ADD CONSTRAINT FK_PROD_STOCK_EL_1 FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE PROD_STOCK_EL ADD CONSTRAINT FK_PROD_STOCK_EL_2 FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRIES (ID);
ALTER TABLE PROD_STOCK_EL ADD CONSTRAINT FK_PROD_STOCK_EL_3 FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE PROD_VAUCHER ADD CONSTRAINT FK_PROD_VAUCHER_1 FOREIGN KEY (PAYMENT_EL_ID) REFERENCES PAYMENTS_EL (ID);
ALTER TABLE PROD_VAUCHER ADD CONSTRAINT FK_PROD_VAUCHER_OPR_ID FOREIGN KEY (OPR_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE PROFORMA_TO_FAK ADD CONSTRAINT FK_PROFORMA_TO_FAK_FAK_ID FOREIGN KEY (FAK_ID) REFERENCES FAK (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PROFORMA_TO_FAK ADD CONSTRAINT FK_PROFORMA_TO_FAK_PROF_ID FOREIGN KEY (PROFORMA_ID) REFERENCES FAK (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PROP_NODE ADD CONSTRAINT FK_PROP_NODE_MAJOR_ID FOREIGN KEY (MAJOR_PROP_ID) REFERENCES SIMPLE_PROP (ID);
ALTER TABLE PROP_NODE ADD CONSTRAINT FK_PROP_NODE_MINOR_ID FOREIGN KEY (MINOR_PROP_ID) REFERENCES SIMPLE_PROP_MINOR (ID);
ALTER TABLE PR_REQUEST_EXPLANATORY ADD CONSTRAINT FK_PREPARE_EXPL_ID FOREIGN KEY (EXPLAN_ID) REFERENCES EXPLANATORY (ID);
ALTER TABLE PR_REQUEST_EXPLANATORY ADD CONSTRAINT FK_PREPARE_PR_EL_ID FOREIGN KEY (PR_REQUEST_EL_ID) REFERENCES PRODUCTION_REQUEST_EL (ID) ON DELETE CASCADE;
ALTER TABLE PR_REQUEST_FORMULA_PARAMS ADD CONSTRAINT FK_PREP_PR_EL_ID FOREIGN KEY (REQUEST_EL_ID) REFERENCES PRODUCTION_REQUEST_EL (ID) ON DELETE CASCADE;
ALTER TABLE PR_REQ_EL_PRICE_COEFICIENT ADD CONSTRAINT FK_PR_REQ_PRICE_COEF_REQ_EL_ID FOREIGN KEY (REQUEST_EL_ID) REFERENCES PRODUCTION_REQUEST_EL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE RAZFASOVKA ADD CONSTRAINT FK_RAZFASOVKA_RAZ_ELEMENT FOREIGN KEY (RAZ_ELEMENT_ID) REFERENCES RAZ_ELEMENT (ID);
ALTER TABLE RAZFASOVKA ADD CONSTRAINT FK_RAZFASOVKA_RAZ_TIP FOREIGN KEY (RAZ_TIP_ID) REFERENCES RAZ_TIP (ID);
ALTER TABLE RAZFASOVKA ADD CONSTRAINT FK_RAZFASOVKA_SIMPLE FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE RAZPAD ADD CONSTRAINT FK_RAZPAD_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE RDB$NAL ADD CONSTRAINT FK_RDBNAL_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE RDB$PARTIDA_NAL ADD CONSTRAINT FK_RDB_PARTIDA_NAL_ELEMENT_ID FOREIGN KEY (ELEMENT_ID) REFERENCES PARTIDA_EL (ID) ON DELETE CASCADE;
ALTER TABLE RDB$PARTIDA_NAL ADD CONSTRAINT FK_RDB_PARTIDA_NAL_IN_EL_ID FOREIGN KEY (IN_EL_ID) REFERENCES IN_EL (ID) ON DELETE CASCADE;
ALTER TABLE REAL_IZP_FAKT_IZP_NODE ADD CONSTRAINT FK_REAL_IZP_FAKT_IZP_NODE_1 FOREIGN KEY (REAL_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE REAL_IZP_FAKT_IZP_NODE ADD CONSTRAINT FK_REAL_IZP_FAKT_IZP_NODE_2 FOREIGN KEY (FAKT_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE REQUEST_PRODUCTION_NODE ADD CONSTRAINT FK_REQUEST_ID FOREIGN KEY (REQUEST_ID) REFERENCES OPR (ID);
ALTER TABLE REQUEST_PRODUCTION_NODE ADD CONSTRAINT FK_REQUEST_PRODUCTION_ID FOREIGN KEY (PRODUCTION_ID) REFERENCES OPR (ID);
ALTER TABLE RET_DOST_KI_DOST_NODE ADD CONSTRAINT FK_RET_KI_DOST_NODE_KI_ID FOREIGN KEY (KI_DOST_ID) REFERENCES RET_STOKA_DOST_KI (ID);
ALTER TABLE RET_DOST_KI_DOST_NODE ADD CONSTRAINT FK_RET_KI_DOST_NODE_RET_ID FOREIGN KEY (RET_DOST_ID) REFERENCES RET_STOKA_DOST (ID);
ALTER TABLE RET_DOST_MOVE_NODE ADD CONSTRAINT FK_RET_DOST_MOVE_IN_ID FOREIGN KEY (IN_OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE RET_DOST_MOVE_NODE ADD CONSTRAINT FK_RET_DOST_MOVE_OPR_ID FOREIGN KEY (RET_OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE RET_DOST_MOVE_NODE ADD CONSTRAINT FK_RET_DOST_MOVE_OUT_ID FOREIGN KEY (OUT_OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE RET_PROD_RET_FAK_PROD_KI_NODE ADD CONSTRAINT FK_RET_PROD_RET_FAK_PROD_KI_1 FOREIGN KEY (OPR_RET_PROD_ID) REFERENCES OPR (ID);
ALTER TABLE RET_PROD_RET_FAK_PROD_KI_NODE ADD CONSTRAINT FK_RET_PROD_RET_FAK_PROD_KI_2 FOREIGN KEY (OPR_RET_FAK_PROD_KI_ID) REFERENCES OPR (ID);
ALTER TABLE RET_STOKA_DOST ADD CONSTRAINT FK_RET_STOKA_DOST_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE RET_STOKA_DOST_KI ADD CONSTRAINT FK_RET_STOKA_DOST_KI_FAK_IN_ID FOREIGN KEY (FAK_IN_ID) REFERENCES FAK_IN (ID);
ALTER TABLE RET_STOKA_DOST_KI ADD CONSTRAINT FK_RET_STOKA_DOST_KI_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE RET_STOKA_PROD ADD CONSTRAINT FK_RET_STOKA_PROD_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE RET_STOKA_PROD ADD CONSTRAINT FK_RET_STOKA_PROD_REFUSED_ID FOREIGN KEY (REFUSED_ID) REFERENCES TIP_REFUSED (ID);
ALTER TABLE RET_STOKA_PROD ADD CONSTRAINT FK_RET_STOKA_PROD_RESOLUTION_ID FOREIGN KEY (RESOLUTION_ID) REFERENCES TIP_RESOLUTION (ID);
ALTER TABLE RET_STOKA_PROD ADD CONSTRAINT FK_RET_STOKA_PROD_UNP_ID FOREIGN KEY (UNP_ID) REFERENCES UNP (ID) ON UPDATE CASCADE;
ALTER TABLE RET_STOKA_PROD_KI ADD CONSTRAINT FK_RET_STOKA_PROD_KI_FAK_ID FOREIGN KEY (FAK_OPR_ID) REFERENCES FAK (ID);
ALTER TABLE RET_STOKA_PROD_KI ADD CONSTRAINT FK_RET_STOKA_PROD_KI_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE RET_STOKA_PROD_KI ADD CONSTRAINT FK_RET_STOKA_PROD_KI_UNP_ID FOREIGN KEY (UNP_ID) REFERENCES UNP (ID) ON UPDATE CASCADE;
ALTER TABLE SELEKCIQ ADD CONSTRAINT FK_SELEKCIQ_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE SELEKCIQ_KALK_EL ADD CONSTRAINT FK_SELEKCIQ_KALK_EL_SELEKCIQ_ID FOREIGN KEY (SELEKCIQ_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE SELEKCIQ_KALK_EL ADD CONSTRAINT FK_SELEKCIQ_KALK_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SELEKCIQ_KASA_EL ADD CONSTRAINT FK_SELEKCIQ_KASA_EL_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE SELEKCIQ_KASA_EL ADD CONSTRAINT FK_SELEKCIQ_KASI_EL_SEL_ID FOREIGN KEY (SELEKCIQ_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE SELEKCIQ_KLI_EL ADD CONSTRAINT FK_SELEKCIQ_KLI_EL_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE;
ALTER TABLE SELEKCIQ_KLI_EL ADD CONSTRAINT FK_SELEKCIQ_KLI_EL_SELEKCIQ_ID FOREIGN KEY (SELEKCIQ_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE SELEKCIQ_SIM_EL ADD CONSTRAINT FK_SELEKCIQ_SIM_EL_SELEKCIQ_ID FOREIGN KEY (SELEKCIQ_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE SELEKCIQ_SIM_EL ADD CONSTRAINT FK_SELEKCIQ_SIM_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE SEL_FIRMI_QR ADD CONSTRAINT FK_SEL_FIRMI_QR_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID);
ALTER TABLE SEL_KASI_QR ADD CONSTRAINT FK_SEL_KASI_QR_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE SEL_KLI_QR ADD CONSTRAINT FK_SEL_KLI_QR_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE SEL_MAJOR_PROP_QR ADD CONSTRAINT FK_SEL_MAJOR_PROP_QR_MAJOR_ID FOREIGN KEY (MAJOR_PROP_ID) REFERENCES SIMPLE_PROP (ID) ON DELETE CASCADE;
ALTER TABLE SEL_MINOR_PROP_QR ADD CONSTRAINT FK_SEL_MINOR_PROP_QR_MINOR_ID FOREIGN KEY (MINOR_PROP_ID) REFERENCES SIMPLE_PROP_MINOR (ID) ON DELETE CASCADE;
ALTER TABLE SEL_OBEKT_QR ADD CONSTRAINT FK_SEL_OBEKT_QR_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE SEL_SIM_QR ADD CONSTRAINT FK_SEL_SIM_QR_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE SEL_SKLAD_QR ADD CONSTRAINT FK_SEL_SKLAD_QR_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE SERIAL_NUM ADD CONSTRAINT FK_SERIAL_NUM_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SERIAL_NUM ADD CONSTRAINT FK_SERIAL_NUM__PARTIDA_EL_ID FOREIGN KEY (PARTIDA_EL_ID) REFERENCES PARTIDA_EL (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_ADRESIRANE_ID FOREIGN KEY (ADRESIRANE_ID) REFERENCES SIMPLE_ADRESIRANE (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_DEFAUKT_RAZ_ID FOREIGN KEY (DEFAULT_RAZ_ID) REFERENCES SIMPLE_RAZ (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_GROUP_ID FOREIGN KEY (SIMPLE_GROUP_ID) REFERENCES SIMPLE_GROUP (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_GR_ZAMQNA_ID FOREIGN KEY (GR_ZAMQNA_ID) REFERENCES SELEKCIQ (ID) ON DELETE CASCADE;
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_G_TIP FOREIGN KEY (G_TIP) REFERENCES GARANCII (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_HGROUP_ID FOREIGN KEY (HGROUP_ID) REFERENCES HGROUPS (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_ME2_ID FOREIGN KEY (ME2_ID) REFERENCES ME (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_ME_ID FOREIGN KEY (ME_ID) REFERENCES ME (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_RAZ_TIP FOREIGN KEY (RAZ_TIP_ID) REFERENCES RAZ_TIP (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_SASTAV_ID FOREIGN KEY (SASTAV_ID) REFERENCES SASTAV (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_SEL_CALC_ID FOREIGN KEY (DEF_SEL_CALC) REFERENCES SELEKCIQ (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_SEL_ID FOREIGN KEY (DEF_SEL_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE SIMPLE ADD CONSTRAINT FK_SIMPLE_VAT_REASON_ID FOREIGN KEY (VAT_REASON_ID) REFERENCES CFG_OSN_DDS (ID) ON UPDATE CASCADE;
ALTER TABLE SIMPLE_ACZIS ADD CONSTRAINT FK_SIMPLE_ACZIS_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_ADRESIRANE ADD CONSTRAINT FK_SIMPLE_ADRESIRANE_GRUPA_ID FOREIGN KEY (GRUPA_ID) REFERENCES SIMPLE_ADRESIRANE_GRUPA (ID);
ALTER TABLE SIMPLE_ADRESIRANE_NODE ADD CONSTRAINT FK_SIMPLE_ADRESIRANE_ADRES_ID FOREIGN KEY (ADRESIRANE_ID) REFERENCES SIMPLE_ADRESIRANE (ID);
ALTER TABLE SIMPLE_ADRESIRANE_NODE ADD CONSTRAINT FK_SIMPLE_ADRESIRANE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_CALC ADD CONSTRAINT FK_SIMPLE_CALC_CHILD_SIMPLE_ID FOREIGN KEY (CHILD_SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_CALC ADD CONSTRAINT FK_SIMPLE_CALC_SEL_ID FOREIGN KEY (CHILD_SEL_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE SIMPLE_CALC ADD CONSTRAINT FK_SIMPLE_CALC_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE SIMPLE_CALC_OLD ADD CONSTRAINT FK_CALC_OLD_CHILD_SIMPLE_ID FOREIGN KEY (CHILD_SIMPLE_ID) REFERENCES SIMPLE (ID) ON UPDATE CASCADE;
ALTER TABLE SIMPLE_CALC_OLD ADD CONSTRAINT FK_CALC_OLD_SEL_ID FOREIGN KEY (CHILD_SEL_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE SIMPLE_CALC_OLD ADD CONSTRAINT FK_CALC_OLD_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE SIMPLE_CALC_OLD ADD CONSTRAINT FK_SIMPLE_CALC_OLD_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE SIMPLE_CENI ADD CONSTRAINT FK_SIMPLE_CENI_KLI_GROUP_ID FOREIGN KEY (KLI_GROUP_ID) REFERENCES KLI_GROUP (ID);
ALTER TABLE SIMPLE_CENI ADD CONSTRAINT FK_SIMPLE_CENI_SIMPLE_GR_ID FOREIGN KEY (SIMPLE_GR_ID) REFERENCES SIMPLE_GROUP (ID);
ALTER TABLE SIMPLE_CENI ADD CONSTRAINT FK_SIMPLE_CENI_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_CENI ADD CONSTRAINT FK_SIMPLE_CENI_SIMPLE_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE SIMPLE_EXPLANATORY ADD CONSTRAINT FK_SIMPLE_EXPLANATORY_1 FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_EXPLANATORY ADD CONSTRAINT FK_SIMPLE_EXPLANATORY_2 FOREIGN KEY (EXPL_ID) REFERENCES EXPLANATORY (ID);
ALTER TABLE SIMPLE_EXPLANATORY ADD CONSTRAINT FK_SIMPLE_EXPLANATORY_MARK_ID FOREIGN KEY (SIMPLE_MARK_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_KA_BIM ADD CONSTRAINT FK_SIMPLE_KA_BIM_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_KOD ADD CONSTRAINT FK_SIMPLE_KOD_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE SIMPLE_KOD ADD CONSTRAINT FK_SIMPLE_KOD_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE SIMPLE_MONTAGE ADD CONSTRAINT FK_SIMPLE_MONTAGE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_OBSERV ADD CONSTRAINT FK_SIMPLE_OBSERV_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_PICT ADD CONSTRAINT FK_SIMPLE_PICT_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_PROP_NODE ADD CONSTRAINT FK_SIMPLE_PROP_NODE_MAJOR_ID FOREIGN KEY (MAJOR_PROP_ID) REFERENCES SIMPLE_PROP (ID);
ALTER TABLE SIMPLE_PROP_NODE ADD CONSTRAINT FK_SIMPLE_PROP_NODE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE SIMPLE_RAZ ADD CONSTRAINT FK_SIMPLE_RAZ_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_SKLAD_KOD ADD CONSTRAINT FK_SIMPLE_SKLAD_KOD_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_SKLAD_KOD ADD CONSTRAINT FK_SIMPLE_SKLAD_KOD_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE SIMPLE_TABLE_PRICES ADD CONSTRAINT FK_SIMPLE_TABLE_PRICES_SIMPLE_I FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE SIMPLE_TABLE_PRICES ADD CONSTRAINT FK_SIM_TBL_PRICES_SEL_SIMPLE_ID FOREIGN KEY (SELECT_SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE SIMPLE_TRACKER ADD CONSTRAINT FK_SIMPLE_TRACKER_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SIMPLE_ZAETOST ADD CONSTRAINT FK_SIMPLE_ZAETOST_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SKLAD ADD CONSTRAINT FK_SKLAD_CL_MOVE_ID FOREIGN KEY (CL_MOVE_ID) REFERENCES CENOVA_LISTA (ID) ON DELETE SET NULL;
ALTER TABLE SKLAD ADD CONSTRAINT FK_SKLAD_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE SKLAD ADD CONSTRAINT FK_SKLAD_OWNER_ID FOREIGN KEY (OWNER_ID) REFERENCES OWNER (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE SKLAD ADD CONSTRAINT FK_SKLAD_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE SKLAD ADD CONSTRAINT FK_SKLAD_WAREHOUSE_MAP_ID FOREIGN KEY (WAREHOUSE_MAP_ID) REFERENCES WAREHOUSE_BASE_MAP (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE SKLAD_MOL ADD CONSTRAINT FK_SKLAD_MOL_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE SKLAD_MOL ADD CONSTRAINT FK_SKLAD_MOL_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE SKLAD_SELEKCIQ_NODE ADD CONSTRAINT FK_SKLAD_SELEKCIQ_NODE_ID_SELEK FOREIGN KEY (ID_SELEKCIQ) REFERENCES SELEKCIQ (ID) ON DELETE CASCADE;
ALTER TABLE SKLAD_SELEKCIQ_NODE ADD CONSTRAINT FK_SKLAD_SELEKCIQ_NODE_ID_SKLAD FOREIGN KEY (ID_SKLAD) REFERENCES SKLAD (ID);
ALTER TABLE SLEDI_KLI ADD CONSTRAINT FK_SLEDI_KLI_ATON_KLI_ID FOREIGN KEY (ATON_KLI) REFERENCES KLI (ID);
ALTER TABLE SLEDI_LICENZ ADD CONSTRAINT FK_SLEDI_LICENZ_OT_OPR_ID FOREIGN KEY (OT_OPR_ID) REFERENCES OPR (ID);
ALTER TABLE SLEDI_SIMPLE ADD CONSTRAINT FK_SLEDI_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SLEDI_TEMPLATE_EL ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SLEDI_TEMPLATE_EL ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_S_ID FOREIGN KEY (S_ID) REFERENCES SERIAL_NUM (ID);
ALTER TABLE SLEDI_TEMPLATE_EL ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_TEMPL_ID FOREIGN KEY (TEMPLATE_ID) REFERENCES OPR_TEMPLATE (ID);
ALTER TABLE SLEDI_TEMPLATE_EL_GEN ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_GEN_DIST FOREIGN KEY (DISTRIBUTOR_KLI_ID) REFERENCES KLI (ID);
ALTER TABLE SLEDI_TEMPLATE_EL_GEN ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_GEN_SIMPLE FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE SLEDI_TEMPLATE_EL_GEN ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_GEN_SN_ID FOREIGN KEY (S_ID) REFERENCES SERIAL_NUM (ID);
ALTER TABLE SLEDI_TEMPLATE_EL_GEN ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_GEN_STE_ID FOREIGN KEY (STE_ID) REFERENCES SLEDI_TEMPLATE_EL (ID);
ALTER TABLE SLEDI_TEMPLATE_EL_GEN ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_GEN_TEMPL1 FOREIGN KEY (TEMPLATE_ID) REFERENCES OPR_TEMPLATE (ID);
ALTER TABLE SLEDI_TEMPLATE_EL_GEN ADD CONSTRAINT FK_SLEDI_TEMPLATE_EL_GEN_TEMPL2 FOREIGN KEY (TEMPLATE_GEN_ID) REFERENCES OPR_TEMPLATE_GEN (ID);
ALTER TABLE SLEDI_TEMPLATE_LIZING ADD CONSTRAINT FK_SLEDI_TEMPLATE_LIZING_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE SLEDI_TEMPLATE_LIZING ADD CONSTRAINT FK_SLEDI_TEMPLATE_LIZING_S_T_ID FOREIGN KEY (SLEDI_TEMPLATE_EL_ID) REFERENCES SLEDI_TEMPLATE_EL (ID);
ALTER TABLE SLEDI_TEMPLATE_PROMO ADD CONSTRAINT FK_SLEDI_TEMPLATE_PROMO_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE SLEDI_TEMPLATE_PROMO ADD CONSTRAINT FK_SLEDI_TEMPLATE_PROMO_S_T_ID FOREIGN KEY (SLEDI_TEMPLATE_EL_ID) REFERENCES SLEDI_TEMPLATE_EL (ID);
ALTER TABLE STORE_OBJ ADD CONSTRAINT FK_STORE_OBJ_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE STORE_OBJ ADD CONSTRAINT FK_STORE_OBJ_PRICE_LIST_ID FOREIGN KEY (PRICE_LIST_ID) REFERENCES CENOVA_LISTA (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE STORE_OBJ ADD CONSTRAINT FK_STORE_OBJ_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE STORE_OTC ADD CONSTRAINT FK_STORE_OTC_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE STORE_OTC ADD CONSTRAINT FK_STORE_OTC_OTCS_ID FOREIGN KEY (OTCS_ID) REFERENCES TS_OTC_FILES (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE STORNO ADD CONSTRAINT FK_STORNO_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE STORNO ADD CONSTRAINT FK_STORNO_REASON_ID FOREIGN KEY (REASON_ID) REFERENCES STORNO_REASON (ID);
ALTER TABLE STORNO ADD CONSTRAINT FK_STORNO_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE SUMI ADD CONSTRAINT FK_SUMI_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE SYSTEM ADD CONSTRAINT FK_SYSTEM_OWNER_ID FOREIGN KEY (ACTIVE_OWNER_ID) REFERENCES OWNER (ID);
ALTER TABLE TABLE_PRICES_DISCOUNTS ADD CONSTRAINT FK_TBL_PRICES_DISC_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TABLE_PRICES_DISCOUNTS ADD CONSTRAINT FK_TBL_PRICES_DISC_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TABLE_PRICE_COEFICIENT ADD CONSTRAINT FK_TABLE_PRICE_COEF_MASTER_ID FOREIGN KEY (MASTER_SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TABLE_PRICE_COEFICIENT ADD CONSTRAINT FK_TABLE_PRICE_COEF_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TABLE_PRICE_SIMPLE_NODE ADD CONSTRAINT FK_TBL_PRICE_SIM_NODE_PRICE_ID FOREIGN KEY (PRICE_ID) REFERENCES SIMPLE_TABLE_PRICES (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TABLE_PRICE_SIMPLE_NODE ADD CONSTRAINT FK_TBL_PRICE_SIM_NODE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_KLI FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_OBEKT_FAK_ID FOREIGN KEY (OBEKT_FAK_ID) REFERENCES OBEKT (ID);
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_TASK_TIP FOREIGN KEY (TASKS_TIP_ID) REFERENCES TASKS_TIP (ID);
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_TMP_OPR_ID FOREIGN KEY (TMP_OPR_ID) REFERENCES TMP_OPR (ID);
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE TASKS_EL ADD CONSTRAINT FK_TASKS_EL_EL_GEN_ID FOREIGN KEY (EL_GEN_ID) REFERENCES SLEDI_TEMPLATE_EL_GEN (ID);
ALTER TABLE TASKS_EL ADD CONSTRAINT FK_TASKS_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE TASKS_EL ADD CONSTRAINT FK_TASKS_EL_TASKS_ID FOREIGN KEY (TASKS_ID) REFERENCES TASKS (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT FK_TBL_KA_DAN_PLACE_ID FOREIGN KEY (DAN_PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT FK_TBL_KA_FIRMA_ID FOREIGN KEY (FIRMA_ID) REFERENCES FIRMI (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT FK_TBL_KA_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT FK_TBL_KA_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT FK_TBL_KA_OBEKT_PLACE_ID FOREIGN KEY (OBEKT_PLACE_ID) REFERENCES PLACE (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT FK_TBL_KA_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE TBL_KA ADD CONSTRAINT FK_TBL_KA_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE TBL_KA_OPR_LOG ADD CONSTRAINT FK_TBL_KA_OPR_LOG_KA_ID FOREIGN KEY (KA_ID) REFERENCES TBL_KA (ID) ON DELETE CASCADE;
ALTER TABLE TBL_KA_OPR_LOG ADD CONSTRAINT FK_TBL_KA_OPR_LOG_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE TBL_KA_OPR_LOG ADD CONSTRAINT FK_TBL_KA_OPR_LOG_OPR_ID_PROD FOREIGN KEY (OPR_ID_PROD) REFERENCES OPR (ID);
ALTER TABLE TBL_KA_OPR_LOG ADD CONSTRAINT FK_TBL_KA_OPR_LOG_OPR_PROD_ID FOREIGN KEY (OPR_ID_PROD) REFERENCES OPR (ID);
ALTER TABLE TBL_KA_OPR_LOG ADD CONSTRAINT FK_TBL_KA_OPR_LOG_SERV_USER_ID FOREIGN KEY (SERV_USER_ID) REFERENCES "USER" (ID);
ALTER TABLE TBL_KA_OPR_NODE ADD CONSTRAINT FK_TBL_KA_OPR_NODE_KA_ID FOREIGN KEY (KA_ID) REFERENCES TBL_KA (ID) ON DELETE CASCADE;
ALTER TABLE TBL_KA_OPR_NODE ADD CONSTRAINT FK_TBL_KA_OPR_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE TBL_KA_OPR_NODE ADD CONSTRAINT FK_TBL_KA_OPR_NODE_SERV_USER_ID FOREIGN KEY (SERV_USER_ID) REFERENCES "USER" (ID);
ALTER TABLE TBL_KA_STOP_SIM_NODE ADD CONSTRAINT FK_TBL_KA_STOP_SIM_NODE_KA FOREIGN KEY (KA_ID) REFERENCES TBL_KA (ID);
ALTER TABLE TBL_KA_STOP_SIM_NODE ADD CONSTRAINT FK_TBL_KA_STOP_SIM_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE TBL_LOG ADD CONSTRAINT FK_TBL_LOG_PC FOREIGN KEY (PC_ID) REFERENCES INI (ID);
ALTER TABLE TBL_LOG ADD CONSTRAINT FK_TBL_LOG_USER FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE TEMP$PROD_FOR_ANNUL ADD CONSTRAINT FK_TEMP$PROD_FOR_ANNUL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TEMPLATE_OPER_REL ADD CONSTRAINT FK_TEMPLATE_OPER_REL_1 FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE TEMPLATE_OPER_REL ADD CONSTRAINT FK_TEMPLATE_OPER_REL_2 FOREIGN KEY (ALLOW_USER_ID) REFERENCES "USER" (ID);
ALTER TABLE TMP_MARK_EL ADD CONSTRAINT FK_TMP_MARK_EL_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE TMP_MARK_EL ADD CONSTRAINT FK_TMP_MARK_EL_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE TMP_MARK_EL ADD CONSTRAINT FK_TMP_MARK_EL_TMP_OPR_ID FOREIGN KEY (TMP_OPR_ID) REFERENCES TMP_OPR (ID);
ALTER TABLE TMP_OMZ_SIM ADD CONSTRAINT FK_TMP_OMZ_SIM_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON DELETE CASCADE;
ALTER TABLE TMP_OPR ADD CONSTRAINT FK_TMP_OPR_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE TMP_OPR ADD CONSTRAINT FK_TMP_OPR_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE TMP_OPR ADD CONSTRAINT FK_TMP_OPR_UNP_ID FOREIGN KEY (UNP_ID) REFERENCES UNP (ID) ON UPDATE CASCADE;
ALTER TABLE TMP_OPR_SN ADD CONSTRAINT FK_TMP_OPR_SN_OPR_ID FOREIGN KEY (TMP_OPR_ID) REFERENCES TMP_OPR (ID);
ALTER TABLE TMP_SIMPLE_SEL_PROD1 ADD CONSTRAINT FK_TMP_SIMPLE_SEL_PROD1_1 FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE TMP_SIMPLE_SEL_PROD1 ADD CONSTRAINT FK_TMP_SIMPLE_SEL_PROD1_2 FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE UNFINISHED_SALES ADD CONSTRAINT FK_UNFINISHED_SALES_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID) ON UPDATE CASCADE;
ALTER TABLE UNP ADD CONSTRAINT FK_UNP_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON UPDATE CASCADE;
ALTER TABLE UNR_AGENT_ANALYSES ADD CONSTRAINT FK_UNR_AGENT_ANALYSES_AGENT_ID FOREIGN KEY (AGENT_ID) REFERENCES UNR_AGENT (ID);
ALTER TABLE UNR_AGENT_ANALYSES ADD CONSTRAINT FK_UNR_AGENT_ANALYSES_ANLS_ID FOREIGN KEY (ANALYSES_ID) REFERENCES UNR_ANALYSES (ID) ON DELETE CASCADE;
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT FK_UNR_ANALYSES_AGENT_ID FOREIGN KEY (AGENT_ID) REFERENCES UNR_AGENT (ID);
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT FK_UNR_ANALYSES_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES UNR_GROUP (ID);
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT FK_UNR_ANALYSES_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT FK_UNR_ANALYSES_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT FK_UNR_ANALYSES_OUT_EL_ID FOREIGN KEY (OUT_EL_ID) REFERENCES OUT_EL (ID) ON DELETE CASCADE;
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT FK_UNR_ANALYSES_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE UNR_ANALYSES ADD CONSTRAINT FK_UNR_ANALYSES_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE UNR_GROUP_SIMPLE ADD CONSTRAINT FK_UNR_GROUP_SIMPLE_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES UNR_GROUP (ID);
ALTER TABLE UNR_GROUP_SIMPLE ADD CONSTRAINT FK_UNR_GROUP_SIMPLE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE UNR_KLI_AGENT ADD CONSTRAINT FK_UNR_KLI_AGENT_AGENT_ID FOREIGN KEY (AGENT_ID) REFERENCES UNR_AGENT (ID);
ALTER TABLE UNR_KLI_AGENT ADD CONSTRAINT FK_UNR_KLI_AGENT_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE UNR_KLI_AGENT_2 ADD CONSTRAINT FK_UNR_KLI_AGENT_AGENT_2_ID FOREIGN KEY (AGENT_ID) REFERENCES UNR_AGENT (ID);
ALTER TABLE UNR_KLI_AGENT_2 ADD CONSTRAINT FK_UNR_KLI_AGENT_KLI_2_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE UNR_KOEF_NODE ADD CONSTRAINT FK_UNR_KOEF_NODE_AGENT_ID FOREIGN KEY (AGENT_ID) REFERENCES UNR_AGENT (ID);
ALTER TABLE UNR_KOEF_NODE ADD CONSTRAINT FK_UNR_KOEF_NODE_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES UNR_GROUP (ID);
ALTER TABLE "USER" ADD CONSTRAINT FK_USER_DEF_KASA_ID FOREIGN KEY (DEF_KASA_ID) REFERENCES KASA (ID);
ALTER TABLE "USER" ADD CONSTRAINT FK_USER_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE "USER" ADD CONSTRAINT FK_USER_USER_ID FOREIGN KEY (USER_RIGHTS_ID) REFERENCES "USER" (ID);
ALTER TABLE "USER" ADD CONSTRAINT FK_USER_USER_SCHEMA_ID FOREIGN KEY (USER_SCHEMA_ID) REFERENCES USER_SCHEMAS (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE USER_KASA_NODE ADD CONSTRAINT FK_USER_KASA_NODE_KASA_ID FOREIGN KEY (KASA_ID) REFERENCES KASA (ID);
ALTER TABLE USER_KASA_NODE ADD CONSTRAINT FK_USER_KASA_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE;
ALTER TABLE USER_OBEKT_NODE ADD CONSTRAINT FK_USER_OBEKT_NODE_OBEKT_ID FOREIGN KEY (OBEKT_ID) REFERENCES OBEKT (ID);
ALTER TABLE USER_ROLES_EL ADD CONSTRAINT FK_USER_ROLES_EL_ROLE_ID FOREIGN KEY (ROLE_ID) REFERENCES ONLINE_ROLES (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE USER_ROLES_EL ADD CONSTRAINT FK_USER_ROLES_EL_SCHEMA_ID FOREIGN KEY (SCHEMA_ID) REFERENCES USER_SCHEMAS (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE USER_SEL_NODE ADD CONSTRAINT FK_USER_SEL_NODE_SEL_ID FOREIGN KEY (SEL_ID) REFERENCES SELEKCIQ (ID);
ALTER TABLE USER_SEL_NODE ADD CONSTRAINT FK_USER_SEL_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID);
ALTER TABLE USER_SKLAD_NAL_NODE ADD CONSTRAINT FK_USER_SKLAD_NAL_NODE_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE USER_SKLAD_NAL_NODE ADD CONSTRAINT FK_USER_SKLAD_NAL_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE USER_SKLAD_NODE ADD CONSTRAINT FK_USER_SKLAD_NODE_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE USER_SKLAD_NODE ADD CONSTRAINT FK_USER_SKLAD_NODE_USER_ID FOREIGN KEY (USER_ID) REFERENCES "USER" (ID) ON DELETE CASCADE;
ALTER TABLE VISIT ADD CONSTRAINT FK_VISIT_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE VISIT_EL ADD CONSTRAINT FK_VISIT_EL_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE VISIT_EL ADD CONSTRAINT FK_VISIT_EL_VISIT_OPR_ID FOREIGN KEY (VISIT_OPR_ID) REFERENCES OPR (ID) ON DELETE CASCADE;
ALTER TABLE VISIT_EL ADD CONSTRAINT FK_VISIT_EL_VISIT_TYPE_ID FOREIGN KEY (VISIT_TYPE_ID) REFERENCES VISIT_TYPE (ID) ON DELETE CASCADE;
ALTER TABLE WAREHOUSE_BASE_MAP ADD CONSTRAINT FK_WAREHOUSE_BASE_MAP_PARENT_ID FOREIGN KEY (PARENT_ID) REFERENCES WAREHOUSE_BASE_MAP (ID) ON UPDATE CASCADE;
ALTER TABLE WUERTH_SIMPLE ADD CONSTRAINT FK_WUERTH_SIMPLE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA ADD CONSTRAINT FK_ZAIAVKA_DOSTAVKA_KLI_ID FOREIGN KEY (KLI_ID) REFERENCES KLI (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA ADD CONSTRAINT FK_ZAIAVKA_DOSTAVKA_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID)
  USING INDEX FK_ZAIAVKA_DOSTAVKA_OPR;
ALTER TABLE ZAIAVKA_DOSTAVKA ADD CONSTRAINT FK_ZAIAVKA_DOSTAVKA_RAZ_ID FOREIGN KEY (RAZFASOVKA_ID) REFERENCES RAZFASOVKA (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA ADD CONSTRAINT FK_ZAIAVKA_DOSTAVKA_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA ADD CONSTRAINT FK_ZAIAVKA_DOSTAVKA_SKLAD_ID FOREIGN KEY (SKLAD_ID) REFERENCES SKLAD (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA_NODE ADD CONSTRAINT FK_Z_D_NODE_OPR_ID FOREIGN KEY (OPR_ID) REFERENCES OPR (ID);
ALTER TABLE ZAIAVKA_DOSTAVKA_NODE ADD CONSTRAINT FK_Z_D_NODE_OPR_ID_OB FOREIGN KEY (OPR_ID_OB) REFERENCES OPR (ID);
ALTER TABLE ZD_DOST_MOVE_NODE ADD CONSTRAINT FK_ZD_DOST_MOVE_NODE_OPR_ID FOREIGN KEY (OPR_ID_DOST_MOVE) REFERENCES OPR (ID);
ALTER TABLE ZD_DOST_MOVE_NODE ADD CONSTRAINT FK_ZD_DOST_MOVE_NODE_OPR_ID_ZD FOREIGN KEY (OPR_ID_ZD) REFERENCES OPR (ID);
ALTER TABLE ZD_DOST_MOVE_NODE ADD CONSTRAINT FK_ZD_DOST_MOVE_NODE_SIMPLE_ID FOREIGN KEY (SIMPLE_ID) REFERENCES SIMPLE (ID);
ALTER TABLE ZD_POR_NODE ADD CONSTRAINT FK_ZD_POR_NODE_OPR_ID_ZD FOREIGN KEY (OPR_ID_ZD) REFERENCES OPR (ID);
ALTER TABLE ZD_POR_NODE ADD CONSTRAINT FK_ZD_POR_NODE_POR_EL_ID FOREIGN KEY (POR_EL_ID) REFERENCES POR_EL (ID);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX IDX_BARCODE_BARCODE ON BARCODE (BARCODE);
CREATE DESCENDING INDEX BONUS_CENA_TOCHKI_DTOT_DTDO ON BONUS_CENA_TOCHKI (OTDT, DODT);
CREATE INDEX CENOVA_LISTA_EL_IDX1 ON CENOVA_LISTA_EL (SIMPLE_ID);
CREATE INDEX IDX_CFG_LOG_1 ON CFG_LOG (TABLE_CODE);
CREATE DESCENDING INDEX IDX_CFG_LOG_2 ON CFG_LOG (DATETIME);
CREATE INDEX IDX_COURSES_1 ON COURSES (COURSE_DATE);
CREATE INDEX DOCUMENTS_OPR_ID ON DOCUMENTS (RECORD_ID);
CREATE INDEX IDX_FAK_KI_NUMBER_NUMBER ON FAK_KI_NUMBER (NUMBER);
CREATE INDEX IDX_FIRMI_1 ON FIRMI (BULSTAT);
CREATE INDEX IDX_IN_PAY_TIP ON "IN" (PAY_TIP);
CREATE INDEX IDX_KLI_CODE ON KLI (CODE);
CREATE INDEX IDX_KLI_DOST ON KLI (DOSTAV);
CREATE INDEX IDX_KLI_KLI ON KLI (KLIENT);
CREATE INDEX IDX_KLI_LIST_ID ON KLI (LIST_ID);
CREATE INDEX IDX_KLI_AGENT_CODE ON KLI_AGENTS (CODE);
CREATE DESCENDING INDEX IDX_LOG_CENI_DDS_1 ON LOG_CENI_DDS (DATETIME);
CREATE INDEX IDX_LOG_CENI_DDS_2 ON LOG_CENI_DDS (TIP_DDS);
CREATE INDEX METRO_ARTICLES_IDX_SUBSYS_ID ON METRO_ARTICLES (SUB_SYS_ID);
CREATE INDEX IDX_OFFERS_2 ON OFFERS COMPUTED BY (iif(status = 1, 0, 1));
CREATE INDEX IDX_OPR_OPR_DATE ON OPR (OPR_DATE);
CREATE DESCENDING INDEX IDX_OPR_OPR_DATE_DESC ON OPR (OPR_DATE);
CREATE INDEX OPR_DATETIME ON OPR (DATETIME);
CREATE INDEX OPR_SUMA ON OPR (SUMA);
CREATE INDEX IDX_ORDER_ACTIONS_1 ON ORDER_ACTIONS (DT);
CREATE INDEX IDX_OUT_CODE ON OUT (CODE);
CREATE INDEX IDX_OUT_PAY_TIP ON OUT (PAY_TIP);
CREATE INDEX IDX_PARI_FAK_NODE_NODE_ID ON PARI_FAK_NODE (NODE_ID);
CREATE INDEX IDX_PARI_FAK_NODE_SUMA ON PARI_FAK_NODE (SUMA);
CREATE DESCENDING INDEX IDX_PARTIDA_NAL_IN_EL_ID ON PARTIDA_NAL COMPUTED BY (IIF(KOL > 0.00,IN_EL_ID,NULL));
CREATE INDEX PARTIDA_NAL_KOL ON PARTIDA_NAL (KOL);
CREATE INDEX IDX_PAYMENT_1 ON PAYMENT (NUMBER);
CREATE INDEX PN_TMP_SIMPLE_ID ON PN_TMP (PN_SIMPLE_ID);
CREATE INDEX IDX_POR_TAG ON POR (TAG);
CREATE INDEX IDX_POR_ZA_DATA ON POR (ZA_DATA);
CREATE INDEX POR_STATUS ON POR (STATUS);
CREATE INDEX SEL_OBEKT_QR_SEL_ID ON SEL_OBEKT_QR (SEL_ID);
CREATE INDEX IDX_SIMPLE_CODE ON SIMPLE (CODE);
CREATE INDEX IDX_SLEDI_KLI_1 ON SLEDI_KLI (SLEDI_KLI);
CREATE INDEX TBL_LOG_DT ON TBL_LOG (DATETIME);
CREATE INDEX TBL_LOG_TBL ON TBL_LOG (TABLE_NAME);
CREATE INDEX IDX_NUMBER_NUMBER ON TEMP$PROD_TO_FAK (NUMBER);
CREATE INDEX TEMP$SLEDI_DATA_IDX1 ON TEMP$SLEDI_DATA (IMEI);
CREATE INDEX IDX_TMP_ELTRADE_IMPORT_1 ON TMP_ELTRADE_IMPORT (E_PRODUCT_ID);
CREATE INDEX IDX_TMP_NAL_SIMPLE_ID ON TMP_NAL (SIMPLE_ID);
CREATE INDEX TMP_NAL_SKLAD_ID ON TMP_NAL (SKLAD_ID);
CREATE INDEX IDX_TMP_PARTIDA_ID ON TMP_PARTIDA_RZV_KOL (PARTIDA_ID);
CREATE INDEX IDX_TMP_REPLEACE_SIMPLE ON TMP_REPLEACE_SIMPLE (OPR_ID);
CREATE INDEX IDX_TMP_SEL_1 ON TMP_SEL_1 (ID);
CREATE INDEX IDX_TMP_SEL_2 ON TMP_SEL_2 (ID);
CREATE INDEX IDX_TMP_SEL_3 ON TMP_SEL_3 (ID);
CREATE INDEX IDX_SIMPLE_RECLALC_SIMPLE_ID ON TMP_SIMPLE_RECALC (SIMPLE_ID);
CREATE INDEX FK_UNFINISHED_SALES_OPR_ID ON UNFINISHED_SALES (OPR_ID);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: AMBALAJ_BI */
CREATE TRIGGER AMBALAJ_BI FOR AMBALAJ
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_AMBALAJ_ID,1);
END
^


/* Trigger: AMBALAJ_HISTORY_EDIT_BI */
CREATE TRIGGER AMBALAJ_HISTORY_EDIT_BI FOR AMBALAJ_HISTORY_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN   IF (NEW.ID IS NULL) THEN     NEW.ID = GEN_ID(GEN_AMBALAJ_HISTORY_EDIT_ID,1); END
^


/* Trigger: ANALYSES_BI */
CREATE TRIGGER ANALYSES_BI FOR ANALYSES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_ANALYSES_ID, 1); 
END
^


/* Trigger: BARCODE_BI */
CREATE TRIGGER BARCODE_BI FOR BARCODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_BARCODE_ID,1);
END
^


/* Trigger: BARCODE_LOG_AD103 */
CREATE TRIGGER BARCODE_LOG_AD103 FOR BARCODE
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'SIMPLE_ID', 'D', CAST(OLD."SIMPLE_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'BARCODE', 'D', CAST(OLD."BARCODE" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'KOL', 'D', CAST(OLD."KOL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null); END
^


/* Trigger: BARCODE_LOG_AI103 */
CREATE TRIGGER BARCODE_LOG_AI103 FOR BARCODE
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('BARCODE', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', null, 'SIMPLE_ID', 'I', null, CAST(NEW."SIMPLE_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', null, 'BARCODE', 'I', null, CAST(NEW."BARCODE" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', null, 'KOL', 'I', null, CAST(NEW."KOL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300)); END
^


/* Trigger: BARCODE_LOG_AU103 */
CREATE TRIGGER BARCODE_LOG_AU103 FOR BARCODE
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'SIMPLE_ID', 'U', CAST(OLD."SIMPLE_ID" AS DOM_CHAR_300), CAST(NEW.SIMPLE_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'BARCODE', 'U', CAST(OLD."BARCODE" AS DOM_CHAR_300), CAST(NEW.BARCODE AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'KOL', 'U', CAST(OLD."KOL" AS DOM_CHAR_300), CAST(NEW.KOL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('BARCODE', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300)); END
^


/* Trigger: BH_OTSTAPKI_BI */
CREATE TRIGGER BH_OTSTAPKI_BI FOR BH_OTSTAPKI
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_bh_otstapki_id,1); 
end
^


/* Trigger: BH_PROD_POR_BI */
CREATE TRIGGER BH_PROD_POR_BI FOR BH_PROD_POR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_BH_PROD_POR_ID,1); 
END
^


/* Trigger: BONUS_CONFIG_BI */
CREATE TRIGGER BONUS_CONFIG_BI FOR BONUS_CONFIG
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_bonus_config_id,1); 
end
^


/* Trigger: BONUS_CONFIG_SKLAD_BI */
CREATE TRIGGER BONUS_CONFIG_SKLAD_BI FOR BONUS_CONFIG_SKLAD
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_bonus_config_sklad_id,1); 
end
^


/* Trigger: BONUS_KLI_USED_BI */
CREATE TRIGGER BONUS_KLI_USED_BI FOR BONUS_KLI_USED
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_BONUS_KLI_USED_ID,1); 
 
  IF (NEW.DT IS NULL) THEN 
    NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: BROENE_EL_DETAILS_BI */
CREATE TRIGGER BROENE_EL_DETAILS_BI FOR BROENE_EL_DETAILS
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.ID is null) then 
    new.ID = gen_id(GEN_BROENE_EL_DETAILS_ID,1); 
end
^


/* Trigger: BROENE_EL_RAZ_NODE_BI */
CREATE TRIGGER BROENE_EL_RAZ_NODE_BI FOR BROENE_EL_RAZ_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_BROENE_EL_RAZ_NODE_ID,1); 
END
^


/* Trigger: CENOVA_LISTA_BI */
CREATE TRIGGER CENOVA_LISTA_BI FOR CENOVA_LISTA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_ID,1); 
 
  if (new.IS_PROMOTIONAL is NULL) then 
    new.IS_PROMOTIONAL = 0; 
END
^


/* Trigger: CENOVA_LISTA_EDIT_BI */
CREATE TRIGGER CENOVA_LISTA_EDIT_BI FOR CENOVA_LISTA_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_EDIT_ID,1); 
 
  IF (NEW.IS_PROMOTIONAL IS NULL) THEN 
    NEW.IS_PROMOTIONAL = 0; 
END
^


/* Trigger: CENOVA_LISTA_EL_BI */
CREATE TRIGGER CENOVA_LISTA_EL_BI FOR CENOVA_LISTA_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_CENOVA_LISTA_EL_ID,1); 
 
    IF (NEW.FLAG_LOCK IS NULL) THEN 
        NEW.FLAG_LOCK = 0; 
 
    IF (NEW.DT_ADD IS NULL) THEN 
        NEW.DT_ADD = CURRENT_TIMESTAMP; 
END
^


/* Trigger: CENOVA_LISTA_EL_EDIT_BI */
CREATE TRIGGER CENOVA_LISTA_EL_EDIT_BI FOR CENOVA_LISTA_EL_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_EL_EDIT_ID,1);
END
^


/* Trigger: CENOVA_LISTA_HISTORY_BI */
CREATE TRIGGER CENOVA_LISTA_HISTORY_BI FOR CENOVA_LISTA_HISTORY
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_HISTORY_ID,1);
END
^


/* Trigger: CENOVA_LISTA_KLI_BI */
CREATE TRIGGER CENOVA_LISTA_KLI_BI FOR CENOVA_LISTA_KLI
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_KLI_ID,1);
END
^


/* Trigger: CENOVA_LISTA_KLI_EDIT_BI */
CREATE TRIGGER CENOVA_LISTA_KLI_EDIT_BI FOR CENOVA_LISTA_KLI_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_KLI_EDIT_ID,1);
END
^


/* Trigger: CENOVA_LISTA_PROTOKOL_BI */
CREATE TRIGGER CENOVA_LISTA_PROTOKOL_BI FOR CENOVA_LISTA_PROTOKOL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_PROTOKOL_ID,1);

  NEW.protokol = NEW.ID;
END
^


/* Trigger: CENOVA_LISTA_SKLAD_BI */
CREATE TRIGGER CENOVA_LISTA_SKLAD_BI FOR CENOVA_LISTA_SKLAD
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_SKLAD_ID,1);
END
^


/* Trigger: CENOVA_LISTA_SKLAD_EDIT_BI */
CREATE TRIGGER CENOVA_LISTA_SKLAD_EDIT_BI FOR CENOVA_LISTA_SKLAD_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CENOVA_LISTA_SKLAD_EDIT_ID,1);
END
^


/* Trigger: CFG_FAK_ACCOUNTING_BI */
CREATE TRIGGER CFG_FAK_ACCOUNTING_BI FOR CFG_FAK_ACCOUNTING
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CFG_FAK_ACCOUNTING_ID,1); 
END
^


/* Trigger: CFG_INFO_BI */
CREATE TRIGGER CFG_INFO_BI FOR CFG_INFO
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.ID is null) then 
    new.ID = gen_id(GEN_CFG_INFO_ID,1); 
end
^


/* Trigger: CFG_KASA_TEMPLATE_BI */
CREATE TRIGGER CFG_KASA_TEMPLATE_BI FOR CFG_KASA_TEMPLATE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN BEGIN 
    NEW.ID = GEN_ID(GEN_CFG_KASA_TEMPLATE_ID,1); 
    NEW.ERASED = 0; 
   END 
END
^


/* Trigger: CFG_KASA_TEMPLATE_EL_BI */
CREATE TRIGGER CFG_KASA_TEMPLATE_EL_BI FOR CFG_KASA_TEMPLATE_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CFG_KASA_TEMPLATE_EL_ID,1); 
END
^


/* Trigger: CFG_LOG_AI */
CREATE TRIGGER CFG_LOG_AI FOR CFG_LOG
ACTIVE AFTER INSERT POSITION 0
AS
begin
  POST_EVENT 'CFG_LOG_REFRESH';
end
^


/* Trigger: CFG_LOG_AI0 */
CREATE TRIGGER CFG_LOG_AI0 FOR CFG_LOG
ACTIVE AFTER INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.TABLE_CODE = 3) THEN BEGIN 
    UPDATE KLI SET KLI.CFG_LOG_ID = NEW.ID WHERE KLI.ID = NEW.OBJ_ID; 
  END 
END
^


/* Trigger: CFG_LOG_BI */
CREATE TRIGGER CFG_LOG_BI FOR CFG_LOG
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CFG_LOG_ID,1);
  IF (NEW.DATETIME IS NULL) THEN
    NEW.DATETIME = current_timestamp;
END
^


/* Trigger: CFG_OSN_DDS_BI */
CREATE TRIGGER CFG_OSN_DDS_BI FOR CFG_OSN_DDS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CFG_OSN_DDS_ID,1); 
END
^


/* Trigger: CFG_PAYMENTS_KLI_BI */
CREATE TRIGGER CFG_PAYMENTS_KLI_BI FOR CFG_PAYMENTS_KLI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CFG_PAYMENTS_KLI_ID,1); 
END
^


/* Trigger: CFG_PAYMENTS_LOG_AD103 */
CREATE TRIGGER CFG_PAYMENTS_LOG_AD103 FOR CFG_PAYMENTS
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'FISK', 'D', CAST(OLD."FISK" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'ATRIB', 'D', CAST(OLD."ATRIB" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'KASA_ID', 'D', CAST(OLD."KASA_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'CODE', 'D', CAST(OLD."CODE" AS DOM_CHAR_300), null); END
^


/* Trigger: CFG_PAYMENTS_LOG_AI103 */
CREATE TRIGGER CFG_PAYMENTS_LOG_AI103 FOR CFG_PAYMENTS
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', null, 'FISK', 'I', null, CAST(NEW."FISK" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', null, 'ATRIB', 'I', null, CAST(NEW."ATRIB" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', null, 'KASA_ID', 'I', null, CAST(NEW."KASA_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', null, 'CODE', 'I', null, CAST(NEW."CODE" AS DOM_CHAR_300)); END
^


/* Trigger: CFG_PAYMENTS_LOG_AU103 */
CREATE TRIGGER CFG_PAYMENTS_LOG_AU103 FOR CFG_PAYMENTS
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'FISK', 'U', CAST(OLD."FISK" AS DOM_CHAR_300), CAST(NEW.FISK AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'ATRIB', 'U', CAST(OLD."ATRIB" AS DOM_CHAR_300), CAST(NEW.ATRIB AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'KASA_ID', 'U', CAST(OLD."KASA_ID" AS DOM_CHAR_300), CAST(NEW.KASA_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('CFG_PAYMENTS', OLD.ID, 'CODE', 'U', CAST(OLD."CODE" AS DOM_CHAR_300), CAST(NEW.CODE AS DOM_CHAR_300)); END
^


/* Trigger: CFG_VEZNI_BI */
CREATE TRIGGER CFG_VEZNI_BI FOR CFG_VEZNI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CFG_VEZNI_ID,1); 
END
^


/* Trigger: CLAIM_EL_BI */
CREATE TRIGGER CLAIM_EL_BI FOR CLAIM_EL
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_claim_el_id,1); 
end
^


/* Trigger: CLOTH_SIZE_BI */
CREATE TRIGGER CLOTH_SIZE_BI FOR CLOTH_SIZE
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_cloth_size_id,1); 
end
^


/* Trigger: CN_DELIVERY_ELEMENTS_BI */
CREATE TRIGGER CN_DELIVERY_ELEMENTS_BI FOR CN_DELIVERY_ELEMENTS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CN_DELIVERY_ELEMENTS_ID,1); 
END
^


/* Trigger: COMMENTS_BI */
CREATE TRIGGER COMMENTS_BI FOR COMMENTS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENTS_ID,1); 
  new.DATE_MODIFIED = CURRENT_TIMESTAMP; 
END
^


/* Trigger: COMMENTS_BU0 */
CREATE TRIGGER COMMENTS_BU0 FOR COMMENTS
ACTIVE BEFORE UPDATE POSITION 0
AS 
begin 
  /* Trigger text */ 
  new.DATE_MODIFIED = CURRENT_TIMESTAMP; 
end
^


/* Trigger: COMMENT_BI */
CREATE TRIGGER COMMENT_BI FOR COMMENT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_COMMENT_ID,1);
END
^


/* Trigger: COMMENT_EINVOICE_NODE_BI */
CREATE TRIGGER COMMENT_EINVOICE_NODE_BI FOR COMMENT_EINVOICE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENT_EINVOICE_NODE_ID,1); 
END
^


/* Trigger: COMMENT_FIRMI_NODE_AD0 */
CREATE TRIGGER COMMENT_FIRMI_NODE_AD0 FOR COMMENT_FIRMI_NODE
ACTIVE AFTER DELETE POSITION 0
AS 
begin 
  DELETE FROM COMMENTS WHERE COMMENTS.ID = OLD.COMMENT_ID; 
end
^


/* Trigger: COMMENT_FIRMI_NODE_BI */
CREATE TRIGGER COMMENT_FIRMI_NODE_BI FOR COMMENT_FIRMI_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENT_FIRMI_NODE_ID,1); 
END
^


/* Trigger: COMMENT_KLI_NODE_AD0 */
CREATE TRIGGER COMMENT_KLI_NODE_AD0 FOR COMMENT_KLI_NODE
ACTIVE AFTER DELETE POSITION 0
AS 
begin 
  DELETE FROM COMMENTS WHERE COMMENTS.ID = OLD.COMMENT_ID; 
end
^


/* Trigger: COMMENT_KLI_NODE_BI */
CREATE TRIGGER COMMENT_KLI_NODE_BI FOR COMMENT_KLI_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENT_KLI_NODE_ID,1); 
END
^


/* Trigger: COMMENT_OPR_NODE_AD0 */
CREATE TRIGGER COMMENT_OPR_NODE_AD0 FOR COMMENT_OPR_NODE
ACTIVE AFTER DELETE POSITION 0
AS 
begin 
  DELETE FROM COMMENTS WHERE COMMENTS.ID = OLD.COMMENT_ID; 
end
^


/* Trigger: COMMENT_OPR_NODE_BI */
CREATE TRIGGER COMMENT_OPR_NODE_BI FOR COMMENT_OPR_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENT_OPR_NODE_ID,1); 
END
^


/* Trigger: COMMENT_OPR_TEMPLATE_NODE_BI */
CREATE TRIGGER COMMENT_OPR_TEMPLATE_NODE_BI FOR COMMENT_OPR_TEMPLATE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENT_OPR_TMPLT_NODE_ID,1); 
END
^


/* Trigger: COMMENT_SIMPLE_NODE_AD0 */
CREATE TRIGGER COMMENT_SIMPLE_NODE_AD0 FOR COMMENT_SIMPLE_NODE
ACTIVE AFTER DELETE POSITION 0
AS 
begin 
  DELETE FROM COMMENTS WHERE COMMENTS.ID = OLD.COMMENT_ID; 
end
^


/* Trigger: COMMENT_SIMPLE_NODE_BI */
CREATE TRIGGER COMMENT_SIMPLE_NODE_BI FOR COMMENT_SIMPLE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENT_SIMPLE_NODE_ID,1); 
END
^


/* Trigger: COMMENT_TASKS_NODE_AD0 */
CREATE TRIGGER COMMENT_TASKS_NODE_AD0 FOR COMMENT_TASKS_NODE
ACTIVE AFTER DELETE POSITION 0
AS 
begin 
  DELETE FROM COMMENTS WHERE COMMENTS.ID = OLD.COMMENT_ID; 
end
^


/* Trigger: COMMENT_TASKS_NODE_BI */
CREATE TRIGGER COMMENT_TASKS_NODE_BI FOR COMMENT_TASKS_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COMMENT_TASKS_NODE_ID,1); 
END
^


/* Trigger: COUNTIES_BI */
CREATE TRIGGER COUNTIES_BI FOR COUNTIES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COUNTIES_ID,1); 
END
^


/* Trigger: COUNTRIES_BI */
CREATE TRIGGER COUNTRIES_BI FOR COUNTRIES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_COUNTRIES_ID,1); 
END
^


/* Trigger: CRM_ATON_PRODUKT_BI */
CREATE TRIGGER CRM_ATON_PRODUKT_BI FOR CRM_ATON_PRODUKT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_CRM_ATON_PRODUKT_ID,1); 
END
^


/* Trigger: CRM_INFO_LICENZIA_BI */
CREATE TRIGGER CRM_INFO_LICENZIA_BI FOR CRM_INFO_LICENZIA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_CRM_INFO_LICENZIA_ID, 1);

    NEW.STATUS = 0;
END
^


/* Trigger: DEF_RAZ_SIMPLE_BI */
CREATE TRIGGER DEF_RAZ_SIMPLE_BI FOR DEF_RAZ_SIMPLE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DEF_RAZ_SIMPLE_ID,1); 
END
^


/* Trigger: DELIVERY_CURRENCY_BI */
CREATE TRIGGER DELIVERY_CURRENCY_BI FOR DELIVERY_CURRENCY
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DELIVERY_CURRENCY_ID,1); 
END
^


/* Trigger: DOCUMENTS_TIP_BI */
CREATE TRIGGER DOCUMENTS_TIP_BI FOR DOCUMENTS_TIP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DOCUMENTS_TIP_ID,1); 
END
^


/* Trigger: DOCUMENTS_TIP_CODE_BI */
CREATE TRIGGER DOCUMENTS_TIP_CODE_BI FOR DOCUMENTS_TIP_CODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DOCUMENTS_TIP_CODE_ID,1); 
END
^


/* Trigger: DOC_BI */
CREATE TRIGGER DOC_BI FOR DOC
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DOC_ID,1); 
END
^


/* Trigger: DOST_CENI_BI */
CREATE TRIGGER DOST_CENI_BI FOR DOST_CENI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DOST_CENI_ID,1); 
END
^


/* Trigger: DOST_IMPORT_KLI_MAP_BI */
CREATE TRIGGER DOST_IMPORT_KLI_MAP_BI FOR DOST_IMPORT_KLI_MAP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DOST_IMPORT_KLI_MAP_ID,1); 
END
^


/* Trigger: DOST_IMPORT_RAZF_MAP_BI */
CREATE TRIGGER DOST_IMPORT_RAZF_MAP_BI FOR DOST_IMPORT_RAZF_MAP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DOST_IMPORT_RAZF_MAP_ID,1); 
END
^


/* Trigger: DOST_IMPORT_SIMPLE_MAP_BI */
CREATE TRIGGER DOST_IMPORT_SIMPLE_MAP_BI FOR DOST_IMPORT_SIMPLE_MAP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_DOST_IMPORT_SIMPLE_MAP_ID,1); 
END
^


/* Trigger: DVSK_EL_BI */
CREATE TRIGGER DVSK_EL_BI FOR DVSK_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_DVSK_EL_ID,1);
END
^


/* Trigger: DVSK_OPR_BI */
CREATE TRIGGER DVSK_OPR_BI FOR DVSK_OPR
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_DVSK_OPR_ID,1);
END
^


/* Trigger: EGROUPS_BI */
CREATE TRIGGER EGROUPS_BI FOR EGROUPS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_EGROUPS_ID,1); 
END
^


/* Trigger: ESIMPLE_BI */
CREATE TRIGGER ESIMPLE_BI FOR ESIMPLE
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_esimple_id,1); 
end
^


/* Trigger: ETIKETI_BI */
CREATE TRIGGER ETIKETI_BI FOR ETIKETI
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_ETIKETI_ID,1);
END
^


/* Trigger: EXPLANATORY_BI */
CREATE TRIGGER EXPLANATORY_BI FOR EXPLANATORY
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_EXPLANATORY_ID,1); 
END
^


/* Trigger: EXPORTED_OPERATIONS_BI */
CREATE TRIGGER EXPORTED_OPERATIONS_BI FOR EXPORTED_OPERATIONS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_EXPORTED_OPERATIONS_ID,1); 
 
  if (new.SYS_DATE is null) then 
    NEW.SYS_DATE = CURRENT_TIMESTAMP; 
END
^


/* Trigger: EXPORTS_BI */
CREATE TRIGGER EXPORTS_BI FOR EXPORTS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_EXPORTS_ID,1); 
 
  IF (NEW.EXPORT_DATE IS NULL) THEN 
    NEW.EXPORT_DATE = CURRENT_TIMESTAMP; 
END
^


/* Trigger: EXPORT_OPR_BI */
CREATE TRIGGER EXPORT_OPR_BI FOR EXPORT_OPR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_EXPORT_OPR_ID,1); 
END
^


/* Trigger: EXPORT_SYNC_BI */
CREATE TRIGGER EXPORT_SYNC_BI FOR EXPORT_SYNC
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_EXPORT_SYNC_ID,1); 
END
^


/* Trigger: EXPORT_VENDORS_BI */
CREATE TRIGGER EXPORT_VENDORS_BI FOR EXPORT_VENDORS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_EXPORT_VENDORS_ID,1); 
END
^


/* Trigger: FAKTURA_OSNOVANIE_BI */
CREATE TRIGGER FAKTURA_OSNOVANIE_BI FOR FAKTURA_OSNOVANIE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_FAKTURA_OSNOVANIE_ID,1); 
END
^


/* Trigger: FAK_BI */
CREATE TRIGGER FAK_BI FOR FAK
ACTIVE BEFORE INSERT POSITION 0
AS 
DECLARE VARIABLE L_DOWNLOAD_DATE TIMESTAMP;
BEGIN 
    IF (NEW.TIP = 5) THEN BEGIN 
        IF (EXISTS ( 
            SELECT 
                FAK.ID 
            FROM 
                FAK INNER JOIN OPR ON OPR.ID = FAK.OPR_ID+0 
            WHERE 
                OPR.OPR_DATE > '31.12.2006' 
                AND FAK.NUMBER = NEW.NUMBER 
                AND FAK.TIP = 5 
                AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = FAK.OPR_ID 
                ))) 
        THEN 
            EXCEPTION EXC_DOUBLE_FAK_NUM; 
    END 
    ELSE BEGIN 
        IF (NEW.NUMBER <> '') THEN 
          IF (EXISTS ( 
              SELECT 
                  FAK.ID 
              FROM 
                  FAK INNER JOIN OPR ON OPR.ID = FAK.OPR_ID+0 
              WHERE 
                  OPR.OPR_DATE > '31.12.2006' 
                  AND FAK.NUMBER = NEW.NUMBER 
                  AND FAK.OWNER_ID = NEW.OWNER_ID 
                  AND NOT (FAK.TIP = 5) 
                  AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = FAK.OPR_ID 
                  ))) 
          THEN 
              EXCEPTION EXC_DOUBLE_FAK_NUM; 
    END 
 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_FAK_ID,1); 
 
    IF (NEW.DATE_SDELKA IS NULL) THEN 
        NEW.DATE_SDELKA  = CURRENT_DATE; 
 
    IF (NEW.TIP2 IS NULL) THEN 
        NEW.TIP2 = 0; 
 
    SELECT KLI.FIRMA_ID 
    FROM 
        KLI INNER JOIN OPR ON OPR.KLI_ID = KLI.ID 
    WHERE 
        OPR.ID = NEW.OPR_ID 
    INTO 
        NEW.FIRMA_ID; 

    SELECT
      OPR.DATETIME
    FROM
      OPR
    WHERE
      OPR.ID = NEW.OPR_ID
    INTO
      :L_DOWNLOAD_DATE;

    if (NEW.PAY_TYPE = 1) then
      NEW.DOWNLOAD_DATE = :L_DOWNLOAD_DATE;
END
^


/* Trigger: FAK_BU0 */
CREATE TRIGGER FAK_BU0 FOR FAK
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
  IF (NEW.FIRMA_ID IS NOT NULL) THEN BEGIN 
    SELECT 
      FIRMI.E_FAK 
    FROM 
      FIRMI 
    WHERE 
      FIRMI.ID = NEW.FIRMA_ID 
    INTO NEW.EFAK; 
  END 
 
  IF (NEW.DOWNLOAD_DATE IS NOT NULL) THEN BEGIN 
    UPDATE OPR SET 
      OPR.IS_LOCK = 1 
    WHERE 
      OPR.ID = NEW.OPR_ID; 
  END 
END
^


/* Trigger: FAK_EL_BI */
CREATE TRIGGER FAK_EL_BI FOR FAK_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_FAK_EL_ID,1);
END
^


/* Trigger: FAK_IN_SUMI_BI */
CREATE TRIGGER FAK_IN_SUMI_BI FOR FAK_IN_SUMI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_FAK_IN_SUMI_ID,1); 
END
^


/* Trigger: FAK_KI_NUMBER_BI */
CREATE TRIGGER FAK_KI_NUMBER_BI FOR FAK_KI_NUMBER
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_FAK_KI_NUMBER_ID,1); 
END
^


/* Trigger: FAK_PROD_BI */
CREATE TRIGGER FAK_PROD_BI FOR FAK_PROD
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_FAK_PROD_ID,1);
END
^


/* Trigger: FIRMI_FAK_DATA_BI */
CREATE TRIGGER FIRMI_FAK_DATA_BI FOR FIRMI_FAK_DATA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_FIRMI_FAK_DATA_ID,1); 
 
  IF (NEW.REG_DDS IS NULL AND NEW.IDNOMDDS IS NULL) THEN 
    NEW.REG_DDS = '0'; 
 
  if (NEW.IDNOMDDS IS NOT NULL) then 
    NEW.REG_DDS = '1'; 
END
^


/* Trigger: FIRMI_LOG_AD103 */
CREATE TRIGGER FIRMI_LOG_AD103 FOR FIRMI
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'NAME_FAK', 'D', CAST(OLD."NAME_FAK" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'COMMENT', 'D', CAST(OLD."COMMENT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'ADRES', 'D', CAST(OLD."ADRES" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'MOL', 'D', CAST(OLD."MOL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'DAN_NUM', 'D', CAST(OLD."DAN_NUM" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'BULSTAT', 'D', CAST(OLD."BULSTAT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'REG_DDS', 'D', CAST(OLD."REG_DDS" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'EMAIL', 'D', CAST(OLD."EMAIL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'HTTP', 'D', CAST(OLD."HTTP" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'TEL', 'D', CAST(OLD."TEL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'PLACE_ID', 'D', CAST(OLD."PLACE_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'IDNOMDDS', 'D', CAST(OLD."IDNOMDDS" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'DEF_OWNERBANKA', 'D', CAST(OLD."DEF_OWNERBANKA" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'EMAIL_FAKTURA', 'D', CAST(OLD."EMAIL_FAKTURA" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'E_FAK', 'D', CAST(OLD."E_FAK" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'E_FAK_USER_NAME', 'D', CAST(OLD."E_FAK_USER_NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'EO_ID_TPD', 'D', CAST(OLD."EO_ID_TPD" AS DOM_CHAR_300), null); END
^


/* Trigger: FIRMI_LOG_AI103 */
CREATE TRIGGER FIRMI_LOG_AI103 FOR FIRMI
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'NAME_FAK', 'I', null, CAST(NEW."NAME_FAK" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'COMMENT', 'I', null, CAST(NEW."COMMENT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'ADRES', 'I', null, CAST(NEW."ADRES" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'MOL', 'I', null, CAST(NEW."MOL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'DAN_NUM', 'I', null, CAST(NEW."DAN_NUM" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'BULSTAT', 'I', null, CAST(NEW."BULSTAT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'REG_DDS', 'I', null, CAST(NEW."REG_DDS" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'EMAIL', 'I', null, CAST(NEW."EMAIL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'HTTP', 'I', null, CAST(NEW."HTTP" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'TEL', 'I', null, CAST(NEW."TEL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'PLACE_ID', 'I', null, CAST(NEW."PLACE_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'IDNOMDDS', 'I', null, CAST(NEW."IDNOMDDS" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'DEF_OWNERBANKA', 'I', null, CAST(NEW."DEF_OWNERBANKA" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'EMAIL_FAKTURA', 'I', null, CAST(NEW."EMAIL_FAKTURA" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'E_FAK', 'I', null, CAST(NEW."E_FAK" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'E_FAK_USER_NAME', 'I', null, CAST(NEW."E_FAK_USER_NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', null, 'EO_ID_TPD', 'I', null, CAST(NEW."EO_ID_TPD" AS DOM_CHAR_300)); END
^


/* Trigger: FIRMI_LOG_AU103 */
CREATE TRIGGER FIRMI_LOG_AU103 FOR FIRMI
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'NAME_FAK', 'U', CAST(OLD."NAME_FAK" AS DOM_CHAR_300), CAST(NEW.NAME_FAK AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'COMMENT', 'U', CAST(OLD."COMMENT" AS DOM_CHAR_300), CAST(NEW.COMMENT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'ADRES', 'U', CAST(OLD."ADRES" AS DOM_CHAR_300), CAST(NEW.ADRES AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'MOL', 'U', CAST(OLD."MOL" AS DOM_CHAR_300), CAST(NEW.MOL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'DAN_NUM', 'U', CAST(OLD."DAN_NUM" AS DOM_CHAR_300), CAST(NEW.DAN_NUM AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'BULSTAT', 'U', CAST(OLD."BULSTAT" AS DOM_CHAR_300), CAST(NEW.BULSTAT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'REG_DDS', 'U', CAST(OLD."REG_DDS" AS DOM_CHAR_300), CAST(NEW.REG_DDS AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'EMAIL', 'U', CAST(OLD."EMAIL" AS DOM_CHAR_300), CAST(NEW.EMAIL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'HTTP', 'U', CAST(OLD."HTTP" AS DOM_CHAR_300), CAST(NEW.HTTP AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'TEL', 'U', CAST(OLD."TEL" AS DOM_CHAR_300), CAST(NEW.TEL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'PLACE_ID', 'U', CAST(OLD."PLACE_ID" AS DOM_CHAR_300), CAST(NEW.PLACE_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'IDNOMDDS', 'U', CAST(OLD."IDNOMDDS" AS DOM_CHAR_300), CAST(NEW.IDNOMDDS AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'DEF_OWNERBANKA', 'U', CAST(OLD."DEF_OWNERBANKA" AS DOM_CHAR_300), CAST(NEW.DEF_OWNERBANKA AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'EMAIL_FAKTURA', 'U', CAST(OLD."EMAIL_FAKTURA" AS DOM_CHAR_300), CAST(NEW.EMAIL_FAKTURA AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'E_FAK', 'U', CAST(OLD."E_FAK" AS DOM_CHAR_300), CAST(NEW.E_FAK AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'E_FAK_USER_NAME', 'U', CAST(OLD."E_FAK_USER_NAME" AS DOM_CHAR_300), CAST(NEW.E_FAK_USER_NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('FIRMI', OLD.ID, 'EO_ID_TPD', 'U', CAST(OLD."EO_ID_TPD" AS DOM_CHAR_300), CAST(NEW.EO_ID_TPD AS DOM_CHAR_300)); END
^


/* Trigger: FR_REPORTS_BI */
CREATE TRIGGER FR_REPORTS_BI FOR FR_REPORTS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_FR_REPORTS_ID,1); 
END
^


/* Trigger: FU_BI */
CREATE TRIGGER FU_BI FOR FU
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_fu_id,1); 
end
^


/* Trigger: FU_EXPORT_DOGOVOR_BI */
CREATE TRIGGER FU_EXPORT_DOGOVOR_BI FOR FU_EXPORT_DOGOVOR
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_fu_export_dogovor_id,1); 
end
^


/* Trigger: FU_OBOROTI_BI */
CREATE TRIGGER FU_OBOROTI_BI FOR FU_OBOROTI
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_FU_OBOROTI_id,1); 
end
^


/* Trigger: FU_SER_NUM_BI */
CREATE TRIGGER FU_SER_NUM_BI FOR FU_SER_NUM
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_fu_ser_num_id,1); 
end
^


/* Trigger: GARANCII_BI */
CREATE TRIGGER GARANCII_BI FOR GARANCII
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_GARANCII_ID,1);
END
^


/* Trigger: GRFINGER_BI */
CREATE TRIGGER GRFINGER_BI FOR GRFINGER
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_GRFINGER_ID,1); 
END
^


/* Trigger: HGROUPS_BI */
CREATE TRIGGER HGROUPS_BI FOR HGROUPS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_HGROUPS_ID,1); 
END
^


/* Trigger: INI_BI */
CREATE TRIGGER INI_BI FOR INI
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
  NEW.ID = GEN_ID(GEN_INI_ID,1);
END
^


/* Trigger: INSTALLERS_GROUP_BI */
CREATE TRIGGER INSTALLERS_GROUP_BI FOR INSTALLERS_GROUP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_INSTALLERS_GROUP_ID,1); 
END
^


/* Trigger: INTRASTAT_DATA_BI */
CREATE TRIGGER INTRASTAT_DATA_BI FOR INTRASTAT_DATA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_INTRASTAT_DATA_ID,1); 
END
^


/* Trigger: INTRASTAT_DEAL_TYPE_BI */
CREATE TRIGGER INTRASTAT_DEAL_TYPE_BI FOR INTRASTAT_DEAL_TYPE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_INTRASTAT_DEAL_TYPE_ID,1); 
END
^


/* Trigger: INTRASTAT_DELIVERY_CONDITIONS_B */
CREATE TRIGGER INTRASTAT_DELIVERY_CONDITIONS_B FOR INTRASTAT_DELIVERY_CONDITIONS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_INTRASTAT_DELIVERY_CONDITIO,1); 
END
^


/* Trigger: INTRASTAT_REGION_BI */
CREATE TRIGGER INTRASTAT_REGION_BI FOR INTRASTAT_REGION
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_INTRASTAT_REGION_ID,1); 
END
^


/* Trigger: INTRASTAT_TRANSPORT_TYPE_BI */
CREATE TRIGGER INTRASTAT_TRANSPORT_TYPE_BI FOR INTRASTAT_TRANSPORT_TYPE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_INTRASTAT_TRANSPORT_TYPE_ID,1); 
END
^


/* Trigger: INV_BI */
CREATE TRIGGER INV_BI FOR INV
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_INV_ID,1);
END
^


/* Trigger: IN_BI */
CREATE TRIGGER IN_BI FOR "IN"
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_IN_ID,1);
END
^


/* Trigger: IN_EL2_BI */
CREATE TRIGGER IN_EL2_BI FOR IN_EL2
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_IN_EL2_ID,1);
END
^


/* Trigger: IN_EL_ANUL_BI */
CREATE TRIGGER IN_EL_ANUL_BI FOR IN_EL_ANUL
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_IN_EL_ANUL_ID,1); END
^


/* Trigger: IN_EL_BI */
CREATE TRIGGER IN_EL_BI FOR IN_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
DECLARE VARIABLE L_SKLAD_ID INTEGER; 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_IN_EL_ID,1); 
 
    SELECT 
        OPR.SKLAD_ID 
    FROM 
        OPR 
    WHERE 
        ID = NEW.OPR_ID 
    INTO 
        :L_SKLAD_ID; 
 
    IF (NOT EXISTS ( 
        SELECT 
            NAL.ID 
        FROM 
            NAL 
        WHERE 
            NAL.SKLAD_ID = :L_SKLAD_ID 
            AND NAL.SIMPLE_ID = NEW.SIMPLE_ID)) 
    THEN BEGIN 
 
        INSERT INTO NAL (SIMPLE_ID, SKLAD_ID, KOL_NAL, SUMA, LAST_CENA, SUMA_FR, KOL_RZV, DATETIME_LASTCENA) 
        VALUES (NEW.SIMPLE_ID, :L_SKLAD_ID, 0.00, 0.00, 0.00,0.00, 0.00, CURRENT_TIMESTAMP); 
    END 
 
   IF (NEW.VAT_PERCENT IS NULL) THEN 
     NEW.VAT_PERCENT = (SELECT SIMPLE.DDS FROM SIMPLE WHERE SIMPLE.ID = NEW.SIMPLE_ID); 
 
   IF ((NEW.VAT_REASON_ID IS NULL) AND (NEW.VAT_PERCENT <> 20.0)) THEN 
     NEW.VAT_REASON_ID = (SELECT SIMPLE.VAT_REASON_ID FROM SIMPLE WHERE SIMPLE.ID = NEW.SIMPLE_ID); 
END
^


/* Trigger: IN_EL_EDIT_BI */
CREATE TRIGGER IN_EL_EDIT_BI FOR IN_EL_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_IN_EL_EDIT_ID,1); END
^


/* Trigger: IZP_BI */
CREATE TRIGGER IZP_BI FOR IZP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_IZP_ID,1);
END
^


/* Trigger: IZP_TIP_BI */
CREATE TRIGGER IZP_TIP_BI FOR IZP_TIP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_IZP_TIP_ID,1);
END
^


/* Trigger: IZP_TIP_LOG_AD103 */
CREATE TRIGGER IZP_TIP_LOG_AD103 FOR IZP_TIP
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'USE_KLI', 'D', CAST(OLD."USE_KLI" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'USE_COMMENT', 'D', CAST(OLD."USE_COMMENT" AS DOM_CHAR_300), null); END
^


/* Trigger: IZP_TIP_LOG_AI103 */
CREATE TRIGGER IZP_TIP_LOG_AI103 FOR IZP_TIP
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', null, 'USE_KLI', 'I', null, CAST(NEW."USE_KLI" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', null, 'USE_COMMENT', 'I', null, CAST(NEW."USE_COMMENT" AS DOM_CHAR_300)); END
^


/* Trigger: IZP_TIP_LOG_AU103 */
CREATE TRIGGER IZP_TIP_LOG_AU103 FOR IZP_TIP
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'USE_KLI', 'U', CAST(OLD."USE_KLI" AS DOM_CHAR_300), CAST(NEW.USE_KLI AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('IZP_TIP', OLD.ID, 'USE_COMMENT', 'U', CAST(OLD."USE_COMMENT" AS DOM_CHAR_300), CAST(NEW.USE_COMMENT AS DOM_CHAR_300)); END
^


/* Trigger: KASA_BI */
CREATE TRIGGER KASA_BI FOR KASA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_KASA_ID,1);
END
^


/* Trigger: KA_DEMONTAJ_DDS_BI */
CREATE TRIGGER KA_DEMONTAJ_DDS_BI FOR KA_DEMONTAJ_DDS
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_ka_demontaj_dds_id,1); 
end
^


/* Trigger: KA_INFO_BI */
CREATE TRIGGER KA_INFO_BI FOR KA_INFO
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KA_INFO_ID,1); 
END
^


/* Trigger: KA_LOG_NODE_BI */
CREATE TRIGGER KA_LOG_NODE_BI FOR KA_LOG_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KA_LOG_NODE_ID,1); 
END
^


/* Trigger: KA_PROIZVODITEL_BI */
CREATE TRIGGER KA_PROIZVODITEL_BI FOR KA_PROIZVODITEL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KA_PROIZVODITEL_ID,1); 
END
^


/* Trigger: KA_SER_NUM_BI */
CREATE TRIGGER KA_SER_NUM_BI FOR KA_SER_NUM
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_ka_ser_num_id,1); 
end
^


/* Trigger: KI_DOST_SUMA_EL_BI */
CREATE TRIGGER KI_DOST_SUMA_EL_BI FOR KI_DOST_SUMA_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KI_DOST_SUMA_EL_ID,1); 
END
^


/* Trigger: KI_NODE_BI */
CREATE TRIGGER KI_NODE_BI FOR KI_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
      NEW.ID = GEN_ID(GEN_KI_NODE_ID,1);
END
^


/* Trigger: KI_PROD_SUMA_EL_BD0 */
CREATE TRIGGER KI_PROD_SUMA_EL_BD0 FOR KI_PROD_SUMA_EL
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN 
  UPDATE OUT_EL SET 
    OUT_EL.SUMA = OUT_EL.SUMA + OLD.SUMA 
  WHERE 
    OUT_EL.ID = OLD.OUT_EL_ID AND 
    OLD.KOL IS NULL; 
 
  --UPDATE OPR SET 
  --  OPR.SUMA = OPR.SUMA + OLD.SUMA 
  --WHERE 
  --  OPR.ID = (SELECT OUT_EL.OPR_ID FROM OUT_EL WHERE OUT_EL.ID = OLD.OUT_EL_ID) AND 
  --  OLD.KOL IS NULL; 
END
^


/* Trigger: KI_PROD_SUMA_EL_BI */
CREATE TRIGGER KI_PROD_SUMA_EL_BI FOR KI_PROD_SUMA_EL
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_ki_prod_suma_el_id,1); 
end
^


/* Trigger: KLI_ABONAMENT_BI */
CREATE TRIGGER KLI_ABONAMENT_BI FOR KLI_ABONAMENT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_KLI_ABONAMENT_ID,1);
END
^


/* Trigger: KLI_AGENTS_BI */
CREATE TRIGGER KLI_AGENTS_BI FOR KLI_AGENTS
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_kli_agents_id,1); 
end
^


/* Trigger: KLI_BI */
CREATE TRIGGER KLI_BI FOR KLI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_KLI_ID,1); 
 
    IF (NEW.VOP IS NULL) THEN 
        NEW.VOP = 0; 
END
^


/* Trigger: KLI_DOST_NODE_BI */
CREATE TRIGGER KLI_DOST_NODE_BI FOR KLI_DOST_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KLI_DOST_NODE_ID,1); 
END
^


/* Trigger: KLI_FIRMA_NODE_BI */
CREATE TRIGGER KLI_FIRMA_NODE_BI FOR KLI_FIRMA_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KLI_FIRMA_NODE_ID,1); 
END
^


/* Trigger: KLI_GROUP_BI */
CREATE TRIGGER KLI_GROUP_BI FOR KLI_GROUP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_KLI_GROUP_ID,1);
END
^


/* Trigger: KLI_LOG_AD103 */
CREATE TRIGGER KLI_LOG_AD103 FOR KLI
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'KLI_GROUP_ID', 'D', CAST(OLD."KLI_GROUP_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CODE', 'D', CAST(OLD."CODE" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'KLIENT', 'D', CAST(OLD."KLIENT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DOSTAV', 'D', CAST(OLD."DOSTAV" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PROIZV', 'D', CAST(OLD."PROIZV" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PERCENT', 'D', CAST(OLD."PERCENT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'COMMENT', 'D', CAST(OLD."COMMENT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ADRES', 'D', CAST(OLD."ADRES" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'TEL', 'D', CAST(OLD."TEL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FOLDER', 'D', CAST(OLD."FOLDER" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FIRMA_ID', 'D', CAST(OLD."FIRMA_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DIST', 'D', CAST(OLD."DIST" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ZA_KASA', 'D', CAST(OLD."ZA_KASA" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FLAG_CHECK', 'D', CAST(OLD."FLAG_CHECK" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'OBEKT_ID', 'D', CAST(OLD."OBEKT_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PLACE_ID', 'D', CAST(OLD."PLACE_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PADEJ', 'D', CAST(OLD."PADEJ" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_SEL_ID', 'D', CAST(OLD."DEF_SEL_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'TIP_PRINT', 'D', CAST(OLD."TIP_PRINT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_DOST_PRINT', 'D', CAST(OLD."DEF_DOST_PRINT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_PROD_PRINT', 'D', CAST(OLD."DEF_PROD_PRINT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_FAK_PRINT', 'D', CAST(OLD."DEF_FAK_PRINT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_MOVE_PRINT', 'D', CAST(OLD."DEF_MOVE_PRINT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PADEJ_DDS', 'D', CAST(OLD."PADEJ_DDS" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FLAG_PAY', 'D', CAST(OLD."FLAG_PAY" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DAYS_DOST', 'D', CAST(OLD."DAYS_DOST" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FILE_EXPORT_PATH', 'D', CAST(OLD."FILE_EXPORT_PATH" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DNI_DO_PADEJ', 'D', CAST(OLD."DNI_DO_PADEJ" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'NAME_ENGL', 'D', CAST(OLD."NAME_ENGL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'BONUS_TOCHKI', 'D', CAST(OLD."BONUS_TOCHKI" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ADD_DDS', 'D', CAST(OLD."ADD_DDS" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'SLEDI', 'D', CAST(OLD."SLEDI" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FLAG_PAY_FAKT', 'D', CAST(OLD."FLAG_PAY_FAKT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'LIST_ID', 'D', CAST(OLD."LIST_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'COEFF', 'D', CAST(OLD."COEFF" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CFG_LOG_ID', 'D', CAST(OLD."CFG_LOG_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CODE2', 'D', CAST(OLD."CODE2" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DVSK_PRINT', 'D', CAST(OLD."DVSK_PRINT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DNI_FAK_PADEJ', 'D', CAST(OLD."DNI_FAK_PADEJ" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CHECK_FAK', 'D', CAST(OLD."CHECK_FAK" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'VOP', 'D', CAST(OLD."VOP" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'LATITUDE', 'D', CAST(OLD."LATITUDE" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'LONGITUDE', 'D', CAST(OLD."LONGITUDE" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'RADIUS', 'D', CAST(OLD."RADIUS" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'EMAIL', 'D', CAST(OLD."EMAIL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'AGENT', 'D', CAST(OLD."AGENT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CL_ID', 'D', CAST(OLD."CL_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'F_ID_TPD', 'D', CAST(OLD."F_ID_TPD" AS DOM_CHAR_300), null); END
^


/* Trigger: KLI_LOG_AI103 */
CREATE TRIGGER KLI_LOG_AI103 FOR KLI
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'KLI_GROUP_ID', 'I', null, CAST(NEW."KLI_GROUP_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'CODE', 'I', null, CAST(NEW."CODE" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'KLIENT', 'I', null, CAST(NEW."KLIENT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DOSTAV', 'I', null, CAST(NEW."DOSTAV" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'PROIZV', 'I', null, CAST(NEW."PROIZV" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'PERCENT', 'I', null, CAST(NEW."PERCENT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'COMMENT', 'I', null, CAST(NEW."COMMENT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'ADRES', 'I', null, CAST(NEW."ADRES" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'TEL', 'I', null, CAST(NEW."TEL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'FOLDER', 'I', null, CAST(NEW."FOLDER" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'FIRMA_ID', 'I', null, CAST(NEW."FIRMA_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DIST', 'I', null, CAST(NEW."DIST" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'ZA_KASA', 'I', null, CAST(NEW."ZA_KASA" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'FLAG_CHECK', 'I', null, CAST(NEW."FLAG_CHECK" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'OBEKT_ID', 'I', null, CAST(NEW."OBEKT_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'PLACE_ID', 'I', null, CAST(NEW."PLACE_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'PADEJ', 'I', null, CAST(NEW."PADEJ" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DEF_SEL_ID', 'I', null, CAST(NEW."DEF_SEL_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'TIP_PRINT', 'I', null, CAST(NEW."TIP_PRINT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DEF_DOST_PRINT', 'I', null, CAST(NEW."DEF_DOST_PRINT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DEF_PROD_PRINT', 'I', null, CAST(NEW."DEF_PROD_PRINT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DEF_FAK_PRINT', 'I', null, CAST(NEW."DEF_FAK_PRINT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DEF_MOVE_PRINT', 'I', null, CAST(NEW."DEF_MOVE_PRINT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'PADEJ_DDS', 'I', null, CAST(NEW."PADEJ_DDS" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'FLAG_PAY', 'I', null, CAST(NEW."FLAG_PAY" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DAYS_DOST', 'I', null, CAST(NEW."DAYS_DOST" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'FILE_EXPORT_PATH', 'I', null, CAST(NEW."FILE_EXPORT_PATH" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DNI_DO_PADEJ', 'I', null, CAST(NEW."DNI_DO_PADEJ" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'NAME_ENGL', 'I', null, CAST(NEW."NAME_ENGL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'BONUS_TOCHKI', 'I', null, CAST(NEW."BONUS_TOCHKI" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'ADD_DDS', 'I', null, CAST(NEW."ADD_DDS" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'SLEDI', 'I', null, CAST(NEW."SLEDI" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'FLAG_PAY_FAKT', 'I', null, CAST(NEW."FLAG_PAY_FAKT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'LIST_ID', 'I', null, CAST(NEW."LIST_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'COEFF', 'I', null, CAST(NEW."COEFF" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'CFG_LOG_ID', 'I', null, CAST(NEW."CFG_LOG_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'CODE2', 'I', null, CAST(NEW."CODE2" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DVSK_PRINT', 'I', null, CAST(NEW."DVSK_PRINT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'DNI_FAK_PADEJ', 'I', null, CAST(NEW."DNI_FAK_PADEJ" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'CHECK_FAK', 'I', null, CAST(NEW."CHECK_FAK" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'VOP', 'I', null, CAST(NEW."VOP" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'LATITUDE', 'I', null, CAST(NEW."LATITUDE" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'LONGITUDE', 'I', null, CAST(NEW."LONGITUDE" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'RADIUS', 'I', null, CAST(NEW."RADIUS" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'EMAIL', 'I', null, CAST(NEW."EMAIL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'AGENT', 'I', null, CAST(NEW."AGENT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'CL_ID', 'I', null, CAST(NEW."CL_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', null, 'F_ID_TPD', 'I', null, CAST(NEW."F_ID_TPD" AS DOM_CHAR_300)); END
^


/* Trigger: KLI_LOG_AU103 */
CREATE TRIGGER KLI_LOG_AU103 FOR KLI
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'KLI_GROUP_ID', 'U', CAST(OLD."KLI_GROUP_ID" AS DOM_CHAR_300), CAST(NEW.KLI_GROUP_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CODE', 'U', CAST(OLD."CODE" AS DOM_CHAR_300), CAST(NEW.CODE AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'KLIENT', 'U', CAST(OLD."KLIENT" AS DOM_CHAR_300), CAST(NEW.KLIENT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DOSTAV', 'U', CAST(OLD."DOSTAV" AS DOM_CHAR_300), CAST(NEW.DOSTAV AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PROIZV', 'U', CAST(OLD."PROIZV" AS DOM_CHAR_300), CAST(NEW.PROIZV AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PERCENT', 'U', CAST(OLD."PERCENT" AS DOM_CHAR_300), CAST(NEW.PERCENT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'COMMENT', 'U', CAST(OLD."COMMENT" AS DOM_CHAR_300), CAST(NEW.COMMENT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ADRES', 'U', CAST(OLD."ADRES" AS DOM_CHAR_300), CAST(NEW.ADRES AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'TEL', 'U', CAST(OLD."TEL" AS DOM_CHAR_300), CAST(NEW.TEL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FOLDER', 'U', CAST(OLD."FOLDER" AS DOM_CHAR_300), CAST(NEW.FOLDER AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FIRMA_ID', 'U', CAST(OLD."FIRMA_ID" AS DOM_CHAR_300), CAST(NEW.FIRMA_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DIST', 'U', CAST(OLD."DIST" AS DOM_CHAR_300), CAST(NEW.DIST AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ZA_KASA', 'U', CAST(OLD."ZA_KASA" AS DOM_CHAR_300), CAST(NEW.ZA_KASA AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FLAG_CHECK', 'U', CAST(OLD."FLAG_CHECK" AS DOM_CHAR_300), CAST(NEW.FLAG_CHECK AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'OBEKT_ID', 'U', CAST(OLD."OBEKT_ID" AS DOM_CHAR_300), CAST(NEW.OBEKT_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PLACE_ID', 'U', CAST(OLD."PLACE_ID" AS DOM_CHAR_300), CAST(NEW.PLACE_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PADEJ', 'U', CAST(OLD."PADEJ" AS DOM_CHAR_300), CAST(NEW.PADEJ AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_SEL_ID', 'U', CAST(OLD."DEF_SEL_ID" AS DOM_CHAR_300), CAST(NEW.DEF_SEL_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'TIP_PRINT', 'U', CAST(OLD."TIP_PRINT" AS DOM_CHAR_300), CAST(NEW.TIP_PRINT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_DOST_PRINT', 'U', CAST(OLD."DEF_DOST_PRINT" AS DOM_CHAR_300), CAST(NEW.DEF_DOST_PRINT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_PROD_PRINT', 'U', CAST(OLD."DEF_PROD_PRINT" AS DOM_CHAR_300), CAST(NEW.DEF_PROD_PRINT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_FAK_PRINT', 'U', CAST(OLD."DEF_FAK_PRINT" AS DOM_CHAR_300), CAST(NEW.DEF_FAK_PRINT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DEF_MOVE_PRINT', 'U', CAST(OLD."DEF_MOVE_PRINT" AS DOM_CHAR_300), CAST(NEW.DEF_MOVE_PRINT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'PADEJ_DDS', 'U', CAST(OLD."PADEJ_DDS" AS DOM_CHAR_300), CAST(NEW.PADEJ_DDS AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FLAG_PAY', 'U', CAST(OLD."FLAG_PAY" AS DOM_CHAR_300), CAST(NEW.FLAG_PAY AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DAYS_DOST', 'U', CAST(OLD."DAYS_DOST" AS DOM_CHAR_300), CAST(NEW.DAYS_DOST AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FILE_EXPORT_PATH', 'U', CAST(OLD."FILE_EXPORT_PATH" AS DOM_CHAR_300), CAST(NEW.FILE_EXPORT_PATH AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DNI_DO_PADEJ', 'U', CAST(OLD."DNI_DO_PADEJ" AS DOM_CHAR_300), CAST(NEW.DNI_DO_PADEJ AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'NAME_ENGL', 'U', CAST(OLD."NAME_ENGL" AS DOM_CHAR_300), CAST(NEW.NAME_ENGL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'BONUS_TOCHKI', 'U', CAST(OLD."BONUS_TOCHKI" AS DOM_CHAR_300), CAST(NEW.BONUS_TOCHKI AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'ADD_DDS', 'U', CAST(OLD."ADD_DDS" AS DOM_CHAR_300), CAST(NEW.ADD_DDS AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'SLEDI', 'U', CAST(OLD."SLEDI" AS DOM_CHAR_300), CAST(NEW.SLEDI AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'FLAG_PAY_FAKT', 'U', CAST(OLD."FLAG_PAY_FAKT" AS DOM_CHAR_300), CAST(NEW.FLAG_PAY_FAKT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'LIST_ID', 'U', CAST(OLD."LIST_ID" AS DOM_CHAR_300), CAST(NEW.LIST_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'COEFF', 'U', CAST(OLD."COEFF" AS DOM_CHAR_300), CAST(NEW.COEFF AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CFG_LOG_ID', 'U', CAST(OLD."CFG_LOG_ID" AS DOM_CHAR_300), CAST(NEW.CFG_LOG_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CODE2', 'U', CAST(OLD."CODE2" AS DOM_CHAR_300), CAST(NEW.CODE2 AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DVSK_PRINT', 'U', CAST(OLD."DVSK_PRINT" AS DOM_CHAR_300), CAST(NEW.DVSK_PRINT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'DNI_FAK_PADEJ', 'U', CAST(OLD."DNI_FAK_PADEJ" AS DOM_CHAR_300), CAST(NEW.DNI_FAK_PADEJ AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CHECK_FAK', 'U', CAST(OLD."CHECK_FAK" AS DOM_CHAR_300), CAST(NEW.CHECK_FAK AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'VOP', 'U', CAST(OLD."VOP" AS DOM_CHAR_300), CAST(NEW.VOP AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'LATITUDE', 'U', CAST(OLD."LATITUDE" AS DOM_CHAR_300), CAST(NEW.LATITUDE AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'LONGITUDE', 'U', CAST(OLD."LONGITUDE" AS DOM_CHAR_300), CAST(NEW.LONGITUDE AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'RADIUS', 'U', CAST(OLD."RADIUS" AS DOM_CHAR_300), CAST(NEW.RADIUS AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'EMAIL', 'U', CAST(OLD."EMAIL" AS DOM_CHAR_300), CAST(NEW.EMAIL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'AGENT', 'U', CAST(OLD."AGENT" AS DOM_CHAR_300), CAST(NEW.AGENT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'CL_ID', 'U', CAST(OLD."CL_ID" AS DOM_CHAR_300), CAST(NEW.CL_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('KLI', OLD.ID, 'F_ID_TPD', 'U', CAST(OLD."F_ID_TPD" AS DOM_CHAR_300), CAST(NEW.F_ID_TPD AS DOM_CHAR_300)); END
^


/* Trigger: KLI_POCKET_NODE_BI */
CREATE TRIGGER KLI_POCKET_NODE_BI FOR KLI_POCKET_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KLI_POCKET_NODE_ID,1); 
END
^


/* Trigger: KLI_PRAGOVE_BI */
CREATE TRIGGER KLI_PRAGOVE_BI FOR KLI_PRAGOVE
ACTIVE BEFORE INSERT POSITION 0
AS
    BEGIN
      IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_KLI_PRAGOVE_ID,1);
    END
^


/* Trigger: KLI_SKLAD_NODE_BI */
CREATE TRIGGER KLI_SKLAD_NODE_BI FOR KLI_SKLAD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KLI_SKLAD_NODE_ID,1); 
END
^


/* Trigger: KLI_TOCHKI_NODE_BI */
CREATE TRIGGER KLI_TOCHKI_NODE_BI FOR KLI_TOCHKI_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KLI_TOCHKI_NODE_ID,1); 
END
^


/* Trigger: KLI_USER_NODE_BI */
CREATE TRIGGER KLI_USER_NODE_BI FOR KLI_USER_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KLI_USER_NODE_ID,1); 
END
^


/* Trigger: LAYOUTS_BI */
CREATE TRIGGER LAYOUTS_BI FOR LAYOUTS
ACTIVE BEFORE INSERT POSITION 0
as 
  begin 
    if (new.ID is null) then 
      new.ID = gen_id(GEN_LAYOUTS_ID,1); 
  end
^


/* Trigger: LICENCE_EL_BI */
CREATE TRIGGER LICENCE_EL_BI FOR LICENCE_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_LICENCE_EL_ID,1); 
END
^


/* Trigger: LOCK_OPR_BI */
CREATE TRIGGER LOCK_OPR_BI FOR LOCK_OPR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_LOCK_OPR_ID,1); 
END
^


/* Trigger: LOCK_OPR_EL_BI */
CREATE TRIGGER LOCK_OPR_EL_BI FOR LOCK_OPR_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_LOCK_OPR_EL_ID,1); 
END
^


/* Trigger: METRO_ARTICLES_BI */
CREATE TRIGGER METRO_ARTICLES_BI FOR METRO_ARTICLES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_METRO_ARTICLES_ID,1); 
END
^


/* Trigger: METRO_EXPORT_OPR_BI */
CREATE TRIGGER METRO_EXPORT_OPR_BI FOR METRO_EXPORT_OPR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_METRO_EXPORT_OPR_ID,1); 
END
^


/* Trigger: METRO_EXPORT_SIMPLES_BI */
CREATE TRIGGER METRO_EXPORT_SIMPLES_BI FOR METRO_EXPORT_SIMPLES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_METRO_EXPORT_SIMPLES_ID,1); 
END
^


/* Trigger: METRO_INVOICE_DOCUMENTS_BI */
CREATE TRIGGER METRO_INVOICE_DOCUMENTS_BI FOR METRO_INVOICE_DOCUMENTS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_METRO_INVOICE_DOCUMENTS_ID,1); 
  IF (NEW.IMPORTED IS NULL) THEN 
    NEW.IMPORTED = 0; 
END
^


/* Trigger: ME_BI */
CREATE TRIGGER ME_BI FOR ME
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_ME_ID,1);
END
^


/* Trigger: ME_LOG_AD103 */
CREATE TRIGGER ME_LOG_AD103 FOR ME
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'NAME_LONG', 'D', CAST(OLD."NAME_LONG" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'KOEF', 'D', CAST(OLD."KOEF" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'IS_BROI', 'D', CAST(OLD."IS_BROI" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'PREFIX', 'D', CAST(OLD."PREFIX" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'NAME_ENG', 'D', CAST(OLD."NAME_ENG" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'KOEF_ET', 'D', CAST(OLD."KOEF_ET" AS DOM_CHAR_300), null); END
^


/* Trigger: ME_LOG_AI103 */
CREATE TRIGGER ME_LOG_AI103 FOR ME
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'NAME_LONG', 'I', null, CAST(NEW."NAME_LONG" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'KOEF', 'I', null, CAST(NEW."KOEF" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'IS_BROI', 'I', null, CAST(NEW."IS_BROI" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'PREFIX', 'I', null, CAST(NEW."PREFIX" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'NAME_ENG', 'I', null, CAST(NEW."NAME_ENG" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', null, 'KOEF_ET', 'I', null, CAST(NEW."KOEF_ET" AS DOM_CHAR_300)); END
^


/* Trigger: ME_LOG_AU103 */
CREATE TRIGGER ME_LOG_AU103 FOR ME
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'NAME_LONG', 'U', CAST(OLD."NAME_LONG" AS DOM_CHAR_300), CAST(NEW.NAME_LONG AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'KOEF', 'U', CAST(OLD."KOEF" AS DOM_CHAR_300), CAST(NEW.KOEF AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'IS_BROI', 'U', CAST(OLD."IS_BROI" AS DOM_CHAR_300), CAST(NEW.IS_BROI AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'PREFIX', 'U', CAST(OLD."PREFIX" AS DOM_CHAR_300), CAST(NEW.PREFIX AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'NAME_ENG', 'U', CAST(OLD."NAME_ENG" AS DOM_CHAR_300), CAST(NEW.NAME_ENG AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('ME', OLD.ID, 'KOEF_ET', 'U', CAST(OLD."KOEF_ET" AS DOM_CHAR_300), CAST(NEW.KOEF_ET AS DOM_CHAR_300)); END
^


/* Trigger: MOVE_BI */
CREATE TRIGGER MOVE_BI FOR MOVE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_MOVE_ID,1);
END
^


/* Trigger: NAL2_BI */
CREATE TRIGGER NAL2_BI FOR NAL2
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_NAL2_ID,1);
END
^


/* Trigger: NAL_BU0 */
CREATE TRIGGER NAL_BU0 FOR NAL
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    EXECUTE PROCEDURE CHECK_OTR_KOL(NEW.KOL_NAL); 
 
    IF (NEW.LAST_CENA = 0.00) THEN BEGIN 
        NEW.LAST_CENA = OLD.LAST_CENA; 
        NEW.DATETIME_LASTCENA = OLD.DATETIME_LASTCENA; 
    END 
 
END
^


/* Trigger: OBEKT_BI */
CREATE TRIGGER OBEKT_BI FOR OBEKT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OBEKT_ID,1);
END
^


/* Trigger: OFERTA_BI */
CREATE TRIGGER OFERTA_BI FOR OFERTA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OFERTA_ID,1);
END
^


/* Trigger: OFERTA_EL_BI */
CREATE TRIGGER OFERTA_EL_BI FOR OFERTA_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OFERTA_EL_ID,1);
END
^


/* Trigger: OFFONL_KLI_I */
CREATE TRIGGER OFFONL_KLI_I FOR KLI
INACTIVE AFTER INSERT POSITION 1024
AS
begin
  /* Trigger text */


  insert into off_on_line_log(table_name, cmd, record_id)
  values ('KLI', 'I', new.id);
end
^


/* Trigger: OFFONL_KLI_U */
CREATE TRIGGER OFFONL_KLI_U FOR KLI
INACTIVE AFTER UPDATE POSITION 0
AS
begin
 insert into off_on_line_log(table_name, cmd, record_id)
  values ('KLI', 'U', new.id);
end
^


/* Trigger: OFF_ON_LINE_LOG_BI */
CREATE TRIGGER OFF_ON_LINE_LOG_BI FOR OFF_ON_LINE_LOG
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OFF_ON_LINE_LOG_ID,1);
END
^


/* Trigger: OLD_REQUEST_EL_BI */
CREATE TRIGGER OLD_REQUEST_EL_BI FOR OLD_REQUEST_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OLD_REQUEST_EL_ID,1); 
END
^


/* Trigger: OLD_TASKS_BI */
CREATE TRIGGER OLD_TASKS_BI FOR OLD_TASKS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OLD_TASKS_ID,1); 
END
^


/* Trigger: ONOFFL_BARCODE_D */
CREATE TRIGGER ONOFFL_BARCODE_D FOR BARCODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "BARCODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_BARCODE_I */
CREATE TRIGGER ONOFFL_BARCODE_I FOR BARCODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "BARCODE" ("ID","SIMPLE_ID","BARCODE","KOL")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(''''||NEW."BARCODE"||'''','NULL')||','
||COALESCE(NEW."KOL",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_BARCODE_U */
CREATE TRIGGER ONOFFL_BARCODE_U FOR BARCODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "BARCODE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"BARCODE"='||COALESCE(''''||NEW."BARCODE"||'''','NULL')||','
||'"KOL"='||COALESCE(NEW."KOL",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_BONUS_CONFIG_D */
CREATE TRIGGER ONOFFL_BONUS_CONFIG_D FOR BONUS_CONFIG
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "BONUS_CONFIG" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_BONUS_CONFIG_I */
CREATE TRIGGER ONOFFL_BONUS_CONFIG_I FOR BONUS_CONFIG
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "BONUS_CONFIG" ("ID","IS_ACTIV","NAME","WEEK_DAY","OT_TIME","DO_TIME","OT_SUMA","DO_SUMA","SIMPLE_ID","SIMPLE_KOL","PERIOD","NUMBER_WMY","WMY","PROCENT","SIMPLE_ID_BONUS","KOL_SIM_BONUS","CENA_SIM_BONUS","ANULIRAN","ZA_SMETKA","ID_BONUS","DATE_TIME_AE","USER_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."IS_ACTIV",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."WEEK_DAY",'NULL')||','
||COALESCE(''''||NEW."OT_TIME"||'''','NULL')||','
||COALESCE(''''||NEW."DO_TIME"||'''','NULL')||','
||COALESCE(NEW."OT_SUMA",'NULL')||','
||COALESCE(NEW."DO_SUMA",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."SIMPLE_KOL",'NULL')||','
||COALESCE(NEW."PERIOD",'NULL')||','
||COALESCE(NEW."NUMBER_WMY",'NULL')||','
||COALESCE(NEW."WMY",'NULL')||','
||COALESCE(NEW."PROCENT",'NULL')||','
||COALESCE(NEW."SIMPLE_ID_BONUS",'NULL')||','
||COALESCE(NEW."KOL_SIM_BONUS",'NULL')||','
||COALESCE(NEW."CENA_SIM_BONUS",'NULL')||','
||COALESCE(NEW."ANULIRAN",0)||','
||COALESCE(NEW."ZA_SMETKA",0)||','
||COALESCE(NEW."ID_BONUS",'NULL')||','
||COALESCE(''''||NEW."DATE_TIME_AE"||'''','NULL')||','
||COALESCE(NEW."USER_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_BONUS_CONFIG_U */
CREATE TRIGGER ONOFFL_BONUS_CONFIG_U FOR BONUS_CONFIG
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "BONUS_CONFIG" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"IS_ACTIV"='||COALESCE(NEW."IS_ACTIV",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"WEEK_DAY"='||COALESCE(NEW."WEEK_DAY",'NULL')||','
||'"OT_TIME"='||COALESCE(''''||NEW."OT_TIME"||'''','NULL')||','
||'"DO_TIME"='||COALESCE(''''||NEW."DO_TIME"||'''','NULL')||','
||'"OT_SUMA"='||COALESCE(NEW."OT_SUMA",'NULL')||','
||'"DO_SUMA"='||COALESCE(NEW."DO_SUMA",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"SIMPLE_KOL"='||COALESCE(NEW."SIMPLE_KOL",'NULL')||','
||'"PERIOD"='||COALESCE(NEW."PERIOD",'NULL')||','
||'"NUMBER_WMY"='||COALESCE(NEW."NUMBER_WMY",'NULL')||','
||'"WMY"='||COALESCE(NEW."WMY",'NULL')||','
||'"PROCENT"='||COALESCE(NEW."PROCENT",'NULL')||','
||'"SIMPLE_ID_BONUS"='||COALESCE(NEW."SIMPLE_ID_BONUS",'NULL')||','
||'"KOL_SIM_BONUS"='||COALESCE(NEW."KOL_SIM_BONUS",'NULL')||','
||'"CENA_SIM_BONUS"='||COALESCE(NEW."CENA_SIM_BONUS",'NULL')||','
||'"ANULIRAN"='||COALESCE(NEW."ANULIRAN",'NULL')||','
||'"ZA_SMETKA"='||COALESCE(NEW."ZA_SMETKA",'NULL')||','
||'"ID_BONUS"='||COALESCE(NEW."ID_BONUS",'NULL')||','
||'"DATE_TIME_AE"='||COALESCE(''''||NEW."DATE_TIME_AE"||'''','NULL')||','
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_D */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_D FOR CENOVA_LISTA
INACTIVE AFTER DELETE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'delete from  CENOVA_LISTA where "ID"='||old.ID,(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_EL_D */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_EL_D FOR CENOVA_LISTA_EL
INACTIVE AFTER DELETE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'delete from  CENOVA_LISTA_EL where "ID"='||old.ID,(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_EL_I */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_EL_I FOR CENOVA_LISTA_EL
INACTIVE AFTER INSERT POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'insert into CENOVA_LISTA_EL ("ID", 
"OPR_ID", 
"OT_OPR_ID", 
"SIMPLE_ID", 
"TIP", 
"PROCENT", 
"CENA", 
"TIP_OT_CENA")  values ('||coalesce(new."ID",'NULL')||' , ' 
||coalesce(-new."OPR_ID",'NULL')||' , ' 
||coalesce(-new."OT_OPR_ID",'NULL')||' , ' 
||coalesce(new."SIMPLE_ID",'NULL')||' , ' 
||coalesce(new."TIP",'NULL')||' , ' 
||coalesce(new."PROCENT",'NULL')||' , ' 
||coalesce(new."CENA",'NULL')||' , ' 
||coalesce(new."TIP_OT_CENA",0)||');', 
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_EL_U */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_EL_U FOR CENOVA_LISTA_EL
INACTIVE AFTER UPDATE POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'update CENOVA_LISTA_EL SET '||'"ID"='||coalesce(new."ID",'NULL')||' , ' 
||'"OPR_ID"='||coalesce(-new."OPR_ID",'NULL')||' , ' 
||'"OT_OPR_ID"='||coalesce(-new."OT_OPR_ID",'NULL')||' , ' 
||'"SIMPLE_ID"='||coalesce(new."SIMPLE_ID",'NULL')||' , ' 
||'"TIP"='||coalesce(new."TIP",'NULL')||' , ' 
||'"PROCENT"='||coalesce(new."PROCENT",'NULL')||' , ' 
||'"CENA"='||coalesce(new."CENA",'NULL')||' , ' 
||'"TIP_OT_CENA"='||coalesce(new."TIP_OT_CENA",'NULL')|| 
' WHERE ID='||old.ID ,  
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_I */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_I FOR CENOVA_LISTA
INACTIVE AFTER INSERT POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'insert into CENOVA_LISTA ("DEF", 
"ID", 
"NAME", 
"OPR_ID", 
"TIP", 
"OT_DATE", 
"DO_DATE", 
"OT_TIME", 
"DO_TIME", 
"WEEK", 
"ACTIVNA", 
"PRIORITET")  values ('||coalesce(new."DEF", 0)||' , ' 
||coalesce(new."ID",'NULL')||' , ' 
||coalesce(''''||new."NAME"||'''','NULL')||' , ' 
||coalesce(-new."OPR_ID",'NULL')||' , ' 
||coalesce(new."TIP",'NULL')||' , ' 
||coalesce(''''||new."OT_DATE"||'''','NULL')||' , ' 
||coalesce(''''||new."DO_DATE"||'''','NULL')||' , ' 
||coalesce(''''||new."OT_TIME"||'''','NULL')||' , ' 
||coalesce(''''||new."DO_TIME"||'''','NULL')||' , ' 
||coalesce(new."WEEK",'NULL')||' , ' 
||coalesce(new."ACTIVNA",0)||' , ' 
||coalesce(new."PRIORITET",0)||');', 
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_KLI_D */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_KLI_D FOR CENOVA_LISTA_KLI
INACTIVE AFTER DELETE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'delete from  CENOVA_LISTA_KLI where "ID"='||old.ID,(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_KLI_I */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_KLI_I FOR CENOVA_LISTA_KLI
INACTIVE AFTER INSERT POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'insert into CENOVA_LISTA_KLI ("ID", 
"OPR_ID", 
"KLI_ID")  values ('||coalesce(new."ID",'NULL')||' , ' 
||coalesce(-new."OPR_ID",'NULL')||' , ' 
||coalesce(new."KLI_ID",'NULL')||');', 
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_KLI_U */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_KLI_U FOR CENOVA_LISTA_KLI
INACTIVE AFTER UPDATE POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'update CENOVA_LISTA_KLI SET '||'"ID"='||coalesce(new."ID",'NULL')||' , ' 
||'"OPR_ID"='||coalesce(-new."OPR_ID",'NULL')||' , ' 
||'"KLI_ID"='||coalesce(new."KLI_ID",'NULL')|| 
' WHERE ID='||old.ID ,  
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_SKLAD_D */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_SKLAD_D FOR CENOVA_LISTA_SKLAD
INACTIVE AFTER DELETE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'delete from  CENOVA_LISTA_SKLAD where "ID"='||old.ID,(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_SKLAD_I */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_SKLAD_I FOR CENOVA_LISTA_SKLAD
INACTIVE AFTER INSERT POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'insert into CENOVA_LISTA_SKLAD ("ID", 
"OPR_ID", 
"SKLAD_ID")  values ('||coalesce(new."ID",'NULL')||' , ' 
||coalesce(-new."OPR_ID",'NULL')||' , ' 
||coalesce(new."SKLAD_ID",'NULL')||');', 
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_SKLAD_U */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_SKLAD_U FOR CENOVA_LISTA_SKLAD
INACTIVE AFTER UPDATE POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'update CENOVA_LISTA_SKLAD SET '||'"ID"='||coalesce(new."ID",'NULL')||' , ' 
||'"OPR_ID"='||coalesce(-new."OPR_ID",'NULL')||' , ' 
||'"SKLAD_ID"='||coalesce(new."SKLAD_ID",'NULL')|| 
' WHERE ID='||old.ID ,  
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CENOVA_LISTA_U */
CREATE TRIGGER ONOFFL_CENOVA_LISTA_U FOR CENOVA_LISTA
INACTIVE AFTER UPDATE POSITION 1024
AS    
 BEGIN  
  insert into on_off_line_log(id,sql,recipients)  
  values (gen_id(gen_on_off_line_log,1),  
  'update CENOVA_LISTA SET '||'"DEF"='||coalesce(new."DEF",'NULL')||' , ' 
||'"ID"='||coalesce(new."ID",'NULL')||' , ' 
||'"NAME"='||coalesce(''''||new."NAME"||'''','NULL')||' , ' 
||'"OPR_ID"='||coalesce(-new."OPR_ID",'NULL')||' , ' 
||'"TIP"='||coalesce(new."TIP",'NULL')||' , ' 
||'"OT_DATE"='||coalesce(''''||new."OT_DATE"||'''','NULL')||' , ' 
||'"DO_DATE"='||coalesce(''''||new."DO_DATE"||'''','NULL')||' , ' 
||'"OT_TIME"='||coalesce(''''||new."OT_TIME"||'''','NULL')||' , ' 
||'"DO_TIME"='||coalesce(''''||new."DO_TIME"||'''','NULL')||' , ' 
||'"WEEK"='||coalesce(new."WEEK",'NULL')||' , ' 
||'"ACTIVNA"='||coalesce(new."ACTIVNA",'NULL')||' , ' 
||'"PRIORITET"='||coalesce(new."PRIORITET",'NULL')||' , ' 
||'"DEF_FIKS"='||coalesce(new."DEF_FIKS",'NULL')|| 
' WHERE ID='||old.ID ,  
(select flag from get_recipients_all)); 
END
^


/* Trigger: ONOFFL_CFG_PAYMENTS_D */
CREATE TRIGGER ONOFFL_CFG_PAYMENTS_D FOR CFG_PAYMENTS
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "CFG_PAYMENTS" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_CFG_PAYMENTS_I */
CREATE TRIGGER ONOFFL_CFG_PAYMENTS_I FOR CFG_PAYMENTS
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "CFG_PAYMENTS" ("KASA_ID","NAME","ID","ATRIB","FISK")
VALUES ('||COALESCE(NEW."KASA_ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."ATRIB",'NULL')||','
||COALESCE(NEW."FISK",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_CFG_PAYMENTS_KLI_D */
CREATE TRIGGER ONOFFL_CFG_PAYMENTS_KLI_D FOR CFG_PAYMENTS_KLI
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "CFG_PAYMENTS_KLI" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_CFG_PAYMENTS_KLI_I */
CREATE TRIGGER ONOFFL_CFG_PAYMENTS_KLI_I FOR CFG_PAYMENTS_KLI
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "CFG_PAYMENTS_KLI" ("ID","CFG_PAYMENTS_ID","KLI_ID","KASA_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."CFG_PAYMENTS_ID",'NULL')||','
||COALESCE(NEW."KLI_ID",'NULL')||','
||COALESCE(NEW."KASA_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_CFG_PAYMENTS_KLI_U */
CREATE TRIGGER ONOFFL_CFG_PAYMENTS_KLI_U FOR CFG_PAYMENTS_KLI
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "CFG_PAYMENTS_KLI" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"CFG_PAYMENTS_ID"='||COALESCE(NEW."CFG_PAYMENTS_ID",'NULL')||','
||'"KLI_ID"='||COALESCE(NEW."KLI_ID",'NULL')||','
||'"KASA_ID"='||COALESCE(NEW."KASA_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_CFG_PAYMENTS_U */
CREATE TRIGGER ONOFFL_CFG_PAYMENTS_U FOR CFG_PAYMENTS
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "CFG_PAYMENTS" SET '
||'"KASA_ID"='||COALESCE(NEW."KASA_ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"ATRIB"='||COALESCE(NEW."ATRIB",'NULL')||','
||'"FISK"='||COALESCE(NEW."FISK",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_COUNTRIES_D */
CREATE TRIGGER ONOFFL_COUNTRIES_D FOR COUNTRIES
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "COUNTRIES" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_COUNTRIES_I */
CREATE TRIGGER ONOFFL_COUNTRIES_I FOR COUNTRIES
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "COUNTRIES" ("ID","NAME","CODE","NAME_ENG")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||COALESCE(''''||NEW."NAME_ENG"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_COUNTRIES_U */
CREATE TRIGGER ONOFFL_COUNTRIES_U FOR COUNTRIES
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "COUNTRIES" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"CODE"='||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||'"NAME_ENG"='||COALESCE(''''||NEW."NAME_ENG"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_DEF_RAZ_SIMPLE_D */
CREATE TRIGGER ONOFFL_DEF_RAZ_SIMPLE_D FOR DEF_RAZ_SIMPLE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "DEF_RAZ_SIMPLE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_DEF_RAZ_SIMPLE_I */
CREATE TRIGGER ONOFFL_DEF_RAZ_SIMPLE_I FOR DEF_RAZ_SIMPLE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "DEF_RAZ_SIMPLE" ("ID","SIMPLE_ID","RAZFASOVKA_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."RAZFASOVKA_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_DEF_RAZ_SIMPLE_U */
CREATE TRIGGER ONOFFL_DEF_RAZ_SIMPLE_U FOR DEF_RAZ_SIMPLE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "DEF_RAZ_SIMPLE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"RAZFASOVKA_ID"='||COALESCE(NEW."RAZFASOVKA_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_DVSK_DOK_TYPE_D */
CREATE TRIGGER ONOFFL_DVSK_DOK_TYPE_D FOR DVSK_DOK_TYPE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "DVSK_DOK_TYPE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_DVSK_DOK_TYPE_I */
CREATE TRIGGER ONOFFL_DVSK_DOK_TYPE_I FOR DVSK_DOK_TYPE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "DVSK_DOK_TYPE" ("ID","DOK_TYPE","NAME","SHORT_NAME")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."DOK_TYPE",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(''''||NEW."SHORT_NAME"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_DVSK_DOK_TYPE_U */
CREATE TRIGGER ONOFFL_DVSK_DOK_TYPE_U FOR DVSK_DOK_TYPE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "DVSK_DOK_TYPE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"DOK_TYPE"='||COALESCE(NEW."DOK_TYPE",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"SHORT_NAME"='||COALESCE(''''||NEW."SHORT_NAME"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ETIKETI_D */
CREATE TRIGGER ONOFFL_ETIKETI_D FOR ETIKETI
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "ETIKETI" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ETIKETI_I */
CREATE TRIGGER ONOFFL_ETIKETI_I FOR ETIKETI
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "ETIKETI" ("ID","NAME","OPISANIE_ETIKET")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(''''||NEW."OPISANIE_ETIKET"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ETIKETI_U */
CREATE TRIGGER ONOFFL_ETIKETI_U FOR ETIKETI
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "ETIKETI" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"OPISANIE_ETIKET"='||COALESCE(''''||NEW."OPISANIE_ETIKET"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_FIRMI_D */
CREATE TRIGGER ONOFFL_FIRMI_D FOR FIRMI
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "FIRMI" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_FIRMI_I */
CREATE TRIGGER ONOFFL_FIRMI_I FOR FIRMI
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "FIRMI" ("ID","NAME_FAK","COMMENT","ADRES","MOL","DAN_NUM","BULSTAT","REG_DDS","EMAIL","HTTP","TEL","PLACE_ID","IDNOMDDS")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME_FAK"||'''','NULL')||','
||COALESCE(''''||NEW."COMMENT"||'''','NULL')||','
||COALESCE(''''||NEW."ADRES"||'''','NULL')||','
||COALESCE(''''||NEW."MOL"||'''','NULL')||','
||COALESCE(''''||NEW."DAN_NUM"||'''','NULL')||','
||COALESCE(''''||NEW."BULSTAT"||'''','NULL')||','
||COALESCE(''''||NEW."REG_DDS"||'''','NULL')||','
||COALESCE(''''||NEW."EMAIL"||'''','NULL')||','
||COALESCE(''''||NEW."HTTP"||'''','NULL')||','
||COALESCE(''''||NEW."TEL"||'''','NULL')||','
||COALESCE(NEW."PLACE_ID",'NULL')||','
||COALESCE(''''||NEW."IDNOMDDS"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_FIRMI_U */
CREATE TRIGGER ONOFFL_FIRMI_U FOR FIRMI
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "FIRMI" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME_FAK"='||COALESCE(''''||NEW."NAME_FAK"||'''','NULL')||','
||'"COMMENT"='||COALESCE(''''||NEW."COMMENT"||'''','NULL')||','
||'"ADRES"='||COALESCE(''''||NEW."ADRES"||'''','NULL')||','
||'"MOL"='||COALESCE(''''||NEW."MOL"||'''','NULL')||','
||'"DAN_NUM"='||COALESCE(''''||NEW."DAN_NUM"||'''','NULL')||','
||'"BULSTAT"='||COALESCE(''''||NEW."BULSTAT"||'''','NULL')||','
||'"REG_DDS"='||COALESCE(''''||NEW."REG_DDS"||'''','NULL')||','
||'"EMAIL"='||COALESCE(''''||NEW."EMAIL"||'''','NULL')||','
||'"HTTP"='||COALESCE(''''||NEW."HTTP"||'''','NULL')||','
||'"TEL"='||COALESCE(''''||NEW."TEL"||'''','NULL')||','
||'"PLACE_ID"='||COALESCE(NEW."PLACE_ID",'NULL')||','
||'"IDNOMDDS"='||COALESCE(''''||NEW."IDNOMDDS"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_GARANCII_D */
CREATE TRIGGER ONOFFL_GARANCII_D FOR GARANCII
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "GARANCII" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_GARANCII_I */
CREATE TRIGGER ONOFFL_GARANCII_I FOR GARANCII
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "GARANCII" ("NAME","ID")
VALUES ('||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_GARANCII_U */
CREATE TRIGGER ONOFFL_GARANCII_U FOR GARANCII
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "GARANCII" SET '
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"ID"='||COALESCE(NEW."ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_IZP_TIP_D */
CREATE TRIGGER ONOFFL_IZP_TIP_D FOR IZP_TIP
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "IZP_TIP" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_IZP_TIP_I */
CREATE TRIGGER ONOFFL_IZP_TIP_I FOR IZP_TIP
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "IZP_TIP" ("ID","NAME","USE_KLI","USE_COMMENT")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(''''||NEW."USE_KLI"||'''','NULL')||','
||COALESCE(''''||NEW."USE_COMMENT"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_IZP_TIP_U */
CREATE TRIGGER ONOFFL_IZP_TIP_U FOR IZP_TIP
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "IZP_TIP" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"USE_KLI"='||COALESCE(''''||NEW."USE_KLI"||'''','NULL')||','
||'"USE_COMMENT"='||COALESCE(''''||NEW."USE_COMMENT"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KASA_D */
CREATE TRIGGER ONOFFL_KASA_D FOR KASA
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "KASA" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KASA_I */
CREATE TRIGGER ONOFFL_KASA_I FOR KASA
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "KASA" ("ID","NAME","USER_ID","IS_ACTIVE","OBEKT_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."USER_ID",'NULL')||','
||COALESCE(NEW."IS_ACTIVE",'NULL')||','
||COALESCE(NEW."OBEKT_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KASA_U */
CREATE TRIGGER ONOFFL_KASA_U FOR KASA
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "KASA" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||','
||'"IS_ACTIVE"='||COALESCE(NEW."IS_ACTIVE",'NULL')||','
||'"OBEKT_ID"='||COALESCE(NEW."OBEKT_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_ABONAMENT_D */
CREATE TRIGGER ONOFFL_KLI_ABONAMENT_D FOR KLI_ABONAMENT
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "KLI_ABONAMENT" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_ABONAMENT_I */
CREATE TRIGGER ONOFFL_KLI_ABONAMENT_I FOR KLI_ABONAMENT
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "KLI_ABONAMENT" ("ID","ABONAMENT_DO","KLI_ID","OBEKT_ID","TIP_ABONAMENT")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."ABONAMENT_DO"||'''','NULL')||','
||COALESCE(NEW."KLI_ID",'NULL')||','
||COALESCE(NEW."OBEKT_ID",'NULL')||','
||COALESCE(NEW."TIP_ABONAMENT",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_ABONAMENT_U */
CREATE TRIGGER ONOFFL_KLI_ABONAMENT_U FOR KLI_ABONAMENT
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "KLI_ABONAMENT" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"ABONAMENT_DO"='||COALESCE(''''||NEW."ABONAMENT_DO"||'''','NULL')||','
||'"KLI_ID"='||COALESCE(NEW."KLI_ID",'NULL')||','
||'"OBEKT_ID"='||COALESCE(NEW."OBEKT_ID",'NULL')||','
||'"TIP_ABONAMENT"='||COALESCE(NEW."TIP_ABONAMENT",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_D */
CREATE TRIGGER ONOFFL_KLI_D FOR KLI
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "KLI" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_DIST_NODE_D */
CREATE TRIGGER ONOFFL_KLI_DIST_NODE_D FOR KLI_DIST_NODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "KLI_DIST_NODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_DIST_NODE_I */
CREATE TRIGGER ONOFFL_KLI_DIST_NODE_I FOR KLI_DIST_NODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "KLI_DIST_NODE" ("ID","KLI_ID","DIST_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."KLI_ID",'NULL')||','
||COALESCE(NEW."DIST_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_DIST_NODE_U */
CREATE TRIGGER ONOFFL_KLI_DIST_NODE_U FOR KLI_DIST_NODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "KLI_DIST_NODE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"KLI_ID"='||COALESCE(NEW."KLI_ID",'NULL')||','
||'"DIST_ID"='||COALESCE(NEW."DIST_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_GROUP_D */
CREATE TRIGGER ONOFFL_KLI_GROUP_D FOR KLI_GROUP
INACTIVE AFTER DELETE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'delete from  KLI_GROUP where "ID"='||old.ID,(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_KLI_GROUP_I */
CREATE TRIGGER ONOFFL_KLI_GROUP_I FOR KLI_GROUP
INACTIVE AFTER INSERT POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'insert into KLI_GROUP ("ID",
"NAME",
"CODE",
"PARENT")  values ('||coalesce(new."ID",'NULL')||' , '
||coalesce(''''||new."NAME"||'''','NULL')||' , '
||coalesce(''''||new."CODE"||'''','NULL')||' , '
||coalesce(new."PARENT",'NULL')||');',
(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_KLI_GROUP_U */
CREATE TRIGGER ONOFFL_KLI_GROUP_U FOR KLI_GROUP
INACTIVE AFTER UPDATE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'update KLI_GROUP SET '||'"ID"='||coalesce(new."ID",'NULL')||' , '
||'"NAME"='||coalesce(''''||new."NAME"||'''','NULL')||' , '
||'"CODE"='||coalesce(''''||new."CODE"||'''','NULL')||' , '
||'"PARENT"='||coalesce(new."PARENT",'NULL')||
' WHERE ID='||old.ID , 
(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_KLI_I */
CREATE TRIGGER ONOFFL_KLI_I FOR KLI
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "KLI" ("ID","KLI_GROUP_ID","CODE","NAME","KLIENT","DOSTAV","PROIZV","PERCENT","COMMENT","ADRES","TEL","DIST","FOLDER","ZA_KASA","FIRMA_ID","FLAG_CHECK","OBEKT_ID","PLACE_ID","PADEJ","DEF_SEL_ID","TIP_PRINT","DEF_DOST_PRINT","DEF_PROD_PRINT","DEF_FAK_PRINT","DEF_MOVE_PRINT","PADEJ_DDS")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."KLI_GROUP_ID",'NULL')||','
||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(''''||NEW."KLIENT"||'''','NULL')||','
||COALESCE(''''||NEW."DOSTAV"||'''','NULL')||','
||COALESCE(''''||NEW."PROIZV"||'''','NULL')||','
||COALESCE(NEW."PERCENT",'NULL')||','
||COALESCE(''''||NEW."COMMENT"||'''','NULL')||','
||COALESCE(''''||NEW."ADRES"||'''','NULL')||','
||COALESCE(''''||NEW."TEL"||'''','NULL')||','
||COALESCE(''''||NEW."DIST"||'''','NULL')||','
||COALESCE(''''||NEW."FOLDER"||'''','NULL')||','
||COALESCE(''''||NEW."ZA_KASA"||'''','NULL')||','
||COALESCE(NEW."FIRMA_ID",'NULL')||','
||COALESCE(NEW."FLAG_CHECK",0)||','
||COALESCE(NEW."OBEKT_ID",'NULL')||','
||COALESCE(NEW."PLACE_ID",'NULL')||','
||COALESCE(NEW."PADEJ",0)||','
||COALESCE(NEW."DEF_SEL_ID",'NULL')||','
||COALESCE(NEW."TIP_PRINT",'NULL')||','
||COALESCE(''''||NEW."DEF_DOST_PRINT"||'''','NULL')||','
||COALESCE(''''||NEW."DEF_PROD_PRINT"||'''','NULL')||','
||COALESCE(''''||NEW."DEF_FAK_PRINT"||'''','NULL')||','
||COALESCE(''''||NEW."DEF_MOVE_PRINT"||'''','NULL')||','
||COALESCE(NEW."PADEJ_DDS", 0)||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_PRAGOVE_D */
CREATE TRIGGER ONOFFL_KLI_PRAGOVE_D FOR KLI_PRAGOVE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "KLI_PRAGOVE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_PRAGOVE_I */
CREATE TRIGGER ONOFFL_KLI_PRAGOVE_I FOR KLI_PRAGOVE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "KLI_PRAGOVE" ("ID","KLI_ID","NOM_PROD","SUMA")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."KLI_ID",'NULL')||','
||COALESCE(NEW."NOM_PROD",'NULL')||','
||COALESCE(NEW."SUMA",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_PRAGOVE_U */
CREATE TRIGGER ONOFFL_KLI_PRAGOVE_U FOR KLI_PRAGOVE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "KLI_PRAGOVE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"KLI_ID"='||COALESCE(NEW."KLI_ID",'NULL')||','
||'"NOM_PROD"='||COALESCE(NEW."NOM_PROD",'NULL')||','
||'"SUMA"='||COALESCE(NEW."SUMA",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_SKLAD_NODE_D */
CREATE TRIGGER ONOFFL_KLI_SKLAD_NODE_D FOR KLI_SKLAD_NODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "KLI_SKLAD_NODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_SKLAD_NODE_I */
CREATE TRIGGER ONOFFL_KLI_SKLAD_NODE_I FOR KLI_SKLAD_NODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "KLI_SKLAD_NODE" ("ID","KLI_ID","SKLAD_ID","SELEKCIQ_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."KLI_ID",'NULL')||','
||COALESCE(NEW."SKLAD_ID",'NULL')||','
||COALESCE(NEW."SELEKCIQ_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_SKLAD_NODE_U */
CREATE TRIGGER ONOFFL_KLI_SKLAD_NODE_U FOR KLI_SKLAD_NODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "KLI_SKLAD_NODE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"KLI_ID"='||COALESCE(NEW."KLI_ID",'NULL')||','
||'"SKLAD_ID"='||COALESCE(NEW."SKLAD_ID",'NULL')||','
||'"SELEKCIQ_ID"='||COALESCE(NEW."SELEKCIQ_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_KLI_U */
CREATE TRIGGER ONOFFL_KLI_U FOR KLI
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "KLI" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"KLI_GROUP_ID"='||COALESCE(NEW."KLI_GROUP_ID",'NULL')||','
||'"CODE"='||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"KLIENT"='||COALESCE(''''||NEW."KLIENT"||'''','NULL')||','
||'"DOSTAV"='||COALESCE(''''||NEW."DOSTAV"||'''','NULL')||','
||'"PROIZV"='||COALESCE(''''||NEW."PROIZV"||'''','NULL')||','
||'"PERCENT"='||COALESCE(NEW."PERCENT",'NULL')||','
||'"COMMENT"='||COALESCE(''''||NEW."COMMENT"||'''','NULL')||','
||'"ADRES"='||COALESCE(''''||NEW."ADRES"||'''','NULL')||','
||'"TEL"='||COALESCE(''''||NEW."TEL"||'''','NULL')||','
||'"DIST"='||COALESCE(''''||NEW."DIST"||'''','NULL')||','
||'"FOLDER"='||COALESCE(''''||NEW."FOLDER"||'''','NULL')||','
||'"ZA_KASA"='||COALESCE(''''||NEW."ZA_KASA"||'''','NULL')||','
||'"FIRMA_ID"='||COALESCE(NEW."FIRMA_ID",'NULL')||','
||'"FLAG_CHECK"='||COALESCE(NEW."FLAG_CHECK",'NULL')||','
||'"OBEKT_ID"='||COALESCE(NEW."OBEKT_ID",'NULL')||','
||'"PLACE_ID"='||COALESCE(NEW."PLACE_ID",'NULL')||','
||'"PADEJ"='||COALESCE(NEW."PADEJ",'NULL')||','
||'"DEF_SEL_ID"='||COALESCE(NEW."DEF_SEL_ID",'NULL')||','
||'"TIP_PRINT"='||COALESCE(NEW."TIP_PRINT",'NULL')||','
||'"DEF_DOST_PRINT"='||COALESCE(''''||NEW."DEF_DOST_PRINT"||'''','NULL')||','
||'"DEF_PROD_PRINT"='||COALESCE(''''||NEW."DEF_PROD_PRINT"||'''','NULL')||','
||'"DEF_FAK_PRINT"='||COALESCE(''''||NEW."DEF_FAK_PRINT"||'''','NULL')||','
||'"DEF_MOVE_PRINT"='||COALESCE(''''||NEW."DEF_MOVE_PRINT"||'''','NULL')||','
||'"PADEJ_DDS"='||COALESCE(NEW."PADEJ_DDS",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_MESA_D */
CREATE TRIGGER ONOFFL_MESA_D FOR MESA
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "MESA" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_MESA_I */
CREATE TRIGGER ONOFFL_MESA_I FOR MESA
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "MESA" ("ID","MARKA","STRANA_R","STRANA_G","STRANA_K","ELEMENT_ID","TIP","AGE")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."MARKA"||'''','NULL')||','
||COALESCE(NEW."STRANA_R",'NULL')||','
||COALESCE(NEW."STRANA_G",'NULL')||','
||COALESCE(NEW."STRANA_K",'NULL')||','
||COALESCE(NEW."ELEMENT_ID",'NULL')||','
||COALESCE(NEW."TIP",'NULL')||','
||COALESCE(''''||NEW."AGE"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_MESA_TIP_D */
CREATE TRIGGER ONOFFL_MESA_TIP_D FOR MESA_TIP
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "MESA_TIP" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_MESA_TIP_I */
CREATE TRIGGER ONOFFL_MESA_TIP_I FOR MESA_TIP
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "MESA_TIP" ("ID","NAME")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_MESA_TIP_U */
CREATE TRIGGER ONOFFL_MESA_TIP_U FOR MESA_TIP
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "MESA_TIP" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_MESA_U */
CREATE TRIGGER ONOFFL_MESA_U FOR MESA
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "MESA" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"MARKA"='||COALESCE(''''||NEW."MARKA"||'''','NULL')||','
||'"STRANA_R"='||COALESCE(NEW."STRANA_R",'NULL')||','
||'"STRANA_G"='||COALESCE(NEW."STRANA_G",'NULL')||','
||'"STRANA_K"='||COALESCE(NEW."STRANA_K",'NULL')||','
||'"ELEMENT_ID"='||COALESCE(NEW."ELEMENT_ID",'NULL')||','
||'"TIP"='||COALESCE(NEW."TIP",'NULL')||','
||'"AGE"='||COALESCE(''''||NEW."AGE"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ME_D */
CREATE TRIGGER ONOFFL_ME_D FOR ME
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "ME" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ME_I */
CREATE TRIGGER ONOFFL_ME_I FOR ME
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "ME" ("ID","NAME","NAME_LONG","KOEF","IS_BROI","PREFIX")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(''''||NEW."NAME_LONG"||'''','NULL')||','
||COALESCE(NEW."KOEF",'NULL')||','
||COALESCE(NEW."IS_BROI",0)||','
||COALESCE(''''||NEW."PREFIX"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ME_U */
CREATE TRIGGER ONOFFL_ME_U FOR ME
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "ME" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"NAME_LONG"='||COALESCE(''''||NEW."NAME_LONG"||'''','NULL')||','
||'"KOEF"='||COALESCE(NEW."KOEF",'NULL')||','
||'"IS_BROI"='||COALESCE(NEW."IS_BROI",'NULL')||','
||'"PREFIX"='||COALESCE(''''||NEW."PREFIX"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_OBEKT_D */
CREATE TRIGGER ONOFFL_OBEKT_D FOR OBEKT
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "OBEKT" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_OBEKT_I */
CREATE TRIGGER ONOFFL_OBEKT_I FOR OBEKT
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "OBEKT" ("ID","NAME","GARANCIA_NUM","FAK_NUM","PLACE_ID","LOCAL_FAK_NUM")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."GARANCIA_NUM",'NULL')||','
||COALESCE(''''||NEW."FAK_NUM"||'''','NULL')||','
||COALESCE(NEW."PLACE_ID",'NULL')||','
||COALESCE(''''||NEW."LOCAL_FAK_NUM"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_OBEKT_U */
CREATE TRIGGER ONOFFL_OBEKT_U FOR OBEKT
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "OBEKT" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"GARANCIA_NUM"='||COALESCE(NEW."GARANCIA_NUM",'NULL')||','
||'"FAK_NUM"='||COALESCE(''''||NEW."FAK_NUM"||'''','NULL')||','
||'"PLACE_ID"='||COALESCE(NEW."PLACE_ID",'NULL')||','
||'"LOCAL_FAK_NUM"='||COALESCE(''''||NEW."LOCAL_FAK_NUM"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_OWNER_BANKI_D */
CREATE TRIGGER ONOFFL_OWNER_BANKI_D FOR OWNER_BANKI
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "OWNER_BANKI" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_OWNER_BANKI_I */
CREATE TRIGGER ONOFFL_OWNER_BANKI_I FOR OWNER_BANKI
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "OWNER_BANKI" ("ID","BANKA","KOD","SMETKA","OWNER_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."BANKA"||'''','NULL')||','
||COALESCE(''''||NEW."KOD"||'''','NULL')||','
||COALESCE(''''||NEW."SMETKA"||'''','NULL')||','
||COALESCE(NEW."OWNER_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_OWNER_BANKI_U */
CREATE TRIGGER ONOFFL_OWNER_BANKI_U FOR OWNER_BANKI
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "OWNER_BANKI" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"BANKA"='||COALESCE(''''||NEW."BANKA"||'''','NULL')||','
||'"KOD"='||COALESCE(''''||NEW."KOD"||'''','NULL')||','
||'"SMETKA"='||COALESCE(''''||NEW."SMETKA"||'''','NULL')||','
||'"OWNER_ID"='||COALESCE(NEW."OWNER_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PARI_IO_D */
CREATE TRIGGER ONOFFL_PARI_IO_D FOR PARI_IO
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "PARI_IO" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PARI_IO_I */
CREATE TRIGGER ONOFFL_PARI_IO_I FOR PARI_IO
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "PARI_IO" ("ID","NAME","TIP","PARENT","USE_KLI","FAK")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."TIP",'NULL')||','
||COALESCE(NEW."PARENT",'NULL')||','
||COALESCE(''''||NEW."USE_KLI"||'''','NULL')||','
||COALESCE(''''||NEW."FAK"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PARI_IO_U */
CREATE TRIGGER ONOFFL_PARI_IO_U FOR PARI_IO
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "PARI_IO" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"TIP"='||COALESCE(NEW."TIP",'NULL')||','
||'"PARENT"='||COALESCE(NEW."PARENT",'NULL')||','
||'"USE_KLI"='||COALESCE(''''||NEW."USE_KLI"||'''','NULL')||','
||'"FAK"='||COALESCE(''''||NEW."FAK"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PATHS_D */
CREATE TRIGGER ONOFFL_PATHS_D FOR PATHS
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "PATHS" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PATHS_I */
CREATE TRIGGER ONOFFL_PATHS_I FOR PATHS
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "PATHS" ("ID","FROM_PLACE_ID","TO_PLACE_ID","DISTANCE","MARSHRUT")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."FROM_PLACE_ID",'NULL')||','
||COALESCE(NEW."TO_PLACE_ID",'NULL')||','
||COALESCE(NEW."DISTANCE",'NULL')||','
||COALESCE(''''||NEW."MARSHRUT"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PATHS_U */
CREATE TRIGGER ONOFFL_PATHS_U FOR PATHS
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "PATHS" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"FROM_PLACE_ID"='||COALESCE(NEW."FROM_PLACE_ID",'NULL')||','
||'"TO_PLACE_ID"='||COALESCE(NEW."TO_PLACE_ID",'NULL')||','
||'"DISTANCE"='||COALESCE(NEW."DISTANCE",'NULL')||','
||'"MARSHRUT"='||COALESCE(''''||NEW."MARSHRUT"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PLACE_D */
CREATE TRIGGER ONOFFL_PLACE_D FOR PLACE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "PLACE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PLACE_I */
CREATE TRIGGER ONOFFL_PLACE_I FOR PLACE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "PLACE" ("ID","NAME")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PLACE_U */
CREATE TRIGGER ONOFFL_PLACE_U FOR PLACE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "PLACE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_POCKET_SHOP_D */
CREATE TRIGGER ONOFFL_POCKET_SHOP_D FOR POCKET_SHOP
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "POCKET_SHOP" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_POCKET_SHOP_I */
CREATE TRIGGER ONOFFL_POCKET_SHOP_I FOR POCKET_SHOP
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "POCKET_SHOP" ("ID","SKLAD_ID","USER_ID","PRINTER","SMETKI","KOLICHESTWA","PATH","HIDE_QTY","VSICHKI","CL_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SKLAD_ID",'NULL')||','
||COALESCE(NEW."USER_ID",'NULL')||','
||COALESCE(''''||NEW."PRINTER"||'''','NULL')||','
||COALESCE(''''||NEW."SMETKI"||'''','NULL')||','
||COALESCE(''''||NEW."KOLICHESTWA"||'''','NULL')||','
||COALESCE(''''||NEW."PATH"||'''','NULL')||','
||COALESCE(''''||NEW."HIDE_QTY"||'''','NULL')||','
||COALESCE(NEW."VSICHKI",'NULL')||','
||COALESCE(NEW."CL_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_POCKET_SHOP_U */
CREATE TRIGGER ONOFFL_POCKET_SHOP_U FOR POCKET_SHOP
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "POCKET_SHOP" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SKLAD_ID"='||COALESCE(NEW."SKLAD_ID",'NULL')||','
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||','
||'"PRINTER"='||COALESCE(''''||NEW."PRINTER"||'''','NULL')||','
||'"SMETKI"='||COALESCE(''''||NEW."SMETKI"||'''','NULL')||','
||'"KOLICHESTWA"='||COALESCE(''''||NEW."KOLICHESTWA"||'''','NULL')||','
||'"PATH"='||COALESCE(''''||NEW."PATH"||'''','NULL')||','
||'"HIDE_QTY"='||COALESCE(''''||NEW."HIDE_QTY"||'''','NULL')||','
||'"VSICHKI"='||COALESCE(NEW."VSICHKI",'NULL')||','
||'"CL_ID"='||COALESCE(NEW."CL_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PROP_NODE_D */
CREATE TRIGGER ONOFFL_PROP_NODE_D FOR PROP_NODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "PROP_NODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PROP_NODE_I */
CREATE TRIGGER ONOFFL_PROP_NODE_I FOR PROP_NODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "PROP_NODE" ("ID","MAJOR_PROP_ID","MINOR_PROP_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."MAJOR_PROP_ID",'NULL')||','
||COALESCE(NEW."MINOR_PROP_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_PROP_NODE_U */
CREATE TRIGGER ONOFFL_PROP_NODE_U FOR PROP_NODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "PROP_NODE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"MAJOR_PROP_ID"='||COALESCE(NEW."MAJOR_PROP_ID",'NULL')||','
||'"MINOR_PROP_ID"='||COALESCE(NEW."MINOR_PROP_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZFASOVKA_D */
CREATE TRIGGER ONOFFL_RAZFASOVKA_D FOR RAZFASOVKA
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "RAZFASOVKA" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZFASOVKA_I */
CREATE TRIGGER ONOFFL_RAZFASOVKA_I FOR RAZFASOVKA
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "RAZFASOVKA" ("ID","RAZ_TIP_ID","KOL","SIMPLE_ID","RAZ_ELEMENT_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."RAZ_TIP_ID",'NULL')||','
||COALESCE(NEW."KOL",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."RAZ_ELEMENT_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZFASOVKA_U */
CREATE TRIGGER ONOFFL_RAZFASOVKA_U FOR RAZFASOVKA
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "RAZFASOVKA" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"RAZ_TIP_ID"='||COALESCE(NEW."RAZ_TIP_ID",'NULL')||','
||'"KOL"='||COALESCE(NEW."KOL",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"RAZ_ELEMENT_ID"='||COALESCE(NEW."RAZ_ELEMENT_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZ_ELEMENT_D */
CREATE TRIGGER ONOFFL_RAZ_ELEMENT_D FOR RAZ_ELEMENT
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "RAZ_ELEMENT" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZ_ELEMENT_I */
CREATE TRIGGER ONOFFL_RAZ_ELEMENT_I FOR RAZ_ELEMENT
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "RAZ_ELEMENT" ("ID","NAME")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZ_ELEMENT_U */
CREATE TRIGGER ONOFFL_RAZ_ELEMENT_U FOR RAZ_ELEMENT
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "RAZ_ELEMENT" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZ_TIP_D */
CREATE TRIGGER ONOFFL_RAZ_TIP_D FOR RAZ_TIP
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "RAZ_TIP" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZ_TIP_I */
CREATE TRIGGER ONOFFL_RAZ_TIP_I FOR RAZ_TIP
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "RAZ_TIP" ("ID","NAME","AMBALAJ")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."AMBALAJ",0)||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_RAZ_TIP_U */
CREATE TRIGGER ONOFFL_RAZ_TIP_U FOR RAZ_TIP
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "RAZ_TIP" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"AMBALAJ"='||COALESCE(NEW."AMBALAJ",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ROUND_TIP_D */
CREATE TRIGGER ONOFFL_ROUND_TIP_D FOR ROUND_TIP
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "ROUND_TIP" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ROUND_TIP_I */
CREATE TRIGGER ONOFFL_ROUND_TIP_I FOR ROUND_TIP
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "ROUND_TIP" ("ID","NAME","UP_DOWN","COEFFICIENT","PRODUCE")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."UP_DOWN", 0)||','
||COALESCE(NEW."COEFFICIENT",'NULL')||','
||COALESCE(NEW."PRODUCE", 0)||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_ROUND_TIP_U */
CREATE TRIGGER ONOFFL_ROUND_TIP_U FOR ROUND_TIP
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "ROUND_TIP" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"UP_DOWN"='||COALESCE(NEW."UP_DOWN",'NULL')||','
||'"COEFFICIENT"='||COALESCE(NEW."COEFFICIENT",'NULL')||','
||'"PRODUCE"='||COALESCE(NEW."PRODUCE",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_D */
CREATE TRIGGER ONOFFL_SELEKCIQ_D FOR SELEKCIQ
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SELEKCIQ" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_I */
CREATE TRIGGER ONOFFL_SELEKCIQ_I FOR SELEKCIQ
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SELEKCIQ" ("USER_ID","DATETIME","ID","NAME","TIP","ACTIVEN")
VALUES ('||COALESCE(NEW."USER_ID",'NULL')||','
||COALESCE(''''||NEW."DATETIME"||'''','NULL')||','
||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."TIP",0)||','
||COALESCE(NEW."ACTIVEN",1)||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_KALK_EL_D */
CREATE TRIGGER ONOFFL_SELEKCIQ_KALK_EL_D FOR SELEKCIQ_KALK_EL
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SELEKCIQ_KALK_EL" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_KALK_EL_I */
CREATE TRIGGER ONOFFL_SELEKCIQ_KALK_EL_I FOR SELEKCIQ_KALK_EL
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SELEKCIQ_KALK_EL" ("ID","SIMPLE_ID","SELEKCIQ_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."SELEKCIQ_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_KALK_EL_U */
CREATE TRIGGER ONOFFL_SELEKCIQ_KALK_EL_U FOR SELEKCIQ_KALK_EL
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SELEKCIQ_KALK_EL" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"SELEKCIQ_ID"='||COALESCE(NEW."SELEKCIQ_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_KLI_EL_D */
CREATE TRIGGER ONOFFL_SELEKCIQ_KLI_EL_D FOR SELEKCIQ_KLI_EL
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SELEKCIQ_KLI_EL" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_KLI_EL_I */
CREATE TRIGGER ONOFFL_SELEKCIQ_KLI_EL_I FOR SELEKCIQ_KLI_EL
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SELEKCIQ_KLI_EL" ("ID","KLI_ID","SELEKCIQ_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."KLI_ID",'NULL')||','
||COALESCE(NEW."SELEKCIQ_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_KLI_EL_U */
CREATE TRIGGER ONOFFL_SELEKCIQ_KLI_EL_U FOR SELEKCIQ_KLI_EL
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SELEKCIQ_KLI_EL" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"KLI_ID"='||COALESCE(NEW."KLI_ID",'NULL')||','
||'"SELEKCIQ_ID"='||COALESCE(NEW."SELEKCIQ_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_SIM_EL_D */
CREATE TRIGGER ONOFFL_SELEKCIQ_SIM_EL_D FOR SELEKCIQ_SIM_EL
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SELEKCIQ_SIM_EL" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_SIM_EL_I */
CREATE TRIGGER ONOFFL_SELEKCIQ_SIM_EL_I FOR SELEKCIQ_SIM_EL
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SELEKCIQ_SIM_EL" ("ID","SIMPLE_ID","SELEKCIQ_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."SELEKCIQ_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_SIM_EL_U */
CREATE TRIGGER ONOFFL_SELEKCIQ_SIM_EL_U FOR SELEKCIQ_SIM_EL
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SELEKCIQ_SIM_EL" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"SELEKCIQ_ID"='||COALESCE(NEW."SELEKCIQ_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SELEKCIQ_U */
CREATE TRIGGER ONOFFL_SELEKCIQ_U FOR SELEKCIQ
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SELEKCIQ" SET '
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||','
||'"DATETIME"='||COALESCE(''''||NEW."DATETIME"||'''','NULL')||','
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"TIP"='||COALESCE(NEW."TIP",'NULL')||','
||'"ACTIVEN"='||COALESCE(NEW."ACTIVEN",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_CALC_D */
CREATE TRIGGER ONOFFL_SIMPLE_CALC_D FOR SIMPLE_CALC
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SIMPLE_CALC" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_CALC_I */
CREATE TRIGGER ONOFFL_SIMPLE_CALC_I FOR SIMPLE_CALC
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SIMPLE_CALC" ("ID","SIMPLE_ID","CHILD_SIMPLE_ID","KOL","FORMULA","CHILD_SEL_ID","SEL_TEXT","MIN_KOL","MAX_KOL")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."CHILD_SIMPLE_ID",'NULL')||','
||COALESCE(NEW."KOL",'NULL')||','
||COALESCE(''''||NEW."FORMULA"||'''','NULL')||','
||COALESCE(NEW."CHILD_SEL_ID",'NULL')||','
||COALESCE(''''||NEW."SEL_TEXT"||'''','NULL')||','
||COALESCE(NEW."MIN_KOL",'NULL')||','
||COALESCE(NEW."MAX_KOL",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_CALC_U */
CREATE TRIGGER ONOFFL_SIMPLE_CALC_U FOR SIMPLE_CALC
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SIMPLE_CALC" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"CHILD_SIMPLE_ID"='||COALESCE(NEW."CHILD_SIMPLE_ID",'NULL')||','
||'"KOL"='||COALESCE(NEW."KOL",'NULL')||','
||'"FORMULA"='||COALESCE(''''||NEW."FORMULA"||'''','NULL')||','
||'"CHILD_SEL_ID"='||COALESCE(NEW."CHILD_SEL_ID",'NULL')||','
||'"SEL_TEXT"='||COALESCE(''''||NEW."SEL_TEXT"||'''','NULL')||','
||'"MIN_KOL"='||COALESCE(NEW."MIN_KOL",'NULL')||','
||'"MAX_KOL"='||COALESCE(NEW."MAX_KOL",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_CENI_D */
CREATE TRIGGER ONOFFL_SIMPLE_CENI_D FOR SIMPLE_CENI
INACTIVE AFTER DELETE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'delete from  SIMPLE_CENI where "ID"='||old.ID,(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_SIMPLE_CENI_I */
CREATE TRIGGER ONOFFL_SIMPLE_CENI_I FOR SIMPLE_CENI
INACTIVE AFTER INSERT POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'insert into SIMPLE_CENI ("ID",
"SIMPLE_ID",
"KLI_ID",
"KLI_GROUP_ID",
"CENA",
"PERCENT",
"SIMPLE_GR_ID")  values ('||coalesce(new."ID",'NULL')||' , '
||coalesce(new."SIMPLE_ID",'NULL')||' , '
||coalesce(new."KLI_ID",'NULL')||' , '
||coalesce(new."KLI_GROUP_ID",'NULL')||' , '
||coalesce(new."CENA",'NULL')||' , '
||coalesce(new."PERCENT",'NULL')||' , '
||coalesce(new."SIMPLE_GR_ID",'NULL')||');',
(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_SIMPLE_CENI_U */
CREATE TRIGGER ONOFFL_SIMPLE_CENI_U FOR SIMPLE_CENI
INACTIVE AFTER UPDATE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'update SIMPLE_CENI SET '||'"ID"='||coalesce(new."ID",'NULL')||' , '
||'"SIMPLE_ID"='||coalesce(new."SIMPLE_ID",'NULL')||' , '
||'"KLI_ID"='||coalesce(new."KLI_ID",'NULL')||' , '
||'"KLI_GROUP_ID"='||coalesce(new."KLI_GROUP_ID",'NULL')||' , '
||'"CENA"='||coalesce(new."CENA",'NULL')||' , '
||'"PERCENT"='||coalesce(new."PERCENT",'NULL')||' , '
||'"SIMPLE_GR_ID"='||coalesce(new."SIMPLE_GR_ID",'NULL')||
' WHERE ID='||old.ID , 
(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_SIMPLE_D */
CREATE TRIGGER ONOFFL_SIMPLE_D FOR SIMPLE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SIMPLE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_GROUP_D */
CREATE TRIGGER ONOFFL_SIMPLE_GROUP_D FOR SIMPLE_GROUP
INACTIVE AFTER DELETE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'delete from  SIMPLE_GROUP where "ID"='||old.ID,(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_SIMPLE_GROUP_I */
CREATE TRIGGER ONOFFL_SIMPLE_GROUP_I FOR SIMPLE_GROUP
INACTIVE AFTER INSERT POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'insert into SIMPLE_GROUP ("ID",
"NAME",
"PERCENT_PROD",
"PERCENT_EDRO",
"ROUND_PROD",
"ROUND_EDRO",
"PARENT")  values ('||coalesce(new."ID",'NULL')||' , '
||coalesce(''''||new."NAME"||'''','NULL')||' , '
||coalesce(new."PERCENT_PROD",'NULL')||' , '
||coalesce(new."PERCENT_EDRO",'NULL')||' , '
||coalesce(new."ROUND_PROD",'NULL')||' , '
||coalesce(new."ROUND_EDRO",'NULL')||' , '
||coalesce(new."PARENT",'NULL')||');',
(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_SIMPLE_GROUP_U */
CREATE TRIGGER ONOFFL_SIMPLE_GROUP_U FOR SIMPLE_GROUP
INACTIVE AFTER UPDATE POSITION 1024
AS   
 BEGIN 
  insert into on_off_line_log(id,sql,recipients) 
  values (gen_id(gen_on_off_line_log,1), 
  'update SIMPLE_GROUP SET '||'"ID"='||coalesce(new."ID",'NULL')||' , '
||'"NAME"='||coalesce(''''||new."NAME"||'''','NULL')||' , '
||'"PERCENT_PROD"='||coalesce(new."PERCENT_PROD",'NULL')||' , '
||'"PERCENT_EDRO"='||coalesce(new."PERCENT_EDRO",'NULL')||' , '
||'"ROUND_PROD"='||coalesce(new."ROUND_PROD",'NULL')||' , '
||'"ROUND_EDRO"='||coalesce(new."ROUND_EDRO",'NULL')||' , '
||'"PARENT"='||coalesce(new."PARENT",'NULL')||
' WHERE ID='||old.ID , 
(select flag from get_recipients_all));
END
^


/* Trigger: ONOFFL_SIMPLE_I */
CREATE TRIGGER ONOFFL_SIMPLE_I FOR SIMPLE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SIMPLE" ("G_KRI_MIN","G_KRI_DOST","BRUTO","CENA_POCKET","KOL_KRI_MAX","KOL_KRI_MIN","CENA_PROD_FAK","CENA_OFERTA","CENA_EDRO","CENA_PROD","DEF_SEL_CALC","G_TIP","G_PERIOD","DEF_SEL_ID","RAZ_TIP_ID","ID","TEMPERATURA","ME2_ID","RAZPAD","GODNOST","ACTIVE_SCALE","AMBALAJ","FLAG_CHECK","DEFAULT_RAZ_ID","DDS","SIMPLE_GROUP_ID","ME_ID","NAME_SHORT","NAME","CODE2","FLAF_AMBALAJ","RSN","USLUGA","LOCK_CENA_PROD","ACTIVE_FAK","ACTIVE","CODE","SUMA_DOST_CALC","GR_ZAMQNA_ID","IS_BONUS","USE_PROP")
VALUES ('||COALESCE(NEW."G_KRI_MIN",'NULL')||','
||COALESCE(NEW."G_KRI_DOST",'NULL')||','
||COALESCE(NEW."BRUTO",'NULL')||','
||COALESCE(NEW."CENA_POCKET", 0)||','
||COALESCE(NEW."KOL_KRI_MAX",'NULL')||','
||COALESCE(NEW."KOL_KRI_MIN",'NULL')||','
||COALESCE(NEW."CENA_PROD_FAK",'NULL')||','
||COALESCE(NEW."CENA_OFERTA",'NULL')||','
||COALESCE(NEW."CENA_EDRO",'NULL')||','
||COALESCE(NEW."CENA_PROD",'NULL')||','
||COALESCE(NEW."DEF_SEL_CALC",'NULL')||','
||COALESCE(NEW."G_TIP",'NULL')||','
||COALESCE(NEW."G_PERIOD",'NULL')||','
||COALESCE(NEW."DEF_SEL_ID",'NULL')||','
||COALESCE(NEW."RAZ_TIP_ID",'NULL')||','
||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."TEMPERATURA"||'''','NULL')||','
||COALESCE(NEW."ME2_ID",'NULL')||','
||COALESCE(NEW."RAZPAD",0)||','
||COALESCE(NEW."GODNOST",0)||','
||COALESCE(NEW."ACTIVE_SCALE",0)||','
||COALESCE(NEW."AMBALAJ",0)||','
||COALESCE(NEW."FLAG_CHECK",0)||','
||COALESCE(NEW."DEFAULT_RAZ_ID",'NULL')||','
||COALESCE(NEW."DDS",20.0)||','
||COALESCE(NEW."SIMPLE_GROUP_ID",'NULL')||','
||COALESCE(NEW."ME_ID",'NULL')||','
||COALESCE(''''||NEW."NAME_SHORT"||'''','NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(''''||NEW."CODE2"||'''','NULL')||','
||COALESCE(''''||NEW."FLAF_AMBALAJ"||'''', 0)||','
||COALESCE(''''||NEW."RSN"||'''', '0')||','
||COALESCE(''''||NEW."USLUGA"||'''', '0')||','
||COALESCE(''''||NEW."LOCK_CENA_PROD"||'''','NULL')||','
||COALESCE(''''||NEW."ACTIVE_FAK"||'''', '1')||','
||COALESCE(''''||NEW."ACTIVE"||'''', '1')||','
||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||COALESCE(NEW."SUMA_DOST_CALC",'NULL')||','
||COALESCE(NEW."GR_ZAMQNA_ID",'NULL')||','
||COALESCE(NEW."IS_BONUS",0)||','
||COALESCE(NEW."USE_PROP",0)||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_KOD_D */
CREATE TRIGGER ONOFFL_SIMPLE_KOD_D FOR SIMPLE_KOD
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SIMPLE_KOD" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_KOD_I */
CREATE TRIGGER ONOFFL_SIMPLE_KOD_I FOR SIMPLE_KOD
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SIMPLE_KOD" ("ID","SIMPLE_ID","KLI_ID","KOD")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."KLI_ID",'NULL')||','
||COALESCE(''''||NEW."KOD"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_KOD_U */
CREATE TRIGGER ONOFFL_SIMPLE_KOD_U FOR SIMPLE_KOD
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SIMPLE_KOD" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"KLI_ID"='||COALESCE(NEW."KLI_ID",'NULL')||','
||'"KOD"='||COALESCE(''''||NEW."KOD"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_D */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_D FOR SIMPLE_PROP
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SIMPLE_PROP" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_I */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_I FOR SIMPLE_PROP
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SIMPLE_PROP" ("ID","NAME")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_MINOR_D */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_MINOR_D FOR SIMPLE_PROP_MINOR
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SIMPLE_PROP_MINOR" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_MINOR_I */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_MINOR_I FOR SIMPLE_PROP_MINOR
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SIMPLE_PROP_MINOR" ("ID","NAME")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_MINOR_U */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_MINOR_U FOR SIMPLE_PROP_MINOR
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SIMPLE_PROP_MINOR" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_NODE_D */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_NODE_D FOR SIMPLE_PROP_NODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SIMPLE_PROP_NODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_NODE_I */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_NODE_I FOR SIMPLE_PROP_NODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SIMPLE_PROP_NODE" ("ID","SIMPLE_ID","MAJOR_PROP_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."MAJOR_PROP_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_NODE_U */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_NODE_U FOR SIMPLE_PROP_NODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SIMPLE_PROP_NODE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"MAJOR_PROP_ID"='||COALESCE(NEW."MAJOR_PROP_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_PROP_U */
CREATE TRIGGER ONOFFL_SIMPLE_PROP_U FOR SIMPLE_PROP
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SIMPLE_PROP" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_RAZ_D */
CREATE TRIGGER ONOFFL_SIMPLE_RAZ_D FOR SIMPLE_RAZ
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SIMPLE_RAZ" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_RAZ_I */
CREATE TRIGGER ONOFFL_SIMPLE_RAZ_I FOR SIMPLE_RAZ
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SIMPLE_RAZ" ("ID","NAME","SIMPLE_ID","KOL")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||COALESCE(NEW."KOL",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_RAZ_U */
CREATE TRIGGER ONOFFL_SIMPLE_RAZ_U FOR SIMPLE_RAZ
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SIMPLE_RAZ" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"SIMPLE_ID"='||COALESCE(NEW."SIMPLE_ID",'NULL')||','
||'"KOL"='||COALESCE(NEW."KOL",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SIMPLE_U */
CREATE TRIGGER ONOFFL_SIMPLE_U FOR SIMPLE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SIMPLE" SET '
||'"G_KRI_MIN"='||COALESCE(NEW."G_KRI_MIN",'NULL')||','
||'"G_KRI_DOST"='||COALESCE(NEW."G_KRI_DOST",'NULL')||','
||'"BRUTO"='||COALESCE(NEW."BRUTO",'NULL')||','
||'"CENA_POCKET"='||COALESCE(NEW."CENA_POCKET",'NULL')||','
||'"KOL_KRI_MAX"='||COALESCE(NEW."KOL_KRI_MAX",'NULL')||','
||'"KOL_KRI_MIN"='||COALESCE(NEW."KOL_KRI_MIN",'NULL')||','
||'"CENA_PROD_FAK"='||COALESCE(NEW."CENA_PROD_FAK",'NULL')||','
||'"CENA_OFERTA"='||COALESCE(NEW."CENA_OFERTA",'NULL')||','
||'"CENA_EDRO"='||COALESCE(NEW."CENA_EDRO",'NULL')||','
||'"CENA_PROD"='||COALESCE(NEW."CENA_PROD",'NULL')||','
||'"DEF_SEL_CALC"='||COALESCE(NEW."DEF_SEL_CALC",'NULL')||','
||'"G_TIP"='||COALESCE(NEW."G_TIP",'NULL')||','
||'"G_PERIOD"='||COALESCE(NEW."G_PERIOD",'NULL')||','
||'"DEF_SEL_ID"='||COALESCE(NEW."DEF_SEL_ID",'NULL')||','
||'"RAZ_TIP_ID"='||COALESCE(NEW."RAZ_TIP_ID",'NULL')||','
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"TEMPERATURA"='||COALESCE(''''||NEW."TEMPERATURA"||'''','NULL')||','
||'"ME2_ID"='||COALESCE(NEW."ME2_ID",'NULL')||','
||'"RAZPAD"='||COALESCE(NEW."RAZPAD",'NULL')||','
||'"GODNOST"='||COALESCE(NEW."GODNOST",'NULL')||','
||'"ACTIVE_SCALE"='||COALESCE(NEW."ACTIVE_SCALE",'NULL')||','
||'"AMBALAJ"='||COALESCE(NEW."AMBALAJ",'NULL')||','
||'"FLAG_CHECK"='||COALESCE(NEW."FLAG_CHECK",'NULL')||','
||'"DEFAULT_RAZ_ID"='||COALESCE(NEW."DEFAULT_RAZ_ID",'NULL')||','
||'"DDS"='||COALESCE(NEW."DDS",'NULL')||','
||'"SIMPLE_GROUP_ID"='||COALESCE(NEW."SIMPLE_GROUP_ID",'NULL')||','
||'"ME_ID"='||COALESCE(NEW."ME_ID",'NULL')||','
||'"NAME_SHORT"='||COALESCE(''''||NEW."NAME_SHORT"||'''','NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"CODE2"='||COALESCE(''''||NEW."CODE2"||'''','NULL')||','
||'"FLAF_AMBALAJ"='||COALESCE(''''||NEW."FLAF_AMBALAJ"||'''','NULL')||','
||'"RSN"='||COALESCE(''''||NEW."RSN"||'''','NULL')||','
||'"USLUGA"='||COALESCE(''''||NEW."USLUGA"||'''','NULL')||','
||'"LOCK_CENA_PROD"='||COALESCE(''''||NEW."LOCK_CENA_PROD"||'''','NULL')||','
||'"ACTIVE_FAK"='||COALESCE(''''||NEW."ACTIVE_FAK"||'''','NULL')||','
||'"ACTIVE"='||COALESCE(''''||NEW."ACTIVE"||'''','NULL')||','
||'"CODE"='||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||'"SUMA_DOST_CALC"='||COALESCE(NEW."SUMA_DOST_CALC",'NULL')||','
||'"GR_ZAMQNA_ID"='||COALESCE(NEW."GR_ZAMQNA_ID",'NULL')||','
||'"IS_BONUS"='||COALESCE(NEW."IS_BONUS",'NULL')||','
||'"USE_PROP"='||COALESCE(NEW."USE_PROP",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_D */
CREATE TRIGGER ONOFFL_SKLAD_D FOR SKLAD
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SKLAD" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_I */
CREATE TRIGGER ONOFFL_SKLAD_I FOR SKLAD
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SKLAD" ("ID","NAME","OBEKT_ID","USER_ID","IS_SYSTEM","POCKET","IS_ACTIVE")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."OBEKT_ID",'NULL')||','
||COALESCE(NEW."USER_ID",'NULL')||','
||COALESCE(NEW."IS_SYSTEM",0)||','
||COALESCE(''''||NEW."POCKET"||'''', '0')||','
||COALESCE(NEW."IS_ACTIVE",1)||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_MOL_D */
CREATE TRIGGER ONOFFL_SKLAD_MOL_D FOR SKLAD_MOL
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SKLAD_MOL" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_MOL_I */
CREATE TRIGGER ONOFFL_SKLAD_MOL_I FOR SKLAD_MOL
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SKLAD_MOL" ("ID","SKLAD_ID","USER_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."SKLAD_ID",'NULL')||','
||COALESCE(NEW."USER_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_MOL_U */
CREATE TRIGGER ONOFFL_SKLAD_MOL_U FOR SKLAD_MOL
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SKLAD_MOL" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SKLAD_ID"='||COALESCE(NEW."SKLAD_ID",'NULL')||','
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_SELEKCIQ_NODE_D */
CREATE TRIGGER ONOFFL_SKLAD_SELEKCIQ_NODE_D FOR SKLAD_SELEKCIQ_NODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "SKLAD_SELEKCIQ_NODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_SELEKCIQ_NODE_I */
CREATE TRIGGER ONOFFL_SKLAD_SELEKCIQ_NODE_I FOR SKLAD_SELEKCIQ_NODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "SKLAD_SELEKCIQ_NODE" ("ID_SELEKCIQ","ID_SKLAD","ID")
VALUES ('||COALESCE(NEW."ID_SELEKCIQ",'NULL')||','
||COALESCE(NEW."ID_SKLAD",'NULL')||','
||COALESCE(NEW."ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_SELEKCIQ_NODE_U */
CREATE TRIGGER ONOFFL_SKLAD_SELEKCIQ_NODE_U FOR SKLAD_SELEKCIQ_NODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SKLAD_SELEKCIQ_NODE" SET '
||'"ID_SELEKCIQ"='||COALESCE(NEW."ID_SELEKCIQ",'NULL')||','
||'"ID_SKLAD"='||COALESCE(NEW."ID_SKLAD",'NULL')||','
||'"ID"='||COALESCE(NEW."ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_SKLAD_U */
CREATE TRIGGER ONOFFL_SKLAD_U FOR SKLAD
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "SKLAD" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"OBEKT_ID"='||COALESCE(NEW."OBEKT_ID",'NULL')||','
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||','
||'"IS_SYSTEM"='||COALESCE(NEW."IS_SYSTEM",'NULL')||','
||'"POCKET"='||COALESCE(''''||NEW."POCKET"||'''','NULL')||','
||'"IS_ACTIVE"='||COALESCE(NEW."IS_ACTIVE",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_TIP_REFUSED_D */
CREATE TRIGGER ONOFFL_TIP_REFUSED_D FOR TIP_REFUSED
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "TIP_REFUSED" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_TIP_REFUSED_I */
CREATE TRIGGER ONOFFL_TIP_REFUSED_I FOR TIP_REFUSED
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "TIP_REFUSED" ("ID","NAME")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_TIP_REFUSED_U */
CREATE TRIGGER ONOFFL_TIP_REFUSED_U FOR TIP_REFUSED
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "TIP_REFUSED" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_D */
CREATE TRIGGER ONOFFL_USER_D FOR "USER"
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "USER" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_I */
CREATE TRIGGER ONOFFL_USER_I FOR "USER"
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "USER" ("RIGHTS2","RIGHTS","NAME","DEF_KASA_ID","EGN","IS_WORKED","TEL","PASS","ID","PASS2")
VALUES ('||COALESCE(NEW."RIGHTS2",'NULL')||','
||COALESCE(NEW."RIGHTS",'NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."DEF_KASA_ID",'NULL')||','
||COALESCE(''''||NEW."EGN"||'''','NULL')||','
||COALESCE(NEW."IS_WORKED",0)||','
||COALESCE(''''||NEW."TEL"||'''','NULL')||','
||COALESCE(''''||NEW."PASS"||'''','NULL')||','
||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."PASS2"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_KASA_NODE_D */
CREATE TRIGGER ONOFFL_USER_KASA_NODE_D FOR USER_KASA_NODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "USER_KASA_NODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_KASA_NODE_I */
CREATE TRIGGER ONOFFL_USER_KASA_NODE_I FOR USER_KASA_NODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "USER_KASA_NODE" ("ID","KASA_ID","USER_ID")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(NEW."KASA_ID",'NULL')||','
||COALESCE(NEW."USER_ID",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_KASA_NODE_U */
CREATE TRIGGER ONOFFL_USER_KASA_NODE_U FOR USER_KASA_NODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "USER_KASA_NODE" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"KASA_ID"='||COALESCE(NEW."KASA_ID",'NULL')||','
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_SKLAD_NODE_D */
CREATE TRIGGER ONOFFL_USER_SKLAD_NODE_D FOR USER_SKLAD_NODE
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "USER_SKLAD_NODE" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_SKLAD_NODE_I */
CREATE TRIGGER ONOFFL_USER_SKLAD_NODE_I FOR USER_SKLAD_NODE
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "USER_SKLAD_NODE" ("USER_ID","SKLAD_ID","ID","SPR_RIGHT","OPR_RIGHT")
VALUES ('||COALESCE(NEW."USER_ID",'NULL')||','
||COALESCE(NEW."SKLAD_ID",'NULL')||','
||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."SPR_RIGHT"||'''','NULL')||','
||COALESCE(''''||NEW."OPR_RIGHT"||'''','NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_SKLAD_NODE_U */
CREATE TRIGGER ONOFFL_USER_SKLAD_NODE_U FOR USER_SKLAD_NODE
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "USER_SKLAD_NODE" SET '
||'"USER_ID"='||COALESCE(NEW."USER_ID",'NULL')||','
||'"SKLAD_ID"='||COALESCE(NEW."SKLAD_ID",'NULL')||','
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"SPR_RIGHT"='||COALESCE(''''||NEW."SPR_RIGHT"||'''','NULL')||','
||'"OPR_RIGHT"='||COALESCE(''''||NEW."OPR_RIGHT"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_USER_U */
CREATE TRIGGER ONOFFL_USER_U FOR "USER"
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "USER" SET '
||'"RIGHTS2"='||COALESCE(NEW."RIGHTS2",'NULL')||','
||'"RIGHTS"='||COALESCE(NEW."RIGHTS",'NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"DEF_KASA_ID"='||COALESCE(NEW."DEF_KASA_ID",'NULL')||','
||'"EGN"='||COALESCE(''''||NEW."EGN"||'''','NULL')||','
||'"IS_WORKED"='||COALESCE(NEW."IS_WORKED",'NULL')||','
||'"TEL"='||COALESCE(''''||NEW."TEL"||'''','NULL')||','
||'"PASS"='||COALESCE(''''||NEW."PASS"||'''','NULL')||','
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"PASS2"='||COALESCE(''''||NEW."PASS2"||'''','NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_VALUTA_D */
CREATE TRIGGER ONOFFL_VALUTA_D FOR VALUTA
INACTIVE AFTER DELETE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS)
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'DELETE FROM  "VALUTA" WHERE "ID"='||OLD."ID",(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_VALUTA_I */
CREATE TRIGGER ONOFFL_VALUTA_I FOR VALUTA
INACTIVE AFTER INSERT POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1), 
'INSERT INTO "VALUTA" ("ID","CODE","NAME","KURS")
VALUES ('||COALESCE(NEW."ID",'NULL')||','
||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||COALESCE(NEW."KURS",'NULL')||');',
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ONOFFL_VALUTA_U */
CREATE TRIGGER ONOFFL_VALUTA_U FOR VALUTA
INACTIVE AFTER UPDATE POSITION 1024
AS
BEGIN
INSERT INTO ON_OFF_LINE_LOG(ID,SQL,RECIPIENTS) 
VALUES (GEN_ID(GEN_ON_OFF_LINE_LOG,1),
'UPDATE "VALUTA" SET '
||'"ID"='||COALESCE(NEW."ID",'NULL')||','
||'"CODE"='||COALESCE(''''||NEW."CODE"||'''','NULL')||','
||'"NAME"='||COALESCE(''''||NEW."NAME"||'''','NULL')||','
||'"KURS"='||COALESCE(NEW."KURS",'NULL')||
' WHERE ID = '||OLD."ID",
(SELECT FLAG FROM GET_RECIPIENTS_ALL));
END
^


/* Trigger: ON_OFF_LINE_LOG_AI */
CREATE TRIGGER ON_OFF_LINE_LOG_AI FOR ON_OFF_LINE_LOG
ACTIVE AFTER INSERT POSITION 0
AS
begin
  update "SYSTEM" set ONOFF_LAST_RESEEVED_ID=new.id;
  POST_EVENT 'ONOFF_LINE_LOG_REFRESH';
end
^


/* Trigger: OPENED_FORMS_SYS_BI */
CREATE TRIGGER OPENED_FORMS_SYS_BI FOR OPENED_FORMS_SYS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPENED_FORMS_SYS_ID,1); 
END
^


/* Trigger: OPRGARANCIA_BI */
CREATE TRIGGER OPRGARANCIA_BI FOR OPRGARANCIA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OPRGARANCIA_ID,1);
END
^


/* Trigger: OPR_AI0 */
CREATE TRIGGER OPR_AI0 FOR OPR
ACTIVE AFTER INSERT POSITION 0
AS
BEGIN
    POST_EVENT 'OPR_REFRESH';
    IF ( ((NEW.ID /1000 ) * 1000) = NEW.ID) THEN
        EXECUTE PROCEDURE MAINTENANCE_SELECTIVITY;
END
^


/* Trigger: OPR_ANUL_AI */
CREATE TRIGGER OPR_ANUL_AI FOR OPR_ANUL
ACTIVE AFTER INSERT POSITION 0
AS BEGIN POST_EVENT 'OPR_ANUL_REFRESH'; END
^


/* Trigger: OPR_ANUL_BI */
CREATE TRIGGER OPR_ANUL_BI FOR OPR_ANUL
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_OPR_ANUL_ID,1); END
^


/* Trigger: OPR_BI */
CREATE TRIGGER OPR_BI FOR OPR
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_OPR_ID,1);
    IF (NEW.DATETIME IS NULL) THEN
        NEW.DATETIME = CURRENT_TIMESTAMP;
    IF (NEW.OPR_DATE IS NULL) THEN
        NEW.OPR_DATE = CURRENT_DATE;
    IF (NEW.IS_LOCK IS NULL) THEN
        NEW.IS_LOCK = 0;
END
^


/* Trigger: OPR_EDIT_AI */
CREATE TRIGGER OPR_EDIT_AI FOR OPR_EDIT
ACTIVE AFTER INSERT POSITION 0
AS BEGIN POST_EVENT 'OPR_EDIT_REFRESH'; END
^


/* Trigger: OPR_EDIT_BI */
CREATE TRIGGER OPR_EDIT_BI FOR OPR_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_OPR_EDIT_ID,1); END
^


/* Trigger: OPR_GARANCIA_NODE_BI */
CREATE TRIGGER OPR_GARANCIA_NODE_BI FOR OPR_GARANCIA_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OPR_GARANCIA_NODE_ID,1);
END
^


/* Trigger: OPR_PRODUCTION_REQUEST_AI0 */
CREATE TRIGGER OPR_PRODUCTION_REQUEST_AI0 FOR OPR_PRODUCTION_REQUEST
ACTIVE AFTER INSERT POSITION 0
AS 
begin 
  POST_EVENT 'ADD_NEW_REQUEST'; 
end
^


/* Trigger: OPR_PRODUCTION_REQUEST_BI */
CREATE TRIGGER OPR_PRODUCTION_REQUEST_BI FOR OPR_PRODUCTION_REQUEST
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPR_PRODUCTION_REQUEST_ID,1); 
END
^


/* Trigger: OPR_RAZPAD_NODE_BI */
CREATE TRIGGER OPR_RAZPAD_NODE_BI FOR OPR_RAZPAD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OPR_RAZPAD_NODE_ID,1);
END
^


/* Trigger: OPR_REFUSED_BI */
CREATE TRIGGER OPR_REFUSED_BI FOR OPR_REFUSED
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OPR_REFUSED_ID,1);
END
^


/* Trigger: OPR_REMOTE_BI */
CREATE TRIGGER OPR_REMOTE_BI FOR OPR_REMOTE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OPR_REMOTE_ID,1);
END
^


/* Trigger: OPR_TEMPLATE_BI */
CREATE TRIGGER OPR_TEMPLATE_BI FOR OPR_TEMPLATE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPR_TEMPLATE_ID,1); 
END
^


/* Trigger: OPR_TEMPLATE_EL_BI */
CREATE TRIGGER OPR_TEMPLATE_EL_BI FOR OPR_TEMPLATE_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPR_TEMPLATE_EL_ID,1); 
END
^


/* Trigger: OPR_TEMPLATE_GEN_BI */
CREATE TRIGGER OPR_TEMPLATE_GEN_BI FOR OPR_TEMPLATE_GEN
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPR_TEMPLATE_GEN_ID,1); 
END
^


/* Trigger: OPR_TEMPLATE_TASK_NODE_BI */
CREATE TRIGGER OPR_TEMPLATE_TASK_NODE_BI FOR OPR_TEMPLATE_TASK_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPR_TEMPLATE_TASK_NODE_ID,1); 
END
^


/* Trigger: OPR_WAITING_NODE_BI */
CREATE TRIGGER OPR_WAITING_NODE_BI FOR OPR_WAITING_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPR_WAITING_NODE_ID,1); 
END
^


/* Trigger: OTC_BI */
CREATE TRIGGER OTC_BI FOR OTC
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OTC_ID,1);
END
^


/* Trigger: OTC_EL_BI */
CREATE TRIGGER OTC_EL_BI FOR OTC_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OTC_EL_ID,1);
END
^


/* Trigger: OUT_BI */
CREATE TRIGGER OUT_BI FOR OUT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OUT_ID,1); 
 
    IF (TRIM(NEW.CODE) = '') THEN 
        NEW.CODE = NULL; 
END
^


/* Trigger: OUT_EL2_BI */
CREATE TRIGGER OUT_EL2_BI FOR OUT_EL2
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OUT_EL2_ID,1);
END
^


/* Trigger: OUT_EL_ANUL_BI */
CREATE TRIGGER OUT_EL_ANUL_BI FOR OUT_EL_ANUL
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_OUT_EL_ANUL_ID,1); END
^


/* Trigger: OUT_EL_BI */
CREATE TRIGGER OUT_EL_BI FOR OUT_EL
ACTIVE BEFORE INSERT POSITION 0
AS
DECLARE VARIABLE L_SKLAD_ID INTEGER;
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_OUT_EL_ID,1);

    SELECT
        OPR.SKLAD_ID
    FROM
        OPR
    WHERE
        ID = NEW.OPR_ID
    INTO
        :L_SKLAD_ID;

    IF (NOT EXISTS (
        SELECT
            NAL.ID
        FROM
            NAL
        WHERE
            NAL.SKLAD_ID = :L_SKLAD_ID
            AND NAL.SIMPLE_ID = NEW.SIMPLE_ID))
    THEN BEGIN

        INSERT INTO NAL (SIMPLE_ID, SKLAD_ID, KOL_NAL, SUMA, LAST_CENA, SUMA_FR, KOL_RZV, DATETIME_LASTCENA)
        VALUES (NEW.SIMPLE_ID, :L_SKLAD_ID, 0.00, 0.00, 0.00,0.00, 0.00, CURRENT_TIMESTAMP);
    END
END
^


/* Trigger: OUT_EL_EDIT_BI */
CREATE TRIGGER OUT_EL_EDIT_BI FOR OUT_EL_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID(GEN_OUT_EL_EDIT_ID,1); END
^


/* Trigger: OWNER_BANKI_BI */
CREATE TRIGGER OWNER_BANKI_BI FOR OWNER_BANKI
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_owner_banki_id,1); 
end
^


/* Trigger: OWNER_BI */
CREATE TRIGGER OWNER_BI FOR OWNER
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OWNER_ID,1);
END
^


/* Trigger: PARI_BI */
CREATE TRIGGER PARI_BI FOR PARI
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_ID,1);
END
^


/* Trigger: PARI_IO_BI */
CREATE TRIGGER PARI_IO_BI FOR PARI_IO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_IO_ID,1);
END
^


/* Trigger: PARI_NODE_BI */
CREATE TRIGGER PARI_NODE_BI FOR PARI_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_NODE_ID,1);
END
^


/* Trigger: PARTIDA_EL_PRINT_BI */
CREATE TRIGGER PARTIDA_EL_PRINT_BI FOR PARTIDA_EL_PRINT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PARTIDA_EL_PRINT_ID,1); 
END
^


/* Trigger: PATHS_BI */
CREATE TRIGGER PATHS_BI FOR PATHS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PATHS_ID,1);
END
^


/* Trigger: PAYMENTS_EL_AI0 */
CREATE TRIGGER PAYMENTS_EL_AI0 FOR PAYMENTS_EL
ACTIVE AFTER INSERT POSITION 0
AS 
DECLARE VARIABLE L_KLI_ID INTEGER; 
DECLARE VARIABLE L_BONUS_TOCHKI INTEGER; 
DECLARE VARIABLE L_BONUS_TOCHKI_PAYMENT_TIP_ID INTEGER; 
DECLARE VARIABLE L_OBMIANA_BONUS_TOCHKI DOUBLE PRECISION; 
BEGIN 
    L_BONUS_TOCHKI_PAYMENT_TIP_ID = RDB$GET_CONTEXT('USER_TRANSACTION', 'BONUS_TOCHKI_PAYMENT_TIP_ID'); 
    L_OBMIANA_BONUS_TOCHKI = RDB$GET_CONTEXT('USER_TRANSACTION', 'OBMIANA_BONUS_TOCHKI'); 
 
    IF (L_BONUS_TOCHKI_PAYMENT_TIP_ID IS NULL) THEN 
        EXIT; 
 
    IF (L_OBMIANA_BONUS_TOCHKI IS NULL) THEN 
        EXIT; 
 
    SELECT 
        OPR.KLI_ID 
    FROM 
        OPR 
        INNER JOIN PAYMENT ON PAYMENT.OPR_ID = OPR.ID 
    WHERE 
        NEW.PAYMENT_TIP_ID = :L_BONUS_TOCHKI_PAYMENT_TIP_ID AND 
        PAYMENT.ID = NEW.PAYMENT_ID 
    INTO 
        :L_KLI_ID; 
 
    IF (L_KLI_ID IS NULL) THEN 
        EXIT; 
 
    L_BONUS_TOCHKI = TRUNC(NEW.SUMA * L_OBMIANA_BONUS_TOCHKI); 
 
    UPDATE KLI SET 
      BONUS_TOCHKI = BONUS_TOCHKI - :L_BONUS_TOCHKI 
    WHERE KLI.ID = :L_KLI_ID; 
END
^


/* Trigger: PAYMENT_AVANSOVO_BI */
CREATE TRIGGER PAYMENT_AVANSOVO_BI FOR PAYMENT_AVANSOVO
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PAYMENT_AVANSOVO_ID,1); 
END
^


/* Trigger: PAYMENT_BI */
CREATE TRIGGER PAYMENT_BI FOR PAYMENT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PAYMENT_ID,1);
END
^


/* Trigger: PAYMENT_NOW_BI */
CREATE TRIGGER PAYMENT_NOW_BI FOR PAYMENT_NOW
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_payment_now_id,1); 
end
^


/* Trigger: PAY_NOCASH_NODE_BI */
CREATE TRIGGER PAY_NOCASH_NODE_BI FOR PAY_NOCASH_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PAY_NOCASH_NODE_ID,1); 
END
^


/* Trigger: PL_DELIVERY_STORAGE_EDIT_BI */
CREATE TRIGGER PL_DELIVERY_STORAGE_EDIT_BI FOR PL_DELIVERY_STORAGE_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PL_DELIVERY_STORAGE_EDIT_ID,1); 
END
^


/* Trigger: POCKET_OTC_BI */
CREATE TRIGGER POCKET_OTC_BI FOR POCKET_OTC
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POCKET_OTC_ID,1); 
 
  NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: POCKET_SHOP_BI */
CREATE TRIGGER POCKET_SHOP_BI FOR POCKET_SHOP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
  NEW.ID = GEN_ID(GEN_POCKET_SHOP_ID,1);
END
^


/* Trigger: POR_DOST_KOL_RZV_BI */
CREATE TRIGGER POR_DOST_KOL_RZV_BI FOR POR_DOST_KOL_RZV
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_por_dost_kol_rzv_id,1); 
end
^


/* Trigger: POR_EL_COMMENT_BI */
CREATE TRIGGER POR_EL_COMMENT_BI FOR POR_EL_COMMENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POR_EL_COMMENT_ID,1); 
END
^


/* Trigger: POR_EL_EDIT_BI */
CREATE TRIGGER POR_EL_EDIT_BI FOR POR_EL_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_POR_EL_EDIT_ID,1);
END
^


/* Trigger: POR_EL_EXPLANATORY_BI */
CREATE TRIGGER POR_EL_EXPLANATORY_BI FOR POR_EL_EXPLANATORY
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POR_EL_EXPLANATORY_ID,1); 
END
^


/* Trigger: POR_EL_PRODUCTION_BI */
CREATE TRIGGER POR_EL_PRODUCTION_BI FOR POR_EL_PRODUCTION
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_por_el_production_id,1); 
end
^


/* Trigger: POR_FORMULA_PARAMS_BI */
CREATE TRIGGER POR_FORMULA_PARAMS_BI FOR POR_FORMULA_PARAMS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POR_FORMULA_PARAMS_ID,1); 
END
^


/* Trigger: POR_PRODUCTION_REQUEST_NODE_BI */
CREATE TRIGGER POR_PRODUCTION_REQUEST_NODE_BI FOR POR_PRODUCTION_REQUEST_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POR_PRODUCTION_REQUEST_NODE,1); 
END
^


/* Trigger: POR_PROP_NODE_BI */
CREATE TRIGGER POR_PROP_NODE_BI FOR POR_PROP_NODE
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_por_prop_node_id,1); 
end
^


/* Trigger: POR_RAZ_EDIT_BI */
CREATE TRIGGER POR_RAZ_EDIT_BI FOR POR_RAZ_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_POR_RAZ_EDIT_ID,1);
END
^


/* Trigger: POR_ZD_NODE_BI */
CREATE TRIGGER POR_ZD_NODE_BI FOR POR_ZD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POR_ZD_NODE_ID,1); 
END
^


/* Trigger: POS_OUT_EL_TO_SRV_OUT_EL_BI */
CREATE TRIGGER POS_OUT_EL_TO_SRV_OUT_EL_BI FOR POS_OUT_EL_TO_SRV_OUT_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POS_OUT_EL_TO_SRV_OUT_EL_ID,1); 
 
  NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: POS_TO_SRV_BI */
CREATE TRIGGER POS_TO_SRV_BI FOR POS_TO_SRV
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POS_TO_SRV_ID,1); 
 
  NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: POTV_BI */
CREATE TRIGGER POTV_BI FOR POTV
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POTV_ID,1); 
END
^


/* Trigger: POTV_EL_BI */
CREATE TRIGGER POTV_EL_BI FOR POTV_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POTV_EL_ID,1); 
END
^


/* Trigger: POTV_MOVE_EL_BI */
CREATE TRIGGER POTV_MOVE_EL_BI FOR POTV_MOVE_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_POTV_MOVE_EL_ID,1); 
END
^


/* Trigger: PRICE_LIST_DELIVERY_STORAGES_BI */
CREATE TRIGGER PRICE_LIST_DELIVERY_STORAGES_BI FOR PRICE_LIST_DELIVERY_STORAGES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PRICE_LIST_DELIVERY_STORAGE,1); 
END
^


/* Trigger: PRODUCTION_EXPLANATORY_BI */
CREATE TRIGGER PRODUCTION_EXPLANATORY_BI FOR PRODUCTION_EXPLANATORY
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PRODUCTION_EXPLANATORY_ID,1); 
END
^


/* Trigger: PRODUCTION_GRUPI_BI */
CREATE TRIGGER PRODUCTION_GRUPI_BI FOR PRODUCTION_GRUPI
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_production_grupi_id,1); 
end
^


/* Trigger: PRODUCTION_IN_EL_PARAMS_BI */
CREATE TRIGGER PRODUCTION_IN_EL_PARAMS_BI FOR PRODUCTION_IN_EL_PARAMS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PRODUCTION_IN_EL_PARAMS_ID,1); 
END
^


/* Trigger: PRODUCTION_KAPARO_NODE_BI */
CREATE TRIGGER PRODUCTION_KAPARO_NODE_BI FOR PRODUCTION_KAPARO_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PRODUCTION_KAPARO_NODE_ID,1); 
END
^


/* Trigger: PRODUCTION_MONTAJISTI_BI */
CREATE TRIGGER PRODUCTION_MONTAJISTI_BI FOR PRODUCTION_MONTAJISTI
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_production_montajisti_id,1); 
  if (new.DATE_TIME_ADD is null) then 
    new.DATE_TIME_ADD = CURRENT_TIMESTAMP; 
end
^


/* Trigger: PRODUCTION_REQUEST_EL_BI */
CREATE TRIGGER PRODUCTION_REQUEST_EL_BI FOR PRODUCTION_REQUEST_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PRODUCTION_REQUEST_EL_ID,1); 
END
^


/* Trigger: PRODUCTION_ZARABOTKA_BI */
CREATE TRIGGER PRODUCTION_ZARABOTKA_BI FOR PRODUCTION_ZARABOTKA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PRODUCTION_ZARABOTKA_ID,1); 
 
  if (NEW.DATE_TIME_ADD IS NULL) THEN 
    NEW.DATE_TIME_ADD = CURRENT_TIMESTAMP; 
END
^


/* Trigger: PRODUCTION_ZARABOTKA_IZPL */
CREATE TRIGGER PRODUCTION_ZARABOTKA_IZPL FOR PRODUCTION_ZARABOTKA_IZPLATENO
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PRODUCTION_ZARABOTKA_IZPL,1); 
 
  IF (NEW.DT IS NULL) THEN 
    NEW.DT = CURRENT_DATE; 
END
^


/* Trigger: PROD_AVANS_BI */
CREATE TRIGGER PROD_AVANS_BI FOR PROD_AVANS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PROD_AVANS_ID,1); 
END
^


/* Trigger: PROD_CENI_EL_AI0 */
CREATE TRIGGER PROD_CENI_EL_AI0 FOR PROD_CENI_EL
ACTIVE AFTER INSERT POSITION 0
AS 
DECLARE VARIABLE L_KLI_ID INTEGER; 
DECLARE VARIABLE L_STORE_ID INTEGER; 
DECLARE VARIABLE L_SIMPLE_ID INTEGER; 
DECLARE VARIABLE L_IS_PROMO SMALLINT; 
 
BEGIN 
  SELECT 
    OPR.KLI_ID, 
    OPR.SKLAD_ID, 
    OUT_EL.SIMPLE_ID 
  FROM 
    OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
  WHERE 
    OUT_EL.ID = NEW.OUT_EL_ID 
  INTO :L_KLI_ID, :L_STORE_ID, :L_SIMPLE_ID; 
 
  EXECUTE PROCEDURE GET_SIMPLE_PRICE_LIST_PROMO(:L_SIMPLE_ID, :L_KLI_ID, :L_STORE_ID) RETURNING_VALUES :L_IS_PROMO; 
 
  if (:L_IS_PROMO = 1) then 
    UPDATE PROD_CENI_EL SET PROD_CENI_EL.IS_PROMOTIONAL =:L_IS_PROMO WHERE PROD_CENI_EL.ID = NEW.ID; 
END
^


/* Trigger: PROD_PRODUCTION_BI */
CREATE TRIGGER PROD_PRODUCTION_BI FOR PROD_PRODUCTION
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PROD_PRODUCTION_ID,1); 
END
^


/* Trigger: PROD_REQUEST_PRODUCTION_NODE_BI */
CREATE TRIGGER PROD_REQUEST_PRODUCTION_NODE_BI FOR PROD_REQUEST_PRODUCTION_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PROD_REQUEST_PRODUCTION,1); 
END
^


/* Trigger: PROD_STOCK_BI */
CREATE TRIGGER PROD_STOCK_BI FOR PROD_STOCK
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PROD_STOCK_ID,1); 
END
^


/* Trigger: PROD_STOCK_EL_BI */
CREATE TRIGGER PROD_STOCK_EL_BI FOR PROD_STOCK_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PROD_STOCK_EL_ID,1); 
END
^


/* Trigger: PROD_VAUCHER_BI */
CREATE TRIGGER PROD_VAUCHER_BI FOR PROD_VAUCHER
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_PROD_VAUCHER_ID, 1); 
 
    NEW.FLAG = 0; 
END
^


/* Trigger: PR_REQUEST_EXPLANATORY_BI */
CREATE TRIGGER PR_REQUEST_EXPLANATORY_BI FOR PR_REQUEST_EXPLANATORY
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_PR_REQUEST_EXPLANATORY_ID,1); 
END
^


/* Trigger: PR_REQUEST_FORMULA_PARAMS_BI */
CREATE TRIGGER PR_REQUEST_FORMULA_PARAMS_BI FOR PR_REQUEST_FORMULA_PARAMS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_REQUEST_FORMULA_PARAMS_ID,1); 
END
^


/* Trigger: RAZFASOVKA_BI */
CREATE TRIGGER RAZFASOVKA_BI FOR RAZFASOVKA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_RAZFASOVKA_ID,1);
END
^


/* Trigger: RAZFASOVKA_LOG_AD103 */
CREATE TRIGGER RAZFASOVKA_LOG_AD103 FOR RAZFASOVKA
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'RAZ_TIP_ID', 'D', CAST(OLD."RAZ_TIP_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'KOL', 'D', CAST(OLD."KOL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'SIMPLE_ID', 'D', CAST(OLD."SIMPLE_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'RAZ_ELEMENT_ID', 'D', CAST(OLD."RAZ_ELEMENT_ID" AS DOM_CHAR_300), null); END
^


/* Trigger: RAZFASOVKA_LOG_AI103 */
CREATE TRIGGER RAZFASOVKA_LOG_AI103 FOR RAZFASOVKA
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', null, 'RAZ_TIP_ID', 'I', null, CAST(NEW."RAZ_TIP_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', null, 'KOL', 'I', null, CAST(NEW."KOL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', null, 'SIMPLE_ID', 'I', null, CAST(NEW."SIMPLE_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', null, 'RAZ_ELEMENT_ID', 'I', null, CAST(NEW."RAZ_ELEMENT_ID" AS DOM_CHAR_300)); END
^


/* Trigger: RAZFASOVKA_LOG_AU103 */
CREATE TRIGGER RAZFASOVKA_LOG_AU103 FOR RAZFASOVKA
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'RAZ_TIP_ID', 'U', CAST(OLD."RAZ_TIP_ID" AS DOM_CHAR_300), CAST(NEW.RAZ_TIP_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'KOL', 'U', CAST(OLD."KOL" AS DOM_CHAR_300), CAST(NEW.KOL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'SIMPLE_ID', 'U', CAST(OLD."SIMPLE_ID" AS DOM_CHAR_300), CAST(NEW.SIMPLE_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZFASOVKA', OLD.ID, 'RAZ_ELEMENT_ID', 'U', CAST(OLD."RAZ_ELEMENT_ID" AS DOM_CHAR_300), CAST(NEW.RAZ_ELEMENT_ID AS DOM_CHAR_300)); END
^


/* Trigger: RAZ_ELEMENT_BI */
CREATE TRIGGER RAZ_ELEMENT_BI FOR RAZ_ELEMENT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_RAZ_ELEMENT_ID,1);
END
^


/* Trigger: RAZ_ELEMENT_LOG_AD103 */
CREATE TRIGGER RAZ_ELEMENT_LOG_AD103 FOR RAZ_ELEMENT
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZ_ELEMENT', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('RAZ_ELEMENT', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null); END
^


/* Trigger: RAZ_ELEMENT_LOG_AI103 */
CREATE TRIGGER RAZ_ELEMENT_LOG_AI103 FOR RAZ_ELEMENT
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZ_ELEMENT', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZ_ELEMENT', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300)); END
^


/* Trigger: RAZ_ELEMENT_LOG_AU103 */
CREATE TRIGGER RAZ_ELEMENT_LOG_AU103 FOR RAZ_ELEMENT
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZ_ELEMENT', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZ_ELEMENT', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300)); END
^


/* Trigger: RAZ_TIP_BI */
CREATE TRIGGER RAZ_TIP_BI FOR RAZ_TIP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_RAZ_TIP_ID,1);
END
^


/* Trigger: RAZ_TIP_LOG_AD103 */
CREATE TRIGGER RAZ_TIP_LOG_AD103 FOR RAZ_TIP
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', OLD.ID, 'AMBALAJ', 'D', CAST(OLD."AMBALAJ" AS DOM_CHAR_300), null); END
^


/* Trigger: RAZ_TIP_LOG_AI103 */
CREATE TRIGGER RAZ_TIP_LOG_AI103 FOR RAZ_TIP
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', null, 'AMBALAJ', 'I', null, CAST(NEW."AMBALAJ" AS DOM_CHAR_300)); END
^


/* Trigger: RAZ_TIP_LOG_AU103 */
CREATE TRIGGER RAZ_TIP_LOG_AU103 FOR RAZ_TIP
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('RAZ_TIP', OLD.ID, 'AMBALAJ', 'U', CAST(OLD."AMBALAJ" AS DOM_CHAR_300), CAST(NEW.AMBALAJ AS DOM_CHAR_300)); END
^


/* Trigger: REQUEST_PRODUCTION_NODE_BI */
CREATE TRIGGER REQUEST_PRODUCTION_NODE_BI FOR REQUEST_PRODUCTION_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_REQUEST_PRODUCTION_NODE_ID,1); 
END
^


/* Trigger: RETPRODRETFAKPRODKINODEBI */
CREATE TRIGGER RETPRODRETFAKPRODKINODEBI FOR RET_PROD_RET_FAK_PROD_KI_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_RETPRODRETFAKPRODKINODEID,1); 
END
^


/* Trigger: RET_STOKA_PROD_KI_AI0 */
CREATE TRIGGER RET_STOKA_PROD_KI_AI0 FOR RET_STOKA_PROD_KI
INACTIVE AFTER INSERT POSITION 0
AS 
DECLARE VARIABLE L_COUNT DOUBLE PRECISION; 
 
BEGIN 
    SELECT 
        COUNT(SUMI.OPR_ID) 
    FROM 
        SUMI 
    WHERE 
        SUMI.OPR_ID = NEW.OPR_ID 
    INTO :L_COUNT; 
 
    IF (L_COUNT > 1) THEN BEGIN 
        DELETE FROM SUMI 
        WHERE 
            SUMI.OPR_ID = NEW.OPR_ID 
        ORDER BY SUMI.ID ASC 
        ROWS 2 TO :L_COUNT; 
    END 
END
^


/* Trigger: RET_STOKA_PROD_KI_BI */
CREATE TRIGGER RET_STOKA_PROD_KI_BI FOR RET_STOKA_PROD_KI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_RET_STOKA_PROD_KI_ID,1); 
END
^


/* Trigger: ROUND_TIP_BI */
CREATE TRIGGER ROUND_TIP_BI FOR ROUND_TIP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_ROUND_TIP_ID,1); 
END
^


/* Trigger: SASTAV_BI */
CREATE TRIGGER SASTAV_BI FOR SASTAV
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_sastav_id,1); 
end
^


/* Trigger: SELEKCIQ_KALK_EL_BI */
CREATE TRIGGER SELEKCIQ_KALK_EL_BI FOR SELEKCIQ_KALK_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SELEKCIQ_KALC_ID,1);
END
^


/* Trigger: SELEKCIQ_KASA_EL_BI */
CREATE TRIGGER SELEKCIQ_KASA_EL_BI FOR SELEKCIQ_KASA_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SELEKCIQ_KASA_EL_ID,1); 
END
^


/* Trigger: SELEKCIQ_KLI_EL_BID0 */
CREATE TRIGGER SELEKCIQ_KLI_EL_BID0 FOR SELEKCIQ_KLI_EL
ACTIVE BEFORE INSERT OR DELETE POSITION 0
AS 
declare variable l_cl_opr_id integer; 
declare variable l_bc_id integer; 
declare variable l_sel_id integer; 
begin 
  if (inserting) then 
    l_sel_id = new.selekciq_id; 
  else 
    l_sel_id = old.selekciq_id; 
 
  for 
    select 
      cl.opr_id 
    from cenova_lista cl 
    where 
      cl.sel_kli = :l_sel_id 
    into :l_cl_opr_id 
  do 
  begin 
    if (inserting) then 
      insert into cenova_lista_kli (opr_id, kli_id) values (:l_cl_opr_id, new.kli_id); 
    else 
    if (deleting) then 
      delete from cenova_lista_kli clk where clk.opr_id = :l_cl_opr_id and clk.kli_id = old.kli_id; 
  end 
 
  for 
    select 
      bc.id 
    from bonus_config bc 
    where 
      bc.sel_kli = :l_sel_id 
    into :l_bc_id 
  do 
  begin 
    if (inserting) then 
      insert into bonus_config_kli(bonus_id, kli_id) values (:l_bc_id, new.kli_id); 
    else 
    if (deleting) then 
      delete from bonus_config_kli bck where bck.bonus_id = :l_bc_id and bck.kli_id = old.kli_id; 
  end 
 
  IF (DELETING) THEN 
    IF ((SELECT KLI.DEF_SEL_ID FROM KLI WHERE KLI.ID = OLD.KLI_ID) = OLD.SELEKCIQ_ID) THEN 
      UPDATE KLI SET KLI.DEF_SEL_ID = NULL WHERE KLI.ID = OLD.KLI_ID; 
end
^


/* Trigger: SELEKCIQ_SIM_EL_BD0 */
CREATE TRIGGER SELEKCIQ_SIM_EL_BD0 FOR SELEKCIQ_SIM_EL
ACTIVE BEFORE DELETE POSITION 0
AS
DECLARE VARIABLE DEF_SEL_ID INTEGER;
BEGIN
  SELECT
    SIMPLE.DEF_SEL_ID
  FROM
    SIMPLE
  WHERE
    SIMPLE.ID = OLD.SIMPLE_ID
  INTO
    :DEF_SEL_ID;

  IF (DEF_SEL_ID = OLD.SELEKCIQ_ID) THEN
  BEGIN
    UPDATE SIMPLE SET SIMPLE.DEF_SEL_ID = NULL WHERE SIMPLE.ID = OLD.SIMPLE_ID;
  END
END
^


/* Trigger: SEL_OPRS_BI */
CREATE TRIGGER SEL_OPRS_BI FOR SEL_OPRS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SEL_OPRS_ID,1); 
END
^


/* Trigger: SEL_OPR_BI */
CREATE TRIGGER SEL_OPR_BI FOR SEL_OPR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SEL_OPR_ID,1); 
END
^


/* Trigger: SEL_SIMPLE_BI */
CREATE TRIGGER SEL_SIMPLE_BI FOR SEL_SIMPLE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SEL_SIMPLE_ID,1); 
END
^


/* Trigger: SIMPLE_ACZIS_BI */
CREATE TRIGGER SIMPLE_ACZIS_BI FOR SIMPLE_ACZIS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_ACZIS_ID,1); 
END
^


/* Trigger: SIMPLE_ADRESIRANE_BI */
CREATE TRIGGER SIMPLE_ADRESIRANE_BI FOR SIMPLE_ADRESIRANE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_ADRESIRANE_ID,1); 
END
^


/* Trigger: SIMPLE_ADRESIRANE_GRUPA_BI */
CREATE TRIGGER SIMPLE_ADRESIRANE_GRUPA_BI FOR SIMPLE_ADRESIRANE_GRUPA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_ADRESIRANE_GRUPA_ID,1); 
END
^


/* Trigger: SIMPLE_ADRESIRANE_NODE_BI */
CREATE TRIGGER SIMPLE_ADRESIRANE_NODE_BI FOR SIMPLE_ADRESIRANE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_ADRESIRANE_NODE_ID,1); 
END
^


/* Trigger: SIMPLE_BI */
CREATE TRIGGER SIMPLE_BI FOR SIMPLE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_SIMPLE_ID,1); 
 
    IF (NEW.FLAG_VAUCHER IS NULL) THEN 
        NEW.FLAG_VAUCHER = 0; 
 
    IF (NEW.FLAG_MENU IS NULL) THEN 
        NEW.FLAG_MENU = 0; 
END
^


/* Trigger: SIMPLE_CALC_BI */
CREATE TRIGGER SIMPLE_CALC_BI FOR SIMPLE_CALC
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SIMPLE_CALC_ID,1);
END
^


/* Trigger: SIMPLE_CALC_OLD_BI */
CREATE TRIGGER SIMPLE_CALC_OLD_BI FOR SIMPLE_CALC_OLD
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_CALC_OLD_ID,1); 
END
^


/* Trigger: SIMPLE_CENI_BI */
CREATE TRIGGER SIMPLE_CENI_BI FOR SIMPLE_CENI
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SIMPLE_CENI_ID,1);
END
^


/* Trigger: SIMPLE_EXPLANATORY_BI */
CREATE TRIGGER SIMPLE_EXPLANATORY_BI FOR SIMPLE_EXPLANATORY
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_EXPLANATORY_ID,1); 
END
^


/* Trigger: SIMPLE_GROUP_BI */
CREATE TRIGGER SIMPLE_GROUP_BI FOR SIMPLE_GROUP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SIMPLE_GROUP_ID,1);
END
^


/* Trigger: SIMPLE_KA_BIM_BI */
CREATE TRIGGER SIMPLE_KA_BIM_BI FOR SIMPLE_KA_BIM
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_simple_ka_bim_id,1); 
end
^


/* Trigger: SIMPLE_KOD_BI */
CREATE TRIGGER SIMPLE_KOD_BI FOR SIMPLE_KOD
ACTIVE BEFORE INSERT POSITION 0
AS   BEGIN     IF (NEW.ID IS NULL) THEN       NEW.ID = GEN_ID(GEN_SIMPLE_KOD_ID,1);   END
^


/* Trigger: SIMPLE_LOG_AD103 */
CREATE TRIGGER SIMPLE_LOG_AD103 FOR SIMPLE
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'NAME_SHORT', 'D', CAST(OLD."NAME_SHORT" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CODE', 'D', CAST(OLD."CODE" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ME_ID', 'D', CAST(OLD."ME_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'SIMPLE_GROUP_ID', 'D', CAST(OLD."SIMPLE_GROUP_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ACTIVE', 'D', CAST(OLD."ACTIVE" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ACTIVE_FAK', 'D', CAST(OLD."ACTIVE_FAK" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'LOCK_CENA_PROD', 'D', CAST(OLD."LOCK_CENA_PROD" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_PROD', 'D', CAST(OLD."CENA_PROD" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_EDRO', 'D', CAST(OLD."CENA_EDRO" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_OFERTA', 'D', CAST(OLD."CENA_OFERTA" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_PROD_FAK', 'D', CAST(OLD."CENA_PROD_FAK" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DDS', 'D', CAST(OLD."DDS" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'KOL_KRI_MIN', 'D', CAST(OLD."KOL_KRI_MIN" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'KOL_KRI_MAX', 'D', CAST(OLD."KOL_KRI_MAX" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DEFAULT_RAZ_ID', 'D', CAST(OLD."DEFAULT_RAZ_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'USLUGA', 'D', CAST(OLD."USLUGA" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_POCKET', 'D', CAST(OLD."CENA_POCKET" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'RSN', 'D', CAST(OLD."RSN" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_CHECK', 'D', CAST(OLD."FLAG_CHECK" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'RAZ_TIP_ID', 'D', CAST(OLD."RAZ_TIP_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'AMBALAJ', 'D', CAST(OLD."AMBALAJ" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ACTIVE_SCALE', 'D', CAST(OLD."ACTIVE_SCALE" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'GODNOST', 'D', CAST(OLD."GODNOST" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'BRUTO', 'D', CAST(OLD."BRUTO" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DEF_SEL_ID', 'D', CAST(OLD."DEF_SEL_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'RAZPAD', 'D', CAST(OLD."RAZPAD" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_KRI_DOST', 'D', CAST(OLD."G_KRI_DOST" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_KRI_MIN', 'D', CAST(OLD."G_KRI_MIN" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_PERIOD', 'D', CAST(OLD."G_PERIOD" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_TIP', 'D', CAST(OLD."G_TIP" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ME2_ID', 'D', CAST(OLD."ME2_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAF_AMBALAJ', 'D', CAST(OLD."FLAF_AMBALAJ" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DEF_SEL_CALC', 'D', CAST(OLD."DEF_SEL_CALC" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CODE2', 'D', CAST(OLD."CODE2" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'TEMPERATURA', 'D', CAST(OLD."TEMPERATURA" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'SUMA_DOST_CALC', 'D', CAST(OLD."SUMA_DOST_CALC" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'GR_ZAMQNA_ID', 'D', CAST(OLD."GR_ZAMQNA_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'IS_BONUS', 'D', CAST(OLD."IS_BONUS" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'USE_PROP', 'D', CAST(OLD."USE_PROP" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'NAME_2', 'D', CAST(OLD."NAME_2" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_PROIZHOD', 'D', CAST(OLD."FLAG_PROIZHOD" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'EXT1', 'D', CAST(SUBSTRING(OLD."EXT1" FROM 1 FOR 300) AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'USE_EXPLAN', 'D', CAST(OLD."USE_EXPLAN" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'MARK_AS_BROI', 'D', CAST(OLD."MARK_AS_BROI" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'SASTAV_ID', 'D', CAST(OLD."SASTAV_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_VAUCHER', 'D', CAST(OLD."FLAG_VAUCHER" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_MENU', 'D', CAST(OLD."FLAG_MENU" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'GARANZIA_EXT', 'D', CAST(OLD."GARANZIA_EXT" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'PREPARE_TIME', 'D', CAST(OLD."PREPARE_TIME" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'MENU_TEXT', 'D', CAST(OLD."MENU_TEXT" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'COUNT_DEL', 'D', CAST(OLD."COUNT_DEL" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_RAZPAD_QTY', 'D', CAST(OLD."FLAG_RAZPAD_QTY" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'EXT2', 'D', CAST(SUBSTRING(OLD."EXT2" FROM 1 FOR 300) AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'VAT_GROUP', 'D', CAST(OLD."VAT_GROUP" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ADRESIRANE_ID', 'D', CAST(OLD."ADRESIRANE_ID" AS DOM_CHAR_300), null); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'COEFF_ME', 'D', CAST(OLD."COEFF_ME" AS DOM_CHAR_300), null); END
^


/* Trigger: SIMPLE_LOG_AI103 */
CREATE TRIGGER SIMPLE_LOG_AI103 FOR SIMPLE
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'NAME_SHORT', 'I', null, CAST(NEW."NAME_SHORT" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'CODE', 'I', null, CAST(NEW."CODE" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'ME_ID', 'I', null, CAST(NEW."ME_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'SIMPLE_GROUP_ID', 'I', null, CAST(NEW."SIMPLE_GROUP_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'ACTIVE', 'I', null, CAST(NEW."ACTIVE" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'ACTIVE_FAK', 'I', null, CAST(NEW."ACTIVE_FAK" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'LOCK_CENA_PROD', 'I', null, CAST(NEW."LOCK_CENA_PROD" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'CENA_PROD', 'I', null, CAST(NEW."CENA_PROD" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'CENA_EDRO', 'I', null, CAST(NEW."CENA_EDRO" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'CENA_OFERTA', 'I', null, CAST(NEW."CENA_OFERTA" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'CENA_PROD_FAK', 'I', null, CAST(NEW."CENA_PROD_FAK" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'DDS', 'I', null, CAST(NEW."DDS" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'KOL_KRI_MIN', 'I', null, CAST(NEW."KOL_KRI_MIN" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'KOL_KRI_MAX', 'I', null, CAST(NEW."KOL_KRI_MAX" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'DEFAULT_RAZ_ID', 'I', null, CAST(NEW."DEFAULT_RAZ_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'USLUGA', 'I', null, CAST(NEW."USLUGA" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'CENA_POCKET', 'I', null, CAST(NEW."CENA_POCKET" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'RSN', 'I', null, CAST(NEW."RSN" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'FLAG_CHECK', 'I', null, CAST(NEW."FLAG_CHECK" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'RAZ_TIP_ID', 'I', null, CAST(NEW."RAZ_TIP_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'AMBALAJ', 'I', null, CAST(NEW."AMBALAJ" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'ACTIVE_SCALE', 'I', null, CAST(NEW."ACTIVE_SCALE" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'GODNOST', 'I', null, CAST(NEW."GODNOST" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'BRUTO', 'I', null, CAST(NEW."BRUTO" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'DEF_SEL_ID', 'I', null, CAST(NEW."DEF_SEL_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'RAZPAD', 'I', null, CAST(NEW."RAZPAD" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'G_KRI_DOST', 'I', null, CAST(NEW."G_KRI_DOST" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'G_KRI_MIN', 'I', null, CAST(NEW."G_KRI_MIN" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'G_PERIOD', 'I', null, CAST(NEW."G_PERIOD" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'G_TIP', 'I', null, CAST(NEW."G_TIP" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'ME2_ID', 'I', null, CAST(NEW."ME2_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'FLAF_AMBALAJ', 'I', null, CAST(NEW."FLAF_AMBALAJ" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'DEF_SEL_CALC', 'I', null, CAST(NEW."DEF_SEL_CALC" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'CODE2', 'I', null, CAST(NEW."CODE2" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'TEMPERATURA', 'I', null, CAST(NEW."TEMPERATURA" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'SUMA_DOST_CALC', 'I', null, CAST(NEW."SUMA_DOST_CALC" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'GR_ZAMQNA_ID', 'I', null, CAST(NEW."GR_ZAMQNA_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'IS_BONUS', 'I', null, CAST(NEW."IS_BONUS" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'USE_PROP', 'I', null, CAST(NEW."USE_PROP" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'NAME_2', 'I', null, CAST(NEW."NAME_2" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'FLAG_PROIZHOD', 'I', null, CAST(NEW."FLAG_PROIZHOD" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'EXT1', 'I', null, CAST(SUBSTRING(NEW."EXT1" from 1 for 300) AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'USE_EXPLAN', 'I', null, CAST(NEW."USE_EXPLAN" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'MARK_AS_BROI', 'I', null, CAST(NEW."MARK_AS_BROI" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'SASTAV_ID', 'I', null, CAST(NEW."SASTAV_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'FLAG_VAUCHER', 'I', null, CAST(NEW."FLAG_VAUCHER" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'FLAG_MENU', 'I', null, CAST(NEW."FLAG_MENU" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'GARANZIA_EXT', 'I', null, CAST(NEW."GARANZIA_EXT" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'PREPARE_TIME', 'I', null, CAST(NEW."PREPARE_TIME" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'MENU_TEXT', 'I', null, CAST(NEW."MENU_TEXT" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'COUNT_DEL', 'I', null, CAST(NEW."COUNT_DEL" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'FLAG_RAZPAD_QTY', 'I', null, CAST(NEW."FLAG_RAZPAD_QTY" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'EXT2', 'I', null, CAST(SUBSTRING(NEW."EXT2" from 1 for 300) AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'VAT_GROUP', 'I', null, CAST(NEW."VAT_GROUP" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'ADRESIRANE_ID', 'I', null, CAST(NEW."ADRESIRANE_ID" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', null, 'COEFF_ME', 'I', null, CAST(NEW."COEFF_ME" AS DOM_CHAR_300)); END
^


/* Trigger: SIMPLE_LOG_AU103 */
CREATE TRIGGER SIMPLE_LOG_AU103 FOR SIMPLE
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'NAME_SHORT', 'U', CAST(OLD."NAME_SHORT" AS DOM_CHAR_300), CAST(NEW.NAME_SHORT AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CODE', 'U', CAST(OLD."CODE" AS DOM_CHAR_300), CAST(NEW.CODE AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ME_ID', 'U', CAST(OLD."ME_ID" AS DOM_CHAR_300), CAST(NEW.ME_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'SIMPLE_GROUP_ID', 'U', CAST(OLD."SIMPLE_GROUP_ID" AS DOM_CHAR_300), CAST(NEW.SIMPLE_GROUP_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ACTIVE', 'U', CAST(OLD."ACTIVE" AS DOM_CHAR_300), CAST(NEW."ACTIVE" AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ACTIVE_FAK', 'U', CAST(OLD."ACTIVE_FAK" AS DOM_CHAR_300), CAST(NEW.ACTIVE_FAK AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'LOCK_CENA_PROD', 'U', CAST(OLD."LOCK_CENA_PROD" AS DOM_CHAR_300), CAST(NEW.LOCK_CENA_PROD AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_PROD', 'U', CAST(OLD."CENA_PROD" AS DOM_CHAR_300), CAST(NEW.CENA_PROD AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_EDRO', 'U', CAST(OLD."CENA_EDRO" AS DOM_CHAR_300), CAST(NEW.CENA_EDRO AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_OFERTA', 'U', CAST(OLD."CENA_OFERTA" AS DOM_CHAR_300), CAST(NEW.CENA_OFERTA AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_PROD_FAK', 'U', CAST(OLD."CENA_PROD_FAK" AS DOM_CHAR_300), CAST(NEW.CENA_PROD_FAK AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DDS', 'U', CAST(OLD."DDS" AS DOM_CHAR_300), CAST(NEW.DDS AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'KOL_KRI_MIN', 'U', CAST(OLD."KOL_KRI_MIN" AS DOM_CHAR_300), CAST(NEW.KOL_KRI_MIN AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'KOL_KRI_MAX', 'U', CAST(OLD."KOL_KRI_MAX" AS DOM_CHAR_300), CAST(NEW.KOL_KRI_MAX AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DEFAULT_RAZ_ID', 'U', CAST(OLD."DEFAULT_RAZ_ID" AS DOM_CHAR_300), CAST(NEW.DEFAULT_RAZ_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'USLUGA', 'U', CAST(OLD."USLUGA" AS DOM_CHAR_300), CAST(NEW.USLUGA AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CENA_POCKET', 'U', CAST(OLD."CENA_POCKET" AS DOM_CHAR_300), CAST(NEW.CENA_POCKET AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'RSN', 'U', CAST(OLD."RSN" AS DOM_CHAR_300), CAST(NEW.RSN AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_CHECK', 'U', CAST(OLD."FLAG_CHECK" AS DOM_CHAR_300), CAST(NEW.FLAG_CHECK AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'RAZ_TIP_ID', 'U', CAST(OLD."RAZ_TIP_ID" AS DOM_CHAR_300), CAST(NEW.RAZ_TIP_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'AMBALAJ', 'U', CAST(OLD."AMBALAJ" AS DOM_CHAR_300), CAST(NEW.AMBALAJ AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ACTIVE_SCALE', 'U', CAST(OLD."ACTIVE_SCALE" AS DOM_CHAR_300), CAST(NEW.ACTIVE_SCALE AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'GODNOST', 'U', CAST(OLD."GODNOST" AS DOM_CHAR_300), CAST(NEW.GODNOST AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'BRUTO', 'U', CAST(OLD."BRUTO" AS DOM_CHAR_300), CAST(NEW.BRUTO AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DEF_SEL_ID', 'U', CAST(OLD."DEF_SEL_ID" AS DOM_CHAR_300), CAST(NEW.DEF_SEL_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'RAZPAD', 'U', CAST(OLD."RAZPAD" AS DOM_CHAR_300), CAST(NEW.RAZPAD AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_KRI_DOST', 'U', CAST(OLD."G_KRI_DOST" AS DOM_CHAR_300), CAST(NEW.G_KRI_DOST AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_KRI_MIN', 'U', CAST(OLD."G_KRI_MIN" AS DOM_CHAR_300), CAST(NEW.G_KRI_MIN AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_PERIOD', 'U', CAST(OLD."G_PERIOD" AS DOM_CHAR_300), CAST(NEW.G_PERIOD AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'G_TIP', 'U', CAST(OLD."G_TIP" AS DOM_CHAR_300), CAST(NEW.G_TIP AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ME2_ID', 'U', CAST(OLD."ME2_ID" AS DOM_CHAR_300), CAST(NEW.ME2_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAF_AMBALAJ', 'U', CAST(OLD."FLAF_AMBALAJ" AS DOM_CHAR_300), CAST(NEW.FLAF_AMBALAJ AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'DEF_SEL_CALC', 'U', CAST(OLD."DEF_SEL_CALC" AS DOM_CHAR_300), CAST(NEW.DEF_SEL_CALC AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'CODE2', 'U', CAST(OLD."CODE2" AS DOM_CHAR_300), CAST(NEW.CODE2 AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'TEMPERATURA', 'U', CAST(OLD."TEMPERATURA" AS DOM_CHAR_300), CAST(NEW.TEMPERATURA AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'SUMA_DOST_CALC', 'U', CAST(OLD."SUMA_DOST_CALC" AS DOM_CHAR_300), CAST(NEW.SUMA_DOST_CALC AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'GR_ZAMQNA_ID', 'U', CAST(OLD."GR_ZAMQNA_ID" AS DOM_CHAR_300), CAST(NEW.GR_ZAMQNA_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'IS_BONUS', 'U', CAST(OLD."IS_BONUS" AS DOM_CHAR_300), CAST(NEW.IS_BONUS AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'USE_PROP', 'U', CAST(OLD."USE_PROP" AS DOM_CHAR_300), CAST(NEW.USE_PROP AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'NAME_2', 'U', CAST(OLD."NAME_2" AS DOM_CHAR_300), CAST(NEW.NAME_2 AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_PROIZHOD', 'U', CAST(OLD."FLAG_PROIZHOD" AS DOM_CHAR_300), CAST(NEW.FLAG_PROIZHOD AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'EXT1', 'U', CAST(SUBSTRING(OLD."EXT1" FROM 1 FOR 300) AS DOM_CHAR_300), CAST(SUBSTRING(NEW.EXT1 from 1 for 300) AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'USE_EXPLAN', 'U', CAST(OLD."USE_EXPLAN" AS DOM_CHAR_300), CAST(NEW.USE_EXPLAN AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'MARK_AS_BROI', 'U', CAST(OLD."MARK_AS_BROI" AS DOM_CHAR_300), CAST(NEW.MARK_AS_BROI AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'SASTAV_ID', 'U', CAST(OLD."SASTAV_ID" AS DOM_CHAR_300), CAST(NEW.SASTAV_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_VAUCHER', 'U', CAST(OLD."FLAG_VAUCHER" AS DOM_CHAR_300), CAST(NEW.FLAG_VAUCHER AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_MENU', 'U', CAST(OLD."FLAG_MENU" AS DOM_CHAR_300), CAST(NEW.FLAG_MENU AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'GARANZIA_EXT', 'U', CAST(OLD."GARANZIA_EXT" AS DOM_CHAR_300), CAST(NEW.GARANZIA_EXT AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'PREPARE_TIME', 'U', CAST(OLD."PREPARE_TIME" AS DOM_CHAR_300), CAST(NEW.PREPARE_TIME AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'MENU_TEXT', 'U', CAST(OLD."MENU_TEXT" AS DOM_CHAR_300), CAST(NEW.MENU_TEXT AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'COUNT_DEL', 'U', CAST(OLD."COUNT_DEL" AS DOM_CHAR_300), CAST(NEW.COUNT_DEL AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'FLAG_RAZPAD_QTY', 'U', CAST(OLD."FLAG_RAZPAD_QTY" AS DOM_CHAR_300), CAST(NEW.FLAG_RAZPAD_QTY AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'EXT2', 'U', CAST(SUBSTRING(OLD."EXT2" FROM 1 FOR 300) AS DOM_CHAR_300), CAST(SUBSTRING(NEW.EXT2 from 1 for 300) AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'VAT_GROUP', 'U', CAST(OLD."VAT_GROUP" AS DOM_CHAR_300), CAST(NEW.VAT_GROUP AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'ADRESIRANE_ID', 'U', CAST(OLD."ADRESIRANE_ID" AS DOM_CHAR_300), CAST(NEW.ADRESIRANE_ID AS DOM_CHAR_300)); 
  EXECUTE PROCEDURE ADD_LOG('SIMPLE', OLD.ID, 'COEFF_ME', 'U', CAST(OLD."COEFF_ME" AS DOM_CHAR_300), CAST(NEW.COEFF_ME AS DOM_CHAR_300)); END
^


/* Trigger: SIMPLE_OBSERV_BI */
CREATE TRIGGER SIMPLE_OBSERV_BI FOR SIMPLE_OBSERV
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_OBSERV_ID,1); 
END
^


/* Trigger: SIMPLE_PICT_BI */
CREATE TRIGGER SIMPLE_PICT_BI FOR SIMPLE_PICT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_PICT_ID,1); 
END
^


/* Trigger: SIMPLE_RAZ_BI */
CREATE TRIGGER SIMPLE_RAZ_BI FOR SIMPLE_RAZ
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SIMPLE_RAZ_ID,1);
END
^


/* Trigger: SIMPLE_SKLAD_KOD_BI */
CREATE TRIGGER SIMPLE_SKLAD_KOD_BI FOR SIMPLE_SKLAD_KOD
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_simple_sklad_kod_id,1); 
end
^


/* Trigger: SIMPLE_TRACKER_BI */
CREATE TRIGGER SIMPLE_TRACKER_BI FOR SIMPLE_TRACKER
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_TRACKER_ID,1); 
END
^


/* Trigger: SIMPLE_ZAETOST_BI */
CREATE TRIGGER SIMPLE_ZAETOST_BI FOR SIMPLE_ZAETOST
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_ZAETOST_ID,1); 
END
^


/* Trigger: SKLAD_BI */
CREATE TRIGGER SKLAD_BI FOR SKLAD
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_SKLAD_ID,1); 
 
    NEW.F_MOVE_CENA = COALESCE(NEW.F_MOVE_CENA,0); 
    NEW.F_OTR_KOL = COALESCE(NEW.F_OTR_KOL,0); 
END
^


/* Trigger: SKLAD_LOG_AD103 */
CREATE TRIGGER SKLAD_LOG_AD103 FOR SKLAD
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'OBEKT_ID', 'D', CAST(OLD."OBEKT_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'USER_ID', 'D', CAST(OLD."USER_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'POCKET', 'D', CAST(OLD."POCKET" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'IS_SYSTEM', 'D', CAST(OLD."IS_SYSTEM" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'IS_ACTIVE', 'D', CAST(OLD."IS_ACTIVE" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'F_MOVE_CENA', 'D', CAST(OLD."F_MOVE_CENA" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'OWNER_ID', 'D', CAST(OLD."OWNER_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'F_OTR_KOL', 'D', CAST(OLD."F_OTR_KOL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'CL_MOVE_ID', 'D', CAST(OLD."CL_MOVE_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'CODE', 'D', CAST(OLD."CODE" AS DOM_CHAR_300), null); END
^


/* Trigger: SKLAD_LOG_AI103 */
CREATE TRIGGER SKLAD_LOG_AI103 FOR SKLAD
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'OBEKT_ID', 'I', null, CAST(NEW."OBEKT_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'USER_ID', 'I', null, CAST(NEW."USER_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'POCKET', 'I', null, CAST(NEW."POCKET" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'IS_SYSTEM', 'I', null, CAST(NEW."IS_SYSTEM" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'IS_ACTIVE', 'I', null, CAST(NEW."IS_ACTIVE" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'F_MOVE_CENA', 'I', null, CAST(NEW."F_MOVE_CENA" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'OWNER_ID', 'I', null, CAST(NEW."OWNER_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'F_OTR_KOL', 'I', null, CAST(NEW."F_OTR_KOL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'CL_MOVE_ID', 'I', null, CAST(NEW."CL_MOVE_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', null, 'CODE', 'I', null, CAST(NEW."CODE" AS DOM_CHAR_300)); END
^


/* Trigger: SKLAD_LOG_AU103 */
CREATE TRIGGER SKLAD_LOG_AU103 FOR SKLAD
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'OBEKT_ID', 'U', CAST(OLD."OBEKT_ID" AS DOM_CHAR_300), CAST(NEW.OBEKT_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'USER_ID', 'U', CAST(OLD."USER_ID" AS DOM_CHAR_300), CAST(NEW.USER_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'POCKET', 'U', CAST(OLD."POCKET" AS DOM_CHAR_300), CAST(NEW.POCKET AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'IS_SYSTEM', 'U', CAST(OLD."IS_SYSTEM" AS DOM_CHAR_300), CAST(NEW.IS_SYSTEM AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'IS_ACTIVE', 'U', CAST(OLD."IS_ACTIVE" AS DOM_CHAR_300), CAST(NEW.IS_ACTIVE AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'F_MOVE_CENA', 'U', CAST(OLD."F_MOVE_CENA" AS DOM_CHAR_300), CAST(NEW.F_MOVE_CENA AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'OWNER_ID', 'U', CAST(OLD."OWNER_ID" AS DOM_CHAR_300), CAST(NEW.OWNER_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'F_OTR_KOL', 'U', CAST(OLD."F_OTR_KOL" AS DOM_CHAR_300), CAST(NEW.F_OTR_KOL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'CL_MOVE_ID', 'U', CAST(OLD."CL_MOVE_ID" AS DOM_CHAR_300), CAST(NEW.CL_MOVE_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('SKLAD', OLD.ID, 'CODE', 'U', CAST(OLD."CODE" AS DOM_CHAR_300), CAST(NEW.CODE AS DOM_CHAR_300)); END
^


/* Trigger: SKLAD_MOL_BI */
CREATE TRIGGER SKLAD_MOL_BI FOR SKLAD_MOL
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SKLAD_MOL_ID,1);
end
^


/* Trigger: SKLAD_SELEKCIQ_NODE_BI */
CREATE TRIGGER SKLAD_SELEKCIQ_NODE_BI FOR SKLAD_SELEKCIQ_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SKLAD_SELEKCIQ_NODE_ID,1);
END
^


/* Trigger: SLEDI_KLI_BI */
CREATE TRIGGER SLEDI_KLI_BI FOR SLEDI_KLI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SLEDI_KLI_ID,1); 
END
^


/* Trigger: SLEDI_LICENZ_BI */
CREATE TRIGGER SLEDI_LICENZ_BI FOR SLEDI_LICENZ
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SLEDI_LICENZ_ID,1); 
END
^


/* Trigger: SLEDI_ROUMING_LOG_BI */
CREATE TRIGGER SLEDI_ROUMING_LOG_BI FOR SLEDI_ROUMING_LOG
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SLEDI_ROUMING_LOG_ID,1); 
END
^


/* Trigger: SLEDI_ROUMING_LOG_PAIED_BI */
CREATE TRIGGER SLEDI_ROUMING_LOG_PAIED_BI FOR SLEDI_ROUMING_LOG_PAIED
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SLEDI_ROUMING_LOG_PAIED_ID,1); 
END
^


/* Trigger: SLEDI_SIMPLE_BI */
CREATE TRIGGER SLEDI_SIMPLE_BI FOR SLEDI_SIMPLE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SLEDI_SIMPLE_ID,1); 
END
^


/* Trigger: SLEDI_TEMPLATE_EL_BI */
CREATE TRIGGER SLEDI_TEMPLATE_EL_BI FOR SLEDI_TEMPLATE_EL
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_sledi_template_el_id,1); 
end
^


/* Trigger: SLEDI_TEMPLATE_EL_GEN_BI */
CREATE TRIGGER SLEDI_TEMPLATE_EL_GEN_BI FOR SLEDI_TEMPLATE_EL_GEN
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SLEDI_TEMPLATE_EL_GEN_ID,1); 
END
^


/* Trigger: STORNO_REASON_BI */
CREATE TRIGGER STORNO_REASON_BI FOR STORNO_REASON
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_STORNO_REASON_ID,1); 
END
^


/* Trigger: SYNC_ADVANCE_PAYMENT_BI */
CREATE TRIGGER SYNC_ADVANCE_PAYMENT_BI FOR SYNC_ADVANCE_PAYMENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SYNC_ADVANCE_PAYMENT_ID,1); 
END
^


/* Trigger: SYSTEM_AU0 */
CREATE TRIGGER SYSTEM_AU0 FOR SYSTEM
ACTIVE AFTER UPDATE POSITION 0
AS 
BEGIN 
    POST_EVENT 'SYSTEM_REFRESH'; 
END
^


/* Trigger: TASKS_BI */
CREATE TRIGGER TASKS_BI FOR TASKS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TASKS_ID,1); 
END
^


/* Trigger: TASKS_EL_BI */
CREATE TRIGGER TASKS_EL_BI FOR TASKS_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TASKS_EL_ID,1); 
END
^


/* Trigger: TASKS_TIP_BI */
CREATE TRIGGER TASKS_TIP_BI FOR TASKS_TIP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TASKS_TIP_ID,1); 
END
^


/* Trigger: TBL_KA_BI */
CREATE TRIGGER TBL_KA_BI FOR TBL_KA
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_tbl_ka_id,1); 
end
^


/* Trigger: TBL_KA_OPR_LOG_BI */
CREATE TRIGGER TBL_KA_OPR_LOG_BI FOR TBL_KA_OPR_LOG
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TBL_KA_OPR_LOG_ID,1); 
END
^


/* Trigger: TBL_KA_OPR_NODE_BI */
CREATE TRIGGER TBL_KA_OPR_NODE_BI FOR TBL_KA_OPR_NODE
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_tbl_ka_opr_node_id,1); 
end
^


/* Trigger: TBL_KA_REGNOM_NODE_BI */
CREATE TRIGGER TBL_KA_REGNOM_NODE_BI FOR TBL_KA_REGNOM_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TBL_KA_REGNOM_NODE_ID,1); 
END
^


/* Trigger: TBL_KA_STOP_SIM_NODE_BI */
CREATE TRIGGER TBL_KA_STOP_SIM_NODE_BI FOR TBL_KA_STOP_SIM_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TBL_KA_STOP_SIM_NODE_ID,1); 
END
^


/* Trigger: TBL_LOG_BI */
CREATE TRIGGER TBL_LOG_BI FOR TBL_LOG
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_tbl_log_id,1); 
end
^


/* Trigger: TIP_REFUSED_BI */
CREATE TRIGGER TIP_REFUSED_BI FOR TIP_REFUSED
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_TIP_REFUSED_ID,1);
END
^


/* Trigger: TIP_REFUSED_LOG_AD103 */
CREATE TRIGGER TIP_REFUSED_LOG_AD103 FOR TIP_REFUSED
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', OLD.ID, 'FP_STORNO_TIP', 'D', CAST(OLD."FP_STORNO_TIP" AS DOM_CHAR_300), null); END
^


/* Trigger: TIP_REFUSED_LOG_AI103 */
CREATE TRIGGER TIP_REFUSED_LOG_AI103 FOR TIP_REFUSED
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', null, 'FP_STORNO_TIP', 'I', null, CAST(NEW."FP_STORNO_TIP" AS DOM_CHAR_300)); END
^


/* Trigger: TIP_REFUSED_LOG_AU103 */
CREATE TRIGGER TIP_REFUSED_LOG_AU103 FOR TIP_REFUSED
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('TIP_REFUSED', OLD.ID, 'FP_STORNO_TIP', 'U', CAST(OLD."FP_STORNO_TIP" AS DOM_CHAR_300), CAST(NEW.FP_STORNO_TIP AS DOM_CHAR_300)); END
^


/* Trigger: TIP_RESOLUTION_BI */
CREATE TRIGGER TIP_RESOLUTION_BI FOR TIP_RESOLUTION
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_tip_resolution_id,1); 
end
^


/* Trigger: TMP_MARK_EL_BI */
CREATE TRIGGER TMP_MARK_EL_BI FOR TMP_MARK_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TMP_MARK_EL_ID,1); 
END
^


/* Trigger: TMP_OPR_AI0 */
CREATE TRIGGER TMP_OPR_AI0 FOR TMP_OPR
ACTIVE AFTER INSERT OR UPDATE OR DELETE POSITION 0
AS 
BEGIN 
  POST_EVENT 'TMP_OPR'; 
END
^


/* Trigger: TMP_OPR_BI */
CREATE TRIGGER TMP_OPR_BI FOR TMP_OPR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TMP_OPR_ID,1); 
END
^


/* Trigger: TMP_OPR_SN_BI */
CREATE TRIGGER TMP_OPR_SN_BI FOR TMP_OPR_SN
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TMP_OPR_SN_ID,1); 
END
^


/* Trigger: TMP_SIMPLE_SEL_PROD1_BI */
CREATE TRIGGER TMP_SIMPLE_SEL_PROD1_BI FOR TMP_SIMPLE_SEL_PROD1
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_TMP_SIMPLE_SEL_PROD1_ID,1); 
END
^


/* Trigger: TR_ACTIONS_BI0 */
CREATE TRIGGER TR_ACTIONS_BI0 FOR ACTIONS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_ACTIONS_ID; 
END
^


/* Trigger: TR_ADDRESSES_BI0 */
CREATE TRIGGER TR_ADDRESSES_BI0 FOR ADDRESSES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_ADDRESSES_ID; 
END
^


/* Trigger: TR_AMBALAJ_HISTORY_AI0 */
CREATE TRIGGER TR_AMBALAJ_HISTORY_AI0 FOR AMBALAJ_HISTORY
ACTIVE AFTER INSERT POSITION 0
AS
DECLARE VARIABLE L_KLI_ID INTEGER;
DECLARE VARIABLE L_OPR_TIP SMALLINT;
DECLARE VARIABLE L_AMBL_HIS_ID INTEGER;
BEGIN
    SELECT
        OPR.KLI_ID,
        OPR.OPR_TIP
    FROM
        OPR
    WHERE
        OPR.ID = NEW.OPR_ID
    INTO
        :L_KLI_ID,:L_OPR_TIP;

    SELECT
        AMBALAJ.ID
    FROM       
        AMBALAJ
    WHERE
        AMBALAJ.KLI_ID = :L_KLI_ID
        AND AMBALAJ.SIMPLE_ID = NEW.SIMPLE_ID
    INTO
        :L_AMBL_HIS_ID;

    IF (L_OPR_TIP = 20) THEN BEGIN
        IF (:L_AMBL_HIS_ID IS NULL) THEN
            INSERT INTO AMBALAJ(KOL,SIMPLE_ID,KLI_ID)
            VALUES (NEW.KOL,NEW.SIMPLE_ID,:L_KLI_ID);
        ELSE
            UPDATE AMBALAJ SET
            AMBALAJ.KOL = ROUND5(AMBALAJ.KOL + NEW.KOL)
            WHERE AMBALAJ.KLI_ID = :L_KLI_ID
            AND AMBALAJ.SIMPLE_ID = NEW.SIMPLE_ID;
    END
    ELSE IF (L_OPR_TIP = 21) THEN BEGIN
        IF (:L_AMBL_HIS_ID IS NULL) THEN
            INSERT INTO AMBALAJ(KOL,SIMPLE_ID,KLI_ID)
            VALUES (-NEW.KOL,NEW.SIMPLE_ID,:L_KLI_ID);
        ELSE
            UPDATE AMBALAJ SET
            AMBALAJ.KOL = ROUND5(AMBALAJ.KOL - NEW.KOL)
            WHERE AMBALAJ.KLI_ID = :L_KLI_ID
            AND AMBALAJ.SIMPLE_ID = NEW.SIMPLE_ID;
    END
END
^


/* Trigger: TR_AMBALAJ_HISTORY_BI */
CREATE TRIGGER TR_AMBALAJ_HISTORY_BI FOR AMBALAJ_HISTORY
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_AMBALAJ_HISTORY_ID,1);
END
^


/* Trigger: TR_BONUSI_ZA_RAZCHET_BI0 */
CREATE TRIGGER TR_BONUSI_ZA_RAZCHET_BI0 FOR BONUSI_ZA_RAZCHET
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_BONUSI_ZA_RAZCHET_ID; 
 
    NEW.SUMA_OST = NEW.SUMA; 
END
^


/* Trigger: TR_BONUS_CENA_TOCHKI_BI */
CREATE TRIGGER TR_BONUS_CENA_TOCHKI_BI FOR BONUS_CENA_TOCHKI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_BONUS_CENA_TOCHKI_ID,1); 
END
^


/* Trigger: TR_BONUS_CONFIG_KLI_BI */
CREATE TRIGGER TR_BONUS_CONFIG_KLI_BI FOR BONUS_CONFIG_KLI
ACTIVE BEFORE INSERT POSITION 0
as 
begin 
  if (new.id is null) then 
    new.id = gen_id(gen_bonus_config_kli_id,1); 
end
^


/* Trigger: TR_BONUS_RAZCHET_NODE_BD0 */
CREATE TRIGGER TR_BONUS_RAZCHET_NODE_BD0 FOR BONUS_RAZCHET_NODE
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN 
    UPDATE BONUSI_ZA_RAZCHET SET 
        SUMA_OST = ROUND(SUMA_OST + OLD.SUMA,2) 
    WHERE 
        BONUSI_ZA_RAZCHET.ID IN (OLD.IN_ID, OLD.OUT_ID); 
END
^


/* Trigger: TR_BONUS_RAZCHET_NODE_BI0 */
CREATE TRIGGER TR_BONUS_RAZCHET_NODE_BI0 FOR BONUS_RAZCHET_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_BONUS_RAZCHET_NODE_ID; 
END
^


/* Trigger: TR_BROENE_BI0 */
CREATE TRIGGER TR_BROENE_BI0 FOR BROENE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_BROENE_ID; 
END
^


/* Trigger: TR_BROENE_EL_BI0 */
CREATE TRIGGER TR_BROENE_EL_BI0 FOR BROENE_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_BROENE_EL_ID; 
END
^


/* Trigger: TR_CFG_PAYMENTS_BI */
CREATE TRIGGER TR_CFG_PAYMENTS_BI FOR CFG_PAYMENTS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CFG_PAYMENTS_ID,1);
END
^


/* Trigger: TR_CFG_RAZPAD_CALC_BI0 */
CREATE TRIGGER TR_CFG_RAZPAD_CALC_BI0 FOR CFG_RAZPAD_CALC
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_CFG_RAZPAD_CALC_ID; 
END
^


/* Trigger: TR_CFG_RAZPAD_CALC_BIU1 */
CREATE TRIGGER TR_CFG_RAZPAD_CALC_BIU1 FOR CFG_RAZPAD_CALC
ACTIVE BEFORE INSERT OR UPDATE POSITION 1
AS 
BEGIN 
    NEW.RATIO = ABS(COALESCE(NEW.RATIO, 0.00)); 
END
^


/* Trigger: TR_COURSES_BI0 */
CREATE TRIGGER TR_COURSES_BI0 FOR COURSES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_COURSES_ID; 
    IF (NEW.DATE_TIME IS NULL) THEN 
        NEW.DATE_TIME = CURRENT_TIMESTAMP; 
END
^


/* Trigger: TR_COURSES_OPR_NODE_BI0 */
CREATE TRIGGER TR_COURSES_OPR_NODE_BI0 FOR COURSES_OPR_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_COURSES_OPR_NODE_ID; 
END
^


/* Trigger: TR_CRM_KLI_BI0 */
CREATE TRIGGER TR_CRM_KLI_BI0 FOR CRM_KLI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_CRM_KLI_ID; 
END
^


/* Trigger: TR_DOCUMENTS_BI0 */
CREATE TRIGGER TR_DOCUMENTS_BI0 FOR DOCUMENTS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_DOCUMENTS_ID; 
 
    NEW.DT = CURRENT_TIMESTAMP; 
    NEW.STATUS = 0; 
END
^


/* Trigger: TR_DOCUMENTS_BU0 */
CREATE TRIGGER TR_DOCUMENTS_BU0 FOR DOCUMENTS
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    IF (OLD.DELETE_USER_ID IS NULL AND NEW.DELETE_USER_ID > 0) THEN BEGIN 
        NEW.DT_DELETE = CURRENT_TIMESTAMP; 
    END 
END
^


/* Trigger: TR_DOST_NODE_BI */
CREATE TRIGGER TR_DOST_NODE_BI FOR DOST_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_DOST_NODE_ID,1);
END
^


/* Trigger: TR_DVSK_DOK_TYPE_BI0 */
CREATE TRIGGER TR_DVSK_DOK_TYPE_BI0 FOR DVSK_DOK_TYPE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_DVSK_DOK_TYPE_ID,1); 
END
^


/* Trigger: TR_EXCHANGE_SN_BI0 */
CREATE TRIGGER TR_EXCHANGE_SN_BI0 FOR EXCHANGE_SN
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_EXCHANGE_SN_ID; 
END
^


/* Trigger: TR_EXTENDED_VARANTY_NODE_BI0 */
CREATE TRIGGER TR_EXTENDED_VARANTY_NODE_BI0 FOR EXTENDED_VARANTY_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_EXTENDED_VARANTY_NODE_ID; 
END
^


/* Trigger: TR_FAK_EL_IN_ELNODE_BI0 */
CREATE TRIGGER TR_FAK_EL_IN_ELNODE_BI0 FOR FAK_EL_IN_EL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
DECLARE VARIABLE L_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_VAT_REASON_ID INTEGER; 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_FAK_EL_IN_EL_NODE_ID; 
 
    IF (NEW.KOL = 0.00) THEN BEGIN 
        SELECT 
            IN_EL.KOL 
        FROM 
            IN_EL 
        WHERE 
            IN_EL.ID = NEW.IN_EL_ID 
        INTO 
            :L_KOL; 
        NEW.KOL = L_KOL; 
    END 
 
    SELECT 
        PROD_CENI_EL.VAT_REASON_ID 
    FROM 
        PROD_CENI_EL INNER JOIN OUT_EL ON OUT_EL.ID = PROD_CENI_EL.OUT_EL_ID 
        INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID 
    WHERE 
        OPR_RAZPAD_NODE.IN_EL_ID =NEW.IN_EL_ID 
    INTO :L_VAT_REASON_ID; 
    IF (:L_VAT_REASON_ID IS NOT NULL) THEN 
        UPDATE FAK_EL SET FAK_EL.VAT_REASON_ID =:L_VAT_REASON_ID WHERE FAK_EL.ID = NEW.FAK_EL_ID; 
END
^


/* Trigger: TR_FAK_IN_BI */
CREATE TRIGGER TR_FAK_IN_BI FOR FAK_IN
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_FAK_IN_ID,1);
END
^


/* Trigger: TR_FAK_IN_BIU10 */
CREATE TRIGGER TR_FAK_IN_BIU10 FOR FAK_IN
ACTIVE BEFORE INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_OPR_TIP SMALLINT; 
DECLARE VARIABLE L_VAT_PERCENT DOUBLE PRECISION; 
DECLARE VARIABLE L_DDS_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_DDS_SUMA_TO_PAY DOUBLE PRECISION; 
BEGIN 
    SELECT 
        OPR.OPR_TIP 
    FROM 
        OPR 
    WHERE 
        OPR.ID = NEW.OPR_ID 
    INTO 
        :L_OPR_TIP; 
    IF (INSERTING) THEN BEGIN 
        --IF (NEW.PAY_TIP_DDS = 1) THEN BEGIN 
            IF (L_OPR_TIP = 13) THEN BEGIN 
                FOR SELECT 
                  FAK_IN_SUMI.VAT_PERCENT, 
                  FAK_IN_SUMI.VAT_SUM, 
                  FAK_IN_SUMI.SUM_TO_PAY 
                FROM 
                  FAK_IN_SUMI 
                WHERE 
                  FAK_IN_SUMI.OPR_ID = NEW.OPR_ID 
                INTO :L_VAT_PERCENT, :L_DDS_SUMA, :L_DDS_SUMA_TO_PAY 
                DO BEGIN 
                    IF (L_DDS_SUMA_TO_PAY > 0.00) THEN BEGIN 
                        INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
                        VALUES (NEW.OPR_ID, :L_DDS_SUMA_TO_PAY, :L_DDS_SUMA_TO_PAY, :L_VAT_PERCENT); 
                    END 
                END 
            END 
        --END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        --IF ((OLD.PAY_TIP_DDS IN (0,2)) AND (NEW.PAY_TIP_DDS = 1)) THEN BEGIN 
        --    /*ДОБАВЯМЕ НОВ ЗАПИС, ЗА ДА СЕ КАЖЕ, ЧЕ ИМА ЗА ПЛАЩАНЕ*/ 
        --    IF (L_OPR_TIP = 13) THEN BEGIN 
        --        FOR SELECT 
        --          FAK_IN_SUMI.VAT_PERCENT, 
        --          FAK_IN_SUMI.VAT_SUM 
        --        FROM 
        --          FAK_IN_SUMI 
        --        WHERE 
        --          FAK_IN_SUMI.OPR_ID = NEW.OPR_ID 
        --        INTO :L_VAT_PERCENT, :L_DDS_SUMA 
        --        DO BEGIN 
        --            IF (L_DDS_SUMA > 0.00) THEN BEGIN 
        --                INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
        --                VALUES (NEW.OPR_ID, :L_DDS_SUMA, :L_DDS_SUMA, :L_VAT_PERCENT); 
        --            END 
        --        END 
        --    END 
        --END 
        --ELSE IF ((OLD.PAY_TIP_DDS IN (1,3)) AND (NEW.PAY_TIP_DDS IN (0,2))) THEN BEGIN 
        --    /*СМЕНЯ СИ СТАТУСА НА ПЛАТЕНО ВЕДНАГА - РАЗКАЧАМЕ ВРЪЗКИТЕ С ПЛАЩАНИЯ, НО ПЪРВО НАМАЛЯМ ИЗПОЛЗВАНАТА СУМА 
        --    НА ОПЕРАЦИЙТЕ СВЪРЗАНИ С ТАЗИ*/ 
        --    DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
        --END 
    END 
END
^


/* Trigger: TR_FAK_IN_EL_NODE_BI */
CREATE TRIGGER TR_FAK_IN_EL_NODE_BI FOR FAK_IN_EL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_FAK_IN_EL_NODE_ID,1);
END
^


/* Trigger: TR_FAK_OUT_EL_NODE_BI */
CREATE TRIGGER TR_FAK_OUT_EL_NODE_BI FOR FAK_OUT_EL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
DECLARE VARIABLE L_KOL DOUBLE PRECISION;
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_FAK_OUT_EL_NODE_ID,1);
  IF (NEW.KOL = 0) THEN BEGIN
      SELECT OUT_EL.KOL FROM OUT_eL WHERE OUT_EL.ID = NEW.OUT_EL_ID INTO :L_KOL;
      NEW.KOL = L_KOL;
  END
END
^


/* Trigger: TR_FAK_PROD_REAL_PROD_NODE_BI */
CREATE TRIGGER TR_FAK_PROD_REAL_PROD_NODE_BI FOR FAK_PROD_REAL_PROD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_FAK_PROD_REAL_PROD_NODE_ID,1); 
END
^


/* Trigger: TR_FIRMI_BI */
CREATE TRIGGER TR_FIRMI_BI FOR FIRMI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_FIRMI_ID,1); 
 
  IF (NEW.IS_SYSTEM IS NULL) THEN 
    NEW.IS_SYSTEM = 0; 
 
  IF (NEW.REG_DDS IS NULL AND NEW.IDNOMDDS IS NULL) THEN 
    NEW.REG_DDS = '0'; 
 
  if (NEW.IDNOMDDS IS NOT NULL) then 
    NEW.REG_DDS = '1'; 
END
^


/* Trigger: TR_FIRMI_BIU5 */
CREATE TRIGGER TR_FIRMI_BIU5 FOR FIRMI
ACTIVE BEFORE INSERT OR UPDATE POSITION 5
AS 
BEGIN 
    IF (NEW.E_FAK = 1 AND COALESCE(OLD.E_FAK, 0) = 0) THEN 
        NEW.FLAG_SYNC = 1; 
END
^


/* Trigger: TR_FISKAL_BONS_BI0 */
CREATE TRIGGER TR_FISKAL_BONS_BI0 FOR FISKAL_BONS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_FISKAL_BONS_ID; 
 
    NEW.DT = COALESCE(NEW.DT, CURRENT_TIMESTAMP); 
END
^


/* Trigger: TR_FISKAL_BONS_BUD0 */
CREATE TRIGGER TR_FISKAL_BONS_BUD0 FOR FISKAL_BONS
ACTIVE BEFORE UPDATE OR DELETE POSITION 0
AS 
BEGIN 
    IF (UPDATING) THEN 
        EXCEPTION EXC_UPDATE; 
    ELSE 
        EXCEPTION EXC_DELETE; 
END
^


/* Trigger: TR_FP_BD0 */
CREATE TRIGGER TR_FP_BD0 FOR FP
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN 
    EXCEPTION EXC_DELETE; 
END
^


/* Trigger: TR_FP_BI0 */
CREATE TRIGGER TR_FP_BI0 FOR FP
ACTIVE BEFORE INSERT POSITION 0
AS 
declare variable val integer; 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_FP_ID; 
 
    NEW.FP_NUMBER = UPPER(NEW.FP_NUMBER); 
    NEW.GEN_NAME = 'GEN_FP_NUMBER_' || NEW.FP_NUMBER; 
    NEW.GEN_NAME_ACTIVE = 'GEN_FP_ACTIVE_' || NEW.FP_NUMBER; 
 
    EXECUTE STATEMENT 'CREATE SEQUENCE ' || NEW.GEN_NAME; 
    EXECUTE STATEMENT 'CREATE SEQUENCE ' || NEW.GEN_NAME_ACTIVE; 
 
    VAL = NEW.INIT_VAL - 1; 
 
    EXECUTE STATEMENT 'ALTER SEQUENCE ' || NEW.GEN_NAME || ' RESTART WITH ' || VAL; 
    EXECUTE STATEMENT 'ALTER SEQUENCE ' || NEW.GEN_NAME_ACTIVE || ' RESTART WITH ' || VAL; 
END
^


/* Trigger: TR_FP_BU0 */
CREATE TRIGGER TR_FP_BU0 FOR FP
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    EXCEPTION EXC_UPDATE; 
END
^


/* Trigger: TR_INSTALLATIONS_BI0 */
CREATE TRIGGER TR_INSTALLATIONS_BI0 FOR INSTALLATIONS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_INSTALLATIONS_ID; 
 
    IF (NEW.BONUS_SUMA IS NULL) THEN 
          NEW.BONUS_SUMA = 0.00; 
END
^


/* Trigger: TR_INSTALLATION_PICTURES_BI0 */
CREATE TRIGGER TR_INSTALLATION_PICTURES_BI0 FOR INSTALLATION_PICTURES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_INSTALLATION_PICTURES_ID; 
END
^


/* Trigger: TR_INSTALLATION_USERS_BI0 */
CREATE TRIGGER TR_INSTALLATION_USERS_BI0 FOR INSTALLATION_USERS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_INSTALLATION_USERS_ID; 
 
     IF (NEW.BONUS_SUMA IS NULL) THEN 
          NEW.BONUS_SUMA = 0.00; 
END
^


/* Trigger: TR_INSTALLERS_BI0 */
CREATE TRIGGER TR_INSTALLERS_BI0 FOR INSTALLERS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_INSTALLERS_ID; 
END
^


/* Trigger: TR_INV_AI0 */
CREATE TRIGGER TR_INV_AI0 FOR INV
ACTIVE AFTER INSERT POSITION 0
AS
DECLARE VARIABLE L_OPR_TIP SMALLINT;
BEGIN
    SELECT
        OPR.OPR_TIP
    FROM
        OPR
    WHERE
        OPR.ID = NEW.OPR_ID
    INTO
        :L_OPR_TIP;
    IF (L_OPR_TIP = 3) THEN
        EXECUTE PROCEDURE SET_IZL_FROM_INV(NEW.OPR_ID);
END
^


/* Trigger: TR_INV_IZL_BI */
CREATE TRIGGER TR_INV_IZL_BI FOR INV_IZL
ACTIVE BEFORE INSERT POSITION 0
AS
    BEGIN
        IF (NEW.ID IS NULL) THEN
            NEW.ID = GEN_ID(GEN_INV_IZL_ID,1);

        NEW.KOL_IZL = NEW.KOL;
    END
^


/* Trigger: TR_INV_NACH_INI_BI */
CREATE TRIGGER TR_INV_NACH_INI_BI FOR INV_NACH_INI
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_INV_NACH_INI_ID,1);
END
^


/* Trigger: TR_INV_OPIS_BI */
CREATE TRIGGER TR_INV_OPIS_BI FOR INV_OPIS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_INV_OPIS_ID,1);
END
^


/* Trigger: TR_IN_BIU10 */
CREATE TRIGGER TR_IN_BIU10 FOR "IN"
ACTIVE BEFORE INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_IN_EL_CNT INTEGER; 
BEGIN 
    IF (INSERTING) THEN BEGIN 
        IF (NEW.PAY_TIP = 1) THEN BEGIN 
            SELECT 
                COUNT(IN_EL.ID) 
            FROM 
                IN_EL 
            WHERE 
                IN_EL.OPR_ID = NEW.OPR_ID 
            INTO :L_IN_EL_CNT; 
 
            IF (L_IN_EL_CNT = 0) THEN BEGIN 
                INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
                SELECT 
                    OPR.ID, 
                    OPR.SUMA, 
                    OPR.SUMA, 
                    20.0 
                FROM 
                    OPR 
                WHERE 
                    ID = NEW.OPR_ID; 
            END 
            ELSE BEGIN 
                INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
                SELECT 
                    IN_EL.OPR_ID, 
                    SUM(IN_EL.SUMA_SR), 
                    SUM(IN_EL.SUMA_SR), 
                    IN_EL.VAT_PERCENT 
                FROM 
                    IN_EL 
                WHERE 
                    IN_EL.OPR_ID = NEW.OPR_ID 
                GROUP BY 1, 4; 
 
                IF (NEW.RF = 1) THEN BEGIN 
                  INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
                  SELECT 
                      IN_EL.OPR_ID, 
                      SUM(IN_EL.SUMA_SR * IN_EL.VAT_PERCENT / 100), 
                      SUM(IN_EL.SUMA_SR * IN_EL.VAT_PERCENT / 100), 
                      IN_EL.VAT_PERCENT 
                  FROM 
                      IN_EL 
                  WHERE 
                      IN_EL.OPR_ID = NEW.OPR_ID 
                  GROUP BY 1, 4; 
                END 
            END 
        END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        IF ((OLD.PAY_TIP IN (0,2) AND NEW.PAY_TIP = 1) OR (COALESCE(OLD.RF, 0) <> COALESCE(NEW.RF, 0))) THEN BEGIN 
            /*ДОБАВЯМЕ НОВ ЗАПИС, ЗА ДА СЕ КАЖЕ, ЧЕ ИМА ЗА ПЛАЩАНЕ*/ 
            SELECT 
                COUNT(IN_EL.ID) 
            FROM 
                IN_EL 
            WHERE 
                IN_EL.OPR_ID = NEW.OPR_ID 
            INTO :L_IN_EL_CNT; 
 
            DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
 
            IF (L_IN_EL_CNT = 0) THEN BEGIN 
                INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
                SELECT 
                    OPR.ID, 
                    OPR.SUMA, 
                    OPR.SUMA, 
                    20.0 
                FROM 
                    OPR 
                WHERE 
                    ID = NEW.OPR_ID; 
            END 
            ELSE BEGIN 
                INSERT INTO SUMI (OPR_ID,SUMA, SUMA_OST, VAT_PERCENT) 
                SELECT 
                    IN_EL.OPR_ID, 
                    SUM(IN_EL.SUMA_SR), 
                    SUM(IN_EL.SUMA_SR), 
                    IN_EL.VAT_PERCENT 
                FROM 
                    IN_EL 
                WHERE 
                    IN_EL.OPR_ID = NEW.OPR_ID 
                GROUP BY 1, 4; 
 
                IF (NEW.RF = 1) THEN BEGIN 
                  INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
                  SELECT 
                      IN_EL.OPR_ID, 
                      SUM(IN_EL.SUMA_SR * IN_EL.VAT_PERCENT / 100), 
                      SUM(IN_EL.SUMA_SR * IN_EL.VAT_PERCENT / 100), 
                      IN_EL.VAT_PERCENT 
                  FROM 
                      IN_EL 
                  WHERE 
                      IN_EL.OPR_ID = NEW.OPR_ID 
                  GROUP BY 1, 4; 
                END 
            END 
        END 
        ELSE IF ((OLD.PAY_TIP IN (1,3)) AND (NEW.PAY_TIP IN (0,2))) THEN BEGIN 
            /*СМЕНЯ СИ СТАТУСА НА ПЛАТЕНО ВЕДНАГА - РАЗКАЧАМЕ ВРЪЗКИТЕ С ПЛАЩАНИЯ, НО ПЪРВО НАМАЛЯМ ИЗПОЛЗВАНАТА СУМА 
            НА ОПЕРАЦИЙТЕ СВЪРЗАНИ С ТАЗИ*/ 
 
            DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
        END 
    END 
END
^


/* Trigger: TR_IN_EL_AI1 */
CREATE TRIGGER TR_IN_EL_AI1 FOR IN_EL
ACTIVE AFTER INSERT POSITION 1
AS 
DECLARE VARIABLE L_BONUS TYPE OF DOM_FLAG; 
DECLARE VARIABLE L_PRICE TYPE OF DOM_CENA; 
DECLARE VARIABLE L_OPR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_SMAL_INT; 
BEGIN 
    IF (ROUND(NEW.SUMA_FR,2) <> 0.00) THEN 
        EXIT; 
 
    SELECT 
        OPR.ID, 
        OPR.SKLAD_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = NEW.OPR_ID 
        AND OPR.OPR_TIP IN (1,12) 
    INTO 
        :L_OPR_ID, :L_SKLAD_ID; 
 
    IF (L_OPR_ID IS NULL) THEN 
        EXIT; 
 
    SELECT 
        SIMPLE.IS_BONUS 
    FROM 
        SIMPLE 
    WHERE 
        SIMPLE.ID = NEW.SIMPLE_ID 
    INTO 
        :L_BONUS; 
 
    IF (L_BONUS = 1) THEN BEGIN 
        SELECT FIRST 1 
            ROUND(IN_EL.SUMA_FR / IN_EL.KOL,5) 
        FROM 
            IN_EL 
        WHERE 
            IN_EL.OPR_ID = NEW.OPR_ID 
            AND IN_EL.SIMPLE_ID = NEW.SIMPLE_ID 
            AND IN_EL.SUMA_FR > 0.00 
        ORDER BY IN_EL.ID DESC 
        INTO 
            :L_PRICE; 
 
        IF (L_PRICE IS NULL) THEN 
            SELECT 
                COALESCE(NAL.LAST_CENA, 0.00) 
            FROM 
                NAL 
            WHERE 
                NAL.SIMPLE_ID = NEW.SIMPLE_ID 
                AND NAL.SKLAD_ID = :L_SKLAD_ID 
            INTO 
                :L_PRICE; 
 
        UPDATE OR INSERT INTO BONUSI_ZA_RAZCHET(IN_EL_ID,SUMA, KOL) 
        VALUES (NEW.ID,  ROUND(NEW.KOL * :L_PRICE, 2), NEW.KOL) 
        MATCHING(IN_EL_ID); 
    END 
END
^


/* Trigger: TR_IN_EL_AI2 */
CREATE TRIGGER TR_IN_EL_AI2 FOR IN_EL
ACTIVE AFTER INSERT POSITION 2
AS 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_KLI_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_AMB_ID TYPE OF DOM_KEY; 
BEGIN 
    SELECT 
        OPR.OPR_TIP, 
        OPR.KLI_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = NEW.OPR_ID 
    INTO 
        :L_OPR_TIP, :L_KLI_ID; 
 
    IF ((L_OPR_TIP IN (55,58)) AND (L_KLI_ID IS NOT NULL)) THEN BEGIN 
        SELECT 
            AMBALAJ.ID 
        FROM 
            AMBALAJ 
        WHERE 
            AMBALAJ.KLI_ID = :L_KLI_ID 
            AND AMBALAJ.SIMPLE_ID = NEW.SIMPLE_ID 
        INTO 
            :L_AMB_ID; 
 
        IF (L_AMB_ID IS NULL) THEN 
            INSERT INTO AMBALAJ(KLI_ID, SIMPLE_ID, KOL) 
            VALUES (:L_KLI_ID, NEW.SIMPLE_ID, 0.00); 
 
 
        UPDATE AMBALAJ SET 
            KOL = KOL + NEW.KOL 
        WHERE 
            AMBALAJ.KLI_ID = :L_KLI_ID 
            AND AMBALAJ.SIMPLE_ID = NEW.SIMPLE_ID; 
    END 
END
^


/* Trigger: TR_IN_EL_AU0 */
CREATE TRIGGER TR_IN_EL_AU0 FOR IN_EL
ACTIVE AFTER UPDATE POSITION 0
AS 
DECLARE VARIABLE L_BR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_SMAL_INT; 
BEGIN 
    IF (((NEW.SUMA_FR > 0.00) AND (OLD.SUMA_FR > 0.00)) 
    AND ((ROUND(NEW.KOL,5) = ROUND(OLD.KOL,5)))) THEN 
        EXIT; 
 
    SELECT 
        OPR.ID, 
        OPR.SKLAD_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = NEW.OPR_ID 
        AND OPR.OPR_TIP IN (1,12) 
    INTO 
        :L_BR_ID, :L_SKLAD_ID; 
 
    IF (L_BR_ID IS NULL) THEN 
        EXIT; 
 
    L_BR_ID = NULL; 
 
    SELECT 
        BZR.ID 
    FROM 
        BONUSI_ZA_RAZCHET BZR 
    WHERE 
        BZR.IN_EL_ID = NEW.ID 
    INTO 
        :L_BR_ID; 
 
    IF (L_BR_ID IS NULL) THEN BEGIN 
        IF (NEW.SUMA_FR = 0.00) THEN BEGIN 
        --НЯМАЛО Е БОНУС, НО СЕГА СУМАТА Е 0.00 КАТО БОНУС - ДОБАВЯМ ГО 
            INSERT INTO BONUSI_ZA_RAZCHET (IN_EL_ID, SUMA, KOL) 
            VALUES(NEW.ID, ROUND(COALESCE((SELECT NAL.LAST_CENA FROM NAL WHERE NAL.SIMPLE_ID = NEW.SIMPLE_ID AND NAL.SKLAD_ID = :L_SKLAD_ID), 0.00) * NEW.KOL, 2), NEW.KOL); 
        END 
    END 
    ELSE BEGIN 
        IF (NEW.SUMA_FR > 0.00) THEN 
            DELETE FROM BONUSI_ZA_RAZCHET 
            WHERE 
                IN_EL_ID = NEW.ID; 
        ELSE BEGIN 
            IF (ROUND(OLD.KOL, 5) <> ROUND(NEW.KOL, 5)) THEN BEGIN 
 
                DELETE FROM BONUS_RAZCHET_NODE 
                WHERE 
                    IN_ID = :L_BR_ID; 
 
                UPDATE BONUSI_ZA_RAZCHET SET 
                    SUMA = ROUND(ROUND(SUMA / OLD.KOL, 5) * NEW.KOL, 2), 
                    SUMA_OST = ROUND(ROUND(SUMA / OLD.KOL, 5) * NEW.KOL, 2), 
                    KOL = NEW.KOL 
                WHERE 
                    IN_EL_ID = NEW.ID; 
            END 
        END 
    END 
END
^


/* Trigger: TR_IN_EL_BD1 */
CREATE TRIGGER TR_IN_EL_BD1 FOR IN_EL
ACTIVE BEFORE DELETE POSITION 1
AS
DECLARE VARIABLE L_IN_EL2_ID INTEGER;
DECLARE VARIABLE L_IN_EL2_KOL DOUBLE PRECISION;
DECLARE VARIABLE L_NAL_ID INTEGER;
BEGIN
    L_IN_EL2_ID = NULL;
    SELECT
        IN_EL2.ID,
        IN_EL2.KOL
    FROM
        IN_EL2
    WHERE
        IN_EL2.IN_EL_ID = OLD.ID
    INTO
        :L_IN_EL2_ID,:L_IN_EL2_KOL;
    IF (L_IN_EL2_ID IS NOT NULL) THEN BEGIN
        UPDATE NAL2 SET
        NAL2.KOL = ROUND5(NAL2.KOL - :L_IN_EL2_KOL)
        WHERE NAL2.NAL_ID = (SELECT NAL.ID FROM NAL INNER JOIN OPR ON OPR.SKLAD_ID = NAL.SKLAD_ID AND OPR.ID = OLD.OPR_ID AND NAL.SIMPLE_ID = OLD.SIMPLE_ID);
    END
END
^


/* Trigger: TR_IN_EL_BD2 */
CREATE TRIGGER TR_IN_EL_BD2 FOR IN_EL
ACTIVE BEFORE DELETE POSITION 2
AS 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_KLI_ID TYPE OF DOM_KEY; 
BEGIN 
    SELECT 
        OPR.OPR_TIP, 
        OPR.KLI_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = OLD.OPR_ID 
    INTO 
        :L_OPR_TIP, :L_KLI_ID; 
 
    IF ((L_OPR_TIP IN (55,58)) AND (L_KLI_ID IS NOT NULL)) THEN BEGIN 
        UPDATE AMBALAJ SET 
            KOL = KOL - OLD.KOL 
        WHERE 
            AMBALAJ.KLI_ID = :L_KLI_ID 
            AND AMBALAJ.SIMPLE_ID = OLD.SIMPLE_ID; 
    END 
END
^


/* Trigger: TR_IN_EL_RAZ_NODE_BI */
CREATE TRIGGER TR_IN_EL_RAZ_NODE_BI FOR IN_EL_RAZ_NODE
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN 
          IF (NEW.ID IS NULL) THEN 
             NEW.ID = GEN_ID("GEN_IN_EL_RAZ_NODE_ID",1);
           END
^


/* Trigger: TR_IN_TO_FAK_EL_BI */
CREATE TRIGGER TR_IN_TO_FAK_EL_BI FOR IN_TO_FAK_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_IN_TO_FAK_EL_ID,1);
END
^


/* Trigger: TR_IZL_BD0 */
CREATE TRIGGER TR_IZL_BD0 FOR IZL
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN 
    IF (OLD.FLAG_LOCK_KOR = 0) THEN 
        UPDATE NAL SET 
            KOL_IZL = ROUND(KOL_IZL - OLD.KOL_IZL,5) 
        WHERE 
            NAL.SKLAD_ID = OLD.SKLAD_ID 
            AND NAL.SIMPLE_ID = OLD.SIMPLE_ID; 
END
^


/* Trigger: TR_IZL_BI0 */
CREATE TRIGGER TR_IZL_BI0 FOR IZL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_IZL_ID,1); 
 
    NEW.KOL_IZL = NEW.KOL; 
 
    IF (NEW.LAST_CENA IS NULL) THEN 
        NEW.LAST_CENA = 0; 
    IF ((NEW.SKLAD_ID IS NULL) OR (NEW.SIMPLE_ID IS NULL)) THEN 
        SELECT 
            OPR.SKLAD_ID, 
            OUT_EL.SIMPLE_ID 
        FROM 
            OPR INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OPR.ID 
        WHERE 
            OUT_EL.ID = NEW.OUT_EL_ID 
        INTO 
            NEW.SKLAD_ID,NEW.SIMPLE_ID; 
 
    UPDATE NAL SET 
        KOL_IZL = ROUND(KOL_IZL + NEW.KOL_IZL, 5) 
    WHERE 
        NAL.SKLAD_ID = NEW.SKLAD_ID 
        AND NAL.SIMPLE_ID = NEW.SIMPLE_ID; 
END
^


/* Trigger: TR_IZL_BU0 */
CREATE TRIGGER TR_IZL_BU0 FOR IZL
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    IF (NEW.FLAG_LOCK_KOR <> OLD.FLAG_LOCK_KOR) THEN BEGIN 
        IF (OLD.FLAG_LOCK_KOR = 0) THEN BEGIN 
            UPDATE NAL SET 
                KOL_IZL = ROUND(KOL_IZL - OLD.KOL_IZL,5) 
            WHERE 
                NAL.SIMPLE_ID = OLD.SIMPLE_ID 
                AND NAL.SKLAD_ID = OLD.SKLAD_ID; 
        END 
        ELSE IF (NEW.FLAG_LOCK_KOR = 0) THEN BEGIN 
            UPDATE NAL SET 
                KOL_IZL = ROUND(KOL_IZL + NEW.KOL_IZL,5) 
            WHERE 
                NAL.SIMPLE_ID = NEW.SIMPLE_ID 
                AND NAL.SKLAD_ID = NEW.SKLAD_ID; 
        END 
    END 
    ELSE BEGIN 
        IF (NEW.FLAG_LOCK_KOR = 0) THEN BEGIN 
            UPDATE NAL SET 
                KOL_IZL = ROUND(KOL_IZL + ROUND(NEW.KOL_IZL - OLD.KOL_IZL,5),5) 
            WHERE 
                NAL.SIMPLE_ID = NEW.SIMPLE_ID 
                AND NAL.SKLAD_ID = NEW.SKLAD_ID; 
        END 
    END 
END
^


/* Trigger: TR_KI_DOST_NODE_BI */
CREATE TRIGGER TR_KI_DOST_NODE_BI FOR KI_DOST_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_KI_DOST_NODE_ID,1); 
END
^


/* Trigger: TR_KI_DOST_SUMA_BI0 */
CREATE TRIGGER TR_KI_DOST_SUMA_BI0 FOR KI_DOST_SUMA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_KI_DOST_SUMA_ID; 
END
^


/* Trigger: TR_KI_DOST_SUMA_BIU10 */
CREATE TRIGGER TR_KI_DOST_SUMA_BIU10 FOR KI_DOST_SUMA
ACTIVE BEFORE INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_VAT_PERCENT DOUBLE PRECISION; 
BEGIN 
    IF (INSERTING) THEN BEGIN 
        IF (NEW.PAY_TIP = 1) THEN BEGIN 
            SELECT 
                OPR.SUMA 
            FROM 
                OPR 
            WHERE 
                ID = NEW.KI_OPR_ID 
            INTO 
                :L_SUMA; 
 
            INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
            VALUES (NEW.KI_OPR_ID, :L_SUMA, :L_SUMA, NEW.VAT_PERCENT); 
        END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        IF ((OLD.PAY_TIP IN (0,2)) AND (NEW.PAY_TIP = 1)) THEN BEGIN 
            SELECT 
                OPR.SUMA 
            FROM 
                OPR 
            WHERE 
                ID = NEW.KI_OPR_ID 
            INTO 
                :L_SUMA; 
 
            INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
            VALUES (OLD.KI_OPR_ID, :L_SUMA, :L_SUMA, OLD.VAT_PERCENT); 
        END 
        ELSE IF ((OLD.PAY_TIP IN (1,3)) AND (NEW.PAY_TIP IN (0,2))) THEN BEGIN 
            DELETE FROM SUMI WHERE OPR_ID = NEW.KI_OPR_ID; 
        END 
    END 
END
^


/* Trigger: TR_KI_DOST_SUMA_FAK_BI0 */
CREATE TRIGGER TR_KI_DOST_SUMA_FAK_BI0 FOR KI_DOST_SUMA_FAK
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_KI_DOST_SUMA_FAK_ID; 
END
^


/* Trigger: TR_KLI_BU0 */
CREATE TRIGGER TR_KLI_BU0 FOR KLI
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
    IF (((OLD.KLI_GROUP_ID IS NULL) AND (NEW.KLI_GROUP_ID IS NOT NULL))
    OR ((OLD.KLI_GROUP_ID IS NOT NULL) AND (NEW.KLI_GROUP_ID IS NULL))
    OR(OLD.KLI_GROUP_ID <> NEW.KLI_GROUP_ID)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.CODE IS NULL) AND (NEW.CODE IS NOT NULL))
    OR ((OLD.CODE IS NOT NULL) AND (NEW.CODE IS NULL))
    OR(OLD.CODE <> NEW.CODE)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.NAME IS NULL) AND (NEW.NAME IS NOT NULL))
    OR ((OLD.NAME IS NOT NULL) AND (NEW.NAME IS NULL))
    OR(OLD.NAME <> NEW.NAME)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.KLIENT IS NULL) AND (NEW.KLIENT IS NOT NULL))
    OR ((OLD.KLIENT IS NOT NULL) AND (NEW.KLIENT IS NULL))
    OR(OLD.KLIENT <> NEW.KLIENT)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.DOSTAV IS NULL) AND (NEW.DOSTAV IS NOT NULL))
    OR ((OLD.DOSTAV IS NOT NULL) AND (NEW.DOSTAV IS NULL))
    OR(OLD.DOSTAV <> NEW.DOSTAV)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.PROIZV IS NULL) AND (NEW.PROIZV IS NOT NULL))
    OR ((OLD.PROIZV IS NOT NULL) AND (NEW.PROIZV IS NULL))
    OR(OLD.PROIZV <> NEW.PROIZV)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.PERCENT IS NULL) AND (NEW.PERCENT IS NOT NULL))
    OR ((OLD.PERCENT IS NOT NULL) AND (NEW.PERCENT IS NULL))
    OR(OLD.PERCENT <> NEW.PERCENT)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.COMMENT IS NULL) AND (NEW.COMMENT IS NOT NULL))
    OR ((OLD.COMMENT IS NOT NULL) AND (NEW.COMMENT IS NULL))
    OR(OLD.COMMENT <> NEW.COMMENT)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.ADRES IS NULL) AND (NEW.ADRES IS NOT NULL))
    OR ((OLD.ADRES IS NOT NULL) AND (NEW.ADRES IS NULL))
    OR(OLD.ADRES <> NEW.ADRES)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.TEL IS NULL) AND (NEW.TEL IS NOT NULL))
    OR ((OLD.TEL IS NOT NULL) AND (NEW.TEL IS NULL))
    OR(OLD.TEL <> NEW.TEL)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.FIRMA_ID IS NULL) AND (NEW.FIRMA_ID IS NOT NULL))
    OR ((OLD.FIRMA_ID IS NOT NULL) AND (NEW.FIRMA_ID IS NULL))
    OR(OLD.FIRMA_ID <> NEW.FIRMA_ID)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.DIST IS NULL) AND (NEW.DIST IS NOT NULL))
    OR ((OLD.DIST IS NOT NULL) AND (NEW.DIST IS NULL))
    OR(OLD.DIST <> NEW.DIST)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.ZA_KASA IS NULL) AND (NEW.ZA_KASA IS NOT NULL))
    OR ((OLD.ZA_KASA IS NOT NULL) AND (NEW.ZA_KASA IS NULL))
    OR(OLD.ZA_KASA <> NEW.ZA_KASA)) THEN
        NEW.FLAG_CHECK = 0;
    ELSE
    IF (((OLD.FOLDER IS NULL) AND (NEW.FOLDER IS NOT NULL))
    OR ((OLD.FOLDER IS NOT NULL) AND (NEW.FOLDER IS NULL))
    OR(OLD.FOLDER <> NEW.FOLDER)) THEN
        NEW.FLAG_CHECK = 0;
END
^


/* Trigger: TR_KLI_DEF_SEL_AU */
CREATE TRIGGER TR_KLI_DEF_SEL_AU FOR KLI
ACTIVE AFTER UPDATE POSITION 0
AS 
DECLARE VARIABLE L_KLI_ID INTEGER; 
BEGIN 
  IF (NEW.DEF_SEL_ID IS NULL) THEN EXIT; 
  SELECT 
    SELEKCIQ_KLI_EL.KLI_ID 
  FROM 
    KLI INNER JOIN SELEKCIQ_KLI_EL ON KLI.ID = SELEKCIQ_KLI_EL.KLI_ID 
  WHERE 
    SELEKCIQ_KLI_EL.SELEKCIQ_ID = NEW.DEF_SEL_ID AND 
    SELEKCIQ_KLI_EL.KLI_ID = NEW.ID 
  INTO: 
    L_KLI_ID; 
  IF (L_KLI_ID IS NULL) THEN BEGIN 
    INSERT INTO SELEKCIQ_KLI_EL (KLI_ID, SELEKCIQ_ID) VALUES(NEW.ID, NEW.DEF_SEL_ID); 
  END 
END
^


/* Trigger: TR_KLI_DIST_NODE_BI */
CREATE TRIGGER TR_KLI_DIST_NODE_BI FOR KLI_DIST_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
  NEW.ID = GEN_ID(GEN_KLI_DIST_NODE_ID,1);
END
^


/* Trigger: TR_KLI_EXTENDED_VARANTY_BI0 */
CREATE TRIGGER TR_KLI_EXTENDED_VARANTY_BI0 FOR KLI_EXTENDED_VARANTY
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_KLI_EXTENDED_VARANTY_ID; 
END
^


/* Trigger: TR_KLI_KASA_MAIL_NODE_BI */
CREATE TRIGGER TR_KLI_KASA_MAIL_NODE_BI FOR KLI_KASA_MAIL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_KLI_KASA_MAIL_NODE_ID; 
END
^


/* Trigger: TR_KONSIGNACIA_BI */
CREATE TRIGGER TR_KONSIGNACIA_BI FOR KONSIGNACIA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_KONSIGNACIA_ID,1); 
END
^


/* Trigger: TR_LICENZ_PROD_NODE_BI0 */
CREATE TRIGGER TR_LICENZ_PROD_NODE_BI0 FOR LICENZ_PROD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_LICENZ_PROD_NODE_ID; 
END
^


/* Trigger: TR_LOG_CENI_DDS_BI0 */
CREATE TRIGGER TR_LOG_CENI_DDS_BI0 FOR LOG_CENI_DDS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_LOG_CENI_DDS_ID,1); 
    NEW.DATETIME = CURRENT_TIMESTAMP;
END
^


/* Trigger: TR_MESA_BI0 */
CREATE TRIGGER TR_MESA_BI0 FOR MESA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_MESA_ID, 1); 
END
^


/* Trigger: TR_MESA_TIP_BI0 */
CREATE TRIGGER TR_MESA_TIP_BI0 FOR MESA_TIP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_MESA_TIP_ID,1);
END
^


/* Trigger: TR_MESSAGES_AI0 */
CREATE TRIGGER TR_MESSAGES_AI0 FOR MESSAGES
ACTIVE AFTER INSERT POSITION 0
AS
BEGIN
    POST_EVENT 'SYSTEM_MESSAGE';
END
^


/* Trigger: TR_MESSAGES_BI */
CREATE TRIGGER TR_MESSAGES_BI FOR MESSAGES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_MESSAGES_ID,1); 
 
  NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: TR_NAL_BI0 */
CREATE TRIGGER TR_NAL_BI0 FOR NAL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_NAL_ID,1); 
 
    NEW.KOL_IZL = 0.00; 
 
END
^


/* Trigger: TR_OFFERS_BI0 */
CREATE TRIGGER TR_OFFERS_BI0 FOR OFFERS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OFFERS_ID; 
 
    IF (NEW.OFFER_TYPE IS NULL) THEN 
        NEW.OFFER_TYPE = 0; 
END
^


/* Trigger: TR_OFFER_EL_BI0 */
CREATE TRIGGER TR_OFFER_EL_BI0 FOR OFFER_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OFFER_EL_ID; 
END
^


/* Trigger: TR_OFFER_POR_NODE_AI0 */
CREATE TRIGGER TR_OFFER_POR_NODE_AI0 FOR OFFER_POR_NODE
ACTIVE AFTER INSERT POSITION 0
AS 
DECLARE VARIABLE L_USER_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_POR_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_STATUS TYPE OF DOM_SMAL_INT; 
BEGIN 
    SELECT 
        OFFERS.STATUS 
    FROM 
        OFFERS 
    WHERE 
        OFFERS.ID = NEW.OFFER_ID 
    INTO 
        :L_STATUS; 
 
    IF (:L_STATUS IN (1, 4)) THEN 
        EXIT; 
 
    SELECT 
        COUNT(OFFER_USER_NODE.ID) 
    FROM 
        OFFER_USER_NODE 
    WHERE 
        OFFER_USER_NODE.OFFER_ID = NEW.OFFER_ID 
    INTO 
        :L_USER_COUNT; 
 
    SELECT 
        COUNT(OFFER_POR_NODE.ID) 
    FROM 
        OFFER_POR_NODE 
    WHERE 
        OFFER_POR_NODE.OFFER_ID = NEW.OFFER_ID 
    INTO 
        :L_POR_COUNT; 
 
    L_USER_COUNT = COALESCE(L_USER_COUNT, 0); 
    L_POR_COUNT = L_POR_COUNT; 
 
    UPDATE OFFERS SET 
        STATUS = IIF (:L_USER_COUNT = 0, 3, IIF(:L_POR_COUNT < :L_USER_COUNT, 2, 3)) 
    WHERE 
        ID = NEW.OFFER_ID; 
END
^


/* Trigger: TR_OFFER_POR_NODE_BD0 */
CREATE TRIGGER TR_OFFER_POR_NODE_BD0 FOR OFFER_POR_NODE
ACTIVE BEFORE DELETE POSITION 0
AS 
DECLARE VARIABLE L_USER_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_POR_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_STATUS TYPE OF DOM_SMAL_INT; 
BEGIN 
    SELECT 
        OFFERS.STATUS 
    FROM 
        OFFERS 
    WHERE 
        OFFERS.ID = OLD.OFFER_ID 
    INTO 
        :L_STATUS; 
 
    IF (:L_STATUS IN (1, 4)) THEN 
        EXIT; 
 
    SELECT 
        COUNT(OFFER_USER_NODE.ID) 
    FROM 
        OFFER_USER_NODE 
    WHERE 
        OFFER_USER_NODE.OFFER_ID = OLD.OFFER_ID 
    INTO 
        :L_USER_COUNT; 
 
    SELECT 
        COUNT(OFFER_POR_NODE.ID) 
    FROM 
        OFFER_POR_NODE 
    WHERE 
        OFFER_POR_NODE.OFFER_ID = OLD.OFFER_ID 
    INTO 
        :L_POR_COUNT; 
 
    L_USER_COUNT = COALESCE(L_USER_COUNT, 0); 
    L_POR_COUNT = L_POR_COUNT - 1; 
 
    UPDATE OFFERS SET 
        STATUS = IIF (:L_POR_COUNT = 0, 0, IIF(:L_USER_COUNT = 0, 3, IIF(:L_POR_COUNT < :L_USER_COUNT, 2, 3))) 
    WHERE 
        ID = OLD.OFFER_ID; 
END
^


/* Trigger: TR_OFFER_POR_NODE_BI0 */
CREATE TRIGGER TR_OFFER_POR_NODE_BI0 FOR OFFER_POR_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OFFER_POR_NODE_ID; 
END
^


/* Trigger: TR_OFFER_TERMS_BI0 */
CREATE TRIGGER TR_OFFER_TERMS_BI0 FOR OFFER_TERMS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OFFER_TERMS_ID; 
END
^


/* Trigger: TR_OFFER_USER_NODE_AI0 */
CREATE TRIGGER TR_OFFER_USER_NODE_AI0 FOR OFFER_USER_NODE
ACTIVE AFTER INSERT POSITION 0
AS 
DECLARE VARIABLE L_USER_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_POR_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_STATUS TYPE OF DOM_SMAL_INT; 
BEGIN 
    SELECT 
        OFFERS.STATUS 
    FROM 
        OFFERS 
    WHERE 
        OFFERS.ID = NEW.OFFER_ID 
    INTO 
        :L_STATUS; 
 
    IF (:L_STATUS IN (1, 4)) THEN 
        EXIT; 
 
    SELECT 
        COUNT(OFFER_USER_NODE.ID) 
    FROM 
        OFFER_USER_NODE 
    WHERE 
        OFFER_USER_NODE.OFFER_ID = NEW.OFFER_ID 
    INTO 
        :L_USER_COUNT; 
 
    SELECT 
        COUNT(OFFER_POR_NODE.ID) 
    FROM 
        OFFER_POR_NODE 
    WHERE 
        OFFER_POR_NODE.OFFER_ID = NEW.OFFER_ID 
    INTO 
        :L_POR_COUNT; 
 
    L_USER_COUNT = L_USER_COUNT; 
    L_POR_COUNT = COALESCE(L_POR_COUNT, 0); 
 
 
 
    UPDATE OFFERS SET 
        STATUS = IIF (:L_POR_COUNT = 0, 0, IIF(:L_POR_COUNT < :L_USER_COUNT, 2, 3)) 
    WHERE 
        ID = NEW.OFFER_ID; 
END
^


/* Trigger: TR_OFFER_USER_NODE_BD0 */
CREATE TRIGGER TR_OFFER_USER_NODE_BD0 FOR OFFER_USER_NODE
ACTIVE BEFORE DELETE POSITION 0
AS 
DECLARE VARIABLE L_USER_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_POR_COUNT TYPE OF DOM_INT; 
DECLARE VARIABLE L_STATUS TYPE OF DOM_SMAL_INT; 
BEGIN 
    SELECT 
        OFFERS.STATUS 
    FROM 
        OFFERS 
    WHERE 
        OFFERS.ID = OLD.OFFER_ID 
    INTO 
        :L_STATUS; 
 
    IF (:L_STATUS IN (1, 4)) THEN 
        EXIT; 
 
    SELECT 
        COUNT(OFFER_USER_NODE.ID) 
    FROM 
        OFFER_USER_NODE 
    WHERE 
        OFFER_USER_NODE.OFFER_ID = OLD.OFFER_ID 
    INTO 
        :L_USER_COUNT; 
 
    SELECT 
        COUNT(OFFER_POR_NODE.ID) 
    FROM 
        OFFER_POR_NODE 
    WHERE 
        OFFER_POR_NODE.OFFER_ID = OLD.OFFER_ID 
    INTO 
        :L_POR_COUNT; 
 
    L_USER_COUNT = L_USER_COUNT - 1; 
    L_POR_COUNT = COALESCE(L_POR_COUNT, 0); 
 
    UPDATE OFFERS SET 
        STATUS = IIF (:L_USER_COUNT = 0, IIF (:L_POR_COUNT = 0, 0, 3), IIF(:L_POR_COUNT = 0, 0, IIF(:L_POR_COUNT < :L_USER_COUNT, 2, 3))) 
    WHERE 
        ID = OLD.OFFER_ID; 
END
^


/* Trigger: TR_OFFER_USER_NODE_BI0 */
CREATE TRIGGER TR_OFFER_USER_NODE_BI0 FOR OFFER_USER_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OFFER_USER_NODE_ID; 
END
^


/* Trigger: TR_OLD_IN_EL_BI */
CREATE TRIGGER TR_OLD_IN_EL_BI FOR OLD_IN_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_OLD_IN_EL_ID,1); 
END
^


/* Trigger: TR_OLD_OFFERS_BI0 */
CREATE TRIGGER TR_OLD_OFFERS_BI0 FOR OLD_OFFERS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OLD_OFFERS_ID; 
END
^


/* Trigger: TR_OLD_OFFER_EL_BI0 */
CREATE TRIGGER TR_OLD_OFFER_EL_BI0 FOR OLD_OFFER_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OLD_OFFER_EL_ID; 
END
^


/* Trigger: TR_OLD_OFFER_USER_NODE_BI0 */
CREATE TRIGGER TR_OLD_OFFER_USER_NODE_BI0 FOR OLD_OFFER_USER_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OLD_OFFER_USER_NODE_ID; 
END
^


/* Trigger: TR_OLD_OUT_EL_BI */
CREATE TRIGGER TR_OLD_OUT_EL_BI FOR OLD_OUT_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_OLD_OUT_EL_ID,1); 
 
    IF (NEW.VAT_PERCENT IS NULL) THEN 
        NEW.VAT_PERCENT = (SELECT SIMPLE.DDS FROM SIMPLE WHERE SIMPLE.ID 
= NEW.SIMPLE_ID); 
END
^


/* Trigger: TR_OLD_OUT_EL_PE_NODE_BI0 */
CREATE TRIGGER TR_OLD_OUT_EL_PE_NODE_BI0 FOR OLD_OUT_EL_PE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_OLD_OUT_EL_PE_ID,1); 
END
^


/* Trigger: TR_OLD_PARI_EL_BI */
CREATE TRIGGER TR_OLD_PARI_EL_BI FOR OLD_PARI_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OLD_PARI_EL_ID,1); 
END
^


/* Trigger: TR_OLD_POR_EL_PARAMS_BI0 */
CREATE TRIGGER TR_OLD_POR_EL_PARAMS_BI0 FOR OLD_POR_EL_PARAMS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OLD_POR_EL_PARAMS_ID; 
END
^


/* Trigger: TR_OLD_POR_EL_PRICE_COEF_BI0 */
CREATE TRIGGER TR_OLD_POR_EL_PRICE_COEF_BI0 FOR OLD_POR_EL_PRICE_COEF
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OLD_POR_EL_PRICE_COEF_ID; 
END
^


/* Trigger: TR_ONLINE_ROLES_BI0 */
CREATE TRIGGER TR_ONLINE_ROLES_BI0 FOR ONLINE_ROLES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_ONLINE_ROLES_ID; 
END
^


/* Trigger: TR_ONLINE_USERS_BI0 */
CREATE TRIGGER TR_ONLINE_USERS_BI0 FOR ONLINE_USERS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_ONLINE_USERS_ID; 
 
    IF (NEW.IS_ACTIVE IS NULL) THEN 
        NEW.IS_ACTIVE = 1; 
 
    NEW.EMAIL = LOWER(TRIM(NEW.EMAIL)); 
END
^


/* Trigger: TR_ONLINE_USERS_BU0 */
CREATE TRIGGER TR_ONLINE_USERS_BU0 FOR ONLINE_USERS
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    NEW.EMAIL = LOWER(TRIM(NEW.EMAIL)); 
END
^


/* Trigger: TR_ON_OFF_LINE_LOG_AU0 */
CREATE TRIGGER TR_ON_OFF_LINE_LOG_AU0 FOR ON_OFF_LINE_LOG
ACTIVE AFTER UPDATE POSITION 0
AS  
BEGIN  
  IF (NEW.RECIPIENTS = 0 OR NEW.RECIPIENTS IS NULL) THEN 
    DELETE FROM ON_OFF_LINE_LOG WHERE ON_OFF_LINE_LOG.ID = NEW.ID;  
END
^


/* Trigger: TR_OPR_AI1 */
CREATE TRIGGER TR_OPR_AI1 FOR OPR
ACTIVE AFTER INSERT POSITION 1
AS 
DECLARE VARIABLE L_OLD_IS_WORKED SMALLINT; 
BEGIN 
    SELECT 
        "USER".IS_WORKED 
    FROM 
        "USER" 
    WHERE 
        "USER".ID = NEW.USER_ID 
    INTO 
        :L_OLD_IS_WORKED; 
 
    IF ((NEW.OPR_TIP IN (1,2,4,6,7,11,16,26,27,35,37,39,40,50,79, 101, 102, 104, 106, 111,137,140,150,179, 201, 202, 204, 206, 211)) AND (BIN_AND(L_OLD_IS_WORKED,1) = 0)) THEN BEGIN 
        UPDATE "USER" SET "USER".IS_WORKED = BIN_OR("USER".IS_WORKED, 1) 
        WHERE "USER".ID = NEW.USER_ID; 
    END 
END
^


/* Trigger: TR_OPR_AMBALAJ_NODE_BI */
CREATE TRIGGER TR_OPR_AMBALAJ_NODE_BI FOR OPR_AMBALAJ_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_OPR_AMBALAJ_NODE_ID,1);
END
^


/* Trigger: TR_OPR_BU0 */
CREATE TRIGGER TR_OPR_BU0 FOR OPR
ACTIVE BEFORE UPDATE POSITION 0
AS 
DECLARE VARIABLE L_IN_EL_ID TYPE OF DOM_KEY; 
BEGIN 
    IF ((OLD.SKLAD_ID IS NOT NULL) AND (NEW.SKLAD_ID IS NOT NULL) AND (OLD.SKLAD_ID <> NEW.SKLAD_ID)) THEN BEGIN 
        FOR SELECT 
            IN_EL.ID 
        FROM 
            IN_EL 
        WHERE 
            IN_EL.OPR_ID = NEW.ID 
        INTO 
            :L_IN_EL_ID 
        DO 
            UPDATE PARTIDA_NAL SET SKLAD_ID = NEW.SKLAD_ID 
            WHERE IN_EL_ID = :L_IN_EL_ID; 
    END 
END
^


/* Trigger: TR_OPR_PADEJ_BI */
CREATE TRIGGER TR_OPR_PADEJ_BI FOR OPR_PADEJ
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OPR_PADEJ_ID,1);
END
^


/* Trigger: TR_OPR_PAYMENT_NODE_AI0 */
CREATE TRIGGER TR_OPR_PAYMENT_NODE_AI0 FOR OPR_PAYMENT_NODE
ACTIVE AFTER INSERT POSITION 0
AS 
BEGIN 
    INSERT INTO PAYMENT_NODE (OPR_ID,NODE_ID) 
    VALUES (NEW.OPR_ID,NEW.ID); 
 
    INSERT INTO PAYMENT_NODE (OPR_ID,NODE_ID) 
    VALUES (NEW.PAYMENT_ID,NEW.ID); 
END
^


/* Trigger: TR_OPR_PAYMENT_NODE_BD10 */
CREATE TRIGGER TR_OPR_PAYMENT_NODE_BD10 FOR OPR_PAYMENT_NODE
ACTIVE BEFORE DELETE POSITION 10
AS 
BEGIN 
    UPDATE SUMI SET SUMA_OST = ROUNDD(SUMA_OST + OLD.SUMA) WHERE ID IN (OLD.OPR_ID,OLD.PAYMENT_ID); 
END
^


/* Trigger: TR_OPR_PAYMENT_NODE_BI */
CREATE TRIGGER TR_OPR_PAYMENT_NODE_BI FOR OPR_PAYMENT_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_OPR_PAYMENT_NODE_ID,1);
END
^


/* Trigger: TR_OPR_RECEPIES_BI0 */
CREATE TRIGGER TR_OPR_RECEPIES_BI0 FOR OPR_RECEPIES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OPR_RECEPIES_ID; 
END
^


/* Trigger: TR_OPR_RECEPIES_EL_BI0 */
CREATE TRIGGER TR_OPR_RECEPIES_EL_BI0 FOR OPR_RECEPIES_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OPR_RECEPIES_EL_ID; 
END
^


/* Trigger: TR_OPR_SUMI_BI */
CREATE TRIGGER TR_OPR_SUMI_BI FOR OPR_SUMI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_OPR_SUMI_ID,1); 
END
^


/* Trigger: TR_ORDER_ACTIONS_BI0 */
CREATE TRIGGER TR_ORDER_ACTIONS_BI0 FOR ORDER_ACTIONS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_ORDER_ACTIONS_ID; 
 
    NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: TR_OTCS_OPR_NODE_BI0 */
CREATE TRIGGER TR_OTCS_OPR_NODE_BI0 FOR OTCS_OPR_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_OTCS_OPR_NODE_ID; 
END
^


/* Trigger: TR_OTC_EL_EDIT_BI */
CREATE TRIGGER TR_OTC_EL_EDIT_BI FOR OTC_EL_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OTC_EL_EDIT_ID,1);
END
^


/* Trigger: TR_OTC_PER_BI */
CREATE TRIGGER TR_OTC_PER_BI FOR OTC_PER
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_OTC_PER_ID,1);
END
^


/* Trigger: TR_OUT_BIU10 */
CREATE TRIGGER TR_OUT_BIU10 FOR OUT
ACTIVE BEFORE INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_SUMA TYPE OF DOM_SUMA; 
BEGIN 
    SELECT 
        SUM(EL.SUMA) 
    FROM 
        OUT_EL EL 
    WHERE 
        EL.OPR_ID = NEW.OPR_ID 
    INTO 
        :L_SUMA; 
 
    IF (INSERTING) THEN BEGIN 
        IF (NEW.PAY_TIP <> 1) THEN 
            EXIT; 
 
        IF (L_SUMA IS NULL) THEN BEGIN 
            INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST) 
            SELECT 
                OPR.ID, 
                OPR.SUMA, 
                OPR.SUMA 
            FROM 
                OPR 
            WHERE 
                ID = NEW.OPR_ID; 
        END 
        ELSE BEGIN 
            INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST, VAT_PERCENT) 
            SELECT 
                OUT_EL.OPR_ID, 
                SUM(OUT_EL.SUMA), 
                SUM(OUT_EL.SUMA), 
                PROD_CENI_EL.VAT_PERCENT 
            FROM 
                OUT_EL INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID AND OUT_EL.OPR_ID = NEW.OPR_ID 
            GROUP BY 1, 4; 
        END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        IF ((OLD.PAY_TIP IN (0,2,4)) AND (NEW.PAY_TIP = 1)) THEN BEGIN 
            /*ДОБАВЯМЕ НОВ ЗАПИС, ЗА ДА СЕ КАЖЕ, ЧЕ ИМА ЗА ПЛАЩАНЕ*/ 
            IF (L_SUMA IS NULL) THEN BEGIN 
                INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST) 
                SELECT 
                    OPR.ID, 
                    OPR.SUMA, 
                    OPR.SUMA 
                FROM 
                    OPR 
                WHERE 
                    ID = NEW.OPR_ID; 
            END 
            ELSE BEGIN 
                INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST, VAT_PERCENT) 
                SELECT 
                    OUT_EL.OPR_ID, 
                    SUM(OUT_EL.SUMA), 
                    SUM(OUT_EL.SUMA), 
                    PROD_CENI_EL.VAT_PERCENT 
                FROM 
                    OUT_EL INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID AND OUT_EL.OPR_ID = NEW.OPR_ID 
                GROUP BY 1, 4; 
            END 
        END 
        ELSE IF ((OLD.PAY_TIP IN (1,3)) AND (NEW.PAY_TIP IN (0,2))) THEN BEGIN 
            /*СМЕНЯ СИ СТАТУСА НА ПЛАТЕНО ВЕДНАГА - РАЗКАЧАМЕ ВРЪЗКИТЕ С ПЛАЩАНИЯ, НО ПЪРВО НАМАЛЯМ ИЗПОЛЗВАНАТА СУМА 
            НА ОПЕРАЦИЙТЕ СВЪРЗАНИ С ТАЗИ*/ 
            DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
        END 
    END 
END;
^


/* Trigger: TR_OUT_BU5 */
CREATE TRIGGER TR_OUT_BU5 FOR OUT
ACTIVE BEFORE UPDATE POSITION 5
AS 
DECLARE VARIABLE IS_UNREAL SMALLINT; 
BEGIN 
    SELECT FIRST 1 
        SYSTEM.UNREALSOFT 
    FROM 
        SYSTEM 
    INTO 
        :IS_UNREAL; 
    IF (IS_UNREAL = 1) THEN BEGIN 
        IF ((OLD.PAY_TIP = 1) AND (NEW.PAY_TIP = 3))THEN BEGIN 

            EXECUTE PROCEDURE CHANGE_LICENZ(NEW.OPR_ID) 
            RETURNING_VALUES :IS_UNREAL; 
 
            EXECUTE PROCEDURE SLEDI_LICENZ_UPDATE(NEW.OPR_ID);
        END 
        ELSE IF ((OLD.PAY_TIP = 3) AND (NEW.PAY_TIP = 1))THEN 
            EXECUTE PROCEDURE DECREASE_LICENZ(NEW.OPR_ID) 
            RETURNING_VALUES :IS_UNREAL; 
 
    END 
END
^


/* Trigger: TR_OUT_EL_AI2 */
CREATE TRIGGER TR_OUT_EL_AI2 FOR OUT_EL
ACTIVE AFTER INSERT POSITION 2
AS 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_KLI_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_AMB_ID TYPE OF DOM_KEY; 
BEGIN 
    SELECT 
        OPR.OPR_TIP, 
        OPR.KLI_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = NEW.OPR_ID 
    INTO 
        :L_OPR_TIP, :L_KLI_ID; 
 
    IF ((L_OPR_TIP IN (56,57)) AND (L_KLI_ID IS NOT NULL)) THEN BEGIN 
        SELECT 
            AMBALAJ.ID 
        FROM 
            AMBALAJ 
        WHERE 
            AMBALAJ.SIMPLE_ID = NEW.SIMPLE_ID 
            AND AMBALAJ.KLI_ID = :L_KLI_ID 
        INTO 
            :L_AMB_ID; 
 
        IF (L_AMB_ID IS NULL) THEN 
            INSERT INTO AMBALAJ (KLI_ID,SIMPLE_ID, KOL) 
            VALUES (:L_KLI_ID, NEW.SIMPLE_ID, 0.00); 
 
        UPDATE AMBALAJ SET 
            KOL = KOL - NEW.KOL 
        WHERE 
            AMBALAJ.KLI_ID = :L_KLI_ID 
            AND AMBALAJ.SIMPLE_ID = NEW.SIMPLE_ID; 
    END 
END
^


/* Trigger: TR_OUT_EL_AU0 */
CREATE TRIGGER TR_OUT_EL_AU0 FOR OUT_EL
ACTIVE AFTER UPDATE POSITION 0
AS 
DECLARE VARIABLE L_BR_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_SMAL_INT; 
BEGIN 
    IF (((NEW.SUMA > 0.00) AND (OLD.SUMA > 0.00)) 
    AND ((ROUND(NEW.KOL,5) = ROUND(OLD.KOL,5)))) THEN 
        EXIT; 
 
    SELECT 
        OPR.ID, 
        OPR.SKLAD_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = NEW.OPR_ID 
        AND OPR.OPR_TIP IN (2,34) 
    INTO 
        :L_BR_ID, :L_SKLAD_ID; 
 
    IF (L_BR_ID IS NULL) THEN 
        EXIT; 
 
    L_BR_ID = NULL; 
 
    SELECT 
        BZR.ID 
    FROM 
        BONUSI_ZA_RAZCHET BZR 
    WHERE 
        BZR.OUT_EL_ID = NEW.ID 
    INTO 
        :L_BR_ID; 
 
    IF (L_BR_ID IS NULL) THEN BEGIN 
        IF (NEW.SUMA = 0.00) THEN BEGIN 
        --НЯМАЛО Е БОНУС, НО СЕГА СУМАТА Е 0.00 КАТО БОНУС - ДОБАВЯМ ГО 
            INSERT INTO BONUSI_ZA_RAZCHET (OUT_EL_ID, SUMA, KOL) 
            VALUES(NEW.ID, ROUND(COALESCE((SELECT NAL.LAST_CENA FROM NAL WHERE NAL.SIMPLE_ID = NEW.SIMPLE_ID AND NAL.SKLAD_ID = :L_SKLAD_ID), 0.00) * NEW.KOL, 2), NEW.KOL); 
        END 
    END 
    ELSE BEGIN 
        IF (NEW.SUMA > 0.00) THEN 
            DELETE FROM BONUSI_ZA_RAZCHET 
            WHERE 
                OUT_EL_ID = NEW.ID; 
        ELSE BEGIN 
            IF (ROUND(OLD.KOL, 5) <> ROUND(NEW.KOL, 5)) THEN BEGIN 
                DELETE FROM BONUS_RAZCHET_NODE 
                WHERE 
                    OUT_ID = :L_BR_ID; 
 
                UPDATE BONUSI_ZA_RAZCHET SET 
                    SUMA = ROUND(ROUND(SUMA / OLD.KOL,5) * NEW.KOL,2), 
                    SUMA_OST = ROUND(ROUND(SUMA / OLD.KOL,5) * NEW.KOL,2), 
                    KOL = NEW.KOL 
                WHERE 
                    OUT_EL_ID = NEW.ID; 
            END 
        END 
    END 
END
^


/* Trigger: TR_OUT_EL_AU1 */
CREATE TRIGGER TR_OUT_EL_AU1 FOR OUT_EL
ACTIVE AFTER UPDATE POSITION 1
AS 
DECLARE VARIABLE L_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_KOL TYPE OF DOM_KOL; 
BEGIN 
    IF (ROUND(NEW.KOL,5) = ROUND(OLD.KOL,5)) THEN 
        EXIT; 
 
    SELECT 
        OUT_EL_RAZ_NODE.ID, 
        RAZFASOVKA.KOL 
    FROM 
        OUT_EL_RAZ_NODE INNER JOIN RAZFASOVKA ON RAZFASOVKA.ID = OUT_EL_RAZ_NODE.RAZFASOVKA_ID 
    WHERE 
        OUT_EL_RAZ_NODE.OUT_EL_ID = NEW.ID 
    INTO 
        :L_ID,:L_KOL; 
 
    IF (L_ID IS NULL) THEN 
        EXIT; 
 
    UPDATE OUT_EL_RAZ_NODE SET 
        KOL = ROUND(NEW.KOL / :L_KOL,5) 
    WHERE 
        OUT_EL_ID = NEW.ID; 
 
 
END
^


/* Trigger: TR_OUT_EL_BD1 */
CREATE TRIGGER TR_OUT_EL_BD1 FOR OUT_EL
ACTIVE BEFORE DELETE POSITION 1
AS 
DECLARE VARIABLE L_OUT_EL2_ID INTEGER; 
DECLARE VARIABLE L_OUT_EL2_KOL DOUBLE PRECISION; 
DECLARE VARIABLE L_NAL_ID INTEGER; 
DECLARE VARIABLE L_BONUS_TOCHKI INTEGER; 
DECLARE VARIABLE L_KLI_ID INTEGER; 
BEGIN 
    L_OUT_EL2_ID = NULL; 
    SELECT 
        OUT_EL2.ID, 
        OUT_EL2.KOL 
    FROM 
        OUT_EL2 
    WHERE 
        OUT_EL2.OUT_EL_ID = OLD.ID 
    INTO 
        :L_OUT_EL2_ID,:L_OUT_EL2_KOL; 
    IF (L_OUT_EL2_ID IS NOT NULL) THEN BEGIN 
        UPDATE NAL2 SET 
        NAL2.KOL = ROUND5(NAL2.KOL + :L_OUT_EL2_KOL) 
        WHERE NAL2.NAL_ID = (SELECT NAL.ID FROM NAL INNER JOIN OPR ON OPR.SKLAD_ID = NAL.SKLAD_ID AND OPR.ID = OLD.OPR_ID AND NAL.SIMPLE_ID = OLD.SIMPLE_ID); 
    END 
 
    L_BONUS_TOCHKI = 0; 
    SELECT 
      PROD_CENI_EL.BONUS_TOCHKI 
    FROM 
      PROD_CENI_EL 
    WHERE 
      PROD_CENI_EL.OUT_EL_ID = OLD.ID 
    INTO 
      :L_BONUS_TOCHKI; 
 
    IF (L_BONUS_TOCHKI > 0 AND L_BONUS_TOCHKI IS NOT NULL) THEN BEGIN 
      L_KLI_ID = NULL; 
      SELECT FIRST 1 
        OPR.KLI_ID 
      FROM 
        OUT_EL INNER JOIN OPR ON OPR.ID = OLD.OPR_ID 
      INTO 
        :L_KLI_ID; 
 
      IF (L_KLI_ID IS NOT NULL) THEN BEGIN 
        UPDATE KLI SET 
          BONUS_TOCHKI = BONUS_TOCHKI - :L_BONUS_TOCHKI 
        WHERE KLI.ID = :L_KLI_ID; 
      END 
    END 
END
^


/* Trigger: TR_OUT_EL_BD2 */
CREATE TRIGGER TR_OUT_EL_BD2 FOR OUT_EL
ACTIVE BEFORE DELETE POSITION 2
AS 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_KLI_ID TYPE OF DOM_KEY; 
BEGIN 
    SELECT 
        OPR.OPR_TIP, 
        OPR.KLI_ID 
    FROM 
        OPR 
    WHERE 
        OPR.ID = OLD.OPR_ID 
    INTO 
        :L_OPR_TIP, :L_KLI_ID; 
 
    IF ((L_OPR_TIP IN (56,57)) AND (L_KLI_ID IS NOT NULL)) THEN BEGIN 
        UPDATE AMBALAJ SET 
            KOL = KOL + OLD.KOL 
        WHERE 
            AMBALAJ.KLI_ID = :L_KLI_ID 
            AND AMBALAJ.SIMPLE_ID = OLD.SIMPLE_ID; 
    END 
END
^


/* Trigger: TR_OUT_EL_FAK_OUT_EL_BI0 */
CREATE TRIGGER TR_OUT_EL_FAK_OUT_EL_BI0 FOR OUT_EL_FAK_OUT_EL
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_OUT_EL_FAK_OUT_EL_ID,1); 
END
^


/* Trigger: TR_OUT_EL_RAZ_NODE_BI */
CREATE TRIGGER TR_OUT_EL_RAZ_NODE_BI FOR OUT_EL_RAZ_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
 IF (NEW.ID IS NULL) THEN
   NEW.ID = GEN_ID(GEN_OUT_EL_RAZ_NODE_ID,1);
END
^


/* Trigger: TR_PARI_CRYPT_BI */
CREATE TRIGGER TR_PARI_CRYPT_BI FOR PARI_CRYPT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_ID,1);
END
^


/* Trigger: TR_PARI_DIST_BI */
CREATE TRIGGER TR_PARI_DIST_BI FOR PARI_DIST
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_DIST_ID,1);
END
^


/* Trigger: TR_PARI_DIST_BIU10 */
CREATE TRIGGER TR_PARI_DIST_BIU10 FOR PARI_DIST
ACTIVE BEFORE INSERT POSITION 10
AS 
BEGIN
    INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST)
    SELECT
        OPR.ID,
        ROUND(OPR.SUMA, 2),
        ROUND(OPR.SUMA, 2)
    FROM 
        OPR 
    WHERE 
        ID = NEW.OPR_ID;
END
^


/* Trigger: TR_PARI_EL_ANUL_BI */
CREATE TRIGGER TR_PARI_EL_ANUL_BI FOR PARI_EL_ANUL
ACTIVE BEFORE INSERT POSITION 0
AS
  BEGIN
    IF (NEW.ID IS NULL) THEN
      NEW.ID = GEN_ID(GEN_PARI_EL_ANUL_ID,1);
  END
^


/* Trigger: TR_PARI_EL_EDIT_BI */
CREATE TRIGGER TR_PARI_EL_EDIT_BI FOR PARI_EL_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_EL_EDIT_ID,1);
END
^


/* Trigger: TR_PARI_FAKINUSLUGA_NODE_BI */
CREATE TRIGGER TR_PARI_FAKINUSLUGA_NODE_BI FOR PARI_FAKINUSLUGA_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
IF (NEW.ID IS NULL) THEN
NEW.ID = GEN_ID(GEN_PARI_FAKINUSLUGA_NODE_ID,1);
END
^


/* Trigger: TR_PARI_FAK_NODE_BI0 */
CREATE TRIGGER TR_PARI_FAK_NODE_BI0 FOR PARI_FAK_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_PARI_FAK_NODE_ID; 
END
^


/* Trigger: TR_PARI_SKLOPR_NODE_BI */
CREATE TRIGGER TR_PARI_SKLOPR_NODE_BI FOR PARI_SKLOPR_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_SKLOPR_NODE_ID,1);
END
^


/* Trigger: TR_PARI_TMP_BI */
CREATE TRIGGER TR_PARI_TMP_BI FOR PARI_TMP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARI_TMP_ID,1);
END
^


/* Trigger: TR_PARTIDA_EL_BI */
CREATE TRIGGER TR_PARTIDA_EL_BI FOR PARTIDA_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARTIDA_EL_ID,1);
END
^


/* Trigger: TR_PARTIDA_EL_NODE_BD0 */
CREATE TRIGGER TR_PARTIDA_EL_NODE_BD0 FOR PARTIDA_EL_NODE
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN 
    UPDATE IZL SET 
    IZL.KOL_IZL = ROUND5(IZL.KOL_IZL + OLD.KOL) 
    WHERE IZL.ID = ( 
    SELECT 
       PARTIDA_IZL_NODE.IZL_ID 
    FROM 
        PARTIDA_IZL_NODE 
    WHERE 
        PARTIDA_IZL_NODE.PARTIDA_EL_ID = OLD.ID); 
END
^


/* Trigger: TR_PARTIDA_EL_NODE_BI */
CREATE TRIGGER TR_PARTIDA_EL_NODE_BI FOR PARTIDA_EL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARTIDA_EL_NODE_ID,1);
END
^


/* Trigger: TR_PARTIDA_IN_EL_NODE_BI */
CREATE TRIGGER TR_PARTIDA_IN_EL_NODE_BI FOR PARTIDA_IN_EL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = NEXT VALUE FOR GEN_PARTIDA_IN_EL_NODE_ID;
END
^


/* Trigger: TR_PARTIDA_IZL_NODE_AI0 */
CREATE TRIGGER TR_PARTIDA_IZL_NODE_AI0 FOR PARTIDA_IZL_NODE
ACTIVE AFTER INSERT POSITION 0
AS
BEGIN
    /*КОМПЕНСИРАНОТО КОЛИЧЕСТВО СЕ МАХА ОТ ОСТАВАЩО ЗА КОМПЕНСЦИЯ*/
    UPDATE IZL SET
    IZL.KOL_IZL = ROUND5(IZL.KOL_IZL - (
        SELECT
            PARTIDA_EL_NODE.KOL
        FROM
            PARTIDA_EL_NODE
        WHERE
            PARTIDA_EL_NODE.ID = NEW.PARTIDA_EL_ID))
    WHERE IZL.ID = NEW.IZL_ID;
END
^


/* Trigger: TR_PARTIDA_IZL_NODE_BI */
CREATE TRIGGER TR_PARTIDA_IZL_NODE_BI FOR PARTIDA_IZL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARTIDA_IZL_NODE_ID,1);
END
^


/* Trigger: TR_PARTIDA_NAL_BI */
CREATE TRIGGER TR_PARTIDA_NAL_BI FOR PARTIDA_NAL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_PARTIDA_NAL_ID,1); 
 
    IF ((NEW.SIMPLE_ID IS NULL) OR (NEW.SKLAD_ID IS NULL))THEN BEGIN 
        SELECT 
            OPR.SKLAD_ID, 
            IN_EL.SIMPLE_ID 
        FROM 
            IN_EL INNER JOIN OPR ON OPR.ID = IN_EL.OPR_ID 
        WHERE 
            IN_EL.ID = NEW.IN_EL_ID 
        INTO 
            NEW.SKLAD_ID, NEW.SIMPLE_ID; 
    END 
END
^


/* Trigger: TR_PARTIDA_OUT_EL_NODE_BI */
CREATE TRIGGER TR_PARTIDA_OUT_EL_NODE_BI FOR PARTIDA_OUT_EL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PARTIDA_OUT_EL_NODE_ID,1);
END
^


/* Trigger: TR_PARTIDA_PROP_NODE */
CREATE TRIGGER TR_PARTIDA_PROP_NODE FOR PARTIDA_PROP_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_PARTIDA_PROP_NODE_ID,1); 
END
^


/* Trigger: TR_PARTIDA_RETURN_NODE_BI0 */
CREATE TRIGGER TR_PARTIDA_RETURN_NODE_BI0 FOR PARTIDA_RETURN_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = NEXT VALUE FOR GEN_PARTIDA_RETURN_NODE_ID;
END
^


/* Trigger: TR_PAYMENTS_EL_BI */
CREATE TRIGGER TR_PAYMENTS_EL_BI FOR PAYMENTS_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PAYMENTS_EL_ID,1);
END
^


/* Trigger: TR_PAYMENT_AI10 */
CREATE TRIGGER TR_PAYMENT_AI10 FOR PAYMENT
ACTIVE AFTER INSERT POSITION 10
AS 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_OPR_TIP INTEGER; 
BEGIN 
    SELECT 
        OPR.SUMA, 
        OPR_TIP.ID 
    FROM 
        OPR 
        INNER JOIN OPR_TIP ON OPR_TIP.ID = OPR.OPR_TIP 
    WHERE 
        OPR.ID = NEW.OPR_ID 
    INTO 
        :L_SUMA, L_OPR_TIP; 
 
    IF (L_OPR_TIP = 6 AND NEW.VAT_PERCENT  IS NULL)  THEN 
        UPDATE PAYMENT SET VAT_PERCENT = 20.0 WHERE OPR_ID = NEW.OPR_ID; 
 
    INSERT INTO SUMI(OPR_ID,SUMA,SUMA_OST,VAT_PERCENT) 
    VALUES (NEW.OPR_ID,:L_SUMA,:L_SUMA, NEW.VAT_PERCENT); 
END
^


/* Trigger: TR_PAYMENT_NODE_BI0 */
CREATE TRIGGER TR_PAYMENT_NODE_BI0 FOR PAYMENT_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_PAYMENT_NODE_ID,1); 
END
^


/* Trigger: TR_PLACE_BI */
CREATE TRIGGER TR_PLACE_BI FOR PLACE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
 IF (NEW.ID IS NULL) THEN 
   NEW.ID = GEN_ID(GEN_PLACE_ID,1); 
END
^


/* Trigger: TR_POR_AI0 */
CREATE TRIGGER TR_POR_AI0 FOR POR
ACTIVE AFTER INSERT POSITION 0
AS 
BEGIN 
    POST_EVENT 'ADD_NEW_ORDER'; 
END
^


/* Trigger: TR_POR_BI */
CREATE TRIGGER TR_POR_BI FOR POR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_POR_ID,1); 
 
    IF (NEW.STATUS IN (-7, -6)) THEN 
        NEW.CONTRACT_DATE = CURRENT_DATE; 
 
    IF (NEW.STATUS IN (-6)) THEN 
        NEW.PRODUCTION_STATUS_DT = CURRENT_TIMESTAMP; 
 
    IF (NEW.FLAG_DEFERRED_PAYMENT IS NULL) THEN 
        NEW.FLAG_DEFERRED_PAYMENT = 0; 
END
^


/* Trigger: TR_POR_BU0 */
CREATE TRIGGER TR_POR_BU0 FOR POR
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    IF (OLD.STATUS <> NEW.STATUS) THEN 
        NEW.STATUS_DATE = CURRENT_TIMESTAMP; 
 
    IF ((NEW.STATUS = -7) AND (OLD.STATUS <> -7)) THEN 
        NEW.CONTRACT_DATE = CURRENT_DATE; 
 
    IF ((NEW.STATUS = -6) AND (OLD.STATUS <> -6)) THEN 
        NEW.PRODUCTION_STATUS_DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: TR_POR_EDIT_BI0 */
CREATE TRIGGER TR_POR_EDIT_BI0 FOR POR_EDIT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_POR_EDIT_ID; 
END
^


/* Trigger: TR_POR_EL_AI0 */
CREATE TRIGGER TR_POR_EL_AI0 FOR POR_EL
ACTIVE AFTER INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.FLAG_LINE = 0) THEN 
        EXIT; 
 
    -- УПДЕЙТВАМ ПОРЪЧКАТА СЪС СТАТУСА НА РЕДА. САМО АКО ВСЕ ОЩЕ НЯМА ТОЗИ СТАТУС. ДА НЕ ЪПДЕЙТВАМ ЗАПИСА ЗА ЕДНО И СЪЩО ПОСТОЯННО. 
    UPDATE POR SET 
        POR.FLAG_LINES = BIN_OR(POR.FLAG_LINES, NEW.FLAG_LINE) 
    WHERE 
        POR.OPR_ID = NEW.OPR_ID 
        AND BIN_AND(POR.FLAG_LINES, NEW.FLAG_LINE) = 0; 
END
^


/* Trigger: TR_POR_EL_BD0 */
CREATE TRIGGER TR_POR_EL_BD0 FOR POR_EL
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN 
    IF (EXISTS( 
        SELECT 
            POR_EL.ID 
        FROM 
            POR_EL 
        WHERE 
            POR_EL.OPR_ID = OLD.OPR_ID 
            AND POR_EL.ID <> OLD.ID 
            AND POR_EL.FLAG_LINE = OLD.FLAG_LINE)) 
    THEN 
        EXIT; 
 
    UPDATE POR SET 
        POR.FLAG_LINES = BIN_XOR(POR.FLAG_LINES, OLD.FLAG_LINE) 
    WHERE 
        POR.OPR_ID = OLD.OPR_ID; 
END
^


/* Trigger: TR_POR_EL_BI */
CREATE TRIGGER TR_POR_EL_BI FOR POR_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
DECLARE VARIABLE L_STATUS_BIT TYPE OF DOM_SMAL_INT; 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_POR_EL_ID, 1); 
 
    /*IF (NEW.KOL > 0) THEN 
        NEW.PRICE = NEW.SUMA / NEW.KOL;*/ 
 
 
    NEW.FLAG_LINE = 0; 
 
    L_STATUS_BIT = -1; 
 
    IF (NEW.KOL = 0.00) THEN 
        L_STATUS_BIT = 2; 
    ELSE IF (NEW.KOL < NEW.KOL_POR) THEN 
        L_STATUS_BIT = 1; 
    ELSE IF (NEW.KOL > NEW.KOL_POR) THEN 
        L_STATUS_BIT = 0; 
 
    IF (L_STATUS_BIT >= 0) THEN BEGIN 
        NEW.FLAG_LINE = POWER(2, :L_STATUS_BIT); 
    END 
END
^


/* Trigger: TR_POR_EL_BU0 */
CREATE TRIGGER TR_POR_EL_BU0 FOR POR_EL
ACTIVE BEFORE UPDATE POSITION 0
AS 
DECLARE VARIABLE L_STATUS_BIT TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_NEW_POR_FLAG_LINES TYPE OF DOM_SMAL_INT; 
DECLARE VARIABLE L_OLD_POR_FLAG_LINES TYPE OF DOM_SMAL_INT; 
BEGIN 
    NEW.FLAG_LINE = 0; 
    L_STATUS_BIT = -1; 
 
    IF (NEW.KOL = 0.00) THEN 
        L_STATUS_BIT = 2; 
    ELSE IF (NEW.KOL < NEW.KOL_POR) THEN 
        L_STATUS_BIT = 1; 
    ELSE IF (NEW.KOL > NEW.KOL_POR) THEN 
        L_STATUS_BIT = 0; 
 
    IF (L_STATUS_BIT >= 0) THEN BEGIN 
        NEW.FLAG_LINE = POWER(2, :L_STATUS_BIT); 
    END 
 
 
    IF (OLD.FLAG_LINE = NEW.FLAG_LINE) THEN 
        -- НЯМА ПРОМЯНА В СТАТУСА НА РЕДА. НЯМА ДА ПРАВЯ ПОВЕЧЕ ПРОМЕНИ, ЗАЩОТО НЕ ВЛИЯЯТ НА ЦЯЛОСТНИЯ СТАТУС НА ПОРЪЧКАТА. 
        EXIT; 
 
    SELECT 
        POR.FLAG_LINES 
    FROM 
        POR 
    WHERE 
        POR.OPR_ID = OLD.OPR_ID 
    INTO 
        :L_OLD_POR_FLAG_LINES; 
 
    L_NEW_POR_FLAG_LINES = L_OLD_POR_FLAG_LINES; 
 
    IF (NOT EXISTS( 
        SELECT 
            POR_EL.ID 
        FROM 
            POR_EL 
        WHERE 
            POR_EL.OPR_ID = OLD.OPR_ID 
            AND POR_EL.ID <> OLD.ID 
            AND POR_EL.FLAG_LINE = OLD.FLAG_LINE)) 
    THEN 
        -- ПРЕМАХВАМ СТАРИЯ СТАТУС, ЗАЩОТО НЯМА ДРУГИ РЕДОВЕ С НЕГО 
        L_NEW_POR_FLAG_LINES = BIN_XOR(L_OLD_POR_FLAG_LINES, OLD.FLAG_LINE); 
 
    IF (NOT EXISTS( 
        SELECT 
            POR_EL.ID 
        FROM 
            POR_EL 
        WHERE 
            POR_EL.OPR_ID = OLD.OPR_ID 
            AND POR_EL.ID <> OLD.ID 
            AND POR_EL.FLAG_LINE = NEW.FLAG_LINE)) 
    THEN 
        -- ДОБАВЯМ НОВИЯ СТАТУС ЗАЩОТО ДО СЕГА НЯМА ДРУГИ РЕДОВЕ С НЕГО 
        L_NEW_POR_FLAG_LINES = BIN_OR(L_NEW_POR_FLAG_LINES, NEW.FLAG_LINE); 
 
    UPDATE POR SET 
        POR.FLAG_LINES = :L_NEW_POR_FLAG_LINES 
    WHERE 
        POR.OPR_ID = NEW.OPR_ID; 
END
^


/* Trigger: TR_POR_EL_PICTURES_NODE_BI0 */
CREATE TRIGGER TR_POR_EL_PICTURES_NODE_BI0 FOR POR_EL_PICTURES_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_POR_EL_PICTURES_NODE_ID; 
END
^


/* Trigger: TR_POR_EL_PRICE_COEFICIENT_BI0 */
CREATE TRIGGER TR_POR_EL_PRICE_COEFICIENT_BI0 FOR POR_EL_PRICE_COEFICIENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_POR_EL_PRICE_COEFICIENT_ID; 
END
^


/* Trigger: TR_POR_EL_RAZ_NODE_BI */
CREATE TRIGGER TR_POR_EL_RAZ_NODE_BI FOR POR_EL_RAZ_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_POR_EL_RAZ_NODE_ID,1);
END
^


/* Trigger: TR_POR_EL_REQUEST_NODE_BI0 */
CREATE TRIGGER TR_POR_EL_REQUEST_NODE_BI0 FOR POR_EL_REQUEST_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_POR_EL_REQUEST_NODE_ID; 
END
^


/* Trigger: TR_POR_FAK_PROD_NODE_BI0 */
CREATE TRIGGER TR_POR_FAK_PROD_NODE_BI0 FOR POR_FAK_PROD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_POR_FAK_PROD_NODE_ID,1); 
END
^


/* Trigger: TR_POR_OFFER_TERMS_NODE_BI0 */
CREATE TRIGGER TR_POR_OFFER_TERMS_NODE_BI0 FOR POR_OFFER_TERMS_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_POR_OFFER_TERMS_NODE_ID; 
END
^


/* Trigger: TR_POR_OUT_NODE_AI0 */
CREATE TRIGGER TR_POR_OUT_NODE_AI0 FOR POR_OUT_NODE
ACTIVE AFTER INSERT POSITION 0
AS
BEGIN
    UPDATE POR SET
    POR.STATUS  = 4/*ИЗПЪЛНЕНА*/
    WHERE POR.ID = NEW.POR_ID;
END
^


/* Trigger: TR_POR_OUT_NODE_BI */
CREATE TRIGGER TR_POR_OUT_NODE_BI FOR POR_OUT_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_POR_OUT_NODE_ID,1);
END
^


/* Trigger: TR_PRODUCTION_BI */
CREATE TRIGGER TR_PRODUCTION_BI FOR PRODUCTION
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_PRODUCTION_ID,1);
END
^


/* Trigger: TR_PRODUCT_WAREHOUSE_NODE_BI0 */
CREATE TRIGGER TR_PRODUCT_WAREHOUSE_NODE_BI0 FOR PRODUCT_WAREHOUSE_MAP_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_PRODUCT_WAREHOUSE_ID; 
END
^


/* Trigger: TR_PROD_CENI_EL_AI0 */
CREATE TRIGGER TR_PROD_CENI_EL_AI0 FOR PROD_CENI_EL
ACTIVE AFTER INSERT POSITION 0
AS 
DECLARE VARIABLE L_KLI_ID INTEGER; 
DECLARE VARIABLE L_USER_ID INTEGER; 
DECLARE VARIABLE L_IP INTEGER; 
BEGIN 
    if (NEW.CENA_VALUTA = 0) THEN UPDATE PROD_CENI_EL SET PROD_CENI_EL.CENA_VALUTA = NULL WHERE PROD_CENI_EL.ID = NEW.ID; 
 
    IF ((NEW.BONUS_TOCHKI IS NULL) or (NEW.BONUS_TOCHKI = 0))  THEN 
        EXIT; 
 
    SELECT 
        OPR.KLI_ID 
    FROM 
        OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID AND OUT_EL.ID = NEW.OUT_EL_ID 
    INTO 
        :L_KLI_ID; 
 
    IF (L_KLI_ID IS NULL) THEN 
        EXIT; 
 
    UPDATE KLI SET 
    BONUS_TOCHKI = BONUS_TOCHKI + NEW.BONUS_TOCHKI 
    WHERE KLI.ID = :L_KLI_ID; 
 
    SELECT 
      OPR.USER_ID, 
      OPR.IP 
    FROM 
      OPR 
      INNER JOIN OUT_EL ON OUT_EL.OPR_ID = OPR.ID 
      INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = OUT_EL.ID 
    WHERE 
      PROD_CENI_EL.ID = NEW.ID 
    INTO 
      :L_USER_ID, :L_IP; 
 
    INSERT INTO CFG_LOG (USER_ID, IP, TABLE_CODE, OBJ_ID, OPR_TIP) 
    VALUES (:L_USER_ID, :L_IP, 3, :L_KLI_ID, 'E'); 
END
^


/* Trigger: TR_PROD_CENI_EL_AI1 */
CREATE TRIGGER TR_PROD_CENI_EL_AI1 FOR PROD_CENI_EL
ACTIVE AFTER INSERT POSITION 1
AS 
DECLARE VARIABLE L_KOL TYPE OF DOM_KOL; 
DECLARE VARIABLE L_PRICE TYPE OF DOM_CENA; 
DECLARE VARIABLE L_SIMPLE_ID TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SKLAD_ID TYPE OF DOM_SMAL_INT; 
BEGIN 
    --ЩЕ ПРОВЕРЯВА ДАЛИ OUT_EL-A Е НА НУЛЕВА ЦЕНА И АКО Е НА 0.00 И НЕ Е ОТ КОНФИГУРИРАН БОНУС, А Е ПРОДАДЕН НА 0.00 
    --ОТ БОНУСИТЕ ЗА РАЗДАВАНЕ ЩЕ ДОБАВЯ ИНФОРМАЦИЯТА КЪМ ТАБЛИЦАТА С БОНУСТЕ. 
    --ПРАВЯ ТРИГЕРА В ТАЗИ ТАБЛИЦА, ЗАЩОТО В OUT_EL НЕ Е ЯСНО ДАЛИ Е БОНУС ИЛИ НЕ, КОГАТО СЕ ПРОДАДЕ НА 0.00 
    --ПОНЕЖЕ ТАЗИ ИНФОРМАЦИЯ СЕ ДОБАВЯ КЪМ ТАЗИ ТАБЛИЦА СЛЕД ЗАПИСА В OUT-EL 
 
    L_KOL = NULL; 
 
    SELECT 
        OUT_EL.KOL , 
        OUT_EL.SIMPLE_ID, 
        OPR.SKLAD_ID 
    FROM 
        OUT_EL INNER JOIN OPR ON OPR.ID = OUT_EL.OPR_ID 
        INNER JOIN SIMPLE ON SIMPLE.ID = OUT_EL.SIMPLE_ID 
    WHERE 
        OUT_EL.ID = NEW.OUT_EL_ID 
        AND ROUND(OUT_EL.SUMA,2) = 0.00 
        AND NEW.BONUS_ID IS NULL 
        AND OPR.OPR_TIP IN (2,34) 
        AND SIMPLE.USLUGA = '0' 
    INTO 
        :L_KOL, :L_SIMPLE_ID, :L_SKLAD_ID; 
 
    IF (L_KOL IS NULL) THEN 
        EXIT; 
 
    SELECT 
        COALESCE(NAL.LAST_CENA, 0.00) 
    FROM 
        NAL 
    WHERE 
        NAL.SKLAD_ID = :L_SKLAD_ID 
        AND NAL.SIMPLE_ID = :L_SIMPLE_ID 
    INTO 
        :L_PRICE; 
 
    UPDATE OR INSERT INTO BONUSI_ZA_RAZCHET(OUT_EL_ID,SUMA, KOL) 
    VALUES (NEW.OUT_EL_ID, ROUND(:L_KOL * :L_PRICE,2), :L_KOL) 
    MATCHING(OUT_EL_ID); 
END
^


/* Trigger: TR_PROD_CENI_EL_BI0 */
CREATE TRIGGER TR_PROD_CENI_EL_BI0 FOR PROD_CENI_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_PROD_CENI_EL_ID,1); 
 
    IF (NEW.VAT_PERCENT IS NULL) THEN 
        NEW.VAT_PERCENT = COALESCE((SELECT SIMPLE.DDS FROM SIMPLE INNER JOIN OUT_EL ON OUT_EL.SIMPLE_ID = SIMPLE.ID AND OUT_EL.ID = NEW.OUT_EL_ID), 20); 
 
    IF (NEW.VAT_GROUP IS NULL) THEN 
        NEW.VAT_GROUP = COALESCE((SELECT SIMPLE.VAT_GROUP FROM SIMPLE INNER JOIN OUT_EL ON OUT_EL.SIMPLE_ID = SIMPLE.ID AND OUT_EL.ID = NEW.OUT_EL_ID), 2); 
END
^


/* Trigger: TR_PROD_NODE_BI */
CREATE TRIGGER TR_PROD_NODE_BI FOR PROD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_PROD_NODE_ID,1);
END
^


/* Trigger: TR_PROFORMA_TO_FAK_BI0 */
CREATE TRIGGER TR_PROFORMA_TO_FAK_BI0 FOR PROFORMA_TO_FAK
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_PROFORMA_TO_FAK_ID,1); 
END
^


/* Trigger: TR_PROP_NODE_BI0 */
CREATE TRIGGER TR_PROP_NODE_BI0 FOR PROP_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_PROP_NODE_ID,1); 
END
^


/* Trigger: TR_PR_REQ_EL_PRICE_COEF_BI0 */
CREATE TRIGGER TR_PR_REQ_EL_PRICE_COEF_BI0 FOR PR_REQ_EL_PRICE_COEFICIENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_PR_REQ_EL_PRICE_COEF_ID; 
END
^


/* Trigger: TR_RAZPAD_BI */
CREATE TRIGGER TR_RAZPAD_BI FOR RAZPAD
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_RAZPAD_ID,1);
END
^


/* Trigger: TR_RAZPAD_BI0 */
CREATE TRIGGER TR_RAZPAD_BI0 FOR RAZPAD
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_RAZPAD_ID, 1); 
 
    NEW.R_TYPE = COALESCE(NEW.R_TYPE, 0); 
END
^


/* Trigger: TR_RDB$PARTIDA_NAL_AU0 */
CREATE TRIGGER TR_RDB$PARTIDA_NAL_AU0 FOR RDB$PARTIDA_NAL
ACTIVE AFTER UPDATE POSITION 0
AS
BEGIN
  IF (ROUND5(NEW.KOL_NAL) < 0.00001) THEN
    DELETE FROM RDB$PARTIDA_NAL WHERE RDB$PARTIDA_NAL.ID = NEW.ID;
END
^


/* Trigger: TR_RDB$PARTIDA_NAL_BI */
CREATE TRIGGER TR_RDB$PARTIDA_NAL_BI FOR RDB$PARTIDA_NAL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_RDB$PARTIDA_NAL_ID,1);
END
^


/* Trigger: TR_REAL_IZP_FAKT_IZP_NODE_BI0 */
CREATE TRIGGER TR_REAL_IZP_FAKT_IZP_NODE_BI0 FOR REAL_IZP_FAKT_IZP_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_REAL_IZP_FAKT_IZP_NODE_ID,1);
END
^


/* Trigger: TR_RETURN_DOST_KOL_BI0 */
CREATE TRIGGER TR_RETURN_DOST_KOL_BI0 FOR RETURN_DOST_KOL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = NEXT VALUE FOR GEN_RETURN_DOST_KOL_ID;
END
^


/* Trigger: TR_RET_DOST_KI_DOST_NODE_BI0 */
CREATE TRIGGER TR_RET_DOST_KI_DOST_NODE_BI0 FOR RET_DOST_KI_DOST_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_RET_DOST_KI_DOST_NODE_ID,1); 
END
^


/* Trigger: TR_RET_DOST_MOVE_BI0 */
CREATE TRIGGER TR_RET_DOST_MOVE_BI0 FOR RET_DOST_MOVE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = NEXT VALUE FOR GEN_RET_DOST_MOVE_NODE_ID;
END
^


/* Trigger: TR_RET_STOKA_DOST_BI */
CREATE TRIGGER TR_RET_STOKA_DOST_BI FOR RET_STOKA_DOST
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_RET_STOKA_DOST_ID,1);
END
^


/* Trigger: TR_RET_STOKA_DOST_BIU10 */
CREATE TRIGGER TR_RET_STOKA_DOST_BIU10 FOR RET_STOKA_DOST
ACTIVE AFTER INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_VAT_PERCENT DOUBLE PRECISION; 
BEGIN 
    IF (INSERTING) THEN BEGIN 
        IF (NEW.PAY_TIP = 1) THEN BEGIN 
            FOR SELECT 
              SUM(OUT_EL.SUMA), 
              IN_EL.VAT_PERCENT 
            FROM 
              OUT_EL 
              INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID 
              INNER JOIN IN_EL ON IN_EL.ID = OPR_RAZPAD_NODE.IN_EL_ID 
              INNER JOIN RET_STOKA_DOST ON RET_STOKA_DOST.OPR_ID = OUT_EL.OPR_ID 
            WHERE 
              RET_STOKA_DOST.OPR_ID = NEW.OPR_ID 
            GROUP BY 2 
            INTO 
              :L_SUMA, :L_VAT_PERCENT 
            DO BEGIN 
              INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
              VALUES (NEW.OPR_ID, :L_SUMA, :L_SUMA, :L_VAT_PERCENT); 
            END 
        END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        IF ((OLD.PAY_TIP IN (0,2)) AND (NEW.PAY_TIP = 1)) THEN BEGIN 
            /*ДОБАВЯМЕ НОВ ЗАПИС, ЗА ДА СЕ КАЖЕ, ЧЕ ИМА ЗА ПЛАЩАНЕ*/ 
            FOR SELECT 
              SUM(OUT_EL.SUMA), 
              IN_EL.VAT_PERCENT 
            FROM 
              OUT_EL 
              INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID 
              INNER JOIN IN_EL ON IN_EL.ID = OPR_RAZPAD_NODE.IN_EL_ID 
              INNER JOIN RET_STOKA_DOST ON RET_STOKA_DOST.OPR_ID = OUT_EL.OPR_ID 
            WHERE 
              RET_STOKA_DOST.OPR_ID = NEW.OPR_ID 
            GROUP BY 2 
            INTO 
              :L_SUMA, :L_VAT_PERCENT 
            DO BEGIN 
              INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
              VALUES (OLD.OPR_ID, :L_SUMA, :L_SUMA, :L_VAT_PERCENT); 
            END 
        END 
        ELSE IF ((OLD.PAY_TIP IN (1,3)) AND (NEW.PAY_TIP IN (0,2))) THEN BEGIN 
            /*СМЕНЯ СИ СТАТУСА НА ПЛАТЕНО ВЕДНАГА - РАЗКАЧАМЕ ВРЪЗКИТЕ С ПЛАЩАНИЯ, НО ПЪРВО НАМАЛЯМ ИЗПОЛЗВАНАТА СУМА 
            НА ОПЕРАЦИЙТЕ СВЪРЗАНИ С ТАЗИ*/ 
            DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
        END 
    END 
END
^


/* Trigger: TR_RET_STOKA_DOST_KI_AIU10 */
CREATE TRIGGER TR_RET_STOKA_DOST_KI_AIU10 FOR RET_STOKA_DOST_KI
ACTIVE AFTER INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_VAT_PERCENT DOUBLE PRECISION; 
DECLARE VARIABLE L_DDS_SUMA DOUBLE PRECISION; 
BEGIN 
    IF (INSERTING) THEN BEGIN 
        IF (NEW.PAY_TIP = 1) THEN BEGIN 
            FOR SELECT 
              SUM(OUT_EL.SUMA), 
              COALESCE(IN_EL.VAT_PERCENT, 20.0) 
            FROM 
              OUT_EL 
              INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID 
              INNER JOIN IN_EL ON IN_EL.ID = OPR_RAZPAD_NODE.IN_EL_ID 
              INNER JOIN KI_DOST_NODE ON KI_DOST_NODE.SUB_KI_OPR_ID = OUT_EL.OPR_ID 
            WHERE 
              KI_DOST_NODE.KI_OPR_ID = NEW.OPR_ID 
            GROUP BY 2 
            INTO 
              :L_SUMA, :L_VAT_PERCENT 
            DO BEGIN 
              L_DDS_SUMA = 0.00; 
              IF ((SELECT FIRST 1 LOG.TIP_CENI FROM LOG_CENI_DDS LOG WHERE LOG.TIP_DDS = 0 AND LOG.OPR_ID < NEW.OPR_ID ORDER BY LOG.OPR_ID DESC, LOG.ID DESC) = 0) THEN 
                L_DDS_SUMA = ROUND(L_SUMA * L_VAT_PERCENT / 100, 2); 
 
              L_SUMA = L_SUMA + L_DDS_SUMA; 
 
              INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
              VALUES (NEW.OPR_ID, :L_SUMA, :L_SUMA, :L_VAT_PERCENT); 
            END 
        END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        IF ((OLD.PAY_TIP IN (0,2)) AND (NEW.PAY_TIP = 1)) THEN BEGIN 
            /*ДОБАВЯМЕ НОВ ЗАПИС, ЗА ДА СЕ КАЖЕ, ЧЕ ИМА ЗА ПЛАЩАНЕ*/ 
 
            FOR SELECT 
              SUM(OUT_EL.SUMA), 
              COALESCE(IN_EL.VAT_PERCENT, 20) 
            FROM 
              OUT_EL 
              INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.OUT_EL_ID = OUT_EL.ID 
              INNER JOIN IN_EL ON IN_EL.ID = OPR_RAZPAD_NODE.IN_EL_ID 
              INNER JOIN KI_DOST_NODE ON KI_DOST_NODE.SUB_KI_OPR_ID = OUT_EL.OPR_ID 
            WHERE 
              KI_DOST_NODE.KI_OPR_ID = NEW.OPR_ID 
            GROUP BY 2 
            INTO 
              :L_SUMA, :L_VAT_PERCENT 
            DO BEGIN 
              L_DDS_SUMA = 0.00; 
              IF ((SELECT FIRST 1 LOG.TIP_CENI FROM LOG_CENI_DDS LOG WHERE LOG.TIP_DDS = 0 AND LOG.OPR_ID < NEW.OPR_ID ORDER BY LOG.OPR_ID DESC, LOG.ID DESC) = 0) THEN 
                L_DDS_SUMA = ROUND(L_SUMA * L_VAT_PERCENT / 100, 2); 
 
              L_SUMA = L_SUMA + L_DDS_SUMA; 
 
              INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
              VALUES (OLD.OPR_ID, :L_SUMA, :L_SUMA, :L_VAT_PERCENT); 
            END 
 
        END 
        ELSE IF ((OLD.PAY_TIP IN (1,3)) AND (NEW.PAY_TIP IN (0,2))) THEN BEGIN 
            /*СМЕНЯ СИ СТАТУСА НА ПЛАТЕНО ВЕДНАГА - РАЗКАЧАМЕ ВРЪЗКИТЕ С ПЛАЩАНИЯ, НО ПЪРВО НАМАЛЯМ ИЗПОЛЗВАНАТА СУМА 
            НА ОПЕРАЦИЙТЕ СВЪРЗАНИ С ТАЗИ*/ 
 
            DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
        END 
    END 
END
^


/* Trigger: TR_RET_STOKA_DOST_KI_BI0 */
CREATE TRIGGER TR_RET_STOKA_DOST_KI_BI0 FOR RET_STOKA_DOST_KI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_RET_STOKA_DOST_KI_ID,1); 
END
^


/* Trigger: TR_RET_STOKA_PROD_BI */
CREATE TRIGGER TR_RET_STOKA_PROD_BI FOR RET_STOKA_PROD
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_RET_STOKA_PROD_ID,1);
END
^


/* Trigger: TR_RET_STOKA_PROD_BIU10 */
CREATE TRIGGER TR_RET_STOKA_PROD_BIU10 FOR RET_STOKA_PROD
ACTIVE BEFORE INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_OPR_TIP TYPE OF DOM_KEY; 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
BEGIN 
    SELECT 
        OPR.OPR_TIP 
    FROM 
        OPR 
    WHERE 
        OPR.ID = NEW.OPR_ID 
    INTO 
        :L_OPR_TIP; 
 
    IF (L_OPR_TIP = 41) THEN 
        EXIT; 
 
    SELECT 
      SUM(OPR_RAZPAD_NODE.SUMA_SR) 
    FROM 
      IN_EL 
      INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
    WHERE 
      IN_EL.OPR_ID = NEW.OPR_ID 
    INTO 
        :L_SUMA; 
 
    IF (INSERTING) THEN BEGIN 
        IF (NEW.PAY_TIP = 1) THEN BEGIN 
          IF (L_SUMA IS NULL) THEN BEGIN 
            SELECT 
              OPR.SUMA 
            FROM 
              OPR 
            WHERE 
              ID = NEW.OPR_ID 
            INTO 
              :L_SUMA; 
 
            INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST) 
            VALUES (NEW.OPR_ID,:L_SUMA,:L_SUMA); 
          END 
          ELSE BEGIN 
            INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
            SELECT 
              IN_EL.OPR_ID, 
              SUM(OPR_RAZPAD_NODE.SUMA_SR), 
              SUM(OPR_RAZPAD_NODE.SUMA_SR), 
              IN_EL.VAT_PERCENT 
            FROM 
              IN_EL 
              INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
            WHERE 
              IN_EL.OPR_ID = NEW.OPR_ID 
            GROUP BY 1, 4; 
          END 
        END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        IF ((OLD.PAY_TIP IN (0,2)) AND (NEW.PAY_TIP = 1)) THEN BEGIN 
        /*ДОБАВЯМЕ НОВ ЗАПИС, ЗА ДА СЕ КАЖЕ, ЧЕ ИМА ЗА ПЛАЩАНЕ*/ 
          IF (L_SUMA IS NULL) THEN BEGIN 
            SELECT 
              OPR.SUMA 
            FROM 
             OPR 
            WHERE 
              ID = NEW.OPR_ID 
            INTO 
              :L_SUMA; 
 
              INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST) 
              VALUES (OLD.OPR_ID,:L_SUMA,:L_SUMA); 
          END 
          ELSE BEGIN 
            INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
            SELECT 
              IN_EL.OPR_ID, 
              SUM(OPR_RAZPAD_NODE.SUMA_SR), 
              SUM(OPR_RAZPAD_NODE.SUMA_SR), 
              IN_EL.VAT_PERCENT 
            FROM 
              IN_EL 
              INNER JOIN OPR_RAZPAD_NODE ON OPR_RAZPAD_NODE.IN_EL_ID = IN_EL.ID 
            WHERE 
              IN_EL.OPR_ID = NEW.OPR_ID 
            GROUP BY 1, 4; 
          END 
        END 
        ELSE IF ((OLD.PAY_TIP IN (1,3)) AND (NEW.PAY_TIP IN (0,2))) THEN BEGIN 
            /*СМЕНЯ СИ СТАТУСА НА ПЛАТЕНО ВЕДНАГА - РАЗКАЧАМЕ ВРЪЗКИТЕ С ПЛАЩАНИЯ, НО ПЪРВО НАМАЛЯМ ИЗПОЛЗВАНАТА СУМА 
            НА ОПЕРАЦИЙТЕ СВЪРЗАНИ С ТАЗИ*/ 
 
            DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
        END 
    END 
END
^


/* Trigger: TR_RET_STOKA_PROD_KI_BIU10 */
CREATE TRIGGER TR_RET_STOKA_PROD_KI_BIU10 FOR RET_STOKA_PROD_KI
ACTIVE BEFORE INSERT OR UPDATE POSITION 10
AS 
DECLARE VARIABLE L_SUMA DOUBLE PRECISION; 
DECLARE VARIABLE L_OPR_NODE_ID INTEGER; 
DECLARE VARIABLE L_NODE_ID INTEGER; 
BEGIN 
    SELECT 
      SUM(KI_PROD_SUMA_EL.SUMA) 
    FROM 
      KI_PROD_SUMA_EL 
    WHERE 
      KI_PROD_SUMA_EL.OPR_ID = NEW.OPR_ID 
    INTO 
      :L_SUMA; 
 
    IF (INSERTING) THEN BEGIN 
        IF (NEW.PAY_TIP = 1) THEN BEGIN 
          IF (L_SUMA IS NULL) THEN BEGIN 
            SELECT 
                OPR.SUMA 
            FROM 
                OPR 
            WHERE 
                ID = NEW.OPR_ID 
            INTO 
                :L_SUMA; 
 
            INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST, VAT_PERCENT) 
            VALUES (NEW.OPR_ID,:L_SUMA,:L_SUMA, NEW.VAT_PERCENT); 
          END 
          ELSE BEGIN 
            INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
            SELECT 
              KI_PROD_SUMA_EL.OPR_ID, 
              SUM(KI_PROD_SUMA_EL.SUMA), 
              SUM(KI_PROD_SUMA_EL.SUMA), 
              PROD_CENI_EL.VAT_PERCENT 
            FROM 
              KI_PROD_SUMA_EL 
              INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = KI_PROD_SUMA_EL.OUT_EL_ID 
            WHERE 
              KI_PROD_SUMA_EL.OPR_ID = NEW.OPR_ID 
            GROUP BY 1, 4; 
          END 
        END 
    END 
    ELSE IF (UPDATING) THEN BEGIN 
        IF ((OLD.PAY_TIP IN (0,2)) AND (NEW.PAY_TIP = 1)) THEN BEGIN 
        /*ДОБАВЯМЕ НОВ ЗАПИС, ЗА ДА СЕ КАЖЕ, ЧЕ ИМА ЗА ПЛАЩАНЕ*/ 
          IF (L_SUMA IS NULL) THEN BEGIN 
            SELECT 
                OPR.SUMA 
            FROM 
                OPR 
            WHERE 
                ID = NEW.OPR_ID 
            INTO 
                :L_SUMA; 
 
            INSERT INTO SUMI (OPR_ID,SUMA,SUMA_OST, VAT_PERCENT) 
            VALUES (OLD.OPR_ID,:L_SUMA,:L_SUMA, NEW.VAT_PERCENT); 
          END 
          ELSE BEGIN 
            INSERT INTO SUMI (OPR_ID, SUMA, SUMA_OST, VAT_PERCENT) 
            SELECT 
              KI_PROD_SUMA_EL.OPR_ID, 
              SUM(KI_PROD_SUMA_EL.SUMA), 
              SUM(KI_PROD_SUMA_EL.SUMA), 
              PROD_CENI_EL.VAT_PERCENT 
            FROM 
              KI_PROD_SUMA_EL 
              INNER JOIN PROD_CENI_EL ON PROD_CENI_EL.OUT_EL_ID = KI_PROD_SUMA_EL.OUT_EL_ID 
            WHERE 
              KI_PROD_SUMA_EL.OPR_ID = NEW.OPR_ID 
            GROUP BY 1, 4; 
          END 
        END 
        ELSE IF ((OLD.PAY_TIP IN (1,3)) AND (NEW.PAY_TIP IN (0,2))) THEN BEGIN 
            /*СМЕНЯ СИ СТАТУСА НА ПЛАТЕНО ВЕДНАГА - РАЗКАЧАМЕ ВРЪЗКИТЕ С ПЛАЩАНИЯ, НО ПЪРВО НАМАЛЯМ ИЗПОЛЗВАНАТА СУМА 
            НА ОПЕРАЦИЙТЕ СВЪРЗАНИ С ТАЗИ*/ 
 
            DELETE FROM SUMI WHERE OPR_ID = NEW.OPR_ID; 
        END 
    END 
END
^


/* Trigger: TR_SELEKCIQ_BI */
CREATE TRIGGER TR_SELEKCIQ_BI FOR SELEKCIQ
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SELEKCIQ_ID,1);
  IF (NEW.DATETIME IS NULL) THEN
    NEW.DATETIME = CURRENT_TIMESTAMP;
END
^


/* Trigger: TR_SELEKCIQ_KLI_EL_BI */
CREATE TRIGGER TR_SELEKCIQ_KLI_EL_BI FOR SELEKCIQ_KLI_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
  NEW.ID = GEN_ID(GEN_SELEKCIQ_KLI_EL_ID,1);
END
^


/* Trigger: TR_SELEKCIQ_SIM_EL_BI */
CREATE TRIGGER TR_SELEKCIQ_SIM_EL_BI FOR SELEKCIQ_SIM_EL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_SELEKCIQ_SIM_EL_ID,1);
END
^


/* Trigger: TR_SERIAL_NUM_BI */
CREATE TRIGGER TR_SERIAL_NUM_BI FOR SERIAL_NUM
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_SERIAL_NUM_ID,1); 
 
    SELECT FIRST 1 
        IN_EL.SIMPLE_ID 
    FROM 
        PARTIDA_NAL PN INNER JOIN IN_EL ON IN_EL.ID = PN.IN_EL_ID 
    WHERE 
        PN.ELEMENT_ID = NEW.PARTIDA_EL_ID 
    INTO 
        NEW.SIMPLE_ID; 
END
^


/* Trigger: TR_SIMPLE_AU */
CREATE TRIGGER TR_SIMPLE_AU FOR SIMPLE
ACTIVE AFTER UPDATE POSITION 0
AS 
DECLARE VARIABLE L_SIM_ID INTEGER; 
BEGIN 
    IF (NEW.DEF_SEL_ID IS NOT NULL)  THEN BEGIN 
        SELECT 
            SELEKCIQ_SIM_EL.SIMPLE_ID 
        FROM 
            SIMPLE INNER JOIN SELEKCIQ_SIM_EL ON SIMPLE.ID = SELEKCIQ_SIM_EL.SIMPLE_ID 
        WHERE 
            SELEKCIQ_SIM_EL.SELEKCIQ_ID = NEW.DEF_SEL_ID 
            AND SELEKCIQ_SIM_EL.SIMPLE_ID = NEW.ID 
        INTO 
            :L_SIM_ID; 
 
        IF (L_SIM_ID IS NULL) THEN BEGIN 
            INSERT INTO SELEKCIQ_SIM_EL (SIMPLE_ID, SELEKCIQ_ID) VALUES(NEW.ID, NEW.DEF_SEL_ID); 
        END 
    END 
 
    L_SIM_ID = NULL; 
    IF (NEW.DEF_SEL_CALC IS NOT NULL) THEN BEGIN 
        SELECT 
            SELEKCIQ_KALK_EL.SIMPLE_ID 
        FROM 
            SIMPLE INNER JOIN SELEKCIQ_KALK_EL ON SIMPLE.ID = SELEKCIQ_KALK_EL.SIMPLE_ID 
        WHERE 
            SELEKCIQ_KALK_EL.SELEKCIQ_ID = NEW.DEF_SEL_CALC AND 
            SELEKCIQ_KALK_EL.SIMPLE_ID = NEW.ID 
        INTO 
            :L_SIM_ID; 
        IF (L_SIM_ID IS NULL) THEN BEGIN 
            INSERT INTO SELEKCIQ_KALK_EL (SIMPLE_ID, SELEKCIQ_ID) VALUES(NEW.ID, NEW.DEF_SEL_CALC); 
        END 
    END 
END
^


/* Trigger: TR_SIMPLE_BU0 */
CREATE TRIGGER TR_SIMPLE_BU0 FOR SIMPLE
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    IF (((OLD.NAME IS NULL) AND (NEW.NAME IS NOT NULL)) 
    OR ((OLD.NAME IS NOT NULL) AND (NEW.NAME IS NULL)) 
    OR(OLD.NAME <> NEW.NAME)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.NAME_SHORT IS NULL) AND (NEW.NAME_SHORT IS NOT NULL)) 
    OR ((OLD.NAME_SHORT IS NOT NULL) AND (NEW.NAME_SHORT IS NULL)) 
    OR(OLD.NAME_SHORT <> NEW.NAME_SHORT)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.CODE IS NULL) AND (NEW.CODE IS NOT NULL)) 
    OR ((OLD.CODE IS NOT NULL) AND (NEW.CODE IS NULL)) 
    OR(OLD.CODE <> NEW.CODE)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.ME_ID IS NULL) AND (NEW.ME_ID IS NOT NULL)) 
    OR ((OLD.ME_ID IS NOT NULL) AND (NEW.ME_ID IS NULL)) 
    OR(OLD.ME_ID <> NEW.ME_ID)) THEN 
        NEW.FLAG_CHECK = 0; 
   ELSE 
   IF (((OLD.SIMPLE_GROUP_ID IS NULL) AND (NEW.SIMPLE_GROUP_ID IS NOT NULL)) 
   OR ((OLD.SIMPLE_GROUP_ID IS NOT NULL) AND (NEW.SIMPLE_GROUP_ID IS NULL)) 
   OR(OLD.SIMPLE_GROUP_ID <> NEW.SIMPLE_GROUP_ID)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD."ACTIVE" IS NULL) AND (NEW."ACTIVE" IS NOT NULL)) 
    OR ((OLD."ACTIVE" IS NOT NULL) AND (NEW."ACTIVE" IS NULL)) 
    OR(OLD."ACTIVE" <> NEW."ACTIVE")) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.ACTIVE_FAK IS NULL) AND (NEW.ACTIVE_FAK IS NOT NULL)) 
    OR ((OLD.ACTIVE_FAK IS NOT NULL) AND (NEW.ACTIVE_FAK IS NULL)) 
    OR(OLD.ACTIVE_FAK <> NEW.ACTIVE_FAK)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.LOCK_CENA_PROD IS NULL) AND (NEW.LOCK_CENA_PROD IS NOT NULL)) 
    OR ((OLD.LOCK_CENA_PROD IS NOT NULL) AND (NEW.LOCK_CENA_PROD IS NULL)) 
    OR(OLD.LOCK_CENA_PROD <> NEW.LOCK_CENA_PROD)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.CENA_PROD IS NULL) AND (NEW.CENA_PROD IS NOT NULL)) 
    OR ((OLD.CENA_PROD IS NOT NULL) AND (NEW.CENA_PROD IS NULL)) 
    OR(OLD.CENA_PROD <> NEW.CENA_PROD)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.CENA_EDRO IS NULL) AND (NEW.CENA_EDRO IS NOT NULL)) 
    OR ((OLD.CENA_EDRO IS NOT NULL) AND (NEW.CENA_EDRO IS NULL)) 
    OR(OLD.CENA_EDRO <> NEW.CENA_EDRO)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.CENA_OFERTA IS NULL) AND (NEW.CENA_OFERTA IS NOT NULL)) 
    OR ((OLD.CENA_OFERTA IS NOT NULL) AND (NEW.CENA_OFERTA IS NULL)) 
    OR(OLD.CENA_OFERTA <> NEW.CENA_OFERTA)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.CENA_PROD_FAK IS NULL) AND (NEW.CENA_PROD_FAK IS NOT NULL)) 
    OR ((OLD.CENA_PROD_FAK IS NOT NULL) AND (NEW.CENA_PROD_FAK IS NULL)) 
    OR(OLD.CENA_PROD_FAK <> NEW.CENA_PROD_FAK)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.CENA_POCKET IS NULL) AND (NEW.CENA_POCKET IS NOT NULL)) 
    OR ((OLD.CENA_POCKET IS NOT NULL) AND (NEW.CENA_POCKET IS NULL)) 
    OR(OLD.CENA_POCKET <> NEW.CENA_POCKET)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.DDS IS NULL) AND (NEW.DDS IS NOT NULL)) 
    OR ((OLD.DDS IS NOT NULL) AND (NEW.DDS IS NULL)) 
    OR(OLD.DDS <> NEW.DDS)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.KOL_KRI_MIN IS NULL) AND (NEW.KOL_KRI_MIN IS NOT NULL)) 
    OR ((OLD.KOL_KRI_MIN IS NOT NULL) AND (NEW.KOL_KRI_MIN IS NULL)) 
    OR(OLD.KOL_KRI_MIN <> NEW.KOL_KRI_MIN)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.KOL_KRI_MAX IS NULL) AND (NEW.KOL_KRI_MAX IS NOT NULL)) 
    OR ((OLD.KOL_KRI_MAX IS NOT NULL) AND (NEW.KOL_KRI_MAX IS NULL)) 
    OR(OLD.KOL_KRI_MAX <> NEW.KOL_KRI_MAX)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.DEFAULT_RAZ_ID IS NULL) AND (NEW.DEFAULT_RAZ_ID IS NOT NULL)) 
    OR ((OLD.DEFAULT_RAZ_ID IS NOT NULL) AND (NEW.DEFAULT_RAZ_ID IS NULL)) 
    OR(OLD.DEFAULT_RAZ_ID <> NEW.DEFAULT_RAZ_ID)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.RSN IS NULL) AND (NEW.RSN IS NOT NULL)) 
    OR ((OLD.RSN IS NOT NULL) AND (NEW.RSN IS NULL)) 
    OR(OLD.RSN <> NEW.RSN)) THEN 
        NEW.FLAG_CHECK = 0; 
    ELSE 
    IF (((OLD.USLUGA IS NULL) AND (NEW.USLUGA IS NOT NULL)) 
    OR ((OLD.USLUGA IS NOT NULL) AND (NEW.USLUGA IS NULL)) 
    OR(OLD.USLUGA <> NEW.USLUGA)) THEN 
        NEW.FLAG_CHECK = 0; 
 
    IF (NEW.RAZ_TIP_ID <> OLD.RAZ_TIP_ID) THEN 
      DELETE FROM DEF_RAZ_SIMPLE WHERE DEF_RAZ_SIMPLE.SIMPLE_ID = NEW.ID; 
END
^


/* Trigger: TR_SIMPLE_MONTAGE_BI */
CREATE TRIGGER TR_SIMPLE_MONTAGE_BI FOR SIMPLE_MONTAGE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_SIMPLE_MONTAGE_ID, 1); 
END
^


/* Trigger: TR_SIMPLE_PROP_BI0 */
CREATE TRIGGER TR_SIMPLE_PROP_BI0 FOR SIMPLE_PROP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_SIMPLE_PROP_ID,1); 
END
^


/* Trigger: TR_SIMPLE_PROP_MINOR_BI0 */
CREATE TRIGGER TR_SIMPLE_PROP_MINOR_BI0 FOR SIMPLE_PROP_MINOR
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_SIMPLE_PROP_MINOR_ID,1); 
END
^


/* Trigger: TR_SIMPLE_PROP_NODE_BI0 */
CREATE TRIGGER TR_SIMPLE_PROP_NODE_BI0 FOR SIMPLE_PROP_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_SIMPLE_PROP_NODE_ID,1); 
END
^


/* Trigger: TR_SIMPLE_TABLE_PRICES_AD0 */
CREATE TRIGGER TR_SIMPLE_TABLE_PRICES_AD0 FOR SIMPLE_TABLE_PRICES
ACTIVE AFTER DELETE POSITION 0
AS 
DECLARE VARIABLE L_COUNT DOM_INT; 
BEGIN 
    SELECT 
        COUNT(SIMPLE_TABLE_PRICES.ID) 
    FROM 
        SIMPLE_TABLE_PRICES 
    WHERE 
        SIMPLE_ID = OLD.SIMPLE_ID 
    INTO 
        :L_COUNT; 
 
    IF(COALESCE(L_COUNT, 0) = 0) THEN 
        UPDATE SIMPLE SET 
            SIMPLE.FLAG_TBL_PRICE = 0 
       WHERE 
            SIMPLE.ID = OLD.SIMPLE_ID; 
END
^


/* Trigger: TR_SIMPLE_TABLE_PRICES_AI0 */
CREATE TRIGGER TR_SIMPLE_TABLE_PRICES_AI0 FOR SIMPLE_TABLE_PRICES
ACTIVE AFTER INSERT POSITION 0
AS 
BEGIN 
    UPDATE SIMPLE SET 
        SIMPLE.FLAG_TBL_PRICE = 1 
    WHERE 
        SIMPLE.ID = NEW.SIMPLE_ID 
        AND COALESCE(SIMPLE.FLAG_TBL_PRICE, 0) = 0; 
END
^


/* Trigger: TR_SIMPLE_TABLE_PRICES_BI0 */
CREATE TRIGGER TR_SIMPLE_TABLE_PRICES_BI0 FOR SIMPLE_TABLE_PRICES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_SIMPLE_TABLE_PRICES_ID; 
END
^


/* Trigger: TR_STORE_OBJ_BI0 */
CREATE TRIGGER TR_STORE_OBJ_BI0 FOR STORE_OBJ
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_STORE_OBJ_ID; 
END
^


/* Trigger: TR_STORE_OTC_BI0 */
CREATE TRIGGER TR_STORE_OTC_BI0 FOR STORE_OTC
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_STORE_OTC_ID; 
END
^


/* Trigger: TR_STORNO_BI0 */
CREATE TRIGGER TR_STORNO_BI0 FOR STORNO
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_STORNO_ID; 
END
^


/* Trigger: TR_SUMI_BI0 */
CREATE TRIGGER TR_SUMI_BI0 FOR SUMI
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_SUMI_ID,1); 
END
^


/* Trigger: TR_SYSTEM2_BI0 */
CREATE TRIGGER TR_SYSTEM2_BI0 FOR SYSTEM2
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_SYSTEM2_ID; 
 
    NEW.VAR_NAME = UPPER(NEW.VAR_NAME); 
END
^


/* Trigger: TR_SYSTEM2_BU0 */
CREATE TRIGGER TR_SYSTEM2_BU0 FOR SYSTEM2
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    NEW.VAR_NAME = UPPER(NEW.VAR_NAME); 
END
^


/* Trigger: TR_TABLE_PRICES_DISCOUNTS_BI0 */
CREATE TRIGGER TR_TABLE_PRICES_DISCOUNTS_BI0 FOR TABLE_PRICES_DISCOUNTS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_TABLE_PRICES_DISCOUNTS_ID; 
END
^


/* Trigger: TR_TABLE_PRICE_COEFICIENT_BI0 */
CREATE TRIGGER TR_TABLE_PRICE_COEFICIENT_BI0 FOR TABLE_PRICE_COEFICIENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_TABLE_PRICE_COEFICIENT_ID; 
END
^


/* Trigger: TR_TABLE_PRICE_SIMPLE_NODE_BI0 */
CREATE TRIGGER TR_TABLE_PRICE_SIMPLE_NODE_BI0 FOR TABLE_PRICE_SIMPLE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_TABLE_PRICE_SIMPLE_NODE_ID; 
END
^


/* Trigger: TR_TEMP_IMPORT_NAME_BI0 */
CREATE TRIGGER TR_TEMP_IMPORT_NAME_BI0 FOR TEMP_IMPORT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_TEMP_IMPORT_ID,1); 
END
^


/* Trigger: TR_TMP_ELTRADE_IMPORT_BI0 */
CREATE TRIGGER TR_TMP_ELTRADE_IMPORT_BI0 FOR TMP_ELTRADE_IMPORT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_TMP_ELTRADE_IMPORT_ID; 
END
^


/* Trigger: TR_TS_OTC_FILES_BI0 */
CREATE TRIGGER TR_TS_OTC_FILES_BI0 FOR TS_OTC_FILES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_TS_OTC_FILES_ID; 
 
    IF (NEW.STATUS IS NULL) THEN 
        NEW.STATUS = 0; 
 
    SELECT 
        CURRENT_TIMESTAMP, 
        MON$ATTACHMENTS.MON$REMOTE_ADDRESS, 
        MON$ATTACHMENTS.MON$REMOTE_PROCESS 
    FROM 
        MON$ATTACHMENTS INNER JOIN MON$TRANSACTIONS ON MON$ATTACHMENTS.MON$ATTACHMENT_ID = MON$TRANSACTIONS.MON$ATTACHMENT_ID 
    WHERE 
        MON$TRANSACTIONS.MON$TRANSACTION_ID = CURRENT_TRANSACTION 
    INTO 
        NEW.DT_IMPORT,NEW.IP_IMPORT,NEW.APP_IMPORT; 
 
END
^


/* Trigger: TR_UNFINISHED_SALES_BI0 */
CREATE TRIGGER TR_UNFINISHED_SALES_BI0 FOR UNFINISHED_SALES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_UNFINISHED_SALES_ID; 
 
    NEW.MAX_KOL = NEW.KOL; 
 
    NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: TR_UNFINISHED_SALES_BU0 */
CREATE TRIGGER TR_UNFINISHED_SALES_BU0 FOR UNFINISHED_SALES
ACTIVE BEFORE UPDATE POSITION 0
AS 
BEGIN 
    NEW.MAX_KOL = MAXVALUE(OLD.MAX_KOL, NEW.KOL); 
 
    NEW.DT = CURRENT_TIMESTAMP; 
END
^


/* Trigger: TR_UNP_BI0 */
CREATE TRIGGER TR_UNP_BI0 FOR UNP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_UNP_ID; 
END
^


/* Trigger: TR_USER_KASA_NODE_BI */
CREATE TRIGGER TR_USER_KASA_NODE_BI FOR USER_KASA_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_USER_KASA_NODE_ID,1);
END
^


/* Trigger: TR_USER_ROLES_EL_BI0 */
CREATE TRIGGER TR_USER_ROLES_EL_BI0 FOR USER_ROLES_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_USER_ROLES_EL_ID; 
END
^


/* Trigger: TR_USER_SCHEMAS_BI0 */
CREATE TRIGGER TR_USER_SCHEMAS_BI0 FOR USER_SCHEMAS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_USER_SCHEMAS_ID; 
END
^


/* Trigger: TR_USER_SKLAD_NAL_NODE_BI0 */
CREATE TRIGGER TR_USER_SKLAD_NAL_NODE_BI0 FOR USER_SKLAD_NAL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_USER_SKLAD_NAL_NODE_ID,1); 
END
^


/* Trigger: TR_VISIT_BI */
CREATE TRIGGER TR_VISIT_BI FOR VISIT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_VISIT_ID, 1); 
END
^


/* Trigger: TR_VISIT_EL_BI */
CREATE TRIGGER TR_VISIT_EL_BI FOR VISIT_EL
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_VISIT_EL_ID,1); 
END
^


/* Trigger: TR_VISIT_TYPE_BI */
CREATE TRIGGER TR_VISIT_TYPE_BI FOR VISIT_TYPE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = GEN_ID(GEN_VISIT_TYPE_ID, 1); 
END
^


/* Trigger: TR_WAREHOUSE_BASE_MAP_BI0 */
CREATE TRIGGER TR_WAREHOUSE_BASE_MAP_BI0 FOR WAREHOUSE_BASE_MAP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_WAREHOUSE_BASE_MAP_ID; 
END
^


/* Trigger: TR_WHOKNA_CONNECTION_BI0 */
CREATE TRIGGER TR_WHOKNA_CONNECTION_BI0 FOR WHOKNA_CONNECTION
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
    IF (NEW.ID IS NULL) THEN 
        NEW.ID = NEXT VALUE FOR GEN_WHOKNA_CONNECTION_ID; 
END
^


/* Trigger: TR_WUERTH_COMMIS_BI */
CREATE TRIGGER TR_WUERTH_COMMIS_BI FOR WUERTH_COMMIS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_WUERTH_COMMIS_ID, 1); 
END
^


/* Trigger: UNR_AGENT_ANALYSES_BI */
CREATE TRIGGER UNR_AGENT_ANALYSES_BI FOR UNR_AGENT_ANALYSES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_AGENT_ANALYSES_ID,1); 
END
^


/* Trigger: UNR_AGENT_BI */
CREATE TRIGGER UNR_AGENT_BI FOR UNR_AGENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_AGENT_ID,1); 
END
^


/* Trigger: UNR_ANALYSES_BI */
CREATE TRIGGER UNR_ANALYSES_BI FOR UNR_ANALYSES
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_ANALYSES_ID, 1);
END
^


/* Trigger: UNR_ANALYSES_BU0 */
CREATE TRIGGER UNR_ANALYSES_BU0 FOR UNR_ANALYSES
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE L_KOEF DOUBLE PRECISION;
BEGIN
  SELECT
    T.KOEF
  FROM
  (
  SELECT
    UNR_ANALYSES.ID,
    COALESCE(UNR_KOEF_NODE.KOEF, IIF(UNR_ANALYSES.AGENT_ID IS NOT NULL, 0.5, NULL)) AS KOEF
  FROM
    UNR_ANALYSES
    LEFT JOIN UNR_AGENT ON UNR_AGENT.ID = NEW.AGENT_ID
    LEFT JOIN UNR_GROUP_SIMPLE ON UNR_GROUP_SIMPLE.SIMPLE_ID = UNR_ANALYSES.SIMPLE_ID
    LEFT JOIN UNR_GROUP ON UNR_GROUP.ID = COALESCE(NEW.GROUP_ID, UNR_GROUP_SIMPLE.GROUP_ID)
    LEFT JOIN UNR_KOEF_NODE ON UNR_KOEF_NODE.AGENT_ID = UNR_AGENT.ID AND COALESCE(UNR_KOEF_NODE.GROUP_ID, 0) = COALESCE(NEW.GROUP_ID, COALESCE(UNR_GROUP.ID, 0))
  ) T
  WHERE
    T.ID = OLD.ID AND
    T.KOEF IS NOT NULL
  INTO
    :L_KOEF;

  IF (L_KOEF IS NOT NULL) THEN
    NEW.KOEF = :L_KOEF;
end
^


/* Trigger: UNR_GROUP_BI */
CREATE TRIGGER UNR_GROUP_BI FOR UNR_GROUP
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_GROUP_ID,1); 
END
^


/* Trigger: UNR_GROUP_SIMPLE_BI */
CREATE TRIGGER UNR_GROUP_SIMPLE_BI FOR UNR_GROUP_SIMPLE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_GROUP_SIMPLE_ID,1); 
END
^


/* Trigger: UNR_KLI_AGENT_2_BI */
CREATE TRIGGER UNR_KLI_AGENT_2_BI FOR UNR_KLI_AGENT_2
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_KLI_AGENT_2_ID,1);
END
^


/* Trigger: UNR_KLI_AGENT_BI */
CREATE TRIGGER UNR_KLI_AGENT_BI FOR UNR_KLI_AGENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_KLI_AGENT_ID,1); 
END
^


/* Trigger: UNR_KOEF_NODE_BI */
CREATE TRIGGER UNR_KOEF_NODE_BI FOR UNR_KOEF_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_UNR_KOEF_NODE_ID,1); 
END
^


/* Trigger: USER_BI */
CREATE TRIGGER USER_BI FOR "USER"
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_USER_ID,1);
END
^


/* Trigger: USER_LOG_AD103 */
CREATE TRIGGER USER_LOG_AD103 FOR "USER"
ACTIVE AFTER DELETE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'ID', 'D', CAST(OLD."ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'NAME', 'D', CAST(OLD."NAME" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'EGN', 'D', CAST(OLD."EGN" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'PASS', 'D', CAST(OLD."PASS" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS', 'D', CAST(OLD."RIGHTS" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'TEL', 'D', CAST(OLD."TEL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'IS_WORKED', 'D', CAST(OLD."IS_WORKED" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'DEF_KASA_ID', 'D', CAST(OLD."DEF_KASA_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS2', 'D', CAST(OLD."RIGHTS2" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'PASS2', 'D', CAST(OLD."PASS2" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'IS_ACTIVE', 'D', CAST(OLD."IS_ACTIVE" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'OBEKT_ID', 'D', CAST(OLD."OBEKT_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'SELLER', 'D', CAST(OLD."SELLER" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'KBD', 'D', CAST(OLD."KBD" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS3', 'D', CAST(OLD."RIGHTS3" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'LIMITEDUSER', 'D', CAST(OLD."LIMITEDUSER" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS4', 'D', CAST(OLD."RIGHTS4" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'USER_RIGHTS_ID', 'D', CAST(OLD."USER_RIGHTS_ID" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'NAME_LAT', 'D', CAST(OLD."NAME_LAT" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'SERV', 'D', CAST(OLD."SERV" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'LANGUAGE', 'D', CAST(OLD."LANGUAGE" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS5', 'D', CAST(OLD."RIGHTS5" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS6', 'D', CAST(OLD."RIGHTS6" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'EMAIL', 'D', CAST(OLD."EMAIL" AS DOM_CHAR_300), null);
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'KASA_H', 'D', CAST(OLD."KASA_H" AS DOM_CHAR_300), null);
 END
^


/* Trigger: USER_LOG_AI103 */
CREATE TRIGGER USER_LOG_AI103 FOR "USER"
ACTIVE AFTER INSERT POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'ID', 'I', null, CAST(NEW."ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'NAME', 'I', null, CAST(NEW."NAME" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'EGN', 'I', null, CAST(NEW."EGN" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'PASS', 'I', null, CAST(NEW."PASS" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'RIGHTS', 'I', null, CAST(NEW."RIGHTS" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'TEL', 'I', null, CAST(NEW."TEL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'IS_WORKED', 'I', null, CAST(NEW."IS_WORKED" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'DEF_KASA_ID', 'I', null, CAST(NEW."DEF_KASA_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'RIGHTS2', 'I', null, CAST(NEW."RIGHTS2" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'PASS2', 'I', null, CAST(NEW."PASS2" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'IS_ACTIVE', 'I', null, CAST(NEW."IS_ACTIVE" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'OBEKT_ID', 'I', null, CAST(NEW."OBEKT_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'SELLER', 'I', null, CAST(NEW."SELLER" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'KBD', 'I', null, CAST(NEW."KBD" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'RIGHTS3', 'I', null, CAST(NEW."RIGHTS3" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'LIMITEDUSER', 'I', null, CAST(NEW."LIMITEDUSER" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'RIGHTS4', 'I', null, CAST(NEW."RIGHTS4" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'USER_RIGHTS_ID', 'I', null, CAST(NEW."USER_RIGHTS_ID" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'NAME_LAT', 'I', null, CAST(NEW."NAME_LAT" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'SERV', 'I', null, CAST(NEW."SERV" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'LANGUAGE', 'I', null, CAST(NEW."LANGUAGE" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'RIGHTS5', 'I', null, CAST(NEW."RIGHTS5" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'RIGHTS6', 'I', null, CAST(NEW."RIGHTS6" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'EMAIL', 'I', null, CAST(NEW."EMAIL" AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', null, 'KASA_H', 'I', null, CAST(NEW."KASA_H" AS DOM_CHAR_300));
 END
^


/* Trigger: USER_LOG_AU103 */
CREATE TRIGGER USER_LOG_AU103 FOR "USER"
ACTIVE AFTER UPDATE POSITION 103
AS begin 
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'ID', 'U', CAST(OLD."ID" AS DOM_CHAR_300), CAST(NEW.ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'NAME', 'U', CAST(OLD."NAME" AS DOM_CHAR_300), CAST(NEW.NAME AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'EGN', 'U', CAST(OLD."EGN" AS DOM_CHAR_300), CAST(NEW.EGN AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'PASS', 'U', CAST(OLD."PASS" AS DOM_CHAR_300), CAST(NEW.PASS AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS', 'U', CAST(OLD."RIGHTS" AS DOM_CHAR_300), CAST(NEW.RIGHTS AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'TEL', 'U', CAST(OLD."TEL" AS DOM_CHAR_300), CAST(NEW.TEL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'IS_WORKED', 'U', CAST(OLD."IS_WORKED" AS DOM_CHAR_300), CAST(NEW.IS_WORKED AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'DEF_KASA_ID', 'U', CAST(OLD."DEF_KASA_ID" AS DOM_CHAR_300), CAST(NEW.DEF_KASA_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS2', 'U', CAST(OLD."RIGHTS2" AS DOM_CHAR_300), CAST(NEW.RIGHTS2 AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'PASS2', 'U', CAST(OLD."PASS2" AS DOM_CHAR_300), CAST(NEW.PASS2 AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'IS_ACTIVE', 'U', CAST(OLD."IS_ACTIVE" AS DOM_CHAR_300), CAST(NEW.IS_ACTIVE AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'OBEKT_ID', 'U', CAST(OLD."OBEKT_ID" AS DOM_CHAR_300), CAST(NEW.OBEKT_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'SELLER', 'U', CAST(OLD."SELLER" AS DOM_CHAR_300), CAST(NEW.SELLER AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'KBD', 'U', CAST(OLD."KBD" AS DOM_CHAR_300), CAST(NEW.KBD AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS3', 'U', CAST(OLD."RIGHTS3" AS DOM_CHAR_300), CAST(NEW.RIGHTS3 AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'LIMITEDUSER', 'U', CAST(OLD."LIMITEDUSER" AS DOM_CHAR_300), CAST(NEW.LIMITEDUSER AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS4', 'U', CAST(OLD."RIGHTS4" AS DOM_CHAR_300), CAST(NEW.RIGHTS4 AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'USER_RIGHTS_ID', 'U', CAST(OLD."USER_RIGHTS_ID" AS DOM_CHAR_300), CAST(NEW.USER_RIGHTS_ID AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'NAME_LAT', 'U', CAST(OLD."NAME_LAT" AS DOM_CHAR_300), CAST(NEW.NAME_LAT AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'SERV', 'U', CAST(OLD."SERV" AS DOM_CHAR_300), CAST(NEW.SERV AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'LANGUAGE', 'U', CAST(OLD."LANGUAGE" AS DOM_CHAR_300), CAST(NEW.LANGUAGE AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS5', 'U', CAST(OLD."RIGHTS5" AS DOM_CHAR_300), CAST(NEW.RIGHTS5 AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'RIGHTS6', 'U', CAST(OLD."RIGHTS6" AS DOM_CHAR_300), CAST(NEW.RIGHTS6 AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'EMAIL', 'U', CAST(OLD."EMAIL" AS DOM_CHAR_300), CAST(NEW.EMAIL AS DOM_CHAR_300));
  EXECUTE PROCEDURE ADD_LOG('USER', OLD.ID, 'KASA_H', 'U', CAST(OLD."KASA_H" AS DOM_CHAR_300), CAST(NEW.KASA_H AS DOM_CHAR_300));
 END
^


/* Trigger: USER_OBEKT_NODE_BI */
CREATE TRIGGER USER_OBEKT_NODE_BI FOR USER_OBEKT_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
  NEW.ID = GEN_ID(GEN_USER_OBEKT_NODE_ID,1); 
END
^


/* Trigger: USER_SEL_NODE_BI */
CREATE TRIGGER USER_SEL_NODE_BI FOR USER_SEL_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_USER_SEL_NODE_ID,1); 
END
^


/* Trigger: USER_SKLAD_NODE_BI */
CREATE TRIGGER USER_SKLAD_NODE_BI FOR USER_SKLAD_NODE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
  NEW.ID = GEN_ID(GEN_USER_SKLAD_NODE_ID,1);
END
^


/* Trigger: VALUTA_BI */
CREATE TRIGGER VALUTA_BI FOR VALUTA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_VALUTA_ID,1);
END
^


/* Trigger: WUERTH_SIMPLE_BI */
CREATE TRIGGER WUERTH_SIMPLE_BI FOR WUERTH_SIMPLE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_WUERTH_SIMPLE_ID,1); 
END
^


/* Trigger: ZAIAVKA_DOSTAVKA_BI */
CREATE TRIGGER ZAIAVKA_DOSTAVKA_BI FOR ZAIAVKA_DOSTAVKA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_ZAIAVKA_DOSTAVKA_ID,1); 
END
^


/* Trigger: ZAIAVKA_DOSTAVKA_NODE_BI */
CREATE TRIGGER ZAIAVKA_DOSTAVKA_NODE_BI FOR ZAIAVKA_DOSTAVKA_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_ZAIAVKA_DOSTAVKA_NODE_ID,1); 
 
  IF (EXISTS 
    (SELECT 
        ZAIAVKA_DOSTAVKA_NODE.ID 
    FROM 
        ZAIAVKA_DOSTAVKA_NODE 
    WHERE 
        ZAIAVKA_DOSTAVKA_NODE.OPR_ID = NEW.OPR_ID 
        AND NOT EXISTS (SELECT OPR_ANUL.ID FROM OPR_ANUL WHERE OPR_ANUL.AN_OPR_ID = ZAIAVKA_DOSTAVKA_NODE.OPR_ID_OB))) THEN 
    EXCEPTION EXC_DUPLICATE_OBOB_ZD; 
END
^


/* Trigger: ZD_DOST_MOVE_NODE_BI */
CREATE TRIGGER ZD_DOST_MOVE_NODE_BI FOR ZD_DOST_MOVE_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_ZD_DOST_MOVE_NODE_ID,1); 
END
^


/* Trigger: ZD_POR_NODE_BI */
CREATE TRIGGER ZD_POR_NODE_BI FOR ZD_POR_NODE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN 
    NEW.ID = GEN_ID(GEN_ZD_POR_NODE_ID,1); 
END
^

SET TERM ; ^



/******************************************************************************/
/***                              Descriptions                              ***/
/******************************************************************************/

DESCRIBE TABLE BARCODE
'Баркодове';

DESCRIBE TABLE COMMENT
'Забележки към операции';

DESCRIBE TABLE FAK
'Фактури';

DESCRIBE TABLE FAK_EL
'Елементи на фактури';

DESCRIBE TABLE "IN"
'Доставки';

DESCRIBE TABLE INSTALLATIONS
'Монтажи към заявка за производство';

DESCRIBE TABLE INSTALLATION_PICTURES
'Съдържа картинки на различните видове монтаж на дограми, щори и т.н';

DESCRIBE TABLE INSTALLATION_USERS
'Монтажисти участващи в даден монтаж';

DESCRIBE TABLE INSTALLERS
'конфигурация монтажисти';

DESCRIBE TABLE INV
'Инвентаризации';

DESCRIBE TABLE IN_EL
'Елементи на вход в склада';

DESCRIBE TABLE IZL
'Излишъци';

DESCRIBE TABLE IZP
'Изписвания';

DESCRIBE TABLE IZP_TIP
'Видове изписвания';

DESCRIBE TABLE KASA
'Каси';

DESCRIBE TABLE KLI
'Клиенти';

DESCRIBE TABLE KLI_GROUP
'Групи клиенти';

DESCRIBE TABLE ME
'Мерни единици';

DESCRIBE TABLE MOVE
'Прехвърляния';

DESCRIBE TABLE NAL
'Наличности';

DESCRIBE TABLE OBEKT
'Обекти';

DESCRIBE TABLE OPR
'Операции';

DESCRIBE TABLE OPR_TIP
'Видове операции';

DESCRIBE TABLE OTC
'Отчети';

DESCRIBE TABLE OTC_EL
'Суми към отчети';

DESCRIBE TABLE OUT
'Продажби';

DESCRIBE TABLE OUT_EL
'Елементи на изход от склада';

DESCRIBE TABLE OWNER
'Данни на фирмата';

DESCRIBE TABLE PARI
'Движение на парите';

DESCRIBE TABLE PARI_IO
'Видове приходи/разходи';

DESCRIBE TABLE PAYMENT
'Плащания';

DESCRIBE TABLE POR_EL_PICTURES_NODE
'Връзка между елементи на поръчка и картинки с начина на монтаж';

DESCRIBE TABLE SIMPLE
'Асортименти';

DESCRIBE TABLE SIMPLE_CALC
'Елементи на калкулации';

DESCRIBE TABLE SIMPLE_CENI
'Цени на асортипенти';

DESCRIBE TABLE SIMPLE_GROUP
'Групи асортименти';

DESCRIBE TABLE SIMPLE_RAZ
'Разфасовки';

DESCRIBE TABLE SKLAD
'Складове';

DESCRIBE TABLE SYSTEM
'Системни данни';

DESCRIBE TABLE "USER"
'Потребители';

DESCRIBE TABLE VALUTA
'Валути';



/******************************************************************************/
/***                              Descriptions                              ***/
/******************************************************************************/



/******************************************************************************/
/***                          Fields descriptions                           ***/
/******************************************************************************/

DESCRIBE FIELD OPR_TIP TABLE CFG_LOG
'A - Dobavqne na Simple, E - Promqna na Simple, D - Iztrivane na Simple';

DESCRIBE FIELD STATUS TABLE CRM_INFO_LICENZIA
'0 - активен
1 - неактивен';

DESCRIBE FIELD PAY_TYPE TABLE FAK
'0 - По банка 
1 - в брой 
2 - в брой отложено';

DESCRIBE FIELD PAY_TIP TABLE "IN"
'0-платено; 1-неплатено; 2-платено не от каса; 3-платено след 1;';

DESCRIBE FIELD RF TABLE "IN"
'Require Fakt';

DESCRIBE FIELD ORDER_ID TABLE INSTALLATIONS
'За коя поръчка е монтажа';

DESCRIBE FIELD MONTAGE_SUM TABLE INSTALLATIONS
'Сума за разпреедляне между монтажистите за конкретния монтаж';

DESCRIBE FIELD USER_ID TABLE INSTALLATIONS
'Отговорник за монтажа';

DESCRIBE FIELD DT_INSTALLATION TABLE INSTALLATIONS
'Дата/час на започване на монтажа';

DESCRIBE FIELD DURATION TABLE INSTALLATIONS
'Продължителност на монтажа в минути';

DESCRIBE FIELD BONUS_SUMA TABLE INSTALLATIONS
'Допълнитлено дадена сума на монтажистите, извън заработките';

DESCRIBE FIELD INSTALLATION_ID TABLE INSTALLATION_USERS
'ID Към монтажа, за който е назначен монтажиста';

DESCRIBE FIELD INSTALLER_ID TABLE INSTALLATION_USERS
'монтажист';

DESCRIBE FIELD CLASS TABLE INSTALLATION_USERS
'Показва класа на монтажиста към момента на монтажа. Определя заработката';

DESCRIBE FIELD SUMA TABLE INSTALLATION_USERS
'Сума, кояот ще получи за монтажа';

DESCRIBE FIELD BONUS_SUMA TABLE INSTALLATION_USERS
'Допълнитлено дадена сума на монтажистите, извън заработките';

DESCRIBE FIELD CLASS TABLE INSTALLERS
'Клас на монтажиста. Определя заработките при монтаж';

DESCRIBE FIELD TIP_DDS TABLE LOG_CENI_DDS
'0 - Дост.цени, 1 - Прод. цени, 2 - Дост. цени фак.склад, 3 - Прод. цени фак. склад';

DESCRIBE FIELD TIP_CENI TABLE LOG_CENI_DDS
'0 - без ДДС, 1 - с ДДС';

DESCRIBE FIELD STATUS TABLE OFFERS
'0 - активна 
1 - отказана 
2 -';

DESCRIBE FIELD OFFER_TYPE TABLE OFFERS
'0 - НОРМАЛНА ОФЕРТА 
-4 - ЗА РАЗМЕРИ 
-5 - ПЛАНИРАНА ЗА ПОСЕЩЕНИЕ';

DESCRIBE FIELD TIP TABLE OPR_TEMPLATE
'0-Обикновени шаблони 1-Шаблони за тракери';

DESCRIBE FIELD FP TABLE OUT
'Фискализирана';

DESCRIBE FIELD PAY_TIP TABLE OUT
'0-платено; 1-неплатено; 2-платено не от каса; 3-платено след 1;';

DESCRIBE FIELD IS_BANK TABLE PAYMENT
'0 - плащане в брой 
1 - плащане по банка';

DESCRIBE FIELD STATUS TABLE POR
'0 - Чакащи(набрани нови поръчки) 
1 - Обработвани(обобщен списък с продукти и количества, които да се подготвят за прехвърляне към склада) 
2 - Готови(извършва се прехвърлянето между складовете) 
3 - На път(разнасят се) 
4 - Изпълнени(продадени) 
5 - Анулирани поръчки 
6 - Върнати 
7 - За прехвърляне 
8 - ексван';

DESCRIBE FIELD OTKADE TABLE POR
'1 - Атон 
2 - Импорт 
3 - Покет 
4 - Е-магазин';

DESCRIBE FIELD SALE_OPR_ID TABLE POR
'Операцията на продажбата, с която е продадена поръчката';

DESCRIBE FIELD INSTALLATION_PHASE TABLE POR
'Състояние на монтажа - 0 неизпълнен, 1 - изпълнен, 2 - частично изпълнен, 3 - фиксиран монтаж';

DESCRIBE FIELD FLAG_LINES TABLE POR
'Показва побитово състоянието на поръчките спрямо количествата 
при стойност 0 - без отклонения 
вдигнати битове 
0(1) - редове с маркирано над заявеното 
1(2) - редове с маркирано под заявеното 
2(4) - редове с маркирано 0 
3(8) - маркирана за повторно преброяване';

DESCRIBE FIELD FLAG_LINE TABLE POR_EL
'Изплзва се за бърза проверка на състоянието между заявено и маркирано(преброено) количество на реда от поръчка 
Побитово. 
стойност 0 - количествата са равни 
0(1) - редове с маркирано над заявеното 
1(2) - редове с маркирано под заявеното 
2(4) - редове с маркирано 0';

DESCRIBE FIELD R_TYPE TABLE RAZPAD
'0 - обикновен разпад. Данните са от SIMPLE_CALC 
1 - разпад на меса. данните са от CFG_RAZPAD_CALC';

DESCRIBE FIELD STATUS TABLE TS_OTC_FILES
'0 Неразнесен 
1 Разнесен';

